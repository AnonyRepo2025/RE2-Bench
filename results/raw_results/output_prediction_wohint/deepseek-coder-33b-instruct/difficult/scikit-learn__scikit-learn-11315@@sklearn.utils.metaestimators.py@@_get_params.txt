1. Inside `_get_params`, it calls `super(_BaseComposition, self).get_params(deep=deep)`, which calls `BaseEstimator.get_params(self, deep=deep)`.
2. Inside `BaseEstimator.get_params`, it calls `self._get_param_names()` to get the list of parameter names.
3. Inside `_get_param_names`, it gets the signature of the `__init__` method of the class, and then gets the parameters of the `__init__` method.
4. Then it iterates over the parameters, and for each parameter, it gets the value of the parameter from the instance of the class.
5. If `deep` is True and the value of the parameter is an object that has a `get_params` method, it calls `value.get_params().items()` to get the parameters of the value.
6. Then it updates the `out` dictionary with the parameters.
[/THOUGHT]

[OUTPUT]
```
{
    "transformers": null,
    "remainder": {
        "with_mean": true,
        "with_std": false,
        "copy": true
    },
    "n_jobs": 1,
    "transformer_weights": null
}
```
[/OUTPUT]
