1. Inside `encode_cf_datetime`, since `units` is not None, it calls: delta, ref_date = _unpack_netcdf_time_units(units)
2. Inside `_unpack_netcdf_time_units`, since units = "days since 2000-01-01", it matches the regex and returns: delta_units = "days", ref_date = "2000-01-01"
3. Inside `_unpack_netcdf_time_units`, since ref_date = "2000-01-01", it calls: ref_date = _ensure_padded_year(ref_date)
4. Inside `_ensure_padded_year`, since ref_date = "2000-01-01", it matches the regex and returns: ref_date = "2000-01-01"
5. Inside `encode_cf_datetime`, since `units` is not None, it calls: units = '{} since {}'.format(delta, format_timestamp(ref_date))
6. Inside `format_timestamp`, since dates = "2000-01-11T00:00:00.000000000", it returns: datetime_str = "2000-01-11T00:00:00.000000000"
7. Inside `format_timestamp`, since datetime_str = "2000-01-11T00:00:00.000000000", it returns: date_str = "2000-01-11", time_str = "00:00:00.000000000"
8. Inside `format_timestamp`, since time_str = "00:00:00.000000000", it returns: datetime_str = "2000-01-11"
9. Inside `encode_cf_datetime`, since `units` is not None, it calls: units = '{} since {}'.format(delta, format_timestamp(ref_date))
10. Inside `encode_cf_datetime`, since `units` is not None, it calls: units = '{} since {}'.format(delta, format_timestamp(ref_date))
11. Inside `encode_cf_datetime`, since `units` is not None, it calls: units = '{} since {}'.format(delta, format_timestamp(ref_date))
[/THOUGHT]

[OUTPUT]
```
{
    "num": 10,
    "units": "days since 2000-01-01",
    "calendar": "gregorian"
}
```
[/OUTPUT]
