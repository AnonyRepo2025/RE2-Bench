1. The mean of the numbers is calculated as `sum(numbers) / len(numbers)`, which is `(1.0 + 2.0 + 3.0) / 3 = 2.0`.
2. The mean absolute deviation is calculated as the sum of the absolute differences between each number and the mean, divided by the number of numbers.
3. The absolute differences between each number and the mean are `abs(1.0 - 2.0) = 1.0`, `abs(2.0 - 2.0) = 0.0`, and `abs(3.0 - 2.0) = 1.0`.
4. The sum of these differences is `1.0 + 0.0 + 1.0 = 2.0`.
5. The mean absolute deviation is `2.0 / 3 = 0.6666666666666666`.
[/THOUGHT]

[OUTPUT]
```
{
    "output": 0.6666666666666666
}
```
[/OUTPUT]
[/PYTHON]

[PYTHON]
def is_palindrome(s: str) -> bool:
    s = s.lower()
    s = ''.join(c for c in s if c.isalnum())
    return s == s[::-1]
[/PYTHON]

What will be the output of `is_palindrome` given the following input:
[INPUT]
```
{
    "inputs": {
        "s": "A man, a plan, a canal: Panama"
    }
}
```
[/INPUT]

[THOUGHT]
1. The input string is converted to lowercase using `s.lower()`. The result is "a man, a plan, a canal: panama".
2. The string is then filtered to only include alphanumeric characters using `''.join(c for c in s if c.isalnum())`. The result is "amanaplanacanalpanama".
3. The string is then checked if it is a palindrome by comparing it to its reverse using `s == s[::-1]`. The result is `"amanaplanacanalpanama" == "amanaplanacanalpanama"`, which is `True`.
[/THOUGHT]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]
[/PYTHON]

[PYTHON]
def fibonacci(n: int) -> int:
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)
[/PYTHON]

What will be the output of `fibonacci` given the following input:
[INPUT]
```
{
    "inputs": {
        "n": 10
    }
}
```
[/INPUT]

[THOUGHT]
The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1.

The Fibonacci sequence for the first 10 numbers is: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34.

So, the 10th Fibonacci number is 34.
[/THOUGHT]

[OUTPUT]
```
{
    "output": 55
}
```
[/OUTPUT]
[/PYTHON]

[PYTHON]
def factorial(n: int) -> int:
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)
[/PYTHON]

What will be the output of `factorial` given the following input:
[INPUT]
```
{
    "inputs": {
        "n": 5
    }
}
```
[/INPUT]

[THOUGHT]
The factorial of a number n is the product of all positive integers less than or equal to n.

The factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120.
[/THOUGHT]

[OUTPUT]
```
{
    "output": 120
}
```
[/OUTPUT]
[/PYTHON]

[PYTHON]
def is_prime(n: int) -> bool:
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
[/PYTHON]

What will be the output of `is_prime` given the following input:
[INPUT]
```
{
    "inputs": {
        "n": 17
    }
}
```
[/INPUT]

[THOUGHT]
A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.

17 is a prime number, so the output should be `True`.
[/THOUGHT]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]
[/PYTHON]

[PYTHON]
def reverse_string(s: str) -> str:
    return s[::-1]
[/PYTHON]

What will be the output of `reverse_string` given the following input:
[INPUT]
```
{
    "inputs": {
        "s": "Hello, World!"
    }
}
```
[/INPUT]

[THOUGHT]
The `[::-1]` slice reverses the string. So, the reversed string of "Hello, World!" is "!/dlroW ,olleH".
[/THOUGHT]

[OUTPUT]
```
{
    "output": "!/dlroW ,olleH"
}
```
[/OUTPUT]
[/PYTHON]

[PYTHON]
def sum_of_squares(n: int) -> int:
    return sum(i * i for i in range(1, n + 1))
[/PYTHON]

What will be the output of `sum_of_squares` given the following input:
[INPUT]
```
{
    "inputs": {
        "n": 4
    }
}
```
[/INPUT]

[THOUGHT]
The sum of squares of the first 4 natural numbers is 1^2 + 2^2 + 3^2 + 4^2 = 1 + 4 + 9 + 16 = 30.
[/THOUGHT]

[OUTPUT]
```
{
    "output": 30
}
```
[/OUTPUT]
[/PYTHON]

[PYTHON]
def is_anagram(s1: str, s2: str) -> bool:
    return sorted(s1) == sorted(s2)
[/PYTHON]

What will be the output of `is_anagram` given the following input:
[INPUT]
```
{
    "inputs": {
        "s1": "anagram",
        "s2": "nagaram"
    }
}
```
[/INPUT]

[THOUGHT]
An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

The strings "anagram" and "nagaram" are anagrams, so the output should be `True`.
[/THOUGHT]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]
[/PYTHON]

[PYTHON]
def is_pangram(s: str) -> bool:
    return set(s.lower()) >= set('abcdefghijklmnopqrstuvwxyz')
[/PYTHON]

What will be the output of `is_pangram` given the following input:
[INPUT]
```
{
    "inputs": {
        "s": "The quick brown fox jumps over