[THOUGHT]
The function `extract_code_from_html_text` processes HTML text to extract code blocks. Here's the step-by-step reasoning:

1. **Initialization**: The `HtmlUtil` instance has various mark constants, including `CODE_MARK = "-CODE-"`.

2. **Format HTML text**: 
   - The input HTML is parsed with BeautifulSoup.
   - All `<pre>` and `<blockquote>` tags are replaced with `-CODE-` (there are two `<pre>` tags in the input).
   - There are no `<ul>` or `<ol>` tags, so no list processing occurs.
   - For `<p>` tags:
     - First `<p>` contains "This is a paragraph." (ends with punctuation → unchanged).
     - Second `<p>` contains "Another paragraph." (ends with punctuation → unchanged).
   - The formatted text becomes: "Title This is a paragraph. -CODE- Another paragraph. -CODE-" (after removing HTML tags and entities).

3. **Check for code blocks**: The formatted text contains two `-CODE-` markers, so proceed with extraction.

4. **Extract code from original HTML**:
   - Parse the original HTML again to find all `<pre>` and `<blockquote>` tags (two `<pre>` tags).
   - Extract text content from each tag:
     - First `<pre>`: `print('Hello, world!')`
     - Second `<pre>`: Contains a `<code>` child. `get_text()` returns `for i in range(4):\n                print(i)`.

5. **Return code list**: The function returns a list of these two code strings.

The output is a list containing the extracted code blocks.
[/THOUGHT]

[OUTPUT]
{
    "output": [
        "print('Hello, world!')",
        "for i in range(4):\n                print(i)"
    ]
}
[/OUTPUT]