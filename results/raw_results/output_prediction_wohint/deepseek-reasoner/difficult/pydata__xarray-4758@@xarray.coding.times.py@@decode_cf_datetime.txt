The function `decode_cf_datetime` processes the input as follows:

1. **Input Validation and Setup**:  
   - `num_dates` is provided as a string `"[12300 12301 12302 12303 12304]"`, which is interpreted as a list of integers: `[12300, 12301, 12302, 12303, 12304]`.  
   - `units` is `"hour since 1680-01-01 00:00:00.500000"`.  
   - `calendar` is `"standard"` (valid for pandas processing).  

2. **Units Parsing**:  
   - `_unpack_netcdf_time_units` splits `units` into `delta_units = "hour"` and `ref_date = "1680-01-01 00:00:00.500000"`.  
   - `_ensure_padded_year` confirms `ref_date` is correctly formatted (no padding needed).  

3. **Time Conversion**:  
   - `_netcdf_to_numpy_timeunit` converts `"hour"` to `"h"` (nanoseconds per hour = 3,600,000,000,000).  
   - `ref_date` is converted to a pandas `Timestamp`: `1680-01-01 00:00:00.500000`.  

4. **Date Calculation**:  
   - Each value in `num_dates` is multiplied by nanoseconds per hour:  
     - `12300 * 3,600,000,000,000 = 44,280,000,000,000,000` nanoseconds.  
   - A `Timedelta` is added to `ref_date` for each value:  
     - `ref_date + pd.Timedelta(12300 hours) = 1681-05-28 12:00:00.500000`  
     - Subsequent values increment by 1 hour: `13:00:00.500000`, `14:00:00.500000`, etc.  

5. **Result**:  
   - The output is a list of ISO 8601 formatted datetime strings representing the calculated timestamps.  

[OUTPUT]
{
    "decoded_dates": [
        "1681-05-28T12:00:00.500000",
        "1681-05-28T13:00:00.500000",
        "1681-05-28T14:00:00.500000",
        "1681-05-28T15:00:00.500000",
        "1681-05-28T16:00:00.500000"
    ]
}
[/OUTPUT]