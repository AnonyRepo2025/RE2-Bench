The `_get_kernel_params` method processes kernel parameters based on the kernel type and instance attributes. Here's the step-by-step reasoning:

1. **Initialize `params` dictionary**:  
   Since `self.kernel_params` is `null` (None), `params` starts as an empty dict: `{}`.

2. **Check kernel type**:  
   The kernel is `"polynomial"` (not callable and not `'precomputed'`), so we proceed to add valid parameters.

3. **Process kernel-specific parameters**:  
   For the polynomial kernel, the valid parameters (from `KERNEL_PARAMS['polynomial']`) are `['gamma', 'coef0', 'degree']`. We check each:
   - `gamma`: `self.gamma` is `null` (None) → skipped.
   - `coef0`: `self.coef0` is `0.1` → added to `params` as `'coef0': 0.1`.
   - `degree`: `self.degree` is `3.1` → added to `params` as `'degree': 3.1`.

4. **Result**:  
   The final `params` dictionary is `{'coef0': 0.1, 'degree': 3.1}`.

[OUTPUT]
```
{
    "coef0": 0.1,
    "degree": 3.1
}
```
[/OUTPUT]