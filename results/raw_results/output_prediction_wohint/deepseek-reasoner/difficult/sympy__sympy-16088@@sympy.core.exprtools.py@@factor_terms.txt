[THOUGHT]
The function `factor_terms` is called with the input expression "R3 + R4 + 4050". After sympifying, this becomes an Add expression with three terms: the symbols R3 and R4, and the integer 4050. 

1. **Content and primitive extraction**: `expr.as_content_primitive()` returns `(1, R3 + R4 + 4050)` since the GCD of the coefficients (1, 1, 4050) is 1.
2. **Handling the Add expression**: The primitive part `R3 + R4 + 4050` is split into terms: `[R3, R4, 4050]`.
3. **Sign check**: For each term, `a.as_coeff_Mul()[0].extract_multiplicatively(-1)` is not None (since coefficients are integers), so the sign is flipped: `cont` becomes -1, and terms become `[-R3, -R4, -4050]`.
4. **GCD terms**: The expression `-R3 - R4 - 4050` is processed by `gcd_terms`, which factors out -1, resulting in `-1 * (R3 + R4 + 4050)`.
5. **Recombine with coefficient**: `_keep_coeff(-1, -(R3 + R4 + 4050))` computes `(-1) * (-(R3 + R4 + 4050)) = R3 + R4 + 4050`.

The expression remains unchanged as there are no common factors to extract. The output is the string representation of the original expression.
[/THOUGHT]

[OUTPUT]
{
    "expr": "R3 + R4 + 4050"
}
[/OUTPUT]