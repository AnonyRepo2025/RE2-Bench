The `fit` method in the `FitnessFunc` class processes the input data to find optimal change points in a time series using the Bayesian Blocks algorithm. Given the inputs:

- `t`: Array of time values (unsorted).
- `x`: Array of corresponding values at each time.
- `sigma`: Measurement uncertainty (0.1).

### Step-by-Step Reasoning:
1. **Input Validation and Sorting**:
   - The `validate_input` method sorts `t` and rearranges `x` to maintain correspondence. Sorted `t`:
     ```
     [4.36037718, 7.5346256, 19.09110312, 23.01852682, 27.95603418, 30.56970193, 33.07503047, 46.9944514, 49.91933799, 55.27649668, 57.20041992, 57.22924692, 66.89240597, 74.77187739, 76.85540143, 86.41675651, 88.34940223, 95.3071847, 98.03315837, 99.45505108]
     ```
   - Sorted `x` (based on `t` order):
     ```
     [-0.08552405, 0.01953465, -0.01277348, -0.13414035, -0.04493044, -0.05559449, 0.04677171, 0.09920921, 0.83458264, -0.15514249, -0.114772, -0.05104932, -0.0111204, -0.07281792, 0.13896028, -0.17490694, 0.04186395, -0.1801888, -0.07329511, -0.10270618]
     ```

2. **Precompute Values for Fitness Calculation**:
   - Since `_fitness_args` is assumed to include `'a_k'`, `'b_k'`, and `'c_k'` (typical for point measures):
     - `ak_raw = 100.0` (constant for all points, since `1 / sigma^2 = 1 / 0.01 = 100`).
     - `bk_raw = x * 100`.
     - `ck_raw = (x^2) * 100`.

3. **Edge Calculation**:
   - Edges are midpoints between sorted `t` values, with endpoints at the first and last `t`:
     ```
     edges = [4.36037718, 5.94750139, 13.31286486, 21.05531497, 25.4872805, 29.263368055, ... , 99.45505108] (21 values)
     ```

4. **Bayesian Blocks Algorithm**:
   - Initialize `best` and `last` arrays to store optimal fitness values and change point indices.
   - Compute `ncp_prior` (change point prior) using `p0=0.05` and `N=20`:
     ```
     ncp_prior = 4 - log(73.53 * 0.05 * 20^{-0.478}) â‰ˆ 4.294
     ```
   - Iterate over `R` (0 to 19) to compute fitness for potential blocks:
     - For each `R`, compute cumulative sums for `a_k`, `b_k`, and `c_k` over possible blocks.
     - Calculate `fit_vec` using the fitness function for point measures:  
       `fitness = -b_k^2 / (4 * a_k) + c_k`.
     - Determine optimal change points by maximizing `A_R = fit_vec - ncp_prior + previous best values`.

5. **Change Point Extraction**:
   - After processing all `R`, backtrack through `last` to find optimal change point indices:
     ```
     change_points = [0, 8, 20]  # Indices in the edges array
     ```
   - The change points correspond to the edges:
     - Index 0: First edge (`4.36037718`).
     - Index 8: Edge after the 8th block (between `49.91933799` and `55.27649668`).
     - Index 20: Last edge (`99.45505108`).

### Output:
The function returns the edges at the identified change points:
```
[4.36037718, 49.91933799, 99.45505108]
```

[OUTPUT]
[4.36037718, 49.91933799, 99.45505108]
[/OUTPUT]