[THOUGHT]
Let's simulate the execution of `text2int` with input "thirty-two":

1. **Initialization**: The `Words2Numbers` instance is initialized with the provided dictionaries. The `text2int` method is called with `textnum="thirty-two"`.

2. **Hyphen Replacement**: The first operation is `textnum.replace('-', ' ')`, which converts "thirty-two" → "thirty two".

3. **Word Splitting**: The text is split into words: ["thirty", "two"].

4. **Processing "thirty"**:
   - Not in `ordinal_words` (which contains "first", "second", etc.).
   - Check for ordinal endings:
     - Doesn't end with "ieth" → no change
     - Doesn't end with "th" → no change
   - "thirty" is in `numwords` → `scale=1`, `increment=30`
   - Update: `current = 0*1 + 30 = 30`
   - `scale (1) <= 100` → no result update
   - Set `onnumber=True`

5. **Processing "two"**:
   - Not in `ordinal_words`
   - No ordinal ending matches
   - "two" is in `numwords` → `scale=1`, `increment=2`
   - Update: `current = 30*1 + 2 = 32`
   - `scale (1) <= 100` → no result update
   - `onnumber` remains True

6. **Finalization**:
   - After the loop, `onnumber=True` → `curstring += repr(0 + 32)`
   - `curstring` becomes "32" (since `result=0` and `current=32`)

7. **Output**: The method returns the string "32".

The key steps are:
- Hyphen removal creates two separate words
- Both words are recognized as number words
- "thirty" sets current to 30
- "two" updates current to 32
- No large scales (thousand/million) trigger intermediate result updates
- Final number 32 is appended to the output string
[/THOUGHT]

[OUTPUT]
```
{
    "output": "32"
}
```
[/OUTPUT]