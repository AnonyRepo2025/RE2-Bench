The function `split_super_sub` processes the input string "alpha^+_1" as follows:

1. **Initialization**: The string is "alpha^+_1". Variables are initialized: `pos=0`, `name=None`, `supers=[]`, `subs=[]`.
2. **First segment (pos=0 to 5)**:
   - The next break is at position 5 (the '^' character).
   - The segment "alpha" is extracted. Since `name` is `None`, it becomes the base name: `name="alpha"`.
3. **Second segment (pos=5 to 7)**:
   - The next break is at position 7 (the '_' character).
   - The segment "^+" is extracted. It starts with '^', so the substring "+" is added to `supers`: `supers=["+"]`.
4. **Third segment (pos=7 to 9)**:
   - The end of the string is reached.
   - The segment "_1" is extracted. It starts with '_' (but not '__'), so the substring "1" is added to `subs`: `subs=["1"]`.
5. **Regex check**: The base name "alpha" is checked against the regex `^([a-zA-Z]+)([0-9]+)$`. It doesn't match (no trailing digits), so no further processing occurs.
6. **Result**: The function returns the tuple `("alpha", ["+"], ["1"])`.

The output is represented as a JSON array since the function returns a tuple.

[OUTPUT]
["alpha", ["+"], ["1"]]
[/OUTPUT]