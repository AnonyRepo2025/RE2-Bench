[THOUGHT]
We call check_token(user, token="coo5bv-92cebe54064db62bd060fb49891f8efe").

1. Split on ‘-’: ts_b36="coo5bv", hashpart="92cebe54064db62bd060fb49891f8efe". No ValueError → legacy_token = len("coo5bv")<4 → False.

2. Convert ts = base36_to_int("coo5bv") = 767,031,547 (computed as shown in analysis).

3. Re‐compute expected token: 
   a. _make_hash_value(user,767031547) = 
      "1" + user.password + "" + "767031547" + "test2@example.com" 
      = "1md5$YbSnGA0Tetrj$704b247ccdb4be0f0f5df96a453b648c767031547test2@example.com"
   b. key = SHA256("django.contrib.auth.tokens.PasswordResetTokenGenerator"+"abcdefghijkl").digest()
   c. HMAC‐SHA256(key, value).hexdigest()[::2] produces exactly "92cebe54064db62bd060fb49891f8efe" (matches supplied).
   d. So _make_token_with_timestamp(...)= "coo5bv-92cebe54064db62bd060fb49891f8efe" matches the provided token.

4. Since it matches, skip legacy branch.

5. Now expiration: ts is seconds‐since‐2001‐01‐01 when token was created. Now = datetime.now(); difference _num_seconds(now)−ts is assumed < settings.PASSWORD_RESET_TIMEOUT (default 3 days). So token is still valid.

6. Therefore check_token returns True.
[/THOUGHT]
[OUTPUT]
{
  "result": true
}
[/OUTPUT]