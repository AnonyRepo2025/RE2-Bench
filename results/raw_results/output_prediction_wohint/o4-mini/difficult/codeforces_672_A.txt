[THOUGHT]
1. The code concatenates the digits of numbers 1 through 369, then adds the first digit of 370 (because it appends [3,7,0] then pops twice, removing 0 and 7).  
   - 1–9 contribute 9 digits.  
   - 10–99 contribute 90×2 = 180 digits.  
   - 100–369 contribute 270×3 = 810 digits.  
   - plus one digit “3” from 370.  
   Total = 9 + 180 + 810 + 1 = 1000 digits.  
2. After popping, li has length 1000. We need the 423rd digit, i.e. li[422].  
3. Positions 1–9: 1-digit numbers.  
   Positions 10–189: 2-digit numbers.  
   Positions 190–999: 3-digit numbers (100–369).  
4. 423 > 189, so it lies in the 3-digit block. Offset into that block = 423 – 189 = 234.  
5. Map offset 234 to a specific 3-digit number:  
   - zero-based index = 234 – 1 = 233.  
   - number index = 233 // 3 = 77 ⇒ the 78th number in [100,…] ⇒ 100 + 77 = 177.  
   - digit index = 233 % 3 = 2 ⇒ the 3rd digit of “177” ⇒ “7”.  
6. Therefore, the code prints 7.
[/THOUGHT]

[OUTPUT]
```
{
    "output": 7
}
```
[/OUTPUT]