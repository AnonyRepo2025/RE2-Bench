[THOUGHT]
We call tempfactory.mktemp("world"), with numbered=True by default.

1. mktemp sees numbered=True, so it does:
     p = make_numbered_dir(root=self.getbasetemp(), prefix="world")

2. getbasetemp():
   - _basetemp is None
   - _given_basetemp is not None, so basetemp = Path("/tmp/pytest-of-root/pytest-0/test_mktemp0")
   - ensure_reset_dir(...) makes sure that directory exists and is empty
   - basetemp.resolve() yields the same absolute Path
   - stores this in self._basetemp and returns it

3. make_numbered_dir(root=..., prefix="world"):
   - lists existing entries in the root that start with "world" → none found
   - parse_num yields an empty sequence → max_existing = -1
   - new_number = max_existing + 1 = 0
   - new_path = root / "world0" → Path("/tmp/pytest-of-root/pytest-0/test_mktemp0/world0")
   - mkdir() succeeds
   - _force_symlink creates a "worldcurrent" link pointing to "world0" (side‐effect)
   - returns new_path

4. mktemp logs via _trace and returns that Path object.

Therefore mktemp returns Path("/tmp/pytest-of-root/pytest-0/test_mktemp0/world0").
[/THOUGHT]
[OUTPUT]
{
  "p": "/tmp/pytest-of-root/pytest-0/test_mktemp0/world0"
}
[/OUTPUT]

[THOUGHT]
Now for `_build_repr(self)` when `self.n_groups = 3`.

1. cls = self.__class__; suppose this is the `LeavePGroupsOut` class (it is the only one in scikit‐learn CV module that takes `n_groups`).
2. init_signature picks up the __init__ signature, which has one parameter `n_groups`.
3. args = ['n_groups']
4. It then collects `params = {'n_groups': getattr(self, 'n_groups')}` → 3
5. `_pprint` of `{'n_groups': 3}` yields the string "n_groups=3"
6. Returns `"LeavePGroupsOut(n_groups=3)"`.
[/THOUGHT]
[OUTPUT]
{
  "repr": "LeavePGroupsOut(n_groups=3)"
}
[/OUTPUT]