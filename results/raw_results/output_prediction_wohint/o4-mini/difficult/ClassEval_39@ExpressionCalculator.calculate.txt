[THOUGHT]
We need to compute calculate("2 + 4 / 4").

1. transform:
   - Remove spaces: "2+4/4"
   - No unary “-” to rewrite, so result = "2+4/4".

2. prepare builds a postfix stack:
   - Input tokens: 2, +, 4, /, 4
   - Shunting-yard yields postfix: 2 4 4 / +
   So postfix_stack = deque(['2','4','4','/','+']).

3. In calculate:
   - Reverse postfix_stack to process in correct order by popping from the right:
     deque(['+','/','4','4','2'])
   - Initialize result_stack = [].
   - Pop '2' → not operator → push '2'.
     result_stack = ['2']
   - Pop '4' → push '4'.
     ['2','4']
   - Pop '4' → push '4'.
     ['2','4','4']
   - Pop '/' → operator:
       pop second_value='4', first_value='4'
       compute 4/4 = 1 → push '1'
     result_stack = ['2','1']
   - Pop '+' → operator:
       pop second_value='1', first_value='2'
       compute 2+1 = 3 → push '3'
     result_stack = ['3']
   - End loop. result_stack contains ['3'].
   - Return float(eval('*'.join(result_stack))) → float(eval("3")) → 3.0

So the final result is 3.0.
[/THOUGHT]

[OUTPUT]
```
{
    "output": 3.0
}
```
[/OUTPUT]