[THOUGHT]
Let's step through the function `split_super_sub` with input `"alpha^+_1"`.

1. The input string is `"alpha^+_1"`, which is not empty, so we proceed.
2. Initialize: `pos = 0`, `name = None`, `supers = []`, `subs = []`.
3. Enter the while loop (`pos < len(text)`):

   - **First iteration:**
     - `start = pos + 1 = 1`
     - `text[pos:pos+2]` is `"al"`, not `"__"`, so `start` remains 1.
     - `pos_hat = text.find('^', start) = text.find('^', 1) = 5`
     - `pos_usc = text.find('_', start) = text.find('_', 1) = 7`
     - `pos_next = min(5, 7) = 5`
     - `part = text[pos:pos_next] = text[0:5] = "alpha"`
     - `pos = pos_next = 5`
     - Since `name` is `None`, set `name = "alpha"`

   - **Second iteration:**
     - `start = pos + 1 = 6`
     - `text[pos:pos+2] = text[5:7] = "^+"`, not `"__"`, so `start` remains 6.
     - `pos_hat = text.find('^', 6) = -1` (no more `^`)
     - `pos_usc = text.find('_', 6) = 7`
     - `pos_next = min(-1, 7) = 7`
     - `part = text[5:7] = "^+"`
     - `pos = pos_next = 7`
     - Since `part.startswith('^')`, append `part[1:] = "+"` to `supers`. Now, `supers = ["+"]`.

   - **Third iteration:**
     - `start = pos + 1 = 8`
     - `text[pos:pos+2] = text[7:9] = "_1"`, not `"__"`, so `start` remains 8.
     - `pos_hat = text.find('^', 8) = -1`
     - `pos_usc = text.find('_', 8) = -1`
     - `pos_next = min(-1, -1) = -1`
     - `part = text[7:-1] = text[7:] = "_1"`
     - `pos = pos_next = -1` (this will exit the loop)
     - Since `part.startswith('_')`, append `part[1:] = "1"` to `subs`. Now, `subs = ["1"]`.

4. Exit the loop (`pos = -1 < len(text)` is False).
5. Now, check if `name` matches the regex `^([a-zA-Z]+)([0-9]+)$`:
   - `name = "alpha"`, which does not match (no digits at the end), so nothing changes.
6. Return `(name, supers, subs)` which is `("alpha", ["+"], ["1"])`.
[/THOUGHT]

[OUTPUT]
```
{
    "result": ["alpha", ["+"], ["1"]]
}
```
[/OUTPUT]