[THOUGHT]
Let's step through the function `extract_code_from_html_text` with the given input.

1. The input HTML contains:
   - <h1>Title</h1>
   - <p>This is a paragraph.</p>
   - <pre>print('Hello, world!')</pre>
   - <p>Another paragraph.</p>
   - <pre><code>for i in range(4):
                print(i)</code></pre>

2. The function first calls `format_line_html_text(html_text)`:
   - It parses the HTML with BeautifulSoup.
   - Finds all <pre> and <blockquote> tags. There are two <pre> tags:
     - <pre>print('Hello, world!')</pre>
     - <pre><code>for i in range(4): print(i)</code></pre>
   - For each such tag, it sets `tag.string = self.CODE_MARK` (i.e., "-CODE-").
     - The first <pre> is replaced with "-CODE-".
     - The second <pre> contains a <code> tag, so `tag.string = "-CODE-"` replaces the entire content of <pre> with "-CODE-".
   - Next, it processes <ul> and <ol> tags, but there are none.
   - Then, it processes <p> tags:
     - <p>This is a paragraph.</p> → text ends with ".", so it stays as is.
     - <p>Another paragraph.</p> → text ends with ".", so it stays as is.
   - The soup is now:
     - <h1>Title</h1>
     - <p>This is a paragraph.</p>
     - <pre>-CODE-</pre>
     - <p>Another paragraph.</p>
     - <pre>-CODE-</pre>
   - `gensim.utils.decode_htmlentities(soup.get_text())` just returns the text as is (no HTML entities).
   - The text is:
     ```
     Title
     This is a paragraph.
     -CODE-
     Another paragraph.
     -CODE-
     ```
   - This is passed to `__format_line_feed`, but the code for that is not shown. Let's assume it returns the text unchanged (since it's not relevant for code extraction).

3. Back in `extract_code_from_html_text`:
   - If self.CODE_MARK ("-CODE-") is not in the text, return []. But it is present.
   - code_index_start = 0
   - Parse the HTML again with BeautifulSoup.
   - Find all <pre> and <blockquote> tags. There are two <pre> tags:
     - <pre>print('Hello, world!')</pre>
     - <pre><code>for i in range(4): print(i)</code></pre>
   - code_count = text_with_code_tag.count(self.CODE_MARK) = 2
   - For code_index in [0, 1]:
     - code_tag[0].get_text() → "print('Hello, world!')"
     - code_tag[1].get_text() → "for i in range(4):\n                print(i)" (the <code> tag's text, including the newline and spaces)
   - Both are non-empty, so both are appended to code_list.

4. The function returns:
   [
     "print('Hello, world!')",
     "for i in range(4):\n                print(i)"
   ]
[/THOUGHT]

[OUTPUT]
```
{
    "output": [
        "print('Hello, world!')",
        "for i in range(4):\n                print(i)"
    ]
}
```
[/OUTPUT]