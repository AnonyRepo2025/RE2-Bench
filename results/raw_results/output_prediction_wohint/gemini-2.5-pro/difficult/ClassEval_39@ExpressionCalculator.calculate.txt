`ExpressionCalculator.calculate(expression="2 + 4 / 4")`

1.  **`calculate` method starts**:
    *   It first calls `self.transform("2 + 4 / 4")`.

2.  **`transform("2 + 4 / 4")`**:
    *   `expression = re.sub('\\s+', '', "2 + 4 / 4")` results in `expression` becoming `"2+4/4"`.
    *   `expression = re.sub('=$', '', "2+4/4")` leaves `expression` unchanged.
    *   The code then checks for negative numbers (which start with `-` or are preceded by another operator) and replaces the `-` with `~`. The input expression `"2+4/4"` has no negative numbers, so it remains unchanged.
    *   The method returns `"2+4/4"`.

3.  **Back in `calculate`**:
    *   It calls `self.prepare("2+4/4")`. This method implements the Shunting-yard algorithm to convert the infix expression to postfix (Reverse Polish Notation).
    *   **`prepare("2+4/4")`**:
        *   An operator stack `op_stack` is initialized with a sentinel value: `deque([','])`.
        *   The `postfix_stack` (which is a class member) is empty: `deque([])`.
        *   The code iterates through the expression string `"2+4/4"`:
            *   **'2'**: It's a number. It's identified and will be added to the `postfix_stack`.
            *   **'+'**: It's an operator. The `op_stack`'s top is `,` (lower precedence). So, `+` is pushed onto `op_stack`. `postfix_stack` is now `deque(['2'])`, `op_stack` is `deque([',', '+'])`.
            *   **'4'**: It's a number.
            *   **'/'**: It's an operator. The `op_stack`'s top is `+` (lower precedence). So, `/` is pushed onto `op_stack`. `postfix_stack` is now `deque(['2', '4'])`, `op_stack` is `deque([',', '+', '/'])`.
            *   **'4'**: It's a number.
        *   After the loop, the last number `'4'` is added to `postfix_stack`. It's now `deque(['2', '4', '4'])`.
        *   Finally, any remaining operators in `op_stack` are popped and added to `postfix_stack`.
            *   Pop `/`. `postfix_stack` is `deque(['2', '4', '4', '/'])`.
            *   Pop `+`. `postfix_stack` is `deque(['2', '4', '4', '/', '+'])`.
        *   The `prepare` method finishes. The `self.postfix_stack` now holds the postfix expression: `['2', '4', '4', '/', '+']`.

4.  **Back in `calculate` (evaluation phase)**:
    *   A `result_stack` is initialized: `deque([])`.
    *   `self.postfix_stack.reverse()` is called. `self.postfix_stack` becomes `deque(['+', '/', '4', '4', '2'])`.
    *   A `while` loop runs as long as `self.postfix_stack` is not empty, calling `pop()` on each iteration. `pop()` removes and returns the rightmost element.
        *   **1st iteration**: `pop()` returns `'2'`. It's a number, so it's appended to `result_stack`. `result_stack` is `deque(['2'])`.
        *   **2nd iteration**: `pop()` returns `'4'`. Appended to `result_stack`. `result_stack` is `deque(['2', '4'])`.
        *   **3rd iteration**: `pop()` returns `'4'`. Appended to `result_stack`. `result_stack` is `deque(['2', '4', '4'])`.
        *   **4th iteration**: `pop()` returns `'/'`. It's an operator.
            *   `second_value = result_stack.pop()` -> `'4'`.
            *   `first_value = result_stack.pop()` -> `'4'`.
            *   `_calculate('4', '4', '/')` is called, which returns `Decimal('4') / Decimal('4')` -> `Decimal('1')`.
            *   The result `'1'` is appended to `result_stack`. `result_stack` is `deque(['2', '1'])`.
        *   **5th iteration**: `pop()` returns `'+'`. It's an operator.
            *   `second_value = result_stack.pop()` -> `'1'`.
            *   `first_value = result_stack.pop()` -> `'2'`.
            *   `_calculate('2', '1', '+')` is called, which returns `Decimal('2') + Decimal('1')` -> `Decimal('3')`.
            *   The result `'3'` is appended to `result_stack`. `result_stack` is `deque(['3'])`.
    *   The loop finishes.

5.  **Final return statement**:
    *   The method returns `float(eval('*'.join(result_stack)))`.
    *   `result_stack` contains just `'3'`.
    *   `'*'.join(result_stack)` becomes the string `'3'`.
    *   `eval('3')` evaluates the string and returns the integer `3`.
    *   `float(3)` converts the integer to a float, `3.0`.

The final result is `3.0`.

[OUTPUT]
```
{
    "output": 3.0
}
```
[/OUTPUT]