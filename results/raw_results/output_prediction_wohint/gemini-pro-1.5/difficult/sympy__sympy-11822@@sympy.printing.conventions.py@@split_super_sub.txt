Let's trace the execution of the `split_super_sub` function with the given input "alpha^+_1".

1. **Initialization:**
   - `name = None`
   - `supers = []`
   - `subs = []`

2. **Loop 1:**
   - `pos = 0`
   - `start = 1`
   - `pos_hat = 5` (position of '^')
   - `pos_usc = 6` (position of '_')
   - `pos_next = 5` (min of 5 and 6)
   - `part = "alpha"`
   - `pos = 5`
   - Since `name` is None, `name = "alpha"`

3. **Loop 2:**
   - `start = 6`
   - `pos_hat = 6`
   - `pos_usc = 7`
   - `pos_next = 6`
   - `part = "^+"`
   - `pos = 6`
   - Since `part` starts with '^', `supers.append("+")` so `supers = ["+"]`

4. **Loop 3:**
   - `start = 7`
   - `pos_hat = 7`
   - `pos_usc = 7`
   - `pos_next = 7`
   - `part = "_1"`
   - `pos = 7`
   - Since `part` starts with '_', `subs.append("1")` so `subs = ["1"]`

5. **After the loop:**
   - `m = _name_with_digits_p.match(name)` where `name` is "alpha". The match fails.

6. **Return:**
   - The function returns `(name, supers, subs)` which is `("alpha", ["+"], ["1"])`.

[OUTPUT]
```json
{
  "name": "alpha",
  "supers": [
    "+"
  ],
  "subs": [
    "1"
  ]
}
```
[/OUTPUT]