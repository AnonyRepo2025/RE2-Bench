```python
import warnings
import numpy as np
from inspect import signature
from astropy.utils.exceptions import AstropyUserWarning
__all__ = ['FitnessFunc', 'Events', 'RegularEvents', 'PointMeasures', 'bayesian_blocks']

class FitnessFunc:

    def __init__(self, p0=0.05, gamma=None, ncp_prior=None):
        self.p0 = p0
        self.gamma = gamma
        self.ncp_prior = ncp_prior

    def validate_input(self, t, x, sigma):
        if x is None:
            x = np.ones_like(t)

        # verify the arrays
        t = np.asarray(t, dtype=float)
        x = np.asarray(x)

        if x.shape not in [(), (1,), t.shape]:
            raise ValueError("Invalid dimensions for x")
        x = np.atleast_1d(x)

        if sigma is None:
            sigma = 1
        else:
            sigma = np.asarray(sigma)
            if sigma.shape not in [(), (1,), x.shape]:
                raise ValueError("Invalid dimensions for sigma")
        sigma = np.atleast_1d(sigma)

        return t, x, sigma

    def fitness(self, **kwargs):
        return 0

    def compute_ncp_prior(self, N):
        return 4 - np.log(73.53 * self.p0 * (N ** -0.478))

    def fit(self, t, x=None, sigma=None):
        t, x, sigma = self.validate_input(t, x, sigma)
        if 'a_k' in self._fitness_args:
            ak_raw = np.ones_like(x) / sigma ** 2
        if 'b_k' in self._fitness_args:
            bk_raw = x / sigma ** 2
        if 'c_k' in self._fitness_args:
            ck_raw = x * x / sigma ** 2
        edges = np.concatenate([t[:1], 0.5 * (t[1:] + t[:-1]), t[-1:]])
        block_length = t[-1] - edges
        N = len(t)
        best = np.zeros(N, dtype=float)
        last = np.zeros(N, dtype=int)
        if self.ncp_prior is None:
            ncp_prior = self.compute_ncp_prior(N)
        else:
            ncp_prior = self.ncp_prior
        for R in range(N):
            kwds = {}
            if 'T_k' in self._fitness_args:
                kwds['T_k'] = block_length[:R + 1] - block_length[R + 1]
            if 'N_k' in self._fitness_args:
                kwds['N_k'] = np.cumsum(x[:R + 1][::-1])[::-1]
            if 'a_k' in self._fitness_args:
                kwds['a_k'] = 0.5 * np.cumsum(ak_raw[:R + 1][::-1])[::-1]
            if 'b_k' in self._fitness_args:
                kwds['b_k'] = -np.cumsum(bk_raw[:R + 1][::-1])[::-1]
            if 'c_k' in self._fitness_args:
                kwds['c_k'] = 0.5 * np.cumsum(ck_raw[:R + 1][::-1])[::-1]
            fit_vec = self.fitness(**kwds)
            A_R = fit_vec - ncp_prior
            A_R[1:] += best[:R]
            i_max = np.argmax(A_R)
            last[R] = i_max
            best[R] = A_R[i_max]
        change_points = np.zeros(N, dtype=int)
        i_cp = N
        ind = N
        while True:
            i_cp -= 1
            change_points[i_cp] = ind
            if ind == 0:
                break
            ind = last[ind - 1]
        change_points = change_points[i_cp:]
        return edges[change_points]

fitness_func = FitnessFunc(p0=0.05, gamma=None, ncp_prior=None)
fitness_func._fitness_args = []
t = np.fromstring("[66.89240597 86.41675651 23.01852682 49.91933799 57.20041992 76.85540143  4.36037718 99.45505108 46.9944514  27.95603418 88.34940223 74.77187739 95.3071847  33.07503047 55.27649668 57.22924692 98.03315837  7.5346256 30.56970193 19.09110312]", sep=" ").astype(float)
x = np.fromstring("[-0.0111204  -0.17490694 -0.13414035  0.83458264 -0.114772    0.13896028 -0.08552405 -0.10270618  0.09920921 -0.04493044  0.04186395 -0.07281792 -0.1801888   0.04677171 -0.15514249 -0.05104932 -0.07329511  0.01953465 -0.05559449 -0.01277348]", sep=" ").astype(float)
sigma = 0.1
result = fitness_func.fit(t, x, sigma)
print(result)
```

[OUTPUT]
```
[ 4.36037718 99.45505108]
```
[/OUTPUT]