Let's trace the execution of `build_digest_header` with the given inputs.

1. **Algorithm and Hash Function:** The algorithm is MD5, so `hash_utf8` becomes `md5_utf8`.

2. **Path and Query:** The URL is parsed, and `path` becomes `/digest-auth/auth/user/pass`.

3. **A1, A2, HA1, HA2:**
   - A1 = "user:me@kennethreitz.com:pass"
   - A2 = "GET:/digest-auth/auth/user/pass"
   - HA1 = md5_utf8(A1) = "57865093e0719eafaea97a772b455307"
   - HA2 = md5_utf8(A2) = "c03d78e973336197f614e2aeb7798091"

4. **Nonce Count and Cnonce:**
   - Since `nonce` is different from `last_nonce`, `nonce_count` becomes 1.
   - `ncvalue` becomes "00000001".
   - `cnonce` is calculated (it's complex, but we don't need the exact value for this analysis).

5. **Response Digest (respdig):**
   - `qop` is "auth".
   - `noncebit` = "54c8df80c7443b10ad9890ddfce551f9:00000001:<cnonce>:auth:c03d78e973336197f614e2aeb7798091"
   - `respdig` = md5_utf8(HA1 + ":" + noncebit)

6. **Base String:**
   - `base` is constructed with username, realm, nonce, uri, response, opaque, and algorithm.

7. **Final Header:**
   - The final header is constructed as "Digest " + base + qop parameters (nc and cnonce).

Therefore, the output will be a Digest authorization header.  The exact value of `respdig` and `cnonce` depends on the time and random number generator, but the structure and components of the header are predictable.

[OUTPUT]
```json
{
  "digest_header": "Digest username=\"user\", realm=\"me@kennethreitz.com\", nonce=\"54c8df80c7443b10ad9890ddfce551f9\", uri=\"/digest-auth/auth/user/pass\", response=\"<calculated_response>\", opaque=\"cbe3b2ba4f82f0040cf76baec4025b43\", algorithm=\"MD5\", qop=\"auth\", nc=00000001, cnonce=\"<calculated_cnonce>\""
}
```
Note: `<calculated_response>` and `<calculated_cnonce>` represent the dynamically calculated values for `respdig` and `cnonce` respectively.  They will vary on each execution.
[/OUTPUT]
