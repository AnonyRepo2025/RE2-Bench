1. **check_array(y):** The `fit` method starts by calling `check_array` on `y` to validate the input.  `y` is a 1D numpy array, and `check_array` will ensure it's a valid numeric array and, since `ensure_2d=False`, will not reshape it.

2. **_training_dim:** The dimension of y is stored in `self._training_dim = y.ndim`, which will be 1.

3. **y_2d:** Since `y.ndim == 1`, `y` is reshaped to a 2D array `y_2d` with shape (100, 1).

4. **_fit_transformer(y_2d):** This method is called with the 2D version of y.
    - Since `transformer` is `None`, the code enters the `else` block.
    - A `FunctionTransformer` is created with `func=sqrt` and `inverse_func=log`.
    - `transformer_.fit(y_2d)` is called, which essentially does nothing for `FunctionTransformer` (it just checks the inverse functions if `check_inverse` is True).
    - `check_inverse` is True, so a subset of `y` is selected (`y_sel`), transformed, and inverse transformed. A warning will be issued if the round trip doesn't result in the original values (due to the nature of `sqrt` and `log` with negative numbers, but the code will proceed).

5. **y_trans:** `y_trans = self.transformer_.transform(y_2d)` applies the square root transformation to `y_2d`.

6. **y_trans.squeeze():** Since `y_trans` is 2D with shape (100, 1), it's squeezed back to a 1D array with shape (100,).

7. **regressor_:** Since `regressor` is not `None`, `self.regressor_ = clone(self.regressor)` creates a copy of the provided `LinearRegression` object.

8. **regressor_.fit():** `self.regressor_.fit(X, y_trans)` fits the linear regression model to the transformed target variable `y_trans`.

9. **return self:** The `fit` method returns the `TransformedTargetRegressor` instance itself.

[/THOUGHT]

[OUTPUT]
```
{
    "estimator": {
        "regressor_": {
            "fit_intercept": true,
            "normalize": false,
            "copy_X": true,
            "n_jobs": null,
            "coef_": "...",
            "intercept_": "..."
        },
        "transformer_": {
            "func": "\"<function sqrt>\"",
            "inverse_func": "\"<function log>\"",
            "validate": true,
            "accept_sparse": false,
            "check_inverse": true,
            "kw_args": null,
            "inv_kw_args": null
        },
        "check_inverse": true,
        "_training_dim": 1
    }
}
```
[/OUTPUT]