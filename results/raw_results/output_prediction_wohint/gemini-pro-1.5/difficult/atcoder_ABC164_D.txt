```python
import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools
from collections import deque
sys.setrecursionlimit(10 ** 7)
inf = 10 ** 20
mod = 10 ** 9 + 7
DR = [1, -1, 0, 0]
DC = [0, 0, 1, -1]

def LI():
    return [int(x) for x in sys.stdin.readline().split()]

def LI_():
    return [int(x) - 1 for x in sys.stdin.readline().split()]

def LF():
    return [float(x) for x in sys.stdin.readline().split()]

def LS():
    return sys.stdin.readline().split()

def I():
    return int(sys.stdin.readline())

def F():
    return float(sys.stdin.readline())

def S():
    return input()

def main():
    s = S()
    k = 2019
    tens = [1 for _ in range(len(s) + 1)]
    for i in range(1, len(s) + 1):
        tens[i] = tens[i - 1] * 10 % k
    mods0toi = [0 for _ in range(len(s))]
    cur = 0
    for i in range(len(s))[::-1]:
        j = len(s) - i - 1
        mods0toi[i] = (cur + int(s[i]) * tens[j]) % k
        cur = mods0toi[i]
    s = collections.Counter(mods0toi)
    ans = 0
    t = s.keys()
    for c in t:
        if c == 0:
            ans += s[c]
        ans += s[c] * (s[c] - 1) // 2
    print(ans)
main()

```
Let's trace the execution with s = "18171817".
- k = 2019
- tens = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000]
- mods0toi will store the remainders when the substrings s[0:i+1] are divided by 2019.
- Loop 1: i=7, j=0, mods0toi[7] = (0 + 7 * 1) % 2019 = 7, cur = 7
- Loop 2: i=6, j=1, mods0toi[6] = (7 + 1 * 10) % 2019 = 17, cur = 17
- Loop 3: i=5, j=2, mods0toi[5] = (17 + 8 * 100) % 2019 = 817, cur = 817
- Loop 4: i=4, j=3, mods0toi[4] = (817 + 1 * 1000) % 2019 = 1817, cur = 1817
- Loop 5: i=3, j=4, mods0toi[3] = (1817 + 7 * 10000) % 2019 = 7, cur = 7
- Loop 6: i=2, j=5, mods0toi[2] = (7 + 1 * 100000) % 2019 = 17, cur = 17
- Loop 7: i=1, j=6, mods0toi[1] = (17 + 8 * 1000000) % 2019 = 817, cur = 817
- Loop 8: i=0, j=7, mods0toi[0] = (817 + 1 * 10000000) % 2019 = 1817, cur = 1817
- mods0toi = [1817, 817, 17, 7, 1817, 817, 17, 7]
- s = Counter({1817: 2, 817: 2, 17: 2, 7: 2})
- ans = 0
- Loop 1: c=1817, ans += 2 * (2 - 1) // 2 = 1
- Loop 2: c=817, ans += 1 + 2 * (2 - 1) // 2 = 2
- Loop 3: c=17, ans += 2 + 2 * (2 - 1) // 2 = 3
- Loop 4: c=7, ans += 3 + 2 * (2 - 1) // 2 = 4
- print(4)

[/THOUGHT]

[OUTPUT]
```
{
    "output": 4
}
```
[/OUTPUT]