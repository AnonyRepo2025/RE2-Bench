Here's how `build_digest_header` will execute with the given input:

1. **Initialization:**
   - `realm`, `nonce`, `qop`, `algorithm`, and `opaque` are extracted from `self.chal`.
   - `algorithm` is "MD5", so `_algorithm` becomes "MD5".
   - The `md5_utf8` function is defined (which just calculates the MD5 hash of a UTF-8 encoded string).

2. **Hashing:**
   - `path` becomes "/digest-auth/auth/user/pass".
   - `A1` becomes "user:me@kennethreitz.com:pass".
   - `A2` becomes "GET:/digest-auth/auth/user/pass".
   - `HA1` becomes `md5_utf8("user:me@kennethreitz.com:pass")` = "4297f40a923033927a8a27b773e5a07e".
   - `HA2` becomes `md5_utf8("GET:/digest-auth/auth/user/pass")` = "c5d59729760a279780a94421c27a97a2".

3. **Nonce Count and Cnonce:**
   - Since `nonce` is the same as `self.last_nonce`, `self.nonce_count` increments to 2.
   - `ncvalue` becomes "00000002".
   - `cnonce` is calculated (a complex process involving time, random data, and SHA1 hashing), let's assume it results in some value like "a592987577976e36". (The actual value will vary on each execution due to `os.urandom` and `time.ctime`).

4. **Response Digest Calculation:**
   - `noncebit` becomes "b65c75a3f423e5780128d1a798ec40b4:00000002:a592987577976e36:auth:c5d59729760a279780a94421c27a97a2".
   - `respdig` becomes `md5_utf8("4297f40a923033927a8a27b773e5a07e:b65c75a3f423e5780128d1a798ec40b4:00000002:a592987577976e36:auth:c5d59729760a279780a94421c27a97a2")` =  let's call this result "calculated_respdig" (since the cnonce is random, we can't determine the exact value).

5. **Header Construction:**
   - `base` string is constructed using the calculated values.
   - The final header becomes "Digest " + `base`.

[OUTPUT]
```json
{
  "header": "Digest username=\"user\", realm=\"me@kennethreitz.com\", nonce=\"b65c75a3f423e5780128d1a798ec40b4\", uri=\"/digest-auth/auth/user/pass\", response=\"calculated_respdig\", opaque=\"21d73260ff0b61c1f304ee40444f24bf\", algorithm=\"MD5\", qop=\"auth\", nc=00000002, cnonce=\"a592987577976e36\""
}
```
[/OUTPUT]
