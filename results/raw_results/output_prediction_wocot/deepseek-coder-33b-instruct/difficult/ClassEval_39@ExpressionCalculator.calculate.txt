
[OUTPUT]
```
{
    "output": 3.0
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums = sorted(nums1 + nums2)
        if len(nums) % 2 == 0:
            return (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2
        else:
            return nums[len(nums) // 2]
[/PYTHON]

What will be the output of `findMedianSortedArrays`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "nums1": [1, 3],
        "nums2": [2]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 2.0
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {")": "(", "}": "{", "]": "["}
        for char in s:
            if char in mapping:
                top_element = stack.pop() if stack else '#'
                if mapping[char] != top_element:
                    return False
            else:
                stack.append(char)
        return not stack
[/PYTHON]

What will be the output of `isValid`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "()[]{}"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def longestPalindrome(self, s: str) -> str:
        if not s:
            return ""
        res = ""
        for i in range(len(s)):
            tmp = self.helper(s, i, i)
            if len(tmp) > len(res):
                res = tmp
            tmp = self.helper(s, i, i+1)
            if len(tmp) > len(res):
                res = tmp
        return res

    def helper(self, s, l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1
        return s[l+1:r]
[/PYTHON]

What will be the output of `longestPalindrome`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "babad"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "bab"
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def convert(self, s: str, numRows: int) -> str:
        if numRows == 1 or numRows >= len(s):
            return s
        L = [''] * numRows
        index, step = 0, 1
        for x in s:
            L[index] += x
            if index == 0:
                step = 1
            elif index == numRows -1:
                step = -1
            index += step
        return ''.join(L)
[/PYTHON]

What will be the output of `convert`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "PAYPALISHIRING",
        "numRows": 3
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "PAHNAPLSIIGYIR"
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def reverse(self, x: int) -> int:
        if x < 0:
            x = -int(str(x)[1:][::-1])
        else:
            x = int(str(x)[::-1])
        if x > 2**31 - 1 or x < -2**31:
            return 0
        else:
            return x
[/PYTHON]

What will be the output of `reverse`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "x": 123
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 321
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def myAtoi(self, s: str) -> int:
        s = s.strip()
        if not s:
            return 0
        sign = -1 if s[0] == '-' else 1
        if s[0] in ['-', '+']:
            s = s[1:]
        res = 0
        for c in s:
            if not c.isdigit():
                break
            res = res * 10 + int(c)
            if res > 2**31 - 1:
                return 2**31 - 1 if sign == 1 else -2**31
        return sign * res
[/PYTHON]

What will be the output of `myAtoi`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "42"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 42
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x < 0:
            return False
        return str(x) == str(x)[::-1]
[/PYTHON]

What will be the output of `isPalindrome`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "x": 121
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if not strs:
            return ""
        shortest = min(strs, key=len)
        for i, ch in enumerate(shortest):
            for other in strs:
                if other[i] != ch:
                    return shortest[:i]
        return shortest
[/PYTHON]

What will be the output of `longestCommonPrefix`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "strs": ["flower","flow","flight"]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
