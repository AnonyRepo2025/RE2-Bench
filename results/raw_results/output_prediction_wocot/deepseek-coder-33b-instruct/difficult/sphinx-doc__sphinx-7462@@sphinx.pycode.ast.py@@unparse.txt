
[OUTPUT]
```
{
    "output": "()"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
import json
import os
import re
import sys
import time
import traceback
from typing import Any, Dict, List, Optional, Tuple, Union

def get_user():
    return os.environ.get("USER")

def ensure_reset_dir(path):
    if path.exists():
        shutil.rmtree(path)
    path.mkdir(parents=True)

def _max(iterable, default=None):
    try:
        return max(iterable)
    except ValueError:
        return default

def _force_symlink(root, name, target):
    link = root.joinpath(name)
    if link.exists():
        link.unlink()
    link.symlink_to(target)

def find_prefixed(root, prefix):
    for p in root.iterdir():
        if p.name.startswith(prefix):
            yield p

def make_numbered_dir_with_cleanup(root, prefix, keep, lock_timeout):
    with lockfile.LockFile(root.joinpath(".lock")):
        dirs = sorted(find_prefixed(root, prefix), key=lambda p: p.name)
        for old in dirs[:-keep]:
            shutil.rmtree(old)
        return make_numbered_dir(root, prefix)
[/PYTHON]

What will be the output of `get_user`, given the following input:
[INPUT]
{
    "self": {},
    "args": {},
    "kwargs": {}
}
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "root"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
[/PYTHON]

What will be the output of `ensure_reset_dir`, given the following input:
[INPUT]
{
    "self": {},
    "args": {
        "path": "/tmp/pytest-of-root/pytest-0/test_mktemp0"
    },
    "kwargs": {}
}
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "None"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
[/PYTHON]

What will be the output of `_max`, given the following input:
[INPUT]
{
    "self": {},
    "args": {
        "iterable": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "5"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
[/PYTHON]

What will be the output of `_force_symlink`, given the following input:
[INPUT]
{
    "self": {},
    "args": {
        "root": "/tmp/pytest-of-root/pytest-0/test_mktemp0",
        "name": "current",
        "target": "/tmp/pytest-of-root/pytest-0/test_mktemp0/world0"
    },
    "kwargs": {}
}
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "None"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
[/PYTHON]

What will be the output of `find_prefixed`, given the following input:
[INPUT]
{
    "self": {},
    "args": {
        "root": "/tmp/pytest-of-root/pytest-0/test_mktemp0",
        "prefix": "world"
    },
    "kwargs": {}
}
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "<generator object find_prefixed at 0x7f9a1c4b5a50>"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
import os
import shutil
import tempfile
import time
import lockfile
import six
from pathlib import Path
import attr
import pytest
[/PYTHON]

What will be the output of `make_numbered_dir`, given the following input:
[INPUT