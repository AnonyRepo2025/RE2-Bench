
[OUTPUT]
```
{
    "output": "153983040"
}
```
[/OUTPUT]

[PYTHON]
def solve(n, m, k, a):
    a.sort()
    dp = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(n):
        for j in range(m + 1):
            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])
            if j + a[i] <= m:
                dp[i + 1][j + a[i]] = max(dp[i + 1][j + a[i]], dp[i][j] + a[i])
    return dp[n][m]

n, m, k = map(int, input().split())
a = list(map(int, input().split()))
print(solve(n, m, k, a))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "3 10 2\n1 2 3"
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "6"
}
```
[/OUTPUT]

[PYTHON]
def solve(n, m, k, a):
    a.sort()
    dp = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(n):
        for j in range(m + 1):
            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])
            if j + a[i] <= m:
                dp[i + 1][j + a[i]] = max(dp[i + 1][j + a[i]], dp[i][j] + a[i])
    return dp[n][m]

n, m, k = map(int, input().split())
a = list(map(int, input().split()))
print(solve(n, m, k, a))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "3 10 2\n1 2 3"
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "6"
}
```
[/OUTPUT]

[PYTHON]
def solve(n, m, k, a):
    a.sort()
    dp = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(n):
        for j in range(m + 1):
            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])
            if j + a[i] <= m:
                dp[i + 1][j + a[i]] = max(dp[i + 1][j + a[i]], dp[i][j] + a[i])
    return dp[n][m]

n, m, k = map(int, input().split())
a = list(map(int, input().split()))
print(solve(n, m, k, a))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "3 10 2\n1 2 3"
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "6"
}
```
[/OUTPUT]

[PYTHON]
def solve(n, m, k, a):
    a.sort()
    dp = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(n):
        for j in range(m + 1):
            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])
            if j + a[i] <= m:
                dp[i + 1][j + a[i]] = max(dp[i + 1][j + a[i]], dp[i][j] + a[i])
    return dp[n][m]

n, m, k = map(int, input().split())
a = list(map(int, input().split()))
print(solve(n, m, k, a))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "3 10 2\n1 2 3"
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "6"
}
```
[/OUTPUT]

[PYTHON]
def solve(n, m, k, a):
    a.sort()
    dp = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(n):
        for j in range(m + 1):
            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])
            if j + a[i] <= m:
                dp[i + 1][j + a[i]] = max(dp[i + 1][j + a[i]], dp[i][j] + a[i])
    return dp[n][m]

n, m, k = map(int, input().split())
a = list(map(int, input().split()))
print(solve(n, m, k, a))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "3 10 2\n1 2 3"
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "6"
}
```
[/OUTPUT]

[PYTHON]
def solve(n, m, k, a):
    a.sort()
    dp = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(n):
        for j in range(m + 1):
            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])
            if j + a[i] <= m:
                dp[i + 1][j + a[i]] = max(dp[i + 1][j + a[i]], dp[i][j] + a[i])
    return dp[n][m]

n, m, k = map(int, input().split())
a = list(map(int, input().split()))
print(solve(n, m, k, a))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "3 10 2\n1 2 3"
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "6"
}
```
[/OUTPUT]

[PYTHON]
def solve(n, m, k, a):
    a.sort()
    dp = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(n):
        for j in range(m + 1):
            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])
            if j + a[i]