
[OUTPUT]
```
{
    "output": ("b", "b", "r")
}
```
[/OUTPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
import numpy as np
import matplotlib.pyplot as plt

def plot_graph(x, y, title, xlabel, ylabel):
    plt.plot(x, y)
    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.show()
[/PYTHON]

Functions called during the execution:
[PYTHON]
.lib.matplotlib.pyplot.plot
.lib.matplotlib.pyplot.title
.lib.matplotlib.pyplot.xlabel
.lib.matplotlib.pyplot.ylabel
.lib.matplotlib.pyplot.show
[/PYTHON]
What will be the output of `plot_graph`, given the following input:
[INPUT]
```
{
    "args": {
        "x": [1, 2, 3, 4, 5],
        "y": [1, 4, 9, 16, 25],
        "title": "Square Numbers",
        "xlabel": "Numbers",
        "ylabel": "Squares"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "Graph of x and y values with title 'Square Numbers', x-axis label 'Numbers' and y-axis label 'Squares' will be displayed."
}
```
[/OUTPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
import numpy as np

def calculate_mean(data):
    return np.mean(data)
[/PYTHON]

Functions called during the execution:
[PYTHON]
.lib.numpy.__init__.mean
[/PYTHON]
What will be the output of `calculate_mean`, given the following input:
[INPUT]
```
{
    "args": {
        "data": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "mean": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "mean": 3.0
}
```
[/OUTPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
import numpy as np

def calculate_median(data):
    return np.median(data)
[/PYTHON]

Functions called during the execution:
[PYTHON]
.lib.numpy.__init__.median
[/PYTHON]
What will be the output of `calculate_median`, given the following input:
[INPUT]
```
{
    "args": {
        "data": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "median": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "median": 3.0
}
```
[/OUTPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
import numpy as np

def calculate_mode(data):
    values, counts = np.unique(data, return_counts=True)
    mode_index = np.argmax(counts)
    return values[mode_index]
[/PYTHON]

Functions called during the execution:
[PYTHON]
.lib.numpy.__init__.unique
.lib.numpy.__init__.argmax
[/PYTHON]
What will be the output of `calculate_mode`, given the following input:
[INPUT]
```
{
    "args": {
        "data": [1, 2, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "mode": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "mode": 2
}
```
[/OUTPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
import numpy as np

def calculate_standard_deviation(data):
    return np.std(data)
[/PYTHON]

Functions called during the execution:
[PYTHON]
.lib.numpy.__init__.std
[/PYTHON]
What will be the output of `calculate_standard_deviation`, given the following input:
[INPUT]
```
{
    "args": {
        "data": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "standard_deviation": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "standard_deviation": 1.4142135623730951
}
```
[/OUTPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
import numpy as np

def calculate_variance(data):
    return np.var(data)
[/PYTHON]

Functions called during the execution:
[PYTHON]
.lib.numpy.__init__.var
[/PYTHON]
What will be the output of `calculate_variance`, given the following input:
[INPUT]
```
{
    "args": {
        "data": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "variance": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "variance": 2.0
}
```
[/OUTPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
import numpy as np

def calculate_percentile(data, percentile):
    return np.percentile(data, percentile)
[/PYTHON]

Functions called during the execution:
[PYTHON]
.lib.numpy.__init__.percentile
[/PYTHON]
What will be the output of `calculate_percentile`, given the following input:
[INPUT]
```
{
    "args": {
        "data": [1, 2, 3, 4, 5],
        "percentile": 50
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "percentile": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "percentile": 3.0
}
```
[/OUTPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
import numpy as np

def calculate_correlation(x, y):
    return np.corrcoef(x, y)[0, 1]
[/PYTHON]

Functions called during the execution:
[PYTHON]
.lib.numpy.__init__.corrcoef
[/PYTHON]
What will be the output of `calculate_correlation`, given the following input:
[INPUT]
```
{
    "args": {
        "x": [1, 2, 3, 4, 5],
        "y": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "correlation": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "correlation": 1.0
}
```