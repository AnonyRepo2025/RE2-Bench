
[OUTPUT]
```
{
    "output": false
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        num_dict = {}
        for i, num in enumerate(nums):
            if target - num in num_dict:
                return [num_dict[target - num], i]
            num_dict[num] = i
        return []
[/PYTHON]

What will be the output of `twoSum`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [2, 7, 11, 15],
        "target": 9
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": [0, 1]
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {")": "(", "}": "{", "]": "["}
        for char in s:
            if char in mapping:
                top_element = stack.pop() if stack else '#'
                if mapping[char] != top_element:
                    return False
            else:
                stack.append(char)
        return not stack
[/PYTHON]

What will be the output of `isValid`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "()"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0
        min_price = prices[0]
        max_profit = 0
        for price in prices:
            if price < min_price:
                min_price = price
            elif price - min_price > max_profit:
                max_profit = price - min_price
        return max_profit
[/PYTHON]

What will be the output of `maxProfit`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "prices": [7, 1, 5, 3, 6, 4]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 5
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        if not nums:
            return 0
        current_sum = max_sum = nums[0]
        for num in nums[1:]:
            current_sum = max(num, current_sum + num)
            max_sum = max(max_sum, current_sum)
        return max_sum
[/PYTHON]

What will be the output of `maxSubArray`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 6
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        n = len(s)
        ans = 0
        mp = {}
        i = 0
        for j in range(n):
            if s[j] in mp:
                i = max(mp[s[j]], i)
            ans = max(ans, j - i + 1)
            mp[s[j]] = j + 1
        return ans
[/PYTHON]

What will be the output of `lengthOfLongestSubstring`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "abcabcbb"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def longestPalindrome(self, s: str) -> str:
        if not s:
            return ""
        n = len(s)
        start, end = 0, 0
        for i in range(n):
            len1 = self.expandAroundCenter(s, i, i)
            len2 = self.expandAroundCenter(s, i, i + 1)
            len_max = max(len1, len2)
            if len_max > end - start:
                start = i - (len_max - 1) // 2
                end = i + len_max // 2
        return s[start:end+1]

    def expandAroundCenter(self, s: str, left: int, right: int) -> int:
        while left >= 0 and right < len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        return right - left - 1
[/PYTHON]

What will be the output of `longestPalindrome`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "babad"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "bab"
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
        rows = [''] * numRows
        curRow = 0
        goingDown = False
        for c in s:
            rows[curRow] += c
            if curRow == 0 or curRow == numRows - 1:
                goingDown = not goingDown
            curRow += 1 if goingDown else -1
        return ''.join(rows)
[/PYTHON]

What will be the output of `convert`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "PAYPALISHIRING",
        "numRows": 3
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "PAHNAPLSIIGYIR"
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def reverse(self, x: int) -> int:
        if x < 0:
            return -self.reverse(-x)
        result = 0
        while x:
            result = result * 10 + x % 10
            x //= 10
        return result if result <= 0x7fffffff else 0
[/PYTHON]

What will be the output of `reverse`, given the following input:
[INPUT]
