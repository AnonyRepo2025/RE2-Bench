
[OUTPUT]
```
{
    "__module__": "template_tests.test_library",
    "__name__": "func",
    "__qualname__": "SimpleTagRegistrationTests.test_simple_tag_wrapped.\"<locals>\".func",
    "__doc__": null,
    "__annotations__": {},
    "__wrapped__": {}
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
import os
import sys
import json
import time
import logging
import argparse
import subprocess
from typing import List, Dict, Any

def run_command(command: List[str], env: Dict[str, str] = None) -> str:
    logging.info(f"Running command: {command}")
    result = subprocess.run(command, capture_output=True, text=True, env=env)
    if result.returncode != 0:
        logging.error(f"Command failed: {command}")
        logging.error(f"Stdout: {result.stdout}")
        logging.error(f"Stderr: {result.stderr}")
        raise RuntimeError(f"Command failed: {command}")
    return result.stdout

def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Run a command and log its output.")
    parser.add_argument("command", nargs="+", help="The command to run.")
    parser.add_argument("--env", nargs="*", help="Environment variables to set.")
    return parser.parse_args()

def main() -> None:
    args = parse_args()
    env = dict(item.split("=") for item in args.env) if args.env else None
    output = run_command(args.command, env)
    print(output)

if __name__ == "__main__":
    main()
[/PYTHON]

What will be the output of `run_command`, given the following input:
[INPUT]
{
    "command": ["ls", "-l"],
    "env": null
}
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "total 8\n-rw-r--r-- 1 user group 4096 Jan 20 16:19 file1.txt\n-rw-r--r-- 1 user group 4096 Jan 20 16:19 file2.txt"
}
```
[/OUTPUT]
