
[OUTPUT]
```
{
    "output": "(array([[-0.00000000e+00], [-1.00000000e+00], [ 1.00000000e+00]]), array([[-0.00000000e+00], [-1.00000000e+00], [ 1.00000000e+00]]), 1)"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
import numpy as np
from scipy.sparse import issparse
from scipy.sparse.linalg import eigsh
from scipy.linalg import eigh
from ..base import BaseEstimator, TransformerMixin
from ..utils import check_array
from ..utils.extmath import stable_cumsum
from ..utils.validation import check_is_fitted
from ..externals import six
__all__ = ['KernelPCA']

def _fit_transform(self, X):
    X = check_array(X, accept_sparse='csr')

    if issparse(X):
        if not self.eigen_solver or self.eigen_solver == 'auto':
            self.eigen_solver = 'arpack'

        if self.eigen_solver not in ('auto', 'arpack', 'dense'):
            raise ValueError("unrecognized eigen_solver '%s'"
                             % self.eigen_solver)

        if self.eigen_solver == 'arpack':
            random_state = check_random_state(self.random_state)
            v0 = random_state.uniform(-1, 1, X.shape[1])
            self._fit_transform_arpack(X, v0)
        elif self.eigen_solver == 'dense':
            self._fit_transform_dense(X)
    else:
        self._fit_transform_dense(X)

    return self._transform(X)
[/PYTHON]

What will be the output of `_fit_transform`, given the following input:
[INPUT]
```
{
    "self": {
        "n_components": 2,
        "kernel": "linear",
        "gamma": 1.0,
        "degree": 3,
        "coef0": 1,
        "kernel_params": null,
        "alpha": 1.0,
        "fit_inverse_transform": false,
        "eigen_solver": "auto",
        "tol": 0,
        "max_iter": null,
        "remove_zero_eig": false,
        "random_state": null,
        "n_jobs": 1
    },
    "args": {
        "X": "[[0, 1], [1, 0], [0.1, 0.1], [0.2, 0.2]]"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "array([[-0.00000000e+00, -1.00000000e+00,  1.00000000e+00], [ 0.00000000e+00, -1.00000000e+00,  1.00000000e+00]])"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
import numpy as np
from scipy.sparse import issparse
from scipy.sparse.linalg import eigsh
from scipy.linalg import eigh
from ..base import BaseEstimator, TransformerMixin
from ..utils import check_array
from ..utils.extmath import stable_cumsum
from ..utils.validation import check_is_fitted
from ..externals import six
__all__ = ['KernelPCA']

def _fit_transform(self, X):
    X = check_array(X, accept_sparse='csr')

    if issparse(X):
        if not self.eigen_solver or self.eigen_solver == 'auto':
            self.eigen_solver = 'arpack'

        if self.eigen_solver not in ('auto', 'arpack', 'dense'):
            raise ValueError("unrecognized eigen_solver '%s'"
                             % self.eigen_solver)

        if self.eigen_solver == 'arpack':
            random_state = check_random_state(self.random_state)
            v0 = random_state.uniform(-1, 1, X.shape[1])
            self._fit_transform_arpack(X, v0)
        elif self.eigen_solver == 'dense':
            self._fit_transform_dense(X)
    else:
        self._fit_transform_dense(X)

    return self._transform(X)
[/PYTHON]

What will be the output of `_fit_transform`, given the following input:
[INPUT]
```
{
    "self": {
        "n_components": 2,
        "kernel": "linear",
        "gamma": 1.0,
        "degree": 3,
        "coef0": 1,
        "kernel_params": null,
        "alpha": 1.0,
        "fit_inverse_transform": false,
        "eigen_solver": "auto",
        "tol": 0,
        "max_iter": null,
        "remove_zero_eig": false,
        "random_state": null,
        "n_jobs": 1
    },
    "args": {
        "X": "[[0, 1], [1, 0], [0.1, 0.1], [0.2, 0.2]]"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "array([[-0.00000000e+00, -1.00000000e+00,  1.00000000e+00], [ 0.00000000e+00, -1.00000000e+00,  1.00000000e+00]])"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
import numpy as np
from scipy.sparse import issparse
from scipy.sparse.linalg import eigsh
from scipy.linalg import eigh
from ..base import BaseEstimator, TransformerMixin
from ..utils import check_array
from ..utils.extmath import stable_cumsum
from ..utils.validation import check_is_fitted
from ..externals import six
__all__ = ['KernelPCA']

def _fit_transform(self, X):
    X = check_array(X, accept_sparse='csr')

    if issparse(X):
        if not self.eigen_solver or self.eigen_solver == 'auto':
            self.eigen_solver = 'arpack'

        if self.eigen_solver not in ('auto', 'arpack', 'dense'):
            raise ValueError("unrecognized eigen_solver '%s'"
                             % self.eigen_solver)

        if self.eigen_solver == 'arpack':
            random_state = check_random_state(self.random_state)
            v0 = random_state.uniform(-1, 1, X.shape[1])
            self._fit_transform_arpack(X, v0)
        elif self.eigen_solver == 'dense':
            self._fit_transform_dense(X)
