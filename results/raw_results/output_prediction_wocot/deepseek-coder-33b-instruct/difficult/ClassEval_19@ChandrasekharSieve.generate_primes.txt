
[OUTPUT]
```
{
    "output": [
        2,
        3,
        5,
        7,
        11,
        13
    ]
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def is_palindrome(self, s: str) -> bool:
        s = s.lower()
        s = ''.join(c for c in s if c.isalnum())
        return s == s[::-1]
[/PYTHON]

What will be the output of `is_palindrome`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "A man, a plan, a canal: Panama"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def is_anagram(self, s: str, t: str) -> bool:
        return sorted(s) == sorted(t)
[/PYTHON]

What will be the output of `is_anagram`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "anagram",
        "t": "nagaram"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def first_uniq_char(self, s: str) -> int:
        count = {}
        for char in s:
            if char in count:
                count[char] += 1
            else:
                count[char] = 1
        for i, char in enumerate(s):
            if count[char] == 1:
                return i
        return -1
[/PYTHON]

What will be the output of `first_uniq_char`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "leetcode"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 0
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def my_sqrt(self, x: int) -> int:
        if x < 2:
            return x
        left, right = 2, x // 2
        while left <= right:
            pivot = left + (right - left) // 2
            num = pivot * pivot
            if num > x:
                right = pivot - 1
            elif num < x:
                left = pivot + 1
            else:
                return pivot
        return right
[/PYTHON]

What will be the output of `my_sqrt`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "x": 8
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 2
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def is_power_of_two(self, n: int) -> bool:
        if n == 0:
            return False
        while n % 2 == 0:
            n /= 2
        return n == 1
[/PYTHON]

What will be the output of `is_power_of_two`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "n": 16
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def hamming_weight(self, n: int) -> int:
        count = 0
        while n:
            count += n & 1
            n >>= 1
        return count
[/PYTHON]

What will be the output of `hamming_weight`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "n": 11
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def reverse_bits(self, n: int) -> int:
        res = 0
        for _ in range(32):
            res = (res << 1) + (n & 1)
            n >>= 1
        return res
[/PYTHON]

What will be the output of `reverse_bits`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "n": 43261596
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 964176192
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def missing_number(self, nums: List[int]) -> int:
        n = len(nums)
        return n * (n+1) // 2 - sum(nums)
[/PYTHON]

What will be the output of `missing_number`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [3, 0, 1]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 2
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def reverse_string(self, s: List[str]) -> None:
        left, right = 0, len(s) - 1
        while left < right:
            s[left], s[right] = s[right], s[left]
            left, right = left + 1, right - 1
[/PYTHON]

What will be the output of `reverse_string`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": ["h", "e", "l", "l", "o"]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": ["o", "l", "l", "e", "h"]
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def reverse_words(self, s: str) -> str:
        return ' '.join(word[::-1] for word in s.split(' '))
[/PYTHON]

What will be the output of `reverse_words`, given the following input:
[INPUT]
```
{
    "