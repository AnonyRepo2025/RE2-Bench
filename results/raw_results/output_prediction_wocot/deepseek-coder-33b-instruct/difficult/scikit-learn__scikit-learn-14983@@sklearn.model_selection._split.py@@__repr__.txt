
[OUTPUT]
```
{
    "output": "PredefinedSplit(test_fold=[1 1 2 2], unique_folds=[1 2])"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
class PredefinedSplit(BaseCrossValidator):

    def __init__(self, test_fold):
        self.test_fold = np.asarray(test_fold)
        self.unique_folds = np.unique(test_fold)

    def _iter_test_indices(self, X=None, y=None, groups=None):
        for fold in self.unique_folds:
            yield np.where(self.test_fold == fold)[0]

    def get_n_splits(self, X=None, y=None, groups=None):
        return len(self.unique_folds)

    def __repr__(self):
        return (
            "PredefinedSplit(test_fold={0}, unique_folds={1})".format(
                self.test_fold, self.unique_folds
            )
        )
[/PYTHON]

What will be the output of `__repr__`, given the following input:
[INPUT]
```
{
    "self": {
        "test_fold": "[1 1 2 2]",
        "unique_folds": "[1 2]"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "PredefinedSplit(test_fold=[1 1 2 2], unique_folds=[1 2])"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
class PredefinedSplit(BaseCrossValidator):

    def __init__(self, test_fold):
        self.test_fold = np.asarray(test_fold)
        self.unique_folds = np.unique(test_fold)

    def _iter_test_indices(self, X=None, y=None, groups=None):
        for fold in self.unique_folds:
            yield np.where(self.test_fold == fold)[0]

    def get_n_splits(self, X=None, y=None, groups=None):
        return len(self.unique_folds)

    def __repr__(self):
        return (
            "PredefinedSplit(test_fold={0}, unique_folds={1})".format(
                self.test_fold, self.unique_folds
            )
        )
[/PYTHON]

What will be the output of `__repr__`, given the following input:
[INPUT]
```
{
    "self": {
        "test_fold": "[1 1 2 2]",
        "unique_folds": "[1 2]"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "PredefinedSplit(test_fold=[1 1 2 2], unique_folds=[1 2])"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
class PredefinedSplit(BaseCrossValidator):

    def __init__(self, test_fold):
        self.test_fold = np.asarray(test_fold)
        self.unique_folds = np.unique(test_fold)

    def _iter_test_indices(self, X=None, y=None, groups=None):
        for fold in self.unique_folds:
            yield np.where(self.test_fold == fold)[0]

    def get_n_splits(self, X=None, y=None, groups=None):
        return len(self.unique_folds)

    def __repr__(self):
        return (
            "PredefinedSplit(test_fold={0}, unique_folds={1})".format(
                self.test_fold, self.unique_folds
            )
        )
[/PYTHON]

What will be the output of `__repr__`, given the following input:
[INPUT]
```
{
    "self": {
        "test_fold": "[1 1 2 2]",
        "unique_folds": "[1 2]"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "PredefinedSplit(test_fold=[1 1 2 2], unique_folds=[1 2])"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
class PredefinedSplit(BaseCrossValidator):

    def __init__(self, test_fold):
        self.test_fold = np.asarray(test_fold)
        self.unique_folds = np.unique(test_fold)

    def _iter_test_indices(self, X=None, y=None, groups=None):
        for fold in self.unique_folds:
            yield np.where(self.test_fold == fold)[0]

    def get_n_splits(self, X=None, y=None, groups=None):
        return len(self.unique_folds)

    def __repr__(self):
        return (
            "PredefinedSplit(test_fold={0}, unique_folds={1})".format(
                self.test_fold, self.unique_folds
            )
        )
[/PYTHON]

What will be the output of `__repr__`, given the following input:
[INPUT]
```
{
    "self": {
        "test_fold": "[1 1 2 2]",
        "unique_folds": "[1 2]"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "PredefinedSplit(test_fold=[1 1 2 2], unique_folds=[1 2])"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
class PredefinedSplit(BaseCrossValidator):

    def __init__(self, test_fold):
        self.test_fold = np.asarray(test_fold)
        self.unique_folds = np.unique(test_fold)

    def _iter_test_indices(self, X=None, y=None, groups=None):
        for fold in self.unique_folds:
            yield np.where(self.test_fold == fold)[0]

    def get_n_splits(self, X=None, y=None, groups=None):
        return len(self.unique_folds)

    def __repr__(self):
        return (
            "PredefinedSplit(test_fold={0}, unique_folds={1})".format(
                self.test_fold, self.unique_folds
            )
        )
[/PYTHON]

What will be the output of `__repr__`, given the following input:
[INPUT]
```
{
    "self": {
        "test_fold": "[1 1 2 2]",
        "unique_folds": "[1 2]"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "PredefinedSplit(test_fold=[1 1 2 2], unique_folds=[1 2])