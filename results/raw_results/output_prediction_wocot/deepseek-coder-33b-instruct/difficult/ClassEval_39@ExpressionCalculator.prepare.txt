
[OUTPUT]
```
{
    "output": "deque(['2', '+', '3', '+', '4'])"
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def __init__(self):
        self.stack = []
        self.result = []

    def is_operator(self, c):
        return c in {'+', '-', '*', '/', '(', ')', '%'}

    def precedence(self, op):
        if op == '^':
            return 3
        if op == '*' or op == '/':
            return 2
        if op == '+' or op == '-':
            return 1
        return 0

    def apply_operator(self, op):
        a = self.stack.pop()
        b = self.stack.pop()
        if op == '+':
            return b + a
        if op == '-':
            return b - a
        if op == '*':
            return b * a
        if op == '/':
            return b / a
        if op == '%':
            return b % a

    def calculate(self, expression):
        expression = expression.replace(" ", "")
        for i in range(len(expression)):
            if expression[i] == '(':
                self.stack.append(expression[i])
            elif expression[i].isdigit():
                num = 0
                while i < len(expression) and expression[i].isdigit():
                    num = num * 10 + int(expression[i])
                    i += 1
                self.result.append(num)
                i -= 1
            elif expression[i] == ')':
                while self.stack[-1] != '(':
                    self.result.append(self.apply_operator(self.stack.pop()))
                self.stack.pop()
            else:
                while self.stack and self.precedence(expression[i]) <= self.precedence(self.stack[-1]):
                    self.result.append(self.apply_operator(self.stack.pop()))
                self.stack.append(expression[i])
        while self.stack:
            self.result.append(self.apply_operator(self.stack.pop()))
        return self.result[0]
[/PYTHON]

What will be the output of `calculate`, given the following input:
[INPUT]
```
{
    "self": {
        "stack": [],
        "result": []
    },
    "args": {
        "expression": "2+3*4"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 14
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def __init__(self):
        self.stack = []
        self.result = []

    def is_operator(self, c):
        return c in {'+', '-', '*', '/', '(', ')', '%'}

    def precedence(self, op):
        if op == '^':
            return 3
        if op == '*' or op == '/':
            return 2
        if op == '+' or op == '-':
            return 1
        return 0

    def apply_operator(self, op):
        a = self.stack.pop()
        b = self.stack.pop()
        if op == '+':
            return b + a
        if op == '-':
            return b - a
        if op == '*':
            return b * a
        if op == '/':
            return b / a
        if op == '%':
            return b % a

    def calculate(self, expression):
        expression = expression.replace(" ", "")
        for i in range(len(expression)):
            if expression[i] == '(':
                self.stack.append(expression[i])
            elif expression[i].isdigit():
                num = 0
                while i < len(expression) and expression[i].isdigit():
                    num = num * 10 + int(expression[i])
                    i += 1
                self.result.append(num)
                i -= 1
            elif expression[i] == ')':
                while self.stack[-1] != '(':
                    self.result.append(self.apply_operator(self.stack.pop()))
                self.stack.pop()
            else:
                while self.stack and self.precedence(expression[i]) <= self.precedence(self.stack[-1]):
                    self.result.append(self.apply_operator(self.stack.pop()))
                self.stack.append(expression[i])
        while self.stack:
            self.result.append(self.apply_operator(self.stack.pop()))
        return self.result[0]
[/PYTHON]

What will be the output of `calculate`, given the following input:
[INPUT]
```
{
    "self": {
        "stack": [],
        "result": []
    },
    "args": {
        "expression": "2+3*4"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 14
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def __init__(self):
        self.stack = []
        self.result = []

    def is_operator(self, c):
        return c in {'+', '-', '*', '/', '(', ')', '%'}

    def precedence(self, op):
        if op == '^':
            return 3
        if op == '*' or op == '/':
            return 2
        if op == '+' or op == '-':
            return 1
        return 0

    def apply_operator(self, op):
        a = self.stack.pop()
        b = self.stack.pop()
        if op == '+':
            return b + a
        if op == '-':
            return b - a
        if op == '*':
            return b * a
        if op == '/':
            return b / a
        if op == '%':
            return b % a

    def calculate(self, expression):
        expression = expression.replace(" ", "")
        for i in range(len(expression)):
            if expression[i] == '(':
                self.stack.append(expression[i])
            elif expression[i].isdigit():
                num = 0
                while i < len(expression) and expression[i].isdigit():
                    num = num * 10 + int(expression[i])
                    i += 1
                self.result.append(num)
                i -= 1
            elif expression[i] == ')':
                while self.stack[-1] != '(':
                    self.result.append(self.apply_operator(self.stack.pop()))
                self.stack.pop()
            else:
                while self.stack and self.precedence(expression[i]) <= self.precedence(self.stack[-1]):
                    self.result.append(self.apply_operator(self.stack.pop()))
                self.stack.append(expression[i])
        while self.stack:
            self.result.append(self.apply_operator(self.stack.pop()))
        return self.result[0]
[/PYTHON]

What will be the output of `calculate`, given the following input:
[INPUT]
```
{
    "self": {
        "stack": [],
        "result": []
    },
    "args": {
        "expression": "2+3*4"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 14
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def __init__(self):
        self.stack =