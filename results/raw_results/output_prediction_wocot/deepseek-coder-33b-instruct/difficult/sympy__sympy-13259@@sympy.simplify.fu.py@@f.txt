
[OUTPUT]
```
{
    "output": "tanh(x)**(-3)"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
def _osbornei(e, d):

    def f(rv):
        if not isinstance(rv, TrigonometricFunction):
            return rv
        const, x = rv.args[0].as_independent(d, as_Add=True)
        a = x.xreplace({d: S.One}) + const * I
        if rv.func is sin:
            return sinh(a) / I
        elif rv.func is cos:
            return cosh(a)
        elif rv.func is tan:
            return tanh(a) / I
        elif rv.func is cot:
            return coth(a) * I
        elif rv.func is sec:
            return sech(a)
        elif rv.func is csc:
            return csch(a) * I
        else:
            raise NotImplementedError('unhandled %s' % rv.func)
    return bottom_up(e, f)
[/PYTHON]

What will be the output of `f`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "rv": "tanh(x)**(-3)"
    },
    "kwargs": {}
}
```

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "tanh(x)**(-3)"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
def _osbornei(e, d):

    def f(rv):
        if not isinstance(rv, TrigonometricFunction):
            return rv
        const, x = rv.args[0].as_independent(d, as_Add=True)
        a = x.xreplace({d: S.One}) + const * I
        if rv.func is sin:
            return sinh(a) / I
        elif rv.func is cos:
            return cosh(a)
        elif rv.func is tan:
            return tanh(a) / I
        elif rv.func is cot:
            return coth(a) * I
        elif rv.func is sec:
            return sech(a)
        elif rv.func is csc:
            return csch(a) * I
        else:
            raise NotImplementedError('unhandled %s' % rv.func)
    return bottom_up(e, f)
[/PYTHON]

What will be the output of `f`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "rv": "tanh(x)**(-3)"
    },
    "kwargs": {}
}
```

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "tanh(x)**(-3)"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
def _osbornei(e, d):

    def f(rv):
        if not isinstance(rv, TrigonometricFunction):
            return rv
        const, x = rv.args[0].as_independent(d, as_Add=True)
        a = x.xreplace({d: S.One}) + const * I
        if rv.func is sin:
            return sinh(a) / I
        elif rv.func is cos:
            return cosh(a)
        elif rv.func is tan:
            return tanh(a) / I
        elif rv.func is cot:
            return coth(a) * I
        elif rv.func is sec:
            return sech(a)
        elif rv.func is csc:
            return csch(a) * I
        else:
            raise NotImplementedError('unhandled %s' % rv.func)
    return bottom_up(e, f)
[/PYTHON]

What will be the output of `f`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "rv": "tanh(x)**(-3)"
    },
    "kwargs": {}
}
```

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "tanh(x)**(-3)"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
def _osbornei(e, d):

    def f(rv):
        if not isinstance(rv, TrigonometricFunction):
            return rv
        const, x = rv.args[0].as_independent(d, as_Add=True)
        a = x.xreplace({d: S.One}) + const * I
        if rv.func is sin:
            return sinh(a) / I
        elif rv.func is cos:
            return cosh(a)
        elif rv.func is tan:
            return tanh(a) / I
        elif rv.func is cot:
            return coth(a) * I
        elif rv.func is sec:
            return sech(a)
        elif rv.func is csc:
            return csch(a) * I
        else:
            raise NotImplementedError('unhandled %s' % rv.func)
    return bottom_up(e, f)
[/PYTHON]

What will be the output of `f`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "rv": "tanh(x)**(-3)"
    },
    "kwargs": {}
}
```

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "tanh(x)**(-3)"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
def _osbornei(e, d):

    def f(rv):
        if not isinstance(rv, TrigonometricFunction):
            return rv
        const, x = rv.args[0].as_independent(d, as_Add=True)
        a = x.xreplace({d: S.One}) + const * I
        if rv.func is sin:
            return sinh(a) / I
        elif rv.func is cos:
            return cosh(a)
        elif rv.func is tan:
            return tanh(a) / I
        elif rv.func is cot:
            return coth(a) * I
        elif rv.func is sec:
            return sech(a)
        elif rv.func is csc:
            return csch(a) * I
        else:
            raise NotImplementedError('unhandled %s' % rv.func)
    return bottom_up(e, f)
[/PYTHON]

What will be the output of `f`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "rv": "tanh(x)**(-3)"
    },
    "kwargs": {}
}
```

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "tanh(x)**(-3)"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
def _osbornei(e, d):

    def f(rv):
        if not isinstance(rv, TrigonometricFunction):
            return rv
        const, x = rv.args[0].as_independent(d, as_Add=True)
        a = x.xreplace({d: S.One}) + const * I