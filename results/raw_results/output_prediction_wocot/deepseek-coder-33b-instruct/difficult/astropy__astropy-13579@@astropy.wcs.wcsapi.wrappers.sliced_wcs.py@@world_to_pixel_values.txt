
[OUTPUT]
```
{
    "output": "[0 1]"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
import numpy as np
from astropy.io import fits
from astropy.wcs import WCS
from astropy.wcs.utils import proj_plane_pixel_scales
from astropy.wcs.wcsapi.fitswcs import WCSWrapper
from astropy.wcs.wcsapi.high_level_api import HighLevelWCSWrapper
from astropy.wcs.wcsapi.low_level_api import BaseLowLevelWCS
from astropy.wcs.wcsapi.utils import deserialize_class

__all__ = ['WCS']

class WCS(BaseLowLevelWCS, HighLevelWCSWrapper, WCSWrapper):

    def __init__(self, keysel=None, colsel=None):
        self._init_kwargs = {'keysel': keysel, 'colsel': colsel}
        self.naxis = None
        self._naxis = None
        self._pixel_bounds = None

    def _pixel_bounds(self):
        if self._pixel_bounds is None:
            self._pixel_bounds = [(0, self._naxis[i] - 1) for i in range(self.pixel_n_dim)]
        return self._pixel_bounds

    def _pixel_shape_all(self):
        return tuple(self._pixel_bounds[i][1] - self._pixel_bounds[i][0] + 1 for i in range(self.pixel_n_dim))

    def _pixel_shape_n_dim(self):
        return len(self._pixel_shape_all())

    def _pixel_shape(self):
        return self._pixel_shape_all()[0]

    def _pixel_shape_matrix(self):
        return np.diag(self._pixel_shape_all())

    def _pixel_shape_matrix_diagonal(self):
        return self._pixel_shape_all()

    def _pixel_shape_matrix_inverse(self):
        return np.diag([1. / self._pixel_shape_all()[i] for i in range(self.pixel_n_dim)])

    def _pixel_shape_matrix_inverse_diagonal(self):
        return [1. / self._pixel_shape_all()[i] for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_inverse_diagonal_squared(self):
        return [(1. / self._pixel_shape_all()[i]) ** 2 for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_inverse_squared(self):
        return np.diag(self._pixel_shape_matrix_inverse_diagonal_squared())

    def _pixel_shape_matrix_squared(self):
        return np.diag(self._pixel_shape_matrix_diagonal_squared())

    def _pixel_shape_matrix_diagonal_squared(self):
        return [self._pixel_shape_all()[i] ** 2 for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_diagonal_squared_inverse(self):
        return [1. / (self._pixel_shape_all()[i] ** 2) for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_squared_inverse(self):
        return np.diag(self._pixel_shape_matrix_diagonal_squared_inverse())

    def _pixel_shape_matrix_diagonal_inverse(self):
        return [1. / self._pixel_shape_all()[i] for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_inverse_diagonal_inverse(self):
        return [1. / (1. / self._pixel_shape_all()[i]) for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_inverse_squared_inverse(self):
        return np.diag(self._pixel_shape_matrix_diagonal_inverse_squared())

    def _pixel_shape_matrix_squared_inverse(self):
        return np.diag(self._pixel_shape_matrix_diagonal_inverse_squared())

    def _pixel_shape_matrix_diagonal_inverse_squared(self):
        return [(1. / self._pixel_shape_all()[i]) ** 2 for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_diagonal_inverse_squared_inverse(self):
        return [1. / ((1. / self._pixel_shape_all()[i]) ** 2) for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_diagonal_inverse_squared_inverse_squared(self):
        return [1. / ((1. / self._pixel_shape_all()[i]) ** 4) for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_diagonal_inverse_squared_inverse_squared_inverse(self):
        return [1. / (1. / ((1. / self._pixel_shape_all()[i]) ** 4)) for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_diagonal_inverse_squared_inverse_squared_inverse_squared(self):
        return [1. / (1. / ((1. / self._pixel_shape_all()[i]) ** 8)) for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_diagonal_inverse_squared_inverse_squared_inverse_squared_inverse(self):
        return [1. / (1. / (1. / ((1. / self._pixel_shape_all()[i]) ** 8))) for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_diagonal_inverse_squared_inverse_squared_inverse_squared_inverse_squared(self):
        return [1. / (1. / (1. / (1. / ((1. / self._pixel_shape_all()[i]) ** 16)))) for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_diagonal_inverse_squared_inverse_squared_inverse_squared_inverse_squared_inverse(self):
        return [1. / (1. / (1. / (1. / (1. / ((1. / self._pixel_shape_all()[i]) ** 32))))) for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_diagonal_inverse_squared_inverse_squared_inverse_squared_inverse_squared_inverse_squared(self):
        return [1. / (1. / (1. / (1. / (1. / (1. / ((1. / self._pixel_shape_all()[i]) ** 64)))))) for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_diagonal_inverse_squared_inverse_squared_inverse_squared_inverse_squared_inverse_squared_inverse(self):
        return [1. / (1. / (1. / (1. / (1. / (1. / (1. / ((1. / self._pixel_shape_all()[i]) ** 128))))))) for i in range(self.pixel_n_dim)]

    def _pixel_shape_matrix_diagonal_inverse_squared_inverse_squared_inverse_squared_inverse_