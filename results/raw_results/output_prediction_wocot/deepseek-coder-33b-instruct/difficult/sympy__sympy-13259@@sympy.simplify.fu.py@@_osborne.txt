
[OUTPUT]
```
{
    "output": "2*I*sin(2)"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
def _osborne(e, d):
    def f(rv):
        if not isinstance(rv, HyperbolicFunction):
            return rv
        a = rv.args[0]
        a = a * d if not a.is_Add else Add._from_args([i * d for i in a.args])
        if rv.func is sinh:
            return I * sin(a)
        elif rv.func is cosh:
            return cos(a)
        elif rv.func is tanh:
            return I * tan(a)
        elif rv.func is coth:
            return cot(a) / I
        elif rv.func is sech:
            return sec(a)
        elif rv.func is csch:
            return csc(a) / I
        else:
            raise NotImplementedError('unhandled %s' % rv.func)
    return bottom_up(e, f)
[/PYTHON]

What will be the output of `_osborne`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "e": "2*sinh(2)",
        "d": 3
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "6*I*sin(6)"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
def _osborne(e, d):
    def f(rv):
        if not isinstance(rv, HyperbolicFunction):
            return rv
        a = rv.args[0]
        a = a * d if not a.is_Add else Add._from_args([i * d for i in a.args])
        if rv.func is sinh:
            return I * sin(a)
        elif rv.func is cosh:
            return cos(a)
        elif rv.func is tanh:
            return I * tan(a)
        elif rv.func is coth:
            return cot(a) / I
        elif rv.func is sech:
            return sec(a)
        elif rv.func is csch:
            return csc(a) / I
        else:
            raise NotImplementedError('unhandled %s' % rv.func)
    return bottom_up(e, f)
[/PYTHON]

What will be the output of `_osborne`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "e": "2*sinh(2)",
        "d": 3
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "6*I*sin(6)"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
def _osborne(e, d):
    def f(rv):
        if not isinstance(rv, HyperbolicFunction):
            return rv
        a = rv.args[0]
        a = a * d if not a.is_Add else Add._from_args([i * d for i in a.args])
        if rv.func is sinh:
            return I * sin(a)
        elif rv.func is cosh:
            return cos(a)
        elif rv.func is tanh:
            return I * tan(a)
        elif rv.func is coth:
            return cot(a) / I
        elif rv.func is sech:
            return sec(a)
        elif rv.func is csch:
            return csc(a) / I
        else:
            raise NotImplementedError('unhandled %s' % rv.func)
    return bottom_up(e, f)
[/PYTHON]

What will be the output of `_osborne`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "e": "2*sinh(2)",
        "d": 3
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "6*I*sin(6)"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
def _osborne(e, d):
    def f(rv):
        if not isinstance(rv, HyperbolicFunction):
            return rv
        a = rv.args[0]
        a = a * d if not a.is_Add else Add._from_args([i * d for i in a.args])
        if rv.func is sinh:
            return I * sin(a)
        elif rv.func is cosh:
            return cos(a)
        elif rv.func is tanh:
            return I * tan(a)
        elif rv.func is coth:
            return cot(a) / I
        elif rv.func is sech:
            return sec(a)
        elif rv.func is csch:
            return csc(a) / I
        else:
            raise NotImplementedError('unhandled %s' % rv.func)
    return bottom_up(e, f)
[/PYTHON]

What will be the output of `_osborne`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "e": "2*sinh(2)",
        "d": 3
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "6*I*sin(6)"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
def _osborne(e, d):
    def f(rv):
        if not isinstance(rv, HyperbolicFunction):
            return rv
        a = rv.args[0]
        a = a * d if not a.is_Add else Add._from_args([i * d for i in a.args])
        if rv.func is sinh:
            return I * sin(a)
        elif rv.func is cosh:
            return cos(a)
        elif rv.func is tanh:
            return I * tan(a)
        elif rv.func is coth:
            return cot(a) / I
        elif rv.func is sech:
            return sec(a)
        elif rv.func is csch:
            return csc(a) / I
        else:
            raise NotImplementedError('unhandled %s' % rv.func)
    return bottom_up(e, f)
[/PYTHON]

What will be the output of `_osborne`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "e": "2*sinh(2)",
        "d": 3
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "6*I*sin(6)"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
def _osborne(e, d):
    def f(rv):
        if not isinstance(rv, HyperbolicFunction):
            return rv
        a = rv.args[0]
        a = a * d