
[OUTPUT]
```
{
    "output": "32"
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums = sorted(nums1 + nums2)
        if len(nums) % 2 == 0:
            return (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2
        else:
            return nums[len(nums) // 2]
[/PYTHON]

What will be the output of `findMedianSortedArrays`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "nums1": [1, 3],
        "nums2": [2]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 2.0
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def longestPalindrome(self, s: str) -> str:
        if not s:
            return ""
        res = ""
        for i in range(len(s)):
            # odd case, like "aba"
            tmp = self.helper(s, i, i)
            if len(tmp) > len(res):
                res = tmp
            # even case, like "abba"
            tmp = self.helper(s, i, i+1)
            if len(tmp) > len(res):
                res = tmp
        return res

    def helper(self, s, l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1
        return s[l+1:r]
[/PYTHON]

What will be the output of `longestPalindrome`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "babad"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "bab"
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]
        dp[-1][-1] = True
        for i in range(len(s), -1, -1):
            for j in range(len(p) - 1, -1, -1):
                first_match = i < len(s) and p[j] in {s[i], '.'}
                if j+1 < len(p) and p[j+1] == '*':
                    dp[i][j] = dp[i][j+2] or first_match and dp[i+1][j]
                else:
                    dp[i][j] = first_match and dp[i+1][j+1]
        return dp[0][0]
[/PYTHON]

What will be the output of `isMatch`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "aa",
        "p": "a*"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def myAtoi(self, s: str) -> int:
        s = s.strip()
        if not s:
            return 0
        sign = -1 if s[0] == '-' else 1
        if s[0] in ['-', '+']:
            s = s[1:]
        res = 0
        for c in s:
            if not c.isdigit():
                break
            res = res * 10 + int(c)
            if res > 2**31 - 1:
                return 2**31 - 1 if sign == 1 else -2**31
        return sign * res
[/PYTHON]

What will be the output of `myAtoi`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "42"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 42
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def reverse(self, x: int) -> int:
        sign = [1,-1][x < 0]
        rst = sign*int(str(abs(x))[::-1])
        return rst if -(2**31)-1 < rst < 2**31 else 0
[/PYTHON]

What will be the output of `reverse`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "x": 123
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 321
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def isPalindrome(self, x: int) -> bool:
        return str(x) == str(x)[::-1]
[/PYTHON]

What will be the output of `isPalindrome`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "x": 121
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def romanToInt(self, s: str) -> int:
        roman = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}
        res = 0
        for i in range(len(s)):
            if i > 0 and roman[s[i]] > roman[s[i - 1]]:
                res += roman[s[i]] - 2 * roman[s[i - 1]]
            else:
                res += roman[s[i]]
        return res
[/PYTHON]

What will be the output of `romanToInt`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "III"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if not strs:
            return ""
        shortest = min(strs,key=len)
        for i, ch in enumerate(shortest):
