
[OUTPUT]
```
{
    "output": [
        0.25,
        [
            0.25
        ]
    ]
}
```
[/OUTPUT]

[PYTHON]
import numpy as np

class MetricsCalculator3:

    def __init__(self):
        pass

    @staticmethod
    def mrr(data):
        if type(data) != list and type(data) != tuple:
            raise Exception('the input must be a tuple([0,...,1,...],int) or a iteration of list of tuple')
        if len(data) == 0:
            return (0.0, [0.0])
        if type(data) == tuple:
            sub_list, total_num = data
            sub_list = np.array(sub_list)
            if total_num == 0:
                return (0.0, [0.0])
            else:
                ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                mr_np = sub_list * ranking_array
                mr = 0.0
                for team in mr_np:
                    if team > 0:
                        mr = team
                        break
                return (mr, [mr])
        if type(data) == list:
            separate_result = []
            for sub_list, total_num in data:
                sub_list = np.array(sub_list)
                if total_num == 0:
                    mr = 0.0
                else:
                    ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                    mr_np = sub_list * ranking_array
                    mr = 0.0
                    for team in mr_np:
                        if team > 0:
                            mr = team
                            break
                separate_result.append(mr)
            return (np.mean(separate_result), separate_result)
[/PYTHON]

What will be the output of `mrr`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "data": [
            [
                0,
                0,
                0,
                1
            ],
            4
        ]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]
        
[OUTPUT]
```
{
    "output": [
        0.25,
        [
            0.25
        ]
    ]
}
```
[/OUTPUT]

[PYTHON]
import numpy as np

class MetricsCalculator4:

    def __init__(self):
        pass

    @staticmethod
    def mrr(data):
        if type(data) != list and type(data) != tuple:
            raise Exception('the input must be a tuple([0,...,1,...],int) or a iteration of list of tuple')
        if len(data) == 0:
            return (0.0, [0.0])
        if type(data) == tuple:
            sub_list, total_num = data
            sub_list = np.array(sub_list)
            if total_num == 0:
                return (0.0, [0.0])
            else:
                ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                mr_np = sub_list * ranking_array
                mr = 0.0
                for team in mr_np:
                    if team > 0:
                        mr = team
                        break
                return (mr, [mr])
        if type(data) == list:
            separate_result = []
            for sub_list, total_num in data:
                sub_list = np.array(sub_list)
                if total_num == 0:
                    mr = 0.0
                else:
                    ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                    mr_np = sub_list * ranking_array
                    mr = 0.0
                    for team in mr_np:
                        if team > 0:
                            mr = team
                            break
                separate_result.append(mr)
            return (np.mean(separate_result), separate_result)
[/PYTHON]

What will be the output of `mrr`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "data": [
            [
                0,
                0,
                0,
                1
            ],
            4
        ]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]
        
[OUTPUT]
```
{
    "output": [
        0.25,
        [
            0.25
        ]
    ]
}
```
[/OUTPUT]

[PYTHON]
import numpy as np

class MetricsCalculator5:

    def __init__(self):
        pass

    @staticmethod
    def mrr(data):
        if type(data) != list and type(data) != tuple:
            raise Exception('the input must be a tuple([0,...,1,...],int) or a iteration of list of tuple')
        if len(data) == 0:
            return (0.0, [0.0])
        if type(data) == tuple:
            sub_list, total_num = data
            sub_list = np.array(sub_list)
            if total_num == 0:
                return (0.0, [0.0])
            else:
                ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                mr_np = sub_list * ranking_array
                mr = 0.0
                for team in mr_np:
                    if team > 0:
                        mr = team
                        break
                return (mr, [mr])
        if type(data) == list:
            separate_result = []
            for sub_list, total_num in data:
                sub_list = np.array(sub_list)
                if total_num == 0:
                    mr = 0.0
                else:
                    ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                    mr_np = sub_list * ranking_array
                    mr = 0.0
                    for team in mr_np:
                        if team > 0:
                            mr = team
                            break
                separate_result.append(mr)
            return (np.mean(separate_result), separate_result)
[/PYTHON]

What will be the output of `mrr`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "data": [
            [
                0,
                0,
                0,
                1
            ],
            4
        ]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]
        
[OUTPUT]
```
{
    "output": [
        0.25,
        [
            0.25
        ]
    ]
}
```
[/OUTPUT]

[PYTHON]
import numpy as np

class MetricsCalculator6:

    def __init__(self):
        pass

    @staticmethod
    def mrr(data):
        if type(data) != list and type(data) != tuple:
            raise Exception('the input must be a tuple([0,...,1,...],int) or a iteration of list of tuple')
        if len(data) == 0:
            return (0.0, [0.0])
        if type(data) == tuple:
            sub_list, total_num = data
            sub_list = np.array(sub_list)
            if total_num == 0:
                return (0.0, [0.0])
            else:
                ranking