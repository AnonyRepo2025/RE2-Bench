
[OUTPUT]
```
{
    "output": 0.0
}
```
[/OUTPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
import numpy as np
from sklearn.metrics import roc_auc_score

def roc_auc_score(y_true, y_score, *, average='macro', sample_weight=None, max_fpr=None, multi_class='raise', labels=None):
    if max_fpr is not None and not (0 <= max_fpr <= 1):
        raise ValueError('max_fpr must be in range [0, 1], got {0}'.format(max_fpr))
    if multi_class not in ['raise', 'ovr', 'ovo']:
        raise ValueError('multi_class must be "raise", "ovr" or "ovo", got {0}'.format(multi_class))
    if average not in (None, 'macro', 'weighted', 'micro', 'samples'):
        raise ValueError('average must be one of None, "macro", "weighted", "micro", "samples", got {0}'.format(average))
    if average == 'samples' and (sample_weight is not None or not np.all(np.unique(y_true) == [0, 1])):
        raise ValueError('average="samples" is only meaningful for binary classification. If the target values are in [0, 1], you may use average="binary" instead.')
    if average == 'samples' and (max_fpr is not None or labels is not None):
        raise ValueError('average="samples" is only meaningful for binary classification. You cannot set max_fpr or labels for it.')
    if average == 'samples' and multi_class != 'raise':
        raise ValueError('average="samples" is only meaningful for binary classification. You cannot set multi_class for it.')
    if average == 'samples' and (y_true.ndim > 1 or (y_true.ndim == 2 and y_true.shape[1] != 1)):
        raise ValueError('average="samples" is only meaningful for binary classification. You cannot set y_true to be multi-label.')
    if average == 'samples' and y_score.ndim == 1:
        y_score = np.column_stack([1 - y_score, y_score])
    if average == 'samples' and y_score.ndim == 2 and y_score.shape[1] == 1:
        y_score = np.column_stack([1 - y_score, y_score])
    if average == 'samples' and y_score.ndim == 2 and y_score.shape[1] > 2:
        if multi_class == 'raise':
            raise ValueError('average="samples" is only meaningful for binary classification. For multi-class multi-output, please use average="macro" or "weighted".')
        else:
            average = None
    if average == 'samples' and y_score.ndim > 2:
        if multi_class == 'raise':
            raise ValueError('average="samples" is only meaningful for binary classification. For multi-class multi-output, please use average="macro" or "weighted".')
        else:
            average = None
    if average == 'samples' and y_score.ndim == 3 and y_score.shape[2] > 1:
        if multi_class == 'raise':
            raise ValueError('average="samples" is only meaningful for binary classification. For multi-class multi-output, please use average="macro" or "weighted".')
        else:
            average = None
    if average == 'samples' and y_score.ndim == 3 and y_score.shape[2] == 1:
        y_score = y_score[:, :, 0]
    if average == 'samples' and y_score.ndim > 3:
        if multi_class == 'raise':
            raise ValueError('average="samples" is only meaningful for binary classification. For multi-class multi-output, please use average="macro" or "weighted".')
        else:
            average = None
    if average == 'samples' and y_score.ndim == 2 and y_score.shape[1] == 2:
        y_score = y_score[:, 1]
    if average == 'samples' and y_score.ndim == 3 and y_score.shape[2] == 2:
        y_score = y_score[:, :, 1]
    if average == 'samples' and y_score.ndim == 4 and y_score.shape[3] == 2:
        y_score = y_score[:, :, :, 1]
    if average == 'samples' and y_score.ndim == 5 and y_score.shape[4] == 2:
        y_score = y_score[:, :, :, :, 1]
    if average == 'samples' and y_score.ndim == 6 and y_score.shape[5] == 2:
        y_score = y_score[:, :, :, :, :, 1]
    if average == 'samples' and y_score.ndim == 7 and y_score.shape[6] == 2:
        y_score = y_score[:, :, :, :, :, :, 1]
    if average == 'samples' and y_score.ndim == 8 and y_score.shape[7] == 2:
        y_score = y_score[:, :, :, :, :, :, :, 1]
    if average == 'samples' and y_score.ndim == 9 and y_score.shape[8] == 2:
        y_score = y_score[:, :, :, :, :, :, :, :, 1]
    if average == 'samples' and y_score.ndim == 10 and y_score.shape[9] == 2:
        y_score = y_score[:, :, :, :, :, :, :, :, :, 1]
    if average == 'samples' and y_score.ndim == 11 and y_score.shape[10] == 2:
        y_score = y_score[:, :, :, :, :, :, :, :, :, :, 1]
    if average == 'samples' and y_score.ndim == 12 and y_score.shape[11] == 2:
        y_score = y_score[:, :, :, :, :, :, :, :, :, :, :, 1]
    if average == 'samples' and y_score.ndim == 13 and y_score.shape[12] == 2:
        y_score = y_score[:, :, :, :, :, :, :, :, :, :, :, :, 1]
    if average == 'samples' and y_score.ndim == 14 and y_score.shape[13] == 2:
        y_score = y_score[:, :, :, :, :, :, :, :, :, :, :, :, :, 1]
    if average == 'samples' and y_score.ndim == 15 and y_score.shape[14] == 2:
        y_score = y_score[:, :, :, :, :, :, :, :, :, :, :, :, :, :, 1]
    if average == 'samples' and y_score.ndim == 16 and y_score.shape[15] == 2:
        y_score = y_score[:, :, :, :, :, :, :, :, :, :, :, :, :, :, :, 1]
    if average == 'samples' and y_score.ndim == 17 and y_score.shape[16] == 2:
        y_score = y_score[:, :, :, :, :, :, :, :, :, :, :, :, :, :, :, :, 1]
    if average == 'samples' and y_score.ndim == 18 and y_score.shape[17] == 2:
        y_score = y_score[:, :, :, :, :, :, :, :, :