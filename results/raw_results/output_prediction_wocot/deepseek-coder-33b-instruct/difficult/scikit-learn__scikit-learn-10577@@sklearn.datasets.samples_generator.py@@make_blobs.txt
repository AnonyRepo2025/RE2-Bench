
[OUTPUT]
```
{
    "output": "ValueError: n_samples=None cannot be used to seed a numpy.random.RandomState instance"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
import numpy as np
from scipy import linalg
import scipy.sparse as sp
from collections import Iterable
from ..preprocessing import MultiLabelBinarizer
from ..utils import check_array, check_random_state
from ..utils import shuffle as util_shuffle
from ..utils.random import sample_without_replacement
from ..externals import six
map = six.moves.map
zip = six.moves.zip

def make_blobs(n_samples=100, n_features=2, centers=None, cluster_std=1.0, center_box=(-10.0, 10.0), shuffle=True, random_state=None):
    generator = check_random_state(random_state)
    if isinstance(n_samples, numbers.Integral):
        if centers is None:
            centers = 3
        if isinstance(centers, numbers.Integral):
            n_centers = centers
            centers = generator.uniform(center_box[0], center_box[1], size=(n_centers, n_features))
        else:
            centers = check_array(centers)
            n_features = centers.shape[1]
            n_centers = centers.shape[0]
    else:
        n_centers = len(n_samples)
        if centers is None:
            centers = generator.uniform(center_box[0], center_box[1], size=(n_centers, n_features))
        try:
            assert len(centers) == n_centers
        except TypeError:
            raise ValueError('Parameter `centers` must be array-like. Got {0} instead'.format(centers))
        except AssertionError:
            raise ValueError('Length of `n_samples` not consistent with number of centers. Got n_samples = {0} and centers = {1}'.format(n_samples, centers))
        else:
            centers = check_array(centers)
            n_features = centers.shape[1]
    if hasattr(cluster_std, '__len__') and len(cluster_std) != n_centers:
        raise ValueError('Length of `clusters_std` not consistent with number of centers. Got centers = {0} and cluster_std = {1}'.format(centers, cluster_std))
    if isinstance(cluster_std, numbers.Real):
        cluster_std = np.ones(len(centers)) * cluster_std
    X = []
    y = []
    if isinstance(n_samples, Iterable):
        n_samples_per_center = n_samples
    else:
        n_samples_per_center = [int(n_samples // n_centers)] * n_centers
        for i in range(n_samples % n_centers):
            n_samples_per_center[i] += 1
    for i, (n, std) in enumerate(zip(n_samples_per_center, cluster_std)):
        X.append(generator.normal(loc=centers[i], scale=std, size=(n, n_features)))
        y += [i] * n
    X = np.concatenate(X)
    y = np.array(y)
    if shuffle:
        total_n_samples = np.sum(n_samples)
        indices = np.arange(total_n_samples)
        generator.shuffle(indices)
        X = X[indices]
        y = y[indices]
    return (X, y)
[/PYTHON]

Functions called during the execution:
[PYTHON]
.sklearn.utils.validation.check_random_state

def check_random_state(seed):
    print('[CALL]/home/changshu/CODEMIND/scripts/swebench/swebench_playground/dep/scikit-learn__scikit-learn-10577/sklearn/utils/validation.py@@check_random_state[/CALL]')
    'Turn seed into a np.random.RandomState instance\n\n    Parameters\n    ----------\n    seed : None | int | instance of RandomState\n        If seed is None, return the RandomState singleton used by np.random.\n        If seed is an int, return a new RandomState instance seeded with seed.\n        If seed is already a RandomState instance, return it.\n        Otherwise raise ValueError.\n    '
    if seed is None or seed is np.random:
        return np.random.mtrand._rand
    if isinstance(seed, (numbers.Integral, np.integer)):
        return np.random.RandomState(seed)
    if isinstance(seed, np.random.RandomState):
        return seed
    raise ValueError('%r cannot be used to seed a numpy.random.RandomState instance' % seed)

.sklearn.utils.validation.check_array

def check_array(array, accept_sparse=False, dtype='numeric', order=None, copy=False, force_all_finite=True, ensure_2d=True, allow_nd=False, ensure_min_samples=1, ensure_min_features=1, warn_on_dtype=False, estimator=None):
    print('[CALL]/home/changshu/CODEMIND/scripts/swebench/swebench_playground/dep/scikit-learn__scikit-learn-10577/sklearn/utils/validation.py@@check_array[/CALL]')
    'Input validation on an array, list, sparse matrix or similar.\n\n    By default, the input is converted to an at least 2D numpy array.\n    If the dtype of the array is object, attempt converting to float,\n    raising on failure.\n\n    Parameters\n    ----------\n    array : object\n        Input object to check / convert.\n\n    accept_sparse : string, boolean or list/tuple of strings (default=False)\n        String[s] representing allowed sparse matrix formats, such as \'csc\',\n        \'csr\', etc. If the input is sparse but not in the allowed format,\n        it will be converted to the first listed format. True allows the input\n        to be any format. False means that a sparse matrix input will\n        raise an error.\n\n        .. deprecated:: 0.19\n           Passing \'None\' to parameter ``accept_sparse`` in methods is\n           deprecated in version 0.19 "and will be removed in 0.21. Use\n           ``accept_sparse=False`` instead.\n\n    dtype : string, type, list of types or None (default="numeric")\n        Data type of result. If None, the dtype of the input is preserved.\n        If "numeric", dtype is preserved unless array.dtype is object.\n        If dtype is a list of types, conversion on the first type is only\n        performed if the dtype of the input is not in the list.\n\n    order : \'F\', \'C\' or None (default=None)\n        Whether an array will be forced to be fortran or c-style.\n        When order is None (default), then if copy=False, nothing is ensured\n        about the memory layout of the output array; otherwise (copy=True)\n        the memory layout of the returned array is kept as close as possible\n        to the original array.\n\n    copy : boolean (default=False)\n        Whether a forced copy will be triggered. If copy=False, a copy might\n        be triggered by a conversion.\n\n    force_all_finite : boolean or \'allow-nan\', (default=True)\n        Whether to raise an error on np.inf and np.nan in X. The possibilities\n        are:\n\n        - True: Force all values of X to be finite.\n        - False: accept both np.inf and np.nan in X.\n        - \'allow-nan\':  accept  only  np.nan  values in  X.  Values  cannot  be\n          infinite.\n\n        .. versionadded:: 0.