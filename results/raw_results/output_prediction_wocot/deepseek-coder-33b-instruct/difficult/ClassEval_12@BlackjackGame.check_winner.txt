
[OUTPUT]
```
{
    "output": "Dealer wins"
}
```
[/OUTPUT]

[PYTHON]
import random

class BlackjackGame:

    def __init__(self):
        self.deck = self.create_deck()
        self.player_hand = []
        self.dealer_hand = []

    def create_deck(self):
        suits = ['H', 'D', 'C', 'S']
        ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        deck = [rank + suit for suit in suits for rank in ranks]
        random.shuffle(deck)
        return deck

    def deal_cards(self):
        self.player_hand = [self.deck.pop(), self.deck.pop()]
        self.dealer_hand = [self.deck.pop(), self.deck.pop()]

    def calculate_hand_value(self, hand):
        value = 0
        num_aces = 0
        for card in hand:
            rank = card[:-1]
            if rank.isdigit():
                value += int(rank)
            elif rank in ['J', 'Q', 'K']:
                value += 10
            elif rank == 'A':
                value += 11
                num_aces += 1
        while value > 21 and num_aces > 0:
            value -= 10
            num_aces -= 1
        return value

    def check_winner(self, player_hand, dealer_hand):
        player_value = self.calculate_hand_value(player_hand)
        dealer_value = self.calculate_hand_value(dealer_hand)
        if player_value > 21 and dealer_value > 21:
            if player_value <= dealer_value:
                return 'Player wins'
            else:
                return 'Dealer wins'
        elif player_value > 21:
            return 'Dealer wins'
        elif dealer_value > 21:
            return 'Player wins'
        elif player_value <= dealer_value:
            return 'Dealer wins'
        else:
            return 'Player wins'
[/PYTHON]

What will be the output of `check_winner`, given the following input:
[INPUT]
```
{
    "self": {
        "deck": [
            "8H",
            "10C",
            "KC",
            "2C",
            "AS",
            "7H",
            "QS",
            "9H",
            "6H",
            "KS",
            "3C",
            "6D",
            "KH",
            "AH",
            "4C",
            "9S",
            "8S",
            "4S",
            "QH",
            "AC",
            "QD",
            "6C",
            "7D",
            "2D",
            "4D",
            "3H",
            "JC",
            "5H",
            "JS",
            "7S",
            "5D",
            "10D",
            "6S",
            "QC",
            "5S",
            "8D",
            "5C",
            "AD",
            "10S",
            "JD",
            "2H",
            "9C",
            "8C",
            "3S",
            "4H",
            "9D",
            "2S",
            "KD",
            "3D",
            "JH",
            "10H",
            "7C"
        ],
        "player_hand": [
            "2S",
            "4S",
            "5S"
        ],
        "dealer_hand": [
            "2S",
            "JS",
            "QS"
        ]
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]
        
[OUTPUT]
```
{
    "output": "Dealer wins"
}
```
[/OUTPUT]

[PYTHON]
import random

class BlackjackGame:

    def __init__(self):
        self.deck = self.create_deck()
        self.player_hand = []
        self.dealer_hand = []

    def create_deck(self):
        suits = ['H', 'D', 'C', 'S']
        ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        deck = [rank + suit for suit in suits for rank in ranks]
        random.shuffle(deck)
        return deck

    def deal_cards(self):
        self.player_hand = [self.deck.pop(), self.deck.pop()]
        self.dealer_hand = [self.deck.pop(), self.deck.pop()]

    def calculate_hand_value(self, hand):
        value = 0
        num_aces = 0
        for card in hand:
            rank = card[:-1]
            if rank.isdigit():
                value += int(rank)
            elif rank in ['J', 'Q', 'K']:
                value += 10
            elif rank == 'A':
                value += 11
                num_aces += 1
        while value > 21 and num_aces > 0:
            value -= 10
            num_aces -= 1
        return value

    def check_winner(self, player_hand, dealer_hand):
        player_value = self.calculate_hand_value(player_hand)
        dealer_value = self.calculate_hand_value(dealer_hand)
        if player_value > 21 and dealer_value > 21:
            if player_value <= dealer_value:
                return 'Player wins'
            else:
                return 'Dealer wins'
        elif player_value > 21:
            return 'Dealer wins'
        elif dealer_value > 21:
            return 'Player wins'
        elif player_value <= dealer_value:
            return 'Dealer wins'
        else:
            return 'Player wins'
[/PYTHON]

What will be the output of `check_winner`, given the following input:
[INPUT]
```
{
    "self": {
        "deck": [
            "8H",
            "10C",
            "KC",
            "2C",
            "AS",
            "7H",
            "QS",
            "9H",
            "6H",
            "KS",
            "3C",
            "6D",
            "KH",
            "AH",
            "4C",
            "9S",
            "8S",
            "4S",
            "QH",
            "AC",
            "QD",
            "6C",
            "7D",
            "2D",
            "4D",
            "3H",
            "JC",
            "5H",
            "JS",
            "7S",
            "5D",
            "10D",
            "6S",
            "QC",
            "5S",
            "8D",
            "5C",
            "AD",
            "10S",
            "JD",
            "2H",
            "9C",
            "8C",
            "3S",
            "4H",
            "9D",
            "2S",
            "KD",
            "3D",
            "JH",
            "10H",
            "7C"
        ],
        "player_hand": [
            "2S",
            "4S",
            "5S"
        ],
        "dealer_hand": [
            "2S",
            "JS",
            "QS"
        ]
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output