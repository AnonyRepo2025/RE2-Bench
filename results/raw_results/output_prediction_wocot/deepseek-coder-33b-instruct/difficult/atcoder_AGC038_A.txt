
[OUTPUT]
```
{
    "output": "1000 1000 0 486"
}
```
[/OUTPUT]

[PYTHON]
import sys

def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    A.sort()
    B.sort()
    ans = 10**9
    j = 0
    for i in range(N):
        while j < M-1 and abs(A[i] - B[j]) >= abs(A[i] - B[j+1]):
            j += 1
        ans = min(ans, abs(A[i] - B[j]))
    print(ans)
    return

def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))
    M = int(next(tokens))
    A = [int(next(tokens)) for _ in range(N)]
    B = [int(next(tokens)) for _ in range(M)]
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"3 2\\n1 2 3\\n4 5\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "1"
}
```
[/OUTPUT]

[PYTHON]
import sys

def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    A.sort()
    B.sort()
    ans = 10**9
    j = 0
    for i in range(N):
        while j < M-1 and abs(A[i] - B[j]) >= abs(A[i] - B[j+1]):
            j += 1
        ans = min(ans, abs(A[i] - B[j]))
    print(ans)
    return

def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))
    M = int(next(tokens))
    A = [int(next(tokens)) for _ in range(N)]
    B = [int(next(tokens)) for _ in range(M)]
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"3 2\\n1 2 3\\n4 5\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "1"
}
```
[/OUTPUT]

[PYTHON]
import sys

def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    A.sort()
    B.sort()
    ans = 10**9
    j = 0
    for i in range(N):
        while j < M-1 and abs(A[i] - B[j]) >= abs(A[i] - B[j+1]):
            j += 1
        ans = min(ans, abs(A[i] - B[j]))
    print(ans)
    return

def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))
    M = int(next(tokens))
    A = [int(next(tokens)) for _ in range(N)]
    B = [int(next(tokens)) for _ in range(M)]
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"3 2\\n1 2 3\\n4 5\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "1"
}
```
[/OUTPUT]

[PYTHON]
import sys

def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    A.sort()
    B.sort()
    ans = 10**9
    j = 0
    for i in range(N):
        while j < M-1 and abs(A[i] - B[j]) >= abs(A[i] - B[j+1]):
            j += 1
        ans = min(ans, abs(A[i] - B[j]))
    print(ans)
    return

def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))
    M = int(next(tokens))
    A = [int(next(tokens)) for _ in range(N)]
    B = [int(next(tokens)) for _ in range(M)]
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"3 2\\n1 2 3\\n4 5\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "1"
}
```
[/OUTPUT]

[PYTHON]
import sys

def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    A.sort()
    B.sort()
    ans = 10**9
    j = 0
    for i in range(N):
        while j < M-1 and abs(A[i] - B[j]) >= abs(A[i] - B[j+1]):
            j += 1
        ans = min(ans, abs(A[i] - B[j]))
    print(ans)
    return

def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))
    M = int(next(tokens))
    A = [int(next(tokens)) for _ in range(N)]
    B = [int(next(tokens)) for _ in range(M)]
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"3 2\\n1 2 3\\n4 5\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "1"
}
```
[/OUTPUT]

[PYTHON]
import sys

def solve(N: int, M: int, A: "List[int]", B: