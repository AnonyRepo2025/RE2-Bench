
[OUTPUT]
```
{
    "output": [
        [
            1,
            6,
            2
        ],
        [
            7,
            0,
            8
        ],
        [
            4,
            5,
            3
        ]
    ]
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums = sorted(nums1 + nums2)
        n = len(nums)
        if n % 2 == 0:
            return (nums[n // 2 - 1] + nums[n // 2]) / 2
        else:
            return nums[n // 2]
[/PYTHON]

What will be the output of `findMedianSortedArrays`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "nums1": [1, 2],
        "nums2": [3, 4]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 2.5
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def longestPalindrome(self, s: str) -> str:
        if not s:
            return ""
        n = len(s)
        dp = [[False]*n for _ in range(n)]
        ans = (1, 0)
        for i in range(n):
            dp[i][i] = True
        for i in range(n-1, -1, -1):
            for j in range(i+1, n):
                if s[i] == s[j]:
                    if j-i == 1 or dp[i+1][j-1]:
                        dp[i][j] = True
                        if ans[0] < j-i+1:
                            ans = (j-i+1, i)
        return s[ans[1]:ans[1]+ans[0]]
[/PYTHON]

What will be the output of `longestPalindrome`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "babad"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "bab"
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def maxArea(self, height: List[int]) -> int:
        max_area = 0
        left, right = 0, len(height) - 1
        while left < right:
            max_area = max(max_area, min(height[left], height[right]) * (right - left))
            if height[left] < height[right]:
                left += 1
            else:
                right -= 1
        return max_area
[/PYTHON]

What will be the output of `maxArea`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "height": [1,8,6,2,5,4,8,3,7]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 49
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if not s:
            return 0
        left, right = 0, 0
        max_len = 0
        chars = set()
        while right < len(s):
            if s[right] not in chars:
                chars.add(s[right])
                max_len = max(max_len, len(chars))
                right += 1
            else:
                chars.remove(s[left])
                left += 1
        return max_len
[/PYTHON]

What will be the output of `lengthOfLongestSubstring`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "abcabcbb"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def reverse(self, x: int) -> int:
        sign = [1,-1][x < 0]
        rst = sign*int(str(abs(x))[::-1])
        return rst if -(2**31)-1 < rst < 2**31 else 0
[/PYTHON]

What will be the output of `reverse`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "x": 123
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 321
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def myAtoi(self, s: str) -> int:
        s = s.strip()
        if not s:
            return 0
        sign = -1 if s[0] == '-' else 1
        if s[0] in ['-', '+']:
            s = s[1:]
        res = 0
        for char in s:
            if not char.isdigit():
                break
            res = res*10 + int(char)
            if res*sign >= 2**31 - 1:
                return 2**31 - 1
            if res*sign <= -2**31:
                return -2**31
        return sign*res
[/PYTHON]

What will be the output of `myAtoi`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "42"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 42
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x < 0:
            return False
        return str(x) == str(x)[::-1]
[/PYTHON]

What will be the output of `isPalindrome`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "x": 121
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def romanToInt(self, s: str) -> int:
        roman_to_int = {
            'I': 1,
            'V': 5,
            'X': 10,
            'L': 50,
            'C': 100,
            'D': 500,
            'M': 1