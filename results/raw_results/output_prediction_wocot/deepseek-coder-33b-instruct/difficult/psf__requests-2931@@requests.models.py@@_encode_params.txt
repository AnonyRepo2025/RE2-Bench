
[OUTPUT]
```
{
    "output": []
}
```
[/OUTPUT]
[/PYTHON]

[PYTHON]
class RequestMethods(RequestEncodingMixin):

    def request(self, method, url,
                params=None, data=None, headers=None, cookies=None, files=None, auth=None,
                timeout=None, allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None, json=None):

        # Create the Request.
        req = Request(
            method=method.upper(),
            url=url,
            headers=headers,
            files=files,
            data=data,
            json=json,
            params=params,
            auth=auth,
            cookies=cookies,
            hooks=hooks,
        )
        prep = self.prepare_request(req)

        proxies = proxies or {}

        settings = self.merge_environment_settings(
            prep.url, proxies, stream, verify, cert
        )

        # Send the request.
        send_kwargs = {
            'timeout': timeout,
            'allow_redirects': allow_redirects,
        }
        send_kwargs.update(settings)
        resp = self.send(prep, **send_kwargs)

        if resp.encoding == 'ISO-8859-1':
            encodings = get_encodings_from_content(resp.text)
            if encodings:
                encoding = encodings[0]
            else:
                encoding = resp.apparent_encoding

            resp.encoding = encoding

        return resp
[/PYTHON]

Functions called during the execution:
[PYTHON]
.requests.sessions.Session.prepare_request

def prepare_request(self, request):
    """Prepares a :class:`Request <Request>` for sending.

    :param request: :class:`Request <Request>` object.
    :return: Prepared request.
    """

    p = request.prepare()
    if self.cert:
        p.cert = self.cert
    if self.proxies:
        p.proxies = self.proxies

    return p

[/PYTHON]
What will be the output of `prepare_request`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "request": {
            "method": "GET",
            "url": "http://example.com",
            "headers": {},
            "files": {},
            "data": {},
            "json": {},
            "params": {},
            "auth": {},
            "cookies": {},
            "hooks": {}
        }
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "prepared_request": {
        "method": XXX,
        "url": XXX,
        "headers": XXX,
        "body": XXX,
        "hooks": XXX
    }
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "prepared_request": {
        "method": "GET",
        "url": "http://example.com",
        "headers": {},
        "body": None,
        "hooks": {}
    }
}
```
[/OUTPUT]
[/PYTHON]

[PYTHON]
class Request(object):

    def __init__(self, method, url,
                 params=None, data=None, headers=None, cookies=None, files=None, auth=None,
                 hooks=None, json=None):

        self.method = method.upper()

        self.url = url
        self.original_url = url

        self.params = params or {}
        self.data = data or {}
        self.json = json
        self.headers = headers or {}
        self.files = files
        self.hooks = hooks or {}

        self.auth = auth
        self.cookies = cookies or cookiejar_from_dict({})

    def prepare(self):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` that can be sent with a :class:`Session <Session>`."""
        p = PreparedRequest()

        p.prepare(
            method=self.method.upper(),
            url=self.url,
            headers=self.headers,
            files=self.files,
            data=self.data,
            json=self.json,
            params=self.params,
            auth=self.auth,
            cookies=self.cookies,
            hooks=self.hooks,
        )

        return p
[/PYTHON]

Functions called during the execution:
[PYTHON]
.requests.models.PreparedRequest.prepare

def prepare(self, method=None, url=None,
            headers=None, files=None, data=None,
            params=None, auth=None, cookies=None, hooks=None, json=None):
    """Constructs a :class:`PreparedRequest <PreparedRequest>` that can be sent with a :class:`Session <Session>`."""

    self.method = method or self.method
    self.url = url or self.url
    self.headers = headers or self.headers
    self.files = files or self.files
    self.data = data or self.data
    self.json = json or self.json
    self.params = params or self.params
    self.auth = auth or self.auth
    self.hooks = hooks or self.hooks

    if cookies:
        self.cookies = cookies

    return self
[/PYTHON]
What will be the output of `prepare`, given the following input:
[INPUT]
```
{
    "self": {
        "method": "GET",
        "url": "http://example.com",
        "params": {},
        "data": {},
        "headers": {},
        "files": {},
        "auth": {},
        "cookies": {},
        "hooks": {},
        "json": {}
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "prepared_request": {
        "method": XXX,
        "url": XXX,
        "headers": XXX,
        "body": XXX,
        "hooks": XXX
    }
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "prepared_request": {
        "method": "GET",
        "url": "http://example.com",
        "headers": {},
        "body": None,
        "hooks": {}
    }
}
```
[/OUTPUT]
[/PYTHON]

[PYTHON]
class PreparedRequest(object):

    def __init__(self):
        self.body = None
        self.hooks = {}

    def prepare(self, method=None, url=None,
                headers=None, files=None, data=None,
                params=None, auth=None, cookies=None, hooks=None, json=None):

        self.method = method
        self.url = url
        self.headers = headers or {}
        self.files = files

        if json is not None:
            self.headers.update(default_headers())
            self.headers['Content-Type'] = 'application/json'
            self.body = complexjson.dumps(json)
        elif files:
            self.headers.update(default_headers())
            self.headers['Content-Type'] = 'multipart/form-data; boundary=%s' % self._boundary
            self.body = self._encode_files(files, params)
        elif data:
            self.headers.update(default_headers())
            self.headers['Content-Type'] = 'application/x-www-form-urlencoded'
            self.body = self._encode_params(data)
        elif params:
            self.headers.update(default_headers())
            self.body = self._encode_params(params)

        if auth is not None:
            self.headers['Authorization'] = auth.encode_header()

        if cookies:
            self.headers['Cookie'] =