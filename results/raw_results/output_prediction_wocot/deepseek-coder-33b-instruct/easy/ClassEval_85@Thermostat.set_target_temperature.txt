
[OUTPUT]
```
{
    "output": "None"
}
```
[/OUTPUT]

[PYTHON]
class Timer:

    def __init__(self):
        self.start_time = None

    def start(self):
        if self.start_time is not None:
            raise RuntimeError('Timer already started')
        self.start_time = time.perf_counter()

    def stop(self):
        if self.start_time is None:
            raise RuntimeError('Timer not started')
        elapsed_time = time.perf_counter() - self.start_time
        self.start_time = None
        print(f'Elapsed time: {elapsed_time:.6f} seconds')
[/PYTHON]

What will be the output of `stop`, given the following input:
[INPUT]
```
{
    "self": {
        "start_time": 1640995200.0
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "Elapsed time: XXX seconds"
}
```
[/OUTPUT]

[PYTHON]
class Counter:

    def __init__(self):
        self.count = 0

    def increment(self):
        self.count += 1

    def decrement(self):
        self.count -= 1
[/PYTHON]

What will be the output of `increment`, given the following input:
[INPUT]
```
{
    "self": {
        "count": 0
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "None"
}
```
[/OUTPUT]

[PYTHON]
class Calculator:

    def __init__(self):
        self.result = 0

    def add(self, num):
        self.result += num

    def subtract(self, num):
        self.result -= num
[/PYTHON]

What will be the output of `subtract`, given the following input:
[INPUT]
```
{
    "self": {
        "result": 10
    },
    "args": {
        "num": 5
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "None"
}
```
[/OUTPUT]

[PYTHON]
class BankAccount:

    def __init__(self, balance=0):
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if amount > self.balance:
            raise ValueError('Insufficient funds')
        self.balance -= amount
[/PYTHON]

What will be the output of `withdraw`, given the following input:
[INPUT]
```
{
    "self": {
        "balance": 100
    },
    "args": {
        "amount": 50
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "None"
}
```
[/OUTPUT]

[PYTHON]
class Rectangle:

    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height
[/PYTHON]

What will be the output of `area`, given the following input:
[INPUT]
```
{
    "self": {
        "width": 5,
        "height": 10
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 50
}
```
[/OUTPUT]

[PYTHON]
class Circle:

    def __init__(self, radius):
        self.radius = radius

    def area(self):
        import math
        return math.pi * self.radius ** 2
[/PYTHON]

What will be the output of `area`, given the following input:
[INPUT]
```
{
    "self": {
        "radius": 5
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 78.53981633974483
}
```
[/OUTPUT]

[PYTHON]
class Student:

    def __init__(self, name, age, grade):
        self.name = name
        self.age = age
        self.grade = grade

    def introduce(self):
        return f'Hello, my name is {self.name} and I am {self.age} years old. I am in grade {self.grade}.'
[/PYTHON]

What will be the output of `introduce`, given the following input:
[INPUT]
```
{
    "self": {
        "name": "John",
        "age": 15,
        "grade": 10
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "Hello, my name is John and I am 15 years old. I am in grade 10."
}
```
[/OUTPUT]

[PYTHON]
class Book:

    def __init__(self, title, author, pages):
        self.title = title
        self.author = author
        self.pages = pages

    def read(self, pages_read):
        self.pages -= pages_read
        return self.pages
[/PYTHON]

What will be the output of `read`, given the following input:
[INPUT]
```
{
    "self": {
        "title": "1984",
        "author": "George Orwell",
        "pages": 328
    },
    "args": {
        "pages_read": 100
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 228
}
```
[/OUTPUT]

[PYTHON]
class Car:

    def __init__(self, make, model, year, color):
        self.make = make
        self.model = model
        self.year = year
        self.color = color

    def paint(self, new_color):
        self.color = new_color
[/PYTHON]

What will be the output of `paint`, given the following input:
[INPUT]
```
{
    "self": {
        "make": "Toyota",
        "model": "Corolla",
        "year": 2015,
        "color": "Red"
    },
    "args": {
        "new_color": "Blue"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{