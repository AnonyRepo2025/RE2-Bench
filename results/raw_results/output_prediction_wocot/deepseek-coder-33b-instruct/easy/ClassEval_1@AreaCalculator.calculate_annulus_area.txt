
[OUTPUT]
```
{
    "output": 3.141592653589793
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def isPalindrome(self, x: int) -> bool:
        return str(x) == str(x)[::-1]
[/PYTHON]

What will be the output of `isPalindrome`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "x": 121
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def reverse(self, x: int) -> int:
        sign = [1,-1][x < 0]
        rst = sign*int(str(abs(x))[::-1])
        return rst if -(2**31)-1 < rst < 2**31 else 0
[/PYTHON]

What will be the output of `reverse`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "x": 123
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 321
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def romanToInt(self, s: str) -> int:
        roman = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}
        res = 0
        for i in range(len(s) - 1):
            if roman[s[i]] < roman[s[i + 1]]:
                res -= roman[s[i]]
            else:
                res += roman[s[i]]
        return res + roman[s[-1]]
[/PYTHON]

What will be the output of `romanToInt`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "III"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if not strs: return ""
        shortest = min(strs,key=len)
        for i, ch in enumerate(shortest):
            for other in strs:
                if other[i] != ch:
                    return shortest[:i]
        return shortest 
[/PYTHON]

What will be the output of `longestCommonPrefix`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "strs": ["flower","flow","flight"]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "fl"
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        dict = {"]":"[", "}":"{", ")":"("}
        for char in s:
            if char in dict.values():
                stack.append(char)
            elif char in dict.keys():
                if stack == [] or dict[char] != stack.pop():
                    return False
            else:
                return False
        return stack == []
[/PYTHON]

What will be the output of `isValid`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "()"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode(0)
        cur = dummy
        while l1 and l2:
            if l1.val < l2.val:
                cur.next = l1
                l1 = l1.next
            else:
                cur.next = l2
                l2 = l2.next
            cur = cur.next
        cur.next = l1 or l2
        return dummy.next
[/PYTHON]

What will be the output of `mergeTwoLists`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "l1": [1,2,4],
        "l2": [1,3,4]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": [1,1,2,3,4,4]
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        if not nums:
            return 0
        newTail = 0
        for i in range(1, len(nums)):
            if nums[i] != nums[newTail]:
                newTail += 1
                nums[newTail] = nums[i]
        return newTail + 1
[/PYTHON]

What will be the output of `removeDuplicates`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [1,1,2]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 2
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if not needle:
            return 0
        for i in range(len(haystack) - len(needle) + 1):
            if haystack[i:i+len(needle)] == needle:
                return i
        return -1
[/PYTHON]

What will be the output of `strStr`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "haystack": "hello",
        "needle": "ll"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 2
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        if target > nums[len(nums) - 1]:
            return len(nums)
        for i in range(len(nums)):
            if nums[