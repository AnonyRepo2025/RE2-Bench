
[OUTPUT]
```
{
    "output": 0.5
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_max_value(numbers: list) -> float:
    return max(numbers)
[/PYTHON]

What will be the output of `get_max_value` given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 5
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_min_value(numbers: list) -> float:
    return min(numbers)
[/PYTHON]

What will be the output of `get_min_value` given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 1
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_average_value(numbers: list) -> float:
    return sum(numbers) / len(numbers)
[/PYTHON]

What will be the output of `get_average_value` given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3.0
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_median_value(numbers: list) -> float:
    numbers.sort()
    length = len(numbers)
    if length % 2 == 0:
        return (numbers[length // 2] + numbers[length // 2 - 1]) / 2
    else:
        return numbers[length // 2]
[/PYTHON]

What will be the output of `get_median_value` given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_mode_value(numbers: list) -> float:
    from collections import Counter
    counter = Counter(numbers)
    return counter.most_common(1)[0][0]
[/PYTHON]

What will be the output of `get_mode_value` given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1, 2, 3, 4, 5, 5]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 5
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_range_value(numbers: list) -> float:
    return max(numbers) - min(numbers)
[/PYTHON]

What will be the output of `get_range_value` given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 4
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_variance_value(numbers: list) -> float:
    mean = sum(numbers) / len(numbers)
    return sum((x - mean) ** 2 for x in numbers) / len(numbers)
[/PYTHON]

What will be the output of `get_variance_value` given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 2.5
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_standard_deviation_value(numbers: list) -> float:
    mean = sum(numbers) / len(numbers)
    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)
    return variance ** 0.5
[/PYTHON]

What will be the output of `get_standard_deviation_value` given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 1.5811388300841898
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_percentile_value(numbers: list, percentile: float) -> float:
    numbers.sort()
    k = (len(numbers) - 1) * percentile
    f = math.floor(k)
    c = math.ceil(k)
    if f == c:
        return numbers[int(k)]
    else:
        d0 = numbers[int(f)] * (c - k)
        d1 = numbers[int(c)] * (k - f)
        return d0 + d1
[/PYTHON]

What will be the output of `get_percentile_value` given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1, 2, 3, 4, 5],
        "percentile": 0.5
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_interquartile_range_value(numbers: list) -> float:
    numbers.sort()
    q1 = get_percentile_value(numbers, 0.25)
    q3 = get_percentile_value(numbers, 0.75)
    return q3