
[OUTPUT]
```
{
    "output": [12, 1]
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_max_value(numbers):
    return max(numbers)
[/PYTHON]

What will be the output of `get_max_value` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 5
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_min_value(numbers):
    return min(numbers)
[/PYTHON]

What will be the output of `get_min_value` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 1
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_sum(numbers):
    return sum(numbers)
[/PYTHON]

What will be the output of `get_sum` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 15
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_average(numbers):
    return sum(numbers) / len(numbers)
[/PYTHON]

What will be the output of `get_average` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3.0
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_median(numbers):
    numbers.sort()
    length = len(numbers)
    if length % 2 == 0:
        return (numbers[length // 2] + numbers[length // 2 - 1]) / 2
    else:
        return numbers[length // 2]
[/PYTHON]

What will be the output of `get_median` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_mode(numbers):
    from collections import Counter
    counter = Counter(numbers)
    max_count = max(list(counter.values()))
    mode_val = [num for num, freq in counter.items() if freq == max_count]
    if len(mode_val) == len(numbers):
        return None
    else:
        return mode_val
[/PYTHON]

What will be the output of `get_mode` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": None
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_range(numbers):
    return max(numbers) - min(numbers)
[/PYTHON]

What will be the output of `get_range` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 4
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_variance(numbers):
    mean = sum(numbers) / len(numbers)
    return sum((x - mean) ** 2 for x in numbers) / len(numbers)
[/PYTHON]

What will be the output of `get_variance` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 2.5
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_standard_deviation(numbers):
    mean = sum(numbers) / len(numbers)
    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)
    return variance ** 0.5
[/PYTHON]

What will be the output of `get_standard_deviation` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 1.5811388300841898
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def is_palindrome(text):
    text = text.lower().replace(' ', '')
    return text == text[::-1]
[/PYTHON]

What will be the output of `is_palindrome` given the following input:
[INPUT]
```
{
    "inputs": {
        "text": "racecar"
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def is_anagram(text1, text2):
    return sorted(text1.lower().replace(' ', '')) == sorted(text2.lower().replace(' ', ''))
[/PYTHON]

What will be the output of `is_anagram` given the following input:
[INPUT]
```
{
    "inputs": {
        "text1": "listen",
        "text2": "silent"
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}