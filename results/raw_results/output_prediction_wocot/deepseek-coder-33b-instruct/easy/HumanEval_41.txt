
[OUTPUT]
```
{
    "output": 64
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_max_value(numbers: list):
    return max(numbers)
[/PYTHON]

What will be the output of `get_max_value` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 5
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_min_value(numbers: list):
    return min(numbers)
[/PYTHON]

What will be the output of `get_min_value` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 1
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_average(numbers: list):
    return sum(numbers) / len(numbers)
[/PYTHON]

What will be the output of `get_average` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3.0
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_median(numbers: list):
    numbers.sort()
    length = len(numbers)
    if length % 2 == 0:
        return (numbers[length // 2] + numbers[length // 2 - 1]) / 2
    else:
        return numbers[length // 2]
[/PYTHON]

What will be the output of `get_median` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_mode(numbers: list):
    from collections import Counter
    counter = Counter(numbers)
    max_count = max(list(counter.values()))
    mode_val = [num for num, freq in counter.items() if freq == max_count]
    return mode_val
[/PYTHON]

What will be the output of `get_mode` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": [2]
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_range(numbers: list):
    return max(numbers) - min(numbers)
[/PYTHON]

What will be the output of `get_range` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 4
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_variance(numbers: list):
    mean = sum(numbers) / len(numbers)
    return sum((x - mean) ** 2 for x in numbers) / len(numbers)
[/PYTHON]

What will be the output of `get_variance` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 2.5
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def get_standard_deviation(numbers: list):
    mean = sum(numbers) / len(numbers)
    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)
    return variance ** 0.5
[/PYTHON]

What will be the output of `get_standard_deviation` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 1.5811388300841898
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def is_palindrome(text: str):
    text = text.lower().replace(' ', '')
    return text == text[::-1]
[/PYTHON]

What will be the output of `is_palindrome` given the following input:
[INPUT]
```
{
    "inputs": {
        "text": "A man a plan a canal Panama"
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def is_anagram(text1: str, text2: str):
    text1 = text1.lower().replace(' ', '')
    text2 = text2.lower().replace(' ', '')
    return sorted(text1) == sorted(text2)
[/PYTHON]

What will be the output of `is_anagram` given the following input:
[INPUT]
```
{
    "inputs": {
        "text1": "Listen",
        "text2": "Silent"
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def is_prime(n: int):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
[/PYTHON]

What will be the output of `is_prime`