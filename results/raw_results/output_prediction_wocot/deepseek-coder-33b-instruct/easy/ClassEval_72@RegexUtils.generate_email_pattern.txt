
[OUTPUT]
```
{
    "output": "\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b"
}
```
[/OUTPUT]

[PYTHON]
class StringUtils:

    def count_vowels(self, s: str) -> int:
        return sum(1 for c in s if c.lower() in 'aeiou')
[/PYTHON]

What will be the output of `count_vowels`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "Hello, World!"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3
}
```
[/OUTPUT]

[PYTHON]
class ListUtils:

    def find_common(self, l1: list, l2: list) -> list:
        return list(set(l1) & set(l2))
[/PYTHON]

What will be the output of `find_common`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "l1": [1, 2, 3, 4, 5],
        "l2": [4, 5, 6, 7, 8]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": [4, 5]
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def is_prime(self, n: int) -> bool:
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True
[/PYTHON]

What will be the output of `is_prime`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "n": 17
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def gcd(self, a: int, b: int) -> int:
        while b != 0:
            a, b = b, a % b
        return a
[/PYTHON]

What will be the output of `gcd`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "a": 12,
        "b": 15
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def lcm(self, a: int, b: int) -> int:
        def gcd(a: int, b: int) -> int:
            while b != 0:
                a, b = b, a % b
            return a
        return a * b // gcd(a, b)
[/PYTHON]

What will be the output of `lcm`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "a": 12,
        "b": 15
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 60
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def factorial(self, n: int) -> int:
        if n == 0:
            return 1
        else:
            return n * self.factorial(n-1)
[/PYTHON]

What will be the output of `factorial`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "n": 5
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 120
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def fibonacci(self, n: int) -> int:
        if n <= 1:
            return n
        else:
            return self.fibonacci(n-1) + self.fibonacci(n-2)
[/PYTHON]

What will be the output of `fibonacci`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "n": 10
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 55
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def is_palindrome(self, n: int) -> bool:
        return str(n) == str(n)[::-1]
[/PYTHON]

What will be the output of `is_palindrome`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "n": 12321
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def is_armstrong(self, n: int) -> bool:
        num = n
        result = 0
        n = len(str(n))
        while(num != 0):
            digit = num % 10
            result = result + digit ** n
            num = num//10
        return result == n
[/PYTHON]

What will be the output of `is_armstrong`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "n": 153
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def is_perfect(self, n: int) -> bool:
        sum = 1
        i = 2
        while i * i <= n:
            if n % i:
                i += 1
            else:
                if i * (n // i) == n:
                    sum = sum + i + n//i
                else:
                    sum = sum + i
                i += 1
        return sum == n and n != 1
[/PYTHON]

What will be