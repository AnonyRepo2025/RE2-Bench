
[OUTPUT]
```
{
    "output": 40.0
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
[/PYTHON]

What will be the output of `is_prime` given the following input:
[INPUT]
```
{
    "inputs": {
        "n": 17
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    else:
        fib = [0, 1]
        while len(fib) < n:
            fib.append(fib[-1] + fib[-2])
        return fib
[/PYTHON]

What will be the output of `fibonacci` given the following input:
[INPUT]
```
{
    "inputs": {
        "n": 10
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
[/PYTHON]

What will be the output of `factorial` given the following input:
[INPUT]
```
{
    "inputs": {
        "n": 5
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 120
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def sum_of_squares(n):
    return sum(i**2 for i in range(1, n+1))
[/PYTHON]

What will be the output of `sum_of_squares` given the following input:
[INPUT]
```
{
    "inputs": {
        "n": 4
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 30
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def is_palindrome(s):
    return s == s[::-1]
[/PYTHON]

What will be the output of `is_palindrome` given the following input:
[INPUT]
```
{
    "inputs": {
        "s": "racecar"
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def count_vowels(s):
    return sum(1 for c in s.lower() if c in 'aeiou')
[/PYTHON]

What will be the output of `count_vowels` given the following input:
[INPUT]
```
{
    "inputs": {
        "s": "Hello World"
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def reverse_string(s):
    return s[::-1]
[/PYTHON]

What will be the output of `reverse_string` given the following input:
[INPUT]
```
{
    "inputs": {
        "s": "Hello World"
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "dlroW olleH"
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def is_anagram(s1, s2):
    return sorted(s1) == sorted(s2)
[/PYTHON]

What will be the output of `is_anagram` given the following input:
[INPUT]
```
{
    "inputs": {
        "s1": "anagram",
        "s2": "nagaram"
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def is_subsequence(s1, s2):
    i = j = 0
    while i < len(s1) and j < len(s2):
        if s1[i] == s2[j]:
            i += 1
        j += 1
    return i == len(s1)
[/PYTHON]

What will be the output of `is_subsequence` given the following input:
[INPUT]
```
{
    "inputs": {
        "s1": "abc",
        "s2": "ahbgdc"
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def is_substring(s1, s2):
    return s1 in s2
[/PYTHON]

What will be the output of `is_substring` given the following input:
[INPUT]
```
{
    "inputs": {
        "s1": "abc",
        "s2": "abcd"
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def is_rotation(s1, s2):
    return len(s1) == len(s2) and s2 in s1 + s1
[/PYTHON]

What will be the output of `is_rotation` given the following input:
[INPUT]
```
{
    "inputs": {
        "s1": "abc",
        "s2": "cab"
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def is_permutation(s1, s2):
    return sorted(s1) ==