
[OUTPUT]
```
{
    "output": "001"
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def find_common_elements(list1, list2):
    return list(set(list1) & set(list2))
[/PYTHON]

What will be the output of `find_common_elements` given the following input:
[INPUT]
```
{
    "inputs": {
        "list1": [1, 2, 3, 4, 5],
        "list2": [4, 5, 6, 7, 8]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": [4, 5]
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def find_missing_numbers(numbers):
    return [i for i in range(1, max(numbers) + 1) if i not in numbers]
[/PYTHON]

What will be the output of `find_missing_numbers` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 5, 6, 7, 9, 11]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": [4, 8, 10]
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def find_duplicates(numbers):
    return [number for number in set(numbers) if numbers.count(number) > 1]
[/PYTHON]

What will be the output of `find_duplicates` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 2, 3, 4, 4, 5, 5, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": [2, 4, 5]
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def find_max_min(numbers):
    return max(numbers), min(numbers)
[/PYTHON]

What will be the output of `find_max_min` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": {
        "max": XXX,
        "min": XXX
    }
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": {
        "max": 5,
        "min": 1
    }
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def find_median(numbers):
    numbers.sort()
    if len(numbers) % 2 == 0:
        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2
    else:
        return numbers[len(numbers) // 2]
[/PYTHON]

What will be the output of `find_median` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def find_mode(numbers):
    from collections import Counter
    n = len(numbers)
    data = Counter(numbers)
    get_mode = dict(data)
    mode = [k for k, v in get_mode.items() if v == max(list(data.values()))]
    if len(mode) == n:
        return "No mode found"
    else:
        return mode
[/PYTHON]

What will be the output of `find_mode` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 2, 3, 4, 4, 5, 5, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": [5]
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def find_average(numbers):
    return sum(numbers) / len(numbers)
[/PYTHON]

What will be the output of `find_average` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3.0
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def find_variance(numbers):
    mean = sum(numbers) / len(numbers)
    return sum((x - mean) ** 2 for x in numbers) / len(numbers)
[/PYTHON]

What will be the output of `find_variance` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 2.0
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def find_standard_deviation(numbers):
    mean = sum(numbers) / len(numbers)
    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)
    return variance ** 0.5
[/PYTHON]

What will be the output of `find_standard_deviation` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 1.4142135623730951
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def find_percentile(numbers, percentile):
    numbers.sort()
    k = (len(numbers) - 1) * percentile
    f = math.floor(k)
    c = math.ceil(k)
    if f == c:
        return numbers[int(k)]
    else:
        return numbers[int(f)] * (c - k) + numbers[int(c)] * (k - f)
[/PYTHON]

What will be the output of `find_percentile` given the following input:
[INPUT]
```
{
    "inputs": {
        "numbers": [