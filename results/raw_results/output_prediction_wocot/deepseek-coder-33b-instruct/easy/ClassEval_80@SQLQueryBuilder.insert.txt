
[OUTPUT]
```
{
    "output": "INSERT INTO users (name, age, region) VALUES ('Tom', '30', 'USA')"
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hashmap = {}
        for i in range(len(nums)):
            complement = target - nums[i]
            if complement in hashmap:
                return [i, hashmap[complement]]
            hashmap[nums[i]] = i
[/PYTHON]

What will be the output of `twoSum`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [2, 7, 11, 15],
        "target": 9
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": [0, 1]
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {")": "(", "}": "{", "]": "["}
        for char in s:
            if char in mapping:
                top_element = stack.pop() if stack else '#'
                if mapping[char] != top_element:
                    return False
            else:
                stack.append(char)
        return not stack
[/PYTHON]

What will be the output of `isValid`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "()[]{}"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": True
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        min_price = float('inf')
        max_profit = 0
        for i in range(len(prices)):
            if prices[i] < min_price:
                min_price = prices[i]
            elif prices[i] - min_price > max_profit:
                max_profit = prices[i] - min_price
        return max_profit
[/PYTHON]

What will be the output of `maxProfit`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "prices": [7, 1, 5, 3, 6, 4]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 5
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        current_sum = max_sum = nums[0]
        for num in nums[1:]:
            current_sum = max(num, current_sum + num)
            max_sum = max(max_sum, current_sum)
        return max_sum
[/PYTHON]

What will be the output of `maxSubArray`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 6
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        return len(nums) != len(set(nums))
[/PYTHON]

What will be the output of `containsDuplicate`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [1, 2, 3, 1]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": True
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        length = len(nums)
        L, R, answer = [0]*length, [0]*length, [0]*length
        L[0] = 1
        for i in range(1, length):
            L[i] = nums[i - 1] * L[i - 1]
        R[length - 1] = 1
        for i in reversed(range(length - 1)):
            R[i] = nums[i + 1] * R[i + 1]
        for i in range(length):
            answer[i] = L[i] * R[i]
        return answer
[/PYTHON]

What will be the output of `productExceptSelf`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [1, 2, 3, 4]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": [24, 12, 8, 6]
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 0
        max_so_far = min_so_far = result = nums[0]
        for i in range(1, len(nums)):
            curr = nums[i]
            temp_max = max(curr, max_so_far * curr, min_so_far * curr)
            min_so_far = min(curr, max_so_far * curr, min_so_far * curr)
            max_so_far = temp_max
            result = max(max_so_far, result)
        return result
[/PYTHON]

What will be the output of `maxProduct`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [2, 3, -2, 4]
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 6
}
```
[/OUTPUT]

[PYTHON]
class Solution:
    def findMin(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]
        left, right = 0, len(nums) - 1
        if nums[right] > nums[0]:
            return nums[0]
        while right >= left:
            mid = left + (right - left) // 2
            if nums[mid] > nums[mid + 1]:
                return nums[mid + 1]
            if nums[mid - 1] > nums[mid]:
                return nums[