
[OUTPUT]
```
{
    "output": 1.25
}
```
[/OUTPUT]

[PYTHON]
import numpy as np

class DataStatistics3:

    def __init__(self, data):
        self.data = np.array(data)

    def get_standard_deviation(self):
        return round(np.std(self.data), 2)
[/PYTHON]

What will be the output of `get_standard_deviation`, given the following input:
[INPUT]
```
{
    "self": {
        "data": "[1 2 3 4]"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]
        
[OUTPUT]
```
{
    "output": 1.12
}
```
[/OUTPUT]

[PYTHON]
import numpy as np

class DataStatistics4:

    def __init__(self, data):
        self.data = np.array(data)

    def get_median(self):
        return round(np.median(self.data), 2)
[/PYTHON]

What will be the output of `get_median`, given the following input:
[INPUT]
```
{
    "self": {
        "data": "[1 2 3 4]"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]
        
[OUTPUT]
```
{
    "output": 2.5
}
```
[/OUTPUT]

[PYTHON]
import numpy as np

class DataStatistics5:

    def __init__(self, data):
        self.data = np.array(data)

    def get_mode(self):
        return round(np.mean(self.data), 2)
[/PYTHON]

What will be the output of `get_mode`, given the following input:
[INPUT]
```
{
    "self": {
        "data": "[1 2 3 4]"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]
        
[OUTPUT]
```
{
    "output": 2.5
}
```
[/OUTPUT]

[PYTHON]
import numpy as np

class DataStatistics6:

    def __init__(self, data):
        self.data = np.array(data)

    def get_range(self):
        return round(np.ptp(self.data), 2)
[/PYTHON]

What will be the output of `get_range`, given the following input:
[INPUT]
```
{
    "self": {
        "data": "[1 2 3 4]"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]
        
[OUTPUT]
```
{
    "output": 3
}
```
[/OUTPUT]

[PYTHON]
import numpy as np

class DataStatistics7:

    def __init__(self, data):
        self.data = np.array(data)

    def get_percentile(self, percentile):
        return round(np.percentile(self.data, percentile), 2)
[/PYTHON]

What will be the output of `get_percentile`, given the following input:
[INPUT]
```
{
    "self": {
        "data": "[1 2 3 4]"
    },
    "args": [],
    "kwargs": {
        "percentile": 50
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]
        
[OUTPUT]
```
{
    "output": 2.5
}
```
[/OUTPUT]

[PYTHON]
import numpy as np

class DataStatistics8:

    def __init__(self, data):
        self.data = np.array(data)

    def get_iqr(self):
        return round(np.subtract(*np.percentile(self.data, [75, 25])), 2)
[/PYTHON]

What will be the output of `get_iqr`, given the following input:
[INPUT]
```
{
    "self": {
        "data": "[1 2 3 4]"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]
        
[OUTPUT]
```
{
    "output": 2
}
```
[/OUTPUT]

[PYTHON]
import numpy as np

class DataStatistics9:

    def __init__(self, data):
        self.data = np.array(data)

    def get_covariance(self, data2):
        return round(np.cov(self.data, data2)[0][1], 2)
[/PYTHON]

What will be the output of `get_covariance`, given the following input:
[INPUT]
```
{
    "self": {
        "data": "[1 2 3 4]"
    },
    "args": [],
    "kwargs": {
        "data2": "[1 2 3 4]"
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]
        
[OUTPUT]
```
{
    "output": 1.25
}
```
[/OUTPUT]

[PYTHON]
import numpy as np

class DataStatistics10:

    def __init__(self, data):
        self.data = np.array(data)

    def get_correlation(self, data2):
        return round(np.corrcoef(self.data, data2)[0][1], 2)
[/PYTHON]

What will be the output of `get_correlation`, given the following input:
[INPUT]
```
{
    "self": {
        "data": "[1 2 3 4]"
    },
    "args": [],
    "kwargs": {
        "data2": "[1 2 3 4]"
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]
        
[OUTPUT]
```
{
    "output": 1.0
}
```
[/OUTPUT]

[PYTHON]
import numpy as np

class DataStatistics11:

    def __init__(self, data):
        self.data = np.array(data)

    def get_skewness(self):
        return round(np.mean(np.power(self.data - np.mean(self.data), 3)) / np.power(np.std(self.data), 3), 2)
[/PYTHON]

What will be the output of `get_skewness`, given the following input:
[INPUT]
```
{
    "self": {
        "data": "[1 2 3 4]"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]
        
[OUTPUT]
```
{
    "output": 0.0
}
```
[/OUTPUT]

[PYTHON