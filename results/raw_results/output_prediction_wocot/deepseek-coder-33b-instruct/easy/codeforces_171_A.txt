
[OUTPUT]
```
{
    "output": 121312
}
```
[/OUTPUT]

[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def prime_factors(n):
    factors = []
    while n % 2 == 0:
        factors.append(2)
        n = n / 2
    for i in range(3, int(n**0.5)+1, 2):
        while n % i== 0:
            factors.append(int(i))
            n = n / i
    if n > 2:
        factors.append(int(n))
    return factors

def sum_of_prime_factors(n):
    factors = prime_factors(n)
    return sum(factors)

n = int(input())
print(sum_of_prime_factors(n))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "10"
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 17
}
```
[/OUTPUT]

[PYTHON]
def is_palindrome(s):
    return s == s[::-1]

def longest_palindrome(s):
    max_length = 0
    start = 0
    for i in range(len(s)):
        for j in range(i, len(s)):
            if is_palindrome(s[i:j+1]) and j-i+1 > max_length:
                max_length = j-i+1
                start = i
    return s[start:start+max_length]

s = input()
print(longest_palindrome(s))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"abaxyzzyxf\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "xyzzyx"
}
```
[/OUTPUT]

[PYTHON]
def is_anagram(s1, s2):
    return sorted(s1) == sorted(s2)

s1, s2 = input().split()
print(is_anagram(s1, s2))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"anagram\" \"nagaram\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": True
}
```
[/OUTPUT]

[PYTHON]
def is_palindrome(s):
    return s == s[::-1]

def longest_palindrome(s):
    max_length = 0
    start = 0
    for i in range(len(s)):
        for j in range(i, len(s)):
            if is_palindrome(s[i:j+1]) and j-i+1 > max_length:
                max_length = j-i+1
                start = i
    return s[start:start+max_length]

s = input()
print(longest_palindrome(s))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"abaxyzzyxf\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "xyzzyx"
}
```
[/OUTPUT]

[PYTHON]
def is_anagram(s1, s2):
    return sorted(s1) == sorted(s2)

s1, s2 = input().split()
print(is_anagram(s1, s2))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"anagram\" \"nagaram\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": True
}
```
[/OUTPUT]

[PYTHON]
def is_palindrome(s):
    return s == s[::-1]

def longest_palindrome(s):
    max_length = 0
    start = 0
    for i in range(len(s)):
        for j in range(i, len(s)):
            if is_palindrome(s[i:j+1]) and j-i+1 > max_length:
                max_length = j-i+1
                start = i
    return s[start:start+max_length]

s = input()
print(longest_palindrome(s))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"abaxyzzyxf\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "xyzzyx"
}
```
[/OUTPUT]

[PYTHON]
def is_anagram(s1, s2):
    return sorted(s1) == sorted(s2)

s1, s2 = input().split()
print(is_anagram(s1, s2))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"anagram\" \"nagaram\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": True
}
```
[/OUTPUT]

[PYTHON]
def is_palindrome(s):
    return s == s[::-1]

def longest_palindrome(s):
    max_length = 0
    start = 0
    for i in range(len(s)):
        for j in range(i, len(s)):
            if is_palindrome(s[i:j+1]) and j-i+1 > max_length:
                max_length = j-i+1
                start = i
    return s[start:start+max_length]

s = input()
print(longest_palindrome(s))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"abaxyzzyxf\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "xyzzyx"
}
```
[/OUTPUT]

[PYTHON]
def is_anagram(s1, s2):
    return sorted(s1) == sorted(s2)

s1, s2 = input().split()
print(is_anagram(s1, s2))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"anagram\" \"nagaram\""
