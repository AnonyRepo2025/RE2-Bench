
[OUTPUT]
```
{
    "output": True
}
```
[/OUTPUT]

[PYTHON]
import json

class JsonProcessor:

    def __init__(self, file_name):
        self.file_name = file_name

    def read_json(self):
        try:
            with open(self.file_name, 'r') as file:
                data = json.load(file)
            return data
        except:
            return None
[/PYTHON]

What will be the output of `read_json`, given the following input:
[INPUT]
```
{
    "self": {
        "file_name": "example.json"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": {
        "key1": "value1",
        "key2": "value2",
        "key3": "value3"
    }
}
```
[/OUTPUT]

[PYTHON]
import requests

class WebScraper:

    def __init__(self, url):
        self.url = url

    def get_html(self):
        try:
            response = requests.get(self.url)
            return response.text
        except:
            return None
[/PYTHON]

What will be the output of `get_html`, given the following input:
[INPUT]
```
{
    "self": {
        "url": "https://www.example.com"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "<html><head><title>Example Domain</title></head><body><div>Example Domain</div></body></html>"
}
```
[/OUTPUT]

[PYTHON]
import os

class FileProcessor:

    def __init__(self, file_name):
        self.file_name = file_name

    def read_file(self):
        try:
            with open(self.file_name, 'r') as file:
                data = file.read()
            return data
        except:
            return None

    def write_file(self, data):
        try:
            with open(self.file_name, 'w') as file:
                file.write(data)
            return True
        except:
            return False

    def delete_file(self):
        try:
            os.remove(self.file_name)
            return True
        except:
            return False
[/PYTHON]

What will be the output of `read_file`, given the following input:
[INPUT]
```
{
    "self": {
        "file_name": "example.txt"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "This is an example file."
}
```
[/OUTPUT]

What will be the output of `write_file`, given the following input:
[INPUT]
```
{
    "self": {
        "file_name": "example.txt"
    },
    "args": {
        "data": "This is new data."
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": True
}
```
[/OUTPUT]

What will be the output of `delete_file`, given the following input:
[INPUT]
```
{
    "self": {
        "file_name": "example.txt"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": True
}
```
[/OUTPUT]

[PYTHON]
import os

class DirectoryProcessor:

    def __init__(self, directory_name):
        self.directory_name = directory_name

    def create_directory(self):
        try:
            os.mkdir(self.directory_name)
            return True
        except:
            return False

    def delete_directory(self):
        try:
            os.rmdir(self.directory_name)
            return True
        except:
            return False
[/PYTHON]

What will be the output of `create_directory`, given the following input:
[INPUT]
```
{
    "self": {
        "directory_name": "example_directory"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": True
}
```
[/OUTPUT]

What will be the output of `delete_directory`, given the following input:
[INPUT]
```
{
    "self": {
        "directory_name": "example_directory"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": True
}
```
[/OUTPUT]

[PYTHON]
import os

class FileSystemProcessor:

    def __init__(self, path):
        self.path = path

    def list_files(self):
        try:
            return os.listdir(self.path)
        except:
            return None

    def get_current_directory(self):
        try:
            return os.getcwd()
        except:
            return None
[/PYTHON]

What will be the output of `list_files`, given the following input:
[INPUT]
```
{
    "self": {
        "path": "example_directory"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": ["file1.txt", "file2.txt", "file3.txt"]
}
```
[/OUTPUT]

What will be the output of `get_current_directory`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "/path/to/current/directory"
}
```
[/OUTPUT]

[PYTHON]
import os

class EnvironmentVariableProcessor:

    def __init__(self, variable_name):
        self.variable_name = variable_name

    def get_environment_variable(self):
        try:
            return os.getenv(self.variable_name)
        except:
            return None
[/PYTHON]

What will be the output of `get_environment_variable`, given the following input:
[INPUT]
```
{
    "self": {
        "variable_name": "HOME"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "/home/username"
}
