
[OUTPUT]
```
{
    "output": "db1100111db"
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def find_common_elements(list1, list2):
    return list(set(list1) & set(list2))
[/PYTHON]

What will be the output of `find_common_elements` given the following input:
[INPUT]
```
{
    "inputs": {
        "list1": [1, 2, 3, 4, 5],
        "list2": [4, 5, 6, 7, 8]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": [4, 5]
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def count_words(text):
    return len(text.split())
[/PYTHON]

What will be the output of `count_words` given the following input:
[INPUT]
```
{
    "inputs": {
        "text": "Hello World, This is a Test..."
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 5
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def is_palindrome(text):
    text = text.lower().replace(' ', '')
    return text == text[::-1]
[/PYTHON]

What will be the output of `is_palindrome` given the following input:
[INPUT]
```
{
    "inputs": {
        "text": "A man a plan a canal Panama"
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    else:
        fib = [0, 1]
        while len(fib) < n:
            fib.append(fib[-1] + fib[-2])
        return fib
[/PYTHON]

What will be the output of `fibonacci` given the following input:
[INPUT]
```
{
    "inputs": {
        "n": 10
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
[/PYTHON]

What will be the output of `factorial` given the following input:
[INPUT]
```
{
    "inputs": {
        "n": 5
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 120
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
[/PYTHON]

What will be the output of `is_prime` given the following input:
[INPUT]
```
{
    "inputs": {
        "n": 17
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def find_gcd(a, b):
    while b:
        a, b = b, a % b
    return a
[/PYTHON]

What will be the output of `find_gcd` given the following input:
[INPUT]
```
{
    "inputs": {
        "a": 48,
        "b": 18
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 6
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def find_lcm(a, b):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a
    return a * b // gcd(a, b)
[/PYTHON]

What will be the output of `find_lcm` given the following input:
[INPUT]
```
{
    "inputs": {
        "a": 5,
        "b": 15
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 15
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def sort_list(lst):
    return sorted(lst)
[/PYTHON]

What will be the output of `sort_list` given the following input:
[INPUT]
```
{
    "inputs": {
        "lst": [5, 2, 8, 1, 9]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": [1, 2, 5, 8, 9]
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def reverse_list(lst):
    return lst[::-1]
[/PYTHON]

What will be the output of `reverse_list` given the following input:
[INPUT]
```
{
    "inputs": {
        "lst": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": [5, 4, 3, 2, 1]
}
```
[/OUTPUT]
[/EXAMPLE]

[PYTHON]
def find_max(lst):
    return max(lst)
[/PYTHON]

What will be the output of `find_max` given the following input:
[INPUT]
```
{
    "inputs": {
        "lst": [1, 2, 3, 4, 5]
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output