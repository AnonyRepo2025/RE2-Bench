
[OUTPUT]
```
{
    "output": "2025-08-25"
}
```
[/OUTPUT]

[PYTHON]
class StringUtils:

    def __init__(self):
        pass

    def reverse_string(self, s: str) -> str:
        return s[::-1]
[/PYTHON]

What will be the output of `reverse_string`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "Hello, World!"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "XXX"
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def __init__(self):
        pass

    def add(self, a: int, b: int) -> int:
        return a + b
[/PYTHON]

What will be the output of `add`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "a": 5,
        "b": 10
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 15
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def __init__(self):
        pass

    def multiply(self, a: int, b: int) -> int:
        return a * b
[/PYTHON]

What will be the output of `multiply`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "a": 5,
        "b": 10
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 50
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def __init__(self):
        pass

    def subtract(self, a: int, b: int) -> int:
        return a - b
[/PYTHON]

What will be the output of `subtract`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "a": 5,
        "b": 10
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": -5
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def __init__(self):
        pass

    def divide(self, a: int, b: int) -> float:
        return a / b
[/PYTHON]

What will be the output of `divide`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "a": 5,
        "b": 10
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 0.5
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def __init__(self):
        pass

    def power(self, a: int, b: int) -> int:
        return a ** b
[/PYTHON]

What will be the output of `power`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "a": 5,
        "b": 2
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 25
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def __init__(self):
        pass

    def square_root(self, a: int) -> float:
        return a ** 0.5
[/PYTHON]

What will be the output of `square_root`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "a": 25
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 5.0
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def __init__(self):
        pass

    def cube_root(self, a: int) -> float:
        return a ** (1/3)
[/PYTHON]

What will be the output of `cube_root`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "a": 27
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 3.0
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def __init__(self):
        pass

    def factorial(self, n: int) -> int:
        if n == 0:
            return 1
        else:
            return n * self.factorial(n-1)
[/PYTHON]

What will be the output of `factorial`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "n": 5
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 120
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def __init__(self):
        pass

    def fibonacci(self, n: int) -> int:
        if n <= 1:
            return n
        else:
            return self.fibonacci(n-1) + self.fibonacci(n-2)
[/PYTHON]

What will be the output of `fibonacci`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "n": 10
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": 55
}
```
[/OUTPUT]

[PYTHON]
class MathUtils:

    def __init__(self):
        pass

    def is_prime(self, n: int) -> bool:
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6