
[OUTPUT]
```
{
    "output": "0.0"
}
```
[/OUTPUT]

[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def prime_factors(n):
    factors = []
    while n % 2 == 0:
        factors.append(2)
        n = n / 2
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            factors.append(int(i))
            n = n / i
    if n > 2:
        factors.append(int(n))
    return factors

def prime_factor_pairs(n):
    factors = prime_factors(n)
    pairs = []
    for i in range(len(factors)):
        for j in range(i + 1, len(factors)):
            if is_prime(factors[i] + factors[j]):
                pairs.append((factors[i], factors[j]))
    return pairs

n = int(input())
print(prime_factor_pairs(n))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"12\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "[(2, 3), (3, 2)]"
}
```
[/OUTPUT]

[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def prime_factors(n):
    factors = []
    while n % 2 == 0:
        factors.append(2)
        n = n / 2
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            factors.append(int(i))
            n = n / i
    if n > 2:
        factors.append(int(n))
    return factors

def prime_factor_pairs(n):
    factors = prime_factors(n)
    pairs = []
    for i in range(len(factors)):
        for j in range(i + 1, len(factors)):
            if is_prime(factors[i] + factors[j]):
                pairs.append((factors[i], factors[j]))
    return pairs

n = int(input())
print(prime_factor_pairs(n))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"12\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "[(2, 3), (3, 2)]"
}
```
[/OUTPUT]

[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def prime_factors(n):
    factors = []
    while n % 2 == 0:
        factors.append(2)
        n = n / 2
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            factors.append(int(i))
            n = n / i
    if n > 2:
        factors.append(int(n))
    return factors

def prime_factor_pairs(n):
    factors = prime_factors(n)
    pairs = []
    for i in range(len(factors)):
        for j in range(i + 1, len(factors)):
            if is_prime(factors[i] + factors[j]):
                pairs.append((factors[i], factors[j]))
    return pairs

n = int(input())
print(prime_factor_pairs(n))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"12\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "[(2, 3), (3, 2)]"
}
```
[/OUTPUT]

[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def prime_factors(n):
    factors = []
    while n % 2 == 0:
        factors.append(2)
        n = n / 2
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            factors.append(int(i))
            n = n / i
    if n > 2:
        factors.append(int(n))
    return factors

def prime_factor_pairs(n):
    factors = prime_factors(n)
    pairs = []
    for i in range(len(factors)):
        for j in range(i + 1, len(factors)):
            if is_prime(factors[i] + factors[j]):
                pairs.append((factors[i], factors[j]))
    return pairs

n = int(input())
print(prime_factor_pairs(n))
[/PYTHON]

What will be the output of the following input:
[INPUT]
```
{
    "input": "\"12\""
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "[(2, 3), (3, 2)]"
}
```
[/OUTPUT]

[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def prime_factors(n):
    factors = []
    while n % 2 == 0:
        factors.append(2)
        n = n / 2
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            factors.append(int(i))
            n = n / i
    if n > 2:
        factors.append(int(n))
    return factors

def prime_factor_pairs(n):
    factors = prime_factors(n)
    pairs = []
