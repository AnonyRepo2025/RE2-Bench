1. The `args_cnc` method is called on an instance of the `MatMul` class.
2. The `args_cnc` method takes in a dictionary of keyword arguments.
3. The `args_cnc` method returns a tuple of two lists: `coeff_c` and `coeff_nc`.
4. The `coeff_c` list contains the coefficients of the commutative arguments.
5. The `coeff_nc` list contains the non-commutative arguments.
6. The `args_cnc` method is called with no keyword arguments.
7. The `args_cnc` method calls the `as_coeff_matrices` method on the instance of the `MatMul` class.
8. The `as_coeff_matrices` method returns a tuple of the form `(coeff, matrices)`.
9. The `coeff` is the product of all scalars in the `args` list.
10. The `matrices` is a list of all matrices in the `args` list.
11. The `args` list is the `args` attribute of the `MatMul` instance.
12. The `args` attribute is a list of all arguments passed to the `MatMul` instance.
13. The `args` list is empty, so `coeff` is `1` and `matrices` is an empty list.
14. The `coeff_c` list is `[1]` and `coeff_nc` list is an empty list.
[/THOUGHT]

[INPUT]
```
{
    "self": {
        "args": []
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]
[/PYTHON]
[PYTHON]
from sympy import symbols, Matrix
from sympy.matrices.expressions.matmul import MatMul

x, y = symbols('x y')
A = Matrix([[1, x], [y, 1]])
B = Matrix([[x, 2], [3, y]])
C = MatMul(A, B)

print(C.args_cnc())
[/PYTHON]
What will be the output of `args_cnc`, given the following input:
[INPUT]
```
{
    "self": {
        "args": [
            {
                "rows": [
                    [1, "x"],
                    ["y", 1]
                ]
            },
            {
                "rows": [
                    ["x", 2],
                    [3, "y"]
                ]
            }
        ]
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[THOUGHT]
1. The `args_cnc` method is called on an instance of the `MatMul` class.
2. The `args_cnc` method takes in a dictionary of keyword arguments.
3. The `args_cnc` method returns a tuple of two lists: `coeff_c` and `coeff_nc`.
4. The `coeff_c` list contains the coefficients of the commutative arguments.
5. The `coeff_nc` list contains the non-commutative arguments.
6. The `args_cnc` method is called with no keyword arguments.
7. The `args_cnc` method calls the `as_coeff_matrices` method on the instance of the `MatMul` class.
8. The `as_coeff_matrices` method returns a tuple of the form `(coeff, matrices)`.
9. The `coeff` is the product of all scalars in the `args` list.
10. The `matrices` is a list of all matrices in the `args` list.
11. The `args` list is the `args` attribute of the `MatMul` instance.
12. The `args` attribute is a list of all arguments passed to the `MatMul` instance.
13. The `args` list contains two matrices.
14. The `coeff` is `1` and `matrices` is a list of the two matrices.
15. The `coeff_c` list is `[1]` and `coeff_nc` list is a list of the two matrices.
[/THOUGHT]

[OUTPUT]
```
{
    "output": [
        [1],
        [
            {
                "rows": [
                    [1, "x"],
                    ["y", 1]
                ]
            },
            {
                "rows": [
                    ["x", 2],
                    [3, "y"]
                ]
            }
        ]
    ]
}
```
[/OUTPUT]
[/PYTHON]
[PYTHON]
from sympy import symbols, Matrix
from sympy.matrices.expressions.matmul import MatMul

x, y = symbols('x y')
A = Matrix([[1, x], [y, 1]])
B = Matrix([[x, 2], [3, y]])
C = MatMul(A, B)

print(C.args_cnc())
[/PYTHON]
What will be the output of `args_cnc`, given the following input:
[INPUT]
```
{
    "self": {
        "args": [
            {
                "rows": [
                    [1, "x"],
                    ["y", 1]
                ]
            },
            {
                "rows": [
                    ["x", 2],
                    [3, "y"]
                ]
            }
        ]
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]

[THOUGHT]
1. The `args_cnc` method is called on an instance of the `MatMul` class.
2. The `args_cnc` method takes in a dictionary of keyword arguments.
3. The `args_cnc` method returns a tuple of two lists: `coeff_c` and `coeff_nc`.
4. The `coeff_c` list contains the coefficients of the commutative arguments.
5. The `coeff_nc` list contains the non-commutative arguments.
6. The `args_cnc` method is called with no keyword arguments.
7. The `args_cnc` method calls the `as_coeff_matrices` method on the instance of the `MatMul` class.
8. The `as_coeff_matrices` method returns a tuple of the form `(coeff, matrices)`.
9. The `coeff` is the product of all scalars in the `args` list.
10. The `matrices` is a list of all matrices in the `args` list.
11. The `args` list is the `args` attribute of the `MatMul` instance.
12. The `args` attribute is a list of all arguments passed to the `MatMul` instance.
13. The `args` list contains two matrices.
14. The `coeff` is `1` and `matrices` is a list of the two matrices.
15. The `coeff_c` list is `[1]` and `coeff_nc` list is a list of the two matrices.
[/THOUGHT]

[OUTPUT]
```
{
    "output": [
        [1],
        [
            {
                "rows": [
                    [1, "x"],
                    ["y", 1]
                ]
            },
            {
                "rows": [
                    ["x", 2],
                    [3, "y"]
                ]
            }
        ]
    ]
}
```
[/OUTPUT]
[/PYTHON]
[PYTHON]
from sympy import symbols, Matrix
from sympy.matrices.expressions.matmul import MatMul

x, y = symbols('x y')
A = Matrix([[1, x], [y, 1]])
B = Matrix([[x, 2], [3, y]])
C = MatMul(A, B)

print(C.args_cnc())
[/PYTHON]
What will be the output of `args_cnc`, given the following input:
[INPUT]
```
{
    "self": {
        "args": [
            {
                "rows": [
                    [1, "x"],
                    ["y", 1]
                ]
            },
            {
                "rows": [
                    ["x", 2],
                    [3