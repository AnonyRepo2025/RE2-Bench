1. The output of `world_to_pixel_values` is a tuple of pixel coordinates.
2. The pixel coordinates are calculated by `all_world2pix`, which is a method of the `WCS` class.
3. `all_world2pix` is a wrapper around `_all_world2pix`, which is a method of the `WCS` class.
4. `_all_world2pix` is a method of the `WCS` class that converts world coordinates to pixel coordinates.
5. The world coordinates are passed to `_all_world2pix` as `world`.
6. The origin is passed to `_all_world2pix` as `origin`.
7. The origin is 0.
8. The world coordinates are calculated by `pix2foc`, which is a method of the `WCS` class.
9. `pix2foc` is a method of the `WCS` class that converts pixel coordinates to focal plane coordinates.
10. The pixel coordinates are passed to `pix2foc` as `pix`.
11. The origin is passed to `pix2foc` as `origin`.
12. The origin is 0.
13. The pixel coordinates are calculated by `wcs_world2pix`, which is a method of the `WCS` class.
14. `wcs_world2pix` is a method of the `WCS` class that converts world coordinates to pixel coordinates.
15. The world coordinates are passed to `wcs_world2pix` as `xy`.
16. The origin is passed to `wcs_world2pix` as `o`.
17. The origin is 0.
18. The world coordinates are calculated by `s2p`, which is a method of the `WCS` class.
19. `s2p` is a method of the `WCS` class that converts sky coordinates to pixel coordinates.
20. The world coordinates are passed to `s2p` as `xy`.
21. The origin is passed to `s2p` as `o`.
22. The origin is 0.
23. The world coordinates are calculated by `_array_converter`, which is a method of the `WCS` class.
24. `_array_converter` is a method of the `WCS` class that converts arrays to the correct format.
25. The world coordinates are passed to `_array_converter` as `*args`.
26. The origin is passed to `_array_converter` as `**kwargs`.
27. The origin is 0.
28. The world coordinates are calculated by `world_to_pixel_values`, which is a method of the `SlicedLowLevelWCS` class.
29. `world_to_pixel_values` is a method of the `SlicedLowLevelWCS` class that converts world coordinates to pixel coordinates.
30. The world coordinates are passed to `world_to_pixel_values` as `*world_arrays`.
31. The origin is passed to `world_to_pixel_values` as `origin`.
32. The origin is 0.
[/THOUGHT]

[INPUT]
```
{
    "self": {
        "_wcs": {
            "wcs": {
                "sip": null,
                "cpdis1": null,
                "cpdis2": null,
                "det2im1": null,
                "det2im2": null,
                "naxis": 2
            }
        },
        "_slices_pixel": [
            slice(None, None, None),
            slice(None, None, None)
        ],
        "_world_keep": [
            0,
            1
        ],
        "_pixel_keep": [
            0,
            1
        ]
    },
    "args": {
        "world_arrays": [
            "-2.9416469260468148e-12",
            "-7.123190925995004e-13"
        ]
    },
    "kwargs": {
        "origin": 0
    }
}
```
[/INPUT]
[/PYTHON]
[PYTHON]
import numpy as np
from astropy.io import fits
from astropy.wcs import WCS
from astropy.coordinates import SkyCoord
from astropy import units as u

def get_wcs(header):
    return WCS(header)

def get_pixel_coords(wcs, ra, dec):
    sky = SkyCoord(ra=ra*u.degree, dec=dec*u.degree)
    return wcs.world_to_pixel(sky)

def get_world_coords(wcs, x, y):
    return wcs.pixel_to_world(x, y)
[/PYTHON]
What will be the input of `get_pixel_coords`, given the following output:
[OUTPUT]
```
{
    "output": {
        "ra": 10.625,
        "dec": 41.2
    }
}
```
[/OUTPUT]

[THOUGHT]
1. The output of `get_pixel_coords` is a tuple of pixel coordinates.
2. The pixel coordinates are calculated by `world_to_pixel`, which is a method of the `WCS` class.
3. `world_to_pixel` is a method of the `WCS` class that converts world coordinates to pixel coordinates.
4. The world coordinates are passed to `world_to_pixel` as `sky`.
5. The world coordinates are calculated by `SkyCoord`, which is a class of the `astropy.coordinates` module.
6. `SkyCoord` is a class of the `astropy.coordinates` module that represents a sky coordinate.
7. The world coordinates are passed to `SkyCoord` as `ra` and `dec`.
8. The world coordinates are calculated by `get_pixel_coords`, which is a method of the `astropy.wcs` module.
9. `get_pixel_coords` is a method of the `astropy.wcs` module that converts world coordinates to pixel coordinates.
10. The world coordinates are passed to `get_pixel_coords` as `ra` and `dec`.
11. The world coordinates are calculated by `get_wcs`, which is a method of the `astropy.io.fits` module.
12. `get_wcs` is a method of the `astropy.io.fits` module that gets the WCS from a FITS header.
13. The world coordinates are passed to `get_wcs` as `header`.
14. The world coordinates are calculated by `get_pixel_coords`, which is a method of the `astropy.wcs` module.
15. `get_pixel_coords` is a method of the `astropy.wcs` module that converts world coordinates to pixel coordinates.
16. The world coordinates are passed to `get_pixel_coords` as `wcs`.
[/THOUGHT]

[INPUT]
```
{
    "self": {
        "wcs": {
            "wcs": {
                "sip": null,
                "cpdis1": null,
                "cpdis2": null,
                "det2im1": null,
                "det2im2": null,
                "naxis": 2
            }
        }
    },
    "args": {
        "ra": 10.625,
        "dec": 41.2
    },
    "kwargs": {}
}
```
[/INPUT]
[/PYTHON]
[PYTHON]
import numpy as np
from astropy.io import fits
from astropy.wcs import WCS
from astropy.coordinates import SkyCoord
from astropy import units as u

def get_wcs(header):
    return WCS(header)

def get_pixel_coords(wcs, ra, dec):
    sky = SkyCoord(ra=ra*u.degree, dec=dec*u.degree)
    return wcs.world_to_pixel(sky)

def get_world_coords(wcs, x, y):
