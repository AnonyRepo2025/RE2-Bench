[THOUGHT]
The function `split_super_sub` processes a string to extract:
1. A base name (initial alphabetic part)
2. Superscripts (marked by `^` or `__`)
3. Subscripts (marked by `_`)

Given the output `["alpha", ["+"], ["1"]]`:
- Base name is "alpha"
- One superscript: "+"
- One subscript: "1"

Since "alpha" has no trailing digits, the regex `_name_with_digits_p` doesn't split it. The subscript "1" must come from an explicit `_` marker. The superscript "+" must come from a `^` or `__` marker.

Possible valid inputs include:
- `"alpha^+_1"` (base + superscript + subscript)
- `"alpha_1^+"` (base + subscript + superscript)
- `"alpha__+_1"` (using `__` for superscript)

I choose the simplest form: `"alpha^+_1"`. This is processed as:
1. Base name "alpha" (up to `^`)
2. Superscript "+" (after `^`, up to `_`)
3. Subscript "1" (after `_`)

The function is called with a single positional argument `text`, so the input JSON should contain this string under `args`.
[/THOUGHT]

[INPUT]
{
    "args": {
        "text": "alpha^+_1"
    },
    "kwargs": {}
}
[/INPUT]