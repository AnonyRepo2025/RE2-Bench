[THOUGHT]
We need split_super_sub(text) to return:
 name = "alpha"
 supers = ["+"]
 subs = ["1"]

The code loops, slicing off parts at '^' or '_' boundaries.

If we use text = "alpha1^+":

1. First iteration finds next '^' at position 6, so part = text[0:6] = "alpha1". Sets name = "alpha1".
2. Second iteration takes part = text[6:8] = "^+". Recognized as a superscript, so supers.append("+").
3. Loop ends. Regex on name "alpha1" matches letters+digits, giving name="alpha" and inserts "1" at subs[0].

Final output is ("alpha", ["+"], ["1"]) as desired.
[/THOUGHT]

[INPUT]
```
{
    "text": "alpha1^+"
}
```
[/INPUT]