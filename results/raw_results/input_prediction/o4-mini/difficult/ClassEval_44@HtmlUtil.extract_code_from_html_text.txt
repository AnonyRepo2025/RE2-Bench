[THOUGHT]
The `extract_code_from_html_text` method:
1. Calls `format_line_html_text`, which will replace all `<pre>` or `<blockquote>` tag contents with `self.CODE_MARK` (`"-CODE-"`). This ensures that `text_with_code_tag` contains two occurrences of `"-CODE-"`.
2. Counts these occurrences to get `code_count = 2`.
3. Parses the original `html_text` again with BeautifulSoup, finds the same two code tags (`<pre>` or `<blockquote>`), and does `.get_text()` on them in order.
4. Returns a list of their raw text contents.

To produce the desired output list:
[
    "print('Hello, world!')",
    "for i in range(4):\n                print(i)"
]
the input `html_text` must contain exactly two code tags (either `<pre>` or `<blockquote>`). We can use `<pre>` for both. The contents of these tags must match the two strings, including the newline and leading spaces in the second block.

Thus, a valid `html_text` is:
"<pre>print('Hello, world!')</pre><pre>for i in range(4):\n                print(i)</pre>"

All mark fields in `self` use their default values from `__init__`.

[/THOUGHT]

[INPUT]
```
{
    "self": {
        "SPACE_MARK": "-SPACE-",
        "JSON_MARK": "-JSON-",
        "MARKUP_LANGUAGE_MARK": "-MARKUP_LANGUAGE-",
        "URL_MARK": "-URL-",
        "NUMBER_MARK": "-NUMBER-",
        "TRACE_MARK": "-TRACE-",
        "COMMAND_MARK": "-COMMAND-",
        "COMMENT_MARK": "-COMMENT-",
        "CODE_MARK": "-CODE-"
    },
    "args": {
        "html_text": "<pre>print('Hello, world!')</pre><pre>for i in range(4):\n                print(i)</pre>"
    },
    "kwargs": {}
}
```
[/INPUT]