[THOUGHT]
Let's analyze the code and the output.

The function `map` can take either:
- a tuple of (sub_list, total_num)
- a list of such tuples

The output is `[0.0, [0.0]]`.

Looking at the code:
- If `data` is empty (`len(data) == 0`), it returns `(0.0, [0.0])`.
- If `data` is a tuple, and `total_num == 0`, it returns `(0.0, [0.0])`.
- If `data` is a list, for each (sub_list, total_num), if `total_num == 0`, ap = 0.0, and the result is a list of 0.0s, and the mean is 0.0.

So, there are two main ways to get this output:
1. `data` is an empty list: `[]`
2. `data` is a tuple with `total_num == 0`, e.g. `([0,1,0], 0)`
3. `data` is a list with one tuple where `total_num == 0`, e.g. `[([0,1,0], 0)]`

But, the code checks `if len(data) == 0: return (0.0, [0.0])` before checking type, so if you pass an empty list, you get this output.

Therefore, the simplest input is an empty list.

Alternatively, a tuple with `total_num == 0` also returns `(0.0, [0.0])`.

But since the output is a list with one element, `[0.0]`, it matches the empty list case or the tuple case.

So, both `[]` and `([something], 0)` are valid.

But the most direct is the empty list.

[/THOUGHT]

[INPUT]
```
{
    "self": {},
    "args": {
        "data": []
    },
    "kwargs": {}
}
```
[/INPUT]