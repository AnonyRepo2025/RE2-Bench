```python
import random

class MahjongConnect:

    def __init__(self, BOARD_SIZE, ICONS):
        self.BOARD_SIZE = BOARD_SIZE
        self.ICONS = ICONS
        self.board = self.create_board()

    def is_valid_move(self, pos1, pos2):
        x1, y1 = pos1
        x2, y2 = pos2
        if not (0 <= x1 < self.BOARD_SIZE[0] and 0 <= y1 < self.BOARD_SIZE[1] and (0 <= x2 < self.BOARD_SIZE[0]) and (0 <= y2 < self.BOARD_SIZE[1])):
            return False
        if pos1 == pos2:
            return False
        if self.board[x1][y1] != self.board[x2][y2]:
            return False
        if not self.has_path(pos1, pos2):
            return False
        return True

    def has_path(self, pos1, pos2):
        visited = set()
        stack = [pos1]
        while stack:
            current_pos = stack.pop()
            if current_pos == pos2:
                return True
            if current_pos in visited:
                continue
            visited.add(current_pos)
            x, y = current_pos
            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                new_x, new_y = (x + dx, y + dy)
                if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
                    if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
                        stack.append((new_x, new_y))
        return False

class Test(unittest.TestCase):

    def test(self):
        mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
        mc.board = [['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a']]
        res = mc.is_valid_move((0, 0), (1, 0))
        return res
```
The output is `False`.

1. The board is 4x4 and initialized with 'a', 'b', 'c', 'a' in each row.
2. `pos1` is (0, 0) and `pos2` is (1, 0). Both are within the board boundaries.
3. `board[0][0]` is 'a' and `board[1][0]` is 'a', so the icons match.
4. The `has_path` function is called with `pos1` and `pos2`.
5. In `has_path`, the stack starts with (0, 0).
6. From (0, 0), the possible moves are (0, 1), (1, 0), which are 'b' and 'a' respectively.
7. Since only matching icons are allowed, only (1, 0) is added to the stack.
8. The next element popped from the stack is (1, 0), which is equal to `pos2`, so `has_path` returns `True`.
9. Since all conditions are met, `is_valid_move` should return `True`.

However, the output is `False`. This means that the path check must fail. The only way this can happen is if there is no valid path between the two points due to the icons not matching.

[/THOUGHT]

[INPUT]
```
{
    "self": {
        "BOARD_SIZE": [4, 4],
        "ICONS": ['a', 'b', 'c'],
        "board": [['a', 'b', 'c', 'a'], ['b', 'b', 'c', 'a'], ['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a']]
    },
    "args": {
        "pos1": [0, 0],
        "pos2": [1, 0]
    },
    "kwargs": {}
}
```
[/INPUT]