The output is 64, which is the square of 8. So, the input must be 8.
[/THOUGHT]

[INPUT]
```
{
    "self": {},
    "args": {
        "n": 8
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_max(numbers: list):
    return max(numbers)
[/PYTHON]

What will be the input of `find_max` given the following output:
[OUTPUT]
```
{
    "output": 100
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "numbers": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[THOUGHT]
The output is 100, which is the maximum number in the list. So, the list must contain 100.
[/THOUGHT]

[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [100]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_min(numbers: list):
    return min(numbers)
[/PYTHON]

What will be the input of `find_min` given the following output:
[OUTPUT]
```
{
    "output": 1
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "numbers": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[THOUGHT]
The output is 1, which is the minimum number in the list. So, the list must contain 1.
[/THOUGHT]

[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_sum(numbers: list):
    return sum(numbers)
[/PYTHON]

What will be the input of `find_sum` given the following output:
[OUTPUT]
```
{
    "output": 10
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "numbers": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[THOUGHT]
The output is 10, which is the sum of the numbers in the list. So, the list must contain [1, 2, 3, 4].
[/THOUGHT]

[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1, 2, 3, 4]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_average(numbers: list):
    return sum(numbers) / len(numbers)
[/PYTHON]

What will be the input of `find_average` given the following output:
[OUTPUT]
```
{
    "output": 5.0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "numbers": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[THOUGHT]
The output is 5.0, which is the average of the numbers in the list. So, the list must contain [5, 5, 5, 5, 5].
[/THOUGHT]

[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [5, 5, 5, 5, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_median(numbers: list):
    numbers.sort()
    if len(numbers) % 2 == 0:
        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2
    else:
        return numbers[len(numbers) // 2]
[/PYTHON]

What will be the input of `find_median` given the following output:
[OUTPUT]
```
{
    "output": 5.0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "numbers": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[THOUGHT]
The output is 5.0, which is the median of the numbers in the list. So, the list must contain [5, 5, 5, 5, 5].
[/THOUGHT]

[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [5, 5, 5, 5, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_mode(numbers: list):
    from collections import Counter
    n = len(numbers)
    data = Counter(numbers)
    get_mode = dict(data)
    mode = [k for k, v in get_mode.items() if v == max(list(data.values()))]
    if len(mode) == n:
        return "No mode found"
    else:
        return mode[0]
[/PYTHON]

What will be the input of `find_mode` given the following output:
[OUTPUT]
```
{
    "output": "No mode found"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "numbers": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[THOUGHT]
The output is "No mode found", which means there is no number that appears more than once in the list. So, the list must contain [1, 2, 3, 4, 5].
[/THOUGHT]

[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_mode(numbers: list):
    from collections import Counter
    n = len(numbers)
    data = Counter(numbers)
    get_mode = dict(data)
    mode = [k for k, v in get_mode.items() if v == max(list(data.values()))]
    if len(mode) == n:
        return "No mode found"
    else:
        return mode[0]
[/PYTHON]

What will be the input of `find_mode` given the following output:
[OUTPUT]
```
{
    "output": 5
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "numbers": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[THOUGHT]
The output is 5, which is the mode of the numbers in the list. So, the list must contain [5, 5, 5, 5, 5].
[/THOUGHT]

[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [5, 5, 5, 5, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_gcd(a: int, b: