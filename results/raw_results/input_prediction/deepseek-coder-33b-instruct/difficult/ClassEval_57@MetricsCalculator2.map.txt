
The function `map` calculates the mean average precision (MAP) and the average precision (AP) for each sublist in the input data.

The input data is a list of tuples, where each tuple contains a sublist and a total number. The sublist is a list of binary values (0 or 1), and the total number is the total number of relevant items in the sublist.

The MAP is the mean of the APs for each sublist. The AP is the average of the precision at each relevant item in the sublist.

The precision at a relevant item is the number of relevant items seen so far divided by the total number of items seen so far.

If the input data is an empty list, the MAP and the AP are both 0.

If the total number of relevant items in a sublist is 0, the AP for that sublist is 0.

If the input data is a single tuple, the MAP is the AP for that sublist, and the AP is the AP for that sublist.
[/THOUGHT]

[INPUT]
```
{
    "self": {},
    "args": {
        "data": []
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import numpy as np

class MetricsCalculator3:

    def __init__(self):
        pass

    @staticmethod
    def map(data):
        if type(data) != list and type(data) != tuple:
            raise Exception('the input must be a tuple([0,...,1,...],int) or a iteration of list of tuple')
        if len(data) == 0:
            return (0.0, [0.0])
        if type(data) == tuple:
            sub_list, total_num = data
            sub_list = np.array(sub_list)
            if total_num == 0:
                return (0.0, [0.0])
            else:
                ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                right_ranking_list = []
                count = 1
                for t in sub_list:
                    if t == 0:
                        right_ranking_list.append(0)
                    else:
                        right_ranking_list.append(count)
                        count += 1
                ap = np.sum(np.array(right_ranking_list) * ranking_array) / total_num
                return (ap, [ap])
        if type(data) == list:
            separate_result = []
            for sub_list, total_num in data:
                sub_list = np.array(sub_list)
                if total_num == 0:
                    ap = 0.0
                else:
                    ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                    right_ranking_list = []
                    count = 1
                    for t in sub_list:
                        if t == 0:
                            right_ranking_list.append(0)
                        else:
                            right_ranking_list.append(count)
                            count += 1
                    ap = np.sum(np.array(right_ranking_list) * ranking_array) / total_num
                separate_result.append(ap)
            return (np.mean(separate_result), separate_result)
[/PYTHON]

What will be the input of `map`, given the following output:
[OUTPUT]
```
{
    "output": [
        0.0,
        [
            0.0
        ]
    ]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "data": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[THOUGHT]
        
The function `map` calculates the mean average precision (MAP) and the average precision (AP) for each sublist in the input data.

The input data is a list of tuples, where each tuple contains a sublist and a total number. The sublist is a list of binary values (0 or 1), and the total number is the total number of relevant items in the sublist.

The MAP is the mean of the APs for each sublist. The AP is the average of the precision at each relevant item in the sublist.

The precision at a relevant item is the number of relevant items seen so far divided by the total number of items seen so far.

If the input data is an empty list, the MAP and the AP are both 0.

If the total number of relevant items in a sublist is 0, the AP for that sublist is 0.

If the input data is a single tuple, the MAP is the AP for that sublist, and the AP is the AP for that sublist.
[/THOUGHT]

[INPUT]
```
{
    "self": {},
    "args": {
        "data": []
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import numpy as np

class MetricsCalculator4:

    def __init__(self):
        pass

    @staticmethod
    def map(data):
        if type(data) != list and type(data) != tuple:
            raise Exception('the input must be a tuple([0,...,1,...],int) or a iteration of list of tuple')
        if len(data) == 0:
            return (0.0, [0.0])
        if type(data) == tuple:
            sub_list, total_num = data
            sub_list = np.array(sub_list)
            if total_num == 0:
                return (0.0, [0.0])
            else:
                ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                right_ranking_list = []
                count = 1
                for t in sub_list:
                    if t == 0:
                        right_ranking_list.append(0)
                    else:
                        right_ranking_list.append(count)
                        count += 1
                ap = np.sum(np.array(right_ranking_list) * ranking_array) / total_num
                return (ap, [ap])
        if type(data) == list:
            separate_result = []
            for sub_list, total_num in data:
                sub_list = np.array(sub_list)
                if total_num == 0:
                    ap = 0.0
                else:
                    ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                    right_ranking_list = []
                    count = 1
                    for t in sub_list:
                        if t == 0:
                            right_ranking_list.append(0)
                        else:
                            right_ranking_list.append(count)
                            count += 1
                    ap = np.sum(np.array(right_ranking_list) * ranking_array) / total_num
                separate_result.append(ap)
            return (np.mean(separate_result), separate_result)
[/PYTHON]

What will be the input of `map`, given the following output:
[OUTPUT]
```
{
    "output": [
        0.0,
        [
            0.0
        ]
    ]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "data": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[THOUGHT]
        
The function `map` calculates the mean average precision (MAP) and the average precision (AP) for each sublist in the input data.

The input data is a list of tuples, where each tuple contains a sublist and a total number. The sublist is a list of binary values (0 or 1), and the total number is the total number of relevant items in the sublist.

The MAP is the mean of the APs for each sublist. The AP is the average of the precision at each relevant item in the sublist.

The precision at a relevant item is the number of relevant items seen so far divided by the total number of items seen so far.

If the input data is an empty list, the MAP and the AP are both 0