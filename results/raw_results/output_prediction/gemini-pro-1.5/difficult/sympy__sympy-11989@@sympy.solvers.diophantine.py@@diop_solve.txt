1. **classify_diop(2*x - 3*y - 5)**
   - `eq.free_symbols`: {x, y}
   - `var`: [x, y]
   - `eq.expand()`: 2*x - 3*y - 5
   - `coeff`: {1: -5, x: 2, y: -3}
   - `total_degree`: 1
   - `diop_type`: 'linear'
   - Returns: ([x, y], {1: -5, x: 2, y: -3}, 'linear')

2. **diop_solve(2*x - 3*y - 5)**
   - `eq_type`: 'linear'
   - Calls `_diop_linear([x, y], {1: -5, x: 2, y: -3}, t)` (where `t` is the parameter).
   - The solution will be parametrized in terms of `t`.

3. **_diop_linear([x, y], {1: -5, x: 2, y: -3}, t)**
   - This function solves the linear diophantine equation of the form ax + by + c = 0.
   - It uses the Extended Euclidean Algorithm to find a particular solution (x0, y0).
   - The general solution is given by:
     x = x0 + b*t/gcd(a,b)
     y = y0 - a*t/gcd(a,b)

   In our case:
   a = 2
   b = -3
   c = -5

   gcd(2, -3) = 1
   A particular solution can be found as follows:
   2x - 3y = 5
   One solution is x0 = 1, y0 = -1

   General solution:
   x = 1 - 3t
   y = -1 - 2t

   The output will be a set of tuples (x, y) parametrized by t.


[OUTPUT]
```
{
    "output": {(1 - 3*t, -1 - 2*t)}
}
```
[/OUTPUT]