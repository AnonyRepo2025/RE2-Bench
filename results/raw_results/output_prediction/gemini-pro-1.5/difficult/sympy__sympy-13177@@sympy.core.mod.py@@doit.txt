Here's how `doit(p, q)` unfolds with the given inputs:

1. **Initial Input:**
   - p = "zoo"
   - q = "0"

2. **Type Conversion and Checks:**
   - The inputs "zoo" and "0" are sympyfied. "zoo" becomes a Symbol and "0" becomes an Integer.
   - The initial checks for infinity, NaN, and equality don't apply.

3. **Number Check:**
   - The check `if q.is_Number` passes as q is 0.
   - The nested check `if p.is_Number` fails.
   - The check `if q == 2` fails.

4. **Division and Integer Check:**
   - `r = p / q` calculates the division of Symbol("zoo") by 0. This results in a `ZeroDivisionError` or `TypeError` when attempting to convert to an integer.

5. **Negative Check:**
   - The code block under `try...except TypeError` is skipped due to the error.
   - `d = p - q` calculates Symbol("zoo") - 0, resulting in Symbol("zoo").
   - `d.is_negative` is evaluated, but since 'zoo' is a symbol, it's not considered negative. Thus, the checks within this block are skipped.

6. **No Return:**
   - The function doesn't reach any explicit return statement within `doit`.

Since the function doesn't return any value explicitly, it implicitly returns `None`.

[OUTPUT]
```
{
    "output": null
}
```
[/OUTPUT]