Here's how `split_super_sub("alpha^+_1")` executes:

1. **Initialization:**
   - `name = None`
   - `supers = []`
   - `subs = []`

2. **Loop 1:**
   - `pos = 0`
   - `start = 1`
   - `pos_hat = 5` (position of '^')
   - `pos_usc = 6` (position of '_')
   - `pos_next = 5` (min of 5 and 6)
   - `part = "alpha"`
   - `pos = 5`
   - `name = "alpha"`

3. **Loop 2:**
   - `start = 6`
   - `pos_hat = 6`
   - `pos_usc = 7`
   - `pos_next = 6`
   - `part = "^+"`
   - `pos = 6`
   - `supers.append("+")` `supers` is now `['+']`

4. **Loop 3:**
   - `start = 7`
   - `pos_hat = 7` (default to len(text))
   - `pos_usc = 7`
   - `pos_next = 7`.
   - `part = "_"
   - `pos = 7`
   - `subs.append("1")`. subs is now `["1"]`

5. **After the loop:**
   - `m = _name_with_digits_p.match(name)` which matches because `name` is `alpha` - no digits..
   - So, subs remains `["1"]`
6. **Return:** `("alpha", ["+"], ["1"])`

[OUTPUT]
```
{
    "output": ["alpha", ["+"], ["1"]]
}
```
[/OUTPUT]