[THOUGHT]
We build li by concatenating the decimal digits of 1,2,3,…,370 in order.

1. Count digits:
   - 1–9: 9 numbers ×1 digit = 9 digits
   - 10–99: 90 numbers ×2 digits = 180 digits
   - 100–370: 271 numbers ×3 digits = 813 digits
   Total = 9 + 180 + 813 = 1002 digits.

2. The code then does li.pop() twice, removing the last 2 digits, leaving 1000 digits. Our requested position n=423 is well before the truncation, so we just find the 423rd digit in the full sequence.

3. The first 9 digits cover positions 1–9; the next 180 cover 10–189. Since 423 > 189, it lies in the 3-digit block (positions 190–1002).

4. Position within 3-digit block: pos3 = 423 − 189 = 234.

5. Each 3-digit number contributes 3 digits. The zero-based index of the number in this block is k = (234−1)//3 = 233//3 = 77. Thus the number is 100 + 77 = 177.

6. Within “177”, the digit index is d = (234−1)%3 = 233%3 = 2 (0-based), i.e. the 3rd digit, which is “7”.

Therefore the code prints 7.
[/THOUGHT]

[OUTPUT]
```
{
    "output": 7
}
```
[/OUTPUT]