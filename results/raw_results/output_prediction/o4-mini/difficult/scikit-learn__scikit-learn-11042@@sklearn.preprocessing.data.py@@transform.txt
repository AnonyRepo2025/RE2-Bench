[THOUGHT]
We are calling OneHotEncoder.transform on X = [[4,1,1]] with a fitted encoder that had
  n_values_ = [2,3,4],
  feature_indices_ = [0,2,5,9],
  active_features_ = [0,1,2,4,6,7,8],
  handle_unknown = "ignore",
  sparse=True.

Step by step in _transform:
1. check_array → X becomes array([[4,1,1]]) of shape (1,3).
2. n_samples=1, n_features=3 matches feature_indices_ length−1 = 3.
3. mask = (X < n_values_).ravel() = ([4<2, 1<3, 1<4]) = [False, True, True].
   There is an unknown category (4≥2) in feature 0, but handle_unknown="ignore" so we drop it.
4. indices = feature_indices_ = [0,2,5,9].
5. Compute column_indices = (X + indices[:-1]).ravel() = [4+0, 1+2, 1+5] = [4,3,6], then apply mask → [3,6].
6. row_indices = repeat(arange(1),3) = [0,0,0], mask → [0,0].
7. data = [1., 1.] (two ones).
8. Build a COO of shape (1,9) (since indices[-1] = 9), then to CSR.

The resulting CSR has:
  shape = (1,9)
  maxprint = default CSR maxprint = 100
  indices = array([3,6])
  indptr = array([0,2])
  data = array([1.,1.])

So the JSON output is:
[OUTPUT]
{
    "_shape": [1, 9],
    "maxprint": 100,
    "indices": [3, 6],
    "indptr": [0, 2],
    "data": [1.0, 1.0]
}
[/OUTPUT]