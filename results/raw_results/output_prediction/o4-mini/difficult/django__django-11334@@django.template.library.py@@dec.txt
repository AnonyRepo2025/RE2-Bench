[THOUGHT]
1. Library.simple_tag sees that `func` is provided (not `None`) and is callable, so it invokes `dec(func)`.  
2. Inside `dec`, it inspects and wraps the function to create a `compile_func`, registers it under `self.tags`, and then returns the original `func` unchanged.  
3. Therefore the returned object is the same function we passed in, with all of its attributes (`__module__`, `__name__`, `__qualname__`, `__doc__`, `__annotations__`, and `__wrapped__`) unchanged.  
[/THOUGHT]
[OUTPUT]
{
    "__module__": "template_tests.test_library",
    "__name__": "func",
    "__qualname__": "SimpleTagRegistrationTests.test_simple_tag_wrapped.\"<locals>\".func",
    "__doc__": null,
    "__annotations__": {},
    "__wrapped__": {}
}
[/OUTPUT]