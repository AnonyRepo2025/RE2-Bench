[THOUGHT]
1. We split the token `"coo5bv-92cebe54064db62bd060fb49891f8efe"` on `-`, so  
   ts_b36 = `"coo5bv"`, suffix = `"92cebe54064db62bd060fb49891f8efe"`.  
   Since `len(ts_b36)=6≥4`, `legacy_token=False`.

2. We convert ts_b36 to an integer:  
   base36_to_int("coo5bv") = 12·36⁵ + 24·36⁴ + 24·36³ + 5·36² + 11·36 + 31 = 767,031,547.  
   So `ts = 767031547`.

3. We call `_make_token_with_timestamp(user, ts)`:
   - `ts_b36 = int_to_base36(767031547)` → `"coo5bv"`.
   - `_make_hash_value(user, ts)` =  
     `f"{user.pk}{user.password}{''}{ts}{user.email}"`  
     = `"1md5$YbSnGA0Tetrj$704b247ccdb4be0f0f5df96a453b648c767031547test2@example.com"`.
   - We compute `salted_hmac(key_salt, hash_value, secret="abcdefghijkl", algorithm="sha256")`.
     This yields an HMAC-SHA256 digest whose hex is 64 chars; taking every second char (`[::2]`) produces exactly the suffix  
     `"92cebe54064db62bd060fb49891f8efe"`, matching the provided one.

4. `constant_time_compare` succeeds on the first try.  
5. `legacy_token` is `False`, so we do not do the daily‐seconds adjustment.  
6. We check expiration:  
   `self._num_seconds(now) - ts ≤ settings.PASSWORD_RESET_TIMEOUT`  
   (the token was just generated), so it has not timed out.

Hence `check_token` returns True.
[OUTPUT]
{
    "output": true        
}
[/OUTPUT]