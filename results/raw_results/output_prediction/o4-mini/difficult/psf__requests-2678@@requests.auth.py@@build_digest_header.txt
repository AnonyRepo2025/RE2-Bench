[THOUGHT]
We walk through HTTPDigestAuth.build_digest_header:

1. realm = "me@kennethreitz.com"  
   nonce = "54c8df80c7443b10ad9890ddfce551f9"  
   qop = "auth"  
   algorithm = "MD5"  
   opaque = "cbe3b2ba4f82f0040cf76baec4025b43"  

2. _algorithm = "MD5" so we use MD5 over UTF-8 bytes.

3. A1 = "user:me@kennethreitz.com:pass"  
   HA1 = MD5(A1)  

4. URL = "http://httpbin.org/digest-auth/auth/user/pass"  
   path = "/digest-auth/auth/user/pass"  
   A2 = "GET:/digest-auth/auth/user/pass"  
   HA2 = MD5(A2)  

5. Since nonce ≠ last_nonce (""), nonce_count ← 1  
   ncvalue = "%08x" % 1 = "00000001"  

6. cnonce = first 16 hex chars of SHA1( b"1" + nonce + time.ctime() + 8 random bytes )  
   (this is unpredictable at runtime)  

7. Because qop=="auth",  
   noncebit = "%s:%s:%s:%s:%s" % (nonce, ncvalue, cnonce, "auth", HA2)  
   respdig = KD(HA1, noncebit) = MD5( HA1 + ":" + noncebit )  

8. Finally build the header string:  
   Digest username="user", realm="me@kennethreitz.com", nonce="54c8df80c7443b10ad9890ddfce551f9", uri="/digest-auth/auth/user/pass", response="<respdig>", opaque="cbe3b2ba4f82f0040cf76baec4025b43", algorithm="MD5", qop="auth", nc=00000001, cnonce="<cnonce>"

Because cnonce and thus the final response digest depend on the current time and os.urandom, their exact values cannot be determined statically. The function returns exactly the above string with the computed respdig and cnonce inserted.

[OUTPUT]
{
    "output": "Digest username=\"user\", realm=\"me@kennethreitz.com\", nonce=\"54c8df80c7443b10ad9890ddfce551f9\", uri=\"/digest-auth/auth/user/pass\", response=\"<respdig>\", opaque=\"cbe3b2ba4f82f0040cf76baec4025b43\", algorithm=\"MD5\", qop=\"auth\", nc=00000001, cnonce=\"<cnonce>\""
}
[/OUTPUT]