[THOUGHT]
The `prepare` method converts an infix expression to postfix notation using a stack. For the input expression "2+3+4":
1. Initialize operator stack with [','] and tokenize expression to ['2', '+', '3', '+', '4'].
2. Process '2' (operand): append "2" to postfix_stack → ['2'].
3. Process first '+': 
   - Compare with stack top (','): priority(+,) → 1 vs -1 → false, push '+' → op_stack=[',', '+'].
4. Process '3': append "3" → postfix_stack=['2','3'].
5. Process second '+':
   - Compare with stack top ('+'): priority(+,+) → 1>=1 → true, pop '+' to postfix_stack → ['2','3','+'].
   - Compare with new top (','): same as step 3 → push '+' → op_stack=[',','+'].
6. Process '4': append "4" → postfix_stack=['2','3','+','4'].
7. After loop, pop remaining operators: pop '+' → postfix_stack=['2','3','+','4','+'].
Final postfix_stack is deque(['2','3','+','4','+']), represented as a list.
[/THOUGHT]

[OUTPUT]
{
    "output": ["2", "3", "+", "4", "+"]        
}
[/OUTPUT]