The `transform` method of `OneHotEncoder` processes the input `X = [[4, 1, 1]]` as follows:

1. **Input Validation**: `check_array` ensures `X` is a 2D integer array with non-negative values. The input `[[4, 1, 1]]` passes this check.
2. **Shape Validation**: The number of features (3) matches `feature_indices_` length minus 1 (4 - 1 = 3), so no error is raised.
3. **Value Masking**: 
   - `n_values_ = [2, 3, 4]` defines valid ranges: feature 0: [0, 1], feature 1: [0, 2], feature 2: [0, 3].
   - `X[0][0] = 4` is invalid (â‰¥2), so it is masked out. Valid values are `X[0][1] = 1` and `X[0][2] = 1`.
4. **Column Indices Calculation**:
   - `feature_indices_ = [0, 2, 5, 9]`, so starting indices are `[0, 2, 5]`.
   - Valid column indices: `1 + 2 = 3` (feature 1), `1 + 5 = 6` (feature 2).
5. **Sparse Matrix Construction**:
   - Row indices: `[0, 0]` (both values belong to row 0).
   - Data: `[1, 1]` (binary indicators).
   - Initial COO matrix: shape `(1, 9)` with non-zeros at `(0, 3)` and `(0, 6)`.
6. **Active Features Subsetting**:
   - `active_features_ = [0, 1, 2, 4, 6, 7, 8]` (columns to retain).
   - Column 3 is excluded (not in `active_features_`), column 6 is retained at position 4 (index 4 in `active_features_`).
7. **Final CSR Matrix**:
   - Shape: `(1, 7)` (1 sample, 7 active features).
   - `indices`: `[4]` (column index of the non-zero value).
   - `indptr`: `[0, 1]` (row 0 starts at index 0, has 1 non-zero).
   - `data`: `[1.0]` (value, dtype float from encoder settings).
   - `maxprint`: Default value `50` (standard for CSR matrices).

[OUTPUT]
```
{
    "_shape": [1, 7],
    "maxprint": 50,
    "indices": [4],
    "indptr": [0, 1],
    "data": [1.0]
}
```
[/OUTPUT]