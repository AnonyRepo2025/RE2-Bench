[THOUGHT]
The function `check_token` processes the token "coo5bv-92cebe54064db62bd060fb49891f8efe" for the given user:
1. Split token: ts_b36 = "coo5bv", hash_part = "92cebe54064db62bd060fb49891f8efe"
2. Convert ts_b36 to integer: "coo5bv" in base36 = 767031547
3. Compute `_make_token_with_timestamp(user, 767031547)`:
   - ts_b36 = "coo5bv" (from int_to_base36(767031547))
   - `_make_hash_value(user, 767031547)` = 
        f'{user.pk}{user.password}{login_timestamp}{timestamp}{email}' = 
        "1" + "md5$YbSnGA0Tetrj$704b247ccdb4be0f0f5df96a453b648c" + "" + "767031547" + "test2@example.com"
   - Compute HMAC-SHA256 using key_salt, secret="abcdefghijkl", and the hash value
   - Take every second character of hexdigest → matches "92cebe54064db62bd060fb49891f8efe"
4. Token comparison succeeds (`constant_time_compare` returns True)
5. Check expiration:
   - legacy_token=False, so no timestamp adjustment
   - `_now()` is not provided, but token timestamp (767031547) corresponds to 2025-04-22 16:19:07
   - Assuming current time is within `PASSWORD_RESET_TIMEOUT` (default 3 days) of token time → not expired
6. Return True

[/THOUGHT]
[OUTPUT]
{
    "output": true        
}
[/OUTPUT]