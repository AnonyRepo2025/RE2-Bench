[THOUGHT]
We need to determine the output of `extract_code_from_html_text` for the given input. The method processes HTML text to extract code blocks from `<pre>` and `<blockquote>` tags. Here's the step-by-step simulation:

1. **Initialization**: The `HtmlUtil` instance has various marks, including `CODE_MARK = '-CODE-'`.

2. **Input HTML**:
   ```html
   <html>
   <body>
   <h1>Title</h1>
   <p>This is a paragraph.</p>
   <pre>print('Hello, world!')</pre>
   <p>Another paragraph.</p>
   <pre><code>for i in range(4):\n                print(i)</code></pre>
   </body>
   </html>
   ```

3. **Call `format_line_html_text`**:
   - Parse HTML with BeautifulSoup.
   - Find all `<pre>` tags (two in this case).
   - Replace content of each `<pre>` tag with `-CODE-`.
   - Process other tags:
     - `<p>` tags already end with punctuation, so unchanged.
     - No `<ul>`/`<ol>` tags to process.
   - Cleaned text becomes: "Title This is a paragraph. -CODE- Another paragraph. -CODE-".

4. **Check for `-CODE-`**: The formatted text contains two `-CODE-` marks, so proceed.

5. **Extract code blocks**:
   - Re-parse original HTML to find all `<pre>` and `<blockquote>` tags (two `<pre>` tags).
   - Extract text from each tag:
     - First `<pre>`: `"print('Hello, world!')"`
     - Second `<pre>`: The inner `<code>` tag's text is `"for i in range(4):\n                print(i)"`.

6. **Return code list**: `["print('Hello, world!')", "for i in range(4):\n                print(i)"]`.

The output is a JSON object with the extracted code list. The newline in the second string is represented as `\n` in JSON.
[/THOUGHT]

[OUTPUT]
{
    "output": ["print('Hello, world!')", "for i in range(4):\n                print(i)"]
}
[/OUTPUT]