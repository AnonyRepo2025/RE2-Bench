[THOUGHT]
The function `_mask_nc` processes the input expression `eq = "x*n*m*o*n + n*m*n*o*m*n"` to handle non-commutative elements. The expression contains commutative symbol `x` and non-commutative symbols `n`, `m`, `o`. 

Steps:
1. The expression is non-commutative due to `n`, `m`, `o`.
2. The function traverses the expression:
   - `Add` and `Mul` nodes are skipped as they are basic operations.
   - Non-commutative symbols `n`, `m`, `o` are identified and added to `nc_syms`.
3. Since there are multiple non-commutative symbols and no non-commutative objects (other than symbols), no substitutions occur.
4. The function returns:
   - The original expression as a string: `"x*n*m*o*n + n*m*n*o*m*n"`
   - `None` for the substitution map (no replacements made)
   - A sorted list of non-commutative symbol names: `['m', 'n', 'o']` (sorted lexicographically)

Thus, the output tuple is `("x*n*m*o*n + n*m*n*o*m*n", None, ["m", "n", "o"])`.
[/THOUGHT]

[OUTPUT]
{
    "output": ["x*n*m*o*n + n*m*n*o*m*n", null, ["m", "n", "o"]]
}
[/OUTPUT]