1. Inside `_get_params`, it calls `super(_BaseComposition, self).get_params(deep=deep)`, which calls `BaseEstimator.get_params(self, deep=deep)`.
2. `BaseEstimator.get_params` calls `self._get_param_names()` to get the list of parameter names.
3. `_get_param_names` returns a list of parameter names.
4. For each parameter name, it gets the value of the parameter using `getattr(self, key, None)`.
5. If `deep` is True and the value is an object with a `get_params` method, it calls `value.get_params().items()` to get the parameters of the value.
6. It updates the output dictionary with the parameters of the value.
7. If `attr` is "_transformers", it calls `getattr(self, attr)` to get the value of the attribute.
8. It updates the output dictionary with the value of the attribute.
9. It calls `super(_BaseComposition, self).set_params(**params)` to set the parameters of the object.
10. It returns the output dictionary.
[/THOUGHT]

[OUTPUT]
```
{
    "n_jobs": 1,
    "remainder__copy": true,
    "remainder__with_mean": true,
    "remainder__with_std": false,
    "remainder": {
        "with_mean": true,
        "with_std": false,
        "copy": true
    },
    "transformer_weights": null,
    "transformers": null,
    "trans1": null
}
```
[/OUTPUT]
