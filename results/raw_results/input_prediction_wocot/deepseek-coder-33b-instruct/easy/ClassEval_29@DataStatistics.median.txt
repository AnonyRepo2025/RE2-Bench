
[INPUT]
```
{
    "self": {},
    "args": {
        "data": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hashmap = {}
        for i in range(len(nums)):
            complement = target - nums[i]
            if complement in hashmap:
                return [i, hashmap[complement]]
            hashmap[nums[i]] = i
[/PYTHON]

What will be the input of `twoSum`, given the following output:
[OUTPUT]
```
{
    "output": [0, 1]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "nums": XXX,
        "target": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [2, 7, 11, 15],
        "target": 9
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {")": "(", "}": "{", "]": "["}
        for char in s:
            if char in mapping:
                top_element = stack.pop() if stack else '#'
                if mapping[char] != top_element:
                    return False
            else:
                stack.append(char)
        return not stack
[/PYTHON]

What will be the input of `isValid`, given the following output:
[OUTPUT]
```
{
    "output": True
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "s": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "s": "()"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Solution:
    def romanToInt(self, s: str) -> int:
        roman_to_int = {
            'I': 1,
            'V': 5,
            'X': 10,
            'L': 50,
            'C': 100,
            'D': 500,
            'M': 1000
        }
        s = s.replace("IV", "IIII").replace("IX", "VIIII")
        s = s.replace("XL", "XXXX").replace("XC", "LXXXX")
        s = s.replace("CD", "CCCC").replace("CM", "DCCCC")
        return sum(map(lambda x: roman_to_int[x], s))
[/PYTHON]

What will be the input of `romanToInt`, given the following output:
[OUTPUT]
```
{
    "output": 58
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "s": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "s": "LVIII"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if not strs: return ""
        shortest = min(strs,key=len)
        for i, ch in enumerate(shortest):
            for other in strs:
                if other[i] != ch:
                    return shortest[:i]
        return shortest 
[/PYTHON]

What will be the input of `longestCommonPrefix`, given the following output:
[OUTPUT]
```
{
    "output": "fl"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "strs": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "strs": ["flower","flow","flight"]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x < 0 or (x % 10 == 0 and x != 0):
            return False
        reverted_number = 0
        while x > reverted_number:
            reverted_number = reverted_number * 10 + x % 10
            x //= 10
        return x == reverted_number or x == reverted_number // 10
[/PYTHON]

What will be the input of `isPalindrome`, given the following output:
[OUTPUT]
```
{
    "output": True
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "x": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "x": 121
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Solution:
    def reverse(self, x: int) -> int:
        if x < 0:
            sign = -1
            x = -x
        else:
            sign = 1
        result = 0
        while x:
            result = result * 10 + x % 10
            x //= 10
        result *= sign
        if result < -2**31 or result > 2**31 - 1:
            return 0
        return result
[/PYTHON]

What will be the input of `reverse`, given the following output:
[OUTPUT]
```
{
    "output": 321
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "x": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "x": 123
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Solution:
    def myAtoi(self, s: str) -> int:
        s = s.strip()
        if not s:
            return 0
        sign = 1
        if s[0] in ['-', '+']:
            if s[0] == '-':
                sign = -1
            s = s[1:]
        result = 0
        for ch in s:
            if not ch.isdigit():
                break
            result = result * 10 + int(ch)
            if result > 2**31 - 1:
                break
        result *= sign
        if result < -2**31:
            return -2**31
        if result > 2**31 - 1:
            return 2**31 - 1
        return result
[/PYTHON]

What will be the input of `myAtoi`, given the following output:
[OUTPUT]
```
{
    "output": 42
}
```
[/