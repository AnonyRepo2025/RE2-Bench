
[INPUT]
```
{
    "self": {
        "file_name": "my_archive.zip"
    },
    "args": {
        "file_name": "file_to_extract.txt",
        "output_path": "/path/to/output"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import requests

class HTTPClient:

    def __init__(self, base_url):
        self.base_url = base_url

    def get(self, path, params=None):
        url = self.base_url + path
        response = requests.get(url, params=params)
        return response.json()
[/PYTHON]

What will be the input of `get`, given the following output:
[OUTPUT]
```
{
    "output": {
        "status": "success",
        "data": {
            "id": 1,
            "name": "John Doe"
        }
    }
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "base_url": XXX
    },
    "args": {
        "path": XXX,
        "params": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "base_url": "https://api.example.com"
    },
    "args": {
        "path": "/users/1",
        "params": {}
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import sqlite3

class SQLiteDatabase:

    def __init__(self, db_name):
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()

    def execute_query(self, query, params=None):
        if params:
            self.cursor.execute(query, params)
        else:
            self.cursor.execute(query)
        self.conn.commit()
        return self.cursor.fetchall()
[/PYTHON]

What will be the input of `execute_query`, given the following output:
[OUTPUT]
```
{
    "output": [
        {
            "id": 1,
            "name": "John Doe"
        },
        {
            "id": 2,
            "name": "Jane Doe"
        }
    ]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "db_name": XXX
    },
    "args": {
        "query": XXX,
        "params": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "db_name": "my_database.db"
    },
    "args": {
        "query": "SELECT * FROM users",
        "params": {}
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import json

class JSONFileProcessor:

    def __init__(self, file_name):
        self.file_name = file_name

    def read_file(self):
        with open(self.file_name, 'r') as file:
            data = json.load(file)
        return data
[/PYTHON]

What will be the input of `read_file`, given the following output:
[OUTPUT]
```
{
    "output": {
        "name": "John Doe",
        "age": 30,
        "city": "New York"
    }
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "file_name": XXX
    },
    "args": {},
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "file_name": "my_file.json"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import os

class FileSystem:

    def __init__(self, path):
        self.path = path

    def list_files(self):
        return os.listdir(self.path)
[/PYTHON]

What will be the input of `list_files`, given the following output:
[OUTPUT]
```
{
    "output": [
        "file1.txt",
        "file2.txt",
        "file3.txt"
    ]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "path": XXX
    },
    "args": {},
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "path": "/path/to/directory"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import re

class RegexMatcher:

    def __init__(self, pattern):
        self.pattern = pattern

    def match(self, text):
        return bool(re.match(self.pattern, text))
[/PYTHON]

What will be the input of `match`, given the following output:
[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "pattern": XXX
    },
    "args": {
        "text": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "pattern": "^[a-zA-Z0-9_]+$"
    },
    "args": {
        "text": "valid_text"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import time

class Timer:

    def __init__(self):
        self.start_time = time.time()

    def elapsed_time(self):
        return time.time() - self.start_time
[/PYTHON]

What will be the input of `elapsed_time`, given the following output:
[OUTPUT]
```
{
    "output": 5.0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "start_time": XXX
    },
    "args": {},
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "start_time": 1600000000.0
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import random

class RandomNumberGenerator:

    def __init__(self, seed=None):
        if seed is not None:
            random.seed(seed)

    def generate(self, start, end):
        return random.randint(start, end)
[/PYTHON]

What will be the input of `generate`, given the following output:
[OUTPUT]
```
{
    "output": 42
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "seed": XXX
    },
    "args": {
        "start": XXX,
        "end": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "seed": 123
    },
    "args": {
        "start": 1,
        "end": 100
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import math

class Circle: