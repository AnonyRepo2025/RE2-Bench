
[INPUT]
```
{
    "self": {},
    "args": {
        "x": 100,
        "shift": 2
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_max_min(numbers):
    if not numbers:
        return None, None
    max_num = max(numbers)
    min_num = min(numbers)
    return max_num, min_num
[/PYTHON]

What will be the input of `find_max_min` given the following output:
[OUTPUT]
```
{
    "output": (10, 1)
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "numbers": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_common_elements(list1, list2):
    return [value for value in list1 if value in list2]
[/PYTHON]

What will be the input of `find_common_elements` given the following output:
[OUTPUT]
```
{
    "output": [2, 3]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "list1": XXX,
        "list2": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "list1": [1, 2, 3, 4, 5],
        "list2": [2, 3, 6, 7, 8]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_duplicates(numbers):
    return [number for number in numbers if numbers.count(number) > 1]
[/PYTHON]

What will be the input of `find_duplicates` given the following output:
[OUTPUT]
```
{
    "output": [2, 2]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "numbers": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1, 2, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_missing_numbers(numbers):
    return [number for number in range(min(numbers), max(numbers) + 1) if number not in numbers]
[/PYTHON]

What will be the input of `find_missing_numbers` given the following output:
[OUTPUT]
```
{
    "output": [4, 5]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "numbers": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1, 2, 3, 6, 7]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_palindromes(words):
    return [word for word in words if word == word[::-1]]
[/PYTHON]

What will be the input of `find_palindromes` given the following output:
[OUTPUT]
```
{
    "output": ["racecar", "level"]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "words": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "words": ["hello", "world", "racecar", "level"]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_anagrams(words):
    return [word for word in words if word == word[::-1]]
[/PYTHON]

What will be the input of `find_anagrams` given the following output:
[OUTPUT]
```
{
    "output": ["racecar", "level"]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "words": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "words": ["hello", "world", "racecar", "level"]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_prime_numbers(numbers):
    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True
    return [number for number in numbers if is_prime(number)]
[/PYTHON]

What will be the input of `find_prime_numbers` given the following output:
[OUTPUT]
```
{
    "output": [2, 3, 5, 7]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "numbers": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_factors(number):
    return [i for i in range(1, number + 1) if number % i == 0]
[/PYTHON]

What will be the input of `find_factors` given the following output:
[OUTPUT]
```
{
    "output": [1, 2, 3, 4, 6, 12]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "number": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "number": 12
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def find_perfect_numbers(numbers):
    def is_perfect(n):
        if n <= 0:
            return False
        divisors = [i for i in range(1, n) if n % i == 0]
        return sum(divisors) == n
    return [number for number in numbers if is_perfect(number)]
[/PYTHON]

What will be the input