
[INPUT]
```
{
    "self": {},
    "args": {
        "lst": [1, 2, 3, 4, 5, 6]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def get_max(lst):
    return max(lst)
[/PYTHON]

What will be the input of `get_max` given the following output:
[OUTPUT]
```
{
    "output": 5
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "lst": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "lst": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def get_min(lst):
    return min(lst)
[/PYTHON]

What will be the input of `get_min` given the following output:
[OUTPUT]
```
{
    "output": 1
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "lst": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "lst": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def get_sum(lst):
    return sum(lst)
[/PYTHON]

What will be the input of `get_sum` given the following output:
[OUTPUT]
```
{
    "output": 15
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "lst": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "lst": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def get_avg(lst):
    return sum(lst) / len(lst)
[/PYTHON]

What will be the input of `get_avg` given the following output:
[OUTPUT]
```
{
    "output": 3.0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "lst": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "lst": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def get_median(lst):
    lst.sort()
    if len(lst) % 2 == 0:
        return (lst[len(lst) // 2 - 1] + lst[len(lst) // 2]) / 2
    else:
        return lst[len(lst) // 2]
[/PYTHON]

What will be the input of `get_median` given the following output:
[OUTPUT]
```
{
    "output": 3.0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "lst": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "lst": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def get_mode(lst):
    from collections import Counter
    counter = Counter(lst)
    return counter.most_common(1)[0][0]
[/PYTHON]

What will be the input of `get_mode` given the following output:
[OUTPUT]
```
{
    "output": 1
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "lst": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "lst": [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def get_range(lst):
    return max(lst) - min(lst)
[/PYTHON]

What will be the input of `get_range` given the following output:
[OUTPUT]
```
{
    "output": 4
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "lst": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "lst": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def get_variance(lst):
    mean = sum(lst) / len(lst)
    return sum((x - mean) ** 2 for x in lst) / len(lst)
[/PYTHON]

What will be the input of `get_variance` given the following output:
[OUTPUT]
```
{
    "output": 2.5
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "lst": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "lst": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def get_std_dev(lst):
    mean = sum(lst) / len(lst)
    variance = sum((x - mean) ** 2 for x in lst) / len(lst)
    return variance ** 0.5
[/PYTHON]

What will be the input of `get_std_dev` given the following output:
[OUTPUT]
```
{
    "output": 1.5811388300841898
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "lst": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "lst": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]

[PYTHON]
def get_percentile(lst, percentile):
    lst.sort()
    k = (len(lst