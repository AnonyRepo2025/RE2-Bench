
[INPUT]
```
{
    "input": "0 1 1"
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def solve(n, a, b):
    return n // (a + b) * a + min(n % (a + b), a)

n, a, b = map(int, input().split())
print(solve(n, a, b))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": "0 1 1"
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def solve(n, a, b):
    return n // (a + b) * a + min(n % (a + b), a)

n, a, b = map(int, input().split())
print(solve(n, a, b))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": "0 1 1"
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def solve(n, a, b):
    return n // (a + b) * a + min(n % (a + b), a)

n, a, b = map(int, input().split())
print(solve(n, a, b))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": "0 1 1"
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def solve(n, a, b):
    return n // (a + b) * a + min(n % (a + b), a)

n, a, b = map(int, input().split())
print(solve(n, a, b))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": "0 1 1"
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def solve(n, a, b):
    return n // (a + b) * a + min(n % (a + b), a)

n, a, b = map(int, input().split())
print(solve(n, a, b))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": "0 1 1"
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def solve(n, a, b):
    return n // (a + b) * a + min(n % (a + b), a)

n, a, b = map(int, input().split())
print(solve(n, a, b))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": "0 1 1"
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def solve(n, a, b):
    return n // (a + b) * a + min(n % (a + b), a)

n, a, b = map(int, input().split())
print(solve(n, a, b))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": "0 1 1"
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def solve(n, a, b):
    return n // (a + b) * a + min(n % (a + b), a)

n, a, b = map(int, input().split())
print(solve(n, a, b))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": "0 1 1"
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def solve(n, a, b):
    return n // (a + b) * a + min(n % (a + b), a)

n, a, b = map(int, input().split())
print(solve(n, a, b))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": "0 1 1"
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def solve(n, a, b):
    return n // (a + b) * a + min(n % (a + b), a)

n, a, b = map(int, input().split())
print(solve(n, a, b))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": "0 1 1"
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def solve(n, a, b):
    return n // (a + b) * a + min(n % (a + b), a)

n, a, b = map(int, input().split())
print(solve(n, a, b))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": "0 1 1"
}
