
[INPUT]
```
{
    "self": {
        "_wcs": {
            "_init_kwargs": {
                "keysel": [0, 1],
                "colsel": [0, 1]
            },
            "naxis": 2,
            "_naxis": 2,
            "_pixel_bounds": [(0, 1024), (0, 1024)]
        },
        "_slices_array": [slice(0, 1024, None), slice(0, 1024, None)],
        "_slices_pixel": [slice(0, 1024, None), slice(0, 1024, None)],
        "_pixel_keep": [0, 1],
        "_world_keep": [0, 1]
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
import numpy as np
from astropy.io import fits
from astropy.wcs import WCS

def get_wcs_from_header(header):
    return WCS(header)

def get_data_from_fits(filename):
    hdul = fits.open(filename)
    return hdul[0].data

def get_header_from_fits(filename):
    hdul = fits.open(filename)
    return hdul[0].header

def get_wcs_from_fits(filename):
    header = get_header_from_fits(filename)
    return get_wcs_from_header(header)
[/PYTHON]
What will be the input of `get_wcs_from_fits`, given the following output:
[OUTPUT]
```
{
    "output": {
        "wcs": {
            "wcs": {
                "crval": [
                    0.0,
                    0.0
                ],
                "cdelt": [
                    1.0,
                    1.0
                ],
                "crpix": [
                    0.0,
                    0.0
                ],
                "ctype": [
                    "RA---TAN",
                    "DEC--TAN"
                ],
                "pc": [
                    [
                        1.0,
                        0.0
                    ],
                    [
                        0.0,
                        1.0
                    ]
                ],
                "cunit": [
                    "deg",
                    "deg"
                ],
                "lonpole": 180.0,
                "latpole": 0.0,
                "mjdobs": 59580.0,
                "date-obs": "2020-07-20T00:00:00.000",
                "equinox": 2000.0,
                "radesys": "ICRS",
                "ctype1": "RA---TAN",
                "ctype2": "DEC--TAN",
                "cd1_1": 1.0,
                "cd1_2": 0.0,
                "cd2_1": 0.0,
                "cd2_2": 1.0,
                "cunit1": "deg",
                "cunit2": "deg",
                "crval1": 0.0,
                "crval2": 0.0,
                "crpix1": 0.0,
                "crpix2": 0.0,
                "pc1_1": 1.0,
                "pc1_2": 0.0,
                "pc2_1": 0.0,
                "pc2_2": 1.0,
                "lonpole": 180.0,
                "latpole": 0.0,
                "mjdobs": 59580.0,
                "date-obs": "2020-07-20T00:00:00.000",
                "equinox": 2000.0,
                "radesys": "ICRS",
                "naxis": 2,
                "_naxis": [
                    2,
                    2
                ],
                "name": "PrimaryHDU",
                "wcs": {
                    "wcs": {
                        "crval": [
                            0.0,
                            0.0
                        ],
                        "cdelt": [
                            1.0,
                            1.0
                        ],
                        "crpix": [
                            0.0,
                            0.0
                        ],
                        "ctype": [
                            "RA---TAN",
                            "DEC--TAN"
                        ],
                        "pc": [
                            [
                                1.0,
                                0.0
                            ],
                            [
                                0.0,
                                1.0
                            ]
                        ],
                        "cunit": [
                            "deg",
                            "deg"
                        ],
                        "lonpole": 180.0,
                        "latpole": 0.0,
                        "mjdobs": 59580.0,
                        "date-obs": "2020-07-20T00:00:00.000",
                        "equinox": 2000.0,
                        "radesys": "ICRS",
                        "ctype1": "RA---TAN",
                        "ctype2": "DEC--TAN",
                        "cd1_1": 1.0,
                        "cd1_2": 0.0,
                        "cd2_1": 0.0,
                        "cd2_2": 1.0,
                        "cunit1": "deg",
                        "cunit2": "deg",
                        "crval1": 0.0,
                        "crval2": 0.0,
                        "crpix1": 0.0,
                        "crpix2": 0.0,
                        "pc1_1": 1.0,
                        "pc1_2": 0.0,
                        "pc2_1": 0.0,
                        "pc2_2": 1.0,
                        "lonpole": 180.0,
                        "latpole": 0.0,
                        "mjdobs": 59580.0,
                        "date-obs": "2020-07-20T00:00:00.000",
                        "equinox": 2000.0,
                        "radesys": "ICRS",
                        "naxis": 2,
                        "_naxis": [
                            2,
                            2
                        ],
                        "name": "PrimaryHDU"
                    }
                }
            }
        }
    }
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "filename": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "filename": "test.fits"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
import numpy as np
from astropy.io import fits
from astropy.wcs import WCS

def get_wcs_from_header(header):
    return WCS(header)

def get_data_from_fits(filename):
    hdul = fits.open(filename)
    return hdul[0].data

def get_header_from_fits(filename):
    hdul = fits.open(filename)
    return hdul[0].header

def get_wcs_from_fits(filename):
    header = get_header_from_fits(filename)
    return get_wcs_from_header(header)
[/PYTHON]
What will be the input of `get_wcs_from_fits`, given the following output:
[OUTPUT]
```
{
    "output": {
        "wcs": {
            "wcs": {
                "crval": [
                    0.0,
                    0.0
                ],
                "cdelt": [
                    1.0,
                    