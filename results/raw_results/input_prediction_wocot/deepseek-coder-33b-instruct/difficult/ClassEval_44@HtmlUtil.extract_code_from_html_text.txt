
[INPUT]
```
{
    "self": {
        "SPACE_MARK": "-SPACE-",
        "JSON_MARK": "-JSON-",
        "MARKUP_LANGUAGE_MARK": "-MARKUP_LANGUAGE-",
        "URL_MARK": "-URL-",
        "NUMBER_MARK": "-NUMBER-",
        "TRACE_MARK": "-TRACE-",
        "COMMAND_MARK": "-COMMAND-",
        "COMMENT_MARK": "-COMMENT-",
        "CODE_MARK": "-CODE-"
    },
    "args": {
        "html_text": "<p>Hello, world</p><pre>print('Hello, world')</pre><p>This is a test</p><blockquote>for i in range(4):\n                print(i)</blockquote>"
    },
    kwargs: {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import json
import re
from typing import List, Dict, Any

class JsonUtil:

    def __init__(self):
        self.json_pattern = re.compile(r'\{.*\}')

    def is_json(self, text: str) -> bool:
        return self.json_pattern.match(text) is not None

    def extract_json_from_text(self, text: str) -> List[Dict[str, Any]]:
        json_list = []
        json_str_list = self.json_pattern.findall(text)
        for json_str in json_str_list:
            try:
                json_list.append(json.loads(json_str))
            except json.JSONDecodeError:
                continue
        return json_list
[/PYTHON]

What will be the input of `extract_json_from_text`, given the following output:
[OUTPUT]
```
{
    "output": [
        {"name": "John", "age": 30, "city": "New York"},
        {"name": "Jane", "age": 25, "city": "Chicago"}
    ]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "json_pattern": XXX
    },
    "args": {
        "text": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "json_pattern": "\{.*\}"
    },
    "args": {
        "text": "{'name': 'John', 'age': 30, 'city': 'New York'} and {'name': 'Jane', 'age': 25, 'city': 'Chicago'}"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import re
from typing import List, Tuple

class RegexUtil:

    def __init__(self):
        self.email_pattern = re.compile(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b')

    def extract_emails(self, text: str) -> List[str]:
        return self.email_pattern.findall(text)

    def replace_emails(self, text: str, replacement: str = '[EMAIL]') -> str:
        return self.email_pattern.sub(replacement, text)
[/PYTHON]

What will be the input of `extract_emails`, given the following output:
[OUTPUT]
```
{
    "output": [
        "john.doe@example.com",
        "jane.doe@example.com"
    ]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "email_pattern": XXX
    },
    "args": {
        "text": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "email_pattern": "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b"
    },
    "args": {
        "text": "Contact us at john.doe@example.com or jane.doe@example.com"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import re
from typing import List, Tuple

class RegexUtil:

    def __init__(self):
        self.email_pattern = re.compile(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b')

    def extract_emails(self, text: str) -> List[str]:
        return self.email_pattern.findall(text)

    def replace_emails(self, text: str, replacement: str = '[EMAIL]') -> str:
        return self.email_pattern.sub(replacement, text)
[/PYTHON]

What will be the input of `replace_emails`, given the following output:
[OUTPUT]
```
{
    "output": "Contact us at [EMAIL] or [EMAIL]"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "email_pattern": XXX
    },
    "args": {
        "text": XXX,
        "replacement": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "email_pattern": "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b"
    },
    "args": {
        "text": "Contact us at john.doe@example.com or jane.doe@example.com",
        "replacement": "[EMAIL]"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import re
from typing import List, Tuple

class RegexUtil:

    def __init__(self):
        self.email_pattern = re.compile(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b')

    def extract_emails(self, text: str) -> List[str]:
        return self.email_pattern.findall(text)

    def replace_emails(self, text: str, replacement: str = '[EMAIL]') -> str:
        return self.email_pattern.sub(replacement, text)
[/PYTHON]

What will be the input of `replace_emails`, given the following output:
[OUTPUT]
```
{
    "output": "Contact us at [EMAIL] or [EMAIL]"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "email_pattern": XXX
    },
    "args": {
        "text": XXX,
        "replacement": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "email_pattern": "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b"
    },
    "args": {
        "text": "Contact us at john.doe@example.com or jane.doe@example.com",
        "replacement": "[EMAIL]"
    },
    "kwargs": {}
}
