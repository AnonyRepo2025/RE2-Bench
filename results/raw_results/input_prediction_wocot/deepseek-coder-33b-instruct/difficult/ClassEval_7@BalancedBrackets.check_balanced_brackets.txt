
[INPUT]
```
{
    "self": {
        "stack": [],
        "left_brackets": ['(', '{', '['],
        "right_brackets": [')', '}', ']'],
        "expr": "[(])"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class BinarySearch:

    def __init__(self, arr, x):
        self.arr = arr
        self.x = x

    def search(self):
        low = 0
        high = len(self.arr) - 1
        mid = 0

        while low <= high:

            mid = (high + low) // 2

            if self.arr[mid] < self.x:
                low = mid + 1

            elif self.arr[mid] > self.x:
                high = mid - 1

            else:
                return mid

        return -1
[/PYTHON]

What will be the input of `search`, given the following output:
[OUTPUT]
```
{
    "output": 4
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "arr": XXX,
        "x": XXX
    },
    "args": {},
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "arr": [2, 3, 4, 10, 40],
        "x": 10
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Fibonacci:

    def __init__(self, n):
        self.n = n

    def fib(self):
        if self.n <= 0:
            return "Input should be positive integer"
        elif self.n == 1:
            return 0
        elif self.n == 2:
            return 1
        else:
            a, b = 0, 1
            for _ in range(2, self.n):
                a, b = b, a + b
            return b
[/PYTHON]

What will be the input of `fib`, given the following output:
[OUTPUT]
```
{
    "output": 3
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "n": XXX
    },
    "args": {},
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "n": 5
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Factorial:

    def __init__(self, n):
        self.n = n

    def factorial(self):
        if self.n < 0:
            return "Sorry, factorial does not exist for negative numbers"
        elif self.n == 0:
            return 1
        else:
            fact = 1
            for i in range(1, self.n + 1):
                fact *= i
            return fact
[/PYTHON]

What will be the input of `factorial`, given the following output:
[OUTPUT]
```
{
    "output": 120
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "n": XXX
    },
    "args": {},
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "n": 5
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class GCD:

    def __init__(self, a, b):
        self.a = a
        self.b = b

    def gcd(self):
        while(self.b):
            self.a, self.b = self.b, self.a % self.b
        return self.a
[/PYTHON]

What will be the input of `gcd`, given the following output:
[OUTPUT]
```
{
    "output": 12
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "a": XXX,
        "b": XXX
    },
    "args": {},
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "a": 60,
        "b": 48
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class LCM:

    def __init__(self, a, b):
        self.a = a
        self.b = b

    def gcd(self):
        while(self.b):
            self.a, self.b = self.b, self.a % self.b
        return self.a

    def lcm(self):
        return self.a * self.b // self.gcd()
[/PYTHON]

What will be the input of `lcm`, given the following output:
[OUTPUT]
```
{
    "output": 120
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "a": XXX,
        "b": XXX
    },
    "args": {},
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "a": 60,
        "b": 48
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Palindrome:

    def __init__(self, s):
        self.s = s

    def is_palindrome(self):
        return self.s == self.s[::-1]
[/PYTHON]

What will be the input of `is_palindrome`, given the following output:
[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "s": XXX
    },
    "args": {},
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "s": "racecar"
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Prime:

    def __init__(self, n):
        self.n = n

    def is_prime(self):
        if self.n <= 1:
            return False
        if self.n <= 3:
            return True
        if self.n % 2 == 0 or self.n % 3 == 0:
            return False
        i = 5
        while i * i <= self.n:
            if self.n % i == 0 or self.n % (i + 2) == 0:
                return False
            i += 6
        return True
[/PYTHON]

What will be the input of `is_prime`, given the following output:
[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "n": XXX
    },
    "args": {},
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "n": 11
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class QuickSort:

    def __init__(self, arr):
        self.arr = arr

    def partition(self, low,