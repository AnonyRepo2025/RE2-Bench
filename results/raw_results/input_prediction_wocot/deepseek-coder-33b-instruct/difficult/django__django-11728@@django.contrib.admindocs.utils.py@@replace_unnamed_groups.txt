
[INPUT]
```
{
    "self": {},
    "args": {
        "pattern": "^a/(b|c)/?$"
    },
    kwargs: {}
}
```
[/INPUT]
[/PYTHON]
[PYTHON]
import re

def parse_url(url):
    pattern = r'^(?P<protocol>https?://)(?P<domain>[^/]+)(?P<path>/[^?#]*)?(?P<query>\?[^#]*)?(?P<fragment>#.*)?$'
    match = re.match(pattern, url)
    if match:
        return match.groupdict()
    else:
        return None
[/PYTHON]

What will be the input of `parse_url`, given the following output:
[OUTPUT]
```
{
    "output": {
        "protocol": "http://",
        "domain": "www.example.com",
        "path": "/path/to/page",
        "query": "?param1=value1&param2=value2",
        "fragment": "#section"
    }
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "url": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "url": "http://www.example.com/path/to/page?param1=value1&param2=value2#section"
    },
    "kwargs": {}
}
```
[/INPUT]
[/PYTHON]
[PYTHON]
def get_url_parts(url):
    import urllib.parse
    parsed_url = urllib.parse.urlparse(url)
    return {
        'scheme': parsed_url.scheme,
        'netloc': parsed_url.netloc,
        'path': parsed_url.path,
        'params': parsed_url.params,
        'query': parsed_url.query,
        'fragment': parsed_url.fragment
    }
[/PYTHON]

What will be the input of `get_url_parts`, given the following output:
[OUTPUT]
```
{
    "output": {
        "scheme": "https",
        "netloc": "www.example.com",
        "path": "/path/to/page",
        "params": "",
        "query": "param1=value1&param2=value2",
        "fragment": "section"
    }
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "url": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "url": "https://www.example.com/path/to/page;param1=value1&param2=value2#section"
    },
    "kwargs": {}
}
```
[/INPUT]
[/PYTHON]
[PYTHON]
def get_url_parts(url):
    import urllib.parse
    parsed_url = urllib.parse.urlparse(url)
    return {
        'scheme': parsed_url.scheme,
        'netloc': parsed_url.netloc,
        'path': parsed_url.path,
        'params': parsed_url.params,
        'query': parsed_url.query,
        'fragment': parsed_url.fragment
    }
[/PYTHON]

What will be the input of `get_url_parts`, given the following output:
[OUTPUT]
```
{
    "output": {
        "scheme": "https",
        "netloc": "www.example.com",
        "path": "/path/to/page",
        "params": "",
        "query": "param1=value1&param2=value2",
        "fragment": "section"
    }
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "url": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "url": "https://www.example.com/path/to/page;param1=value1&param2=value2#section"
    },
    "kwargs": {}
}
```
[/INPUT]
[/PYTHON]
[PYTHON]
def get_url_parts(url):
    import urllib.parse
    parsed_url = urllib.parse.urlparse(url)
    return {
        'scheme': parsed_url.scheme,
        'netloc': parsed_url.netloc,
        'path': parsed_url.path,
        'params': parsed_url.params,
        'query': parsed_url.query,
        'fragment': parsed_url.fragment
    }
[/PYTHON]

What will be the input of `get_url_parts`, given the following output:
[OUTPUT]
```
{
    "output": {
        "scheme": "https",
        "netloc": "www.example.com",
        "path": "/path/to/page",
        "params": "",
        "query": "param1=value1&param2=value2",
        "fragment": "section"
    }
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "url": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "url": "https://www.example.com/path/to/page;param1=value1&param2=value2#section"
    },
    "kwargs": {}
}
```
[/INPUT]
[/PYTHON]
[PYTHON]
def get_url_parts(url):
    import urllib.parse
    parsed_url = urllib.parse.urlparse(url)
    return {
        'scheme': parsed_url.scheme,
        'netloc': parsed_url.netloc,
        'path': parsed_url.path,
        'params': parsed_url.params,
        'query': parsed_url.query,
        'fragment': parsed_url.fragment
    }
[/PYTHON]

What will be the input of `get_url_parts`, given the following output:
[OUTPUT]
```
{
    "output": {
        "scheme": "https",
        "netloc": "www.example.com",
        "path": "/path/to/page",
        "params": "",
        "query": "param1=value1&param2=value2",
        "fragment": "section"
    }
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "url": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "url": "https://www.example.com/path/to/page;param1=value1&param2=value2#section"
    },
    "kwargs": {}
}
```
[/INPUT]
[/PYTHON]
[PYTHON]
def get_url_parts(url):
    import urllib.parse
    parsed_url = urllib.parse.urlparse(url)
    return {
        'scheme': parsed_url.scheme,
        'netloc': parsed_url.netloc,
        'path': parsed_url.path,
        'params': parsed_url.params,
        'query': parsed_url.query,
        'fragment': parsed_url.fragment
    }
[/PYTHON]

What will be the input of `get_url_parts`, given the following output:
[OUTPUT]
```
{
    "output": {
        "scheme": "https",
        "netloc":