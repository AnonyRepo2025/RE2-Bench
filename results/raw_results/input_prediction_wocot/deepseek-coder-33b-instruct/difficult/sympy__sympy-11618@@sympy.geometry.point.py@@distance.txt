
[INPUT]
```
{
    "self": {
        "args": [1, 1]
    },
    "args": {
        "p": [2, 2]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from sympy import symbols, Eq, solve
from sympy.abc import x, y

class Line(object):
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.slope = (p2[1] - p1[1]) / (p2[0] - p1[0])
        self.intercept = p1[1] - self.slope * p1[0]

    def get_y(self, x):
        return self.slope * x + self.intercept

    def get_x(self, y):
        return (y - self.intercept) / self.slope

    def intersection(self, other):
        x_intersect = (other.intercept - self.intercept) / (self.slope - other.slope)
        y_intersect = self.get_y(x_intersect)
        return (x_intersect, y_intersect)

    def parallel(self, other):
        return self.slope == other.slope

    def perpendicular(self, other):
        return self.slope == -1 / other.slope

    def contains(self, point):
        return point[1] == self.get_y(point[0])

    def __str__(self):
        return "y = {}x + {}".format(self.slope, self.intercept)
[/PYTHON]

Functions called during the execution:
[PYTHON]
def get_y(self, x):
    return self.slope * x + self.intercept

def intersection(self, other):
    x_intersect = (other.intercept - self.intercept) / (self.slope - other.slope)
    y_intersect = self.get_y(x_intersect)
    return (x_intersect, y_intersect)
[/PYTHON]
What will be the input of `intersection`, given the following output:
[OUTPUT]
```
{
    "output": "(0, 0)"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "p1": XXX,
        "p2": XXX,
        "slope": XXX,
        "intercept": XXX
    },
    "args": {
        "other": {
            "p1": XXX,
            "p2": XXX,
            "slope": XXX,
            "intercept": XXX
        }
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "p1": [1, 1],
        "p2": [2, 2],
        "slope": 1,
        "intercept": 0
    },
    "args": {
        "other": {
            "p1": [0, 0],
            "p2": [1, 1],
            "slope": 1,
            "intercept": 0
        }
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from sympy import symbols, Eq, solve
from sympy.abc import x, y

class Line(object):
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.slope = (p2[1] - p1[1]) / (p2[0] - p1[0])
        self.intercept = p1[1] - self.slope * p1[0]

    def get_y(self, x):
        return self.slope * x + self.intercept

    def get_x(self, y):
        return (y - self.intercept) / self.slope

    def intersection(self, other):
        x_intersect = (other.intercept - self.intercept) / (self.slope - other.slope)
        y_intersect = self.get_y(x_intersect)
        return (x_intersect, y_intersect)

    def parallel(self, other):
        return self.slope == other.slope

    def perpendicular(self, other):
        return self.slope == -1 / other.slope

    def contains(self, point):
        return point[1] == self.get_y(point[0])

    def __str__(self):
        return "y = {}x + {}".format(self.slope, self.intercept)
[/PYTHON]

Functions called during the execution:
[PYTHON]
def get_y(self, x):
    return self.slope * x + self.intercept

def intersection(self, other):
    x_intersect = (other.intercept - self.intercept) / (self.slope - other.slope)
    y_intersect = self.get_y(x_intersect)
    return (x_intersect, y_intersect)
[/PYTHON]
What will be the input of `intersection`, given the following output:
[OUTPUT]
```
{
    "output": "(0, 0)"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "p1": XXX,
        "p2": XXX,
        "slope": XXX,
        "intercept": XXX
    },
    "args": {
        "other": {
            "p1": XXX,
            "p2": XXX,
            "slope": XXX,
            "intercept": XXX
        }
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "p1": [1, 1],
        "p2": [2, 2],
        "slope": 1,
        "intercept": 0
    },
    "args": {
        "other": {
            "p1": [0, 0],
            "p2": [1, 1],
            "slope": 1,
            "intercept": 0
        }
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from sympy import symbols, Eq, solve
from sympy.abc import x, y

class Line(object):
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.slope = (p2[1] - p1[1]) / (p2[0] - p1[0])
        self.intercept = p1[1] - self.slope * p1[0]

    def get_y(self, x):
        return self.slope * x + self.intercept

    def get_x(self, y):
        return (y - self.intercept) / self.slope

    def intersection(self, other):
        x_intersect = (other.intercept - self.intercept) / (self.slope - other.slope)
        y_intersect = self.get_y(x_intersect)
        return (x_intersect, y_intersect)

    def parallel(self, other):
        return self.slope == other.slope

    def perpendicular(self, other):
        return self.slope == -1 / other.slope

    def contains(self, point):
        return point[1] == self.get_y(point[0])

    def __str__(self):
        return "y = {}x + {}".format(self.slope, self.intercept)
[/PYTHON]

Functions called during the execution:
[PYTHON]
def get_y(self, x):
    return self.slope * x + self.intercept

def intersection(self, other):
    x_intersect = (other.inter