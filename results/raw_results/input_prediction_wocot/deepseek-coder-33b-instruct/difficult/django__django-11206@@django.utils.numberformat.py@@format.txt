
[INPUT]
```
{
    "self": {},
    "args": {
        "number": "-359538626972463141629054847463408713596141135051689993197834953606314521560057077521179117265533756343080917907028764928468642653778928365536935093407075033972099821153102564152490980180778657888151737016910267884609166473806445896331617118664246696549595652408289446337476354361838599762500808052368249716736",
        "decimal_sep": "."
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from typing import List

def find_min(nums: List[int]) -> int:
    if not nums:
        return -1
    min_num = nums[0]
    for num in nums:
        if num < min_num:
            min_num = num
    return min_num
[/PYTHON]
What will be the input of `find_min`, given the following output:
[OUTPUT]
```
{
    "output": 1
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "nums": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from typing import List

def find_max(nums: List[int]) -> int:
    if not nums:
        return -1
    max_num = nums[0]
    for num in nums:
        if num > max_num:
            max_num = num
    return max_num
[/PYTHON]
What will be the input of `find_max`, given the following output:
[OUTPUT]
```
{
    "output": 5
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "nums": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from typing import List

def find_sum(nums: List[int]) -> int:
    return sum(nums)
[/PYTHON]
What will be the input of `find_sum`, given the following output:
[OUTPUT]
```
{
    "output": 15
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "nums": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from typing import List

def find_average(nums: List[int]) -> float:
    if not nums:
        return -1
    return sum(nums) / len(nums)
[/PYTHON]
What will be the input of `find_average`, given the following output:
[OUTPUT]
```
{
    "output": 3.0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "nums": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from typing import List

def find_median(nums: List[int]) -> float:
    if not nums:
        return -1
    nums.sort()
    length = len(nums)
    if length % 2 == 0:
        return (nums[length // 2 - 1] + nums[length // 2]) / 2
    else:
        return nums[length // 2]
[/PYTHON]
What will be the input of `find_median`, given the following output:
[OUTPUT]
```
{
    "output": 3.0
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "nums": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from typing import List

def find_mode(nums: List[int]) -> int:
    if not nums:
        return -1
    count_dict = {}
    for num in nums:
        if num in count_dict:
            count_dict[num] += 1
        else:
            count_dict[num] = 1
    max_count = max(count_dict.values())
    mode_nums = [k for k, v in count_dict.items() if v == max_count]
    return min(mode_nums)
[/PYTHON]
What will be the input of `find_mode`, given the following output:
[OUTPUT]
```
{
    "output": 1
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "nums": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "nums": [1, 2, 3, 4, 5]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from typing import List

def find_range(nums: List[int]) -> int:
    if not nums:
        return -1
    return max(nums) - min(nums)
[/PYTHON]
What will be the input of `find_range`, given the following output:
[OUTPUT]
```
{
    "output": 4
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "nums": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]