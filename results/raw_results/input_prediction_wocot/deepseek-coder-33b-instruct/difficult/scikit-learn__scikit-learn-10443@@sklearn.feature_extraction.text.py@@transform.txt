
[INPUT]
```
{
    "self": {
        "norm": "l2",
        "use_idf": true,
        "smooth_idf": true,
        "sublinear_tf": false,
        "_idf_diag": {
            "_shape": [
                11,
                11
            ],
            "maxprint": 50,
            "indices": "[0 1 2 3 4 5 6 7 8 9 10]",
            "indptr": "[0 1 2 3 4 5 6 7 8 9 10 11]",
            "data": "[0.40796057 0.91299955 0.66635332 0.74563614 0.87269566 0.48826456\n 1.        ]"
        }
    },
    "args": {
        "X": {
            "_shape": [
                1,
                11
            ],
            "maxprint": 50,
            "indices": "[1 0 1 0 1 0 1]",
            "indptr": "[0 2 4 6 7 7 7 7 7 7 7 7]",
            "data": "[0.40796057 0.91299955 0.66635332 0.74563614 0.87269566 0.48826456\n 1.        ]",
            "_has_sorted_indices": true
        }
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hashmap = {}
        for i in range(len(nums)):
            complement = target - nums[i]
            if complement in hashmap:
                return [i, hashmap[complement]]
            hashmap[nums[i]] = i
[/PYTHON]
What will be the input of `twoSum`, given the following output:
[OUTPUT]
```
[0, 1]
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "hashmap": XXX
    },
    "args": {
        "nums": XXX,
        "target": XXX
    },
    "kwargs": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "hashmap": {
            2: 0
        }
    },
    "args": {
        "nums": [2, 7, 11, 15],
        "target": 9
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {")": "(", "}": "{", "]": "["}
        for char in s:
            if char in mapping:
                top_element = stack.pop() if stack else '#'
                if mapping[char] != top_element:
                    return False
            else:
                stack.append(char)
        return not stack
[/PYTHON]
What will be the input of `isValid`, given the following output:
[OUTPUT]
```
True
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "stack": XXX,
        "mapping": XXX
    },
    "args": {
        "s": XXX
    },
    "kwargs": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "stack": [],
        "mapping": {
            ")": "(",
            "}": "{",
            "]": "["
        }
    },
    "args": {
        "s": "()"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        max_profit, min_price = 0, float('inf')
        for price in prices:
            min_price = min(min_price, price)
            profit = price - min_price
            max_profit = max(max_profit, profit)
        return max_profit
[/PYTHON]
What will be the input of `maxProfit`, given the following output:
[OUTPUT]
```
5
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "max_profit": XXX,
        "min_price": XXX
    },
    "args": {
        "prices": XXX
    },
    "kwargs": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "max_profit": 0,
        "min_price": float('inf')
    },
    "args": {
        "prices": [7, 1, 5, 3, 6, 4]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
class Solution:
    def isPalindrome(self, s: str) -> bool:
        s = ''.join(c for c in s if c.isalnum()).lower()
        return s == s[::-1]
[/PYTHON]
What will be the input of `isPalindrome`, given the following output:
[OUTPUT]
```
True
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "s": XXX
    },
    "args": {
        "s": XXX
    },
    "kwargs": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "s": "A man, a plan, a canal: Panama"
    },
    "args": {
        "s": "A man, a plan, a canal: Panama"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
class Solution:
    def reverse(self, x: int) -> int:
        sign = [1,-1][x < 0]
        rst = sign*int(str(abs(x))[::-1])
        return rst if -(2**31)-1 < rst < 2**31 else 0
[/PYTHON]
What will be the input of `reverse`, given the following output:
[OUTPUT]
```
321
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "sign": XXX,
        "rst": XXX
    },
    "args": {
        "x": XXX
    },
    "kwargs": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "sign": 1,
        "rst": 321
    },
    "args": {
        "x": 123
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[EXAMPLE]
[PYTHON]
class Solution:
    def firstUniqChar(self, s: str) -> int:
        count = collections.Counter(s)
        for idx, ch in enumerate(s):
            if count[ch] == 1:
                return idx
        return -1
[/PYTHON]
What will be the input of `firstUniqChar`, given the following output:
[OUTPUT]
```
0
```
[/OUTPUT]

[STRUCTURE]
```
{
    "