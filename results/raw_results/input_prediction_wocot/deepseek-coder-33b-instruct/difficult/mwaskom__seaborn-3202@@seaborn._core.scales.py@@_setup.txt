
[INPUT]
```
{
    "self": {
        "values": null,
        "order": null,
        "_tick_params": {
            "locator": null
        },
        "_label_params": {
            "formatter": null
        },
        "_legend": [
            null,
            null
        ]
    },
    "args": {
        "data": {
            "_is_copy": null,
            "_mgr": {
                "axes": null,
                "blocks": null
            },
            "_item_cache": {},
            "_attrs": {},
            "_flags": {
                "_allows_duplicate_labels": null
            },
            "_name": null
        },
        "prop": {
            "variable": null
        }
    },
    "kwargs": {}
}
```
[/INPUT]
[/PYTHON]
[PYTHON]
from typing import List, Tuple

def find_max_subarray(nums: List[int], low: int, high: int) -> Tuple[int, int, int]:
    if high == low:
        return (low, high, nums[low])
    else:
        mid = (low + high) // 2
        (left_low, left_high, left_sum) = find_max_subarray(nums, low, mid)
        (right_low, right_high, right_sum) = find_max_subarray(nums, mid+1, high)
        (cross_low, cross_high, cross_sum) = find_max_crossing_subarray(nums, low, mid, high)
        if left_sum >= right_sum and left_sum >= cross_sum:
            return (left_low, left_high, left_sum)
        elif right_sum >= left_sum and right_sum >= cross_sum:
            return (right_low, right_high, right_sum)
        else:
            return (cross_low, cross_high, cross_sum)

def find_max_crossing_subarray(nums: List[int], low: int, mid: int, high: int) -> Tuple[int, int, int]:
    left_sum = float('-inf')
    sum = 0
    max_left = mid
    for i in range(mid, low-1, -1):
        sum = sum + nums[i]
        if sum > left_sum:
            left_sum = sum
            max_left = i
    right_sum = float('-inf')
    sum = 0
    max_right = mid
    for j in range(mid+1, high+1):
        sum = sum + nums[j]
        if sum > right_sum:
            right_sum = sum
            max_right = j
    return (max_left, max_right, left_sum + right_sum)
[/PYTHON]
What will be the input of `find_max_subarray`, given the following output:
[OUTPUT]
```
{
    "low": 0,
    "high": 5,
    "sum": 13
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "nums": XXX
    },
    "args": {
        "low": XXX,
        "high": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "nums": [1, 2, 3, 4, 5, 6]
    },
    "args": {
        "low": 0,
        "high": 5
    },
    "kwargs": {}
}
```
[/INPUT]
[/PYTHON]
[PYTHON]
from typing import List, Tuple

def find_max_subarray(nums: List[int], low: int, high: int) -> Tuple[int, int, int]:
    if high == low:
        return (low, high, nums[low])
    else:
        mid = (low + high) // 2
        (left_low, left_high, left_sum) = find_max_subarray(nums, low, mid)
        (right_low, right_high, right_sum) = find_max_subarray(nums, mid+1, high)
        (cross_low, cross_high, cross_sum) = find_max_crossing_subarray(nums, low, mid, high)
        if left_sum >= right_sum and left_sum >= cross_sum:
            return (left_low, left_high, left_sum)
        elif right_sum >= left_sum and right_sum >= cross_sum:
            return (right_low, right_high, right_sum)
        else:
            return (cross_low, cross_high, cross_sum)

def find_max_crossing_subarray(nums: List[int], low: int, mid: int, high: int) -> Tuple[int, int, int]:
    left_sum = float('-inf')
    sum = 0
    max_left = mid
    for i in range(mid, low-1, -1):
        sum = sum + nums[i]
        if sum > left_sum:
            left_sum = sum
            max_left = i
    right_sum = float('-inf')
    sum = 0
    max_right = mid
    for j in range(mid+1, high+1):
        sum = sum + nums[j]
        if sum > right_sum:
            right_sum = sum
            max_right = j
    return (max_left, max_right, left_sum + right_sum)
[/PYTHON]
What will be the input of `find_max_subarray`, given the following output:
[OUTPUT]
```
{
    "low": 0,
    "high": 5,
    "sum": 13
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "nums": XXX
    },
    "args": {
        "low": XXX,
        "high": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "nums": [1, 2, 3, 4, 5, 6]
    },
    "args": {
        "low": 0,
        "high": 5
    },
    "kwargs": {}
}
```
[/INPUT]
[/PYTHON]
[PYTHON]
from typing import List, Tuple

def find_max_subarray(nums: List[int], low: int, high: int) -> Tuple[int, int, int]:
    if high == low:
        return (low, high, nums[low])
    else:
        mid = (low + high) // 2
        (left_low, left_high, left_sum) = find_max_subarray(nums, low, mid)
        (right_low, right_high, right_sum) = find_max_subarray(nums, mid+1, high)
        (cross_low, cross_high, cross_sum) = find_max_crossing_subarray(nums, low, mid, high)
        if left_sum >= right_sum and left_sum >= cross_sum:
            return (left_low, left_high, left_sum)
        elif right_sum >= left_sum and right_sum >= cross_sum:
            return (right_low, right_high, right_sum)
        else:
            return (cross_low, cross_high, cross_sum)

def find_max_crossing_subarray(nums: List[int], low: int, mid: int, high: int) -> Tuple[int, int, int]:
    left_sum = float('-inf')
    sum = 0
    max_left = mid
    for i in range(mid, low-1, -1):
        sum = sum + nums[i]
        if sum > left_sum:
            left_sum = sum
            max_left = i
    right_sum = float('-inf')
    sum = 0
    max_right = mid
    for j in range(mid+1,