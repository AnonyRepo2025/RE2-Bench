
[INPUT]
```
{
    "self": {},
    "args": {},
    "kwargs": {
        "n_samples": 8,
        "centers": 2,
        "random_state": 0
    }
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import numpy as np
from sklearn.utils import check_random_state

def make_blobs(n_samples=100, n_features=2, centers=3, cluster_std=1.0, center_box=(-10.0, 10.0), shuffle=True, random_state=None):
    generator = check_random_state(random_state)
    if isinstance(centers, numbers.Integral):
        centers = generator.uniform(center_box[0], center_box[1], size=(centers, n_features))
    else:
        centers = check_array(centers)
        n_features = centers.shape[1]
    if hasattr(cluster_std, '__len__') and len(cluster_std) != centers.shape[0]:
        raise ValueError('Length of `clusters_std` not consistent with number of centers. Got centers = {} and cluster_std = {}'.format(centers, cluster_std))
    if isinstance(cluster_std, numbers.Real):
        cluster_std = np.ones(len(centers)) * cluster_std
    X = []
    y = []
    for i, (center, std) in enumerate(zip(centers, cluster_std)):
        X.append(generator.normal(loc=center, scale=std, size=(n_samples, n_features)))
        y += [i] * n_samples
    X = np.concatenate(X)
    y = np.array(y)
    if shuffle:
        indices = np.arange(n_samples * centers.shape[0])
        generator.shuffle(indices)
        X = X[indices]
        y = y[indices]
    return (X, y)
[/PYTHON]

Functions called during the execution:
[PYTHON]
.sklearn.utils.validation.check_random_state

def check_random_state(seed):
    print('[CALL]/home/changshu/CODEMIND/scripts/swebench/swebench_playground/dep/scikit-learn__scikit-learn-10577/sklearn/utils/validation.py@@check_random_state[/CALL]')
    'Turn seed into a np.random.RandomState instance\n\n    Parameters\n    ----------\n    seed : None | int | instance of RandomState\n        If seed is None, return the RandomState singleton used by np.random.\n        If seed is an int, return a new RandomState instance seeded with seed.\n        If seed is already a RandomState instance, return it.\n        Otherwise raise ValueError.\n    '
    if seed is None or seed is np.random:
        return np.random.mtrand._rand
    if isinstance(seed, (numbers.Integral, np.integer)):
        return np.random.RandomState(seed)
    if isinstance(seed, np.random.RandomState):
        return seed
    raise ValueError('%r cannot be used to seed a numpy.random.RandomState instance' % seed)

.sklearn.utils.validation.check_array

def check_array(array, accept_sparse=False, dtype='numeric', order=None, copy=False, force_all_finite=True, ensure_2d=True, allow_nd=False, ensure_min_samples=1, ensure_min_features=1, warn_on_dtype=False, estimator=None):
    print('[CALL]/home/changshu/CODEMIND/scripts/swebench/swebench_playground/dep/scikit-learn__scikit-learn-10577/sklearn/utils/validation.py@@check_array[/CALL]')
    'Input validation on an array, list, sparse matrix or similar.\n\n    By default, the input is converted to an at least 2D numpy array.\n    If the dtype of the array is object, attempt converting to float,\n    raising on failure.\n\n    Parameters\n    ----------\n    array : object\n        Input object to check / convert.\n\n    accept_sparse : string, boolean or list/tuple of strings (default=False)\n        String[s] representing allowed sparse matrix formats, such as \'csc\',\n        \'csr\', etc. If the input is sparse but not in the allowed format,\n        it will be converted to the first listed format. True allows the input\n        to be any format. False means that a sparse matrix input will\n        raise an error.\n\n        .. deprecated:: 0.19\n           Passing \'None\' to parameter ``accept_sparse`` in methods is\n           deprecated in version 0.19 "and will be removed in 0.21. Use\n           ``accept_sparse=False`` instead.\n\n    dtype : string, type, list of types or None (default="numeric")\n        Data type of result. If None, the dtype of the input is preserved.\n        If "numeric", dtype is preserved unless array.dtype is object.\n        If dtype is a list of types, conversion on the first type is only\n        performed if the dtype of the input is not in the list.\n\n    order : \'F\', \'C\' or None (default=None)\n        Whether an array will be forced to be fortran or c-style.\n        When order is None (default), then if copy=False, nothing is ensured\n        about the memory layout of the output array; otherwise (copy=True)\n        the memory layout of the returned array is kept as close as possible\n        to the original array.\n\n    copy : boolean (default=False)\n        Whether a forced copy will be triggered. If copy=False, a copy might\n        be triggered by a conversion.\n\n    force_all_finite : boolean or \'allow-nan\', (default=True)\n        Whether to raise an error on np.inf and np.nan in X. The possibilities\n        are:\n\n        - True: Force all values of X to be finite.\n        - False: accept both np.inf and np.nan in X.\n        - \'allow-nan\':  accept  only  np.nan  values in  X.  Values  cannot  be\n          infinite.\n\n        .. versionadded:: 0.20\n           ``force_all_finite`` accepts the string ``\'allow-nan\'``.\n\n    ensure_2d : boolean (default=True)\n        Whether to raise a value error if X is not 2d.\n\n    allow_nd : boolean (default=False)\n        Whether to allow X.ndim > 2.\n\n    ensure_min_samples : int (default=1)\n        Make sure that the array has a minimum number of samples in its first\n        axis (rows for a 2D array). Setting to 0 disables this check.\n\n    ensure_min_features : int (default=1)\n        Make sure that the 2D array has some minimum number of features\n        (columns). The default value of 1 rejects empty datasets.\n        This check is only enforced when the input data has effectively 2\n        dimensions or is originally 1D and ``ensure_2d`` is True. Setting to 0\n        disables this check.\n\n    warn_on_dtype : boolean (default=False)\n        Raise DataConversionWarning if the dtype of the input data structure\n        does not match the requested dtype, causing a memory copy.\n\n    estimator : str or estimator instance (default=None)\n        If passed, include the name of the estimator in warning messages.\n\n    Returns\n    -------\n    X_converted : object\n        The converted and validated X.\n\n    '
    if accept_sparse is None:
        warnings.warn("Passing 'None' to parameter 'accept_sparse' in methods check_array and check_X_y is deprecated in version 0.19 and will be removed in 0.21. Use 'accept_sparse=False'  instead.", Deprec