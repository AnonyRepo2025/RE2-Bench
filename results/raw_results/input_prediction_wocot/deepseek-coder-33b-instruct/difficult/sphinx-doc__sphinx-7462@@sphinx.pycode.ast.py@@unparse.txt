
[INPUT]
```
{
    "self": {},
    "args": {
        "node": {
            "elts": [
                {
                    "n": 1,
                    "lineno": 1,
                    "col_offset": 1,
                    "end_lineno": 1,
                    "end_col_offset": 1
                },
                {
                    "n": 2,
                    "lineno": 1,
                    "col_offset": 1,
                    "end_lineno": 1,
                    "end_col_offset": 1
                },
                {
                    "n": 3,
                    "lineno": 1,
                    "col_offset": 1,
                    "end_lineno": 1,
                    "end_col_offset": 1
                }
            ],
            "ctx": {},
            "lineno": 1,
            "col_offset": 1,
            "end_lineno": 1,
            "end_col_offset": 1
        }
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import ast
import inspect
import textwrap

def get_source(obj):
    if inspect.ismodule(obj):
        lines, lnum = inspect.getsourcelines(obj)
    elif inspect.isclass(obj):
        lines, lnum = inspect.getsourcelines(obj)
    elif inspect.isfunction(obj):
        lines, lnum = inspect.getsourcelines(obj)
    elif inspect.ismethod(obj):
        lines, lnum = inspect.getsourcelines(obj)
    else:
        raise ValueError("Input must be a module, class, function, or method.")
    return textwrap.dedent("".join(lines))

def get_ast(obj):
    source = get_source(obj)
    return ast.parse(source)
[/PYTHON]

What will be the input of `get_ast`, given the following output:
[OUTPUT]
```
{
    "output": "Module(body=[FunctionDef(name='foo', args=arguments(args=[arg(arg='x')], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Num(n=1)))], decorator_list=[], returns=None)], type_ignores=[])"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "obj": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "obj": "def foo(x):\n    return x + 1"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import ast
import inspect
import textwrap

def get_source(obj):
    if inspect.ismodule(obj):
        lines, lnum = inspect.getsourcelines(obj)
    elif inspect.isclass(obj):
        lines, lnum = inspect.getsourcelines(obj)
    elif inspect.isfunction(obj):
        lines, lnum = inspect.getsourcelines(obj)
    elif inspect.ismethod(obj):
        lines, lnum = inspect.getsourcelines(obj)
    else:
        raise ValueError("Input must be a module, class, function, or method.")
    return textwrap.dedent("".join(lines))

def get_ast(obj):
    source = get_source(obj)
    return ast.parse(source)
[/PYTHON]

What will be the input of `get_ast`, given the following output:
[OUTPUT]
```
{
    "output": "Module(body=[FunctionDef(name='foo', args=arguments(args=[arg(arg='x')], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Num(n=1)))], decorator_list=[], returns=None)], type_ignores=[])"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "obj": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "obj": "def foo(x):\n    return x + 1"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import ast
import inspect
import textwrap

def get_source(obj):
    if inspect.ismodule(obj):
        lines, lnum = inspect.getsourcelines(obj)
    elif inspect.isclass(obj):
        lines, lnum = inspect.getsourcelines(obj)
    elif inspect.isfunction(obj):
        lines, lnum = inspect.getsourcelines(obj)
    elif inspect.ismethod(obj):
        lines, lnum = inspect.getsourcelines(obj)
    else:
        raise ValueError("Input must be a module, class, function, or method.")
    return textwrap.dedent("".join(lines))

def get_ast(obj):
    source = get_source(obj)
    return ast.parse(source)
[/PYTHON]

What will be the input of `get_ast`, given the following output:
[OUTPUT]
```
{
    "output": "Module(body=[FunctionDef(name='foo', args=arguments(args=[arg(arg='x')], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Num(n=1)))], decorator_list=[], returns=None)], type_ignores=[])"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "obj": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "obj": "def foo(x):\n    return x + 1"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import ast
import inspect
import textwrap

def get_source(obj):
    if inspect.ismodule(obj):
        lines, lnum = inspect.getsourcelines(obj)
    elif inspect.isclass(obj):
        lines, lnum = inspect.getsourcelines(obj)
    elif inspect.isfunction(obj):
        lines, lnum = inspect.getsourcelines(obj)
    elif inspect.ismethod(obj):
        lines, lnum = inspect.getsourcelines(obj)
    else:
        raise ValueError("Input must be a module, class, function, or method.")
    return textwrap.dedent("".join(lines))

def get_ast(obj):
    source = get_source(obj)
    return ast.parse(source)
[/PYTHON]

What will be the input of `get_ast`, given the following output:
[OUTPUT]
```
{
    "output": "Module(body=[FunctionDef(name='foo', args=arguments(args=[arg(arg='x')], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Num(n=1)))], decorator_list=[], returns=None)], type_ignores=[])"
}
```
[/OUTPUT]

[