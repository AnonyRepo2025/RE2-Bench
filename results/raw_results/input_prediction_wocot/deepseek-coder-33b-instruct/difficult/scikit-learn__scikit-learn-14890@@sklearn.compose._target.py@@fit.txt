
[INPUT]
```
{
    "self": {
        "regressor": {
            "fit_intercept": true,
            "normalize": false,
            "copy_X": true,
            "n_jobs": null
        },
        "transformer": null,
        "func": "\"<function sqrt>\"",
        "inverse_func": "\"<function log>\"",
        "check_inverse": true
    },
    "args": {
        "X": XXX,
        "y": XXX
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import numpy as np
from sklearn.preprocessing import FunctionTransformer
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV

np.random.seed(0)

X = np.random.normal(size=(100, 3))
y = np.log(np.abs(X[:, 0] + 2 * X[:, 1] ** 2 - 1))

def custom_func(z):
    return np.hstack([z, z ** 2])

pipe = Pipeline([
    ('transformer', FunctionTransformer(custom_func)),
    ('regressor', LinearRegression())
])

param_grid = {
    'transformer__func': [custom_func, None],
    'regressor__fit_intercept': [True, False],
    'regressor__normalize': [True, False]
}

grid_search = GridSearchCV(pipe, param_grid, cv=5)
grid_search.fit(X, y)

print(grid_search.best_params_)
[/PYTHON]
What will be the input of `fit`, given the following output:
[OUTPUT]
```
{
    "best_params_": {
        "transformer__func": "\"<function custom_func>\"",
        "regressor__fit_intercept": true,
        "regressor__normalize": false
    }
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "estimator": XXX,
        "param_grid": XXX,
        "scoring": XXX,
        "n_jobs": XXX,
        "iid": XXX,
        "refit": XXX,
        "cv": XXX,
        "verbose": XXX,
        "pre_dispatch": XXX,
        "error_score": XXX,
        "return_train_score": XXX
    },
    "args": {
        "X": XXX,
        "y": XXX,
        "groups": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "estimator": "Pipeline(steps=[('transformer', FunctionTransformer(func=<function custom_func at 0x7f9c081117b0>)), ('regressor', LinearRegression())])",
        "param_grid": {
            "transformer__func": ["<function custom_func>", null],
            "regressor__fit_intercept": [true, false],
            "regressor__normalize": [true, false]
        },
        "scoring": null,
        "n_jobs": null,
        "iid": true,
        "refit": true,
        "cv": 5,
        "verbose": 0,
        "pre_dispatch": "2*n_jobs",
        "error_score": "raise",
        "return_train_score": false
    },
    "args": {
        "X": XXX,
        "y": XXX,
        "groups": null
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import numpy as np
from sklearn.preprocessing import FunctionTransformer
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV

np.random.seed(0)

X = np.random.normal(size=(100, 3))
y = np.log(np.abs(X[:, 0] + 2 * X[:, 1] ** 2 - 1))

def custom_func(z):
    return np.hstack([z, z ** 2])

pipe = Pipeline([
    ('transformer', FunctionTransformer(custom_func)),
    ('regressor', LinearRegression())
])

param_grid = {
    'transformer__func': [custom_func, None],
    'regressor__fit_intercept': [True, False],
    'regressor__normalize': [True, False]
}

grid_search = GridSearchCV(pipe, param_grid, cv=5)
grid_search.fit(X, y)

print(grid_search.best_params_)
[/PYTHON]
What will be the input of `fit`, given the following output:
[OUTPUT]
```
{
    "best_params_": {
        "transformer__func": "\"<function custom_func>\"",
        "regressor__fit_intercept": true,
        "regressor__normalize": false
    }
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "estimator": XXX,
        "param_grid": XXX,
        "scoring": XXX,
        "n_jobs": XXX,
        "iid": XXX,
        "refit": XXX,
        "cv": XXX,
        "verbose": XXX,
        "pre_dispatch": XXX,
        "error_score": XXX,
        "return_train_score": XXX
    },
    "args": {
        "X": XXX,
        "y": XXX,
        "groups": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "estimator": "Pipeline(steps=[('transformer', FunctionTransformer(func=<function custom_func at 0x7f9c081117b0>)), ('regressor', LinearRegression())])",
        "param_grid": {
            "transformer__func": ["<function custom_func>", null],
            "regressor__fit_intercept": [true, false],
            "regressor__normalize": [true, false]
        },
        "scoring": null,
        "n_jobs": null,
        "iid": true,
        "refit": true,
        "cv": 5,
        "verbose": 0,
        "pre_dispatch": "2*n_jobs",
        "error_score": "raise",
        "return_train_score": false
    },
    "args": {
        "X": XXX,
        "y": XXX,
        "groups": null
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import numpy as np
from sklearn.preprocessing import FunctionTransformer
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV

np.random.seed(0)

X = np.random.normal(size=(100, 3))
y = np.log(np.abs(X[:, 0] + 2 * X[:, 1] ** 2 - 1))

def custom_func(z):
    return np.hstack([z, z ** 2])

pipe = Pipeline([
    ('transformer', FunctionTransformer(custom_func)),
    ('regressor', LinearRegression())
])

param_grid = {
    'transformer__func': [custom_func, None],
    'regressor__fit_intercept': [True, False],
    'regressor__normalize': [True, False]
}

grid_search = GridSearchCV(pipe, param_grid, cv=5)
grid_search.fit(X, y)

print(grid