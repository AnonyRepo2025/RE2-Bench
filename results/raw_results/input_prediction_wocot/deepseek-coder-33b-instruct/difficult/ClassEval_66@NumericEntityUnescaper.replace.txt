
[INPUT]
```
{
    "self": {},
    "args": {
        "string": "&amp;#x41;&amp;#x42;&amp;#x43;"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class NumericEntityUnescaper:

    def __init__(self):
        pass

    def replace(self, string):
        out = []
        pos = 0
        length = len(string)
        while pos < length - 2:
            if string[pos] == '&' and string[pos + 1] == '#':
                start = pos + 2
                is_hex = False
                first_char = string[start]
                if first_char == 'x' or first_char == 'X':
                    start += 1
                    is_hex = True
                if start == length:
                    return ''.join(out)
                end = start
                while end < length and self.is_hex_char(string[end]):
                    end += 1
                if end < length and string[end] == ';':
                    try:
                        entity_value = int(string[start:end], 16 if is_hex else 10)
                    except:
                        return ''.join(out)
                    out.append(chr(entity_value))
                    pos = end + 1
                    continue
            out.append(string[pos])
            pos += 1
        return ''.join(out)

    @staticmethod
    def is_hex_char(char):
        return char.isdigit() or 'a' <= char.lower() <= 'f'
[/PYTHON]

What will be the input of `replace`, given the following output:
[OUTPUT]
```
{
    "output": "ABC"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "string": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]
        
[INPUT]
```
{
    "self": {},
    "args": {
        "string": "&amp;#x41;&amp;#x42;&amp;#x43;"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class NumericEntityUnescaper:

    def __init__(self):
        pass

    def replace(self, string):
        out = []
        pos = 0
        length = len(string)
        while pos < length - 2:
            if string[pos] == '&' and string[pos + 1] == '#':
                start = pos + 2
                is_hex = False
                first_char = string[start]
                if first_char == 'x' or first_char == 'X':
                    start += 1
                    is_hex = True
                if start == length:
                    return ''.join(out)
                end = start
                while end < length and self.is_hex_char(string[end]):
                    end += 1
                if end < length and string[end] == ';':
                    try:
                        entity_value = int(string[start:end], 16 if is_hex else 10)
                    except:
                        return ''.join(out)
                    out.append(chr(entity_value))
                    pos = end + 1
                    continue
            out.append(string[pos])
            pos += 1
        return ''.join(out)

    @staticmethod
    def is_hex_char(char):
        return char.isdigit() or 'a' <= char.lower() <= 'f'
[/PYTHON]

What will be the input of `replace`, given the following output:
[OUTPUT]
```
{
    "output": "ABC"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "string": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]
        
[INPUT]
```
{
    "self": {},
    "args": {
        "string": "&amp;#x41;&amp;#x42;&amp;#x43;"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class NumericEntityUnescaper:

    def __init__(self):
        pass

    def replace(self, string):
        out = []
        pos = 0
        length = len(string)
        while pos < length - 2:
            if string[pos] == '&' and string[pos + 1] == '#':
                start = pos + 2
                is_hex = False
                first_char = string[start]
                if first_char == 'x' or first_char == 'X':
                    start += 1
                    is_hex = True
                if start == length:
                    return ''.join(out)
                end = start
                while end < length and self.is_hex_char(string[end]):
                    end += 1
                if end < length and string[end] == ';':
                    try:
                        entity_value = int(string[start:end], 16 if is_hex else 10)
                    except:
                        return ''.join(out)
                    out.append(chr(entity_value))
                    pos = end + 1
                    continue
            out.append(string[pos])
            pos += 1
        return ''.join(out)

    @staticmethod
    def is_hex_char(char):
        return char.isdigit() or 'a' <= char.lower() <= 'f'
[/PYTHON]

What will be the input of `replace`, given the following output:
[OUTPUT]
```
{
    "output": "ABC"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "string": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]
        
[INPUT]
```
{
    "self": {},
    "args": {
        "string": "&amp;#x41;&amp;#x42;&amp;#x43;"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class NumericEntityUnescaper:

    def __init__(self):
        pass

    def replace(self, string):
        out = []
        pos = 0
        length = len(string)
        while pos < length - 2:
            if string[pos] == '&' and string[pos + 1] == '#':
                start = pos + 2
                is_hex = False
                first_char = string[start]
                if first_char == 'x' or first_char == 'X':
                    start += 1
                    is_hex = True
                if start == length:
                    return ''.join(out)
                end = start
                while end < length and self.is_hex_char(string[end]):
                    end += 1
                if end < length and string[end] == ';':
                    try:
                        entity_value = int(string[start:end], 16 if is_hex else 10)
                    except:
                        return ''.join(out)
                    out.append(chr(entity_value))
                    pos = end + 1
                    continue
            out.append(string[pos])
            pos += 1
        return ''.join(out)

    @staticmethod
    def is_hex_char(char):
        return char.isdigit() or 'a' <= char.lower() <= 'f'
[/PYTHON]

What will be the input of `replace`, given the following output:
[OUTPUT]
```
{
    "output": "ABC"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "string": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]
        
[INPUT]
```
{
    "self": {},
    "args": {
        "