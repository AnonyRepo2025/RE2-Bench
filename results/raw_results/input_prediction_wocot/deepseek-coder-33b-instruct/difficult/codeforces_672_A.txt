
[INPUT]
```
{
    "input": 7
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def find_prime_factors(n):
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors

def find_prime_factors_count(n):
    factors = find_prime_factors(n)
    return len(set(factors))

n = int(input(' '))
print(find_prime_factors_count(n))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 2
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": 10
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def find_prime_factors(n):
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors

def find_prime_factors_count(n):
    factors = find_prime_factors(n)
    return len(set(factors))

n = int(input(' '))
print(find_prime_factors_count(n))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 2
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": 10
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def find_prime_factors(n):
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors

def find_prime_factors_count(n):
    factors = find_prime_factors(n)
    return len(set(factors))

n = int(input(' '))
print(find_prime_factors_count(n))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 2
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": 10
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def find_prime_factors(n):
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors

def find_prime_factors_count(n):
    factors = find_prime_factors(n)
    return len(set(factors))

n = int(input(' '))
print(find_prime_factors_count(n))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 2
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": 10
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def find_prime_factors(n):
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors

def find_prime_factors_count(n):
    factors = find_prime_factors(n)
    return len(set(factors))

n = int(input(' '))
print(find_prime_factors_count(n))
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": 2
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "input": 10
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def find_prime_factors(n):
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors

def find_prime_factors_count(n):
    factors = find_prime_factors(n)
    return len(set(factors))

n = int(input(' '))
print(find_prime_