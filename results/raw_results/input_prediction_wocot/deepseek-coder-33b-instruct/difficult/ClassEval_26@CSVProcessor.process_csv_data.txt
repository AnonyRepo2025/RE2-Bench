
[INPUT]
```
{
    "self": {},
    "args": {
        "N": 0,
        "save_file_name": "data.csv"
    },
    kwargs: {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import json

class JSONProcessor:

    def __init__(self):
        pass

    def read_json(self, file_name):
        with open(file_name, 'r') as file:
            data = json.load(file)
        return data

    def write_json(self, data, file_name):
        with open(file_name, 'w') as file:
            json.dump(data, file)

    def process_json_data(self, key, save_file_name):
        data = self.read_json(save_file_name)
        if key in data:
            data[key] = data[key].upper()
        self.write_json(data, save_file_name.split('.')[0] + '_process.json')
[/PYTHON]

What will be the input of `process_json_data`, given the following output:
[OUTPUT]
```
{
    "output": None
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "key": XXX,
        "save_file_name": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]
        
[INPUT]
```
{
    "self": {},
    "args": {
        "key": "name",
        "save_file_name": "data.json"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Calculator:

    def __init__(self):
        pass

    def add(self, a, b):
        return a + b

    def subtract(self, a, b):
        return a - b

    def multiply(self, a, b):
        return a * b

    def divide(self, a, b):
        if b == 0:
            return "Error: Division by zero is not allowed."
        return a / b
[/PYTHON]

What will be the input of `add`, given the following output:
[OUTPUT]
```
{
    "output": 5
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "a": XXX,
        "b": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]
        
[INPUT]
```
{
    "self": {},
    "args": {
        "a": 2,
        "b": 3
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class StringProcessor:

    def __init__(self):
        pass

    def reverse(self, s):
        return s[::-1]

    def uppercase(self, s):
        return s.upper()

    def lowercase(self, s):
        return s.lower()

    def count_vowels(self, s):
        vowels = 'aeiou'
        return sum(1 for char in s.lower() if char in vowels)
[/PYTHON]

What will be the input of `reverse`, given the following output:
[OUTPUT]
```
{
    "output": "dlrow olleh"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "s": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]
        
[INPUT]
```
{
    "self": {},
    "args": {
        "s": "hello world"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class ListProcessor:

    def __init__(self):
        pass

    def sort_list(self, lst):
        return sorted(lst)

    def reverse_list(self, lst):
        return lst[::-1]

    def sum_list(self, lst):
        return sum(lst)

    def product_list(self, lst):
        product = 1
        for num in lst:
            product *= num
        return product
[/PYTHON]

What will be the input of `sort_list`, given the following output:
[OUTPUT]
```
{
    "output": [1, 2, 3, 4, 5]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "lst": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]
        
[INPUT]
```
{
    "self": {},
    "args": {
        "lst": [5, 3, 1, 4, 2]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class DictionaryProcessor:

    def __init__(self):
        pass

    def get_value(self, d, key):
        return d.get(key)

    def set_value(self, d, key, value):
        d[key] = value
        return d

    def remove_key(self, d, key):
        if key in d:
            del d[key]
        return d

    def count_keys(self, d):
        return len(d)
[/PYTHON]

What will be the input of `get_value`, given the following output:
[OUTPUT]
```
{
    "output": "value2"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "d": XXX,
        "key": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]
        
[INPUT]
```
{
    "self": {},
    "args": {
        "d": {"key1": "value1", "key2": "value2", "key3": "value3"},
        "key": "key2"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class SetProcessor:

    def __init__(self):
        pass

    def add_element(self, s, element):
        s.add(element)
        return s

    def remove_element(self, s, element):
        s.discard(element)
        return s

    def check_element(self, s, element):
        return element in s

    def count_elements(self, s):
        return len(s)
[/PYTHON]

What will be the input of `add_element`, given the following output:
[OUTPUT]
```
{
    "output": {1, 2, 3, 4, 5}
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "s": XXX,
        "element": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]
        
[INPUT]
```
{
    "self": {},
    "args": {
        "s": {1, 2, 3},
        "element": 4
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class TupleProcessor:

    def __init__(self):
        pass

    def get_element(self, t, index):
        return t[index]

    def count_elements(self, t):
        return len(t)

    def sum_elements(self, t):
        return sum(t)

    def product_elements(self, t):
        product = 1
        for num in t:
            product *=