
[INPUT]
```
{
    "self": {
        "numwords": {
            "and": (1, 0),
            "zero": (1, 0),
            "one": (1, 1),
            "two": (1, 2),
            "three": (1, 3),
            "four": (1, 4),
            "five": (1, 5),
            "six": (1, 6),
            "seven": (1, 7),
            "eight": (1, 8),
            "nine": (1, 9),
            "ten": (1, 10),
            "eleven": (1, 11),
            "twelve": (1, 12),
            "thirteen": (1, 13),
            "fourteen": (1, 14),
            "fifteen": (1, 15),
            "sixteen": (1, 16),
            "seventeen": (1, 17),
            "eighteen": (1, 18),
            "nineteen": (1, 19),
            "": (1, 0),
            "twenty": (1, 20),
            "thirty": (1, 30),
            "forty": (1, 40),
            "fifty": (1, 50),
            "sixty": (1, 60),
            "seventy": (1, 70),
            "eighty": (1, 80),
            "ninety": (1, 90),
            "hundred": (100, 0),
            "thousand": (1000, 0),
            "million": (1000000, 0),
            "billion": (1000000000, 0),
            "trillion": (1000000000000, 0)
        },
        "units": ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'],
        "tens": ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'],
        "scales": ['hundred', 'thousand', 'million', 'billion', 'trillion'],
        "ordinal_words": {
            "first": 1,
            "second": 2,
            "third": 3,
            "fifth": 5,
            "eighth": 8,
            "ninth": 9,
            "twelfth": 12
        },
        "ordinal_endings": [('ieth', 'y'), ('th', '')]
    },
    "args": {
        "textnum": "thirty-two"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Words2Numbers:

    def __init__(self):
        self.numwords = {}
        self.units = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']
        self.tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']
        self.scales = ['hundred', 'thousand', 'million', 'billion', 'trillion']
        self.numwords['and'] = (1, 0)
        for idx, word in enumerate(self.units):
            self.numwords[word] = (1, idx)
        for idx, word in enumerate(self.tens):
            self.numwords[word] = (1, idx * 10)
        for idx, word in enumerate(self.scales):
            self.numwords[word] = (10 ** (idx * 3 or 2), 0)
        self.ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}
        self.ordinal_endings = [('ieth', 'y'), ('th', '')]

    def text2int(self, textnum):
        textnum = textnum.replace('-', ' ')
        current = result = 0
        curstring = ''
        onnumber = False
        for word in textnum.split():
            if word in self.ordinal_words:
                scale, increment = (1, self.ordinal_words[word])
                current = current * scale + increment
                onnumber = True
            else:
                for ending, replacement in self.ordinal_endings:
                    if word.endswith(ending):
                        word = '%s%s' % (word[:-len(ending)], replacement)
                if word not in self.numwords:
                    if onnumber:
                        curstring += repr(result + current) + ' '
                    curstring += word + ' '
                    result = current = 0
                    onnumber = False
                else:
                    scale, increment = self.numwords[word]
                    current = current * scale + increment
                    if scale > 100:
                        result += current
                        current = 0
                    onnumber = True
        if onnumber:
            curstring += repr(result + current)
        return curstring
[/PYTHON]

What will be the input of `text2int`, given the following output:
[OUTPUT]
```
{
    "output": "32"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "numwords": {
            "and": XXX,
            "zero": XXX,
            "one": XXX,
            "two": XXX,
            "three": XXX,
            "four": XXX,
            "five": XXX,
            "six": XXX,
            "seven": XXX,
            "eight": XXX,
            "nine": XXX,
            "ten": XXX,
            "eleven": XXX,
            "twelve": XXX,
            "thirteen": XXX,
            "fourteen": XXX,
            "fifteen": XXX,
            "sixteen": XXX,
            "seventeen": XXX,
            "eighteen": XXX,
            "nineteen": XXX,
            "": XXX,
            "twenty": XXX,
            "thirty": XXX,
            "forty": XXX,
            "fifty": XXX,
            "sixty": XXX,
            "seventy": XXX,
            "eighty": XXX,
            "ninety": XXX,
            "hundred": XXX,
            "thousand": XXX,
            "million": XXX,
            "billion": XXX,
            "trillion": XXX
        },
        "units": XXX,
        "tens": XXX,
        "scales": XXX,
        "ordinal_words": {
            "first": XXX,
            "second": XXX,
            "third": XXX,
            "fifth": XXX,
            "eighth": XXX,
            "ninth": XXX,
            "twelfth": XXX
        },
        "ordinal_endings": XXX
    },
    "args": {
        "textnum": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]
        
[INPUT]
```
{
    "self": {
        "numwords": {
            "and": (1, 0),
            "zero": (1, 0),
            "one": (1, 1),
            "two": (1, 2),
            "three": (1, 3),
            "four": (1, 4),
            "five": (1, 5),
            "six": (1, 6),
            "seven