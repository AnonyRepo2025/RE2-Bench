
[INPUT]
```
{
    "self": {
        "kernel": "rbf",
        "gamma": null,
        "coef0": 0.1,
        "degree": 3.1,
        "kernel_params": null,
        "n_components": null,
        "random_state": null,
        "normalization_": null,
        "components_": null,
        "component_indices_": null
    },
    "args": {},
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import numpy as np
from scipy.spatial.distance import cdist

def compute_distances(X, Y=None, metric='euclidean', p=2, V=None, VI=None):
    if metric == 'precomputed':
        X = X.copy()
        np.fill_diagonal(X, 0)
        return X
    else:
        return cdist(X, Y, metric=metric, p=p, V=V, VI=VI)
[/PYTHON]

What will be the input of `compute_distances`, given the following output:
[OUTPUT]
```
{
    "distances": [
        [0.0, 1.4142135623730951, 2.23606797749979, 3.0],
        [1.4142135623730951, 0.0, 1.0, 1.4142135623730951],
        [2.23606797749979, 1.0, 0.0, 1.0],
        [3.0, 1.4142135623730951, 1.0, 0.0]
    ]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "X": XXX,
    "Y": XXX,
    "metric": XXX,
    "p": XXX,
    "V": XXX,
    "VI": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "X": [
        [0, 1],
        [1, 0],
        [2, 0],
        [3, 0]
    ],
    "Y": [
        [0, 0],
        [1, 1],
        [2, 2],
        [3, 3]
    ],
    "metric": "euclidean",
    "p": 2,
    "V": null,
    "VI": null
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
import numpy as np

def compute_covariance(X, Y=None, bias=False, rowvar=True, ddof=None):
    if Y is None:
        Y = X
    X = np.asarray(X)
    Y = np.asarray(Y)
    if X.ndim > 2:
        raise ValueError("X has more than 2 dimensions")
    if Y.ndim > 2:
        raise ValueError("Y has more than 2 dimensions")
    X = X - X.mean(axis=0)
    Y = Y - Y.mean(axis=0)
    n = X.shape[0]
    d = Y.shape[0]
    if ddof is None:
        ddof = 1 if bias else 0
    xy = np.dot(X.T, Y) / (n - ddof)
    return xy
[/PYTHON]

What will be the input of `compute_covariance`, given the following output:
[OUTPUT]
```
{
    "covariance": [
        [0.0, 1.0],
        [1.0, 0.0]
    ]
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "X": XXX,
    "Y": XXX,
    "bias": XXX,
    "rowvar": XXX,
    "ddof": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "X": [
        [0, 1],
        [1, 0],
        [2, 0],
        [3, 0]
    ],
    "Y": [
        [0, 0],
        [1, 1],
        [2, 2],
        [3, 3]
    ],
    "bias": false,
    "rowvar": true,
    "ddof": null
}
```
[/INPUT]
