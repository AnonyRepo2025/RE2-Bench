
[INPUT]
```
{
    "self": {
        "steps": null,
        "memory": null,
        "verbose": false
    },
    "args": {
        "X": null,
        "y": null
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris

iris = load_iris()
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2, random_state=42)

pipe = Pipeline([
    ('scaler', StandardScaler()),
    ('classifier', LogisticRegression())
])

pipe.fit(X_train, y_train)
[/PYTHON]
What will be the input of `fit`, given the following output:
[OUTPUT]
```
{
    "steps": [
        ("scaler", StandardScaler()),
        ("classifier", LogisticRegression())
    ],
    "memory": null,
    "verbose": false
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "steps": XXX,
        "memory": XXX,
        "verbose": XXX
    },
    "args": {
        "X": XXX,
        "y": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "steps": [
            ("scaler", StandardScaler()),
            ("classifier", LogisticRegression())
        ],
        "memory": null,
        "verbose": false
    },
    "args": {
        "X": X_train,
        "y": y_train
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris

iris = load_iris()
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2, random_state=42)

pipe = Pipeline([
    ('scaler', StandardScaler()),
    ('classifier', LogisticRegression())
])

pipe.fit(X_train, y_train)
[/PYTHON]
What will be the input of `fit`, given the following output:
[OUTPUT]
```
{
    "steps": [
        ("scaler", StandardScaler()),
        ("classifier", LogisticRegression())
    ],
    "memory": null,
    "verbose": false
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "steps": XXX,
        "memory": XXX,
        "verbose": XXX
    },
    "args": {
        "X": XXX,
        "y": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "steps": [
            ("scaler", StandardScaler()),
            ("classifier", LogisticRegression())
        ],
        "memory": null,
        "verbose": false
    },
    "args": {
        "X": X_train,
        "y": y_train
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris

iris = load_iris()
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2, random_state=42)

pipe = Pipeline([
    ('scaler', StandardScaler()),
    ('classifier', LogisticRegression())
])

pipe.fit(X_train, y_train)
[/PYTHON]
What will be the input of `fit`, given the following output:
[OUTPUT]
```
{
    "steps": [
        ("scaler", StandardScaler()),
        ("classifier", LogisticRegression())
    ],
    "memory": null,
    "verbose": false
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "steps": XXX,
        "memory": XXX,
        "verbose": XXX
    },
    "args": {
        "X": XXX,
        "y": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "steps": [
            ("scaler", StandardScaler()),
            ("classifier", LogisticRegression())
        ],
        "memory": null,
        "verbose": false
    },
    "args": {
        "X": X_train,
        "y": y_train
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris

iris = load_iris()
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2, random_state=42)

pipe = Pipeline([
    ('scaler', StandardScaler()),
    ('classifier', LogisticRegression())
])

pipe.fit(X_train, y_train)
[/PYTHON]
What will be the input of `fit`, given the following output:
[OUTPUT]
```
{
    "steps": [
        ("scaler", StandardScaler()),
        ("classifier", LogisticRegression())
    ],
    "memory": null,
    "verbose": false
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "steps": XXX,
        "memory": XXX,
        "verbose": XXX
    },
    "args": {
        "X": XXX,
        "y": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "steps": [
            ("scaler", StandardScaler()),
            ("classifier", LogisticRegression())
        ],
        "memory": null,
        "verbose": false
    },
    "args": {
        "X": X_train,
        "y": y_train
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris

iris = load_iris()
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2, random_state=42)

pipe = Pipeline([
    ('scaler', StandardScaler()),
    ('classifier', LogisticRegression())
])

pipe.fit(X_train, y_train)
[/PYTHON]
What will be the input of `fit`, given the following output