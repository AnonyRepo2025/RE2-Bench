
[INPUT]
```
{
    "self": {
        "map": [
            [".", ".", "#", ".", "."],
            [".", ".", "#", ".", "."],
            [".", ".", ".", ".", "."],
            [".", ".", ".", ".", "."],
            [".", ".", ".", ".", "."]
        ],
        "player_row": 0,
        "player_col": 0,
        "targets": [(3, 3)],
        "boxes": [(2, 2)],
        "target_count": 1,
        "is_game_over": false
    },
    "args": {
        "direction": "s"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class CaesarCipher:

    def __init__(self, shift: int = 3):
        self.shift = shift
    @classmethod
    def normalize(cls, text: str) -> str:
        return str(text).replace("\r\n", "\n").replace("\r", "\n")

    @classmethod
    def _alpha_index(cls, ch: str) -> int:
        if "A" <= ch <= "Z":
            return ord(ch) - ord("A")
        if "a" <= ch <= "z":
            return ord(ch) - ord("a")
        return -1

    @classmethod
    def _shift_char(cls, ch: str, k: int) -> str:
        idx = cls._alpha_index(ch)
        if idx == -1:
            return ch  # non-letter unchanged
        base = ord("A") if ch.isupper() else ord("a")
        return chr(base + (idx + k) % 26)

    @classmethod
    def _transform(cls, text: str, k: int) -> str:
        text = cls.normalize(text)
        return "".join(cls._shift_char(c, k) for c in text)


    def encode(self, plaintext: str) -> str:
        return self._transform(plaintext, self.shift)

    def decode(self, ciphertext: str) -> str:
        return self._transform(ciphertext, -self.shift)
[/PYTHON]

What will be the input of `decode`, given the following output:
[OUTPUT]
```
{
    "output": "Hello, World!"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "shift": XXX
    },
    "args": {
        "ciphertext": XXX
    },
    "kwargs": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "shift": 3
    },
    "args": {
        "ciphertext": "Khoor, Zruog!"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class CaesarCipher:

    def __init__(self, shift: int = 3):
        self.shift = shift
    @classmethod
    def normalize(cls, text: str) -> str:
        return str(text).replace("\r\n", "\n").replace("\r", "\n")

    @classmethod
    def _alpha_index(cls, ch: str) -> int:
        if "A" <= ch <= "Z":
            return ord(ch) - ord("A")
        if "a" <= ch <= "z":
            return ord(ch) - ord("a")
        return -1

    @classmethod
    def _shift_char(cls, ch: str, k: int) -> str:
        idx = cls._alpha_index(ch)
        if idx == -1:
            return ch  # non-letter unchanged
        base = ord("A") if ch.isupper() else ord("a")
        return chr(base + (idx + k) % 26)

    @classmethod
    def _transform(cls, text: str, k: int) -> str:
        text = cls.normalize(text)
        return "".join(cls._shift_char(c, k) for c in text)


    def encode(self, plaintext: str) -> str:
        return self._transform(plaintext, self.shift)

    def decode(self, ciphertext: str) -> str:
        return self._transform(ciphertext, -self.shift)
[/PYTHON]

What will be the input of `decode`, given the following output:
[OUTPUT]
```
{
    "output": "Hello, World!"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "shift": XXX
    },
    "args": {
        "ciphertext": XXX
    },
    "kwargs": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "shift": 3
    },
    "args": {
        "ciphertext": "Khoor, Zruog!"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class CaesarCipher:

    def __init__(self, shift: int = 3):
        self.shift = shift
    @classmethod
    def normalize(cls, text: str) -> str:
        return str(text).replace("\r\n", "\n").replace("\r", "\n")

    @classmethod
    def _alpha_index(cls, ch: str) -> int:
        if "A" <= ch <= "Z":
            return ord(ch) - ord("A")
        if "a" <= ch <= "z":
            return ord(ch) - ord("a")
        return -1

    @classmethod
    def _shift_char(cls, ch: str, k: int) -> str:
        idx = cls._alpha_index(ch)
        if idx == -1:
            return ch  # non-letter unchanged
        base = ord("A") if ch.isupper() else ord("a")
        return chr(base + (idx + k) % 26)

    @classmethod
    def _transform(cls, text: str, k: int) -> str:
        text = cls.normalize(text)
        return "".join(cls._shift_char(c, k) for c in text)


    def encode(self, plaintext: str) -> str:
        return self._transform(plaintext, self.shift)

    def decode(self, ciphertext: str) -> str:
        return self._transform(ciphertext, -self.shift)
[/PYTHON]

What will be the input of `decode`, given the following output:
[OUTPUT]
```
{
    "output": "Hello, World!"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "shift": XXX
    },
    "args": {
        "ciphertext": XXX
    },
    "kwargs": XXX
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "shift": 3
    },
    "args": {
        "ciphertext": "Khoor, Zruog!"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class CaesarCipher:

    def __init__(self, shift: int = 3):
        self.shift = shift
    @classmethod
    def normalize(cls, text: str) -> str:
        return str(text).replace("\r\n", "\n").replace("\r", "\n")

    @classmethod
    def _alpha_index(cls, ch: str) -> int:
        if "A" <= ch <= "Z":
            return ord(ch) - ord("A")
        if "a" <= ch <= "z":
            return ord(ch) - ord("a")
        return -1

    @classmethod
    def