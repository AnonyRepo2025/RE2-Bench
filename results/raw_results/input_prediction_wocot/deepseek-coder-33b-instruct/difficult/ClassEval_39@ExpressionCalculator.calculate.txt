
[INPUT]
```
{
    "self": {
        "postfix_stack": [],
        "operat_priority": [0, 3, 2, 1, -1, 1, 0, 2]
    },
    "args": {
        "expression": "1+2"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from typing import List

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0
        min_price = prices[0]
        max_profit = 0
        for price in prices:
            if price < min_price:
                min_price = price
            elif price - min_price > max_profit:
                max_profit = price - min_price
        return max_profit
[/PYTHON]

What will be the input of `maxProfit`, given the following output:
[OUTPUT]
```
{
    "output": 5
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "min_price": XXX,
        "max_profit": XXX
    },
    "args": {
        "prices": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "min_price": 0,
        "max_profit": 0
    },
    "args": {
        "prices": [7, 1, 5, 3, 6, 4]
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {")": "(", "}": "{", "]": "["}
        for char in s:
            if char in mapping:
                top_element = stack.pop() if stack else '#'
                if mapping[char] != top_element:
                    return False
            else:
                stack.append(char)
        return not stack
[/PYTHON]

What will be the input of `isValid`, given the following output:
[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {
        "stack": XXX,
        "mapping": XXX
    },
    "args": {
        "s": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {
        "stack": [],
        "mapping": {"}": "{"}
    },
    "args": {
        "s": "{}"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Solution:
    def isPalindrome(self, s: str) -> bool:
        s = ''.join(c for c in s if c.isalnum()).lower()
        return s == s[::-1]
[/PYTHON]

What will be the input of `isPalindrome`, given the following output:
[OUTPUT]
```
{
    "output": true
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "s": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "s": "A man, a plan, a canal: Panama"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Solution:
    def reverse(self, x: int) -> int:
        sign = [1,-1][x < 0]
        rst = sign*int(str(abs(x))[::-1])
        return rst if -(2**31)-1 < rst < 2**31 else 0
[/PYTHON]

What will be the input of `reverse`, given the following output:
[OUTPUT]
```
{
    "output": 321
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "x": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "x": 123
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if not needle:
            return 0
        for i in range(len(haystack) - len(needle) + 1):
            if haystack[i:i+len(needle)] == needle:
                return i
        return -1
[/PYTHON]

What will be the input of `strStr`, given the following output:
[OUTPUT]
```
{
    "output": 2
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "haystack": XXX,
        "needle": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "haystack": "hello",
        "needle": "ll"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Solution:
    def myAtoi(self, s: str) -> int:
        s = s.strip()
        if not s:
            return 0
        sign = -1 if s[0] == '-' else 1
        if s[0] in ['-', '+']:
            s = s[1:]
        res = 0
        for c in s:
            if not c.isdigit():
                break
            res = res * 10 + int(c)
            if sign * res < -2**31:
                return -2**31
            if sign * res > 2**31 - 1:
                return 2**31 - 1
        return sign * res
[/PYTHON]

What will be the input of `myAtoi`, given the following output:
[OUTPUT]
```
{
    "output": 42
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "s": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "s": "42"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
class Solution:
    def countAndSay(self, n: int) -> str:
        s = '1'
        for _ in range(n - 1):
            s = ''.join(str(len(list(group))) + digit for digit, group in itertools.groupby(s))
        return s
[/PYTHON]

What will be the input of `countAndSay`, given the following output:
[OUTPUT]
```
{
    "output": "11"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "self": {},
    "args": {
        "n": XXX
    },
    "kwargs": {}
}
```
[/STRUCTURE]

[INPUT]
```
{
    "self": {},
    "args": {
        "n": 2
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
