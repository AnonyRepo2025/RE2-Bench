
[INPUT]
```
{
    "self": {
        "with_mean": true,
        "with_std": true,
        "copy": true,
        "mean_": "[ 0.01868038  0.31986845  0.09050502 -0.34261424 -0.19817774  0.35818351\n  0.01853057  0.82382481  1.16002593  0.57012723  0.43907984 -0.36980832\n -0.05883248  0.82968854 -0.93763636 -1.33896996 -1.07073908  0.60929884\n  0.5569363   0.53314091  1.00064233  1.04321559 -0.59718831  0.39323575\n -0.896029    0.20426146 -0.34243614  0.84767828  0.10373766 -0.14658742]",
        "n_samples_seen_": 470,
        "var_": "[ 12.81348472  61.07347467  27.09884917  33.92149029   1.30815904\n  42.18730293  40.01763915  48.31346247  93.80516719  43.75775693\n  19.12419849  25.18927706  47.94745389   2.35977804  43.41067027\n  49.82491216   8.27780818   4.63410526  16.1938749   17.10709424\n  34.21575432  24.48419459 101.58680147   3.5315441    8.88266984\n   5.79741099  41.45687517   9.53556321  25.28985357   9.9230168 ]",
        "scale_": "[ 3.57959281  7.81495199  5.2056555   5.82421585  1.1437478   6.49517536\n  6.32594966  6.95078862  9.68530677  6.61496462  4.37312228  5.01889202\n  6.92441     1.53615691  6.58867743  7.05867637  2.87711803  2.15269721\n  4.02416139  4.13607232  5.84942342  4.94815062 10.0790278   1.8792403\n  2.98038082  2.40778134  6.43870136  3.08797073  5.02890183  3.15008203]"
    },
    "args": {
        "X": "[ 0.01868038  0.31986845  0.09050502 -0.34261424 -0.19817774  0.35818351\n  0.01853057  0.82382481  1.16002593  0.57012723  0.43907984 -0.36980832\n -0.05883248  0.82968854 -0.93763636 -1.33896996 -1.07073908  0.60929884\n  0.5569363   0.53314091  1.00064233  1.04321559 -0.59718831  0.39323575\n -0.896029    0.20426146 -0.34243614  0.84767828  0.10373766 -0.14658742]"
    },
    "kwargs": {}
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
from __future__ import division
from itertools import chain, combinations
import numbers
import warnings
from itertools import combinations_with_replacement as combinations_w_r
from distutils.version import LooseVersion
import numpy as np
from scipy import sparse
from scipy import stats
from ..base import BaseEstimator, TransformerMixin
from ..externals import six
from ..externals.six import string_types
from ..utils import check_array
from ..utils.extmath import row_norms
from ..utils.extmath import _incremental_mean_and_var
from ..utils.fixes import _argmax, nanpercentile
from ..utils.sparsefuncs_fast import inplace_csr_row_normalize_l1, inplace_csr_row_normalize_l2
from ..utils.sparsefuncs import inplace_column_scale, mean_variance_axis, incr_mean_variance_axis, min_max_axis
from ..utils.validation import check_is_fitted, check_random_state, FLOAT_DTYPES
from .label import LabelEncoder
BOUNDS_THRESHOLD = 1e-07
zip = six.moves.zip
map = six.moves.map
range = six.moves.range
__all__ = ['Binarizer', 'KernelCenterer', 'MinMaxScaler', 'MaxAbsScaler', 'Normalizer', 'OneHotEncoder', 'RobustScaler', 'StandardScaler', 'QuantileTransformer', 'PowerTransformer', 'add_dummy_feature', 'binarize', 'normalize', 'scale', 'robust_scale', 'maxabs_scale', 'minmax_scale', 'quantile_transform', 'power_transform']

class StandardScaler(BaseEstimator, TransformerMixin):

    def __init__(self, copy=True, with_mean=True, with_std=True):
        self.with_mean = with_mean
        self.with_std = with_std
        self.copy = copy

    def _reset(self):
        if hasattr(self, 'scale_'):
            del self.scale_
            del self.n_samples_seen_
            del self.mean_
            del self.var_

    def fit(self, X, y=None):
       