[INPUT]
```
{
    "self": {
        "categories": "auto",
        "sparse": "deprecated",
        "sparse_output": true,
        "dtype": {
            "__repr__": "<method-wrapper '__repr__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__hash__": "<method-wrapper '__hash__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__str__": "<method-wrapper '__str__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__lt__": "<method-wrapper '__lt__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__le__": "<method-wrapper '__le__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__eq__": "<method-wrapper '__eq__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__ne__": "<method-wrapper '__ne__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__gt__": "<method-wrapper '__gt__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__ge__": "<method-wrapper '__ge__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__add__": "<method-wrapper '__add__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__radd__": "<method-wrapper '__radd__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__sub__": "<method-wrapper '__sub__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__rsub__": "<method-wrapper '__rsub__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__mul__": "<method-wrapper '__mul__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__rmul__": "<method-wrapper '__rmul__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__mod__": "<method-wrapper '__mod__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__rmod__": "<method-wrapper '__rmod__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__divmod__": "<method-wrapper '__divmod__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__rdivmod__": "<method-wrapper '__rdivmod__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__pow__": "<method-wrapper '__pow__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__rpow__": "<method-wrapper '__rpow__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__neg__": "<method-wrapper '__neg__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__pos__": "<method-wrapper '__pos__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__abs__": "<method-wrapper '__abs__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__bool__": "<method-wrapper '__bool__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__int__": "<method-wrapper '__int__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__float__": "<method-wrapper '__float__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__floordiv__": "<method-wrapper '__floordiv__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__rfloordiv__": "<method-wrapper '__rfloordiv__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__truediv__": "<method-wrapper '__truediv__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__rtruediv__": "<method-wrapper '__rtruediv__' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__new__": "<built-in method __new__ of type object at 0x55b764255220>",
            "as_integer_ratio": "<method-wrapper 'as_integer_ratio' of numpy.dtype[float64] object at 0x7f8374265940>",
            "__doc__": "dtype(obj, align=False, copy=False)\n\nCreate a data type object.\n\nParameters\n----------\nobj\n    Object to be converted to a data type object.\nalign : bool, optional\n    Add padding to the fields to match what a C compiler would output\n    for a similar C-struct. Can be ``True`` only if `obj` is a dictionary\n    or a comma-separated string. If a struct dtype is being created,\n    this also sets a flag indicating that the dtype is aligned.\ncopy : bool, optional\n    Make a new copy of the data-type object. If ``False``, the result\n    may just be a reference to a built-in data-type object.\n\nSee Also\n--------\nresult_type\n\nExamples\n--------\nUsing array-scalar type:\n\n>>> np.dtype(np.int16)\nint16\n\nStructured type, one field name 'f1', containing int16:\n\n>>> np.dtype({'names': ['f1'], 'formats': ['<i2']})\ndtype([('f1', '<i2')])\n\nStructured type, one field named 'f1', in itself containing a structured\n type with one field:\n\n>>> np.dtype({'names': ['f1'],\n...            'formats': [np.dtype({'names': ['f1'], 'formats': ['i1']})]})\ndtype([('f1', [('f1', 'i1')])])\n\nStructured type, two fields: the first field contains an unsigned int, the\n second an int32:\n\n>>> np.dtype([('f1', '<u4'), ('f2', '<i4')])\ndtype([('f1', '<u4'), ('f2', '<i4')])\n\nUsing array-protocol type strings:\n\n>>> np.dtype([('a','f8'),('b','S10')])\ndtype([('a', '<f8'), ('b', 'S10')])\n\nUsing comma-separated field formats.  The shape is (2,3):\n\n>>> np.dtype(\"i4, (2,3)f8\")\ndtype([('f0', '<i4'), ('f1', '<f8', (2, 3))])\n\nUsing tuples.  ``int`` is a fixed type, 3 the field's shape.  ``void``\n is a flexible type, here of size 10:\n\n>>> np.dtype([('hello',(int,3)),('world',np.void,10)])\ndtype([('hello', '<i8', (3,)), ('world', 'V10')])"
        },
        "handle_unknown": "error",
        "drop": null,
        "min_frequency": null,
        "max_categories": null,
        "feature_name_combiner": "concat",
        "_infrequent_enabled": false,
        "n_features_in_": 2,
        "categories_": [
            array(["apple", "banana", "orange"], dtype=object),
            array(["red", "green", "blue"], dtype=object)
        ]
    },
    "args": {
        "feature_idx": 1,
        "drop_idx": 1
    },
    "kwargs": {}
}
```
[/INPUT]
