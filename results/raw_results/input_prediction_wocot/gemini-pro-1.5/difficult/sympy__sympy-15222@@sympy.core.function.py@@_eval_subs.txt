[INPUT]
```
{
    "self": {
        "nargs": {}
    },
    "args": {
        "old": {
            "_extra_kwargs": {},
            "__module__": "sympy.core.symbol",
            "__doc__": "Symbol is a placeholder for variable or unknown value.\n\n    It is the most basic SymPy object and the only object that can be\n    assigned to a variable to create a symbolic representation of that\n    variable.  That is, when a variable is assigned to a Symbol, it's\n    no longer a Python variable, but a symbolic representation of a\n    variable.\n\n    A Symbol has a name, which is used for printing and representing it\n    in various ways.  The name is a string and it must be a valid Python\n    identifier.  A Symbol also has assumptions associated with it.\n    Assumptions are things like whether the Symbol represents a positive\n    number, a real number, a complex number, etc.  Assumptions are stored\n    as a dictionary mapping assumption keys to boolean values.  The\n    assumptions dictionary is copied when a Symbol is created so that\n    mutating the assumptions dictionary of one Symbol won't affect any\n    other Symbol.\n\n    For instance, to create a Symbol named x that represents a positive\n    real number, one would use::\n\n        >>> from sympy import Symbol\n        >>> x = Symbol('x', positive=True, real=True)\n        >>> x\n        x\n\n    If a Symbol is going to be used in mathematical expressions, it's\n    recommended to create it once and save it.  This way, there is only\n    one Symbol object to represent that variable.  For example::\n\n        >>> from sympy import sin\n        >>> x = Symbol('x')\n        >>> y = Symbol('x')\n        >>> x == y\n        False\n        >>> x + y\n        2*x\n        >>> z = x\n        >>> x == z\n        True\n        >>> sin(x) + sin(x)\n        2*sin(x)\n        >>> sin(x) + sin(y)\n        sin(x) + sin(y)\n\n    If a Symbol is only used in one place, it's possible to create a\n    temporary Symbol using the Dummy class.  Dummy symbols have a random\n    name so that they will not clash with other Symbols.  Dummy symbols\n    are useful for things like substitutions and temporary variables.\n\n    See Also\n    ========\n\n    Dummy\n    sympy.core.assumptions.Assumptions\n    ",
            "_nargs": null,
            "_explicit_class_assumptions": {},
            "default_assumptions": {
                "_generator": {}
            },
            "_prop_handler": {
                "positive": {},
                "commutative": {},
                "complex": {},
                "negative": {}
            }
        },
        "new": {
            "nargs": {
                "_elements": [
                    1,
                    2
                ]
            }
        }
    },
    "kwargs": {}
}
```
[/INPUT]
