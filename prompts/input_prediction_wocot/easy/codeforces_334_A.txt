You are given a Python code snippet (between [PYTHON] and [/PYTHON]). For this piece of code, I want you to take the provided output (between [OUTPUT] and [\OUTPUT]) and predict the input of the function. Both input and output are presented in a JSON format. The input structure is defined between [STRUCTURE] and [\STRUCTURE]. You only need to predict input variable values to fill out placeholders XXX in the structure, and print input between [INPUT] and [\INPUT]. You should maintain the structure when printing inputs. Do not change anything else. ONLY print the input, DO NOT print any reasoning process. 
[EXAMPLE]
[PYTHON]
from inspect import cleandoc
import re
from email.parser import HeaderParser
from email.errors import HeaderParseError

docstring = input()
if not docstring:
    print(' \t ')
docstring = cleandoc(docstring)
parts = re.split(r'\n{2,}', docstring)
title = parts[0]
if len(parts) == 1:
    body = ''
    metadata = {}
else:
    parser = HeaderParser()
    try:
        metadata = parser.parsestr(parts[-1])
    except HeaderParseError:
        metadata = {}
        body = "\n\n".join(parts[1:])
    else:
        metadata = dict(metadata.items())
        if metadata:
            body = "\n\n".join(parts[1:-1])
        else:
            body = "\n\n".join(parts[1:])
if metadata:
    print(f"title\t\tbody")
else:
    print(f"title\tbody")
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": "firstline\tsecond line"
}
```
[/OUTPUT]

[INPUT]
```
{
    "input": "firstline\n\nsecond line"
}
```
[/INPUT]
[/EXAMPLE]
[PYTHON]
n = int(input())
i, j = (1, n * n)
while i < j:
    print(i, j)
    i += 1
    j -= 1
[/PYTHON]

What will be the input of the code snippet, given the following output:
[OUTPUT]
```
{
    "output": "1 100\n2 99\n3 98\n4 97\n5 96\n6 95\n7 94\n8 93\n9 92\n10 91\n11 90\n12 89\n13 88\n14 87\n15 86\n16 85\n17 84\n18 83\n19 82\n20 81\n21 80\n22 79\n23 78\n24 77\n25 76\n26 75\n27 74\n28 73\n29 72\n30 71\n31 70\n32 69\n33 68\n34 67\n35 66\n36 65\n37 64\n38 63\n39 62\n40 61\n41 60\n42 59\n43 58\n44 57\n45 56\n46 55\n47 54\n48 53\n49 52\n50 51"
}
```
[/OUTPUT]

[STRUCTURE]
```
{
    "input": XXX
}
```
[/STRUCTURE]
