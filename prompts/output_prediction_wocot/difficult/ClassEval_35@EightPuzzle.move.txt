You are given a Python function (between [PYTHON] and [/PYTHON]). For this function, I want you to take the provided inputs (between [INPUT] and [\INPUT]) and predict the output of the function. Both input and output are presented in a JSON format. The output structure is defined between [STRUCTURE] and [\STRUCTURE]. You only need to predict output variable values to fill out placeholders XXX in the structure, and print output between [OUTPUT] and [\OUTPUT]. You should maintain the structure when printing output. Do not change anything else. ONLY print the output, DO NOT print any reasoning process.

[PYTHON]
from typing import Iterable

class CaesarCipher:

    def __init__(self, shift: int = 3):
        self.shift = shift
    
    @classmethod
    def normalize(cls, text: str) -> str:
        return str(text).replace("\r\n", "\n").replace("\r", "\n")

    @classmethod
    def _alpha_index(cls, ch: str) -> int:
        if "A" <= ch <= "Z":
            return ord(ch) - ord("A")
        if "a" <= ch <= "z":
            return ord(ch) - ord("a")
        return -1

    @classmethod
    def _shift_char(cls, ch: str, k: int) -> str:
        idx = cls._alpha_index(ch)
        if idx == -1:
            return ch  # non-letter unchanged
        base = ord("A") if ch.isupper() else ord("a")
        return chr(base + (idx + k) % 26)

    @classmethod
    def _transform(cls, text: str, k: int) -> str:
        text = cls.normalize(text)
        return "".join(cls._shift_char(c, k) for c in text)

    def encode(self, plaintext: str) -> str:
        return self._transform(plaintext, self.shift)

    def decode(self, ciphertext: str) -> str:
        return self._transform(ciphertext, -self.shift)
[/PYTHON]

What will be the output of `encode`, given the following input:
[INPUT]
```
{
    "self": {
        "shift": 5
    },
    "args": {
        "plaintext": "Hello, World!"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{ 
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "Mjqqt, Btwqi!"
}
```
[/OUTPUT]

[PYTHON]
class EightPuzzle:

    def __init__(self, initial_state):
        self.initial_state = initial_state
        self.goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

    def find_blank(self, state):
        for i in range(3):
            for j in range(3):
                if state[i][j] == 0:
                    return (i, j)

    def move(self, state, direction):
        i, j = self.find_blank(state)
        new_state = [row[:] for row in state]
        if direction == 'up':
            new_state[i][j], new_state[i - 1][j] = (new_state[i - 1][j], new_state[i][j])
        elif direction == 'down':
            new_state[i][j], new_state[i + 1][j] = (new_state[i + 1][j], new_state[i][j])
        elif direction == 'left':
            new_state[i][j], new_state[i][j - 1] = (new_state[i][j - 1], new_state[i][j])
        elif direction == 'right':
            new_state[i][j], new_state[i][j + 1] = (new_state[i][j + 1], new_state[i][j])
        return new_state
[/PYTHON]

What will be the output of `move`, given the following input:
[INPUT]
```
{
    "self": {
        "initial_state": [
            [
                1,
                2,
                3
            ],
            [
                0,
                4,
                5
            ],
            [
                6,
                7,
                8
            ]
        ],
        "goal_state": [
            [
                1,
                2,
                3
            ],
            [
                4,
                5,
                6
            ],
            [
                7,
                8,
                0
            ]
        ]
    },
    "args": {
        "state": [
            [
                1,
                6,
                2
            ],
            [
                7,
                8,
                0
            ],
            [
                4,
                5,
                3
            ]
        ],
        "direction": "left"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]
        