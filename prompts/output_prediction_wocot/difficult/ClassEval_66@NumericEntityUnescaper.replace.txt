You are given a Python function (between [PYTHON] and [/PYTHON]). For this function, I want you to take the provided inputs (between [INPUT] and [\INPUT]) and predict the output of the function. Both input and output are presented in a JSON format. The output structure is defined between [STRUCTURE] and [\STRUCTURE]. You only need to predict output variable values to fill out placeholders XXX in the structure, and print output between [OUTPUT] and [\OUTPUT]. You should maintain the structure when printing output. Do not change anything else. ONLY print the output, DO NOT print any reasoning process.

[PYTHON]
from typing import Iterable

class CaesarCipher:

    def __init__(self, shift: int = 3):
        self.shift = shift
    
    @classmethod
    def normalize(cls, text: str) -> str:
        return str(text).replace("\r\n", "\n").replace("\r", "\n")

    @classmethod
    def _alpha_index(cls, ch: str) -> int:
        if "A" <= ch <= "Z":
            return ord(ch) - ord("A")
        if "a" <= ch <= "z":
            return ord(ch) - ord("a")
        return -1

    @classmethod
    def _shift_char(cls, ch: str, k: int) -> str:
        idx = cls._alpha_index(ch)
        if idx == -1:
            return ch  # non-letter unchanged
        base = ord("A") if ch.isupper() else ord("a")
        return chr(base + (idx + k) % 26)

    @classmethod
    def _transform(cls, text: str, k: int) -> str:
        text = cls.normalize(text)
        return "".join(cls._shift_char(c, k) for c in text)

    def encode(self, plaintext: str) -> str:
        return self._transform(plaintext, self.shift)

    def decode(self, ciphertext: str) -> str:
        return self._transform(ciphertext, -self.shift)
[/PYTHON]

What will be the output of `encode`, given the following input:
[INPUT]
```
{
    "self": {
        "shift": 5
    },
    "args": {
        "plaintext": "Hello, World!"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{ 
    "output": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "output": "Mjqqt, Btwqi!"
}
```
[/OUTPUT]

[PYTHON]
class NumericEntityUnescaper:

    def __init__(self):
        pass

    def replace(self, string):
        out = []
        pos = 0
        length = len(string)
        while pos < length - 2:
            if string[pos] == '&' and string[pos + 1] == '#':
                start = pos + 2
                is_hex = False
                first_char = string[start]
                if first_char == 'x' or first_char == 'X':
                    start += 1
                    is_hex = True
                if start == length:
                    return ''.join(out)
                end = start
                while end < length and self.is_hex_char(string[end]):
                    end += 1
                if end < length and string[end] == ';':
                    try:
                        entity_value = int(string[start:end], 16 if is_hex else 10)
                    except:
                        return ''.join(out)
                    out.append(chr(entity_value))
                    pos = end + 1
                    continue
            out.append(string[pos])
            pos += 1
        return ''.join(out)

    @staticmethod
    def is_hex_char(char):
        return char.isdigit() or 'a' <= char.lower() <= 'f'
[/PYTHON]

What will be the output of `replace`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "string": "&#65;&#66;&#67;"
    },
    "kwargs": {}
}
```
[/INPUT]

[STRUCTURE]
```
{
    "output": XXX        
}
```
[/STRUCTURE]
        