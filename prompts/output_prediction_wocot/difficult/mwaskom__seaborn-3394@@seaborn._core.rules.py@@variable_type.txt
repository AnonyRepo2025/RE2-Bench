You are given a Python function (between [PYTHON] and [/PYTHON]). For this function, I want you to take the provided inputs (between [INPUT] and [\INPUT]) and predict the output of the function. Both input and output are presented in a JSON format. The output structure is defined between [STRUCTURE] and [\STRUCTURE]. You only need to predict output variable values to fill out placeholders XXX in the structure, and print output between [OUTPUT] and [\OUTPUT]. You should maintain the structure when printing output. Do not change anything else. ONLY print the output, DO NOT print any reasoning process.
[EXAMPLE]
[PYTHON]
class TempPathFactory(object):
    _given_basetemp = attr.ib(
        converter=attr.converters.optional(
            lambda p: Path(os.path.abspath(six.text_type(p)))
        )
    )
    _trace = attr.ib()
    _basetemp = attr.ib(default=None)

    def mktemp(self, basename, numbered=True):
        if not numbered:
            p = self.getbasetemp().joinpath(basename)
            p.mkdir()
        else:
            p = make_numbered_dir(root=self.getbasetemp(), prefix=basename)
            self._trace("mktemp", p)
        return p

    def getbasetemp(self):
        if self._basetemp is not None:
            return self._basetemp

        if self._given_basetemp is not None:
            basetemp = self._given_basetemp
            ensure_reset_dir(basetemp)
            basetemp = basetemp.resolve()
        else:
            from_env = os.environ.get("PYTEST_DEBUG_TEMPROOT")
            temproot = Path(from_env or tempfile.gettempdir()).resolve()
            user = get_user() or "unknown"
            rootdir = temproot.joinpath("pytest-of-{}".format(user))
            rootdir.mkdir(exist_ok=True)
            basetemp = make_numbered_dir_with_cleanup(
                prefix="pytest-", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT
            )
        assert basetemp is not None, basetemp
        self._basetemp = t = basetemp
        self._trace("new basetemp", t)
        return t
[/PYTHON]

Functions called during the execution:
[PYTHON]
def parse_num(maybe_num):
    try:
        return int(maybe_num)
    except ValueError:
        return -1

def extract_suffixes(iter, prefix):
    p_len = len(prefix)
    for p in iter:
        yield p.name[p_len:]


def find_suffixes(root, prefix):
    return extract_suffixes(find_prefixed(root, prefix), prefix)

def make_numbered_dir(root, prefix):
    for i in range(10):
        # try up to 10 times to create the folder
        max_existing = _max(map(parse_num, find_suffixes(root, prefix)), default=-1)
        new_number = max_existing + 1
        new_path = root.joinpath("{}{}".format(prefix, new_number))
        try:
            new_path.mkdir()
        except Exception:
            pass
        else:
            _force_symlink(root, prefix + "current", new_path)
            return new_path
    else:
        raise EnvironmentError(
            "could not create numbered dir with prefix "
            "{prefix} in {root} after 10 tries".format(prefix=prefix, root=root)
        )

[/PYTHON]

What will be the output of `mktemp`, given the following input:
[INPUT]
{
    "self": {
        "_tmppath_factory": {
            "_given_basetemp": "/tmp/pytest-of-root/pytest-0/test_mktemp0",
            "_trace": {},
            "_basetemp": null
        }
    },
    "args": {
        "basename": "world"
    },
    "kwargs": {}
}
[/INPUT]

[STRUCTURE]
```
{ 
    "strpath": XXX
}
```
[/STRUCTURE]

[OUTPUT]
```
{
    "strpath": "/tmp/pytest-of-root/pytest-0/test_mktemp0/world0"
}
```
[/OUTPUT]
[/EXAMPLE]
[PYTHON]
from __future__ import annotations
import warnings
from collections import UserString
from numbers import Number
from datetime import datetime
import numpy as np
import pandas as pd
from typing import TYPE_CHECKING
from typing import Literal
from pandas import Series

def variable_type(vector: Series, boolean_type: Literal['numeric', 'categorical', 'boolean']='numeric', strict_boolean: bool=False) -> VarType:
    if isinstance(getattr(vector, 'dtype', None), pd.CategoricalDtype):
        return VarType('categorical')
    if pd.isna(vector).all():
        return VarType('numeric')
    vector = vector.dropna()
    with warnings.catch_warnings():
        warnings.simplefilter(action='ignore', category=(FutureWarning, DeprecationWarning))
        if strict_boolean:
            if isinstance(vector.dtype, pd.core.dtypes.base.ExtensionDtype):
                boolean_dtypes = ['bool', 'boolean']
            else:
                boolean_dtypes = ['bool']
            boolean_vector = vector.dtype in boolean_dtypes
        else:
            boolean_vector = bool(np.isin(vector, [0, 1]).all())
        if boolean_vector:
            return VarType(boolean_type)
    if pd.api.types.is_numeric_dtype(vector):
        return VarType('numeric')
    if pd.api.types.is_datetime64_dtype(vector):
        return VarType('datetime')

    def all_numeric(x):
        for x_i in x:
            if not isinstance(x_i, Number):
                return False
        return True
    if all_numeric(vector):
        return VarType('numeric')

    def all_datetime(x):
        for x_i in x:
            if not isinstance(x_i, (datetime, np.datetime64)):
                return False
        return True
    if all_datetime(vector):
        return VarType('datetime')
    return VarType('categorical')
[/PYTHON]

What will be the output of `variable_type`, given the following input:
[INPUT]
```
{
    "self": {},
    "args": {
        "vector": {
            "_is_copy": null,
            "_mgr": {
                "axes": null,
                "blocks": [
                    {}
                ]
            },
            "_item_cache": {},
            "_attrs": {},
            "_flags": {
                "_allows_duplicate_labels": true
            },
            "_name": null
        }
    },
    "kwargs": {
        "boolean_type": "boolean"
    }
}
```
[/INPUT]

[STRUCTURE]
```
{
    "data": XXX
}
```
[/STRUCTURE]
