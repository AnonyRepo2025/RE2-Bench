{
    ".lib.matplotlib.__init__.py@@_rc_params_in_file": "def _rc_params_in_file(fname, transform=lambda x: x, fail_on_error=False):\n    import matplotlib as mpl\n    rc_temp = {}\n    with _open_file_or_url(fname) as fd:\n        try:\n            for line_no, line in enumerate(fd, 1):\n                line = transform(line)\n                strippedline = cbook._strip_comment(line)\n                if not strippedline:\n                    continue\n                tup = strippedline.split(':', 1)\n                if len(tup) != 2:\n                    _log.warning('Missing colon in file %r, line %d (%r)', fname, line_no, line.rstrip('\\n'))\n                    continue\n                key, val = tup\n                key = key.strip()\n                val = val.strip()\n                if val.startswith('\"') and val.endswith('\"'):\n                    val = val[1:-1]\n                if key in rc_temp:\n                    _log.warning('Duplicate key in file %r, line %d (%r)', fname, line_no, line.rstrip('\\n'))\n                rc_temp[key] = (val, line, line_no)\n        except UnicodeDecodeError:\n            _log.warning('Cannot decode configuration file %r as utf-8.', fname)\n            raise\n    config = RcParams()\n    for key, (val, line, line_no) in rc_temp.items():\n        if key in rcsetup._validators:\n            if fail_on_error:\n                config[key] = val\n            else:\n                try:\n                    config[key] = val\n                except Exception as msg:\n                    _log.warning('Bad value in file %r, line %d (%r): %s', fname, line_no, line.rstrip('\\n'), msg)\n        elif key in _deprecated_ignore_map:\n            version, alt_key = _deprecated_ignore_map[key]\n            _api.warn_deprecated(version, name=key, alternative=alt_key, obj_type='rcparam', addendum='Please update your matplotlibrc.')\n        else:\n            version = 'main' if '.post' in mpl.__version__ else f'v{mpl.__version__}'\n            _log.warning('\\nBad key %(key)s in file %(fname)s, line %(line_no)s (%(line)r)\\nYou probably need to get an updated matplotlibrc file from\\nhttps://github.com/matplotlib/matplotlib/blob/%(version)s/matplotlibrc.template\\nor from the matplotlib source distribution', dict(key=key, fname=fname, line_no=line_no, line=line.rstrip('\\n'), version=version))\n    return config",
    ".lib.matplotlib.__init__.py@@_open_file_or_url": "def _open_file_or_url(fname):\n    if isinstance(fname, str) and fname.startswith(('http://', 'https://', 'ftp://', 'file:')):\n        import urllib.request\n        ssl_ctx = _get_ssl_context()\n        if ssl_ctx is None:\n            _log.debug('Could not get certifi ssl context, https may not work.')\n        with urllib.request.urlopen(fname, context=ssl_ctx) as f:\n            yield (line.decode('utf-8') for line in f)\n    else:\n        fname = os.path.expanduser(fname)\n        with open(fname, encoding='utf-8') as f:\n            yield f",
    ".lib.matplotlib.cbook.__init__.py@@_strip_comment": "def _strip_comment(s):\n    pos = 0\n    while True:\n        quote_pos = s.find('\"', pos)\n        hash_pos = s.find('#', pos)\n        if quote_pos < 0:\n            without_comment = s if hash_pos < 0 else s[:hash_pos]\n            return without_comment.strip()\n        elif 0 <= hash_pos < quote_pos:\n            return s[:hash_pos].strip()\n        else:\n            closing_quote_pos = s.find('\"', quote_pos + 1)\n            if closing_quote_pos < 0:\n                raise ValueError(f'Missing closing quote in: {s!r}. If you need a double-quote inside a string, use escaping: e.g. \"the \" char\"')\n            pos = closing_quote_pos + 1",
    ".lib.matplotlib.__init__.py@@RcParams.__init__": "def __init__(self, *args, **kwargs):\n    self.update(*args, **kwargs)",
    ".lib.matplotlib._api.__init__.py@@__getattr__": "def __getattr__(name):\n    if name in props:\n        return props[name].__get__(instance)\n    raise AttributeError(f'module {cls.__module__!r} has no attribute {name!r}')",
    ".lib.matplotlib.__init__.py@@_get_version": "def _get_version():\n    root = Path(__file__).resolve().parents[2]\n    if (root / '.matplotlib-repo').exists() and (root / '.git').exists() and (not (root / '.git/shallow').exists()):\n        import setuptools_scm\n        return setuptools_scm.get_version(root=root, version_scheme='release-branch-semver', local_scheme='node-and-date', fallback_version=_version.version)\n    else:\n        return _version.version",
    ".lib.matplotlib.__init__.py@@RcParams.__setitem__": "def __setitem__(self, key, val):\n    try:\n        if key in _deprecated_map:\n            version, alt_key, alt_val, inverse_alt = _deprecated_map[key]\n            _api.warn_deprecated(version, name=key, obj_type='rcparam', alternative=alt_key)\n            key = alt_key\n            val = alt_val(val)\n        elif key in _deprecated_remain_as_none and val is not None:\n            version, = _deprecated_remain_as_none[key]\n            _api.warn_deprecated(version, name=key, obj_type='rcparam')\n        elif key in _deprecated_ignore_map:\n            version, alt_key = _deprecated_ignore_map[key]\n            _api.warn_deprecated(version, name=key, obj_type='rcparam', alternative=alt_key)\n            return\n        elif key == 'backend':\n            if val is rcsetup._auto_backend_sentinel:\n                if 'backend' in self:\n                    return\n        try:\n            cval = self.validate[key](val)\n        except ValueError as ve:\n            raise ValueError(f'Key {key}: {ve}') from None\n        dict.__setitem__(self, key, cval)\n    except KeyError as err:\n        raise KeyError(f'{key} is not a valid rc parameter (see rcParams.keys() for a list of valid parameters)') from err",
    ".lib.matplotlib.rcsetup.py@@_validate_cmap": "def _validate_cmap(s):\n    _api.check_isinstance((str, Colormap), cmap=s)\n    return s",
    ".lib.matplotlib._api.__init__.py@@check_isinstance": "def check_isinstance(_types, **kwargs):\n    types = _types\n    none_type = type(None)\n    types = (types,) if isinstance(types, type) else (none_type,) if types is None else tuple((none_type if tp is None else tp for tp in types))\n\n    def type_name(tp):\n        return 'None' if tp is none_type else tp.__qualname__ if tp.__module__ == 'builtins' else f'{tp.__module__}.{tp.__qualname__}'\n    for k, v in kwargs.items():\n        if not isinstance(v, types):\n            names = [*map(type_name, types)]\n            if 'None' in names:\n                names.remove('None')\n                names.append('None')\n            raise TypeError('{!r} must be an instance of {}, not a {}'.format(k, ', '.join(names[:-1]) + ' or ' + names[-1] if len(names) > 1 else names[0], type_name(type(v))))"
}