{
    ".xarray.core.dataarray.py@@DataArray.variable": "def variable(self) -> Variable:\n    return self._variable",
    ".xarray.core.utils.py@@is_duck_array": "def is_duck_array(value: Any) -> bool:\n    if isinstance(value, np.ndarray):\n        return True\n    return hasattr(value, 'ndim') and hasattr(value, 'shape') and hasattr(value, 'dtype') and (hasattr(value, '__array_function__') and hasattr(value, '__array_ufunc__') or hasattr(value, '__array_namespace__'))",
    ".xarray.core.utils.py@@NdimSizeLenMixin.ndim": "def ndim(self: Any) -> int:\n    return len(self.shape)",
    ".xarray.core.utils.py@@NDArrayMixin.shape": "def shape(self: Any) -> tuple[int, ...]:\n    return self.array.shape",
    ".xarray.core.indexing.py@@LazilyIndexedArray.shape": "def shape(self) -> tuple[int, ...]:\n    shape = []\n    for size, k in zip(self.array.shape, self.key.tuple):\n        if isinstance(k, slice):\n            shape.append(len(range(*k.indices(size))))\n        elif isinstance(k, np.ndarray):\n            shape.append(k.size)\n    return tuple(shape)",
    ".xarray.core.indexing.py@@ExplicitIndexer.tuple": "def tuple(self):\n    return self._key",
    ".xarray.core.utils.py@@NDArrayMixin.dtype": "def dtype(self: Any) -> np.dtype:\n    return self.array.dtype",
    ".xarray.core.dataarray.py@@DataArray._in_memory": "def _in_memory(self) -> bool:\n    return self.variable._in_memory",
    ".xarray.core.variable.py@@Variable._in_memory": "def _in_memory(self):\n    return isinstance(self._data, (np.ndarray, np.number, PandasIndexingAdapter)) or (isinstance(self._data, indexing.MemoryCachedArray) and isinstance(self._data.array, indexing.NumpyIndexingAdapter))"
}