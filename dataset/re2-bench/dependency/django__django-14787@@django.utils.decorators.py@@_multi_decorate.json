{
    ".django.utils.decorators.py@@_update_method_wrapper": "def _update_method_wrapper(_wrapper, decorator):\n\n    @decorator\n    def dummy(*args, **kwargs):\n        pass\n    update_wrapper(_wrapper, dummy)",
    ".django.utils.decorators.py@@_decorator": "def _decorator(view_func):\n    middleware = middleware_class(view_func, *m_args, **m_kwargs)\n\n    @wraps(view_func)\n    def _wrapped_view(request, *args, **kwargs):\n        if hasattr(middleware, 'process_request'):\n            result = middleware.process_request(request)\n            if result is not None:\n                return result\n        if hasattr(middleware, 'process_view'):\n            result = middleware.process_view(request, view_func, args, kwargs)\n            if result is not None:\n                return result\n        try:\n            response = view_func(request, *args, **kwargs)\n        except Exception as e:\n            if hasattr(middleware, 'process_exception'):\n                result = middleware.process_exception(request, e)\n                if result is not None:\n                    return result\n            raise\n        if hasattr(response, 'render') and callable(response.render):\n            if hasattr(middleware, 'process_template_response'):\n                response = middleware.process_template_response(request, response)\n            if hasattr(middleware, 'process_response'):\n\n                def callback(response):\n                    return middleware.process_response(request, response)\n                response.add_post_render_callback(callback)\n        elif hasattr(middleware, 'process_response'):\n            return middleware.process_response(request, response)\n        return response\n    return _wrapped_view",
    ".django.utils.deprecation.py@@MiddlewareMixin.__init__": "def __init__(self, get_response):\n    if get_response is None:\n        raise ValueError('get_response must be provided.')\n    self.get_response = get_response\n    self._async_check()\n    super().__init__()",
    ".django.utils.deprecation.py@@MiddlewareMixin._async_check": "def _async_check(self):\n    if asyncio.iscoroutinefunction(self.get_response):\n        self._is_coroutine = asyncio.coroutines._is_coroutine",
    ".django.views.decorators.cache.py@@never_cache": "def never_cache(view_func):\n\n    @wraps(view_func)\n    def _wrapped_view_func(request, *args, **kwargs):\n        if not isinstance(request, HttpRequest):\n            raise TypeError(\"never_cache didn't receive an HttpRequest. If you are decorating a classmethod, be sure to use @method_decorator.\")\n        response = view_func(request, *args, **kwargs)\n        add_never_cache_headers(response)\n        return response\n    return _wrapped_view_func"
}