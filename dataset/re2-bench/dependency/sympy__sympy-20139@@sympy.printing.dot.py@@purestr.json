{
    ".sympy.core.basic.py@@Basic.args": "def args(self):\n    return self._args",
    ".sympy.printing.printer.py@@_PrintFunction.__call__": "def __call__(self, *args, **kwargs):\n    return self.__wrapped__(*args, **kwargs)",
    ".sympy.printing.repr.py@@srepr": "def srepr(expr, **settings):\n    return ReprPrinter(settings).doprint(expr)",
    ".sympy.printing.printer.py@@Printer.__init__": "def __init__(self, settings=None):\n    self._str = str\n    self._settings = self._get_initial_settings()\n    self._context = dict()\n    if settings is not None:\n        self._settings.update(settings)\n        if len(self._settings) > len(self._default_settings):\n            for key in self._settings:\n                if key not in self._default_settings:\n                    raise TypeError(\"Unknown setting '%s'.\" % key)\n    self._print_level = 0",
    ".sympy.printing.printer.py@@Printer._get_initial_settings": "def _get_initial_settings(cls):\n    settings = cls._default_settings.copy()\n    for key, val in cls._global_settings.items():\n        if key in cls._default_settings:\n            settings[key] = val\n    return settings",
    ".sympy.printing.printer.py@@Printer.doprint": "def doprint(self, expr):\n    return self._str(self._print(expr))",
    ".sympy.printing.printer.py@@Printer._print": "def _print(self, expr, **kwargs):\n    self._print_level += 1\n    try:\n        if self.printmethod and hasattr(expr, self.printmethod) and (not isinstance(expr, BasicMeta)):\n            return getattr(expr, self.printmethod)(self, **kwargs)\n        classes = type(expr).__mro__\n        if AppliedUndef in classes:\n            classes = classes[classes.index(AppliedUndef):]\n        if UndefinedFunction in classes:\n            classes = classes[classes.index(UndefinedFunction):]\n        if Function in classes:\n            i = classes.index(Function)\n            classes = tuple((c for c in classes[:i] if c.__name__ == classes[0].__name__ or c.__name__.endswith('Base'))) + classes[i:]\n        for cls in classes:\n            printmethod = '_print_' + cls.__name__\n            if hasattr(self, printmethod):\n                return getattr(self, printmethod)(expr, **kwargs)\n        return self.emptyPrinter(expr)\n    finally:\n        self._print_level -= 1",
    ".sympy.printing.repr.py@@ReprPrinter._print_Symbol": "def _print_Symbol(self, expr):\n    d = expr._assumptions.generator\n    if expr.is_Dummy:\n        d['dummy_index'] = expr.dummy_index\n    if d == {}:\n        return '%s(%s)' % (expr.__class__.__name__, self._print(expr.name))\n    else:\n        attr = ['%s=%s' % (k, v) for k, v in d.items()]\n        return '%s(%s, %s)' % (expr.__class__.__name__, self._print(expr.name), ', '.join(attr))",
    ".sympy.core.assumptions.py@@StdFactKB.generator": "def generator(self):\n    return self._generator.copy()",
    ".sympy.printing.repr.py@@ReprPrinter._print_str": "def _print_str(self, expr):\n    return repr(expr)",
    ".sympy.printing.repr.py@@ReprPrinter._print_Float": "def _print_Float(self, expr):\n    r = mlib_to_str(expr._mpf_, repr_dps(expr._prec))\n    return \"%s('%s', precision=%i)\" % (expr.__class__.__name__, r, expr._prec)",
    ".sympy.printing.repr.py@@ReprPrinter._print_Integer": "def _print_Integer(self, expr):\n    return 'Integer(%i)' % expr.p",
    ".sympy.printing.repr.py@@ReprPrinter._print_Str": "def _print_Str(self, s):\n    return '%s(%s)' % (s.__class__.__name__, self._print(s.name))"
}