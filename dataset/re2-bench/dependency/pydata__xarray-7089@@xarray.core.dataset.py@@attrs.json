{
    ".xarray.core.common.py@@AttrAccessMixin.__setattr__": "def __setattr__(self, name: str, value: Any) -> None:\n    try:\n        object.__setattr__(self, name, value)\n    except AttributeError as e:\n        if str(e) != '{!r} object has no attribute {!r}'.format(type(self).__name__, name):\n            raise\n        raise AttributeError(f\"cannot set attribute {name!r} on a {type(self).__name__!r} object. Use __setitem__ styleassignment (e.g., `ds['name'] = ...`) instead of assigning variables.\") from e",
    ".xarray.core.dataset.py@@Dataset.attrs": "def attrs(self) -> dict[Any, Any]:\n    if self._attrs is None:\n        self._attrs = {}\n    return self._attrs",
    ".xarray.core.merge.py@@merge_data_and_coords": "def merge_data_and_coords(data_vars, coords, compat='broadcast_equals', join='outer'):\n    indexes, coords = _create_indexes_from_coords(coords, data_vars)\n    objects = [data_vars, coords]\n    explicit_coords = coords.keys()\n    return merge_core(objects, compat, join, explicit_coords=explicit_coords, indexes=Indexes(indexes, coords))",
    ".xarray.core.merge.py@@_create_indexes_from_coords": "def _create_indexes_from_coords(coords, data_vars=None):\n    all_variables = dict(coords)\n    if data_vars is not None:\n        all_variables.update(data_vars)\n    indexes = {}\n    updated_coords = {}\n    index_vars = {k: v for k, v in all_variables.items() if k in coords or isinstance(v, pd.MultiIndex)}\n    for name, obj in index_vars.items():\n        variable = as_variable(obj, name=name)\n        if variable.dims == (name,):\n            idx, idx_vars = create_default_index_implicit(variable, all_variables)\n            indexes.update({k: idx for k in idx_vars})\n            updated_coords.update(idx_vars)\n            all_variables.update(idx_vars)\n        else:\n            updated_coords[name] = obj\n    return (indexes, updated_coords)",
    ".xarray.core.indexes.py@@Indexes.__init__": "def __init__(self, indexes: dict[Any, T_PandasOrXarrayIndex], variables: dict[Any, Variable]):\n    self._indexes = indexes\n    self._variables = variables\n    self._dims: Mapping[Hashable, int] | None = None\n    self.__coord_name_id: dict[Any, int] | None = None\n    self.__id_index: dict[int, T_PandasOrXarrayIndex] | None = None\n    self.__id_coord_names: dict[int, tuple[Hashable, ...]] | None = None",
    ".xarray.core.merge.py@@merge_core": "def merge_core(objects: Iterable[CoercibleMapping], compat: CompatOptions='broadcast_equals', join: JoinOptions='outer', combine_attrs: CombineAttrsOptions='override', priority_arg: int | None=None, explicit_coords: Sequence | None=None, indexes: Mapping[Any, Any] | None=None, fill_value: object=dtypes.NA) -> _MergeResult:\n    from .dataarray import DataArray\n    from .dataset import Dataset\n    _assert_compat_valid(compat)\n    coerced = coerce_pandas_values(objects)\n    aligned = deep_align(coerced, join=join, copy=False, indexes=indexes, fill_value=fill_value)\n    collected = collect_variables_and_indexes(aligned, indexes=indexes)\n    prioritized = _get_priority_vars_and_indexes(aligned, priority_arg, compat=compat)\n    variables, out_indexes = merge_collected(collected, prioritized, compat=compat, combine_attrs=combine_attrs)\n    dims = calculate_dimensions(variables)\n    coord_names, noncoord_names = determine_coords(coerced)\n    if explicit_coords is not None:\n        assert_valid_explicit_coords(variables, dims, explicit_coords)\n        coord_names.update(explicit_coords)\n    for dim, size in dims.items():\n        if dim in variables:\n            coord_names.add(dim)\n    ambiguous_coords = coord_names.intersection(noncoord_names)\n    if ambiguous_coords:\n        raise MergeError(f'unable to determine if these variables should be coordinates or not in the merged result: {ambiguous_coords}')\n    attrs = merge_attrs([var.attrs for var in coerced if isinstance(var, (Dataset, DataArray))], combine_attrs)\n    return _MergeResult(variables, coord_names, dims, out_indexes, attrs)",
    ".xarray.core.merge.py@@_assert_compat_valid": "def _assert_compat_valid(compat):\n    if compat not in _VALID_COMPAT:\n        raise ValueError(f'compat={compat!r} invalid: must be {set(_VALID_COMPAT)}')",
    ".xarray.core.utils.py@@Frozen.__contains__": "def __contains__(self, key: object) -> bool:\n    return key in self.mapping",
    ".xarray.core.merge.py@@coerce_pandas_values": "def coerce_pandas_values(objects: Iterable[CoercibleMapping]) -> list[DatasetLike]:\n    from .dataarray import DataArray\n    from .dataset import Dataset\n    out = []\n    for obj in objects:\n        if isinstance(obj, Dataset):\n            variables: DatasetLike = obj\n        else:\n            variables = {}\n            if isinstance(obj, PANDAS_TYPES):\n                obj = dict(obj.items())\n            for k, v in obj.items():\n                if isinstance(v, PANDAS_TYPES):\n                    v = DataArray(v)\n                variables[k] = v\n        out.append(variables)\n    return out",
    ".xarray.core.alignment.py@@deep_align": "def deep_align(objects: Iterable[Any], join: JoinOptions='inner', copy=True, indexes=None, exclude=frozenset(), raise_on_invalid=True, fill_value=dtypes.NA):\n    from .dataarray import DataArray\n    from .dataset import Dataset\n    if indexes is None:\n        indexes = {}\n\n    def is_alignable(obj):\n        return isinstance(obj, (DataArray, Dataset))\n    positions = []\n    keys = []\n    out = []\n    targets = []\n    no_key = object()\n    not_replaced = object()\n    for position, variables in enumerate(objects):\n        if is_alignable(variables):\n            positions.append(position)\n            keys.append(no_key)\n            targets.append(variables)\n            out.append(not_replaced)\n        elif is_dict_like(variables):\n            current_out = {}\n            for k, v in variables.items():\n                if is_alignable(v) and k not in indexes:\n                    positions.append(position)\n                    keys.append(k)\n                    targets.append(v)\n                    current_out[k] = not_replaced\n                else:\n                    current_out[k] = v\n            out.append(current_out)\n        elif raise_on_invalid:\n            raise ValueError('object to align is neither an xarray.Dataset, an xarray.DataArray nor a dictionary: {!r}'.format(variables))\n        else:\n            out.append(variables)\n    aligned = align(*targets, join=join, copy=copy, indexes=indexes, exclude=exclude, fill_value=fill_value)\n    for position, key, aligned_obj in zip(positions, keys, aligned):\n        if key is no_key:\n            out[position] = aligned_obj\n        else:\n            out[position][key] = aligned_obj\n    for arg in out:\n        assert arg is not not_replaced\n        if is_dict_like(arg):\n            assert all((value is not not_replaced for value in arg.values()))\n    return out",
    ".xarray.core.alignment.py@@is_alignable": "def is_alignable(obj):\n    return isinstance(obj, (DataArray, Dataset))",
    ".xarray.core.utils.py@@is_dict_like": "def is_dict_like(value: Any) -> TypeGuard[Mapping]:\n    return hasattr(value, 'keys') and hasattr(value, '__getitem__')",
    ".xarray.core.alignment.py@@align": "def align(*objects: DataAlignable, join: JoinOptions='inner', copy: bool=True, indexes=None, exclude=frozenset(), fill_value=dtypes.NA) -> tuple[DataAlignable, ...]:\n    aligner = Aligner(objects, join=join, copy=copy, indexes=indexes, exclude_dims=exclude, fill_value=fill_value)\n    aligner.align()\n    return aligner.results",
    ".xarray.core.alignment.py@@Aligner.__init__": "def __init__(self, objects: Iterable[DataAlignable], join: str='inner', indexes: Mapping[Any, Any]=None, exclude_dims: Iterable=frozenset(), exclude_vars: Iterable[Hashable]=frozenset(), method: str=None, tolerance: int | float | Iterable[int | float] | None=None, copy: bool=True, fill_value: Any=dtypes.NA, sparse: bool=False):\n    self.objects = tuple(objects)\n    self.objects_matching_indexes = ()\n    if join not in ['inner', 'outer', 'override', 'exact', 'left', 'right']:\n        raise ValueError(f'invalid value for join: {join}')\n    self.join = join\n    self.copy = copy\n    self.fill_value = fill_value\n    self.sparse = sparse\n    if method is None and tolerance is None:\n        self.reindex_kwargs = {}\n    else:\n        self.reindex_kwargs = {'method': method, 'tolerance': tolerance}\n    if isinstance(exclude_dims, str):\n        exclude_dims = [exclude_dims]\n    self.exclude_dims = frozenset(exclude_dims)\n    self.exclude_vars = frozenset(exclude_vars)\n    if indexes is None:\n        indexes = {}\n    self.indexes, self.index_vars = self._normalize_indexes(indexes)\n    self.all_indexes = {}\n    self.all_index_vars = {}\n    self.unindexed_dim_sizes = {}\n    self.aligned_indexes = {}\n    self.aligned_index_vars = {}\n    self.reindex = {}\n    self.results = tuple()",
    ".xarray.core.alignment.py@@Aligner._normalize_indexes": "def _normalize_indexes(self, indexes: Mapping[Any, Any]) -> tuple[NormalizedIndexes, NormalizedIndexVars]:\n    if isinstance(indexes, Indexes):\n        xr_variables = dict(indexes.variables)\n    else:\n        xr_variables = {}\n    xr_indexes: dict[Hashable, Index] = {}\n    for k, idx in indexes.items():\n        if not isinstance(idx, Index):\n            if getattr(idx, 'dims', (k,)) != (k,):\n                raise ValueError(f\"Indexer has dimensions {idx.dims} that are different from that to be indexed along '{k}'\")\n            data = as_compatible_data(idx)\n            pd_idx = safe_cast_to_index(data)\n            pd_idx.name = k\n            if isinstance(pd_idx, pd.MultiIndex):\n                idx = PandasMultiIndex(pd_idx, k)\n            else:\n                idx = PandasIndex(pd_idx, k, coord_dtype=data.dtype)\n            xr_variables.update(idx.create_variables())\n        xr_indexes[k] = idx\n    normalized_indexes = {}\n    normalized_index_vars = {}\n    for idx, index_vars in Indexes(xr_indexes, xr_variables).group_by_index():\n        coord_names_and_dims = []\n        all_dims: set[Hashable] = set()\n        for name, var in index_vars.items():\n            dims = var.dims\n            coord_names_and_dims.append((name, dims))\n            all_dims.update(dims)\n        exclude_dims = all_dims & self.exclude_dims\n        if exclude_dims == all_dims:\n            continue\n        elif exclude_dims:\n            excl_dims_str = ', '.join((str(d) for d in exclude_dims))\n            incl_dims_str = ', '.join((str(d) for d in all_dims - exclude_dims))\n            raise ValueError(f'cannot exclude dimension(s) {excl_dims_str} from alignment because these are used by an index together with non-excluded dimensions {incl_dims_str}')\n        key = (tuple(coord_names_and_dims), type(idx))\n        normalized_indexes[key] = idx\n        normalized_index_vars[key] = index_vars\n    return (normalized_indexes, normalized_index_vars)",
    ".xarray.core.indexes.py@@Indexes.variables": "def variables(self) -> Mapping[Hashable, Variable]:\n    return Frozen(self._variables)",
    ".xarray.core.utils.py@@Frozen.__init__": "def __init__(self, mapping: Mapping[K, V]):\n    self.mapping = mapping",
    ".xarray.core.utils.py@@Frozen.__iter__": "def __iter__(self) -> Iterator[K]:\n    return iter(self.mapping)",
    ".xarray.core.indexes.py@@Indexes.__iter__": "def __iter__(self) -> Iterator[T_PandasOrXarrayIndex]:\n    return iter(self._indexes)",
    ".xarray.core.indexes.py@@Indexes.group_by_index": "def group_by_index(self) -> list[tuple[T_PandasOrXarrayIndex, dict[Hashable, Variable]]]:\n    index_coords = []\n    for i in self._id_index:\n        index = self._id_index[i]\n        coords = {k: self._variables[k] for k in self._id_coord_names[i]}\n        index_coords.append((index, coords))\n    return index_coords",
    ".xarray.core.indexes.py@@Indexes._id_index": "def _id_index(self) -> dict[int, T_PandasOrXarrayIndex]:\n    if self.__id_index is None:\n        self.__id_index = {id(idx): idx for idx in self.get_unique()}\n    return self.__id_index",
    ".xarray.core.indexes.py@@Indexes.get_unique": "def get_unique(self) -> list[T_PandasOrXarrayIndex]:\n    unique_indexes: list[T_PandasOrXarrayIndex] = []\n    seen: set[int] = set()\n    for index in self._indexes.values():\n        index_id = id(index)\n        if index_id not in seen:\n            unique_indexes.append(index)\n            seen.add(index_id)\n    return unique_indexes",
    ".xarray.core.alignment.py@@Aligner.align": "def align(self) -> None:\n    if not self.indexes and len(self.objects) == 1:\n        obj, = self.objects\n        self.results = (obj.copy(deep=self.copy),)\n    self.find_matching_indexes()\n    self.find_matching_unindexed_dims()\n    self.assert_no_index_conflict()\n    self.align_indexes()\n    self.assert_unindexed_dim_sizes_equal()\n    if self.join == 'override':\n        self.override_indexes()\n    else:\n        self.reindex_all()",
    ".xarray.core.alignment.py@@Aligner.find_matching_indexes": "def find_matching_indexes(self) -> None:\n    all_indexes: dict[MatchingIndexKey, list[Index]]\n    all_index_vars: dict[MatchingIndexKey, list[dict[Hashable, Variable]]]\n    all_indexes_dim_sizes: dict[MatchingIndexKey, dict[Hashable, set]]\n    objects_matching_indexes: list[dict[MatchingIndexKey, Index]]\n    all_indexes = defaultdict(list)\n    all_index_vars = defaultdict(list)\n    all_indexes_dim_sizes = defaultdict(lambda: defaultdict(set))\n    objects_matching_indexes = []\n    for obj in self.objects:\n        obj_indexes, obj_index_vars = self._normalize_indexes(obj.xindexes)\n        objects_matching_indexes.append(obj_indexes)\n        for key, idx in obj_indexes.items():\n            all_indexes[key].append(idx)\n        for key, index_vars in obj_index_vars.items():\n            all_index_vars[key].append(index_vars)\n            for dim, size in calculate_dimensions(index_vars).items():\n                all_indexes_dim_sizes[key][dim].add(size)\n    self.objects_matching_indexes = tuple(objects_matching_indexes)\n    self.all_indexes = all_indexes\n    self.all_index_vars = all_index_vars\n    if self.join == 'override':\n        for dim_sizes in all_indexes_dim_sizes.values():\n            for dim, sizes in dim_sizes.items():\n                if len(sizes) > 1:\n                    raise ValueError(f\"cannot align objects with join='override' with matching indexes along dimension {dim!r} that don't have the same size\")",
    ".xarray.core.alignment.py@@Aligner.find_matching_unindexed_dims": "def find_matching_unindexed_dims(self) -> None:\n    unindexed_dim_sizes = defaultdict(set)\n    for obj in self.objects:\n        for dim in obj.dims:\n            if dim not in self.exclude_dims and dim not in obj.xindexes.dims:\n                unindexed_dim_sizes[dim].add(obj.sizes[dim])\n    self.unindexed_dim_sizes = unindexed_dim_sizes",
    ".xarray.core.alignment.py@@Aligner.assert_no_index_conflict": "def assert_no_index_conflict(self) -> None:\n    matching_keys = set(self.all_indexes) | set(self.indexes)\n    coord_count: dict[Hashable, int] = defaultdict(int)\n    dim_count: dict[Hashable, int] = defaultdict(int)\n    for coord_names_dims, _ in matching_keys:\n        dims_set: set[Hashable] = set()\n        for name, dims in coord_names_dims:\n            coord_count[name] += 1\n            dims_set.update(dims)\n        for dim in dims_set:\n            dim_count[dim] += 1\n    for count, msg in [(coord_count, 'coordinates'), (dim_count, 'dimensions')]:\n        dup = {k: v for k, v in count.items() if v > 1}\n        if dup:\n            items_msg = ', '.join((f'{k!r} ({v} conflicting indexes)' for k, v in dup.items()))\n            raise ValueError(f\"cannot re-index or align objects with conflicting indexes found for the following {msg}: {items_msg}\\nConflicting indexes may occur when\\n- they relate to different sets of coordinate and/or dimension names\\n- they don't have the same type\\n- they may be used to reindex data along common dimensions\")",
    ".xarray.core.alignment.py@@Aligner.align_indexes": "def align_indexes(self) -> None:\n    aligned_indexes = {}\n    aligned_index_vars = {}\n    reindex = {}\n    new_indexes = {}\n    new_index_vars = {}\n    for key, matching_indexes in self.all_indexes.items():\n        matching_index_vars = self.all_index_vars[key]\n        dims = {d for coord in matching_index_vars[0].values() for d in coord.dims}\n        index_cls = key[1]\n        if self.join == 'override':\n            joined_index = matching_indexes[0]\n            joined_index_vars = matching_index_vars[0]\n            need_reindex = False\n        elif key in self.indexes:\n            joined_index = self.indexes[key]\n            joined_index_vars = self.index_vars[key]\n            cmp_indexes = list(zip([joined_index] + matching_indexes, [joined_index_vars] + matching_index_vars))\n            need_reindex = self._need_reindex(dims, cmp_indexes)\n        else:\n            if len(matching_indexes) > 1:\n                need_reindex = self._need_reindex(dims, list(zip(matching_indexes, matching_index_vars)))\n            else:\n                need_reindex = False\n            if need_reindex:\n                if self.join == 'exact':\n                    raise ValueError(\"cannot align objects with join='exact' where index/labels/sizes are not equal along these coordinates (dimensions): \" + ', '.join((f'{name!r} {dims!r}' for name, dims in key[0])))\n                joiner = self._get_index_joiner(index_cls)\n                joined_index = joiner(matching_indexes)\n                if self.join == 'left':\n                    joined_index_vars = matching_index_vars[0]\n                elif self.join == 'right':\n                    joined_index_vars = matching_index_vars[-1]\n                else:\n                    joined_index_vars = joined_index.create_variables()\n            else:\n                joined_index = matching_indexes[0]\n                joined_index_vars = matching_index_vars[0]\n        reindex[key] = need_reindex\n        aligned_indexes[key] = joined_index\n        aligned_index_vars[key] = joined_index_vars\n        for name, var in joined_index_vars.items():\n            new_indexes[name] = joined_index\n            new_index_vars[name] = var\n    for key, idx in self.indexes.items():\n        if key not in aligned_indexes:\n            index_vars = self.index_vars[key]\n            reindex[key] = False\n            aligned_indexes[key] = idx\n            aligned_index_vars[key] = index_vars\n            for name, var in index_vars.items():\n                new_indexes[name] = idx\n                new_index_vars[name] = var\n    self.aligned_indexes = aligned_indexes\n    self.aligned_index_vars = aligned_index_vars\n    self.reindex = reindex\n    self.new_indexes = Indexes(new_indexes, new_index_vars)",
    ".xarray.core.alignment.py@@Aligner.assert_unindexed_dim_sizes_equal": "def assert_unindexed_dim_sizes_equal(self) -> None:\n    for dim, sizes in self.unindexed_dim_sizes.items():\n        index_size = self.new_indexes.dims.get(dim)\n        if index_size is not None:\n            sizes.add(index_size)\n            add_err_msg = f' (note: an index is found along that dimension with size={index_size!r})'\n        else:\n            add_err_msg = ''\n        if len(sizes) > 1:\n            raise ValueError(f'cannot reindex or align along dimension {dim!r} because of conflicting dimension sizes: {sizes!r}' + add_err_msg)",
    ".xarray.core.alignment.py@@Aligner.reindex_all": "def reindex_all(self) -> None:\n    self.results = tuple((self._reindex_one(obj, matching_indexes) for obj, matching_indexes in zip(self.objects, self.objects_matching_indexes)))",
    ".xarray.core.merge.py@@collect_variables_and_indexes": "def collect_variables_and_indexes(list_of_mappings: list[DatasetLike], indexes: Mapping[Any, Any] | None=None) -> dict[Hashable, list[MergeElement]]:\n    from .dataarray import DataArray\n    from .dataset import Dataset\n    if indexes is None:\n        indexes = {}\n    grouped: dict[Hashable, list[MergeElement]] = defaultdict(list)\n\n    def append(name, variable, index):\n        grouped[name].append((variable, index))\n\n    def append_all(variables, indexes):\n        for name, variable in variables.items():\n            append(name, variable, indexes.get(name))\n    for mapping in list_of_mappings:\n        if isinstance(mapping, Dataset):\n            append_all(mapping.variables, mapping._indexes)\n            continue\n        for name, variable in mapping.items():\n            if isinstance(variable, DataArray):\n                coords = variable._coords.copy()\n                indexes = dict(variable._indexes)\n                coords.pop(name, None)\n                indexes.pop(name, None)\n                append_all(coords, indexes)\n            variable = as_variable(variable, name=name)\n            if name in indexes:\n                append(name, variable, indexes[name])\n            elif variable.dims == (name,):\n                idx, idx_vars = create_default_index_implicit(variable)\n                append_all(idx_vars, {k: idx for k in idx_vars})\n            else:\n                append(name, variable, None)\n    return grouped",
    ".xarray.core.variable.py@@as_variable": "def as_variable(obj, name=None) -> Variable | IndexVariable:\n    from .dataarray import DataArray\n    if isinstance(obj, DataArray):\n        obj = obj.variable\n    if isinstance(obj, Variable):\n        obj = obj.copy(deep=False)\n    elif isinstance(obj, tuple):\n        if isinstance(obj[1], DataArray):\n            raise TypeError('Using a DataArray object to construct a variable is ambiguous, please extract the data using the .data property.')\n        try:\n            obj = Variable(*obj)\n        except (TypeError, ValueError) as error:\n            raise error.__class__('Could not convert tuple of form (dims, data[, attrs, encoding]): {} to Variable.'.format(obj))\n    elif utils.is_scalar(obj):\n        obj = Variable([], obj)\n    elif isinstance(obj, (pd.Index, IndexVariable)) and obj.name is not None:\n        obj = Variable(obj.name, obj)\n    elif isinstance(obj, (set, dict)):\n        raise TypeError(f'variable {name!r} has invalid type {type(obj)!r}')\n    elif name is not None:\n        data = as_compatible_data(obj)\n        if data.ndim != 1:\n            raise MissingDimensionsError(f'cannot set variable {name!r} with {data.ndim!r}-dimensional data without explicit dimension names. Pass a tuple of (dims, data) instead.')\n        obj = Variable(name, data, fastpath=True)\n    else:\n        raise TypeError(f'unable to convert object into a variable without an explicit list of dimensions: {obj!r}')\n    if name is not None and name in obj.dims:\n        if obj.ndim != 1:\n            raise MissingDimensionsError(f'{name!r} has more than 1-dimension and the same name as one of its dimensions {obj.dims!r}. xarray disallows such variables because they conflict with the coordinates used to label dimensions.')\n        obj = obj.to_index_variable()\n    return obj",
    ".xarray.core.variable.py@@Variable.__init__": "def __init__(self, dims, data, attrs=None, encoding=None, fastpath=False):\n    self._data = as_compatible_data(data, fastpath=fastpath)\n    self._dims = self._parse_dimensions(dims)\n    self._attrs = None\n    self._encoding = None\n    if attrs is not None:\n        self.attrs = attrs\n    if encoding is not None:\n        self.encoding = encoding",
    ".xarray.core.variable.py@@as_compatible_data": "def as_compatible_data(data, fastpath=False):\n    from .dataarray import DataArray\n    if fastpath and getattr(data, 'ndim', 0) > 0:\n        return _maybe_wrap_data(data)\n    if isinstance(data, (Variable, DataArray)):\n        return data.data\n    if isinstance(data, NON_NUMPY_SUPPORTED_ARRAY_TYPES):\n        return _maybe_wrap_data(data)\n    if isinstance(data, tuple):\n        data = utils.to_0d_object_array(data)\n    if isinstance(data, pd.Timestamp):\n        data = np.datetime64(data.value, 'ns')\n    if isinstance(data, timedelta):\n        data = np.timedelta64(getattr(data, 'value', data), 'ns')\n    if isinstance(data, (pd.Series, pd.Index, pd.DataFrame)):\n        data = data.values\n    if isinstance(data, np.ma.MaskedArray):\n        mask = np.ma.getmaskarray(data)\n        if mask.any():\n            dtype, fill_value = dtypes.maybe_promote(data.dtype)\n            data = np.asarray(data, dtype=dtype)\n            data[mask] = fill_value\n        else:\n            data = np.asarray(data)\n    if not isinstance(data, np.ndarray) and (hasattr(data, '__array_function__') or hasattr(data, '__array_namespace__')):\n        return data\n    data = np.asarray(data)\n    if isinstance(data, np.ndarray) and data.dtype.kind in 'OMm':\n        data = _possibly_convert_objects(data)\n    return _maybe_wrap_data(data)",
    ".xarray.core.variable.py@@_maybe_wrap_data": "def _maybe_wrap_data(data):\n    if isinstance(data, pd.Index):\n        return PandasIndexingAdapter(data)\n    return data",
    ".xarray.core.variable.py@@Variable._parse_dimensions": "def _parse_dimensions(self, dims: str | Iterable[Hashable]) -> tuple[Hashable, ...]:\n    if isinstance(dims, str):\n        dims = (dims,)\n    dims = tuple(dims)\n    if len(dims) != self.ndim:\n        raise ValueError(f'dimensions {dims} must have the same length as the number of data dimensions, ndim={self.ndim}')\n    return dims",
    ".xarray.core.utils.py@@NdimSizeLenMixin.ndim": "def ndim(self: Any) -> int:\n    return len(self.shape)",
    ".xarray.core.variable.py@@Variable.shape": "def shape(self):\n    return self._data.shape",
    ".xarray.core.variable.py@@Variable.attrs": "def attrs(self) -> dict[Any, Any]:\n    if self._attrs is None:\n        self._attrs = {}\n    return self._attrs",
    ".xarray.core.variable.py@@Variable.dims": "def dims(self) -> tuple[Hashable, ...]:\n    return self._dims",
    ".xarray.core.indexes.py@@Indexes.__contains__": "def __contains__(self, key) -> bool:\n    return key in self._indexes",
    ".xarray.core.merge.py@@append": "def append(name, variable, index):\n    grouped[name].append((variable, index))",
    ".xarray.core.merge.py@@_get_priority_vars_and_indexes": "def _get_priority_vars_and_indexes(objects: list[DatasetLike], priority_arg: int | None, compat: CompatOptions='equals') -> dict[Hashable, MergeElement]:\n    if priority_arg is None:\n        return {}\n    collected = collect_variables_and_indexes([objects[priority_arg]])\n    variables, indexes = merge_collected(collected, compat=compat)\n    grouped: dict[Hashable, MergeElement] = {}\n    for name, variable in variables.items():\n        grouped[name] = (variable, indexes.get(name))\n    return grouped",
    ".xarray.core.merge.py@@merge_collected": "def merge_collected(grouped: dict[Hashable, list[MergeElement]], prioritized: Mapping[Any, MergeElement]=None, compat: CompatOptions='minimal', combine_attrs: CombineAttrsOptions='override', equals: dict[Hashable, bool] | None=None) -> tuple[dict[Hashable, Variable], dict[Hashable, Index]]:\n    if prioritized is None:\n        prioritized = {}\n    if equals is None:\n        equals = {}\n    _assert_compat_valid(compat)\n    _assert_prioritized_valid(grouped, prioritized)\n    merged_vars: dict[Hashable, Variable] = {}\n    merged_indexes: dict[Hashable, Index] = {}\n    index_cmp_cache: dict[tuple[int, int], bool | None] = {}\n    for name, elements_list in grouped.items():\n        if name in prioritized:\n            variable, index = prioritized[name]\n            merged_vars[name] = variable\n            if index is not None:\n                merged_indexes[name] = index\n        else:\n            indexed_elements = [(variable, index) for variable, index in elements_list if index is not None]\n            if indexed_elements:\n                variable, index = indexed_elements[0]\n                for other_var, other_index in indexed_elements[1:]:\n                    if not indexes_equal(index, other_index, variable, other_var, index_cmp_cache):\n                        raise MergeError(f'conflicting values/indexes on objects to be combined fo coordinate {name!r}\\nfirst index: {index!r}\\nsecond index: {other_index!r}\\nfirst variable: {variable!r}\\nsecond variable: {other_var!r}\\n')\n                if compat == 'identical':\n                    for other_variable, _ in indexed_elements[1:]:\n                        if not dict_equiv(variable.attrs, other_variable.attrs):\n                            raise MergeError(f'conflicting attribute values on combined variable {name!r}:\\nfirst value: {variable.attrs!r}\\nsecond value: {other_variable.attrs!r}')\n                merged_vars[name] = variable\n                merged_vars[name].attrs = merge_attrs([var.attrs for var, _ in indexed_elements], combine_attrs=combine_attrs)\n                merged_indexes[name] = index\n            else:\n                variables = [variable for variable, _ in elements_list]\n                try:\n                    merged_vars[name] = unique_variable(name, variables, compat, equals.get(name, None))\n                except MergeError:\n                    if compat != 'minimal':\n                        raise\n                if name in merged_vars:\n                    merged_vars[name].attrs = merge_attrs([var.attrs for var in variables], combine_attrs=combine_attrs)\n    return (merged_vars, merged_indexes)",
    ".xarray.core.merge.py@@_assert_prioritized_valid": "def _assert_prioritized_valid(grouped: dict[Hashable, list[MergeElement]], prioritized: Mapping[Any, MergeElement]) -> None:\n    prioritized_names = set(prioritized)\n    grouped_by_index: dict[int, list[Hashable]] = defaultdict(list)\n    indexes: dict[int, Index] = {}\n    for name, elements_list in grouped.items():\n        for _, index in elements_list:\n            if index is not None:\n                grouped_by_index[id(index)].append(name)\n                indexes[id(index)] = index\n    for index_id, index_coord_names in grouped_by_index.items():\n        index_names = set(index_coord_names)\n        common_names = index_names & prioritized_names\n        if common_names and len(common_names) != len(index_names):\n            common_names_str = ', '.join((f'{k!r}' for k in common_names))\n            index_names_str = ', '.join((f'{k!r}' for k in index_coord_names))\n            raise ValueError(f'cannot set or update variable(s) {common_names_str}, which would corrupt the following index built from coordinates {index_names_str}:\\n{indexes[index_id]!r}')",
    ".xarray.core.merge.py@@unique_variable": "def unique_variable(name: Hashable, variables: list[Variable], compat: CompatOptions='broadcast_equals', equals: bool | None=None) -> Variable:\n    out = variables[0]\n    if len(variables) == 1 or compat == 'override':\n        return out\n    combine_method = None\n    if compat == 'minimal':\n        compat = 'broadcast_equals'\n    if compat == 'broadcast_equals':\n        dim_lengths = broadcast_dimension_size(variables)\n        out = out.set_dims(dim_lengths)\n    if compat == 'no_conflicts':\n        combine_method = 'fillna'\n    if equals is None:\n        for var in variables[1:]:\n            equals = getattr(out, compat)(var, equiv=lazy_array_equiv)\n            if equals is not True:\n                break\n        if equals is None:\n            out = out.compute()\n            for var in variables[1:]:\n                equals = getattr(out, compat)(var)\n                if not equals:\n                    break\n    if not equals:\n        raise MergeError(f\"conflicting values for variable {name!r} on objects to be combined. You can skip this check by specifying compat='override'.\")\n    if combine_method:\n        for var in variables[1:]:\n            out = getattr(out, combine_method)(var)\n    return out",
    ".xarray.core.merge.py@@merge_attrs": "def merge_attrs(variable_attrs, combine_attrs, context=None):\n    if not variable_attrs:\n        return None\n    if callable(combine_attrs):\n        return combine_attrs(variable_attrs, context=context)\n    elif combine_attrs == 'drop':\n        return {}\n    elif combine_attrs == 'override':\n        return dict(variable_attrs[0])\n    elif combine_attrs == 'no_conflicts':\n        result = dict(variable_attrs[0])\n        for attrs in variable_attrs[1:]:\n            try:\n                result = compat_dict_union(result, attrs)\n            except ValueError as e:\n                raise MergeError(f\"combine_attrs='no_conflicts', but some values are not the same. Merging {str(result)} with {str(attrs)}\") from e\n        return result\n    elif combine_attrs == 'drop_conflicts':\n        result = {}\n        dropped_keys = set()\n        for attrs in variable_attrs:\n            result.update({key: value for key, value in attrs.items() if key not in result and key not in dropped_keys})\n            result = {key: value for key, value in result.items() if key not in attrs or equivalent(attrs[key], value)}\n            dropped_keys |= {key for key in attrs if key not in result}\n        return result\n    elif combine_attrs == 'identical':\n        result = dict(variable_attrs[0])\n        for attrs in variable_attrs[1:]:\n            if not dict_equiv(result, attrs):\n                raise MergeError(f\"combine_attrs='identical', but attrs differ. First is {str(result)} , other is {str(attrs)}.\")\n        return result\n    else:\n        raise ValueError(f'Unrecognised value for combine_attrs={combine_attrs}')",
    ".xarray.core.variable.py@@calculate_dimensions": "def calculate_dimensions(variables: Mapping[Any, Variable]) -> dict[Hashable, int]:\n    dims: dict[Hashable, int] = {}\n    last_used = {}\n    scalar_vars = {k for k, v in variables.items() if not v.dims}\n    for k, var in variables.items():\n        for dim, size in zip(var.dims, var.shape):\n            if dim in scalar_vars:\n                raise ValueError(f'dimension {dim!r} already exists as a scalar variable')\n            if dim not in dims:\n                dims[dim] = size\n                last_used[dim] = k\n            elif dims[dim] != size:\n                raise ValueError(f'conflicting sizes for dimension {dim!r}: length {size} on {k!r} and length {dims[dim]} on {last_used!r}')\n    return dims",
    ".xarray.core.merge.py@@determine_coords": "def determine_coords(list_of_mappings: Iterable[DatasetLike]) -> tuple[set[Hashable], set[Hashable]]:\n    from .dataarray import DataArray\n    from .dataset import Dataset\n    coord_names: set[Hashable] = set()\n    noncoord_names: set[Hashable] = set()\n    for mapping in list_of_mappings:\n        if isinstance(mapping, Dataset):\n            coord_names.update(mapping.coords)\n            noncoord_names.update(mapping.data_vars)\n        else:\n            for name, var in mapping.items():\n                if isinstance(var, DataArray):\n                    coords = set(var._coords)\n                    coords.discard(name)\n                    coord_names.update(coords)\n    return (coord_names, noncoord_names)",
    ".xarray.core.merge.py@@assert_valid_explicit_coords": "def assert_valid_explicit_coords(variables, dims, explicit_coords):\n    for coord_name in explicit_coords:\n        if coord_name in dims and variables[coord_name].dims != (coord_name,):\n            raise MergeError(f'coordinate {coord_name} shares a name with a dataset dimension, but is not a 1D variable along that dimension. This is disallowed by the xarray data model.')",
    ".xarray.testing.py@@wrapper": "def wrapper(*args, **kwargs):\n    __tracebackhide__ = True\n    with warnings.catch_warnings():\n        warnings.filters = [f for f in warnings.filters if f[0] != 'error']\n        return func(*args, **kwargs)",
    ".xarray.testing.py@@assert_identical": "def assert_identical(a, b):\n    __tracebackhide__ = True\n    assert type(a) == type(b)\n    if isinstance(a, Variable):\n        assert a.identical(b), formatting.diff_array_repr(a, b, 'identical')\n    elif isinstance(a, DataArray):\n        assert a.name == b.name\n        assert a.identical(b), formatting.diff_array_repr(a, b, 'identical')\n    elif isinstance(a, (Dataset, Variable)):\n        assert a.identical(b), formatting.diff_dataset_repr(a, b, 'identical')\n    else:\n        raise TypeError(f'{type(a)} not supported by assertion comparison')",
    ".xarray.core.common.py@@AttrAccessMixin.__getattr__": "def __getattr__(self, name: str) -> Any:\n    if name not in {'__dict__', '__setstate__'}:\n        for source in self._attr_sources:\n            with suppress(KeyError):\n                return source[name]\n    raise AttributeError(f'{type(self).__name__!r} object has no attribute {name!r}')",
    ".xarray.core.dataset.py@@DataVariables.__init__": "def __init__(self, dataset: Dataset):\n    self._dataset = dataset",
    ".xarray.core.dataset.py@@DataVariables.__getitem__": "def __getitem__(self, key: Hashable) -> DataArray:\n    if key not in self._dataset._coord_names:\n        return cast('DataArray', self._dataset[key])\n    raise KeyError(key)",
    ".xarray.core.dataset.py@@Dataset.__getitem__": "def __getitem__(self, key: Hashable) -> DataArray:\n    ...",
    ".xarray.core.utils.py@@hashable": "def hashable(v: Any) -> TypeGuard[Hashable]:\n    try:\n        hash(v)\n    except TypeError:\n        return False\n    return True",
    ".xarray.core.utils.py@@Frozen.__getitem__": "def __getitem__(self, key: K) -> V:\n    return self.mapping[key]",
    ".xarray.core.indexes.py@@filter_indexes_from_coords": "def filter_indexes_from_coords(indexes: Mapping[Any, Index], filtered_coord_names: set) -> dict[Hashable, Index]:\n    filtered_indexes: dict[Any, Index] = dict(**indexes)\n    index_coord_names: dict[Hashable, set[Hashable]] = defaultdict(set)\n    for name, idx in indexes.items():\n        index_coord_names[id(idx)].add(name)\n    for idx_coord_names in index_coord_names.values():\n        if not idx_coord_names <= filtered_coord_names:\n            for k in idx_coord_names:\n                del filtered_indexes[k]\n    return filtered_indexes",
    ".xarray.core.dataarray.py@@DataArray.__init__": "def __init__(self, data: Any=dtypes.NA, coords: Sequence[Sequence[Any] | pd.Index | DataArray] | Mapping[Any, Any] | None=None, dims: Hashable | Sequence[Hashable] | None=None, name: Hashable=None, attrs: Mapping=None, indexes: dict[Hashable, Index]=None, fastpath: bool=False) -> None:\n    if fastpath:\n        variable = data\n        assert dims is None\n        assert attrs is None\n        assert indexes is not None\n    else:\n        if indexes is not None:\n            raise ValueError('Providing explicit indexes is not supported yet')\n        if coords is None:\n            if isinstance(data, DataArray):\n                coords = data.coords\n            elif isinstance(data, pd.Series):\n                coords = [data.index]\n            elif isinstance(data, pd.DataFrame):\n                coords = [data.index, data.columns]\n            elif isinstance(data, (pd.Index, IndexVariable)):\n                coords = [data]\n        if dims is None:\n            dims = getattr(data, 'dims', getattr(coords, 'dims', None))\n        if name is None:\n            name = getattr(data, 'name', None)\n        if attrs is None and (not isinstance(data, PANDAS_TYPES)):\n            attrs = getattr(data, 'attrs', None)\n        data = _check_data_shape(data, coords, dims)\n        data = as_compatible_data(data)\n        coords, dims = _infer_coords_and_dims(data.shape, coords, dims)\n        variable = Variable(dims, data, attrs, fastpath=True)\n        indexes, coords = _create_indexes_from_coords(coords)\n    self._variable = variable\n    assert isinstance(coords, dict)\n    self._coords = coords\n    self._name = name\n    self._indexes = indexes\n    self._close = None",
    ".xarray.testing.py@@assert_allclose": "def assert_allclose(a, b, rtol=1e-05, atol=1e-08, decode_bytes=True):\n    __tracebackhide__ = True\n    assert type(a) == type(b)\n    equiv = functools.partial(_data_allclose_or_equiv, rtol=rtol, atol=atol, decode_bytes=decode_bytes)\n    equiv.__name__ = 'allclose'\n\n    def compat_variable(a, b):\n        a = getattr(a, 'variable', a)\n        b = getattr(b, 'variable', b)\n        return a.dims == b.dims and (a._data is b._data or equiv(a.data, b.data))\n    if isinstance(a, Variable):\n        allclose = compat_variable(a, b)\n        assert allclose, formatting.diff_array_repr(a, b, compat=equiv)\n    elif isinstance(a, DataArray):\n        allclose = utils.dict_equiv(a.coords, b.coords, compat=compat_variable) and compat_variable(a.variable, b.variable)\n        assert allclose, formatting.diff_array_repr(a, b, compat=equiv)\n    elif isinstance(a, Dataset):\n        allclose = a._coord_names == b._coord_names and utils.dict_equiv(a.variables, b.variables, compat=compat_variable)\n        assert allclose, formatting.diff_dataset_repr(a, b, compat=equiv)\n    else:\n        raise TypeError(f'{type(a)} not supported by assertion comparison')",
    ".xarray.core.dataarray.py@@DataArray.coords": "def coords(self) -> DataArrayCoordinates:\n    return DataArrayCoordinates(self)",
    ".xarray.core.coordinates.py@@DataArrayCoordinates.__init__": "def __init__(self, dataarray: DataArray):\n    self._data = dataarray",
    ".xarray.core.utils.py@@dict_equiv": "def dict_equiv(first: Mapping[K, V], second: Mapping[K, V], compat: Callable[[V, V], bool]=equivalent) -> bool:\n    for k in first:\n        if k not in second or not compat(first[k], second[k]):\n            return False\n    return all((k in first for k in second))",
    ".xarray.core.coordinates.py@@Coordinates.__iter__": "def __iter__(self) -> Iterator[Hashable]:\n    for k in self.variables:\n        if k in self._names:\n            yield k",
    ".xarray.core.coordinates.py@@DataArrayCoordinates.variables": "def variables(self):\n    return Frozen(self._data._coords)",
    ".xarray.core.coordinates.py@@DataArrayCoordinates._names": "def _names(self) -> set[Hashable]:\n    return set(self._data._coords)",
    ".xarray.core.coordinates.py@@Coordinates.__contains__": "def __contains__(self, key: Hashable) -> bool:\n    return key in self._names",
    ".xarray.core.coordinates.py@@DataArrayCoordinates.__getitem__": "def __getitem__(self, key: Hashable) -> DataArray:\n    return self._data._getitem_coord(key)",
    ".xarray.core.dataarray.py@@DataArray._getitem_coord": "def _getitem_coord(self: T_DataArray, key: Any) -> T_DataArray:\n    from .dataset import _get_virtual_variable\n    try:\n        var = self._coords[key]\n    except KeyError:\n        dim_sizes = dict(zip(self.dims, self.shape))\n        _, key, var = _get_virtual_variable(self._coords, key, dim_sizes)\n    return self._replace_maybe_drop_dims(var, name=key)",
    ".xarray.core.dataarray.py@@DataArray._replace_maybe_drop_dims": "def _replace_maybe_drop_dims(self: T_DataArray, variable: Variable, name: Hashable | None | Default=_default) -> T_DataArray:\n    if variable.dims == self.dims and variable.shape == self.shape:\n        coords = self._coords.copy()\n        indexes = self._indexes\n    elif variable.dims == self.dims:\n        new_sizes = dict(zip(self.dims, variable.shape))\n        coords = {k: v for k, v in self._coords.items() if v.shape == tuple((new_sizes[d] for d in v.dims))}\n        indexes = filter_indexes_from_coords(self._indexes, set(coords))\n    else:\n        allowed_dims = set(variable.dims)\n        coords = {k: v for k, v in self._coords.items() if set(v.dims) <= allowed_dims}\n        indexes = filter_indexes_from_coords(self._indexes, set(coords))\n    return self._replace(variable, coords, name, indexes=indexes)",
    ".xarray.core.dataarray.py@@DataArray.dims": "def dims(self) -> tuple[Hashable, ...]:\n    return self.variable.dims",
    ".xarray.core.dataarray.py@@DataArray.variable": "def variable(self) -> Variable:\n    return self._variable",
    ".xarray.core.dataarray.py@@DataArray._replace": "def _replace(self: T_DataArray, variable: Variable=None, coords=None, name: Hashable | None | Default=_default, indexes=None) -> T_DataArray:\n    if variable is None:\n        variable = self.variable\n    if coords is None:\n        coords = self._coords\n    if indexes is None:\n        indexes = self._indexes\n    if name is _default:\n        name = self.name\n    return type(self)(variable, coords, name=name, indexes=indexes, fastpath=True)",
    ".xarray.testing.py@@compat_variable": "def compat_variable(a, b):\n    a = getattr(a, 'variable', a)\n    b = getattr(b, 'variable', b)\n    return a.dims == b.dims and (a._data is b._data or equiv(a.data, b.data))",
    ".xarray.core.variable.py@@Variable.data": "def data(self) -> Any:\n    if is_duck_array(self._data):\n        return self._data\n    else:\n        return self.values",
    ".xarray.core.utils.py@@is_duck_array": "def is_duck_array(value: Any) -> bool:\n    if isinstance(value, np.ndarray):\n        return True\n    return hasattr(value, 'ndim') and hasattr(value, 'shape') and hasattr(value, 'dtype') and (hasattr(value, '__array_function__') and hasattr(value, '__array_ufunc__') or hasattr(value, '__array_namespace__'))",
    ".xarray.core.indexing.py@@PandasIndexingAdapter.shape": "def shape(self) -> tuple[int, ...]:\n    return (len(self.array),)",
    ".xarray.core.indexing.py@@PandasIndexingAdapter.dtype": "def dtype(self) -> np.dtype:\n    return self._dtype",
    ".xarray.core.variable.py@@Variable.values": "def values(self):\n    return _as_array_or_item(self._data)",
    ".xarray.core.variable.py@@_as_array_or_item": "def _as_array_or_item(data):\n    data = np.asarray(data)\n    if data.ndim == 0:\n        if data.dtype.kind == 'M':\n            data = np.datetime64(data, 'ns')\n        elif data.dtype.kind == 'm':\n            data = np.timedelta64(data, 'ns')\n    return data",
    ".xarray.core.indexing.py@@PandasIndexingAdapter.__array__": "def __array__(self, dtype: DTypeLike=None) -> np.ndarray:\n    if dtype is None:\n        dtype = self.dtype\n    array = self.array\n    if isinstance(array, pd.PeriodIndex):\n        with suppress(AttributeError):\n            array = array.astype('object')\n    return np.asarray(array.values, dtype=dtype)",
    ".xarray.testing.py@@_data_allclose_or_equiv": "def _data_allclose_or_equiv(arr1, arr2, rtol=1e-05, atol=1e-08, decode_bytes=True):\n    if any((arr.dtype.kind == 'S' for arr in [arr1, arr2])) and decode_bytes:\n        arr1 = _decode_string_data(arr1)\n        arr2 = _decode_string_data(arr2)\n    exact_dtypes = ['M', 'm', 'O', 'S', 'U']\n    if any((arr.dtype.kind in exact_dtypes for arr in [arr1, arr2])):\n        return duck_array_ops.array_equiv(arr1, arr2)\n    else:\n        return duck_array_ops.allclose_or_equiv(arr1, arr2, rtol=rtol, atol=atol)",
    ".xarray.core.duck_array_ops.py@@allclose_or_equiv": "def allclose_or_equiv(arr1, arr2, rtol=1e-05, atol=1e-08):\n    arr1 = asarray(arr1)\n    arr2 = asarray(arr2)\n    lazy_equiv = lazy_array_equiv(arr1, arr2)\n    if lazy_equiv is None:\n        with warnings.catch_warnings():\n            warnings.filterwarnings('ignore', 'All-NaN (slice|axis) encountered')\n            return bool(isclose(arr1, arr2, rtol=rtol, atol=atol, equal_nan=True).all())\n    else:\n        return lazy_equiv",
    ".xarray.core.duck_array_ops.py@@asarray": "def asarray(data, xp=np):\n    return data if is_duck_array(data) else xp.asarray(data)",
    ".xarray.core.duck_array_ops.py@@lazy_array_equiv": "def lazy_array_equiv(arr1, arr2):\n    if arr1 is arr2:\n        return True\n    arr1 = asarray(arr1)\n    arr2 = asarray(arr2)\n    if arr1.shape != arr2.shape:\n        return False\n    if dask_array and is_duck_dask_array(arr1) and is_duck_dask_array(arr2):\n        if tokenize(arr1) == tokenize(arr2):\n            return True\n        else:\n            return None\n    return None",
    ".xarray.core.pycompat.py@@is_duck_dask_array": "def is_duck_dask_array(x):\n    return is_duck_array(x) and is_dask_collection(x)",
    ".xarray.core.pycompat.py@@is_dask_collection": "def is_dask_collection(x):\n    if dsk.available:\n        from dask.base import is_dask_collection\n        return is_dask_collection(x)\n    else:\n        return False",
    ".xarray.core.duck_array_ops.py@@array_equiv": "def array_equiv(arr1, arr2):\n    arr1 = asarray(arr1)\n    arr2 = asarray(arr2)\n    lazy_equiv = lazy_array_equiv(arr1, arr2)\n    if lazy_equiv is None:\n        with warnings.catch_warnings():\n            warnings.filterwarnings('ignore', \"In the future, 'NAT == x'\")\n            flag_array = (arr1 == arr2) | isnull(arr1) & isnull(arr2)\n            return bool(flag_array.all())\n    else:\n        return lazy_equiv",
    ".xarray.core.duck_array_ops.py@@isnull": "def isnull(data):\n    data = asarray(data)\n    scalar_type = data.dtype.type\n    if issubclass(scalar_type, (np.datetime64, np.timedelta64)):\n        return isnat(data)\n    elif issubclass(scalar_type, np.inexact):\n        return isnan(data)\n    elif issubclass(scalar_type, (np.bool_, np.integer, np.character, np.void)):\n        return zeros_like(data, dtype=bool)\n    elif isinstance(data, np.ndarray):\n        return pandas_isnull(data)\n    else:\n        return data != data",
    ".xarray.testing.py@@_assert_internal_invariants": "def _assert_internal_invariants(xarray_obj: Union[DataArray, Dataset, Variable], check_default_indexes: bool):\n    if isinstance(xarray_obj, Variable):\n        _assert_variable_invariants(xarray_obj)\n    elif isinstance(xarray_obj, DataArray):\n        _assert_dataarray_invariants(xarray_obj, check_default_indexes=check_default_indexes)\n    elif isinstance(xarray_obj, Dataset):\n        _assert_dataset_invariants(xarray_obj, check_default_indexes=check_default_indexes)\n    else:\n        raise TypeError('{} is not a supported type for xarray invariant checks'.format(type(xarray_obj)))",
    ".xarray.testing.py@@_assert_dataarray_invariants": "def _assert_dataarray_invariants(da: DataArray, check_default_indexes: bool):\n    assert isinstance(da._variable, Variable), da._variable\n    _assert_variable_invariants(da._variable)\n    assert isinstance(da._coords, dict), da._coords\n    assert all((isinstance(v, Variable) for v in da._coords.values())), da._coords\n    assert all((set(v.dims) <= set(da.dims) for v in da._coords.values())), (da.dims, {k: v.dims for k, v in da._coords.items()})\n    assert all((isinstance(v, IndexVariable) for k, v in da._coords.items() if v.dims == (k,))), {k: type(v) for k, v in da._coords.items()}\n    for k, v in da._coords.items():\n        _assert_variable_invariants(v, k)\n    if da._indexes is not None:\n        _assert_indexes_invariants_checks(da._indexes, da._coords, da.dims, check_default=check_default_indexes)",
    ".xarray.testing.py@@_assert_variable_invariants": "def _assert_variable_invariants(var: Variable, name: Hashable=None):\n    if name is None:\n        name_or_empty: tuple = ()\n    else:\n        name_or_empty = (name,)\n    assert isinstance(var._dims, tuple), name_or_empty + (var._dims,)\n    assert len(var._dims) == len(var._data.shape), name_or_empty + (var._dims, var._data.shape)\n    assert isinstance(var._encoding, (type(None), dict)), name_or_empty + (var._encoding,)\n    assert isinstance(var._attrs, (type(None), dict)), name_or_empty + (var._attrs,)",
    ".xarray.testing.py@@_assert_indexes_invariants_checks": "def _assert_indexes_invariants_checks(indexes, possible_coord_variables, dims, check_default=True):\n    assert isinstance(indexes, dict), indexes\n    assert all((isinstance(v, Index) for v in indexes.values())), {k: type(v) for k, v in indexes.items()}\n    index_vars = {k for k, v in possible_coord_variables.items() if isinstance(v, IndexVariable)}\n    assert indexes.keys() <= index_vars, (set(indexes), index_vars)\n    for k, index in indexes.items():\n        if isinstance(index, PandasIndex):\n            pd_index = index.index\n            var = possible_coord_variables[k]\n            assert (index.dim,) == var.dims, (pd_index, var)\n            if k == index.dim:\n                assert index.coord_dtype == var.dtype, (index.coord_dtype, var.dtype)\n            assert isinstance(var._data.array, pd.Index), var._data.array\n            assert pd_index.equals(var._data.array), (pd_index, var)\n        if isinstance(index, PandasMultiIndex):\n            pd_index = index.index\n            for name in index.index.names:\n                assert name in possible_coord_variables, (pd_index, index_vars)\n                var = possible_coord_variables[name]\n                assert (index.dim,) == var.dims, (pd_index, var)\n                assert index.level_coords_dtype[name] == var.dtype, (index.level_coords_dtype[name], var.dtype)\n                assert isinstance(var._data.array, pd.MultiIndex), var._data.array\n                assert pd_index.equals(var._data.array), (pd_index, var)\n                assert name in indexes, (name, set(indexes))\n                assert index is indexes[name], (pd_index, indexes[name].index)\n    if check_default:\n        defaults = default_indexes(possible_coord_variables, dims)\n        assert indexes.keys() == defaults.keys(), (set(indexes), set(defaults))\n        assert all((v.equals(defaults[k]) for k, v in indexes.items())), (indexes, defaults)",
    ".xarray.core.variable.py@@Variable.dtype": "def dtype(self):\n    return self._data.dtype",
    ".xarray.core.indexes.py@@default_indexes": "def default_indexes(coords: Mapping[Any, Variable], dims: Iterable) -> dict[Hashable, Index]:\n    indexes: dict[Hashable, Index] = {}\n    coord_names = set(coords)\n    for name, var in coords.items():\n        if name in dims:\n            index, index_vars = create_default_index_implicit(var, coords)\n            if set(index_vars) <= coord_names:\n                indexes.update({k: index for k in index_vars})\n    return indexes",
    ".xarray.core.indexes.py@@create_default_index_implicit": "def create_default_index_implicit(dim_variable: Variable, all_variables: Mapping | Iterable[Hashable] | None=None) -> tuple[PandasIndex, IndexVars]:\n    if all_variables is None:\n        all_variables = {}\n    if not isinstance(all_variables, Mapping):\n        all_variables = {k: None for k in all_variables}\n    name = dim_variable.dims[0]\n    array = getattr(dim_variable._data, 'array', None)\n    index: PandasIndex\n    if isinstance(array, pd.MultiIndex):\n        index = PandasMultiIndex(array, name)\n        index_vars = index.create_variables()\n        duplicate_names = [k for k in index_vars if k in all_variables and k != name]\n        if duplicate_names:\n            if len(duplicate_names) < len(index.index.names):\n                conflict = True\n            else:\n                duplicate_vars = [all_variables[k] for k in duplicate_names]\n                conflict = any((v is None or not dim_variable.equals(v) for v in duplicate_vars))\n            if conflict:\n                conflict_str = '\\n'.join(duplicate_names)\n                raise ValueError(f'conflicting MultiIndex level / variable name(s):\\n{conflict_str}')\n    else:\n        dim_var = {name: dim_variable}\n        index = PandasIndex.from_variables(dim_var, options={})\n        index_vars = index.create_variables(dim_var)\n    return (index, index_vars)",
    ".xarray.core.indexes.py@@PandasIndex.from_variables": "def from_variables(cls, variables: Mapping[Any, Variable], *, options: Mapping[str, Any]) -> PandasIndex:\n    if len(variables) != 1:\n        raise ValueError(f'PandasIndex only accepts one variable, found {len(variables)} variables')\n    name, var = next(iter(variables.items()))\n    if var.ndim != 1:\n        raise ValueError(f'PandasIndex only accepts a 1-dimensional variable, variable {name!r} has {var.ndim} dimensions')\n    dim = var.dims[0]\n    data = getattr(var._data, 'array', var.data)\n    if isinstance(var._data, PandasMultiIndexingAdapter):\n        level = var._data.level\n        if level is not None:\n            data = var._data.array.get_level_values(level)\n    obj = cls(data, dim, coord_dtype=var.dtype)\n    assert not isinstance(obj.index, pd.MultiIndex)\n    obj.index.name = name\n    return obj",
    ".xarray.core.indexes.py@@PandasIndex.__init__": "def __init__(self, array: Any, dim: Hashable, coord_dtype: Any=None):\n    index = utils.safe_cast_to_index(array).copy()\n    if index.name is None:\n        index.name = dim\n    self.index = index\n    self.dim = dim\n    if coord_dtype is None:\n        coord_dtype = get_valid_numpy_dtype(index)\n    self.coord_dtype = coord_dtype",
    ".xarray.core.utils.py@@safe_cast_to_index": "def safe_cast_to_index(array: Any) -> pd.Index:\n    if isinstance(array, pd.Index):\n        index = array\n    elif hasattr(array, 'to_index'):\n        index = array.to_index()\n    elif hasattr(array, 'to_pandas_index'):\n        index = array.to_pandas_index()\n    elif hasattr(array, 'array') and isinstance(array.array, pd.Index):\n        index = array.array\n    else:\n        kwargs = {}\n        if hasattr(array, 'dtype') and array.dtype.kind == 'O':\n            kwargs['dtype'] = object\n        index = pd.Index(np.asarray(array), **kwargs)\n    return _maybe_cast_to_cftimeindex(index)",
    ".xarray.core.utils.py@@_maybe_cast_to_cftimeindex": "def _maybe_cast_to_cftimeindex(index: pd.Index) -> pd.Index:\n    from ..coding.cftimeindex import CFTimeIndex\n    if len(index) > 0 and index.dtype == 'O':\n        try:\n            return CFTimeIndex(index)\n        except (ImportError, TypeError):\n            return index\n    else:\n        return index",
    ".xarray.core.indexes.py@@PandasIndex.create_variables": "def create_variables(self, variables: Mapping[Any, Variable] | None=None) -> IndexVars:\n    from .variable import IndexVariable\n    name = self.index.name\n    attrs: Mapping[Hashable, Any] | None\n    encoding: Mapping[Hashable, Any] | None\n    if variables is not None and name in variables:\n        var = variables[name]\n        attrs = var.attrs\n        encoding = var.encoding\n    else:\n        attrs = None\n        encoding = None\n    data = PandasIndexingAdapter(self.index, dtype=self.coord_dtype)\n    var = IndexVariable(self.dim, data, attrs=attrs, encoding=encoding)\n    return {name: var}",
    ".xarray.core.variable.py@@Variable.encoding": "def encoding(self) -> dict[Any, Any]:\n    if self._encoding is None:\n        self._encoding = {}\n    return self._encoding",
    ".xarray.core.indexing.py@@PandasIndexingAdapter.__init__": "def __init__(self, array: pd.Index, dtype: DTypeLike=None):\n    self.array = safe_cast_to_index(array)\n    if dtype is None:\n        self._dtype = get_valid_numpy_dtype(array)\n    else:\n        self._dtype = np.dtype(dtype)",
    ".xarray.core.variable.py@@IndexVariable.__init__": "def __init__(self, dims, data, attrs=None, encoding=None, fastpath=False):\n    super().__init__(dims, data, attrs, encoding, fastpath)\n    if self.ndim != 1:\n        raise ValueError(f'{type(self).__name__} objects must be 1-dimensional')\n    if not isinstance(self._data, PandasIndexingAdapter):\n        self._data = PandasIndexingAdapter(self._data)",
    ".xarray.coding.cftimeindex.py@@CFTimeIndex.__new__": "def __new__(cls, data, name=None, **kwargs):\n    assert_all_valid_date_type(data)\n    if name is None and hasattr(data, 'name'):\n        name = data.name\n    result = object.__new__(cls)\n    result._data = np.array(data, dtype='O')\n    result.name = name\n    result._cache = {}\n    return result",
    ".xarray.coding.cftimeindex.py@@assert_all_valid_date_type": "def assert_all_valid_date_type(data):\n    if cftime is None:\n        raise ModuleNotFoundError(\"No module named 'cftime'\")\n    if len(data) > 0:\n        sample = data[0]\n        date_type = type(sample)\n        if not isinstance(sample, cftime.datetime):\n            raise TypeError('CFTimeIndex requires cftime.datetime objects. Got object of {}.'.format(date_type))\n        if not all((isinstance(value, date_type) for value in data)):\n            raise TypeError('CFTimeIndex requires using datetime objects of all the same type.  Got\\n{}.'.format(data))",
    ".xarray.core.indexes.py@@PandasIndex.equals": "def equals(self, other: Index):\n    if not isinstance(other, PandasIndex):\n        return False\n    return self.index.equals(other.index) and self.dim == other.dim",
    ".xarray.core.dataarray.py@@DataArray.compute": "def compute(self: T_DataArray, **kwargs) -> T_DataArray:\n    new = self.copy(deep=False)\n    return new.load(**kwargs)",
    ".xarray.core.dataarray.py@@DataArray.copy": "def copy(self: T_DataArray, deep: bool=True, data: Any=None) -> T_DataArray:\n    variable = self.variable.copy(deep=deep, data=data)\n    indexes, index_vars = self.xindexes.copy_indexes(deep=deep)\n    coords = {}\n    for k, v in self._coords.items():\n        if k in index_vars:\n            coords[k] = index_vars[k]\n        else:\n            coords[k] = v.copy(deep=deep)\n    return self._replace(variable, coords, indexes=indexes)",
    ".xarray.core.variable.py@@Variable.copy": "def copy(self, deep: bool=True, data: ArrayLike | None=None):\n    if data is None:\n        ndata = self._data\n        if isinstance(ndata, indexing.MemoryCachedArray):\n            ndata = indexing.MemoryCachedArray(ndata.array)\n        if deep:\n            ndata = copy.deepcopy(ndata)\n    else:\n        ndata = as_compatible_data(data)\n        if self.shape != ndata.shape:\n            raise ValueError('Data shape {} must match shape of object {}'.format(ndata.shape, self.shape))\n    attrs = copy.deepcopy(self._attrs) if deep else copy.copy(self._attrs)\n    encoding = copy.deepcopy(self._encoding) if deep else copy.copy(self._encoding)\n    return self._replace(data=ndata, attrs=attrs, encoding=encoding)",
    ".xarray.core.variable.py@@Variable._replace": "def _replace(self: T_Variable, dims=_default, data=_default, attrs=_default, encoding=_default) -> T_Variable:\n    if dims is _default:\n        dims = copy.copy(self._dims)\n    if data is _default:\n        data = copy.copy(self.data)\n    if attrs is _default:\n        attrs = copy.copy(self._attrs)\n    if encoding is _default:\n        encoding = copy.copy(self._encoding)\n    return type(self)(dims, data, attrs, encoding, fastpath=True)",
    ".xarray.core.dataarray.py@@DataArray.xindexes": "def xindexes(self) -> Indexes:\n    return Indexes(self._indexes, {k: self._coords[k] for k in self._indexes})",
    ".xarray.core.indexes.py@@Indexes.copy_indexes": "def copy_indexes(self, deep: bool=True) -> tuple[dict[Hashable, T_PandasOrXarrayIndex], dict[Hashable, Variable]]:\n    new_indexes = {}\n    new_index_vars = {}\n    for idx, coords in self.group_by_index():\n        if isinstance(idx, pd.Index):\n            convert_new_idx = True\n            dim = next(iter(coords.values())).dims[0]\n            if isinstance(idx, pd.MultiIndex):\n                idx = PandasMultiIndex(idx, dim)\n            else:\n                idx = PandasIndex(idx, dim)\n        else:\n            convert_new_idx = False\n        new_idx = idx.copy(deep=deep)\n        idx_vars = idx.create_variables(coords)\n        if convert_new_idx:\n            new_idx = cast(PandasIndex, new_idx).index\n        new_indexes.update({k: new_idx for k in coords})\n        new_index_vars.update(idx_vars)\n    return (new_indexes, new_index_vars)",
    ".xarray.core.indexes.py@@Indexes._id_coord_names": "def _id_coord_names(self) -> dict[int, tuple[Hashable, ...]]:\n    if self.__id_coord_names is None:\n        id_coord_names: Mapping[int, list[Hashable]] = defaultdict(list)\n        for k, v in self._coord_name_id.items():\n            id_coord_names[v].append(k)\n        self.__id_coord_names = {k: tuple(v) for k, v in id_coord_names.items()}\n    return self.__id_coord_names",
    ".xarray.core.indexes.py@@Indexes._coord_name_id": "def _coord_name_id(self) -> dict[Any, int]:\n    if self.__coord_name_id is None:\n        self.__coord_name_id = {k: id(idx) for k, idx in self._indexes.items()}\n    return self.__coord_name_id",
    ".xarray.core.indexes.py@@PandasIndex.copy": "def copy(self, deep=True):\n    if deep:\n        index = self.index.copy(deep=True)\n    else:\n        index = self.index\n    return self._replace(index)",
    ".xarray.core.indexes.py@@PandasIndex._replace": "def _replace(self, index, dim=None, coord_dtype=None):\n    if dim is None:\n        dim = self.dim\n    if coord_dtype is None:\n        coord_dtype = self.coord_dtype\n    return type(self)(index, dim, coord_dtype)",
    ".xarray.core.dataarray.py@@DataArray.name": "def name(self) -> Hashable | None:\n    return self._name",
    ".xarray.core.dataarray.py@@DataArray.load": "def load(self: T_DataArray, **kwargs) -> T_DataArray:\n    ds = self._to_temp_dataset().load(**kwargs)\n    new = self._from_temp_dataset(ds)\n    self._variable = new._variable\n    self._coords = new._coords\n    return self",
    ".xarray.core.dataarray.py@@DataArray._to_temp_dataset": "def _to_temp_dataset(self) -> Dataset:\n    return self._to_dataset_whole(name=_THIS_ARRAY, shallow_copy=False)",
    ".xarray.core.dataarray.py@@DataArray._to_dataset_whole": "def _to_dataset_whole(self, name: Hashable=None, shallow_copy: bool=True) -> Dataset:\n    if name is None:\n        name = self.name\n    if name is None:\n        raise ValueError('unable to convert unnamed DataArray to a Dataset without providing an explicit name')\n    if name in self.coords:\n        raise ValueError('cannot create a Dataset from a DataArray with the same name as one of its coordinates')\n    variables = self._coords.copy()\n    variables[name] = self.variable\n    if shallow_copy:\n        for k in variables:\n            variables[k] = variables[k].copy(deep=False)\n    indexes = self._indexes\n    coord_names = set(self._coords)\n    return Dataset._construct_direct(variables, coord_names, indexes=indexes)",
    ".xarray.core.utils.py@@ReprObject.__hash__": "def __hash__(self) -> int:\n    return hash((type(self), self._value))",
    ".xarray.core.variable.py@@IndexVariable.load": "def load(self):\n    return self",
    ".xarray.core.dataarray.py@@DataArray._from_temp_dataset": "def _from_temp_dataset(self: T_DataArray, dataset: Dataset, name: Hashable | None | Default=_default) -> T_DataArray:\n    variable = dataset._variables.pop(_THIS_ARRAY)\n    coords = dataset._variables\n    indexes = dataset._indexes\n    return self._replace(variable, coords, name, indexes=indexes)",
    ".xarray.core.dataarray.py@@DataArray.curvefit": "def curvefit(self, coords: str | DataArray | Iterable[str | DataArray], func: Callable[..., Any], reduce_dims: Dims=None, skipna: bool=True, p0: dict[str, Any] | None=None, bounds: dict[str, Any] | None=None, param_names: Sequence[str] | None=None, kwargs: dict[str, Any] | None=None) -> Dataset:\n    return self._to_temp_dataset().curvefit(coords, func, reduce_dims=reduce_dims, skipna=skipna, p0=p0, bounds=bounds, param_names=param_names, kwargs=kwargs)",
    ".xarray.core.dataarray.py@@DataArray.equals": "def equals(self: T_DataArray, other: T_DataArray) -> bool:\n    try:\n        return self._all_compat(other, 'equals')\n    except (TypeError, AttributeError):\n        return False",
    ".xarray.core.dataarray.py@@DataArray._all_compat": "def _all_compat(self: T_DataArray, other: T_DataArray, compat_str: str) -> bool:\n\n    def compat(x, y):\n        return getattr(x.variable, compat_str)(y.variable)\n    return utils.dict_equiv(self.coords, other.coords, compat=compat) and compat(self, other)",
    ".xarray.core.dataarray.py@@DataArray.shape": "def shape(self) -> tuple[int, ...]:\n    return self.variable.shape",
    ".xarray.core.dataarray.py@@DataArray.compat": "def compat(x, y):\n    return getattr(x.variable, compat_str)(y.variable)",
    ".xarray.core.variable.py@@IndexVariable.equals": "def equals(self, other, equiv=None):\n    if equiv is not None:\n        return super().equals(other, equiv)\n    other = getattr(other, 'variable', other)\n    try:\n        return self.dims == other.dims and self._data_equals(other)\n    except (TypeError, AttributeError):\n        return False",
    ".xarray.core.variable.py@@IndexVariable._data_equals": "def _data_equals(self, other):\n    return self.to_index().equals(other.to_index())",
    ".xarray.core.variable.py@@IndexVariable.to_index": "def to_index(self) -> pd.Index:\n    assert self.ndim == 1\n    index = self._data.array\n    if isinstance(index, pd.MultiIndex):\n        valid_level_names = [name or f'{self.dims[0]}_level_{i}' for i, name in enumerate(index.names)]\n        index = index.set_names(valid_level_names)\n    else:\n        index = index.set_names(self.name)\n    return index",
    ".xarray.core.variable.py@@IndexVariable.name": "def name(self) -> Hashable:\n    return self.dims[0]",
    ".xarray.core.alignment.py@@broadcast": "def broadcast(*args, exclude=None):\n    if exclude is None:\n        exclude = set()\n    args = align(*args, join='outer', copy=False, exclude=exclude)\n    dims_map, common_coords = _get_broadcast_dims_map_common_coords(args, exclude)\n    result = [_broadcast_helper(arg, exclude, dims_map, common_coords) for arg in args]\n    return tuple(result)",
    ".xarray.core.variable.py@@IndexVariable.copy": "def copy(self, deep: bool=True, data: ArrayLike | None=None):\n    if data is None:\n        ndata = self._data.copy(deep=deep)\n    else:\n        ndata = as_compatible_data(data)\n        if self.shape != ndata.shape:\n            raise ValueError('Data shape {} must match shape of object {}'.format(ndata.shape, self.shape))\n    attrs = copy.deepcopy(self._attrs) if deep else copy.copy(self._attrs)\n    encoding = copy.deepcopy(self._encoding) if deep else copy.copy(self._encoding)\n    return self._replace(data=ndata, attrs=attrs, encoding=encoding)",
    ".xarray.core.indexing.py@@PandasIndexingAdapter.copy": "def copy(self, deep: bool=True) -> PandasIndexingAdapter:\n    array = self.array.copy(deep=True) if deep else self.array\n    return type(self)(array, self._dtype)",
    ".xarray.core.indexes.py@@Indexes.__getitem__": "def __getitem__(self, key) -> T_PandasOrXarrayIndex:\n    return self._indexes[key]",
    ".xarray.core.indexes.py@@Indexes.dims": "def dims(self) -> Mapping[Hashable, int]:\n    from .variable import calculate_dimensions\n    if self._dims is None:\n        self._dims = calculate_dimensions(self._variables)\n    return Frozen(self._dims)",
    ".xarray.core.alignment.py@@Aligner._reindex_one": "def _reindex_one(self, obj: DataAlignable, matching_indexes: dict[MatchingIndexKey, Index]) -> DataAlignable:\n    new_indexes, new_variables = self._get_indexes_and_vars(obj, matching_indexes)\n    dim_pos_indexers = self._get_dim_pos_indexers(matching_indexes)\n    new_obj = obj._reindex_callback(self, dim_pos_indexers, new_variables, new_indexes, self.fill_value, self.exclude_dims, self.exclude_vars)\n    new_obj.encoding = obj.encoding\n    return new_obj",
    ".xarray.core.alignment.py@@Aligner._get_indexes_and_vars": "def _get_indexes_and_vars(self, obj: DataAlignable, matching_indexes: dict[MatchingIndexKey, Index]) -> tuple[dict[Hashable, Index], dict[Hashable, Variable]]:\n    new_indexes = {}\n    new_variables = {}\n    for key, aligned_idx in self.aligned_indexes.items():\n        index_vars = self.aligned_index_vars[key]\n        obj_idx = matching_indexes.get(key)\n        if obj_idx is None:\n            index_vars_dims = {d for var in index_vars.values() for d in var.dims}\n            if index_vars_dims <= set(obj.dims):\n                obj_idx = aligned_idx\n        if obj_idx is not None:\n            for name, var in index_vars.items():\n                new_indexes[name] = aligned_idx\n                new_variables[name] = var.copy()\n    return (new_indexes, new_variables)",
    ".xarray.core.alignment.py@@Aligner._get_dim_pos_indexers": "def _get_dim_pos_indexers(self, matching_indexes: dict[MatchingIndexKey, Index]) -> dict[Hashable, Any]:\n    dim_pos_indexers = {}\n    for key, aligned_idx in self.aligned_indexes.items():\n        obj_idx = matching_indexes.get(key)\n        if obj_idx is not None:\n            if self.reindex[key]:\n                indexers = obj_idx.reindex_like(aligned_idx, **self.reindex_kwargs)\n                dim_pos_indexers.update(indexers)\n    return dim_pos_indexers",
    ".xarray.core.dataarray.py@@DataArray._reindex_callback": "def _reindex_callback(self: T_DataArray, aligner: alignment.Aligner, dim_pos_indexers: dict[Hashable, Any], variables: dict[Hashable, Variable], indexes: dict[Hashable, Index], fill_value: Any, exclude_dims: frozenset[Hashable], exclude_vars: frozenset[Hashable]) -> T_DataArray:\n    if isinstance(fill_value, dict):\n        fill_value = fill_value.copy()\n        sentinel = object()\n        value = fill_value.pop(self.name, sentinel)\n        if value is not sentinel:\n            fill_value[_THIS_ARRAY] = value\n    ds = self._to_temp_dataset()\n    reindexed = ds._reindex_callback(aligner, dim_pos_indexers, variables, indexes, fill_value, exclude_dims, exclude_vars)\n    return self._from_temp_dataset(reindexed)",
    ".xarray.core.dataarray.py@@DataArray.encoding": "def encoding(self) -> dict[Any, Any]:\n    return self.variable.encoding",
    ".xarray.core.alignment.py@@_get_broadcast_dims_map_common_coords": "def _get_broadcast_dims_map_common_coords(args, exclude):\n    common_coords = {}\n    dims_map = {}\n    for arg in args:\n        for dim in arg.dims:\n            if dim not in common_coords and dim not in exclude:\n                dims_map[dim] = arg.sizes[dim]\n                if dim in arg._indexes:\n                    common_coords.update(arg.xindexes.get_all_coords(dim))\n    return (dims_map, common_coords)",
    ".xarray.core.common.py@@AbstractArray.sizes": "def sizes(self: Any) -> Frozen[Hashable, int]:\n    return Frozen(dict(zip(self.dims, self.shape)))",
    ".xarray.core.indexes.py@@Indexes.get_all_coords": "def get_all_coords(self, key: Hashable, errors: ErrorOptions='raise') -> dict[Hashable, Variable]:\n    if errors not in ['raise', 'ignore']:\n        raise ValueError('errors must be either \"raise\" or \"ignore\"')\n    if key not in self._indexes:\n        if errors == 'raise':\n            raise ValueError(f'no index found for {key!r} coordinate')\n        else:\n            return {}\n    all_coord_names = self._id_coord_names[self._coord_name_id[key]]\n    return {k: self._variables[k] for k in all_coord_names}",
    ".xarray.core.alignment.py@@_broadcast_helper": "def _broadcast_helper(arg: T_DataArrayOrSet, exclude, dims_map, common_coords) -> T_DataArrayOrSet:\n    from .dataarray import DataArray\n    from .dataset import Dataset\n\n    def _set_dims(var):\n        var_dims_map = dims_map.copy()\n        for dim in exclude:\n            with suppress(ValueError):\n                var_dims_map[dim] = var.shape[var.dims.index(dim)]\n        return var.set_dims(var_dims_map)\n\n    def _broadcast_array(array: T_DataArray) -> T_DataArray:\n        data = _set_dims(array.variable)\n        coords = dict(array.coords)\n        coords.update(common_coords)\n        return array.__class__(data, coords, data.dims, name=array.name, attrs=array.attrs)\n\n    def _broadcast_dataset(ds: T_Dataset) -> T_Dataset:\n        data_vars = {k: _set_dims(ds.variables[k]) for k in ds.data_vars}\n        coords = dict(ds.coords)\n        coords.update(common_coords)\n        return ds.__class__(data_vars, coords, ds.attrs)\n    if isinstance(arg, DataArray):\n        return cast('T_DataArrayOrSet', _broadcast_array(arg))\n    elif isinstance(arg, Dataset):\n        return cast('T_DataArrayOrSet', _broadcast_dataset(arg))\n    else:\n        raise ValueError('all input must be Dataset or DataArray objects')",
    ".xarray.core.alignment.py@@_broadcast_array": "def _broadcast_array(array: T_DataArray) -> T_DataArray:\n    data = _set_dims(array.variable)\n    coords = dict(array.coords)\n    coords.update(common_coords)\n    return array.__class__(data, coords, data.dims, name=array.name, attrs=array.attrs)",
    ".xarray.core.alignment.py@@_set_dims": "def _set_dims(var):\n    var_dims_map = dims_map.copy()\n    for dim in exclude:\n        with suppress(ValueError):\n            var_dims_map[dim] = var.shape[var.dims.index(dim)]\n    return var.set_dims(var_dims_map)",
    ".xarray.core.variable.py@@Variable.set_dims": "def set_dims(self, dims, shape=None):\n    if isinstance(dims, str):\n        dims = [dims]\n    if shape is None and utils.is_dict_like(dims):\n        shape = dims.values()\n    missing_dims = set(self.dims) - set(dims)\n    if missing_dims:\n        raise ValueError(f'new dimensions {dims!r} must be a superset of existing dimensions {self.dims!r}')\n    self_dims = set(self.dims)\n    expanded_dims = tuple((d for d in dims if d not in self_dims)) + self.dims\n    if self.dims == expanded_dims:\n        expanded_data = self.data\n    elif shape is not None:\n        dims_map = dict(zip(dims, shape))\n        tmp_shape = tuple((dims_map[d] for d in expanded_dims))\n        expanded_data = duck_array_ops.broadcast_to(self.data, tmp_shape)\n    else:\n        expanded_data = self.data[(None,) * (len(expanded_dims) - self.ndim)]\n    expanded_var = Variable(expanded_dims, expanded_data, self._attrs, self._encoding, fastpath=True)\n    return expanded_var.transpose(*dims)",
    ".xarray.core.variable.py@@Variable.transpose": "def transpose(self, *dims: Hashable | ellipsis, missing_dims: ErrorOptionsWithWarn='raise') -> Variable:\n    if len(dims) == 0:\n        dims = self.dims[::-1]\n    else:\n        dims = tuple(infix_dims(dims, self.dims, missing_dims))\n    if len(dims) < 2 or dims == self.dims:\n        return self.copy(deep=False)\n    axes = self.get_axis_num(dims)\n    data = as_indexable(self._data).transpose(axes)\n    return self._replace(dims=dims, data=data)",
    ".xarray.core.utils.py@@infix_dims": "def infix_dims(dims_supplied: Collection, dims_all: Collection, missing_dims: ErrorOptionsWithWarn='raise') -> Iterator:\n    if ... in dims_supplied:\n        if len(set(dims_all)) != len(dims_all):\n            raise ValueError('Cannot use ellipsis with repeated dims')\n        if list(dims_supplied).count(...) > 1:\n            raise ValueError('More than one ellipsis supplied')\n        other_dims = [d for d in dims_all if d not in dims_supplied]\n        existing_dims = drop_missing_dims(dims_supplied, dims_all, missing_dims)\n        for d in existing_dims:\n            if d is ...:\n                yield from other_dims\n            else:\n                yield d\n    else:\n        existing_dims = drop_missing_dims(dims_supplied, dims_all, missing_dims)\n        if set(existing_dims) ^ set(dims_all):\n            raise ValueError(f'{dims_supplied} must be a permuted list of {dims_all}, unless `...` is included')\n        yield from existing_dims",
    ".xarray.core.utils.py@@drop_missing_dims": "def drop_missing_dims(supplied_dims: Collection, dims: Collection, missing_dims: ErrorOptionsWithWarn) -> Collection:\n    if missing_dims == 'raise':\n        supplied_dims_set = {val for val in supplied_dims if val is not ...}\n        invalid = supplied_dims_set - set(dims)\n        if invalid:\n            raise ValueError(f'Dimensions {invalid} do not exist. Expected one or more of {dims}')\n        return supplied_dims\n    elif missing_dims == 'warn':\n        invalid = set(supplied_dims) - set(dims)\n        if invalid:\n            warnings.warn(f'Dimensions {invalid} do not exist. Expected one or more of {dims}')\n        return [val for val in supplied_dims if val in dims or val is ...]\n    elif missing_dims == 'ignore':\n        return [val for val in supplied_dims if val in dims or val is ...]\n    else:\n        raise ValueError(f'Unrecognised option {missing_dims} for missing_dims argument')",
    ".xarray.core.dataarray.py@@DataArray.attrs": "def attrs(self) -> dict[Any, Any]:\n    return self.variable.attrs",
    ".xarray.core.dataarray.py@@_check_data_shape": "def _check_data_shape(data, coords, dims):\n    if data is dtypes.NA:\n        data = np.nan\n    if coords is not None and utils.is_scalar(data, include_0d=False):\n        if utils.is_dict_like(coords):\n            if dims is None:\n                return data\n            else:\n                data_shape = tuple((as_variable(coords[k], k).size if k in coords.keys() else 1 for k in dims))\n        else:\n            data_shape = tuple((as_variable(coord, 'foo').size for coord in coords))\n        data = np.full(data_shape, data)\n    return data",
    ".xarray.core.utils.py@@is_scalar": "def is_scalar(value: Any, include_0d: bool=True) -> TypeGuard[Hashable]:\n    return _is_scalar(value, include_0d)",
    ".xarray.core.utils.py@@_is_scalar": "def _is_scalar(value, include_0d):\n    from .variable import NON_NUMPY_SUPPORTED_ARRAY_TYPES\n    if include_0d:\n        include_0d = getattr(value, 'ndim', None) == 0\n    return include_0d or isinstance(value, (str, bytes)) or (not (isinstance(value, (Iterable,) + NON_NUMPY_SUPPORTED_ARRAY_TYPES) or hasattr(value, '__array_function__') or hasattr(value, '__array_namespace__')))",
    ".xarray.core.dataarray.py@@_infer_coords_and_dims": "def _infer_coords_and_dims(shape, coords, dims) -> tuple[dict[Hashable, Variable], tuple[Hashable, ...]]:\n    if coords is not None and (not utils.is_dict_like(coords)) and (len(coords) != len(shape)):\n        raise ValueError(f'coords is not dict-like, but it has {len(coords)} items, which does not match the {len(shape)} dimensions of the data')\n    if isinstance(dims, str):\n        dims = (dims,)\n    if dims is None:\n        dims = [f'dim_{n}' for n in range(len(shape))]\n        if coords is not None and len(coords) == len(shape):\n            if utils.is_dict_like(coords):\n                dims = list(coords.keys())\n            else:\n                for n, (dim, coord) in enumerate(zip(dims, coords)):\n                    coord = as_variable(coord, name=dims[n]).to_index_variable()\n                    dims[n] = coord.name\n        dims = tuple(dims)\n    elif len(dims) != len(shape):\n        raise ValueError(f'different number of dimensions on data and dims: {len(shape)} vs {len(dims)}')\n    else:\n        for d in dims:\n            if not isinstance(d, str):\n                raise TypeError(f'dimension {d} is not a string')\n    new_coords: dict[Hashable, Variable] = {}\n    if utils.is_dict_like(coords):\n        for k, v in coords.items():\n            new_coords[k] = as_variable(v, name=k)\n    elif coords is not None:\n        for dim, coord in zip(dims, coords):\n            var = as_variable(coord, name=dim)\n            var.dims = (dim,)\n            new_coords[dim] = var.to_index_variable()\n    sizes = dict(zip(dims, shape))\n    for k, v in new_coords.items():\n        if any((d not in dims for d in v.dims)):\n            raise ValueError(f'coordinate {k} has dimensions {v.dims}, but these are not a subset of the DataArray dimensions {dims}')\n        for d, s in zip(v.dims, v.shape):\n            if s != sizes[d]:\n                raise ValueError(f'conflicting sizes for dimension {d!r}: length {sizes[d]} on the data but length {s} on coordinate {k!r}')\n        if k in sizes and v.shape != (sizes[k],):\n            raise ValueError(f'coordinate {k!r} is a DataArray dimension, but it has shape {v.shape!r} rather than expected shape {sizes[k]!r} matching the dimension size')\n    return (new_coords, dims)",
    ".xarray.core.variable.py@@IndexVariable.to_index_variable": "def to_index_variable(self) -> IndexVariable:\n    return self.copy()",
    ".xarray.core.dataarray.py@@DataArray.broadcast_like": "def broadcast_like(self: T_DataArray, other: DataArray | Dataset, exclude: Iterable[Hashable] | None=None) -> T_DataArray:\n    if exclude is None:\n        exclude = set()\n    else:\n        exclude = set(exclude)\n    args = align(other, self, join='outer', copy=False, exclude=exclude)\n    dims_map, common_coords = _get_broadcast_dims_map_common_coords(args, exclude)\n    return _broadcast_helper(cast('T_DataArray', args[1]), exclude, dims_map, common_coords)",
    ".xarray.core.alignment.py@@Aligner._need_reindex": "def _need_reindex(self, dims, cmp_indexes) -> bool:\n    has_unindexed_dims = any((dim in self.unindexed_dim_sizes for dim in dims))\n    return not indexes_all_equal(cmp_indexes) or has_unindexed_dims",
    ".xarray.core.indexes.py@@indexes_all_equal": "def indexes_all_equal(elements: Sequence[tuple[Index, dict[Hashable, Variable]]]) -> bool:\n\n    def check_variables():\n        variables = [e[1] for e in elements]\n        return any((not variables[0][k].equals(other_vars[k]) for other_vars in variables[1:] for k in variables[0]))\n    indexes = [e[0] for e in elements]\n    same_type = all((type(indexes[0]) is type(other_idx) for other_idx in indexes[1:]))\n    if same_type:\n        try:\n            not_equal = any((not indexes[0].equals(other_idx) for other_idx in indexes[1:]))\n        except NotImplementedError:\n            not_equal = check_variables()\n    else:\n        not_equal = check_variables()\n    return not not_equal",
    ".xarray.core.dataset.py@@Dataset.encoding": "def encoding(self) -> dict[Any, Any]:\n    if self._encoding is None:\n        self._encoding = {}\n    return self._encoding",
    ".xarray.core.common.py@@AbstractArray.get_axis_num": "def get_axis_num(self, dim: Hashable | Iterable[Hashable]) -> int | tuple[int, ...]:\n    if isinstance(dim, Iterable) and (not isinstance(dim, str)):\n        return tuple((self._get_axis_num(d) for d in dim))\n    else:\n        return self._get_axis_num(dim)",
    ".xarray.core.common.py@@AbstractArray._get_axis_num": "def _get_axis_num(self: Any, dim: Hashable) -> int:\n    try:\n        return self.dims.index(dim)\n    except ValueError:\n        raise ValueError(f'{dim!r} not found in array dimensions {self.dims!r}')",
    ".xarray.core.indexing.py@@as_indexable": "def as_indexable(array):\n    if isinstance(array, ExplicitlyIndexed):\n        return array\n    if isinstance(array, np.ndarray):\n        return NumpyIndexingAdapter(array)\n    if isinstance(array, pd.Index):\n        return PandasIndexingAdapter(array)\n    if is_duck_dask_array(array):\n        return DaskIndexingAdapter(array)\n    if hasattr(array, '__array_function__'):\n        return NdArrayLikeIndexingAdapter(array)\n    if hasattr(array, '__array_namespace__'):\n        return ArrayApiIndexingAdapter(array)\n    raise TypeError(f'Invalid array type: {type(array)}')",
    ".xarray.core.indexing.py@@NumpyIndexingAdapter.__init__": "def __init__(self, array):\n    if not isinstance(array, np.ndarray):\n        raise TypeError('NumpyIndexingAdapter only wraps np.ndarray. Trying to wrap {}'.format(type(array)))\n    self.array = array",
    ".xarray.core.indexing.py@@NumpyIndexingAdapter.transpose": "def transpose(self, order):\n    return self.array.transpose(order)",
    ".xarray.core.dataset.py@@_get_func_args": "def _get_func_args(func, param_names):\n    try:\n        func_args = inspect.signature(func).parameters\n    except ValueError:\n        func_args = {}\n        if not param_names:\n            raise ValueError('Unable to inspect `func` signature, and `param_names` was not provided.')\n    if param_names:\n        params = param_names\n    else:\n        params = list(func_args)[1:]\n        if any([p.kind in [p.VAR_POSITIONAL, p.VAR_KEYWORD] for p in func_args.values()]):\n            raise ValueError('`param_names` must be provided because `func` takes variable length arguments.')\n    return (params, func_args)",
    ".xarray.core.dataset.py@@_initialize_curvefit_params": "def _initialize_curvefit_params(params, p0, bounds, func_args):\n\n    def _initialize_feasible(lb, ub):\n        lb_finite = np.isfinite(lb)\n        ub_finite = np.isfinite(ub)\n        p0 = np.nansum([0.5 * (lb + ub) * int(lb_finite & ub_finite), (lb + 1) * int(lb_finite & ~ub_finite), (ub - 1) * int(~lb_finite & ub_finite)])\n        return p0\n    param_defaults = {p: 1 for p in params}\n    bounds_defaults = {p: (-np.inf, np.inf) for p in params}\n    for p in params:\n        if p in func_args and func_args[p].default is not func_args[p].empty:\n            param_defaults[p] = func_args[p].default\n        if p in bounds:\n            bounds_defaults[p] = tuple(bounds[p])\n            if param_defaults[p] < bounds[p][0] or param_defaults[p] > bounds[p][1]:\n                param_defaults[p] = _initialize_feasible(bounds[p][0], bounds[p][1])\n        if p in p0:\n            param_defaults[p] = p0[p]\n    return (param_defaults, bounds_defaults)",
    ".xarray.core.dataset.py@@DataVariables.__iter__": "def __iter__(self) -> Iterator[Hashable]:\n    return (key for key in self._dataset._variables if key not in self._dataset._coord_names)",
    ".xarray.core.computation.py@@apply_ufunc": "def apply_ufunc(func: Callable, *args: Any, input_core_dims: Sequence[Sequence]=None, output_core_dims: Sequence[Sequence] | None=((),), exclude_dims: AbstractSet=frozenset(), vectorize: bool=False, join: JoinOptions='exact', dataset_join: str='exact', dataset_fill_value: object=_NO_FILL_VALUE, keep_attrs: bool | str | None=None, kwargs: Mapping | None=None, dask: str='forbidden', output_dtypes: Sequence | None=None, output_sizes: Mapping[Any, int] | None=None, meta: Any=None, dask_gufunc_kwargs: dict[str, Any] | None=None) -> Any:\n    from .dataarray import DataArray\n    from .groupby import GroupBy\n    from .variable import Variable\n    if input_core_dims is None:\n        input_core_dims = ((),) * len(args)\n    elif len(input_core_dims) != len(args):\n        raise ValueError(f'input_core_dims must be None or a tuple with the length same to the number of arguments. Given {len(input_core_dims)} input_core_dims: {input_core_dims},  but number of args is {len(args)}.')\n    if kwargs is None:\n        kwargs = {}\n    signature = _UFuncSignature(input_core_dims, output_core_dims)\n    if exclude_dims:\n        if not isinstance(exclude_dims, set):\n            raise TypeError(f\"Expected exclude_dims to be a 'set'. Received '{type(exclude_dims).__name__}' instead.\")\n        if not exclude_dims <= signature.all_core_dims:\n            raise ValueError(f'each dimension in `exclude_dims` must also be a core dimension in the function signature. Please make {exclude_dims - signature.all_core_dims} a core dimension')\n    if dask == 'parallelized':\n        if dask_gufunc_kwargs is None:\n            dask_gufunc_kwargs = {}\n        else:\n            dask_gufunc_kwargs = dask_gufunc_kwargs.copy()\n        if meta is not None:\n            warnings.warn('``meta`` should be given in the ``dask_gufunc_kwargs`` parameter. It will be removed as direct parameter in a future version.', FutureWarning, stacklevel=2)\n            dask_gufunc_kwargs.setdefault('meta', meta)\n        if output_sizes is not None:\n            warnings.warn('``output_sizes`` should be given in the ``dask_gufunc_kwargs`` parameter. It will be removed as direct parameter in a future version.', FutureWarning, stacklevel=2)\n            dask_gufunc_kwargs.setdefault('output_sizes', output_sizes)\n    if kwargs:\n        func = functools.partial(func, **kwargs)\n    if keep_attrs is None:\n        keep_attrs = _get_keep_attrs(default=False)\n    if isinstance(keep_attrs, bool):\n        keep_attrs = 'override' if keep_attrs else 'drop'\n    variables_vfunc = functools.partial(apply_variable_ufunc, func, signature=signature, exclude_dims=exclude_dims, keep_attrs=keep_attrs, dask=dask, vectorize=vectorize, output_dtypes=output_dtypes, dask_gufunc_kwargs=dask_gufunc_kwargs)\n    if any((isinstance(a, GroupBy) for a in args)):\n        this_apply = functools.partial(apply_ufunc, func, input_core_dims=input_core_dims, output_core_dims=output_core_dims, exclude_dims=exclude_dims, join=join, dataset_join=dataset_join, dataset_fill_value=dataset_fill_value, keep_attrs=keep_attrs, dask=dask, vectorize=vectorize, output_dtypes=output_dtypes, dask_gufunc_kwargs=dask_gufunc_kwargs)\n        return apply_groupby_func(this_apply, *args)\n    elif any((is_dict_like(a) for a in args)):\n        return apply_dataset_vfunc(variables_vfunc, *args, signature=signature, join=join, exclude_dims=exclude_dims, dataset_join=dataset_join, fill_value=dataset_fill_value, keep_attrs=keep_attrs)\n    elif any((isinstance(a, DataArray) for a in args)):\n        return apply_dataarray_vfunc(variables_vfunc, *args, signature=signature, join=join, exclude_dims=exclude_dims, keep_attrs=keep_attrs)\n    elif any((isinstance(a, Variable) for a in args)):\n        return variables_vfunc(*args)\n    else:\n        return apply_array_ufunc(func, *args, dask=dask)",
    ".xarray.core.computation.py@@_UFuncSignature.__init__": "def __init__(self, input_core_dims, output_core_dims=((),)):\n    self.input_core_dims = tuple((tuple(a) for a in input_core_dims))\n    self.output_core_dims = tuple((tuple(a) for a in output_core_dims))\n    self._all_input_core_dims = None\n    self._all_output_core_dims = None\n    self._all_core_dims = None",
    ".xarray.core.computation.py@@_UFuncSignature.all_core_dims": "def all_core_dims(self):\n    if self._all_core_dims is None:\n        self._all_core_dims = self.all_input_core_dims | self.all_output_core_dims\n    return self._all_core_dims",
    ".xarray.core.computation.py@@_UFuncSignature.all_input_core_dims": "def all_input_core_dims(self):\n    if self._all_input_core_dims is None:\n        self._all_input_core_dims = frozenset((dim for dims in self.input_core_dims for dim in dims))\n    return self._all_input_core_dims",
    ".xarray.core.computation.py@@_UFuncSignature.all_output_core_dims": "def all_output_core_dims(self):\n    if self._all_output_core_dims is None:\n        self._all_output_core_dims = frozenset((dim for dims in self.output_core_dims for dim in dims))\n    return self._all_output_core_dims",
    ".xarray.core.options.py@@_get_keep_attrs": "def _get_keep_attrs(default: bool) -> bool:\n    return _get_boolean_with_default('keep_attrs', default)",
    ".xarray.core.options.py@@_get_boolean_with_default": "def _get_boolean_with_default(option: Options, default: bool) -> bool:\n    global_choice = OPTIONS[option]\n    if global_choice == 'default':\n        return default\n    elif isinstance(global_choice, bool):\n        return global_choice\n    else:\n        raise ValueError(f\"The global option {option} must be one of True, False or 'default'.\")",
    ".xarray.core.dataarray.py@@DataArray._item_sources": "def _item_sources(self) -> Iterable[Mapping[Hashable, Any]]:\n    yield HybridMappingProxy(keys=self._coords, mapping=self.coords)\n    yield HybridMappingProxy(keys=self.dims, mapping={})",
    ".xarray.core.utils.py@@HybridMappingProxy.__init__": "def __init__(self, keys: Collection[K], mapping: Mapping[K, V]):\n    self._keys = keys\n    self.mapping = mapping",
    ".xarray.core.utils.py@@HybridMappingProxy.__getitem__": "def __getitem__(self, key: K) -> V:\n    return self.mapping[key]",
    ".xarray.core.dataset.py@@_get_virtual_variable": "def _get_virtual_variable(variables, key: Hashable, dim_sizes: Mapping=None) -> tuple[Hashable, Hashable, Variable]:\n    from .dataarray import DataArray\n    if dim_sizes is None:\n        dim_sizes = {}\n    if key in dim_sizes:\n        data = pd.Index(range(dim_sizes[key]), name=key)\n        variable = IndexVariable((key,), data)\n        return (key, key, variable)\n    if not isinstance(key, str):\n        raise KeyError(key)\n    split_key = key.split('.', 1)\n    if len(split_key) != 2:\n        raise KeyError(key)\n    ref_name, var_name = split_key\n    ref_var = variables[ref_name]\n    if _contains_datetime_like_objects(ref_var):\n        ref_var = DataArray(ref_var)\n        data = getattr(ref_var.dt, var_name).data\n    else:\n        data = getattr(ref_var, var_name).data\n    virtual_var = Variable(ref_var.dims, data)\n    return (ref_name, var_name, virtual_var)",
    ".xarray.core.computation.py@@apply_dataarray_vfunc": "def apply_dataarray_vfunc(func, *args, signature: _UFuncSignature, join: JoinOptions='inner', exclude_dims=frozenset(), keep_attrs='override') -> tuple[DataArray, ...] | DataArray:\n    from .dataarray import DataArray\n    if len(args) > 1:\n        args = deep_align(args, join=join, copy=False, exclude=exclude_dims, raise_on_invalid=False)\n    objs = _all_of_type(args, DataArray)\n    if keep_attrs == 'drop':\n        name = result_name(args)\n    else:\n        first_obj = _first_of_type(args, DataArray)\n        name = first_obj.name\n    result_coords, result_indexes = build_output_coords_and_indexes(args, signature, exclude_dims, combine_attrs=keep_attrs)\n    data_vars = [getattr(a, 'variable', a) for a in args]\n    result_var = func(*data_vars)\n    out: tuple[DataArray, ...] | DataArray\n    if signature.num_outputs > 1:\n        out = tuple((DataArray(variable, coords=coords, indexes=indexes, name=name, fastpath=True) for variable, coords, indexes in zip(result_var, result_coords, result_indexes)))\n    else:\n        coords, = result_coords\n        indexes, = result_indexes\n        out = DataArray(result_var, coords=coords, indexes=indexes, name=name, fastpath=True)\n    attrs = merge_attrs([x.attrs for x in objs], combine_attrs=keep_attrs)\n    if isinstance(out, tuple):\n        for da in out:\n            da.attrs = attrs\n    else:\n        out.attrs = attrs\n    return out",
    ".xarray.core.computation.py@@_all_of_type": "def _all_of_type(args, kind):\n    return [arg for arg in args if isinstance(arg, kind)]",
    ".xarray.core.computation.py@@result_name": "def result_name(objects: Iterable[Any]) -> Any:\n    names = {getattr(obj, 'name', _DEFAULT_NAME) for obj in objects}\n    names.discard(_DEFAULT_NAME)\n    if len(names) == 1:\n        name, = names\n    else:\n        name = None\n    return name",
    ".xarray.core.computation.py@@build_output_coords_and_indexes": "def build_output_coords_and_indexes(args: Iterable[Any], signature: _UFuncSignature, exclude_dims: AbstractSet=frozenset(), combine_attrs: CombineAttrsOptions='override') -> tuple[list[dict[Any, Variable]], list[dict[Any, Index]]]:\n    coords_list = _get_coords_list(args)\n    if len(coords_list) == 1 and (not exclude_dims):\n        unpacked_coords, = coords_list\n        merged_vars = dict(unpacked_coords.variables)\n        merged_indexes = dict(unpacked_coords.xindexes)\n    else:\n        merged_vars, merged_indexes = merge_coordinates_without_align(coords_list, exclude_dims=exclude_dims, combine_attrs=combine_attrs)\n    output_coords = []\n    output_indexes = []\n    for output_dims in signature.output_core_dims:\n        dropped_dims = signature.all_input_core_dims - set(output_dims)\n        if dropped_dims:\n            filtered_coords = {k: v for k, v in merged_vars.items() if dropped_dims.isdisjoint(v.dims)}\n            filtered_indexes = filter_indexes_from_coords(merged_indexes, set(filtered_coords))\n        else:\n            filtered_coords = merged_vars\n            filtered_indexes = merged_indexes\n        output_coords.append(filtered_coords)\n        output_indexes.append(filtered_indexes)\n    return (output_coords, output_indexes)",
    ".xarray.core.computation.py@@_get_coords_list": "def _get_coords_list(args: Iterable[Any]) -> list[Coordinates]:\n    coords_list = []\n    for arg in args:\n        try:\n            coords = arg.coords\n        except AttributeError:\n            pass\n        else:\n            coords_list.append(coords)\n    return coords_list",
    ".xarray.core.merge.py@@merge_coordinates_without_align": "def merge_coordinates_without_align(objects: list[Coordinates], prioritized: Mapping[Any, MergeElement]=None, exclude_dims: AbstractSet=frozenset(), combine_attrs: CombineAttrsOptions='override') -> tuple[dict[Hashable, Variable], dict[Hashable, Index]]:\n    collected = collect_from_coordinates(objects)\n    if exclude_dims:\n        filtered: dict[Hashable, list[MergeElement]] = {}\n        for name, elements in collected.items():\n            new_elements = [(variable, index) for variable, index in elements if exclude_dims.isdisjoint(variable.dims)]\n            if new_elements:\n                filtered[name] = new_elements\n    else:\n        filtered = collected\n    merged_coords, merged_indexes = merge_collected(filtered, prioritized, combine_attrs=combine_attrs)\n    merged_indexes = filter_indexes_from_coords(merged_indexes, set(merged_coords))\n    return (merged_coords, merged_indexes)",
    ".xarray.core.merge.py@@collect_from_coordinates": "def collect_from_coordinates(list_of_coords: list[Coordinates]) -> dict[Hashable, list[MergeElement]]:\n    grouped: dict[Hashable, list[MergeElement]] = defaultdict(list)\n    for coords in list_of_coords:\n        variables = coords.variables\n        indexes = coords.xindexes\n        for name, variable in variables.items():\n            grouped[name].append((variable, indexes.get(name)))\n    return grouped",
    ".xarray.core.coordinates.py@@Coordinates.xindexes": "def xindexes(self) -> Indexes[Index]:\n    return self._data.xindexes",
    ".xarray.core.computation.py@@apply_variable_ufunc": "def apply_variable_ufunc(func, *args, signature: _UFuncSignature, exclude_dims=frozenset(), dask='forbidden', output_dtypes=None, vectorize=False, keep_attrs='override', dask_gufunc_kwargs=None) -> Variable | tuple[Variable, ...]:\n    from .variable import Variable, as_compatible_data\n    dim_sizes = unified_dim_sizes((a for a in args if hasattr(a, 'dims')), exclude_dims=exclude_dims)\n    broadcast_dims = tuple((dim for dim in dim_sizes if dim not in signature.all_core_dims))\n    output_dims = [broadcast_dims + out for out in signature.output_core_dims]\n    input_data = [broadcast_compat_data(arg, broadcast_dims, core_dims) if isinstance(arg, Variable) else arg for arg, core_dims in zip(args, signature.input_core_dims)]\n    if any((is_duck_dask_array(array) for array in input_data)):\n        if dask == 'forbidden':\n            raise ValueError('apply_ufunc encountered a dask array on an argument, but handling for dask arrays has not been enabled. Either set the ``dask`` argument or load your data into memory first with ``.load()`` or ``.compute()``')\n        elif dask == 'parallelized':\n            numpy_func = func\n            if dask_gufunc_kwargs is None:\n                dask_gufunc_kwargs = {}\n            else:\n                dask_gufunc_kwargs = dask_gufunc_kwargs.copy()\n            allow_rechunk = dask_gufunc_kwargs.get('allow_rechunk', None)\n            if allow_rechunk is None:\n                for n, (data, core_dims) in enumerate(zip(input_data, signature.input_core_dims)):\n                    if is_duck_dask_array(data):\n                        for axis, dim in enumerate(core_dims, start=-len(core_dims)):\n                            if len(data.chunks[axis]) != 1:\n                                raise ValueError(f\"dimension {dim} on {n}th function argument to apply_ufunc with dask='parallelized' consists of multiple chunks, but is also a core dimension. To fix, either rechunk into a single dask array chunk along this dimension, i.e., ``.chunk(dict({dim}=-1))``, or pass ``allow_rechunk=True`` in ``dask_gufunc_kwargs`` but beware that this may significantly increase memory usage.\")\n                dask_gufunc_kwargs['allow_rechunk'] = True\n            output_sizes = dask_gufunc_kwargs.pop('output_sizes', {})\n            if output_sizes:\n                output_sizes_renamed = {}\n                for key, value in output_sizes.items():\n                    if key not in signature.all_output_core_dims:\n                        raise ValueError(f\"dimension '{key}' in 'output_sizes' must correspond to output_core_dims\")\n                    output_sizes_renamed[signature.dims_map[key]] = value\n                dask_gufunc_kwargs['output_sizes'] = output_sizes_renamed\n            for key in signature.all_output_core_dims:\n                if key not in signature.all_input_core_dims and key not in output_sizes:\n                    raise ValueError(f\"dimension '{key}' in 'output_core_dims' needs corresponding (dim, size) in 'output_sizes'\")\n\n            def func(*arrays):\n                import dask.array as da\n                res = da.apply_gufunc(numpy_func, signature.to_gufunc_string(exclude_dims), *arrays, vectorize=vectorize, output_dtypes=output_dtypes, **dask_gufunc_kwargs)\n                return res\n        elif dask == 'allowed':\n            pass\n        else:\n            raise ValueError('unknown setting for dask array handling in apply_ufunc: {}'.format(dask))\n    elif vectorize:\n        func = _vectorize(func, signature, output_dtypes=output_dtypes, exclude_dims=exclude_dims)\n    result_data = func(*input_data)\n    if signature.num_outputs == 1:\n        result_data = (result_data,)\n    elif not isinstance(result_data, tuple) or len(result_data) != signature.num_outputs:\n        raise ValueError('applied function does not have the number of outputs specified in the ufunc signature. Result is not a tuple of {} elements: {!r}'.format(signature.num_outputs, result_data))\n    objs = _all_of_type(args, Variable)\n    attrs = merge_attrs([obj.attrs for obj in objs], combine_attrs=keep_attrs)\n    output: list[Variable] = []\n    for dims, data in zip(output_dims, result_data):\n        data = as_compatible_data(data)\n        if data.ndim != len(dims):\n            raise ValueError(f'applied function returned data with unexpected number of dimensions. Received {data.ndim} dimension(s) but expected {len(dims)} dimensions with names: {dims!r}')\n        var = Variable(dims, data, fastpath=True)\n        for dim, new_size in var.sizes.items():\n            if dim in dim_sizes and new_size != dim_sizes[dim]:\n                raise ValueError('size of dimension {!r} on inputs was unexpectedly changed by applied function from {} to {}. Only dimensions specified in ``exclude_dims`` with xarray.apply_ufunc are allowed to change size.'.format(dim, dim_sizes[dim], new_size))\n        var.attrs = attrs\n        output.append(var)\n    if signature.num_outputs == 1:\n        return output[0]\n    else:\n        return tuple(output)",
    ".xarray.core.computation.py@@unified_dim_sizes": "def unified_dim_sizes(variables: Iterable[Variable], exclude_dims: AbstractSet=frozenset()) -> dict[Hashable, int]:\n    dim_sizes: dict[Hashable, int] = {}\n    for var in variables:\n        if len(set(var.dims)) < len(var.dims):\n            raise ValueError(f'broadcasting cannot handle duplicate dimensions on a variable: {list(var.dims)}')\n        for dim, size in zip(var.dims, var.shape):\n            if dim not in exclude_dims:\n                if dim not in dim_sizes:\n                    dim_sizes[dim] = size\n                elif dim_sizes[dim] != size:\n                    raise ValueError(f'operands cannot be broadcast together with mismatched lengths for dimension {dim}: {dim_sizes[dim]} vs {size}')\n    return dim_sizes",
    ".xarray.core.computation.py@@broadcast_compat_data": "def broadcast_compat_data(variable: Variable, broadcast_dims: tuple[Hashable, ...], core_dims: tuple[Hashable, ...]) -> Any:\n    data = variable.data\n    old_dims = variable.dims\n    new_dims = broadcast_dims + core_dims\n    if new_dims == old_dims:\n        return data\n    set_old_dims = set(old_dims)\n    missing_core_dims = [d for d in core_dims if d not in set_old_dims]\n    if missing_core_dims:\n        raise ValueError('operand to apply_ufunc has required core dimensions {}, but some of these dimensions are absent on an input variable: {}'.format(list(core_dims), missing_core_dims))\n    set_new_dims = set(new_dims)\n    unexpected_dims = [d for d in old_dims if d not in set_new_dims]\n    if unexpected_dims:\n        raise ValueError(f'operand to apply_ufunc encountered unexpected dimensions {unexpected_dims!r} on an input variable: these are core dimensions on other input or output variables')\n    old_broadcast_dims = tuple((d for d in broadcast_dims if d in set_old_dims))\n    reordered_dims = old_broadcast_dims + core_dims\n    if reordered_dims != old_dims:\n        order = tuple((old_dims.index(d) for d in reordered_dims))\n        data = duck_array_ops.transpose(data, order)\n    if new_dims != reordered_dims:\n        key_parts: list[slice | None] = []\n        for dim in new_dims:\n            if dim in set_old_dims:\n                key_parts.append(SLICE_NONE)\n            elif key_parts:\n                key_parts.append(np.newaxis)\n        data = data[tuple(key_parts)]\n    return data",
    ".xarray.core.computation.py@@_vectorize": "def _vectorize(func, signature, output_dtypes, exclude_dims):\n    if signature.all_core_dims:\n        func = np.vectorize(func, otypes=output_dtypes, signature=signature.to_gufunc_string(exclude_dims))\n    else:\n        func = np.vectorize(func, otypes=output_dtypes)\n    return func",
    ".xarray.core.computation.py@@_UFuncSignature.to_gufunc_string": "def to_gufunc_string(self, exclude_dims=frozenset()):\n    input_core_dims = [[self.dims_map[dim] for dim in core_dims] for core_dims in self.input_core_dims]\n    output_core_dims = [[self.dims_map[dim] for dim in core_dims] for core_dims in self.output_core_dims]\n    if exclude_dims:\n        exclude_dims = [self.dims_map[dim] for dim in exclude_dims]\n        counter = Counter()\n\n        def _enumerate(dim):\n            if dim in exclude_dims:\n                n = counter[dim]\n                counter.update([dim])\n                dim = f'{dim}_{n}'\n            return dim\n        input_core_dims = [[_enumerate(dim) for dim in arg] for arg in input_core_dims]\n    alt_signature = type(self)(input_core_dims, output_core_dims)\n    return str(alt_signature)",
    ".xarray.core.computation.py@@_UFuncSignature.dims_map": "def dims_map(self):\n    return {core_dim: f'dim{n}' for n, core_dim in enumerate(sorted(self.all_core_dims))}",
    ".xarray.core.computation.py@@_UFuncSignature._enumerate": "def _enumerate(dim):\n    if dim in exclude_dims:\n        n = counter[dim]\n        counter.update([dim])\n        dim = f'{dim}_{n}'\n    return dim",
    ".xarray.core.computation.py@@_UFuncSignature.__str__": "def __str__(self):\n    lhs = ','.join(('({})'.format(','.join(dims)) for dims in self.input_core_dims))\n    rhs = ','.join(('({})'.format(','.join(dims)) for dims in self.output_core_dims))\n    return f'{lhs}->{rhs}'",
    ".xarray.core.computation.py@@_UFuncSignature.num_outputs": "def num_outputs(self):\n    return len(self.output_core_dims)",
    ".xarray.core.merge.py@@dataset_update_method": "def dataset_update_method(dataset: Dataset, other: CoercibleMapping) -> _MergeResult:\n    from .dataarray import DataArray\n    from .dataset import Dataset\n    if not isinstance(other, Dataset):\n        other = dict(other)\n        for key, value in other.items():\n            if isinstance(value, DataArray):\n                coord_names = [c for c in value.coords if c not in value.dims and c in dataset.coords]\n                if coord_names:\n                    other[key] = value.drop_vars(coord_names)\n    return merge_core([dataset, other], priority_arg=1, indexes=dataset.xindexes, combine_attrs='override')",
    ".xarray.core.merge.py@@append_all": "def append_all(variables, indexes):\n    for name, variable in variables.items():\n        append(name, variable, indexes.get(name))",
    ".xarray.core.coordinates.py@@DatasetCoordinates.__init__": "def __init__(self, dataset: Dataset):\n    self._data = dataset",
    ".xarray.core.coordinates.py@@DatasetCoordinates.variables": "def variables(self) -> Mapping[Hashable, Variable]:\n    return Frozen({k: v for k, v in self._data.variables.items() if k in self._names})",
    ".xarray.core.coordinates.py@@DatasetCoordinates.__getitem__": "def __getitem__(self, key: Hashable) -> DataArray:\n    if key in self._data.data_vars:\n        raise KeyError(key)\n    return cast('DataArray', self._data[key])",
    ".xarray.core.dataset.py@@DataVariables.__contains__": "def __contains__(self, key: Hashable) -> bool:\n    return key in self._dataset._variables and key not in self._dataset._coord_names",
    ".xarray.core.dataarray.py@@DataArray.__contains__": "def __contains__(self, key: Any) -> bool:\n    return key in self.data",
    ".xarray.core.dataarray.py@@DataArray.data": "def data(self) -> Any:\n    return self.variable.data",
    ".conftest.py@@pytest_runtest_setup": "def pytest_runtest_setup(item):\n    if 'flaky' in item.keywords and (not item.config.getoption('--run-flaky')):\n        pytest.skip('set --run-flaky option to run flaky tests')\n    if 'network' in item.keywords and (not item.config.getoption('--run-network-tests')):\n        pytest.skip('set --run-network-tests to run test requiring an internet connection')",
    ".conftest.py@@add_standard_imports": "def add_standard_imports(doctest_namespace, tmpdir):\n    import numpy as np\n    import pandas as pd\n    import xarray as xr\n    doctest_namespace['np'] = np\n    doctest_namespace['pd'] = pd\n    doctest_namespace['xr'] = xr\n    np.random.seed(0)\n    tmpdir.chdir()",
    ".xarray.core.utils.py@@get_valid_numpy_dtype": "def get_valid_numpy_dtype(array: np.ndarray | pd.Index):\n    if isinstance(array, pd.PeriodIndex):\n        dtype = np.dtype('O')\n    elif hasattr(array, 'categories'):\n        dtype = array.categories.dtype\n    elif not is_valid_numpy_dtype(array.dtype):\n        dtype = np.dtype('O')\n    else:\n        dtype = array.dtype\n    return dtype",
    ".xarray.core.utils.py@@is_valid_numpy_dtype": "def is_valid_numpy_dtype(dtype: Any) -> bool:\n    try:\n        np.dtype(dtype)\n    except (TypeError, ValueError):\n        return False\n    else:\n        return True",
    ".xarray.core.variable.py@@Variable.to_index_variable": "def to_index_variable(self) -> IndexVariable:\n    return IndexVariable(self._dims, self._data, self._attrs, encoding=self._encoding, fastpath=True)",
    ".xarray.core.indexes.py@@PandasMultiIndex.__init__": "def __init__(self, array: Any, dim: Hashable, level_coords_dtype: Any=None):\n    super().__init__(array, dim)\n    names = []\n    for i, idx in enumerate(self.index.levels):\n        name = idx.name or f'{dim}_level_{i}'\n        if name == dim:\n            raise ValueError(f'conflicting multi-index level name {name!r} with dimension {dim!r}')\n        names.append(name)\n    self.index.names = names\n    if level_coords_dtype is None:\n        level_coords_dtype = {idx.name: get_valid_numpy_dtype(idx) for idx in self.index.levels}\n    self.level_coords_dtype = level_coords_dtype",
    ".xarray.core.indexes.py@@PandasMultiIndex.create_variables": "def create_variables(self, variables: Mapping[Any, Variable] | None=None) -> IndexVars:\n    from .variable import IndexVariable\n    if variables is None:\n        variables = {}\n    index_vars: IndexVars = {}\n    for name in (self.dim,) + self.index.names:\n        if name == self.dim:\n            level = None\n            dtype = None\n        else:\n            level = name\n            dtype = self.level_coords_dtype[name]\n        var = variables.get(name, None)\n        if var is not None:\n            attrs = var.attrs\n            encoding = var.encoding\n        else:\n            attrs = {}\n            encoding = {}\n        data = PandasMultiIndexingAdapter(self.index, dtype=dtype, level=level)\n        index_vars[name] = IndexVariable(self.dim, data, attrs=attrs, encoding=encoding, fastpath=True)\n    return index_vars",
    ".xarray.core.indexing.py@@PandasMultiIndexingAdapter.__init__": "def __init__(self, array: pd.MultiIndex, dtype: DTypeLike=None, level: str | None=None):\n    super().__init__(array, dtype)\n    self.level = level",
    ".xarray.core.dataarray.py@@DataArray.__setitem__": "def __setitem__(self, key: Any, value: Any) -> None:\n    if isinstance(key, str):\n        self.coords[key] = value\n    else:\n        obj = self[key]\n        if isinstance(value, DataArray):\n            assert_coordinate_consistent(value, obj.coords.variables)\n        key = {k: v.variable if isinstance(v, DataArray) else v for k, v in self._item_key_to_dict(key).items()}\n        self.variable[key] = value",
    ".xarray.core.dataarray.py@@DataArray.__getitem__": "def __getitem__(self: T_DataArray, key: Any) -> T_DataArray:\n    if isinstance(key, str):\n        return self._getitem_coord(key)\n    else:\n        return self.isel(indexers=self._item_key_to_dict(key))",
    ".xarray.core.dataarray.py@@DataArray._item_key_to_dict": "def _item_key_to_dict(self, key: Any) -> Mapping[Hashable, Any]:\n    if utils.is_dict_like(key):\n        return key\n    key = indexing.expanded_indexer(key, self.ndim)\n    return dict(zip(self.dims, key))",
    ".xarray.core.dataarray.py@@DataArray.ndim": "def ndim(self) -> int:\n    return self.variable.ndim",
    ".xarray.core.indexing.py@@expanded_indexer": "def expanded_indexer(key, ndim):\n    if not isinstance(key, tuple):\n        key = (key,)\n    new_key = []\n    found_ellipsis = False\n    for k in key:\n        if k is Ellipsis:\n            if not found_ellipsis:\n                new_key.extend((ndim + 1 - len(key)) * [slice(None)])\n                found_ellipsis = True\n            else:\n                new_key.append(slice(None))\n        else:\n            new_key.append(k)\n    if len(new_key) > ndim:\n        raise IndexError('too many indices')\n    new_key.extend((ndim - len(new_key)) * [slice(None)])\n    return tuple(new_key)",
    ".xarray.core.dataarray.py@@DataArray.isel": "def isel(self: T_DataArray, indexers: Mapping[Any, Any] | None=None, drop: bool=False, missing_dims: ErrorOptionsWithWarn='raise', **indexers_kwargs: Any) -> T_DataArray:\n    indexers = either_dict_or_kwargs(indexers, indexers_kwargs, 'isel')\n    if any((is_fancy_indexer(idx) for idx in indexers.values())):\n        ds = self._to_temp_dataset()._isel_fancy(indexers, drop=drop, missing_dims=missing_dims)\n        return self._from_temp_dataset(ds)\n    variable = self._variable.isel(indexers, missing_dims=missing_dims)\n    indexes, index_variables = isel_indexes(self.xindexes, indexers)\n    coords = {}\n    for coord_name, coord_value in self._coords.items():\n        if coord_name in index_variables:\n            coord_value = index_variables[coord_name]\n        else:\n            coord_indexers = {k: v for k, v in indexers.items() if k in coord_value.dims}\n            if coord_indexers:\n                coord_value = coord_value.isel(coord_indexers)\n                if drop and coord_value.ndim == 0:\n                    continue\n        coords[coord_name] = coord_value\n    return self._replace(variable=variable, coords=coords, indexes=indexes)",
    ".xarray.core.utils.py@@either_dict_or_kwargs": "def either_dict_or_kwargs(pos_kwargs: Mapping[Any, T] | None, kw_kwargs: Mapping[str, T], func_name: str) -> Mapping[Hashable, T]:\n    if pos_kwargs is None or pos_kwargs == {}:\n        return cast(Mapping[Hashable, T], kw_kwargs)\n    if not is_dict_like(pos_kwargs):\n        raise ValueError(f'the first argument to .{func_name} must be a dictionary')\n    if kw_kwargs:\n        raise ValueError(f'cannot specify both keyword and positional arguments to .{func_name}')\n    return pos_kwargs",
    ".xarray.core.indexing.py@@is_fancy_indexer": "def is_fancy_indexer(indexer: Any) -> bool:\n    if isinstance(indexer, (int, slice)):\n        return False\n    if isinstance(indexer, np.ndarray):\n        return indexer.ndim > 1\n    if isinstance(indexer, list):\n        return bool(indexer) and (not isinstance(indexer[0], int))\n    return True",
    ".xarray.core.variable.py@@Variable.isel": "def isel(self: T_Variable, indexers: Mapping[Any, Any]=None, missing_dims: ErrorOptionsWithWarn='raise', **indexers_kwargs: Any) -> T_Variable:\n    indexers = either_dict_or_kwargs(indexers, indexers_kwargs, 'isel')\n    indexers = drop_dims_from_indexers(indexers, self.dims, missing_dims)\n    key = tuple((indexers.get(dim, slice(None)) for dim in self.dims))\n    return self[key]",
    ".xarray.core.utils.py@@drop_dims_from_indexers": "def drop_dims_from_indexers(indexers: Mapping[Any, Any], dims: Iterable[Hashable] | Mapping[Any, int], missing_dims: ErrorOptionsWithWarn) -> Mapping[Hashable, Any]:\n    if missing_dims == 'raise':\n        invalid = indexers.keys() - set(dims)\n        if invalid:\n            raise ValueError(f'Dimensions {invalid} do not exist. Expected one or more of {dims}')\n        return indexers\n    elif missing_dims == 'warn':\n        indexers = dict(indexers)\n        invalid = indexers.keys() - set(dims)\n        if invalid:\n            warnings.warn(f'Dimensions {invalid} do not exist. Expected one or more of {dims}')\n        for key in invalid:\n            indexers.pop(key)\n        return indexers\n    elif missing_dims == 'ignore':\n        return {key: val for key, val in indexers.items() if key in dims}\n    else:\n        raise ValueError(f'Unrecognised option {missing_dims} for missing_dims argument')",
    ".xarray.core.variable.py@@Variable.__getitem__": "def __getitem__(self: T_Variable, key) -> T_Variable:\n    dims, indexer, new_order = self._broadcast_indexes(key)\n    data = as_indexable(self._data)[indexer]\n    if new_order:\n        data = np.moveaxis(data, range(len(new_order)), new_order)\n    return self._finalize_indexing_result(dims, data)",
    ".xarray.core.variable.py@@Variable._broadcast_indexes": "def _broadcast_indexes(self, key):\n    key = self._item_key_to_tuple(key)\n    key = indexing.expanded_indexer(key, self.ndim)\n    key = tuple((k.data.item() if isinstance(k, Variable) and k.ndim == 0 else k for k in key))\n    key = tuple((k.item() if isinstance(k, np.ndarray) and k.ndim == 0 else k for k in key))\n    if all((isinstance(k, BASIC_INDEXING_TYPES) for k in key)):\n        return self._broadcast_indexes_basic(key)\n    self._validate_indexers(key)\n    if all((not isinstance(k, Variable) for k in key)):\n        return self._broadcast_indexes_outer(key)\n    dims = []\n    for k, d in zip(key, self.dims):\n        if isinstance(k, Variable):\n            if len(k.dims) > 1:\n                return self._broadcast_indexes_vectorized(key)\n            dims.append(k.dims[0])\n        elif not isinstance(k, integer_types):\n            dims.append(d)\n    if len(set(dims)) == len(dims):\n        return self._broadcast_indexes_outer(key)\n    return self._broadcast_indexes_vectorized(key)",
    ".xarray.core.variable.py@@Variable._item_key_to_tuple": "def _item_key_to_tuple(self, key):\n    if utils.is_dict_like(key):\n        return tuple((key.get(dim, slice(None)) for dim in self.dims))\n    else:\n        return key",
    ".xarray.core.variable.py@@Variable._broadcast_indexes_basic": "def _broadcast_indexes_basic(self, key):\n    dims = tuple((dim for k, dim in zip(key, self.dims) if not isinstance(k, integer_types)))\n    return (dims, BasicIndexer(key), None)",
    ".xarray.core.indexing.py@@BasicIndexer.__init__": "def __init__(self, key):\n    if not isinstance(key, tuple):\n        raise TypeError(f'key must be a tuple: {key!r}')\n    new_key = []\n    for k in key:\n        if isinstance(k, integer_types):\n            k = int(k)\n        elif isinstance(k, slice):\n            k = as_integer_slice(k)\n        else:\n            raise TypeError(f'unexpected indexer type for {type(self).__name__}: {k!r}')\n        new_key.append(k)\n    super().__init__(new_key)",
    ".xarray.core.indexing.py@@ExplicitIndexer.__init__": "def __init__(self, key):\n    if type(self) is ExplicitIndexer:\n        raise TypeError('cannot instantiate base ExplicitIndexer objects')\n    self._key = tuple(key)",
    ".xarray.core.indexing.py@@NumpyIndexingAdapter.__getitem__": "def __getitem__(self, key):\n    array, key = self._indexing_array_and_key(key)\n    return array[key]",
    ".xarray.core.indexing.py@@NumpyIndexingAdapter._indexing_array_and_key": "def _indexing_array_and_key(self, key):\n    if isinstance(key, OuterIndexer):\n        array = self.array\n        key = _outer_to_numpy_indexer(key, self.array.shape)\n    elif isinstance(key, VectorizedIndexer):\n        array = NumpyVIndexAdapter(self.array)\n        key = key.tuple\n    elif isinstance(key, BasicIndexer):\n        array = self.array\n        key = key.tuple + (Ellipsis,)\n    else:\n        raise TypeError(f'unexpected key type: {type(key)}')\n    return (array, key)",
    ".xarray.core.indexing.py@@ExplicitIndexer.tuple": "def tuple(self):\n    return self._key",
    ".xarray.core.variable.py@@Variable._finalize_indexing_result": "def _finalize_indexing_result(self: T_Variable, dims, data) -> T_Variable:\n    return self._replace(dims=dims, data=data)",
    ".xarray.core.indexes.py@@isel_indexes": "def isel_indexes(indexes: Indexes[Index], indexers: Mapping[Any, Any]) -> tuple[dict[Hashable, Index], dict[Hashable, Variable]]:\n    return _apply_indexes(indexes, indexers, 'isel')",
    ".xarray.core.indexes.py@@_apply_indexes": "def _apply_indexes(indexes: Indexes[Index], args: Mapping[Any, Any], func: str) -> tuple[dict[Hashable, Index], dict[Hashable, Variable]]:\n    new_indexes: dict[Hashable, Index] = {k: v for k, v in indexes.items()}\n    new_index_variables: dict[Hashable, Variable] = {}\n    for index, index_vars in indexes.group_by_index():\n        index_dims = {d for var in index_vars.values() for d in var.dims}\n        index_args = {k: v for k, v in args.items() if k in index_dims}\n        if index_args:\n            new_index = getattr(index, func)(index_args)\n            if new_index is not None:\n                new_indexes.update({k: new_index for k in index_vars})\n                new_index_vars = new_index.create_variables(index_vars)\n                new_index_variables.update(new_index_vars)\n            else:\n                for k in index_vars:\n                    new_indexes.pop(k, None)\n    return (new_indexes, new_index_variables)",
    ".xarray.core.indexes.py@@PandasIndex.isel": "def isel(self, indexers: Mapping[Any, int | slice | np.ndarray | Variable]) -> PandasIndex | None:\n    from .variable import Variable\n    indxr = indexers[self.dim]\n    if isinstance(indxr, Variable):\n        if indxr.dims != (self.dim,):\n            return None\n        else:\n            indxr = indxr.data\n    if not isinstance(indxr, slice) and is_scalar(indxr):\n        return None\n    return self._replace(self.index[indxr])",
    ".xarray.core.indexing.py@@PandasIndexingAdapter.__getitem__": "def __getitem__(self, indexer) -> PandasIndexingAdapter | NumpyIndexingAdapter | np.ndarray | np.datetime64 | np.timedelta64:\n    key = indexer.tuple\n    if isinstance(key, tuple) and len(key) == 1:\n        key, = key\n    if getattr(key, 'ndim', 0) > 1:\n        return NumpyIndexingAdapter(np.asarray(self))[indexer]\n    result = self.array[key]\n    if isinstance(result, pd.Index):\n        return type(self)(result, dtype=self.dtype)\n    else:\n        return self._convert_scalar(result)",
    ".xarray.core.indexing.py@@PandasIndexingAdapter._convert_scalar": "def _convert_scalar(self, item):\n    if item is pd.NaT:\n        item = np.datetime64('NaT', 'ns')\n    elif isinstance(item, timedelta):\n        item = np.timedelta64(getattr(item, 'value', item), 'ns')\n    elif isinstance(item, pd.Timestamp):\n        item = np.asarray(item.to_datetime64())\n    elif self.dtype != object:\n        item = np.asarray(item, dtype=self.dtype)\n    return to_0d_array(item)",
    ".xarray.core.utils.py@@to_0d_array": "def to_0d_array(value: Any) -> np.ndarray:\n    if np.isscalar(value) or (isinstance(value, np.ndarray) and value.ndim == 0):\n        return np.array(value)\n    else:\n        return to_0d_object_array(value)",
    ".xarray.core.variable.py@@IndexVariable._finalize_indexing_result": "def _finalize_indexing_result(self, dims, data):\n    if getattr(data, 'ndim', 0) != 1:\n        return Variable(dims, data, self._attrs, self._encoding)\n    else:\n        return self._replace(dims=dims, data=data)",
    ".xarray.core.variable.py@@Variable.__setitem__": "def __setitem__(self, key, value):\n    dims, index_tuple, new_order = self._broadcast_indexes(key)\n    if not isinstance(value, Variable):\n        value = as_compatible_data(value)\n        if value.ndim > len(dims):\n            raise ValueError(f'shape mismatch: value array of shape {value.shape} could not be broadcast to indexing result with {len(dims)} dimensions')\n        if value.ndim == 0:\n            value = Variable((), value)\n        else:\n            value = Variable(dims[-value.ndim:], value)\n    value = value.set_dims(dims).data\n    if new_order:\n        value = duck_array_ops.asarray(value)\n        value = value[(len(dims) - value.ndim) * (np.newaxis,) + (Ellipsis,)]\n        value = np.moveaxis(value, new_order, range(len(new_order)))\n    indexable = as_indexable(self._data)\n    indexable[index_tuple] = value",
    ".xarray.core.indexing.py@@NumpyIndexingAdapter.__setitem__": "def __setitem__(self, key, value):\n    array, key = self._indexing_array_and_key(key)\n    try:\n        array[key] = value\n    except ValueError:\n        if not array.flags.writeable and (not array.flags.owndata):\n            raise ValueError('Assignment destination is a view.  Do you want to .copy() array first?')\n        else:\n            raise",
    ".xarray.core.dataset.py@@_initialize_feasible": "def _initialize_feasible(lb, ub):\n    lb_finite = np.isfinite(lb)\n    ub_finite = np.isfinite(ub)\n    p0 = np.nansum([0.5 * (lb + ub) * int(lb_finite & ub_finite), (lb + 1) * int(lb_finite & ~ub_finite), (ub - 1) * int(~lb_finite & ub_finite)])\n    return p0",
    ".xarray.core.variable.py@@Variable.load": "def load(self, **kwargs):\n    if is_duck_dask_array(self._data):\n        self._data = as_compatible_data(self._data.compute(**kwargs))\n    elif not is_duck_array(self._data):\n        self._data = np.asarray(self._data)\n    return self",
    ".xarray.core._reductions.py@@DataArrayReductions.min": "def min(self, dim: Dims=None, *, skipna: bool | None=None, keep_attrs: bool | None=None, **kwargs: Any) -> DataArray:\n    return self.reduce(duck_array_ops.min, dim=dim, skipna=skipna, keep_attrs=keep_attrs, **kwargs)",
    ".xarray.core.dataarray.py@@DataArray.reduce": "def reduce(self: T_DataArray, func: Callable[..., Any], dim: Dims | ellipsis=None, *, axis: int | Sequence[int] | None=None, keep_attrs: bool | None=None, keepdims: bool=False, **kwargs: Any) -> T_DataArray:\n    var = self.variable.reduce(func, dim, axis, keep_attrs, keepdims, **kwargs)\n    return self._replace_maybe_drop_dims(var)",
    ".xarray.core.variable.py@@Variable.reduce": "def reduce(self, func: Callable[..., Any], dim: Dims | ellipsis=None, axis: int | Sequence[int] | None=None, keep_attrs: bool | None=None, keepdims: bool=False, **kwargs) -> Variable:\n    if dim == ...:\n        dim = None\n    if dim is not None and axis is not None:\n        raise ValueError(\"cannot supply both 'axis' and 'dim' arguments\")\n    if dim is not None:\n        axis = self.get_axis_num(dim)\n    with warnings.catch_warnings():\n        warnings.filterwarnings('ignore', 'Mean of empty slice', category=RuntimeWarning)\n        if axis is not None:\n            if isinstance(axis, tuple) and len(axis) == 1:\n                axis = axis[0]\n            data = func(self.data, axis=axis, **kwargs)\n        else:\n            data = func(self.data, **kwargs)\n    if getattr(data, 'shape', ()) == self.shape:\n        dims = self.dims\n    else:\n        removed_axes: Iterable[int]\n        if axis is None:\n            removed_axes = range(self.ndim)\n        else:\n            removed_axes = np.atleast_1d(axis) % self.ndim\n        if keepdims:\n            slices = tuple((np.newaxis if i in removed_axes else slice(None, None) for i in range(self.ndim)))\n            if getattr(data, 'shape', None) is None:\n                data = np.asanyarray(data)[slices]\n            else:\n                data = data[slices]\n            dims = self.dims\n        else:\n            dims = tuple((adim for n, adim in enumerate(self.dims) if n not in removed_axes))\n    if keep_attrs is None:\n        keep_attrs = _get_keep_attrs(default=False)\n    attrs = self._attrs if keep_attrs else None\n    return Variable(dims, data, attrs=attrs)",
    ".xarray.core.duck_array_ops.py@@f": "def f(values, axis=None, skipna=None, **kwargs):\n    if kwargs.pop('out', None) is not None:\n        raise TypeError(f'`out` is not valid for {name}')\n    if invariant_0d and axis == ():\n        return values\n    values = asarray(values)\n    if coerce_strings and values.dtype.kind in 'SU':\n        values = values.astype(object)\n    func = None\n    if skipna or (skipna is None and values.dtype.kind in 'cfO'):\n        nanname = 'nan' + name\n        func = getattr(nanops, nanname)\n    else:\n        if name in ['sum', 'prod']:\n            kwargs.pop('min_count', None)\n        if hasattr(values, '__array_namespace__'):\n            xp = values.__array_namespace__()\n            func = getattr(xp, name)\n        else:\n            func = getattr(np, name)\n    try:\n        with warnings.catch_warnings():\n            warnings.filterwarnings('ignore', 'All-NaN slice encountered')\n            return func(values, axis=axis, **kwargs)\n    except AttributeError:\n        if not is_duck_dask_array(values):\n            raise\n        try:\n            return func(values, axis=axis, dtype=values.dtype, **kwargs)\n        except (AttributeError, TypeError):\n            raise NotImplementedError(f'{name} is not yet implemented on dask arrays')",
    ".xarray.core.dataarray.py@@DataArray.identical": "def identical(self: T_DataArray, other: T_DataArray) -> bool:\n    try:\n        return self.name == other.name and self._all_compat(other, 'identical')\n    except (TypeError, AttributeError):\n        return False",
    ".xarray.core.variable.py@@Variable.identical": "def identical(self, other, equiv=duck_array_ops.array_equiv):\n    try:\n        return utils.dict_equiv(self.attrs, other.attrs) and self.equals(other, equiv=equiv)\n    except (TypeError, AttributeError):\n        return False",
    ".xarray.core.utils.py@@equivalent": "def equivalent(first: T, second: T) -> bool:\n    from . import duck_array_ops\n    if isinstance(first, np.ndarray) or isinstance(second, np.ndarray):\n        return duck_array_ops.array_equiv(first, second)\n    elif isinstance(first, list) or isinstance(second, list):\n        return list_equiv(first, second)\n    else:\n        return first is second or first == second or (pd.isnull(first) and pd.isnull(second))",
    ".xarray.core.variable.py@@Variable.equals": "def equals(self, other, equiv=duck_array_ops.array_equiv):\n    other = getattr(other, 'variable', other)\n    try:\n        return self.dims == other.dims and (self._data is other._data or equiv(self.data, other.data))\n    except (TypeError, AttributeError):\n        return False",
    ".xarray.core.nanops.py@@nanmin": "def nanmin(a, axis=None, out=None):\n    if a.dtype.kind == 'O':\n        return _nan_minmax_object('min', dtypes.get_pos_infinity(a.dtype), a, axis)\n    return nputils.nanmin(a, axis=axis)",
    ".xarray.core.nputils.py@@f": "def f(values, axis=None, **kwargs):\n    dtype = kwargs.get('dtype', None)\n    bn_func = getattr(bn, name, None)\n    if _USE_BOTTLENECK and OPTIONS['use_bottleneck'] and isinstance(values, np.ndarray) and (bn_func is not None) and (not isinstance(axis, tuple)) and (values.dtype.kind in 'uifc') and values.dtype.isnative and (dtype is None or np.dtype(dtype) == values.dtype):\n        kwargs.pop('dtype', None)\n        result = bn_func(values, axis=axis, **kwargs)\n    else:\n        result = getattr(npmodule, name)(values, axis=axis, **kwargs)\n    return result",
    ".xarray.core.dataarray.py@@DataArray.dtype": "def dtype(self) -> np.dtype:\n    return self.variable.dtype",
    ".xarray.core.variable.py@@_possibly_convert_objects": "def _possibly_convert_objects(values):\n    return np.asarray(pd.Series(values.ravel())).reshape(values.shape)",
    ".xarray.core.dtypes.py@@get_pos_infinity": "def get_pos_infinity(dtype, max_for_int=False):\n    if issubclass(dtype.type, np.floating):\n        return np.inf\n    if issubclass(dtype.type, np.integer):\n        if max_for_int:\n            return np.iinfo(dtype).max\n        else:\n            return np.inf\n    if issubclass(dtype.type, np.complexfloating):\n        return np.inf + 1j * np.inf\n    return INF",
    ".xarray.core.nanops.py@@_nan_minmax_object": "def _nan_minmax_object(func, fill_value, value, axis=None, **kwargs):\n    valid_count = count(value, axis=axis)\n    filled_value = fillna(value, fill_value)\n    data = getattr(np, func)(filled_value, axis=axis, **kwargs)\n    if not hasattr(data, 'dtype'):\n        data = fill_value if valid_count == 0 else data\n        return utils.to_0d_object_array(data)\n    return where_method(data, valid_count != 0)",
    ".xarray.core.duck_array_ops.py@@count": "def count(data, axis=None):\n    return np.sum(np.logical_not(isnull(data)), axis=axis)",
    ".xarray.core.duck_array_ops.py@@fillna": "def fillna(data, other):\n    return where(notnull(data), data, other)",
    ".xarray.core.duck_array_ops.py@@notnull": "def notnull(data):\n    return ~isnull(data)",
    ".xarray.core.duck_array_ops.py@@where": "def where(condition, x, y):\n    return _where(condition, *as_shared_dtype([x, y]))",
    ".xarray.core.duck_array_ops.py@@as_shared_dtype": "def as_shared_dtype(scalars_or_arrays):\n    if any((isinstance(x, cupy_array_type) for x in scalars_or_arrays)):\n        import cupy as cp\n        arrays = [asarray(x, xp=cp) for x in scalars_or_arrays]\n    else:\n        arrays = [asarray(x) for x in scalars_or_arrays]\n    out_type = dtypes.result_type(*arrays)\n    return [x.astype(out_type, copy=False) for x in arrays]",
    ".xarray.core.dtypes.py@@result_type": "def result_type(*arrays_and_dtypes):\n    types = {np.result_type(t).type for t in arrays_and_dtypes}\n    for left, right in PROMOTE_TO_OBJECT:\n        if any((issubclass(t, left) for t in types)) and any((issubclass(t, right) for t in types)):\n            return np.dtype(object)\n    return np.result_type(*arrays_and_dtypes)",
    ".xarray.core.dtypes.py@@AlwaysGreaterThan.__gt__": "def __gt__(self, other):\n    return True",
    ".xarray.core.utils.py@@to_0d_object_array": "def to_0d_object_array(value: Any) -> np.ndarray:\n    result = np.empty((), dtype=object)\n    result[()] = value\n    return result",
    ".xarray.core._reductions.py@@DataArrayReductions.max": "def max(self, dim: Dims=None, *, skipna: bool | None=None, keep_attrs: bool | None=None, **kwargs: Any) -> DataArray:\n    return self.reduce(duck_array_ops.max, dim=dim, skipna=skipna, keep_attrs=keep_attrs, **kwargs)",
    ".xarray.core.nanops.py@@nanmax": "def nanmax(a, axis=None, out=None):\n    if a.dtype.kind == 'O':\n        return _nan_minmax_object('max', dtypes.get_neg_infinity(a.dtype), a, axis)\n    return nputils.nanmax(a, axis=axis)",
    ".xarray.core.dtypes.py@@get_neg_infinity": "def get_neg_infinity(dtype, min_for_int=False):\n    if issubclass(dtype.type, np.floating):\n        return -np.inf\n    if issubclass(dtype.type, np.integer):\n        if min_for_int:\n            return np.iinfo(dtype).min\n        else:\n            return -np.inf\n    if issubclass(dtype.type, np.complexfloating):\n        return -np.inf - 1j * np.inf\n    return NINF",
    ".xarray.core.dtypes.py@@AlwaysLessThan.__lt__": "def __lt__(self, other):\n    return True",
    ".xarray.core.dataarray.py@@DataArray.argmin": "def argmin(self, dim: Dims | ellipsis=None, axis: int | None=None, keep_attrs: bool | None=None, skipna: bool | None=None) -> DataArray | dict[Hashable, DataArray]:\n    result = self.variable.argmin(dim, axis, keep_attrs, skipna)\n    if isinstance(result, dict):\n        return {k: self._replace_maybe_drop_dims(v) for k, v in result.items()}\n    else:\n        return self._replace_maybe_drop_dims(result)",
    ".xarray.core.variable.py@@Variable.argmin": "def argmin(self, dim: Dims | ellipsis=None, axis: int=None, keep_attrs: bool=None, skipna: bool=None) -> Variable | dict[Hashable, Variable]:\n    return self._unravel_argminmax('argmin', dim, axis, keep_attrs, skipna)",
    ".xarray.core.variable.py@@Variable._unravel_argminmax": "def _unravel_argminmax(self, argminmax: str, dim: Dims | ellipsis, axis: int | None, keep_attrs: bool | None, skipna: bool | None) -> Variable | dict[Hashable, Variable]:\n    if dim is None and axis is None:\n        warnings.warn('Behaviour of argmin/argmax with neither dim nor axis argument will change to return a dict of indices of each dimension. To get a single, flat index, please use np.argmin(da.data) or np.argmax(da.data) instead of da.argmin() or da.argmax().', DeprecationWarning, stacklevel=3)\n    argminmax_func = getattr(duck_array_ops, argminmax)\n    if dim is ...:\n        dim = self.dims\n    if dim is None or axis is not None or (not isinstance(dim, Sequence)) or isinstance(dim, str):\n        return self.reduce(argminmax_func, dim=dim, axis=axis, keep_attrs=keep_attrs, skipna=skipna)\n    newdimname = '_unravel_argminmax_dim_0'\n    count = 1\n    while newdimname in self.dims:\n        newdimname = f'_unravel_argminmax_dim_{count}'\n        count += 1\n    stacked = self.stack({newdimname: dim})\n    result_dims = stacked.dims[:-1]\n    reduce_shape = tuple((self.sizes[d] for d in dim))\n    result_flat_indices = stacked.reduce(argminmax_func, axis=-1, skipna=skipna)\n    result_unravelled_indices = duck_array_ops.unravel_index(result_flat_indices.data, reduce_shape)\n    result = {d: Variable(dims=result_dims, data=i) for d, i in zip(dim, result_unravelled_indices)}\n    if keep_attrs is None:\n        keep_attrs = _get_keep_attrs(default=False)\n    if keep_attrs:\n        for v in result.values():\n            v.attrs = self.attrs\n    return result",
    ".xarray.core.nanops.py@@nanargmin": "def nanargmin(a, axis=None):\n    if a.dtype.kind == 'O':\n        fill_value = dtypes.get_pos_infinity(a.dtype)\n        return _nan_argminmax_object('argmin', fill_value, a, axis=axis)\n    return nputils.nanargmin(a, axis=axis)",
    ".xarray.core.nanops.py@@_nan_argminmax_object": "def _nan_argminmax_object(func, fill_value, value, axis=None, **kwargs):\n    valid_count = count(value, axis=axis)\n    value = fillna(value, fill_value)\n    data = getattr(np, func)(value, axis=axis, **kwargs)\n    if (valid_count == 0).any():\n        raise ValueError('All-NaN slice encountered')\n    return data",
    ".xarray.core.dataarray.py@@DataArray.argmax": "def argmax(self, dim: Dims | ellipsis=None, axis: int | None=None, keep_attrs: bool | None=None, skipna: bool | None=None) -> DataArray | dict[Hashable, DataArray]:\n    result = self.variable.argmax(dim, axis, keep_attrs, skipna)\n    if isinstance(result, dict):\n        return {k: self._replace_maybe_drop_dims(v) for k, v in result.items()}\n    else:\n        return self._replace_maybe_drop_dims(result)",
    ".xarray.core.variable.py@@Variable.argmax": "def argmax(self, dim: Dims | ellipsis=None, axis: int=None, keep_attrs: bool=None, skipna: bool=None) -> Variable | dict[Hashable, Variable]:\n    return self._unravel_argminmax('argmax', dim, axis, keep_attrs, skipna)",
    ".xarray.core.nanops.py@@nanargmax": "def nanargmax(a, axis=None):\n    if a.dtype.kind == 'O':\n        fill_value = dtypes.get_neg_infinity(a.dtype)\n        return _nan_argminmax_object('argmax', fill_value, a, axis=axis)\n    return nputils.nanargmax(a, axis=axis)",
    ".xarray.core.dataarray.py@@DataArray.chunk": "def chunk(self: T_DataArray, chunks: int | Literal['auto'] | tuple[int, ...] | tuple[tuple[int, ...], ...] | Mapping[Any, None | int | tuple[int, ...]]={}, name_prefix: str='xarray-', token: str | None=None, lock: bool=False, inline_array: bool=False, **chunks_kwargs: Any) -> T_DataArray:\n    if chunks is None:\n        warnings.warn(\"None value for 'chunks' is deprecated. It will raise an error in the future. Use instead '{}'\", category=FutureWarning)\n        chunks = {}\n    if isinstance(chunks, (float, str, int)):\n        chunks = dict.fromkeys(self.dims, chunks)\n    elif isinstance(chunks, (tuple, list)):\n        chunks = dict(zip(self.dims, chunks))\n    else:\n        chunks = either_dict_or_kwargs(chunks, chunks_kwargs, 'chunk')\n    ds = self._to_temp_dataset().chunk(chunks, name_prefix=name_prefix, token=token, lock=lock, inline_array=inline_array)\n    return self._from_temp_dataset(ds)",
    ".xarray.core.dataset.py@@_maybe_chunk": "def _maybe_chunk(name, var, chunks, token=None, lock=None, name_prefix='xarray-', overwrite_encoded_chunks=False, inline_array=False):\n    from dask.base import tokenize\n    if chunks is not None:\n        chunks = {dim: chunks[dim] for dim in var.dims if dim in chunks}\n    if var.ndim:\n        token2 = tokenize(name, token if token else var._data, chunks)\n        name2 = f'{name_prefix}{name}-{token2}'\n        var = var.chunk(chunks, name=name2, lock=lock, inline_array=inline_array)\n        if overwrite_encoded_chunks and var.chunks is not None:\n            var.encoding['chunks'] = tuple((x[0] for x in var.chunks))\n        return var\n    else:\n        return var",
    ".xarray.core.variable.py@@IndexVariable.chunk": "def chunk(self, chunks={}, name=None, lock=False, inline_array=False):\n    return self.copy(deep=False)",
    ".xarray.core.utils.py@@ReprObject.__dask_tokenize__": "def __dask_tokenize__(self):\n    from dask.base import normalize_token\n    return normalize_token((type(self), self._value))",
    ".xarray.core.utils.py@@ReprObject.__repr__": "def __repr__(self) -> str:\n    return self._value",
    ".xarray.core.variable.py@@Variable.chunk": "def chunk(self, chunks: int | Literal['auto'] | tuple[int, ...] | tuple[tuple[int, ...], ...] | Mapping[Any, None | int | tuple[int, ...]]={}, name: str=None, lock: bool=False, inline_array: bool=False, **chunks_kwargs: Any) -> Variable:\n    import dask.array as da\n    if chunks is None:\n        warnings.warn(\"None value for 'chunks' is deprecated. It will raise an error in the future. Use instead '{}'\", category=FutureWarning)\n        chunks = {}\n    if isinstance(chunks, (float, str, int, tuple, list)):\n        pass\n    else:\n        chunks = either_dict_or_kwargs(chunks, chunks_kwargs, 'chunk')\n    if utils.is_dict_like(chunks):\n        chunks = {self.get_axis_num(dim): chunk for dim, chunk in chunks.items()}\n    data = self._data\n    if is_duck_dask_array(data):\n        data = data.rechunk(chunks)\n    else:\n        if isinstance(data, indexing.ExplicitlyIndexed):\n            data = indexing.ImplicitToExplicitIndexingAdapter(data, indexing.OuterIndexer)\n            kwargs = {'meta': np.ndarray}\n        else:\n            kwargs = {}\n        if utils.is_dict_like(chunks):\n            chunks = tuple((chunks.get(n, s) for n, s in enumerate(self.shape)))\n        data = da.from_array(data, chunks, name=name, lock=lock, inline_array=inline_array, **kwargs)\n    return self._replace(data=data)",
    ".xarray.core.dataarray.py@@DataArray.idxmin": "def idxmin(self, dim: Hashable | None=None, skipna: bool | None=None, fill_value: Any=dtypes.NA, keep_attrs: bool | None=None) -> DataArray:\n    return computation._calc_idxminmax(array=self, func=lambda x, *args, **kwargs: x.argmin(*args, **kwargs), dim=dim, skipna=skipna, fill_value=fill_value, keep_attrs=keep_attrs)",
    ".xarray.core.computation.py@@_calc_idxminmax": "def _calc_idxminmax(*, array, func: Callable, dim: Hashable=None, skipna: bool=None, fill_value: Any=dtypes.NA, keep_attrs: bool=None):\n    if not array.ndim:\n        raise ValueError('This function does not apply for scalars')\n    if dim is not None:\n        pass\n    elif array.ndim == 1:\n        dim = array.dims[0]\n    else:\n        raise ValueError(\"Must supply 'dim' argument for multidimensional arrays\")\n    if dim not in array.dims:\n        raise KeyError(f'Dimension \"{dim}\" not in dimension')\n    if dim not in array.coords:\n        raise KeyError(f'Dimension \"{dim}\" does not have coordinates')\n    na_dtypes = 'cfO'\n    if skipna or (skipna is None and array.dtype.kind in na_dtypes):\n        allna = array.isnull().all(dim)\n        array = array.where(~allna, 0)\n    indx = func(array, dim=dim, axis=None, keep_attrs=keep_attrs, skipna=skipna)\n    if is_duck_dask_array(array.data):\n        import dask.array\n        chunks = dict(zip(array.dims, array.chunks))\n        dask_coord = dask.array.from_array(array[dim].data, chunks=chunks[dim])\n        res = indx.copy(data=dask_coord[indx.data.ravel()].reshape(indx.shape))\n        res.name = dim\n    else:\n        res = array[dim][indx,]\n        del res.coords[dim]\n    if skipna or (skipna is None and array.dtype.kind in na_dtypes):\n        res = res.where(~allna, fill_value)\n    res.attrs = indx.attrs\n    return res",
    ".xarray.core._typed_ops.py@@DataArrayOpsMixin.__mul__": "def __mul__(self, other):\n    return self._binary_op(other, operator.mul)",
    ".xarray.core.dataarray.py@@DataArray._binary_op": "def _binary_op(self: T_DataArray, other: Any, f: Callable, reflexive: bool=False) -> T_DataArray:\n    from .groupby import GroupBy\n    if isinstance(other, (Dataset, GroupBy)):\n        return NotImplemented\n    if isinstance(other, DataArray):\n        align_type = OPTIONS['arithmetic_join']\n        self, other = align(self, other, join=align_type, copy=False)\n    other_variable = getattr(other, 'variable', other)\n    other_coords = getattr(other, 'coords', None)\n    variable = f(self.variable, other_variable) if not reflexive else f(other_variable, self.variable)\n    coords, indexes = self.coords._merge_raw(other_coords, reflexive)\n    name = self._result_name(other)\n    return self._replace(variable, coords, name, indexes=indexes)",
    ".xarray.core._typed_ops.py@@VariableOpsMixin.__mul__": "def __mul__(self, other):\n    return self._binary_op(other, operator.mul)",
    ".xarray.core.variable.py@@Variable._binary_op": "def _binary_op(self, other, f, reflexive=False):\n    if isinstance(other, (xr.DataArray, xr.Dataset)):\n        return NotImplemented\n    if reflexive and issubclass(type(self), type(other)):\n        other_data, self_data, dims = _broadcast_compat_data(other, self)\n    else:\n        self_data, other_data, dims = _broadcast_compat_data(self, other)\n    keep_attrs = _get_keep_attrs(default=False)\n    attrs = self._attrs if keep_attrs else None\n    with np.errstate(all='ignore'):\n        new_data = f(self_data, other_data) if not reflexive else f(other_data, self_data)\n    result = Variable(dims, new_data, attrs=attrs)\n    return result",
    ".xarray.core.variable.py@@_broadcast_compat_data": "def _broadcast_compat_data(self, other):\n    if all((hasattr(other, attr) for attr in ['dims', 'data', 'shape', 'encoding'])):\n        new_self, new_other = _broadcast_compat_variables(self, other)\n        self_data = new_self.data\n        other_data = new_other.data\n        dims = new_self.dims\n    else:\n        self_data = self.data\n        other_data = other\n        dims = self.dims\n    return (self_data, other_data, dims)",
    ".xarray.core.coordinates.py@@Coordinates._merge_raw": "def _merge_raw(self, other, reflexive):\n    if other is None:\n        variables = dict(self.variables)\n        indexes = dict(self.xindexes)\n    else:\n        coord_list = [self, other] if not reflexive else [other, self]\n        variables, indexes = merge_coordinates_without_align(coord_list)\n    return (variables, indexes)",
    ".xarray.core.dataarray.py@@DataArray._result_name": "def _result_name(self, other: Any=None) -> Hashable | None:\n    other_name = getattr(other, 'name', _default)\n    if other_name is _default or other_name == self.name:\n        return self.name\n    else:\n        return None",
    ".xarray.core.common.py@@DataWithCoords.astype": "def astype(self: T_DataWithCoords, dtype, *, order=None, casting=None, subok=None, copy=None, keep_attrs=True) -> T_DataWithCoords:\n    from .computation import apply_ufunc\n    kwargs = dict(order=order, casting=casting, subok=subok, copy=copy)\n    kwargs = {k: v for k, v in kwargs.items() if v is not None}\n    return apply_ufunc(duck_array_ops.astype, self, dtype, kwargs=kwargs, keep_attrs=keep_attrs, dask='allowed')",
    ".xarray.core.computation.py@@_first_of_type": "def _first_of_type(args, kind):\n    for arg in args:\n        if isinstance(arg, kind):\n            return arg\n    raise ValueError('This should be unreachable.')",
    ".xarray.core.duck_array_ops.py@@astype": "def astype(data, dtype, **kwargs):\n    return data.astype(dtype, **kwargs)",
    ".xarray.core.dataarray.py@@DataArray.chunks": "def chunks(self) -> tuple[tuple[int, ...], ...] | None:\n    return self.variable.chunks",
    ".xarray.core.variable.py@@Variable.chunks": "def chunks(self) -> tuple[tuple[int, ...], ...] | None:\n    return getattr(self._data, 'chunks', None)",
    ".xarray.core.common.py@@DataWithCoords.isnull": "def isnull(self: T_DataWithCoords, keep_attrs: bool | None=None) -> T_DataWithCoords:\n    from .computation import apply_ufunc\n    if keep_attrs is None:\n        keep_attrs = _get_keep_attrs(default=False)\n    return apply_ufunc(duck_array_ops.isnull, self, dask='allowed', keep_attrs=keep_attrs)",
    ".xarray.core._reductions.py@@DataArrayReductions.all": "def all(self, dim: Dims=None, *, keep_attrs: bool | None=None, **kwargs: Any) -> DataArray:\n    return self.reduce(duck_array_ops.array_all, dim=dim, keep_attrs=keep_attrs, **kwargs)",
    ".xarray.core._typed_ops.py@@DataArrayOpsMixin.__invert__": "def __invert__(self):\n    return self._unary_op(operator.invert)",
    ".xarray.core.dataarray.py@@DataArray._unary_op": "def _unary_op(self: T_DataArray, f: Callable, *args, **kwargs) -> T_DataArray:\n    keep_attrs = kwargs.pop('keep_attrs', None)\n    if keep_attrs is None:\n        keep_attrs = _get_keep_attrs(default=True)\n    with warnings.catch_warnings():\n        warnings.filterwarnings('ignore', 'All-NaN (slice|axis) encountered')\n        warnings.filterwarnings('ignore', 'Mean of empty slice', category=RuntimeWarning)\n        with np.errstate(all='ignore'):\n            da = self.__array_wrap__(f(self.variable.data, *args, **kwargs))\n        if keep_attrs:\n            da.attrs = self.attrs\n        return da",
    ".xarray.core.dataarray.py@@DataArray.__array_wrap__": "def __array_wrap__(self: T_DataArray, obj, context=None) -> T_DataArray:\n    new_var = self.variable.__array_wrap__(obj, context)\n    return self._replace(new_var)",
    ".xarray.core.variable.py@@Variable.__array_wrap__": "def __array_wrap__(self, obj, context=None):\n    return Variable(self.dims, obj)",
    ".xarray.core.common.py@@DataWithCoords.where": "def where(self: T_DataWithCoords, cond: Any, other: Any=dtypes.NA, drop: bool=False) -> T_DataWithCoords:\n    from .alignment import align\n    from .dataarray import DataArray\n    from .dataset import Dataset\n    if callable(cond):\n        cond = cond(self)\n    if drop:\n        if not isinstance(cond, (Dataset, DataArray)):\n            raise TypeError(f'cond argument is {cond!r} but must be a {Dataset!r} or {DataArray!r}')\n        self, cond = align(self, cond)\n\n        def _dataarray_indexer(dim: Hashable) -> DataArray:\n            return cond.any(dim=(d for d in cond.dims if d != dim))\n\n        def _dataset_indexer(dim: Hashable) -> DataArray:\n            cond_wdim = cond.drop_vars((var for var in cond if dim not in cond[var].dims))\n            keepany = cond_wdim.any(dim=(d for d in cond.dims.keys() if d != dim))\n            return keepany.to_array().any('variable')\n        _get_indexer = _dataarray_indexer if isinstance(cond, DataArray) else _dataset_indexer\n        indexers = {}\n        for dim in cond.sizes.keys():\n            indexers[dim] = _get_indexer(dim)\n        self = self.isel(**indexers)\n        cond = cond.isel(**indexers)\n    return ops.where_method(self, cond, other)",
    ".xarray.core.ops.py@@where_method": "def where_method(self, cond, other=dtypes.NA):\n    from .computation import apply_ufunc\n    join = 'inner' if other is dtypes.NA else 'exact'\n    return apply_ufunc(duck_array_ops.where_method, self, cond, other, join=join, dataset_join=join, dask='allowed', keep_attrs=True)",
    ".xarray.core.duck_array_ops.py@@where_method": "def where_method(data, cond, other=dtypes.NA):\n    if other is dtypes.NA:\n        other = dtypes.get_fill_value(data.dtype)\n    return where(cond, data, other)",
    ".xarray.core.dtypes.py@@get_fill_value": "def get_fill_value(dtype):\n    _, fill_value = maybe_promote(dtype)\n    return fill_value",
    ".xarray.core.dtypes.py@@maybe_promote": "def maybe_promote(dtype):\n    if np.issubdtype(dtype, np.floating):\n        fill_value = np.nan\n    elif np.issubdtype(dtype, np.timedelta64):\n        fill_value = np.timedelta64('NaT')\n    elif np.issubdtype(dtype, np.integer):\n        dtype = np.float32 if dtype.itemsize <= 2 else np.float64\n        fill_value = np.nan\n    elif np.issubdtype(dtype, np.complexfloating):\n        fill_value = np.nan + np.nan * 1j\n    elif np.issubdtype(dtype, np.datetime64):\n        fill_value = np.datetime64('NaT')\n    else:\n        dtype = object\n        fill_value = np.nan\n    return (np.dtype(dtype), fill_value)",
    ".xarray.core.indexing.py@@as_integer_slice": "def as_integer_slice(value):\n    start = as_integer_or_none(value.start)\n    stop = as_integer_or_none(value.stop)\n    step = as_integer_or_none(value.step)\n    return slice(start, stop, step)",
    ".xarray.core.indexing.py@@as_integer_or_none": "def as_integer_or_none(value):\n    return None if value is None else operator.index(value)",
    ".xarray.core.coordinates.py@@DatasetCoordinates._names": "def _names(self) -> set[Hashable]:\n    return self._data._coord_names",
    ".xarray.core.variable.py@@Variable.to_base_variable": "def to_base_variable(self) -> Variable:\n    return Variable(self._dims, self._data, self._attrs, encoding=self._encoding, fastpath=True)",
    ".xarray.core.coordinates.py@@assert_coordinate_consistent": "def assert_coordinate_consistent(obj: DataArray | Dataset, coords: Mapping[Any, Variable]) -> None:\n    for k in obj.dims:\n        if k in coords and k in obj.coords and (not coords[k].equals(obj[k].variable)):\n            raise IndexError(f'dimension coordinate {k!r} conflicts between indexed and indexing objects:\\n{obj[k]}\\nvs.\\n{coords[k]}')",
    ".xarray.core.coordinates.py@@DataArrayCoordinates.__delitem__": "def __delitem__(self, key: Hashable) -> None:\n    if key not in self:\n        raise KeyError(f'{key!r} is not a coordinate variable.')\n    assert_no_index_corrupted(self._data.xindexes, {key})\n    del self._data._coords[key]\n    if self._data._indexes is not None and key in self._data._indexes:\n        del self._data._indexes[key]",
    ".xarray.core.indexes.py@@assert_no_index_corrupted": "def assert_no_index_corrupted(indexes: Indexes[Index], coord_names: set[Hashable], action: str='remove coordinate(s)') -> None:\n    for index, index_coords in indexes.group_by_index():\n        common_names = set(index_coords) & coord_names\n        if common_names and len(common_names) != len(index_coords):\n            common_names_str = ', '.join((f'{k!r}' for k in common_names))\n            index_names_str = ', '.join((f'{k!r}' for k in index_coords))\n            raise ValueError(f'cannot {action} {common_names_str}, which would corrupt the following index built from coordinates {index_names_str}:\\n{index}')",
    ".xarray.core.dataarray.py@@DataArray.idxmax": "def idxmax(self, dim: Hashable=None, skipna: bool | None=None, fill_value: Any=dtypes.NA, keep_attrs: bool | None=None) -> DataArray:\n    return computation._calc_idxminmax(array=self, func=lambda x, *args, **kwargs: x.argmax(*args, **kwargs), dim=dim, skipna=skipna, fill_value=fill_value, keep_attrs=keep_attrs)",
    ".xarray.core.variable.py@@Variable.stack": "def stack(self, dimensions=None, **dimensions_kwargs):\n    dimensions = either_dict_or_kwargs(dimensions, dimensions_kwargs, 'stack')\n    result = self\n    for new_dim, dims in dimensions.items():\n        result = result._stack_once(dims, new_dim)\n    return result",
    ".xarray.core.variable.py@@Variable._stack_once": "def _stack_once(self, dims: list[Hashable], new_dim: Hashable):\n    if not set(dims) <= set(self.dims):\n        raise ValueError(f'invalid existing dimensions: {dims}')\n    if new_dim in self.dims:\n        raise ValueError('cannot create a new dimension with the same name as an existing dimension')\n    if len(dims) == 0:\n        return self.copy(deep=False)\n    other_dims = [d for d in self.dims if d not in dims]\n    dim_order = other_dims + list(dims)\n    reordered = self.transpose(*dim_order)\n    new_shape = reordered.shape[:len(other_dims)] + (-1,)\n    new_data = reordered.data.reshape(new_shape)\n    new_dims = reordered.dims[:len(other_dims)] + (new_dim,)\n    return Variable(new_dims, new_data, self._attrs, self._encoding, fastpath=True)",
    ".xarray.core.dataarray.py@@DataArray.__deepcopy__": "def __deepcopy__(self: T_DataArray, memo=None) -> T_DataArray:\n    return self.copy(deep=True)",
    ".xarray.core.concat.py@@concat": "def concat(objs: Iterable[T_Dataset], dim: Hashable | T_DataArray | pd.Index, data_vars: ConcatOptions | list[Hashable]='all', coords: ConcatOptions | list[Hashable]='different', compat: CompatOptions='equals', positions: Iterable[Iterable[int]] | None=None, fill_value: object=dtypes.NA, join: JoinOptions='outer', combine_attrs: CombineAttrsOptions='override') -> T_Dataset:\n    ...",
    ".xarray.core.utils.py@@peek_at": "def peek_at(iterable: Iterable[T]) -> tuple[T, Iterator[T]]:\n    gen = iter(iterable)\n    peek = next(gen)\n    return (peek, itertools.chain([peek], gen))",
    ".xarray.core.concat.py@@_dataarray_concat": "def _dataarray_concat(arrays: Iterable[T_DataArray], dim: str | T_DataArray | pd.Index, data_vars: str | list[str], coords: str | list[str], compat: CompatOptions, positions: Iterable[Iterable[int]] | None, fill_value: object=dtypes.NA, join: JoinOptions='outer', combine_attrs: CombineAttrsOptions='override') -> T_DataArray:\n    from .dataarray import DataArray\n    arrays = list(arrays)\n    if not all((isinstance(array, DataArray) for array in arrays)):\n        raise TypeError(\"The elements in the input list need to be either all 'Dataset's or all 'DataArray's\")\n    if data_vars != 'all':\n        raise ValueError('data_vars is not a valid argument when concatenating DataArray objects')\n    datasets = []\n    for n, arr in enumerate(arrays):\n        if n == 0:\n            name = arr.name\n        elif name != arr.name:\n            if compat == 'identical':\n                raise ValueError('array names not identical')\n            else:\n                arr = cast(T_DataArray, arr.rename(name))\n        datasets.append(arr._to_temp_dataset())\n    ds = _dataset_concat(datasets, dim, data_vars, coords, compat, positions, fill_value=fill_value, join=join, combine_attrs=combine_attrs)\n    merged_attrs = merge_attrs([da.attrs for da in arrays], combine_attrs)\n    result = arrays[0]._from_temp_dataset(ds, name)\n    result.attrs = merged_attrs\n    return result",
    ".xarray.core.concat.py@@_dataset_concat": "def _dataset_concat(datasets: list[T_Dataset], dim: str | T_DataArray | pd.Index, data_vars: str | list[str], coords: str | list[str], compat: CompatOptions, positions: Iterable[Iterable[int]] | None, fill_value: object=dtypes.NA, join: JoinOptions='outer', combine_attrs: CombineAttrsOptions='override') -> T_Dataset:\n    from .dataarray import DataArray\n    from .dataset import Dataset\n    datasets = list(datasets)\n    if not all((isinstance(dataset, Dataset) for dataset in datasets)):\n        raise TypeError(\"The elements in the input list need to be either all 'Dataset's or all 'DataArray's\")\n    if isinstance(dim, DataArray):\n        dim_var = dim.variable\n    elif isinstance(dim, Variable):\n        dim_var = dim\n    else:\n        dim_var = None\n    dim, index = _calc_concat_dim_index(dim)\n    datasets = [ds.copy() for ds in datasets]\n    datasets = list(align(*datasets, join=join, copy=False, exclude=[dim], fill_value=fill_value))\n    dim_coords, dims_sizes, coord_names, data_names = _parse_datasets(datasets)\n    dim_names = set(dim_coords)\n    unlabeled_dims = dim_names - coord_names\n    both_data_and_coords = coord_names & data_names\n    if both_data_and_coords:\n        raise ValueError(f'{both_data_and_coords!r} is a coordinate in some datasets but not others.')\n    dim_coords.pop(dim, None)\n    dims_sizes.pop(dim, None)\n    if (dim in coord_names or dim in data_names) and dim not in dim_names:\n        datasets = [cast(T_Dataset, ds.expand_dims(dim)) for ds in datasets]\n    concat_over, equals, concat_dim_lengths = _calc_concat_over(datasets, dim, dim_names, data_vars, coords, compat)\n    variables_to_merge = (coord_names | data_names) - concat_over - unlabeled_dims\n    result_vars = {}\n    result_indexes = {}\n    if variables_to_merge:\n        grouped = {k: v for k, v in collect_variables_and_indexes(list(datasets)).items() if k in variables_to_merge}\n        merged_vars, merged_indexes = merge_collected(grouped, compat=compat, equals=equals)\n        result_vars.update(merged_vars)\n        result_indexes.update(merged_indexes)\n    result_vars.update(dim_coords)\n    result_attrs = merge_attrs([ds.attrs for ds in datasets], combine_attrs)\n    result_encoding = datasets[0].encoding\n    for ds in datasets[1:]:\n        if compat == 'identical' and (not utils.dict_equiv(ds.attrs, result_attrs)):\n            raise ValueError('Dataset global attributes not equal.')\n\n    def ensure_common_dims(vars):\n        common_dims = tuple(pd.unique([d for v in vars for d in v.dims]))\n        if dim not in common_dims:\n            common_dims = (dim,) + common_dims\n        for var, dim_len in zip(vars, concat_dim_lengths):\n            if var.dims != common_dims:\n                common_shape = tuple((dims_sizes.get(d, dim_len) for d in common_dims))\n                var = var.set_dims(common_dims, common_shape)\n            yield var\n\n    def get_indexes(name):\n        for ds in datasets:\n            if name in ds._indexes:\n                yield ds._indexes[name]\n            elif name == dim:\n                var = ds._variables[name]\n                if not var.dims:\n                    data = var.set_dims(dim).values\n                    yield PandasIndex(data, dim, coord_dtype=var.dtype)\n    for name in datasets[0].variables:\n        if name in concat_over and name not in result_indexes:\n            try:\n                vars = ensure_common_dims([ds[name].variable for ds in datasets])\n            except KeyError:\n                raise ValueError(f'{name!r} is not present in all datasets.')\n            indexes: list[Index] = list(get_indexes(name))\n            if indexes:\n                if len(indexes) < len(datasets):\n                    raise ValueError(f'{name!r} must have either an index or no index in all datasets, found {len(indexes)}/{len(datasets)} datasets with an index.')\n                combined_idx = indexes[0].concat(indexes, dim, positions)\n                if name in datasets[0]._indexes:\n                    idx_vars = datasets[0].xindexes.get_all_coords(name)\n                else:\n                    idx_vars = {name: datasets[0][name].variable}\n                result_indexes.update({k: combined_idx for k in idx_vars})\n                combined_idx_vars = combined_idx.create_variables(idx_vars)\n                for k, v in combined_idx_vars.items():\n                    v.attrs = merge_attrs([ds.variables[k].attrs for ds in datasets], combine_attrs=combine_attrs)\n                    result_vars[k] = v\n            else:\n                combined_var = concat_vars(vars, dim, positions, combine_attrs=combine_attrs)\n                result_vars[name] = combined_var\n        elif name in result_vars:\n            result_vars[name] = result_vars.pop(name)\n    result = type(datasets[0])(result_vars, attrs=result_attrs)\n    absent_coord_names = coord_names - set(result.variables)\n    if absent_coord_names:\n        raise ValueError(f'Variables {absent_coord_names!r} are coordinates in some datasets but not others.')\n    result = result.set_coords(coord_names)\n    result.encoding = result_encoding\n    result = result.drop_vars(unlabeled_dims, errors='ignore')\n    if index is not None:\n        if dim_var is not None:\n            index_vars = index.create_variables({dim: dim_var})\n        else:\n            index_vars = index.create_variables()\n        result[dim] = index_vars[dim]\n        result_indexes[dim] = index\n    result = result._overwrite_indexes(result_indexes)\n    return result",
    ".xarray.core.concat.py@@_calc_concat_dim_index": "def _calc_concat_dim_index(dim_or_data: Hashable | Any) -> tuple[Hashable, PandasIndex | None]:\n    from .dataarray import DataArray\n    dim: Hashable | None\n    if isinstance(dim_or_data, str):\n        dim = dim_or_data\n        index = None\n    else:\n        if not isinstance(dim_or_data, (DataArray, Variable)):\n            dim = getattr(dim_or_data, 'name', None)\n            if dim is None:\n                dim = 'concat_dim'\n        else:\n            dim, = dim_or_data.dims\n        coord_dtype = getattr(dim_or_data, 'dtype', None)\n        index = PandasIndex(dim_or_data, dim, coord_dtype=coord_dtype)\n    return (dim, index)",
    ".xarray.core.concat.py@@_parse_datasets": "def _parse_datasets(datasets: Iterable[T_Dataset]) -> tuple[dict[Hashable, Variable], dict[Hashable, int], set[Hashable], set[Hashable]]:\n    dims: set[Hashable] = set()\n    all_coord_names: set[Hashable] = set()\n    data_vars: set[Hashable] = set()\n    dim_coords: dict[Hashable, Variable] = {}\n    dims_sizes: dict[Hashable, int] = {}\n    for ds in datasets:\n        dims_sizes.update(ds.dims)\n        all_coord_names.update(ds.coords)\n        data_vars.update(ds.data_vars)\n        for dim in ds.dims:\n            if dim in dims:\n                continue\n            if dim not in dim_coords:\n                dim_coords[dim] = ds.coords[dim].variable\n        dims = dims | set(ds.dims)\n    return (dim_coords, dims_sizes, all_coord_names, data_vars)",
    ".xarray.core.concat.py@@_calc_concat_over": "def _calc_concat_over(datasets, dim, dim_names, data_vars, coords, compat):\n    concat_over = set()\n    equals = {}\n    if dim in dim_names:\n        concat_over_existing_dim = True\n        concat_over.add(dim)\n    else:\n        concat_over_existing_dim = False\n    concat_dim_lengths = []\n    for ds in datasets:\n        if concat_over_existing_dim:\n            if dim not in ds.dims:\n                if dim in ds:\n                    ds = ds.set_coords(dim)\n        concat_over.update((k for k, v in ds.variables.items() if dim in v.dims))\n        concat_dim_lengths.append(ds.dims.get(dim, 1))\n\n    def process_subset_opt(opt, subset):\n        if isinstance(opt, str):\n            if opt == 'different':\n                if compat == 'override':\n                    raise ValueError(f\"Cannot specify both {subset}='different' and compat='override'.\")\n                for k in getattr(datasets[0], subset):\n                    if k not in concat_over:\n                        equals[k] = None\n                        variables = [ds.variables[k] for ds in datasets if k in ds.variables]\n                        if len(variables) == 1:\n                            break\n                        elif len(variables) != len(datasets) and opt == 'different':\n                            raise ValueError(f\"{k!r} not present in all datasets and coords='different'. Either add {k!r} to datasets where it is missing or specify coords='minimal'.\")\n                        for var in variables[1:]:\n                            equals[k] = getattr(variables[0], compat)(var, equiv=lazy_array_equiv)\n                            if equals[k] is not True:\n                                break\n                        if equals[k] is False:\n                            concat_over.add(k)\n                        elif equals[k] is None:\n                            v_lhs = datasets[0].variables[k].load()\n                            computed = []\n                            for ds_rhs in datasets[1:]:\n                                v_rhs = ds_rhs.variables[k].compute()\n                                computed.append(v_rhs)\n                                if not getattr(v_lhs, compat)(v_rhs):\n                                    concat_over.add(k)\n                                    equals[k] = False\n                                    for ds, v in zip(datasets[1:], computed):\n                                        ds.variables[k].data = v.data\n                                    break\n                            else:\n                                equals[k] = True\n            elif opt == 'all':\n                concat_over.update(set(getattr(datasets[0], subset)) - set(datasets[0].dims))\n            elif opt == 'minimal':\n                pass\n            else:\n                raise ValueError(f'unexpected value for {subset}: {opt}')\n        else:\n            invalid_vars = [k for k in opt if k not in getattr(datasets[0], subset)]\n            if invalid_vars:\n                if subset == 'coords':\n                    raise ValueError(f'some variables in coords are not coordinates on the first dataset: {invalid_vars}')\n                else:\n                    raise ValueError(f'some variables in data_vars are not data variables on the first dataset: {invalid_vars}')\n            concat_over.update(opt)\n    process_subset_opt(data_vars, 'data_vars')\n    process_subset_opt(coords, 'coords')\n    return (concat_over, equals, concat_dim_lengths)",
    ".xarray.core.concat.py@@process_subset_opt": "def process_subset_opt(opt, subset):\n    if isinstance(opt, str):\n        if opt == 'different':\n            if compat == 'override':\n                raise ValueError(f\"Cannot specify both {subset}='different' and compat='override'.\")\n            for k in getattr(datasets[0], subset):\n                if k not in concat_over:\n                    equals[k] = None\n                    variables = [ds.variables[k] for ds in datasets if k in ds.variables]\n                    if len(variables) == 1:\n                        break\n                    elif len(variables) != len(datasets) and opt == 'different':\n                        raise ValueError(f\"{k!r} not present in all datasets and coords='different'. Either add {k!r} to datasets where it is missing or specify coords='minimal'.\")\n                    for var in variables[1:]:\n                        equals[k] = getattr(variables[0], compat)(var, equiv=lazy_array_equiv)\n                        if equals[k] is not True:\n                            break\n                    if equals[k] is False:\n                        concat_over.add(k)\n                    elif equals[k] is None:\n                        v_lhs = datasets[0].variables[k].load()\n                        computed = []\n                        for ds_rhs in datasets[1:]:\n                            v_rhs = ds_rhs.variables[k].compute()\n                            computed.append(v_rhs)\n                            if not getattr(v_lhs, compat)(v_rhs):\n                                concat_over.add(k)\n                                equals[k] = False\n                                for ds, v in zip(datasets[1:], computed):\n                                    ds.variables[k].data = v.data\n                                break\n                        else:\n                            equals[k] = True\n        elif opt == 'all':\n            concat_over.update(set(getattr(datasets[0], subset)) - set(datasets[0].dims))\n        elif opt == 'minimal':\n            pass\n        else:\n            raise ValueError(f'unexpected value for {subset}: {opt}')\n    else:\n        invalid_vars = [k for k in opt if k not in getattr(datasets[0], subset)]\n        if invalid_vars:\n            if subset == 'coords':\n                raise ValueError(f'some variables in coords are not coordinates on the first dataset: {invalid_vars}')\n            else:\n                raise ValueError(f'some variables in data_vars are not data variables on the first dataset: {invalid_vars}')\n        concat_over.update(opt)"
}