{
    ".sympy.utilities.iterables.py@@iterable": "def iterable(i, exclude=(str, dict, NotIterable)):\n    if hasattr(i, '_iterable'):\n        return i._iterable\n    try:\n        iter(i)\n    except TypeError:\n        return False\n    if exclude:\n        return not isinstance(i, exclude)\n    return True",
    ".sympy.core.basic.py@@Basic.__hash__": "def __hash__(self) -> int:\n    h = self._mhash\n    if h is None:\n        h = hash((type(self).__name__,) + self._hashable_content())\n        self._mhash = h\n    return h",
    ".sympy.core.basic.py@@Basic.args": "def args(self) -> 'Tuple[Basic, ...]':\n    return self._args",
    ".sympy.core.containers.py@@Tuple.__iter__": "def __iter__(self):\n    return iter(self.args)",
    ".sympy.core.expr.py@@Expr._hashable_content": "def _hashable_content(self):\n    return self._args",
    ".sympy.core.numbers.py@@Integer.__hash__": "def __hash__(self):\n    return hash(self.p)",
    ".sympy.core.basic.py@@Basic.__eq__": "def __eq__(self, other):\n    if self is other:\n        return True\n    if not isinstance(other, Basic):\n        if iterable(other, exclude=(str, NotIterable)) and (not hasattr(other, '_sympy_')):\n            return False\n        try:\n            other = _sympify(other)\n        except (SympifyError, SyntaxError):\n            return NotImplemented\n    if not (self.is_Number and other.is_Number) and type(self) != type(other):\n        return False\n    a, b = (self._hashable_content(), other._hashable_content())\n    if a != b:\n        return False\n    for a, b in zip(a, b):\n        if not isinstance(a, Basic):\n            continue\n        if a.is_Number and type(a) != type(b):\n            return False\n    return True",
    ".sympy.core.function.py@@Subs.__hash__": "def __hash__(self):\n    return super().__hash__()",
    ".sympy.functions.elementary.piecewise.py@@ExprCondPair.__iter__": "def __iter__(self):\n    yield self.expr\n    yield self.cond",
    ".sympy.functions.elementary.piecewise.py@@ExprCondPair.expr": "def expr(self):\n    return self.args[0]"
}