{
    ".sympy.utilities.iterables.py@@is_sequence": "def is_sequence(i, include=None):\n    return hasattr(i, '__getitem__') and iterable(i) or (bool(include) and isinstance(i, include))",
    ".sympy.core.basic.py@@Basic.__hash__": "def __hash__(self) -> int:\n    h = self._mhash\n    if h is None:\n        h = hash((type(self).__name__,) + self._hashable_content())\n        self._mhash = h\n    return h",
    ".sympy.core.basic.py@@Basic.free_symbols": "def free_symbols(self) -> set[Basic]:\n    empty: set[Basic] = set()\n    return empty.union(*(a.free_symbols for a in self.args))",
    ".sympy.core.basic.py@@Basic.args": "def args(self) -> tuple[Basic, ...]:\n    return self._args",
    ".sympy.core.symbol.py@@Symbol.free_symbols": "def free_symbols(self):\n    return {self}",
    ".sympy.core.basic.py@@Basic.__ne__": "def __ne__(self, other):\n    return not self == other",
    ".sympy.core.basic.py@@Basic.__eq__": "def __eq__(self, other):\n    if self is other:\n        return True\n    if not isinstance(other, Basic):\n        return self._do_eq_sympify(other)\n    if not (self.is_Number and other.is_Number) and type(self) != type(other):\n        return False\n    a, b = (self._hashable_content(), other._hashable_content())\n    if a != b:\n        return False\n    for a, b in zip(a, b):\n        if not isinstance(a, Basic):\n            continue\n        if a.is_Number and type(a) != type(b):\n            return False\n    return True",
    ".sympy.core.symbol.py@@Symbol._hashable_content": "def _hashable_content(self):\n    return (self.name,) + tuple(sorted(self.assumptions0.items()))",
    ".sympy.core.symbol.py@@Symbol.assumptions0": "def assumptions0(self):\n    return {key: value for key, value in self._assumptions.items() if value is not None}",
    ".sympy.core.function.py@@Function.__new__": "def __new__(cls, *args, **options):\n    if cls is Function:\n        return UndefinedFunction(*args, **options)\n    n = len(args)\n    if n not in cls.nargs:\n        temp = '%(name)s takes %(qual)s %(args)s argument%(plural)s (%(given)s given)'\n        raise TypeError(temp % {'name': cls, 'qual': 'exactly' if len(cls.nargs) == 1 else 'at least', 'args': min(cls.nargs), 'plural': 's' * (min(cls.nargs) != 1), 'given': n})\n    evaluate = options.get('evaluate', global_parameters.evaluate)\n    result = super().__new__(cls, *args, **options)\n    if evaluate and isinstance(result, cls) and result.args:\n        pr2 = min((cls._should_evalf(a) for a in result.args))\n        if pr2 > 0:\n            pr = max((cls._should_evalf(a) for a in result.args))\n            result = result.evalf(prec_to_dps(pr))\n    return _sympify(result)",
    ".sympy.core.function.py@@UndefinedFunction.__new__": "def __new__(mcl, name, bases=(AppliedUndef,), __dict__=None, **kwargs):\n    from .symbol import _filter_assumptions\n    assumptions, kwargs = _filter_assumptions(kwargs)\n    if isinstance(name, Symbol):\n        assumptions = name._merge(assumptions)\n        name = name.name\n    elif not isinstance(name, str):\n        raise TypeError('expecting string or Symbol for name')\n    else:\n        commutative = assumptions.get('commutative', None)\n        assumptions = Symbol(name, **assumptions).assumptions0\n        if commutative is None:\n            assumptions.pop('commutative')\n    __dict__ = __dict__ or {}\n    __dict__.update({'is_%s' % k: v for k, v in assumptions.items()})\n    __dict__.update(kwargs)\n    kwargs.update(assumptions)\n    __dict__.update({'_kwargs': kwargs})\n    __dict__['__module__'] = None\n    obj = super().__new__(mcl, name, bases, __dict__)\n    obj.name = name\n    obj._sage_ = _undef_sage_helper\n    return obj",
    ".sympy.core.symbol.py@@_filter_assumptions": "def _filter_assumptions(kwargs):\n    assumptions, nonassumptions = map(dict, sift(kwargs.items(), lambda i: i[0] in _assume_defined, binary=True))\n    Symbol._sanitize(assumptions)\n    return (assumptions, nonassumptions)",
    ".sympy.utilities.iterables.py@@sift": "def sift(seq, keyfunc, binary=False):\n    if not binary:\n        m = defaultdict(list)\n        for i in seq:\n            m[keyfunc(i)].append(i)\n        return m\n    sift = F, T = ([], [])\n    for i in seq:\n        try:\n            sift[keyfunc(i)].append(i)\n        except (IndexError, TypeError):\n            raise ValueError('keyfunc gave non-binary output')\n    return (T, F)",
    ".sympy.core.symbol.py@@Symbol._sanitize": "def _sanitize(assumptions, obj=None):\n    is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n    if is_commutative is None:\n        whose = '%s ' % obj.__name__ if obj else ''\n        raise ValueError('%scommutativity must be True or False.' % whose)\n    for key in list(assumptions.keys()):\n        v = assumptions[key]\n        if v is None:\n            assumptions.pop(key)\n            continue\n        assumptions[key] = bool(v)",
    ".sympy.core.logic.py@@fuzzy_bool": "def fuzzy_bool(x):\n    if x is None:\n        return None\n    if x in (True, False):\n        return bool(x)",
    ".sympy.core.symbol.py@@Symbol.__new__": "def __new__(cls, name, **assumptions):\n    cls._sanitize(assumptions, cls)\n    return Symbol.__xnew_cached_(cls, name, **assumptions)",
    ".sympy.core.symbol.py@@Symbol.__xnew_cached_": "def __xnew_cached_(cls, name, **assumptions):\n    return Symbol.__xnew__(cls, name, **assumptions)",
    ".sympy.core.symbol.py@@Symbol.__xnew__": "def __xnew__(cls, name, **assumptions):\n    if not isinstance(name, str):\n        raise TypeError('name should be a string, not %s' % repr(type(name)))\n    obj = Expr.__new__(cls)\n    obj.name = name\n    tmp_asm_copy = assumptions.copy()\n    is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n    assumptions['commutative'] = is_commutative\n    obj._assumptions = StdFactKB(assumptions)\n    obj._assumptions._generator = tmp_asm_copy\n    return obj",
    ".sympy.core.basic.py@@Basic.__new__": "def __new__(cls, *args):\n    obj = object.__new__(cls)\n    obj._assumptions = cls.default_assumptions\n    obj._mhash = None\n    obj._args = args\n    return obj",
    ".sympy.core.assumptions.py@@StdFactKB.__init__": "def __init__(self, facts=None):\n    super().__init__(_assume_rules)\n    if not facts:\n        self._generator = {}\n    elif not isinstance(facts, FactKB):\n        self._generator = facts.copy()\n    else:\n        self._generator = facts.generator\n    if facts:\n        self.deduce_all_facts(facts)",
    ".sympy.core.facts.py@@FactKB.__init__": "def __init__(self, rules):\n    self.rules = rules",
    ".sympy.core.facts.py@@FactKB.deduce_all_facts": "def deduce_all_facts(self, facts):\n    full_implications = self.rules.full_implications\n    beta_triggers = self.rules.beta_triggers\n    beta_rules = self.rules.beta_rules\n    if isinstance(facts, dict):\n        facts = facts.items()\n    while facts:\n        beta_maytrigger = set()\n        for k, v in facts:\n            if not self._tell(k, v) or v is None:\n                continue\n            for key, value in full_implications[k, v]:\n                self._tell(key, value)\n            beta_maytrigger.update(beta_triggers[k, v])\n        facts = []\n        for bidx in beta_maytrigger:\n            bcond, bimpl = beta_rules[bidx]\n            if all((self.get(k) is v for k, v in bcond)):\n                facts.append(bimpl)",
    ".sympy.core.facts.py@@FactKB._tell": "def _tell(self, k, v):\n    if k in self and self[k] is not None:\n        if self[k] == v:\n            return False\n        else:\n            raise InconsistentAssumptions(self, k, v)\n    else:\n        self[k] = v\n        return True",
    ".sympy.core.function.py@@FunctionClass.__init__": "def __init__(cls, *args, **kwargs):\n    nargs = kwargs.pop('nargs', cls.__dict__.get('nargs', arity(cls)))\n    if nargs is None and 'nargs' not in cls.__dict__:\n        for supcls in cls.__mro__:\n            if hasattr(supcls, '_nargs'):\n                nargs = supcls._nargs\n                break\n            else:\n                continue\n    if is_sequence(nargs):\n        if not nargs:\n            raise ValueError(filldedent('\\n                Incorrectly specified nargs as %s:\\n                if there are no arguments, it should be\\n                `nargs = 0`;\\n                if there are any number of arguments,\\n                it should be\\n                `nargs = None`' % str(nargs)))\n        nargs = tuple(ordered(set(nargs)))\n    elif nargs is not None:\n        nargs = (as_int(nargs),)\n    cls._nargs = nargs\n    if len(args) == 3:\n        namespace = args[2]\n        if 'eval' in namespace and (not isinstance(namespace['eval'], classmethod)):\n            raise TypeError('eval on Function subclasses should be a class method (defined with @classmethod)')\n    super().__init__(*args, **kwargs)",
    ".sympy.core.function.py@@arity": "def arity(cls):\n    eval_ = getattr(cls, 'eval', cls)\n    parameters = inspect.signature(eval_).parameters.items()\n    if [p for _, p in parameters if p.kind == p.VAR_POSITIONAL]:\n        return\n    p_or_k = [p for _, p in parameters if p.kind == p.POSITIONAL_OR_KEYWORD]\n    no, yes = map(len, sift(p_or_k, lambda p: p.default == p.empty, binary=True))\n    return no if not yes else tuple(range(no, no + yes + 1))",
    ".sympy.core.assumptions.py@@ManagedProperties.__init__": "def __init__(cls, *args, **kws):\n    BasicMeta.__init__(cls, *args, **kws)\n    local_defs = {}\n    for k in _assume_defined:\n        attrname = as_property(k)\n        v = cls.__dict__.get(attrname, '')\n        if isinstance(v, (bool, int, type(None))):\n            if v is not None:\n                v = bool(v)\n            local_defs[k] = v\n    defs = {}\n    for base in reversed(cls.__bases__):\n        assumptions = getattr(base, '_explicit_class_assumptions', None)\n        if assumptions is not None:\n            defs.update(assumptions)\n    defs.update(local_defs)\n    cls._explicit_class_assumptions = defs\n    cls.default_assumptions = StdFactKB(defs)\n    cls._prop_handler = {}\n    for k in _assume_defined:\n        eval_is_meth = getattr(cls, '_eval_is_%s' % k, None)\n        if eval_is_meth is not None:\n            cls._prop_handler[k] = eval_is_meth\n    for k, v in cls.default_assumptions.items():\n        setattr(cls, as_property(k), v)\n    derived_from_bases = set()\n    for base in cls.__bases__:\n        default_assumptions = getattr(base, 'default_assumptions', None)\n        if default_assumptions is not None:\n            derived_from_bases.update(default_assumptions)\n    for fact in derived_from_bases - set(cls.default_assumptions):\n        pname = as_property(fact)\n        if pname not in cls.__dict__:\n            setattr(cls, pname, make_property(fact))\n    for fact in _assume_defined:\n        pname = as_property(fact)\n        if not hasattr(cls, pname):\n            setattr(cls, pname, make_property(fact))",
    ".sympy.core.core.py@@BasicMeta.__init__": "def __init__(cls, *args, **kws):\n    all_classes.add(cls)\n    cls.__sympy__ = property(lambda self: True)",
    ".sympy.core.function.py@@UndefinedFunction.__hash__": "def __hash__(self):\n    return hash((self.class_key(), frozenset(self._kwargs.items())))",
    ".sympy.core.function.py@@Function.class_key": "def class_key(cls):\n    from sympy.sets.fancysets import Naturals0\n    funcs = {'exp': 10, 'log': 11, 'sin': 20, 'cos': 21, 'tan': 22, 'cot': 23, 'sinh': 30, 'cosh': 31, 'tanh': 32, 'coth': 33, 'conjugate': 40, 're': 41, 'im': 42, 'arg': 43}\n    name = cls.__name__\n    try:\n        i = funcs[name]\n    except KeyError:\n        i = 0 if isinstance(cls.nargs, Naturals0) else 10000\n    return (4, i, name)",
    ".sympy.core.function.py@@FunctionClass.nargs": "def nargs(self):\n    from sympy.sets.sets import FiniteSet\n    return FiniteSet(*self._nargs) if self._nargs else S.Naturals0",
    ".sympy.core.assumptions.py@@as_property": "def as_property(fact):\n    return 'is_%s' % fact",
    ".sympy.core.function.py@@AppliedUndef.__new__": "def __new__(cls, *args, **options):\n    args = list(map(sympify, args))\n    u = [a.name for a in args if isinstance(a, UndefinedFunction)]\n    if u:\n        raise TypeError('Invalid argument: expecting an expression, not UndefinedFunction%s: %s' % ('s' * (len(u) > 1), ', '.join(u)))\n    obj = super().__new__(cls, *args, **options)\n    return obj",
    ".sympy.core.sympify.py@@sympify": "def sympify(a, locals=None, convert_xor=True, strict=False, rational=False, evaluate=None):\n    is_sympy = getattr(a, '__sympy__', None)\n    if is_sympy is True:\n        return a\n    elif is_sympy is not None:\n        if not strict:\n            return a\n        else:\n            raise SympifyError(a)\n    if isinstance(a, CantSympify):\n        raise SympifyError(a)\n    cls = getattr(a, '__class__', None)\n    for superclass in getmro(cls):\n        conv = _external_converter.get(superclass)\n        if conv is None:\n            conv = _sympy_converter.get(superclass)\n        if conv is not None:\n            return conv(a)\n    if cls is type(None):\n        if strict:\n            raise SympifyError(a)\n        else:\n            return a\n    if evaluate is None:\n        evaluate = global_parameters.evaluate\n    if _is_numpy_instance(a):\n        import numpy as np\n        if np.isscalar(a):\n            return _convert_numpy_types(a, locals=locals, convert_xor=convert_xor, strict=strict, rational=rational, evaluate=evaluate)\n    _sympy_ = getattr(a, '_sympy_', None)\n    if _sympy_ is not None:\n        try:\n            return a._sympy_()\n        except AttributeError:\n            pass\n    if not strict:\n        flat = getattr(a, 'flat', None)\n        if flat is not None:\n            shape = getattr(a, 'shape', None)\n            if shape is not None:\n                from sympy.tensor.array import Array\n                return Array(a.flat, a.shape)\n    if not isinstance(a, str):\n        if _is_numpy_instance(a):\n            import numpy as np\n            assert not isinstance(a, np.number)\n            if isinstance(a, np.ndarray):\n                if a.ndim == 0:\n                    try:\n                        return sympify(a.item(), locals=locals, convert_xor=convert_xor, strict=strict, rational=rational, evaluate=evaluate)\n                    except SympifyError:\n                        pass\n        else:\n            for coerce in (float, int):\n                try:\n                    return sympify(coerce(a))\n                except (TypeError, ValueError, AttributeError, SympifyError):\n                    continue\n    if strict:\n        raise SympifyError(a)\n    if iterable(a):\n        try:\n            return type(a)([sympify(x, locals=locals, convert_xor=convert_xor, rational=rational, evaluate=evaluate) for x in a])\n        except TypeError:\n            pass\n    if not isinstance(a, str):\n        try:\n            a = str(a)\n        except Exception as exc:\n            raise SympifyError(a, exc)\n        sympy_deprecation_warning(f'\\nThe string fallback in sympify() is deprecated.\\n\\nTo explicitly convert the string form of an object, use\\nsympify(str(obj)). To add define sympify behavior on custom\\nobjects, use sympy.core.sympify.converter or define obj._sympy_\\n(see the sympify() docstring).\\n\\nsympify() performed the string fallback resulting in the following string:\\n\\n{a!r}\\n            ', deprecated_since_version='1.6', active_deprecations_target='deprecated-sympify-string-fallback')\n    from sympy.parsing.sympy_parser import parse_expr, TokenError, standard_transformations\n    from sympy.parsing.sympy_parser import convert_xor as t_convert_xor\n    from sympy.parsing.sympy_parser import rationalize as t_rationalize\n    transformations = standard_transformations\n    if rational:\n        transformations += (t_rationalize,)\n    if convert_xor:\n        transformations += (t_convert_xor,)\n    try:\n        a = a.replace('\\n', '')\n        expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n    except (TokenError, SyntaxError) as exc:\n        raise SympifyError('could not parse %r' % a, exc)\n    return expr",
    ".sympy.sets.sets.py@@Set.__contains__": "def __contains__(self, other):\n    other = _sympify(other)\n    c = self._contains(other)\n    b = tfn[c]\n    if b is None:\n        raise TypeError('did not evaluate to a bool: %r' % c)\n    return b",
    ".sympy.core.sympify.py@@_sympify": "def _sympify(a):\n    return sympify(a, strict=True)",
    ".sympy.core.numbers.py@@Integer.__new__": "def __new__(cls, i):\n    if isinstance(i, str):\n        i = i.replace(' ', '')\n    try:\n        ival = int(i)\n    except TypeError:\n        raise TypeError('Argument of Integer should be of numeric type, got %s.' % i)\n    if ival == 1:\n        return S.One\n    if ival == -1:\n        return S.NegativeOne\n    if ival == 0:\n        return S.Zero\n    obj = Expr.__new__(cls)\n    obj.p = ival\n    return obj",
    ".sympy.sets.fancysets.py@@Naturals0._contains": "def _contains(self, other):\n    if not isinstance(other, Expr):\n        return S.false\n    elif other.is_integer and other.is_nonnegative:\n        return S.true\n    elif other.is_integer is False or other.is_nonnegative is False:\n        return S.false",
    ".sympy.logic.boolalg.py@@BooleanTrue.__hash__": "def __hash__(self):\n    return hash(True)",
    ".sympy.logic.boolalg.py@@BooleanTrue.__eq__": "def __eq__(self, other):\n    if other is True:\n        return True\n    if other is False:\n        return False\n    return super().__eq__(other)",
    ".sympy.logic.boolalg.py@@BooleanTrue.__bool__": "def __bool__(self):\n    return True",
    ".sympy.core.function.py@@Application.__new__": "def __new__(cls, *args, **options):\n    from sympy.sets.fancysets import Naturals0\n    from sympy.sets.sets import FiniteSet\n    args = list(map(sympify, args))\n    evaluate = options.pop('evaluate', global_parameters.evaluate)\n    options.pop('nargs', None)\n    if options:\n        raise ValueError('Unknown options: %s' % options)\n    if evaluate:\n        evaluated = cls.eval(*args)\n        if evaluated is not None:\n            return evaluated\n    obj = super().__new__(cls, *args, **options)\n    sentinel = object()\n    objnargs = getattr(obj, 'nargs', sentinel)\n    if objnargs is not sentinel:\n        if is_sequence(objnargs):\n            nargs = tuple(ordered(set(objnargs)))\n        elif objnargs is not None:\n            nargs = (as_int(objnargs),)\n        else:\n            nargs = None\n    else:\n        nargs = obj._nargs\n    obj.nargs = FiniteSet(*nargs) if nargs else Naturals0()\n    return obj",
    ".sympy.core.function.py@@Application.eval": "def eval(cls, *args):\n    return",
    ".sympy.core.function.py@@Function._should_evalf": "def _should_evalf(cls, arg):\n    if arg.is_Float:\n        return arg._prec\n    if not arg.is_Add:\n        return -1\n    from .evalf import pure_complex\n    m = pure_complex(arg)\n    if m is None or not (m[0].is_Float or m[1].is_Float):\n        return -1\n    l = [i._prec for i in m if i.is_Float]\n    l.append(-1)\n    return max(l)",
    ".sympy.core.function.py@@UndefinedFunction.__eq__": "def __eq__(self, other):\n    return isinstance(other, self.__class__) and self.class_key() == other.class_key() and (self._kwargs == other._kwargs)",
    ".sympy.core.expr.py@@Expr.diff": "def diff(self, *symbols, **assumptions):\n    assumptions.setdefault('evaluate', True)\n    return _derivative_dispatch(self, *symbols, **assumptions)",
    ".sympy.core.function.py@@_derivative_dispatch": "def _derivative_dispatch(expr, *variables, **kwargs):\n    from sympy.matrices.common import MatrixCommon\n    from sympy.matrices.expressions.matexpr import MatrixExpr\n    from sympy.tensor.array import NDimArray\n    array_types = (MatrixCommon, MatrixExpr, NDimArray, list, tuple, Tuple)\n    if isinstance(expr, array_types) or any((isinstance(i[0], array_types) if isinstance(i, (tuple, list, Tuple)) else isinstance(i, array_types) for i in variables)):\n        from sympy.tensor.array.array_derivatives import ArrayDerivative\n        return ArrayDerivative(expr, *variables, **kwargs)\n    return Derivative(expr, *variables, **kwargs)",
    ".sympy.core.function.py@@Derivative.__new__": "def __new__(cls, expr, *variables, **kwargs):\n    expr = sympify(expr)\n    symbols_or_none = getattr(expr, 'free_symbols', None)\n    has_symbol_set = isinstance(symbols_or_none, set)\n    if not has_symbol_set:\n        raise ValueError(filldedent('\\n            Since there are no variables in the expression %s,\\n            it cannot be differentiated.' % expr))\n    if not variables:\n        variables = expr.free_symbols\n        if len(variables) != 1:\n            if expr.is_number:\n                return S.Zero\n            if len(variables) == 0:\n                raise ValueError(filldedent('\\n                    Since there are no variables in the expression,\\n                    the variable(s) of differentiation must be supplied\\n                    to differentiate %s' % expr))\n            else:\n                raise ValueError(filldedent('\\n                    Since there is more than one variable in the\\n                    expression, the variable(s) of differentiation\\n                    must be supplied to differentiate %s' % expr))\n    variable_count = []\n    array_likes = (tuple, list, Tuple)\n    from sympy.tensor.array import Array, NDimArray\n    for i, v in enumerate(variables):\n        if isinstance(v, UndefinedFunction):\n            raise TypeError('cannot differentiate wrt UndefinedFunction: %s' % v)\n        if isinstance(v, array_likes):\n            if len(v) == 0:\n                continue\n            if isinstance(v[0], array_likes):\n                if len(v) == 1:\n                    v = Array(v[0])\n                    count = 1\n                else:\n                    v, count = v\n                    v = Array(v)\n            else:\n                v, count = v\n            if count == 0:\n                continue\n            variable_count.append(Tuple(v, count))\n            continue\n        v = sympify(v)\n        if isinstance(v, Integer):\n            if i == 0:\n                raise ValueError('First variable cannot be a number: %i' % v)\n            count = v\n            prev, prevcount = variable_count[-1]\n            if prevcount != 1:\n                raise TypeError('tuple {} followed by number {}'.format((prev, prevcount), v))\n            if count == 0:\n                variable_count.pop()\n            else:\n                variable_count[-1] = Tuple(prev, count)\n        else:\n            count = 1\n            variable_count.append(Tuple(v, count))\n    merged = []\n    for t in variable_count:\n        v, c = t\n        if c.is_negative:\n            raise ValueError('order of differentiation must be nonnegative')\n        if merged and merged[-1][0] == v:\n            c += merged[-1][1]\n            if not c:\n                merged.pop()\n            else:\n                merged[-1] = Tuple(v, c)\n        else:\n            merged.append(t)\n    variable_count = merged\n    for v, c in variable_count:\n        if not v._diff_wrt:\n            __ = ''\n            raise ValueError(filldedent(\"\\n                Can't calculate derivative wrt %s.%s\" % (v, __)))\n    if len(variable_count) == 0:\n        return expr\n    evaluate = kwargs.get('evaluate', False)\n    if evaluate:\n        if isinstance(expr, Derivative):\n            expr = expr.canonical\n        variable_count = [(v.canonical if isinstance(v, Derivative) else v, c) for v, c in variable_count]\n        zero = False\n        free = expr.free_symbols\n        from sympy.matrices.expressions.matexpr import MatrixExpr\n        for v, c in variable_count:\n            vfree = v.free_symbols\n            if c.is_positive and vfree:\n                if isinstance(v, AppliedUndef):\n                    D = Dummy()\n                    if not expr.xreplace({v: D}).has(D):\n                        zero = True\n                        break\n                elif isinstance(v, MatrixExpr):\n                    zero = False\n                    break\n                elif isinstance(v, Symbol) and v not in free:\n                    zero = True\n                    break\n                elif not free & vfree:\n                    zero = True\n                    break\n        if zero:\n            return cls._get_zero_with_shape_like(expr)\n        variable_count = cls._sort_variable_count(variable_count)\n    if isinstance(expr, Derivative):\n        variable_count = list(expr.variable_count) + variable_count\n        expr = expr.expr\n        return _derivative_dispatch(expr, *variable_count, **kwargs)\n    if not evaluate or not hasattr(expr, '_eval_derivative'):\n        if evaluate and variable_count == [(expr, 1)] and expr.is_scalar:\n            return S.One\n        return Expr.__new__(cls, expr, *variable_count)\n    nderivs = 0\n    unhandled = []\n    from sympy.matrices.common import MatrixCommon\n    for i, (v, count) in enumerate(variable_count):\n        old_expr = expr\n        old_v = None\n        is_symbol = v.is_symbol or isinstance(v, (Iterable, Tuple, MatrixCommon, NDimArray))\n        if not is_symbol:\n            old_v = v\n            v = Dummy('xi')\n            expr = expr.xreplace({old_v: v})\n            clashing = not (isinstance(old_v, Derivative) or isinstance(old_v, AppliedUndef))\n            if v not in expr.free_symbols and (not clashing):\n                return expr.diff(v)\n            if not old_v.is_scalar and (not hasattr(old_v, '_eval_derivative')):\n                expr *= old_v.diff(old_v)\n        obj = cls._dispatch_eval_derivative_n_times(expr, v, count)\n        if obj is not None and obj.is_zero:\n            return obj\n        nderivs += count\n        if old_v is not None:\n            if obj is not None:\n                obj = obj.subs(v, old_v)\n            expr = old_expr\n        if obj is None:\n            unhandled = variable_count[i:]\n            break\n        expr = obj\n    expr = expr.replace(lambda x: isinstance(x, Derivative), lambda x: x.canonical)\n    if unhandled:\n        if isinstance(expr, Derivative):\n            unhandled = list(expr.variable_count) + unhandled\n            expr = expr.expr\n        expr = Expr.__new__(cls, expr, *unhandled)\n    if (nderivs > 1) == True and kwargs.get('simplify', True):\n        from .exprtools import factor_terms\n        from sympy.simplify.simplify import signsimp\n        expr = factor_terms(signsimp(expr))\n    return expr",
    ".sympy.core.containers.py@@Tuple.__new__": "def __new__(cls, *args, **kwargs):\n    if kwargs.get('sympify', True):\n        args = (sympify(arg) for arg in args)\n    obj = Basic.__new__(cls, *args)\n    return obj",
    ".sympy.core.containers.py@@Tuple.__iter__": "def __iter__(self):\n    return iter(self.args)",
    ".sympy.core.symbol.py@@Symbol._diff_wrt": "def _diff_wrt(self):\n    return True",
    ".sympy.core.function.py@@Derivative._sort_variable_count": "def _sort_variable_count(cls, vc):\n    if not vc:\n        return []\n    vc = list(vc)\n    if len(vc) == 1:\n        return [Tuple(*vc[0])]\n    V = list(range(len(vc)))\n    E = []\n    v = lambda i: vc[i][0]\n    D = Dummy()\n\n    def _block(d, v, wrt=False):\n        if d == v:\n            return wrt\n        if d.is_Symbol:\n            return False\n        if isinstance(d, Derivative):\n            if any((_block(k, v, wrt=True) for k in d._wrt_variables)):\n                return True\n            return False\n        if not wrt and isinstance(d, AppliedUndef):\n            return False\n        if v.is_Symbol:\n            return v in d.free_symbols\n        if isinstance(v, AppliedUndef):\n            return _block(d.xreplace({v: D}), D)\n        return d.free_symbols & v.free_symbols\n    for i in range(len(vc)):\n        for j in range(i):\n            if _block(v(j), v(i)):\n                E.append((j, i))\n    O = dict(zip(ordered(uniq([i for i, c in vc])), range(len(vc))))\n    ix = topological_sort((V, E), key=lambda i: O[v(i)])\n    merged = []\n    for v, c in [vc[i] for i in ix]:\n        if merged and merged[-1][0] == v:\n            merged[-1][1] += c\n        else:\n            merged.append([v, c])\n    return [Tuple(*i) for i in merged]",
    ".sympy.core.function.py@@Derivative._dispatch_eval_derivative_n_times": "def _dispatch_eval_derivative_n_times(cls, expr, v, count):\n    return expr._eval_derivative_n_times(v, count)",
    ".sympy.core.basic.py@@Basic._eval_derivative_n_times": "def _eval_derivative_n_times(self, s, n):\n    from .numbers import Integer\n    if isinstance(n, (int, Integer)):\n        obj = self\n        for i in range(n):\n            obj2 = obj._eval_derivative(s)\n            if obj == obj2 or obj2 is None:\n                break\n            obj = obj2\n        return obj2\n    else:\n        return None",
    ".sympy.core.numbers.py@@Integer.__index__": "def __index__(self):\n    return self.p",
    ".sympy.core.function.py@@Function._eval_derivative": "def _eval_derivative(self, s):\n    i = 0\n    l = []\n    for a in self.args:\n        i += 1\n        da = a.diff(s)\n        if da.is_zero:\n            continue\n        try:\n            df = self.fdiff(i)\n        except ArgumentIndexError:\n            df = Function.fdiff(self, i)\n        l.append(df * da)\n    return Add(*l)",
    ".sympy.core.expr.py@@AtomicExpr._eval_derivative_n_times": "def _eval_derivative_n_times(self, s, n):\n    from .containers import Tuple\n    from sympy.matrices.expressions.matexpr import MatrixExpr\n    from sympy.matrices.common import MatrixCommon\n    if isinstance(s, (MatrixCommon, Tuple, Iterable, MatrixExpr)):\n        return super()._eval_derivative_n_times(s, n)\n    from .relational import Eq\n    from sympy.functions.elementary.piecewise import Piecewise\n    if self == s:\n        return Piecewise((self, Eq(n, 0)), (1, Eq(n, 1)), (0, True))\n    else:\n        return Piecewise((self, Eq(n, 0)), (0, True))",
    ".sympy.core.relational.py@@Equality.__new__": "def __new__(cls, lhs, rhs=None, **options):\n    if rhs is None:\n        sympy_deprecation_warning('\\n            Eq(expr) with a single argument with the right-hand side\\n            defaulting to 0 is deprecated. Use Eq(expr, 0) instead.\\n            ', deprecated_since_version='1.5', active_deprecations_target='deprecated-eq-expr')\n        rhs = 0\n    evaluate = options.pop('evaluate', global_parameters.evaluate)\n    lhs = _sympify(lhs)\n    rhs = _sympify(rhs)\n    if evaluate:\n        val = is_eq(lhs, rhs)\n        if val is None:\n            return cls(lhs, rhs, evaluate=False)\n        else:\n            return _sympify(val)\n    return Relational.__new__(cls, lhs, rhs)",
    ".sympy.core.relational.py@@is_eq": "def is_eq(lhs, rhs, assumptions=None):\n    for side1, side2 in ((lhs, rhs), (rhs, lhs)):\n        eval_func = getattr(side1, '_eval_Eq', None)\n        if eval_func is not None:\n            retval = eval_func(side2)\n            if retval is not None:\n                return retval\n    retval = _eval_is_eq(lhs, rhs)\n    if retval is not None:\n        return retval\n    if dispatch(type(lhs), type(rhs)) != dispatch(type(rhs), type(lhs)):\n        retval = _eval_is_eq(rhs, lhs)\n        if retval is not None:\n            return retval\n    if lhs == rhs:\n        return True\n    elif all((isinstance(i, BooleanAtom) for i in (rhs, lhs))):\n        return False\n    elif not (lhs.is_Symbol or rhs.is_Symbol) and isinstance(lhs, Boolean) != isinstance(rhs, Boolean):\n        return False\n    from sympy.assumptions.wrapper import AssumptionsWrapper, is_infinite, is_extended_real\n    from .add import Add\n    _lhs = AssumptionsWrapper(lhs, assumptions)\n    _rhs = AssumptionsWrapper(rhs, assumptions)\n    if _lhs.is_infinite or _rhs.is_infinite:\n        if fuzzy_xor([_lhs.is_infinite, _rhs.is_infinite]):\n            return False\n        if fuzzy_xor([_lhs.is_extended_real, _rhs.is_extended_real]):\n            return False\n        if fuzzy_and([_lhs.is_extended_real, _rhs.is_extended_real]):\n            return fuzzy_xor([_lhs.is_extended_positive, fuzzy_not(_rhs.is_extended_positive)])\n        I = S.ImaginaryUnit\n\n        def split_real_imag(expr):\n            real_imag = lambda t: 'real' if is_extended_real(t, assumptions) else 'imag' if is_extended_real(I * t, assumptions) else None\n            return sift(Add.make_args(expr), real_imag)\n        lhs_ri = split_real_imag(lhs)\n        if not lhs_ri[None]:\n            rhs_ri = split_real_imag(rhs)\n            if not rhs_ri[None]:\n                eq_real = is_eq(Add(*lhs_ri['real']), Add(*rhs_ri['real']), assumptions)\n                eq_imag = is_eq(I * Add(*lhs_ri['imag']), I * Add(*rhs_ri['imag']), assumptions)\n                return fuzzy_and(map(fuzzy_bool, [eq_real, eq_imag]))\n        from sympy.functions.elementary.complexes import arg\n        arglhs = arg(lhs)\n        argrhs = arg(rhs)\n        if not (arglhs == S.NaN and argrhs == S.NaN):\n            return fuzzy_bool(is_eq(arglhs, argrhs, assumptions))\n    if all((isinstance(i, Expr) for i in (lhs, rhs))):\n        dif = lhs - rhs\n        _dif = AssumptionsWrapper(dif, assumptions)\n        z = _dif.is_zero\n        if z is not None:\n            if z is False and _dif.is_commutative:\n                return False\n            if z:\n                return True\n        n2 = _n2(lhs, rhs)\n        if n2 is not None:\n            return _sympify(n2 == 0)\n        n, d = dif.as_numer_denom()\n        rv = None\n        _n = AssumptionsWrapper(n, assumptions)\n        _d = AssumptionsWrapper(d, assumptions)\n        if _n.is_zero:\n            rv = _d.is_nonzero\n        elif _n.is_finite:\n            if _d.is_infinite:\n                rv = True\n            elif _n.is_zero is False:\n                rv = _d.is_infinite\n                if rv is None:\n                    from sympy.simplify.simplify import clear_coefficients\n                    l, r = clear_coefficients(d, S.Infinity)\n                    args = [_.subs(l, r) for _ in (lhs, rhs)]\n                    if args != [lhs, rhs]:\n                        rv = fuzzy_bool(is_eq(*args, assumptions))\n                        if rv is True:\n                            rv = None\n        elif any((is_infinite(a, assumptions) for a in Add.make_args(n))):\n            rv = False\n        if rv is not None:\n            return rv",
    ".sympy.multipledispatch.dispatcher.py@@Dispatcher.__call__": "def __call__(self, *args, **kwargs):\n    types = tuple([type(arg) for arg in args])\n    try:\n        func = self._cache[types]\n    except KeyError:\n        func = self.dispatch(*types)\n        if not func:\n            raise NotImplementedError('Could not find signature for %s: <%s>' % (self.name, str_signature(types)))\n        self._cache[types] = func\n    try:\n        return func(*args, **kwargs)\n    except MDNotImplementedError:\n        funcs = self.dispatch_iter(*types)\n        next(funcs)\n        for func in funcs:\n            try:\n                return func(*args, **kwargs)\n            except MDNotImplementedError:\n                pass\n        raise NotImplementedError('Matching functions for %s: <%s> found, but none completed successfully' % (self.name, str_signature(types)))",
    ".sympy.multipledispatch.dispatcher.py@@Dispatcher.dispatch": "def dispatch(self, *types):\n    if types in self.funcs:\n        return self.funcs[types]\n    try:\n        return next(self.dispatch_iter(*types))\n    except StopIteration:\n        return None",
    ".sympy.multipledispatch.dispatcher.py@@Dispatcher.dispatch_iter": "def dispatch_iter(self, *types):\n    n = len(types)\n    for signature in self.ordering:\n        if len(signature) == n and all(map(issubclass, types, signature)):\n            result = self.funcs[signature]\n            yield result",
    ".sympy.core.relational.py@@_eval_is_eq": "def _eval_is_eq(lhs, rhs):\n    return None",
    ".sympy.multipledispatch.core.py@@dispatch": "def dispatch(*types, namespace=global_namespace, on_ambiguity=ambiguity_warn):\n    types = tuple(types)\n\n    def _(func):\n        name = func.__name__\n        if ismethod(func):\n            dispatcher = inspect.currentframe().f_back.f_locals.get(name, MethodDispatcher(name))\n        else:\n            if name not in namespace:\n                namespace[name] = Dispatcher(name)\n            dispatcher = namespace[name]\n        dispatcher.add(types, func, on_ambiguity=on_ambiguity)\n        return dispatcher\n    return _",
    ".sympy.core.numbers.py@@Integer.__eq__": "def __eq__(self, other):\n    if isinstance(other, int):\n        return self.p == other\n    elif isinstance(other, Integer):\n        return self.p == other.p\n    return Rational.__eq__(self, other)",
    ".sympy.assumptions.wrapper.py@@AssumptionsWrapperMeta.__init__": "def __init__(cls, *args, **kws):\n    for fact in _assume_defined:\n        pname = '_eval_%s' % as_property(fact)\n        setattr(cls, pname, make_eval_method(fact))\n    super().__init__(cls, *args, **kws)",
    ".sympy.assumptions.wrapper.py@@make_eval_method": "def make_eval_method(fact):\n\n    def getit(self):\n        try:\n            pred = getattr(Q, fact)\n            ret = ask(pred(self.expr), self.assumptions)\n            return ret\n        except AttributeError:\n            return None\n    return getit",
    ".sympy.assumptions.wrapper.py@@AssumptionsWrapper.__new__": "def __new__(cls, expr, assumptions=None):\n    if assumptions is None:\n        return expr\n    obj = super().__new__(cls, expr, _sympify(assumptions))\n    obj.expr = expr\n    obj.assumptions = assumptions\n    return obj",
    ".sympy.core.numbers.py@@Integer.__sub__": "def __sub__(self, other):\n    if global_parameters.evaluate:\n        if isinstance(other, int):\n            return Integer(self.p - other)\n        elif isinstance(other, Integer):\n            return Integer(self.p - other.p)\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.q - other.p, other.q, 1)\n        return Rational.__sub__(self, other)\n    return Rational.__sub__(self, other)",
    ".sympy.functions.elementary.piecewise.py@@Piecewise.__new__": "def __new__(cls, *args, **options):\n    if len(args) == 0:\n        raise TypeError('At least one (expr, cond) pair expected.')\n    newargs = []\n    for ec in args:\n        pair = ExprCondPair(*getattr(ec, 'args', ec))\n        cond = pair.cond\n        if cond is false:\n            continue\n        newargs.append(pair)\n        if cond is true:\n            break\n    eval = options.pop('evaluate', global_parameters.evaluate)\n    if eval:\n        r = cls.eval(*newargs)\n        if r is not None:\n            return r\n    elif len(newargs) == 1 and newargs[0].cond == True:\n        return newargs[0].expr\n    return Basic.__new__(cls, *newargs, **options)",
    ".sympy.functions.elementary.piecewise.py@@ExprCondPair.__new__": "def __new__(cls, expr, cond):\n    expr = as_Basic(expr)\n    if cond == True:\n        return Tuple.__new__(cls, expr, true)\n    elif cond == False:\n        return Tuple.__new__(cls, expr, false)\n    elif isinstance(cond, Basic) and cond.has(Piecewise):\n        cond = piecewise_fold(cond)\n        if isinstance(cond, Piecewise):\n            cond = cond.rewrite(ITE)\n    if not isinstance(cond, Boolean):\n        raise TypeError(filldedent('\\n            Second argument must be a Boolean,\\n            not `%s`' % func_name(cond)))\n    return Tuple.__new__(cls, expr, cond)",
    ".sympy.core.basic.py@@as_Basic": "def as_Basic(expr):\n    try:\n        return _sympify(expr)\n    except SympifyError:\n        raise TypeError('Argument must be a Basic object, not `%s`' % func_name(expr))",
    ".sympy.logic.boolalg.py@@BooleanFalse.__eq__": "def __eq__(self, other):\n    if other is True:\n        return False\n    if other is False:\n        return True\n    return super().__eq__(other)",
    ".sympy.functions.elementary.piecewise.py@@ExprCondPair.cond": "def cond(self):\n    return self.args[1]",
    ".sympy.functions.elementary.piecewise.py@@Piecewise.eval": "def eval(cls, *_args):\n    if not _args:\n        return Undefined\n    if len(_args) == 1 and _args[0][-1] == True:\n        return _args[0][0]\n    newargs = []\n    current_cond = set()\n    for expr, cond in _args:\n        cond = cond.replace(lambda _: _.is_Relational, _canonical_coeff)\n        if isinstance(expr, Piecewise):\n            unmatching = []\n            for i, (e, c) in enumerate(expr.args):\n                if c in current_cond:\n                    continue\n                if c == cond:\n                    if c != True:\n                        if unmatching:\n                            expr = Piecewise(*unmatching + [(e, c)])\n                        else:\n                            expr = e\n                    break\n                else:\n                    unmatching.append((e, c))\n        got = False\n        for i in [cond] + (list(cond.args) if isinstance(cond, And) else []):\n            if i in current_cond:\n                got = True\n                break\n        if got:\n            continue\n        if isinstance(cond, And):\n            nonredundant = []\n            for c in cond.args:\n                if isinstance(c, Relational):\n                    if c.negated.canonical in current_cond:\n                        continue\n                    if isinstance(c, (Lt, Gt)) and c.weak in current_cond:\n                        cond = False\n                        break\n                nonredundant.append(c)\n            else:\n                cond = cond.func(*nonredundant)\n        elif isinstance(cond, Relational):\n            if cond.negated.canonical in current_cond:\n                cond = S.true\n        current_cond.add(cond)\n        if newargs:\n            if newargs[-1].expr == expr:\n                orcond = Or(cond, newargs[-1].cond)\n                if isinstance(orcond, (And, Or)):\n                    orcond = distribute_and_over_or(orcond)\n                newargs[-1] = ExprCondPair(expr, orcond)\n                continue\n            elif newargs[-1].cond == cond:\n                newargs[-1] = ExprCondPair(expr, cond)\n                continue\n        newargs.append(ExprCondPair(expr, cond))\n    missing = len(newargs) != len(_args)\n    same = all((a == b for a, b in zip(newargs, _args)))\n    if not newargs:\n        raise ValueError(filldedent('\\n            There are no conditions (or none that\\n            are not trivially false) to define an\\n            expression.'))\n    if missing or not same:\n        return cls(*newargs)",
    ".sympy.core.containers.py@@Tuple.__getitem__": "def __getitem__(self, i):\n    if isinstance(i, slice):\n        indices = i.indices(len(self))\n        return Tuple(*(self.args[j] for j in range(*indices)))\n    return self.args[i]",
    ".sympy.core.numbers.py@@Integer.__radd__": "def __radd__(self, other):\n    if global_parameters.evaluate:\n        if isinstance(other, int):\n            return Integer(other + self.p)\n        elif isinstance(other, Rational):\n            return Rational(other.p + self.p * other.q, other.q, 1)\n        return Rational.__radd__(self, other)\n    return Rational.__radd__(self, other)",
    ".sympy.core.basic.py@@Basic.replace": "def replace(self, query, value, map=False, simultaneous=True, exact=None):\n    try:\n        query = _sympify(query)\n    except SympifyError:\n        pass\n    try:\n        value = _sympify(value)\n    except SympifyError:\n        pass\n    if isinstance(query, type):\n        _query = lambda expr: isinstance(expr, query)\n        if isinstance(value, type):\n            _value = lambda expr, result: value(*expr.args)\n        elif callable(value):\n            _value = lambda expr, result: value(*expr.args)\n        else:\n            raise TypeError('given a type, replace() expects another type or a callable')\n    elif isinstance(query, Basic):\n        _query = lambda expr: expr.match(query)\n        if exact is None:\n            from .symbol import Wild\n            exact = len(query.atoms(Wild)) > 1\n        if isinstance(value, Basic):\n            if exact:\n                _value = lambda expr, result: value.subs(result) if all(result.values()) else expr\n            else:\n                _value = lambda expr, result: value.subs(result)\n        elif callable(value):\n            if exact:\n                _value = lambda expr, result: value(**{str(k)[:-1]: v for k, v in result.items()}) if all((val for val in result.values())) else expr\n            else:\n                _value = lambda expr, result: value(**{str(k)[:-1]: v for k, v in result.items()})\n        else:\n            raise TypeError('given an expression, replace() expects another expression or a callable')\n    elif callable(query):\n        _query = query\n        if callable(value):\n            _value = lambda expr, result: value(expr)\n        else:\n            raise TypeError('given a callable, replace() expects another callable')\n    else:\n        raise TypeError('first argument to replace() must be a type, an expression or a callable')\n\n    def walk(rv, F):\n        args = getattr(rv, 'args', None)\n        if args is not None:\n            if args:\n                newargs = tuple([walk(a, F) for a in args])\n                if args != newargs:\n                    rv = rv.func(*newargs)\n                    if simultaneous:\n                        for i, e in enumerate(args):\n                            if rv == e and e != newargs[i]:\n                                return rv\n            rv = F(rv)\n        return rv\n    mapping = {}\n\n    def rec_replace(expr):\n        result = _query(expr)\n        if result or result == {}:\n            v = _value(expr, result)\n            if v is not None and v != expr:\n                if map:\n                    mapping[expr] = v\n                expr = v\n        return expr\n    rv = walk(self, rec_replace)\n    return (rv, mapping) if map else rv",
    ".sympy.core.sympify.py@@_is_numpy_instance": "def _is_numpy_instance(a):\n    return any((type_.__module__ == 'numpy' for type_ in type(a).__mro__))",
    ".sympy.core.sympify.py@@SympifyError.__init__": "def __init__(self, expr, base_exc=None):\n    self.expr = expr\n    self.base_exc = base_exc",
    ".sympy.core.basic.py@@Basic.walk": "def walk(rv, F):\n    args = getattr(rv, 'args', None)\n    if args is not None:\n        if args:\n            newargs = tuple([walk(a, F) for a in args])\n            if args != newargs:\n                rv = rv.func(*newargs)\n                if simultaneous:\n                    for i, e in enumerate(args):\n                        if rv == e and e != newargs[i]:\n                            return rv\n        rv = F(rv)\n    return rv",
    ".sympy.core.basic.py@@Basic.rec_replace": "def rec_replace(expr):\n    result = _query(expr)\n    if result or result == {}:\n        v = _value(expr, result)\n        if v is not None and v != expr:\n            if map:\n                mapping[expr] = v\n            expr = v\n    return expr",
    ".sympy.core.numbers.py@@Integer.__gt__": "def __gt__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if other.is_Integer:\n        return _sympify(self.p > other.p)\n    return Rational.__gt__(self, other)",
    ".sympy.core.function.py@@Function.fdiff": "def fdiff(self, argindex=1):\n    if not 1 <= argindex <= len(self.args):\n        raise ArgumentIndexError(self, argindex)\n    ix = argindex - 1\n    A = self.args[ix]\n    if A._diff_wrt:\n        if len(self.args) == 1 or not A.is_Symbol:\n            return _derivative_dispatch(self, A)\n        for i, v in enumerate(self.args):\n            if i != ix and A in v.free_symbols:\n                break\n        else:\n            return _derivative_dispatch(self, A)\n    D = Dummy('xi_%i' % argindex, dummy_index=hash(A))\n    args = self.args[:ix] + (D,) + self.args[ix + 1:]\n    return Subs(Derivative(self.func(*args), D), D, A)",
    ".sympy.core.decorators.py@@_SympifyWrapper._func": "def _func(self, other):\n    if not hasattr(other, '_op_priority'):\n        try:\n            other = sympify(other, strict=True)\n        except SympifyError:\n            return retval\n    if not isinstance(other, expectedcls):\n        return retval\n    return func(self, other)",
    ".sympy.core.decorators.py@@binary_op_wrapper": "def binary_op_wrapper(self, other):\n    if hasattr(other, '_op_priority'):\n        if other._op_priority > self._op_priority:\n            f = getattr(other, method_name, None)\n            if f is not None:\n                return f(self)\n    return func(self, other)",
    ".sympy.core.expr.py@@Expr.__mul__": "def __mul__(self, other):\n    return Mul(self, other)",
    ".sympy.core.operations.py@@AssocOp.__new__": "def __new__(cls, *args, evaluate=None, _sympify=True):\n    if _sympify:\n        args = list(map(_sympify_, args))\n    typ = cls._args_type\n    if typ is not None:\n        from .relational import Relational\n        if any((isinstance(arg, Relational) for arg in args)):\n            raise TypeError('Relational cannot be used in %s' % cls.__name__)\n        for arg in args:\n            if not isinstance(arg, typ):\n                sympy_deprecation_warning(f'\\n\\nUsing non-Expr arguments in {cls.__name__} is deprecated (in this case, one of\\nthe arguments has type {type(arg).__name__!r}).\\n\\nIf you really did intend to use a multiplication or addition operation with\\nthis object, use the * or + operator instead.\\n\\n                        ', deprecated_since_version='1.7', active_deprecations_target='non-expr-args-deprecated', stacklevel=4)\n    if evaluate is None:\n        evaluate = global_parameters.evaluate\n    if not evaluate:\n        obj = cls._from_args(args)\n        obj = cls._exec_constructor_postprocessors(obj)\n        return obj\n    args = [a for a in args if a is not cls.identity]\n    if len(args) == 0:\n        return cls.identity\n    if len(args) == 1:\n        return args[0]\n    c_part, nc_part, order_symbols = cls.flatten(args)\n    is_commutative = not nc_part\n    obj = cls._from_args(c_part + nc_part, is_commutative)\n    obj = cls._exec_constructor_postprocessors(obj)\n    if order_symbols is not None:\n        from sympy.series.order import Order\n        return Order(obj, *order_symbols)\n    return obj",
    ".sympy.core.function.py@@UndefinedFunction.__ne__": "def __ne__(self, other):\n    return not self == other",
    ".sympy.core.assumptions.py@@getit": "def getit(self):\n    try:\n        return self._assumptions[fact]\n    except KeyError:\n        if self._assumptions is self.default_assumptions:\n            self._assumptions = self.default_assumptions.copy()\n        return _ask(fact, self)",
    ".sympy.core.assumptions.py@@StdFactKB.copy": "def copy(self):\n    return self.__class__(self)",
    ".sympy.core.assumptions.py@@_ask": "def _ask(fact, obj):\n    assumptions = obj._assumptions\n    handler_map = obj._prop_handler\n    facts_to_check = [fact]\n    facts_queued = {fact}\n    for fact_i in facts_to_check:\n        if fact_i in assumptions:\n            continue\n        fact_i_value = None\n        handler_i = handler_map.get(fact_i)\n        if handler_i is not None:\n            fact_i_value = handler_i(obj)\n        if fact_i_value is not None:\n            assumptions.deduce_all_facts(((fact_i, fact_i_value),))\n        fact_value = assumptions.get(fact)\n        if fact_value is not None:\n            return fact_value\n        new_facts_to_check = list(_assume_rules.prereq[fact_i] - facts_queued)\n        shuffle(new_facts_to_check)\n        facts_to_check.extend(new_facts_to_check)\n        facts_queued.update(new_facts_to_check)\n    if fact in assumptions:\n        return assumptions[fact]\n    assumptions._tell(fact, None)\n    return None",
    ".sympy.core.expr.py@@Expr._eval_is_extended_positive": "def _eval_is_extended_positive(self):\n    return self._eval_is_extended_positive_negative(positive=True)",
    ".sympy.core.expr.py@@Expr._eval_is_extended_positive_negative": "def _eval_is_extended_positive_negative(self, positive):\n    from sympy.polys.numberfields import minimal_polynomial\n    from sympy.polys.polyerrors import NotAlgebraic\n    if self.is_number:\n        try:\n            n2 = self._eval_evalf(2)\n        except ValueError:\n            return None\n        if n2 is None:\n            return None\n        if getattr(n2, '_prec', 1) == 1:\n            return None\n        if n2 is S.NaN:\n            return None\n        f = self.evalf(2)\n        if f.is_Float:\n            match = (f, S.Zero)\n        else:\n            match = pure_complex(f)\n        if match is None:\n            return False\n        r, i = match\n        if not (i.is_Number and r.is_Number):\n            return False\n        if r._prec != 1 and i._prec != 1:\n            return bool(not i and (r > 0 if positive else r < 0))\n        elif r._prec == 1 and (not i or i._prec == 1) and self._eval_is_algebraic() and (not self.has(Function)):\n            try:\n                if minimal_polynomial(self).is_Symbol:\n                    return False\n            except (NotAlgebraic, NotImplementedError):\n                pass",
    ".sympy.core.expr.py@@Expr.is_number": "def is_number(self):\n    return all((obj.is_number for obj in self.args))",
    ".sympy.core.expr.py@@Expr._eval_is_extended_negative": "def _eval_is_extended_negative(self):\n    return self._eval_is_extended_positive_negative(positive=False)",
    ".sympy.core.function.py@@Derivative._eval_is_commutative": "def _eval_is_commutative(self):\n    return self.expr.is_commutative",
    ".sympy.core.function.py@@Derivative.expr": "def expr(self):\n    return self._args[0]",
    ".sympy.core.function.py@@Function._eval_is_commutative": "def _eval_is_commutative(self):\n    return fuzzy_and((a.is_commutative for a in self.args))",
    ".sympy.core.logic.py@@fuzzy_and": "def fuzzy_and(args):\n    rv = True\n    for ai in args:\n        ai = fuzzy_bool(ai)\n        if ai is False:\n            return False\n        if rv:\n            rv = ai\n    return rv",
    ".sympy.core.function.py@@Derivative.canonical": "def canonical(cls):\n    return cls.func(cls.expr, *Derivative._sort_variable_count(cls.variable_count))",
    ".sympy.core.basic.py@@Basic.func": "def func(self):\n    return self.__class__",
    ".sympy.core.function.py@@Derivative.variable_count": "def variable_count(self):\n    return self._args[1:]",
    ".sympy.core.containers.py@@Tuple.__len__": "def __len__(self):\n    return len(self.args)",
    ".sympy.core.expr.py@@Expr._hashable_content": "def _hashable_content(self):\n    return self._args",
    ".sympy.core.containers.py@@Tuple.__eq__": "def __eq__(self, other):\n    if isinstance(other, Basic):\n        return super().__eq__(other)\n    return self.args == other",
    ".sympy.core.basic.py@@Basic._hashable_content": "def _hashable_content(self):\n    return self._args",
    ".sympy.core.basic.py@@Basic.subs": "def subs(self, *args, **kwargs):\n    from .containers import Dict\n    from .symbol import Dummy, Symbol\n    from .numbers import _illegal\n    unordered = False\n    if len(args) == 1:\n        sequence = args[0]\n        if isinstance(sequence, set):\n            unordered = True\n        elif isinstance(sequence, (Dict, Mapping)):\n            unordered = True\n            sequence = sequence.items()\n        elif not iterable(sequence):\n            raise ValueError(filldedent('\\n               When a single argument is passed to subs\\n               it should be a dictionary of old: new pairs or an iterable\\n               of (old, new) tuples.'))\n    elif len(args) == 2:\n        sequence = [args]\n    else:\n        raise ValueError('subs accepts either 1 or 2 arguments')\n    sequence = list(sequence)\n    for i, s in enumerate(sequence):\n        if isinstance(s[0], str):\n            s = (Symbol(s[0]), s[1])\n        try:\n            s = [sympify(_, strict=not isinstance(_, (str, type))) for _ in s]\n        except SympifyError:\n            sequence[i] = None\n            continue\n        sequence[i] = None if _aresame(*s) else tuple(s)\n    sequence = list(filter(None, sequence))\n    simultaneous = kwargs.pop('simultaneous', False)\n    if unordered:\n        from .sorting import _nodes, default_sort_key\n        sequence = dict(sequence)\n        k = list(ordered(sequence, default=False, keys=(lambda x: -_nodes(x), default_sort_key)))\n        sequence = [(k, sequence[k]) for k in k]\n        if not simultaneous:\n            redo = []\n            for i in range(len(sequence)):\n                if sequence[i][1] in _illegal:\n                    redo.append(i)\n            for i in reversed(redo):\n                sequence.insert(0, sequence.pop(i))\n    if simultaneous:\n        reps = {}\n        rv = self\n        kwargs['hack2'] = True\n        m = Dummy('subs_m')\n        for old, new in sequence:\n            com = new.is_commutative\n            if com is None:\n                com = True\n            d = Dummy('subs_d', commutative=com)\n            rv = rv._subs(old, d * m, **kwargs)\n            if not isinstance(rv, Basic):\n                break\n            reps[d] = new\n        reps[m] = S.One\n        return rv.xreplace(reps)\n    else:\n        rv = self\n        for old, new in sequence:\n            rv = rv._subs(old, new, **kwargs)\n            if not isinstance(rv, Basic):\n                break\n        return rv",
    ".sympy.core.basic.py@@_aresame": "def _aresame(a, b):\n    from .numbers import Number\n    from .function import AppliedUndef, UndefinedFunction as UndefFunc\n    if isinstance(a, Number) and isinstance(b, Number):\n        return a == b and a.__class__ == b.__class__\n    for i, j in zip_longest(_preorder_traversal(a), _preorder_traversal(b)):\n        if i != j or type(i) != type(j):\n            if isinstance(i, UndefFunc) and isinstance(j, UndefFunc) or (isinstance(i, AppliedUndef) and isinstance(j, AppliedUndef)):\n                if i.class_key() != j.class_key():\n                    return False\n            else:\n                return False\n    return True",
    ".sympy.core.traversal.py@@preorder_traversal.__init__": "def __init__(self, node, keys=None):\n    self._skip_flag = False\n    self._pt = self._preorder_traversal(node, keys)",
    ".sympy.core.traversal.py@@preorder_traversal.__iter__": "def __iter__(self):\n    return self",
    ".sympy.core.traversal.py@@preorder_traversal.__next__": "def __next__(self):\n    return next(self._pt)",
    ".sympy.core.traversal.py@@preorder_traversal._preorder_traversal": "def _preorder_traversal(self, node, keys):\n    yield node\n    if self._skip_flag:\n        self._skip_flag = False\n        return\n    if isinstance(node, Basic):\n        if not keys and hasattr(node, '_argset'):\n            args = node._argset\n        else:\n            args = node.args\n        if keys:\n            if keys != True:\n                args = ordered(args, keys, default=False)\n            else:\n                args = ordered(args)\n        for arg in args:\n            yield from self._preorder_traversal(arg, keys)\n    elif iterable(node):\n        for item in node:\n            yield from self._preorder_traversal(item, keys)",
    ".sympy.core.sorting.py@@ordered": "def ordered(seq, keys=None, default=True, warn=False):\n    d = defaultdict(list)\n    if keys:\n        if not isinstance(keys, (list, tuple)):\n            keys = [keys]\n        keys = list(keys)\n        f = keys.pop(0)\n        for a in seq:\n            d[f(a)].append(a)\n    else:\n        if not default:\n            raise ValueError('if default=False then keys must be provided')\n        d[None].extend(seq)\n    for k in sorted(d.keys()):\n        if len(d[k]) > 1:\n            if keys:\n                d[k] = ordered(d[k], keys, default, warn)\n            elif default:\n                d[k] = ordered(d[k], (_nodes, default_sort_key), default=False, warn=warn)\n            elif warn:\n                u = list(uniq(d[k]))\n                if len(u) > 1:\n                    raise ValueError('not enough keys to break ties: %s' % u)\n        yield from d[k]\n        d.pop(k)",
    ".sympy.core.sorting.py@@_nodes": "def _nodes(e):\n    from .basic import Basic\n    from .function import Derivative\n    if isinstance(e, Basic):\n        if isinstance(e, Derivative):\n            return _nodes(e.expr) + sum((i[1] if i[1].is_Number else _nodes(i[1]) for i in e.variable_count))\n        return _node_count(e)\n    elif iterable(e):\n        return 1 + sum((_nodes(ei) for ei in e))\n    elif isinstance(e, dict):\n        return 1 + sum((_nodes(k) + _nodes(v) for k, v in e.items()))\n    else:\n        return 1",
    ".sympy.core.sorting.py@@_node_count": "def _node_count(e):\n    if e.is_Float:\n        return 0.5\n    return 1 + sum(map(_node_count, e.args))",
    ".sympy.core.numbers.py@@NaN.__eq__": "def __eq__(self, other):\n    return other is S.NaN",
    ".sympy.core.numbers.py@@Infinity.__eq__": "def __eq__(self, other):\n    return other is S.Infinity or other == float('inf')",
    ".sympy.core.basic.py@@Basic._do_eq_sympify": "def _do_eq_sympify(self, other):\n    for superclass in type(other).__mro__:\n        conv = _external_converter.get(superclass)\n        if conv is not None:\n            return self == conv(other)\n    if hasattr(other, '_sympy_'):\n        return self == other._sympy_()\n    return NotImplemented",
    ".sympy.core.numbers.py@@NegativeInfinity.__eq__": "def __eq__(self, other):\n    return other is S.NegativeInfinity or other == float('-inf')",
    ".sympy.core.basic.py@@Basic._subs": "def _subs(self, old, new, **hints):\n\n    def fallback(self, old, new):\n        hit = False\n        args = list(self.args)\n        for i, arg in enumerate(args):\n            if not hasattr(arg, '_eval_subs'):\n                continue\n            arg = arg._subs(old, new, **hints)\n            if not _aresame(arg, args[i]):\n                hit = True\n                args[i] = arg\n        if hit:\n            rv = self.func(*args)\n            hack2 = hints.get('hack2', False)\n            if hack2 and self.is_Mul and (not rv.is_Mul):\n                coeff = S.One\n                nonnumber = []\n                for i in args:\n                    if i.is_Number:\n                        coeff *= i\n                    else:\n                        nonnumber.append(i)\n                nonnumber = self.func(*nonnumber)\n                if coeff is S.One:\n                    return nonnumber\n                else:\n                    return self.func(coeff, nonnumber, evaluate=False)\n            return rv\n        return self\n    if _aresame(self, old):\n        return new\n    rv = self._eval_subs(old, new)\n    if rv is None:\n        rv = fallback(self, old, new)\n    return rv",
    ".sympy.core.add.py@@Add._eval_subs": "def _eval_subs(self, old, new):\n    if not old.is_Add:\n        if old is S.Infinity and -old in self.args:\n            return self.xreplace({-old: -new})\n        return None\n    coeff_self, terms_self = self.as_coeff_Add()\n    coeff_old, terms_old = old.as_coeff_Add()\n    if coeff_self.is_Rational and coeff_old.is_Rational:\n        if terms_self == terms_old:\n            return self.func(new, coeff_self, -coeff_old)\n        if terms_self == -terms_old:\n            return self.func(-new, coeff_self, coeff_old)\n    if coeff_self.is_Rational and coeff_old.is_Rational or coeff_self == coeff_old:\n        args_old, args_self = (self.func.make_args(terms_old), self.func.make_args(terms_self))\n        if len(args_old) < len(args_self):\n            self_set = set(args_self)\n            old_set = set(args_old)\n            if old_set < self_set:\n                ret_set = self_set - old_set\n                return self.func(new, coeff_self, -coeff_old, *[s._subs(old, new) for s in ret_set])\n            args_old = self.func.make_args(-terms_old)\n            old_set = set(args_old)\n            if old_set < self_set:\n                ret_set = self_set - old_set\n                return self.func(-new, coeff_self, coeff_old, *[s._subs(old, new) for s in ret_set])",
    ".sympy.core.basic.py@@Basic.fallback": "def fallback(self, old, new):\n    hit = False\n    args = list(self.args)\n    for i, arg in enumerate(args):\n        if not hasattr(arg, '_eval_subs'):\n            continue\n        arg = arg._subs(old, new, **hints)\n        if not _aresame(arg, args[i]):\n            hit = True\n            args[i] = arg\n    if hit:\n        rv = self.func(*args)\n        hack2 = hints.get('hack2', False)\n        if hack2 and self.is_Mul and (not rv.is_Mul):\n            coeff = S.One\n            nonnumber = []\n            for i in args:\n                if i.is_Number:\n                    coeff *= i\n                else:\n                    nonnumber.append(i)\n            nonnumber = self.func(*nonnumber)\n            if coeff is S.One:\n                return nonnumber\n            else:\n                return self.func(coeff, nonnumber, evaluate=False)\n        return rv\n    return self",
    ".sympy.core.numbers.py@@Integer.__ne__": "def __ne__(self, other):\n    return not self == other",
    ".sympy.core.numbers.py@@Rational.__eq__": "def __eq__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if not isinstance(other, Number):\n        return False\n    if not self:\n        return not other\n    if other.is_NumberSymbol:\n        if other.is_irrational:\n            return False\n        return other.__eq__(self)\n    if other.is_Rational:\n        return self.p == other.p and self.q == other.q\n    if other.is_Float:\n        if self.q & self.q - 1:\n            return False\n        s, m, t = other._mpf_[:3]\n        if s:\n            m = -m\n        if not t:\n            if not self.is_Integer or self.is_even:\n                return False\n            return m == self.p\n        from .power import integer_log\n        if t > 0:\n            if not self.is_Integer:\n                return False\n            return self.p and (not self.p % m) and (integer_log(self.p // m, 2) == (t, True))\n        if self.is_Integer:\n            return False\n        return m == self.p and integer_log(self.q, 2) == (-t, True)\n    return False",
    ".sympy.core.numbers.py@@Number._eval_subs": "def _eval_subs(self, old, new):\n    if old == -self:\n        return -new\n    return self",
    ".sympy.core.numbers.py@@Integer.__neg__": "def __neg__(self):\n    return Integer(-self.p)",
    ".sympy.core.power.py@@Pow._eval_subs": "def _eval_subs(self, old, new):\n    from sympy.calculus.accumulationbounds import AccumBounds\n    if isinstance(self.exp, AccumBounds):\n        b = self.base.subs(old, new)\n        e = self.exp.subs(old, new)\n        if isinstance(e, AccumBounds):\n            return e.__rpow__(b)\n        return self.func(b, e)\n    from sympy.functions.elementary.exponential import exp, log\n\n    def _check(ct1, ct2, old):\n        coeff1, terms1 = ct1\n        coeff2, terms2 = ct2\n        if terms1 == terms2:\n            if old.is_commutative:\n                pow = coeff1 / coeff2\n                try:\n                    as_int(pow, strict=False)\n                    combines = True\n                except ValueError:\n                    b, e = old.as_base_exp()\n                    combines = b.is_positive and e.is_real or (b.is_nonnegative and e.is_nonnegative)\n                return (combines, pow, None)\n            else:\n                if not isinstance(terms1, tuple):\n                    terms1 = (terms1,)\n                if not all((term.is_integer for term in terms1)):\n                    return (False, None, None)\n                try:\n                    pow, remainder = divmod(as_int(coeff1), as_int(coeff2))\n                    if pow < 0 and remainder != 0:\n                        pow += 1\n                        remainder -= as_int(coeff2)\n                    if remainder == 0:\n                        remainder_pow = None\n                    else:\n                        remainder_pow = Mul(remainder, *terms1)\n                    return (True, pow, remainder_pow)\n                except ValueError:\n                    pass\n        return (False, None, None)\n    if old == self.base or (old == exp and self.base == S.Exp1):\n        if new.is_Function and isinstance(new, Callable):\n            return new(self.exp._subs(old, new))\n        else:\n            return new ** self.exp._subs(old, new)\n    if isinstance(old, self.func) and self.exp == old.exp:\n        l = log(self.base, old.base)\n        if l.is_Number:\n            return Pow(new, l)\n    if isinstance(old, self.func) and self.base == old.base:\n        if self.exp.is_Add is False:\n            ct1 = self.exp.as_independent(Symbol, as_Add=False)\n            ct2 = old.exp.as_independent(Symbol, as_Add=False)\n            ok, pow, remainder_pow = _check(ct1, ct2, old)\n            if ok:\n                result = self.func(new, pow)\n                if remainder_pow is not None:\n                    result = Mul(result, Pow(old.base, remainder_pow))\n                return result\n        else:\n            oarg = old.exp\n            new_l = []\n            o_al = []\n            ct2 = oarg.as_coeff_mul()\n            for a in self.exp.args:\n                newa = a._subs(old, new)\n                ct1 = newa.as_coeff_mul()\n                ok, pow, remainder_pow = _check(ct1, ct2, old)\n                if ok:\n                    new_l.append(new ** pow)\n                    if remainder_pow is not None:\n                        o_al.append(remainder_pow)\n                    continue\n                elif not old.is_commutative and (not newa.is_integer):\n                    return\n                o_al.append(newa)\n            if new_l:\n                expo = Add(*o_al)\n                new_l.append(Pow(self.base, expo, evaluate=False) if expo != 1 else self.base)\n                return Mul(*new_l)\n    if (isinstance(old, exp) or (old.is_Pow and old.base is S.Exp1)) and self.exp.is_extended_real and self.base.is_positive:\n        ct1 = old.exp.as_independent(Symbol, as_Add=False)\n        ct2 = (self.exp * log(self.base)).as_independent(Symbol, as_Add=False)\n        ok, pow, remainder_pow = _check(ct1, ct2, old)\n        if ok:\n            result = self.func(new, pow)\n            if remainder_pow is not None:\n                result = Mul(result, Pow(old.base, remainder_pow))\n            return result",
    ".sympy.core.power.py@@Pow.exp": "def exp(self) -> Expr:\n    return self._args[1]",
    ".sympy.core.power.py@@Pow.base": "def base(self) -> Expr:\n    return self._args[0]",
    ".sympy.functions.elementary.exponential.py@@ExpMeta.__instancecheck__": "def __instancecheck__(cls, instance):\n    if exp in instance.__class__.__mro__:\n        return True\n    return isinstance(instance, Pow) and instance.base is S.Exp1",
    ".sympy.core.symbol.py@@Symbol._eval_subs": "def _eval_subs(self, old, new):\n    if old.is_Pow:\n        from sympy.core.power import Pow\n        return Pow(self, S.One, evaluate=False)._eval_subs(old, new)",
    ".sympy.core.expr.py@@Expr.__pow__": "def __pow__(self, other, mod=None) -> Expr:\n    if mod is None:\n        return self._pow(other)\n    try:\n        _self, other, mod = (as_int(self), as_int(other), as_int(mod))\n        if other >= 0:\n            return _sympify(pow(_self, other, mod))\n        else:\n            from .numbers import mod_inverse\n            return _sympify(mod_inverse(pow(_self, -other, mod), mod))\n    except ValueError:\n        power = self._pow(other)\n        try:\n            return power % mod\n        except TypeError:\n            return NotImplemented",
    ".sympy.core.expr.py@@Expr._pow": "def _pow(self, other):\n    return Pow(self, other)",
    ".sympy.core.power.py@@Pow.__new__": "def __new__(cls, b, e, evaluate=None):\n    if evaluate is None:\n        evaluate = global_parameters.evaluate\n    b = _sympify(b)\n    e = _sympify(e)\n    from .relational import Relational\n    if isinstance(b, Relational) or isinstance(e, Relational):\n        raise TypeError('Relational cannot be used in Pow')\n    for arg in [b, e]:\n        if not isinstance(arg, Expr):\n            sympy_deprecation_warning(f'\\nUsing non-Expr arguments in Pow is deprecated (in this case, one of the\\narguments is of type {type(arg).__name__!r}).\\n\\nIf you really did intend to construct a power with this base, use the **\\noperator instead.', deprecated_since_version='1.7', active_deprecations_target='non-expr-args-deprecated', stacklevel=4)\n    if evaluate:\n        if e is S.ComplexInfinity:\n            return S.NaN\n        if e is S.Infinity:\n            if is_gt(b, S.One):\n                return S.Infinity\n            if is_gt(b, S.NegativeOne) and is_lt(b, S.One):\n                return S.Zero\n            if is_lt(b, S.NegativeOne):\n                if b.is_finite:\n                    return S.ComplexInfinity\n                if b.is_finite is False:\n                    return S.NaN\n        if e is S.Zero:\n            return S.One\n        elif e is S.One:\n            return b\n        elif e == -1 and (not b):\n            return S.ComplexInfinity\n        elif e.__class__.__name__ == 'AccumulationBounds':\n            if b == S.Exp1:\n                from sympy.calculus.accumulationbounds import AccumBounds\n                return AccumBounds(Pow(b, e.min), Pow(b, e.max))\n        elif (e.is_Symbol and e.is_integer or e.is_Integer) and (b.is_number and b.is_Mul or b.is_Number) and b.could_extract_minus_sign():\n            if e.is_even:\n                b = -b\n            elif e.is_odd:\n                return -Pow(-b, e)\n        if S.NaN in (b, e):\n            return S.NaN\n        elif b is S.One:\n            if abs(e).is_infinite:\n                return S.NaN\n            return S.One\n        else:\n            from sympy.functions.elementary.exponential import exp_polar\n            if not e.is_Atom and b is not S.Exp1 and (not isinstance(b, exp_polar)):\n                from .exprtools import factor_terms\n                from sympy.functions.elementary.exponential import log\n                from sympy.simplify.radsimp import fraction\n                c, ex = factor_terms(e, sign=False).as_coeff_Mul()\n                num, den = fraction(ex)\n                if isinstance(den, log) and den.args[0] == b:\n                    return S.Exp1 ** (c * num)\n                elif den.is_Add:\n                    from sympy.functions.elementary.complexes import sign, im\n                    s = sign(im(b))\n                    if s.is_Number and s and (den == log(-factor_terms(b, sign=False)) + s * S.ImaginaryUnit * S.Pi):\n                        return S.Exp1 ** (c * num)\n            obj = b._eval_power(e)\n            if obj is not None:\n                return obj\n    obj = Expr.__new__(cls, b, e)\n    obj = cls._exec_constructor_postprocessors(obj)\n    if not isinstance(obj, Pow):\n        return obj\n    obj.is_commutative = b.is_commutative and e.is_commutative\n    return obj",
    ".sympy.core.expr.py@@Expr._eval_power": "def _eval_power(self, other):\n    return None",
    ".sympy.core.basic.py@@Basic._exec_constructor_postprocessors": "def _exec_constructor_postprocessors(cls, obj):\n    clsname = obj.__class__.__name__\n    postprocessors = defaultdict(list)\n    for i in obj.args:\n        try:\n            postprocessor_mappings = (Basic._constructor_postprocessor_mapping[cls].items() for cls in type(i).mro() if cls in Basic._constructor_postprocessor_mapping)\n            for k, v in chain.from_iterable(postprocessor_mappings):\n                postprocessors[k].extend([j for j in v if j not in postprocessors[k]])\n        except TypeError:\n            pass\n    for f in postprocessors.get(clsname, []):\n        obj = f(obj)\n    return obj",
    ".sympy.core.add.py@@Add.flatten": "def flatten(cls, seq):\n    from sympy.calculus.accumulationbounds import AccumBounds\n    from sympy.matrices.expressions import MatrixExpr\n    from sympy.tensor.tensor import TensExpr\n    rv = None\n    if len(seq) == 2:\n        a, b = seq\n        if b.is_Rational:\n            a, b = (b, a)\n        if a.is_Rational:\n            if b.is_Mul:\n                rv = ([a, b], [], None)\n        if rv:\n            if all((s.is_commutative for s in rv[0])):\n                return rv\n            return ([], rv[0], None)\n    terms = {}\n    coeff = S.Zero\n    order_factors = []\n    extra = []\n    for o in seq:\n        if o.is_Order:\n            if o.expr.is_zero:\n                continue\n            for o1 in order_factors:\n                if o1.contains(o):\n                    o = None\n                    break\n            if o is None:\n                continue\n            order_factors = [o] + [o1 for o1 in order_factors if not o.contains(o1)]\n            continue\n        elif o.is_Number:\n            if (o is S.NaN or (coeff is S.ComplexInfinity and o.is_finite is False)) and (not extra):\n                return ([S.NaN], [], None)\n            if coeff.is_Number or isinstance(coeff, AccumBounds):\n                coeff += o\n                if coeff is S.NaN and (not extra):\n                    return ([S.NaN], [], None)\n            continue\n        elif isinstance(o, AccumBounds):\n            coeff = o.__add__(coeff)\n            continue\n        elif isinstance(o, MatrixExpr):\n            extra.append(o)\n            continue\n        elif isinstance(o, TensExpr):\n            coeff = o.__add__(coeff) if coeff else o\n            continue\n        elif o is S.ComplexInfinity:\n            if coeff.is_finite is False and (not extra):\n                return ([S.NaN], [], None)\n            coeff = S.ComplexInfinity\n            continue\n        elif o.is_Add:\n            seq.extend(o.args)\n            continue\n        elif o.is_Mul:\n            c, s = o.as_coeff_Mul()\n        elif o.is_Pow:\n            b, e = o.as_base_exp()\n            if b.is_Number and (e.is_Integer or (e.is_Rational and e.is_negative)):\n                seq.append(b ** e)\n                continue\n            c, s = (S.One, o)\n        else:\n            c = S.One\n            s = o\n        if s in terms:\n            terms[s] += c\n            if terms[s] is S.NaN and (not extra):\n                return ([S.NaN], [], None)\n        else:\n            terms[s] = c\n    newseq = []\n    noncommutative = False\n    for s, c in terms.items():\n        if c.is_zero:\n            continue\n        elif c is S.One:\n            newseq.append(s)\n        elif s.is_Mul:\n            cs = s._new_rawargs(*(c,) + s.args)\n            newseq.append(cs)\n        elif s.is_Add:\n            newseq.append(Mul(c, s, evaluate=False))\n        else:\n            newseq.append(Mul(c, s))\n        noncommutative = noncommutative or not s.is_commutative\n    if coeff is S.Infinity:\n        newseq = [f for f in newseq if not (f.is_extended_nonnegative or f.is_real)]\n    elif coeff is S.NegativeInfinity:\n        newseq = [f for f in newseq if not (f.is_extended_nonpositive or f.is_real)]\n    if coeff is S.ComplexInfinity:\n        newseq = [c for c in newseq if not (c.is_finite and c.is_extended_real is not None)]\n    if order_factors:\n        newseq2 = []\n        for t in newseq:\n            for o in order_factors:\n                if o.contains(t):\n                    t = None\n                    break\n            if t is not None:\n                newseq2.append(t)\n        newseq = newseq2 + order_factors\n        for o in order_factors:\n            if o.contains(coeff):\n                coeff = S.Zero\n                break\n    _addsort(newseq)\n    if coeff is not S.Zero:\n        newseq.insert(0, coeff)\n    if extra:\n        newseq += extra\n        noncommutative = True\n    if noncommutative:\n        return ([], newseq, None)\n    else:\n        return (newseq, [], None)",
    ".sympy.core.numbers.py@@Integer.__add__": "def __add__(self, other):\n    if global_parameters.evaluate:\n        if isinstance(other, int):\n            return Integer(self.p + other)\n        elif isinstance(other, Integer):\n            return Integer(self.p + other.p)\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.q + other.p, other.q, 1)\n        return Rational.__add__(self, other)\n    else:\n        return Add(self, other)",
    ".sympy.core.power.py@@Pow.as_base_exp": "def as_base_exp(self):\n    b, e = self.args\n    if b.is_Rational and b.p == 1 and (b.q != 1):\n        return (Integer(b.q), -e)\n    return (b, e)",
    ".sympy.core.numbers.py@@Integer.__hash__": "def __hash__(self):\n    return hash(self.p)",
    ".sympy.core.add.py@@_addsort": "def _addsort(args):\n    args.sort(key=_args_sortkey)",
    ".sympy.core.basic.py@@Basic.compare": "def compare(self, other):\n    if self is other:\n        return 0\n    n1 = self.__class__\n    n2 = other.__class__\n    c = (n1 > n2) - (n1 < n2)\n    if c:\n        return c\n    st = self._hashable_content()\n    ot = other._hashable_content()\n    c = (len(st) > len(ot)) - (len(st) < len(ot))\n    if c:\n        return c\n    for l, r in zip(st, ot):\n        l = Basic(*l) if isinstance(l, frozenset) else l\n        r = Basic(*r) if isinstance(r, frozenset) else r\n        if isinstance(l, Basic):\n            c = l.compare(r)\n        else:\n            c = (l > r) - (l < r)\n        if c:\n            return c\n    return 0",
    ".sympy.core.core.py@@BasicMeta.__gt__": "def __gt__(cls, other):\n    if cls.__cmp__(other) == 1:\n        return True\n    return False",
    ".sympy.core.core.py@@BasicMeta.__cmp__": "def __cmp__(cls, other):\n    if not isinstance(other, BasicMeta):\n        return -1\n    n1 = cls.__name__\n    n2 = other.__name__\n    if n1 == n2:\n        return 0\n    UNKNOWN = len(ordering_of_classes) + 1\n    try:\n        i1 = ordering_of_classes.index(n1)\n    except ValueError:\n        i1 = UNKNOWN\n    try:\n        i2 = ordering_of_classes.index(n2)\n    except ValueError:\n        i2 = UNKNOWN\n    if i1 == UNKNOWN and i2 == UNKNOWN:\n        return (n1 > n2) - (n1 < n2)\n    return (i1 > i2) - (i1 < i2)",
    ".sympy.core.core.py@@BasicMeta.__lt__": "def __lt__(cls, other):\n    if cls.__cmp__(other) == -1:\n        return True\n    return False",
    ".sympy.core.operations.py@@AssocOp._from_args": "def _from_args(cls, args, is_commutative=None):\n    if len(args) == 0:\n        return cls.identity\n    elif len(args) == 1:\n        return args[0]\n    obj = super().__new__(cls, *args)\n    if is_commutative is None:\n        is_commutative = fuzzy_and((a.is_commutative for a in args))\n    obj.is_commutative = is_commutative\n    return obj",
    ".sympy.core.add.py@@Add._eval_derivative": "def _eval_derivative(self, s):\n    return self.func(*[a.diff(s) for a in self.args])",
    ".sympy.core.function.py@@Derivative._get_zero_with_shape_like": "def _get_zero_with_shape_like(cls, expr):\n    return S.Zero",
    ".sympy.core.power.py@@Pow._eval_derivative": "def _eval_derivative(self, s):\n    from sympy.functions.elementary.exponential import log\n    dbase = self.base.diff(s)\n    dexp = self.exp.diff(s)\n    return self * (dexp * log(self.base) + dbase * self.exp / self.base)",
    ".sympy.sets.sets.py@@FiniteSet.__new__": "def __new__(cls, *args, **kwargs):\n    evaluate = kwargs.get('evaluate', global_parameters.evaluate)\n    if evaluate:\n        args = list(map(sympify, args))\n        if len(args) == 0:\n            return S.EmptySet\n    else:\n        args = list(map(sympify, args))\n    dargs = {}\n    for i in reversed(list(ordered(args))):\n        if i.is_Symbol:\n            dargs[i] = i\n        else:\n            try:\n                dargs[i.as_dummy()] = i\n            except TypeError:\n                dargs[i] = i\n    _args_set = set(dargs.values())\n    args = list(ordered(_args_set, Set._infimum_key))\n    obj = Basic.__new__(cls, *args)\n    obj._args_set = _args_set\n    return obj",
    ".sympy.core.sorting.py@@default_sort_key": "def default_sort_key(item, order=None):\n    from .basic import Basic\n    from .singleton import S\n    if isinstance(item, Basic):\n        return item.sort_key(order=order)\n    if iterable(item, exclude=str):\n        if isinstance(item, dict):\n            args = item.items()\n            unordered = True\n        elif isinstance(item, set):\n            args = item\n            unordered = True\n        else:\n            args = list(item)\n            unordered = False\n        args = [default_sort_key(arg, order=order) for arg in args]\n        if unordered:\n            args = sorted(args)\n        cls_index, args = (10, (len(args), tuple(args)))\n    else:\n        if not isinstance(item, str):\n            try:\n                item = sympify(item, strict=True)\n            except SympifyError:\n                pass\n            else:\n                if isinstance(item, Basic):\n                    return default_sort_key(item)\n        cls_index, args = (0, (1, (str(item),)))\n    return ((cls_index, 0, item.__class__.__name__), args, S.One.sort_key(), S.One)",
    ".sympy.core.numbers.py@@Number.sort_key": "def sort_key(self, order=None):\n    return (self.class_key(), (0, ()), (), self)",
    ".sympy.core.numbers.py@@Number.class_key": "def class_key(cls):\n    return (1, 0, 'Number')",
    ".sympy.logic.boolalg.py@@BooleanFalse.__bool__": "def __bool__(self):\n    return False",
    ".sympy.core.basic.py@@Basic.as_dummy": "def as_dummy(self):\n    from .symbol import Dummy, Symbol\n\n    def can(x):\n        free = x.free_symbols\n        bound = set(x.bound_symbols)\n        d = {i: Dummy() for i in bound & free}\n        x = x.subs(d)\n        x = x.xreplace(x.canonical_variables)\n        return x.xreplace({v: k for k, v in d.items()})\n    if not self.has(Symbol):\n        return self\n    return self.replace(lambda x: hasattr(x, 'bound_symbols'), can, simultaneous=False)",
    ".sympy.core.basic.py@@Basic.has": "def has(self, *patterns):\n    return self._has(iterargs, *patterns)",
    ".sympy.core.basic.py@@Basic._has": "def _has(self, iterargs, *patterns):\n    type_set = set()\n    p_set = set()\n    for p in patterns:\n        if isinstance(p, BasicMeta):\n            type_set.add(p)\n            continue\n        if not isinstance(p, Basic):\n            try:\n                p = _sympify(p)\n            except SympifyError:\n                continue\n        p_set.add(p)\n    types = tuple(type_set)\n    for i in iterargs(self):\n        if i in p_set:\n            return True\n        if isinstance(i, types):\n            return True\n    for i in p_set - type_set:\n        if not hasattr(i, '_has_matcher'):\n            continue\n        match = i._has_matcher()\n        if any((match(arg) for arg in iterargs(self))):\n            return True\n    return False",
    ".sympy.core.traversal.py@@iterargs": "def iterargs(expr):\n    args = [expr]\n    for i in args:\n        yield i\n        try:\n            args.extend(i.args)\n        except TypeError:\n            pass",
    ".sympy.sets.sets.py@@Set._infimum_key": "def _infimum_key(expr):\n    try:\n        infimum = expr.inf\n        assert infimum.is_comparable\n        infimum = infimum.evalf()\n    except (NotImplementedError, AttributeError, AssertionError, ValueError):\n        infimum = S.Infinity\n    return infimum",
    ".sympy.core.numbers.py@@Infinity.__hash__": "def __hash__(self):\n    return super().__hash__()",
    ".sympy.core.numbers.py@@Number.__hash__": "def __hash__(self):\n    return super().__hash__()",
    ".sympy.sets.sets.py@@FiniteSet._contains": "def _contains(self, other):\n    if other in self._args_set:\n        return True\n    else:\n        return fuzzy_or((fuzzy_bool(Eq(e, other, evaluate=True)) for e in self.args))",
    ".sympy.functions.elementary.exponential.py@@log.eval": "def eval(cls, arg, base=None):\n    from sympy.calculus import AccumBounds\n    from sympy.sets.setexpr import SetExpr\n    arg = sympify(arg)\n    if base is not None:\n        base = sympify(base)\n        if base == 1:\n            if arg == 1:\n                return S.NaN\n            else:\n                return S.ComplexInfinity\n        try:\n            n = multiplicity(base, arg)\n            if n:\n                return n + log(arg / base ** n) / log(base)\n            else:\n                return log(arg) / log(base)\n        except ValueError:\n            pass\n        if base is not S.Exp1:\n            return cls(arg) / cls(base)\n        else:\n            return cls(arg)\n    if arg.is_Number:\n        if arg.is_zero:\n            return S.ComplexInfinity\n        elif arg is S.One:\n            return S.Zero\n        elif arg is S.Infinity:\n            return S.Infinity\n        elif arg is S.NegativeInfinity:\n            return S.Infinity\n        elif arg is S.NaN:\n            return S.NaN\n        elif arg.is_Rational and arg.p == 1:\n            return -cls(arg.q)\n    if arg.is_Pow and arg.base is S.Exp1 and arg.exp.is_extended_real:\n        return arg.exp\n    I = S.ImaginaryUnit\n    if isinstance(arg, exp) and arg.exp.is_extended_real:\n        return arg.exp\n    elif isinstance(arg, exp) and arg.exp.is_number:\n        r_, i_ = match_real_imag(arg.exp)\n        if i_ and i_.is_comparable:\n            i_ %= 2 * S.Pi\n            if i_ > S.Pi:\n                i_ -= 2 * S.Pi\n            return r_ + expand_mul(i_ * I, deep=False)\n    elif isinstance(arg, exp_polar):\n        return unpolarify(arg.exp)\n    elif isinstance(arg, AccumBounds):\n        if arg.min.is_positive:\n            return AccumBounds(log(arg.min), log(arg.max))\n        elif arg.min.is_zero:\n            return AccumBounds(S.NegativeInfinity, log(arg.max))\n        else:\n            return S.NaN\n    elif isinstance(arg, SetExpr):\n        return arg._eval_func(cls)\n    if arg.is_number:\n        if arg.is_negative:\n            return S.Pi * I + cls(-arg)\n        elif arg is S.ComplexInfinity:\n            return S.ComplexInfinity\n        elif arg is S.Exp1:\n            return S.One\n    if arg.is_zero:\n        return S.ComplexInfinity\n    if not arg.is_Add:\n        coeff = arg.as_coefficient(I)\n        if coeff is not None:\n            if coeff is S.Infinity:\n                return S.Infinity\n            elif coeff is S.NegativeInfinity:\n                return S.Infinity\n            elif coeff.is_Rational:\n                if coeff.is_nonnegative:\n                    return S.Pi * I * S.Half + cls(coeff)\n                else:\n                    return -S.Pi * I * S.Half + cls(-coeff)\n    if arg.is_number and arg.is_algebraic:\n        coeff, arg_ = arg.as_independent(I, as_Add=False)\n        if coeff.is_negative:\n            coeff *= -1\n            arg_ *= -1\n        arg_ = expand_mul(arg_, deep=False)\n        r_, i_ = arg_.as_independent(I, as_Add=True)\n        i_ = i_.as_coefficient(I)\n        if coeff.is_real and i_ and i_.is_real and r_.is_real:\n            if r_.is_zero:\n                if i_.is_positive:\n                    return S.Pi * I * S.Half + cls(coeff * i_)\n                elif i_.is_negative:\n                    return -S.Pi * I * S.Half + cls(coeff * -i_)\n            else:\n                from sympy.simplify import ratsimp\n                t = (i_ / r_).cancel()\n                t1 = (-t).cancel()\n                atan_table = {sqrt(3): S.Pi / 3, 1: S.Pi / 4, sqrt(5 - 2 * sqrt(5)): S.Pi / 5, sqrt(2) * sqrt(5 - sqrt(5)) / (1 + sqrt(5)): S.Pi / 5, sqrt(5 + 2 * sqrt(5)): S.Pi * Rational(2, 5), sqrt(2) * sqrt(sqrt(5) + 5) / (-1 + sqrt(5)): S.Pi * Rational(2, 5), sqrt(3) / 3: S.Pi / 6, sqrt(2) - 1: S.Pi / 8, sqrt(2 - sqrt(2)) / sqrt(sqrt(2) + 2): S.Pi / 8, sqrt(2) + 1: S.Pi * Rational(3, 8), sqrt(sqrt(2) + 2) / sqrt(2 - sqrt(2)): S.Pi * Rational(3, 8), sqrt(1 - 2 * sqrt(5) / 5): S.Pi / 10, (-sqrt(2) + sqrt(10)) / (2 * sqrt(sqrt(5) + 5)): S.Pi / 10, sqrt(1 + 2 * sqrt(5) / 5): S.Pi * Rational(3, 10), (sqrt(2) + sqrt(10)) / (2 * sqrt(5 - sqrt(5))): S.Pi * Rational(3, 10), 2 - sqrt(3): S.Pi / 12, (-1 + sqrt(3)) / (1 + sqrt(3)): S.Pi / 12, 2 + sqrt(3): S.Pi * Rational(5, 12), (1 + sqrt(3)) / (-1 + sqrt(3)): S.Pi * Rational(5, 12)}\n                if t in atan_table:\n                    modulus = ratsimp(coeff * Abs(arg_))\n                    if r_.is_positive:\n                        return cls(modulus) + I * atan_table[t]\n                    else:\n                        return cls(modulus) + I * (atan_table[t] - S.Pi)\n                elif t1 in atan_table:\n                    modulus = ratsimp(coeff * Abs(arg_))\n                    if r_.is_positive:\n                        return cls(modulus) + I * -atan_table[t1]\n                    else:\n                        return cls(modulus) + I * (S.Pi - atan_table[t1])",
    ".sympy.core.decorators.py@@_sympifyit": "def _sympifyit(arg, retval=None):\n\n    def deco(func):\n        return __sympifyit(func, arg, retval)\n    return deco",
    ".sympy.core.decorators.py@@call_highest_priority": "def call_highest_priority(method_name):\n\n    def priority_decorator(func):\n\n        @wraps(func)\n        def binary_op_wrapper(self, other):\n            if hasattr(other, '_op_priority'):\n                if other._op_priority > self._op_priority:\n                    f = getattr(other, method_name, None)\n                    if f is not None:\n                        return f(self)\n            return func(self, other)\n        return binary_op_wrapper\n    return priority_decorator",
    ".sympy.core.decorators.py@@priority_decorator": "def priority_decorator(func):\n\n    @wraps(func)\n    def binary_op_wrapper(self, other):\n        if hasattr(other, '_op_priority'):\n            if other._op_priority > self._op_priority:\n                f = getattr(other, method_name, None)\n                if f is not None:\n                    return f(self)\n        return func(self, other)\n    return binary_op_wrapper",
    ".sympy.core.decorators.py@@deco": "def deco(func):\n    return __sympifyit(func, arg, retval)",
    ".sympy.core.decorators.py@@__sympifyit": "def __sympifyit(func, arg, retval=None):\n    if not func.__code__.co_argcount:\n        raise LookupError('func not found')\n    assert func.__code__.co_varnames[1] == arg\n    if retval is None:\n\n        @wraps(func)\n        def __sympifyit_wrapper(a, b):\n            return func(a, sympify(b, strict=True))\n    else:\n\n        @wraps(func)\n        def __sympifyit_wrapper(a, b):\n            try:\n                if not hasattr(b, '_op_priority'):\n                    b = sympify(b, strict=True)\n                return func(a, b)\n            except SympifyError:\n                return retval\n    return __sympifyit_wrapper",
    ".sympy.core.expr.py@@Expr.as_coefficient": "def as_coefficient(self, expr):\n    r = self.extract_multiplicatively(expr)\n    if r and (not r.has(expr)):\n        return r",
    ".sympy.core.expr.py@@Expr.extract_multiplicatively": "def extract_multiplicatively(self, c):\n    from sympy.functions.elementary.exponential import exp\n    from .add import _unevaluated_Add\n    c = sympify(c)\n    if self is S.NaN:\n        return None\n    if c is S.One:\n        return self\n    elif c == self:\n        return S.One\n    if c.is_Add:\n        cc, pc = c.primitive()\n        if cc is not S.One:\n            c = Mul(cc, pc, evaluate=False)\n    if c.is_Mul:\n        a, b = c.as_two_terms()\n        x = self.extract_multiplicatively(a)\n        if x is not None:\n            return x.extract_multiplicatively(b)\n        else:\n            return x\n    quotient = self / c\n    if self.is_Number:\n        if self is S.Infinity:\n            if c.is_positive:\n                return S.Infinity\n        elif self is S.NegativeInfinity:\n            if c.is_negative:\n                return S.Infinity\n            elif c.is_positive:\n                return S.NegativeInfinity\n        elif self is S.ComplexInfinity:\n            if not c.is_zero:\n                return S.ComplexInfinity\n        elif self.is_Integer:\n            if not quotient.is_Integer:\n                return None\n            elif self.is_positive and quotient.is_negative:\n                return None\n            else:\n                return quotient\n        elif self.is_Rational:\n            if not quotient.is_Rational:\n                return None\n            elif self.is_positive and quotient.is_negative:\n                return None\n            else:\n                return quotient\n        elif self.is_Float:\n            if not quotient.is_Float:\n                return None\n            elif self.is_positive and quotient.is_negative:\n                return None\n            else:\n                return quotient\n    elif self.is_NumberSymbol or self.is_Symbol or self is S.ImaginaryUnit:\n        if quotient.is_Mul and len(quotient.args) == 2:\n            if quotient.args[0].is_Integer and quotient.args[0].is_positive and (quotient.args[1] == self):\n                return quotient\n        elif quotient.is_Integer and c.is_Number:\n            return quotient\n    elif self.is_Add:\n        cs, ps = self.primitive()\n        if c.is_Number and c is not S.NegativeOne:\n            if cs is not S.One:\n                if c.is_negative:\n                    xc = -cs.extract_multiplicatively(-c)\n                else:\n                    xc = cs.extract_multiplicatively(c)\n                if xc is not None:\n                    return xc * ps\n            return\n        if c == ps:\n            return cs\n        newargs = []\n        for arg in ps.args:\n            newarg = arg.extract_multiplicatively(c)\n            if newarg is None:\n                return\n            newargs.append(newarg)\n        if cs is not S.One:\n            args = [cs * t for t in newargs]\n            return _unevaluated_Add(*args)\n        else:\n            return Add._from_args(newargs)\n    elif self.is_Mul:\n        args = list(self.args)\n        for i, arg in enumerate(args):\n            newarg = arg.extract_multiplicatively(c)\n            if newarg is not None:\n                args[i] = newarg\n                return Mul(*args)\n    elif self.is_Pow or isinstance(self, exp):\n        sb, se = self.as_base_exp()\n        cb, ce = c.as_base_exp()\n        if cb == sb:\n            new_exp = se.extract_additively(ce)\n            if new_exp is not None:\n                return Pow(sb, new_exp)\n        elif c == sb:\n            new_exp = self.exp.extract_additively(1)\n            if new_exp is not None:\n                return Pow(sb, new_exp)",
    ".sympy.core.expr.py@@Expr.__truediv__": "def __truediv__(self, other):\n    denom = Pow(other, S.NegativeOne)\n    if self is S.One:\n        return denom\n    else:\n        return Mul(self, denom)",
    ".sympy.core.numbers.py@@ImaginaryUnit._eval_power": "def _eval_power(self, expt):\n    if isinstance(expt, Integer):\n        expt = expt % 4\n        if expt == 0:\n            return S.One\n        elif expt == 1:\n            return S.ImaginaryUnit\n        elif expt == 2:\n            return S.NegativeOne\n        elif expt == 3:\n            return -S.ImaginaryUnit\n    if isinstance(expt, Rational):\n        i, r = divmod(expt, 2)\n        rv = Pow(S.ImaginaryUnit, r, evaluate=False)\n        if i % 2:\n            return Mul(S.NegativeOne, rv, evaluate=False)\n        return rv",
    ".sympy.core.numbers.py@@Integer.__mod__": "def __mod__(self, other):\n    if global_parameters.evaluate:\n        if isinstance(other, int):\n            return Integer(self.p % other)\n        elif isinstance(other, Integer):\n            return Integer(self.p % other.p)\n        return Rational.__mod__(self, other)\n    return Rational.__mod__(self, other)",
    ".sympy.core.expr.py@@Expr.__neg__": "def __neg__(self):\n    c = self.is_commutative\n    return Mul._from_args((S.NegativeOne, self), c)",
    ".sympy.core.mul.py@@Mul.flatten": "def flatten(cls, seq):\n    from sympy.calculus.accumulationbounds import AccumBounds\n    from sympy.matrices.expressions import MatrixExpr\n    rv = None\n    if len(seq) == 2:\n        a, b = seq\n        if b.is_Rational:\n            a, b = (b, a)\n            seq = [a, b]\n        assert a is not S.One\n        if not a.is_zero and a.is_Rational:\n            r, b = b.as_coeff_Mul()\n            if b.is_Add:\n                if r is not S.One:\n                    ar = a * r\n                    if ar is S.One:\n                        arb = b\n                    else:\n                        arb = cls(a * r, b, evaluate=False)\n                    rv = ([arb], [], None)\n                elif global_parameters.distribute and b.is_commutative:\n                    newb = Add(*[_keep_coeff(a, bi) for bi in b.args])\n                    rv = ([newb], [], None)\n        if rv:\n            return rv\n    c_part = []\n    nc_part = []\n    nc_seq = []\n    coeff = S.One\n    c_powers = []\n    num_exp = []\n    neg1e = S.Zero\n    pnum_rat = {}\n    order_symbols = None\n    for o in seq:\n        if o.is_Order:\n            o, order_symbols = o.as_expr_variables(order_symbols)\n        if o.is_Mul:\n            if o.is_commutative:\n                seq.extend(o.args)\n            else:\n                for q in o.args:\n                    if q.is_commutative:\n                        seq.append(q)\n                    else:\n                        nc_seq.append(q)\n                seq.append(NC_Marker)\n            continue\n        elif o.is_Number:\n            if o is S.NaN or (coeff is S.ComplexInfinity and o.is_zero):\n                return ([S.NaN], [], None)\n            elif coeff.is_Number or isinstance(coeff, AccumBounds):\n                coeff *= o\n                if coeff is S.NaN:\n                    return ([S.NaN], [], None)\n            continue\n        elif isinstance(o, AccumBounds):\n            coeff = o.__mul__(coeff)\n            continue\n        elif o is S.ComplexInfinity:\n            if not coeff:\n                return ([S.NaN], [], None)\n            coeff = S.ComplexInfinity\n            continue\n        elif o is S.ImaginaryUnit:\n            neg1e += S.Half\n            continue\n        elif o.is_commutative:\n            b, e = o.as_base_exp()\n            if o.is_Pow:\n                if b.is_Number:\n                    if e.is_Rational:\n                        if e.is_Integer:\n                            coeff *= Pow(b, e)\n                            continue\n                        elif e.is_negative:\n                            seq.append(Pow(b, e))\n                            continue\n                        elif b.is_negative:\n                            neg1e += e\n                            b = -b\n                        if b is not S.One:\n                            pnum_rat.setdefault(b, []).append(e)\n                        continue\n                    elif b.is_positive or e.is_integer:\n                        num_exp.append((b, e))\n                        continue\n            c_powers.append((b, e))\n        else:\n            if o is not NC_Marker:\n                nc_seq.append(o)\n            while nc_seq:\n                o = nc_seq.pop(0)\n                if not nc_part:\n                    nc_part.append(o)\n                    continue\n                o1 = nc_part.pop()\n                b1, e1 = o1.as_base_exp()\n                b2, e2 = o.as_base_exp()\n                new_exp = e1 + e2\n                if b1 == b2 and (not new_exp.is_Add):\n                    o12 = b1 ** new_exp\n                    if o12.is_commutative:\n                        seq.append(o12)\n                        continue\n                    else:\n                        nc_seq.insert(0, o12)\n                else:\n                    nc_part.append(o1)\n                    nc_part.append(o)\n\n    def _gather(c_powers):\n        common_b = {}\n        for b, e in c_powers:\n            co = e.as_coeff_Mul()\n            common_b.setdefault(b, {}).setdefault(co[1], []).append(co[0])\n        for b, d in common_b.items():\n            for di, li in d.items():\n                d[di] = Add(*li)\n        new_c_powers = []\n        for b, e in common_b.items():\n            new_c_powers.extend([(b, c * t) for t, c in e.items()])\n        return new_c_powers\n    c_powers = _gather(c_powers)\n    num_exp = _gather(num_exp)\n    for i in range(2):\n        new_c_powers = []\n        changed = False\n        for b, e in c_powers:\n            if e.is_zero:\n                if (b.is_Add or b.is_Mul) and any((infty in b.args for infty in (S.ComplexInfinity, S.Infinity, S.NegativeInfinity))):\n                    return ([S.NaN], [], None)\n                continue\n            if e is S.One:\n                if b.is_Number:\n                    coeff *= b\n                    continue\n                p = b\n            if e is not S.One:\n                p = Pow(b, e)\n                if p.is_Pow and (not b.is_Pow):\n                    bi = b\n                    b, e = p.as_base_exp()\n                    if b != bi:\n                        changed = True\n            c_part.append(p)\n            new_c_powers.append((b, e))\n        if changed and len({b for b, e in new_c_powers}) != len(new_c_powers):\n            c_part = []\n            c_powers = _gather(new_c_powers)\n        else:\n            break\n    inv_exp_dict = {}\n    for b, e in num_exp:\n        inv_exp_dict.setdefault(e, []).append(b)\n    for e, b in inv_exp_dict.items():\n        inv_exp_dict[e] = cls(*b)\n    c_part.extend([Pow(b, e) for e, b in inv_exp_dict.items() if e])\n    comb_e = {}\n    for b, e in pnum_rat.items():\n        comb_e.setdefault(Add(*e), []).append(b)\n    del pnum_rat\n    num_rat = []\n    for e, b in comb_e.items():\n        b = cls(*b)\n        if e.q == 1:\n            coeff *= Pow(b, e)\n            continue\n        if e.p > e.q:\n            e_i, ep = divmod(e.p, e.q)\n            coeff *= Pow(b, e_i)\n            e = Rational(ep, e.q)\n        num_rat.append((b, e))\n    del comb_e\n    pnew = defaultdict(list)\n    i = 0\n    while i < len(num_rat):\n        bi, ei = num_rat[i]\n        grow = []\n        for j in range(i + 1, len(num_rat)):\n            bj, ej = num_rat[j]\n            g = bi.gcd(bj)\n            if g is not S.One:\n                e = ei + ej\n                if e.q == 1:\n                    coeff *= Pow(g, e)\n                else:\n                    if e.p > e.q:\n                        e_i, ep = divmod(e.p, e.q)\n                        coeff *= Pow(g, e_i)\n                        e = Rational(ep, e.q)\n                    grow.append((g, e))\n                num_rat[j] = (bj / g, ej)\n                bi = bi / g\n                if bi is S.One:\n                    break\n        if bi is not S.One:\n            obj = Pow(bi, ei)\n            if obj.is_Number:\n                coeff *= obj\n            else:\n                for obj in Mul.make_args(obj):\n                    if obj.is_Number:\n                        coeff *= obj\n                    else:\n                        assert obj.is_Pow\n                        bi, ei = obj.args\n                        pnew[ei].append(bi)\n        num_rat.extend(grow)\n        i += 1\n    for e, b in pnew.items():\n        pnew[e] = cls(*b)\n    if neg1e:\n        p, q = neg1e.as_numer_denom()\n        n, p = divmod(p, q)\n        if n % 2:\n            coeff = -coeff\n        if q == 2:\n            c_part.append(S.ImaginaryUnit)\n        elif p:\n            neg1e = Rational(p, q)\n            for e, b in pnew.items():\n                if e == neg1e and b.is_positive:\n                    pnew[e] = -b\n                    break\n            else:\n                c_part.append(Pow(S.NegativeOne, neg1e, evaluate=False))\n    c_part.extend([Pow(b, e) for e, b in pnew.items()])\n    if coeff in (S.Infinity, S.NegativeInfinity):\n\n        def _handle_for_oo(c_part, coeff_sign):\n            new_c_part = []\n            for t in c_part:\n                if t.is_extended_positive:\n                    continue\n                if t.is_extended_negative:\n                    coeff_sign *= -1\n                    continue\n                new_c_part.append(t)\n            return (new_c_part, coeff_sign)\n        c_part, coeff_sign = _handle_for_oo(c_part, 1)\n        nc_part, coeff_sign = _handle_for_oo(nc_part, coeff_sign)\n        coeff *= coeff_sign\n    if coeff is S.ComplexInfinity:\n        c_part = [c for c in c_part if not (fuzzy_not(c.is_zero) and c.is_extended_real is not None)]\n        nc_part = [c for c in nc_part if not (fuzzy_not(c.is_zero) and c.is_extended_real is not None)]\n    elif coeff.is_zero:\n        if any((isinstance(c, MatrixExpr) for c in nc_part)):\n            return ([coeff], nc_part, order_symbols)\n        if any((c.is_finite == False for c in c_part)):\n            return ([S.NaN], [], order_symbols)\n        return ([coeff], [], order_symbols)\n    _new = []\n    for i in c_part:\n        if i.is_Number:\n            coeff *= i\n        else:\n            _new.append(i)\n    c_part = _new\n    _mulsort(c_part)\n    if coeff is not S.One:\n        c_part.insert(0, coeff)\n    if global_parameters.distribute and (not nc_part) and (len(c_part) == 2) and c_part[0].is_Number and c_part[0].is_finite and c_part[1].is_Add:\n        coeff = c_part[0]\n        c_part = [Add(*[coeff * f for f in c_part[1].args])]\n    return (c_part, nc_part, order_symbols)",
    ".sympy.core.expr.py@@Expr.as_base_exp": "def as_base_exp(self) -> tuple[Expr, Expr]:\n    return (self, S.One)",
    ".sympy.core.numbers.py@@Integer.__mul__": "def __mul__(self, other):\n    if global_parameters.evaluate:\n        if isinstance(other, int):\n            return Integer(self.p * other)\n        elif isinstance(other, Integer):\n            return Integer(self.p * other.p)\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.p, other.q, igcd(self.p, other.q))\n        return Rational.__mul__(self, other)\n    return Rational.__mul__(self, other)",
    ".sympy.core.numbers.py@@Rational.__new__": "def __new__(cls, p, q=None, gcd=None):\n    if q is None:\n        if isinstance(p, Rational):\n            return p\n        if isinstance(p, SYMPY_INTS):\n            pass\n        else:\n            if isinstance(p, (float, Float)):\n                return Rational(*_as_integer_ratio(p))\n            if not isinstance(p, str):\n                try:\n                    p = sympify(p)\n                except (SympifyError, SyntaxError):\n                    pass\n            else:\n                if p.count('/') > 1:\n                    raise TypeError('invalid input: %s' % p)\n                p = p.replace(' ', '')\n                pq = p.rsplit('/', 1)\n                if len(pq) == 2:\n                    p, q = pq\n                    fp = fractions.Fraction(p)\n                    fq = fractions.Fraction(q)\n                    p = fp / fq\n                try:\n                    p = fractions.Fraction(p)\n                except ValueError:\n                    pass\n                else:\n                    return Rational(p.numerator, p.denominator, 1)\n            if not isinstance(p, Rational):\n                raise TypeError('invalid input: %s' % p)\n        q = 1\n        gcd = 1\n    if not isinstance(p, SYMPY_INTS):\n        p = Rational(p)\n        q *= p.q\n        p = p.p\n    else:\n        p = int(p)\n    if not isinstance(q, SYMPY_INTS):\n        q = Rational(q)\n        p *= q.q\n        q = q.p\n    else:\n        q = int(q)\n    if q == 0:\n        if p == 0:\n            if _errdict['divide']:\n                raise ValueError('Indeterminate 0/0')\n            else:\n                return S.NaN\n        return S.ComplexInfinity\n    if q < 0:\n        q = -q\n        p = -p\n    if not gcd:\n        gcd = igcd(abs(p), q)\n    if gcd > 1:\n        p //= gcd\n        q //= gcd\n    if q == 1:\n        return Integer(p)\n    if p == 1 and q == 2:\n        return S.Half\n    obj = Expr.__new__(cls)\n    obj.p = p\n    obj.q = q\n    return obj",
    ".sympy.core.mul.py@@Mul._gather": "def _gather(c_powers):\n    common_b = {}\n    for b, e in c_powers:\n        co = e.as_coeff_Mul()\n        common_b.setdefault(b, {}).setdefault(co[1], []).append(co[0])\n    for b, d in common_b.items():\n        for di, li in d.items():\n            d[di] = Add(*li)\n    new_c_powers = []\n    for b, e in common_b.items():\n        new_c_powers.extend([(b, c * t) for t, c in e.items()])\n    return new_c_powers",
    ".sympy.core.numbers.py@@Rational.as_coeff_Mul": "def as_coeff_Mul(self, rational=False):\n    return (self, S.One)",
    ".sympy.core.numbers.py@@Rational.as_numer_denom": "def as_numer_denom(self):\n    return (Integer(self.p), Integer(self.q))",
    ".sympy.core.numbers.py@@Integer.__divmod__": "def __divmod__(self, other):\n    if isinstance(other, Integer) and global_parameters.evaluate:\n        return Tuple(*divmod(self.p, other.p))\n    else:\n        return Number.__divmod__(self, other)",
    ".sympy.core.numbers.py@@Zero.__bool__": "def __bool__(self):\n    return False",
    ".sympy.core.numbers.py@@Float.__new__": "def __new__(cls, num, dps=None, precision=None):\n    if dps is not None and precision is not None:\n        raise ValueError('Both decimal and binary precision supplied. Supply only one. ')\n    if isinstance(num, str):\n        num = num.replace(' ', '').lower()\n        if num.startswith('.') and len(num) > 1:\n            num = '0' + num\n        elif num.startswith('-.') and len(num) > 2:\n            num = '-0.' + num[2:]\n        elif num in ('inf', '+inf'):\n            return S.Infinity\n        elif num == '-inf':\n            return S.NegativeInfinity\n    elif isinstance(num, float) and num == 0:\n        num = '0'\n    elif isinstance(num, float) and num == float('inf'):\n        return S.Infinity\n    elif isinstance(num, float) and num == float('-inf'):\n        return S.NegativeInfinity\n    elif isinstance(num, float) and math.isnan(num):\n        return S.NaN\n    elif isinstance(num, (SYMPY_INTS, Integer)):\n        num = str(num)\n    elif num is S.Infinity:\n        return num\n    elif num is S.NegativeInfinity:\n        return num\n    elif num is S.NaN:\n        return num\n    elif _is_numpy_instance(num):\n        num = _convert_numpy_types(num)\n    elif isinstance(num, mpmath.mpf):\n        if precision is None:\n            if dps is None:\n                precision = num.context.prec\n        num = num._mpf_\n    if dps is None and precision is None:\n        dps = 15\n        if isinstance(num, Float):\n            return num\n        if isinstance(num, str) and _literal_float(num):\n            try:\n                Num = decimal.Decimal(num)\n            except decimal.InvalidOperation:\n                pass\n            else:\n                isint = '.' not in num\n                num, dps = _decimal_to_Rational_prec(Num)\n                if num.is_Integer and isint:\n                    dps = max(dps, len(str(num).lstrip('-')))\n                dps = max(15, dps)\n                precision = dps_to_prec(dps)\n    elif precision == '' and dps is None or (precision is None and dps == ''):\n        if not isinstance(num, str):\n            raise ValueError('The null string can only be used when the number to Float is passed as a string or an integer.')\n        ok = None\n        if _literal_float(num):\n            try:\n                Num = decimal.Decimal(num)\n            except decimal.InvalidOperation:\n                pass\n            else:\n                isint = '.' not in num\n                num, dps = _decimal_to_Rational_prec(Num)\n                if num.is_Integer and isint:\n                    dps = max(dps, len(str(num).lstrip('-')))\n                    precision = dps_to_prec(dps)\n                ok = True\n        if ok is None:\n            raise ValueError('string-float not recognized: %s' % num)\n    if precision is None or precision == '':\n        precision = dps_to_prec(dps)\n    precision = int(precision)\n    if isinstance(num, float):\n        _mpf_ = mlib.from_float(num, precision, rnd)\n    elif isinstance(num, str):\n        _mpf_ = mlib.from_str(num, precision, rnd)\n    elif isinstance(num, decimal.Decimal):\n        if num.is_finite():\n            _mpf_ = mlib.from_str(str(num), precision, rnd)\n        elif num.is_nan():\n            return S.NaN\n        elif num.is_infinite():\n            if num > 0:\n                return S.Infinity\n            return S.NegativeInfinity\n        else:\n            raise ValueError('unexpected decimal value %s' % str(num))\n    elif isinstance(num, tuple) and len(num) in (3, 4):\n        if isinstance(num[1], str):\n            num = list(num)\n            if num[1].endswith('L'):\n                num[1] = num[1][:-1]\n            if num[1].startswith('0x'):\n                num[1] = num[1][2:]\n            num[1] = MPZ(num[1], 16)\n            _mpf_ = tuple(num)\n        elif len(num) == 4:\n            return Float._new(num, precision)\n        else:\n            if not all((num[0] in (0, 1), num[1] >= 0, all((type(i) in (int, int) for i in num)))):\n                raise ValueError('malformed mpf: %s' % (num,))\n            return Float._new((num[0], num[1], num[2], bitcount(num[1])), precision)\n    else:\n        try:\n            _mpf_ = num._as_mpf_val(precision)\n        except (NotImplementedError, AttributeError):\n            _mpf_ = mpmath.mpf(num, prec=precision)._mpf_\n    return cls._new(_mpf_, precision, zero=False)",
    ".sympy.core.mul.py@@_mulsort": "def _mulsort(args):\n    args.sort(key=_args_sortkey)",
    ".sympy.core.decorators.py@@__sympifyit_wrapper": "def __sympifyit_wrapper(a, b):\n    try:\n        if not hasattr(b, '_op_priority'):\n            b = sympify(b, strict=True)\n        return func(a, b)\n    except SympifyError:\n        return retval",
    ".sympy.core.numbers.py@@Rational.__mul__": "def __mul__(self, other):\n    if global_parameters.evaluate:\n        if isinstance(other, Integer):\n            return Rational(self.p * other.p, self.q, igcd(other.p, self.q))\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.p, self.q * other.q, igcd(self.p, other.q) * igcd(self.q, other.p))\n        elif isinstance(other, Float):\n            return other * self\n        else:\n            return Number.__mul__(self, other)\n    return Number.__mul__(self, other)",
    ".sympy.core.numbers.py@@Number.__mul__": "def __mul__(self, other):\n    if isinstance(other, Number) and global_parameters.evaluate:\n        if other is S.NaN:\n            return S.NaN\n        elif other is S.Infinity:\n            if self.is_zero:\n                return S.NaN\n            elif self.is_positive:\n                return S.Infinity\n            else:\n                return S.NegativeInfinity\n        elif other is S.NegativeInfinity:\n            if self.is_zero:\n                return S.NaN\n            elif self.is_positive:\n                return S.NegativeInfinity\n            else:\n                return S.Infinity\n    elif isinstance(other, Tuple):\n        return NotImplemented\n    return AtomicExpr.__mul__(self, other)",
    ".sympy.functions.elementary.exponential.py@@log.as_base_exp": "def as_base_exp(self):\n    return (self, S.One)",
    ".sympy.functions.elementary.exponential.py@@log._eval_is_finite": "def _eval_is_finite(self):\n    arg = self.args[0]\n    if arg.is_zero:\n        return False\n    return arg.is_finite",
    ".sympy.core.numbers.py@@Rational.__truediv__": "def __truediv__(self, other):\n    if global_parameters.evaluate:\n        if isinstance(other, Integer):\n            if self.p and other.p == S.Zero:\n                return S.ComplexInfinity\n            else:\n                return Rational(self.p, self.q * other.p, igcd(self.p, other.p))\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.q, self.q * other.p, igcd(self.p, other.p) * igcd(self.q, other.q))\n        elif isinstance(other, Float):\n            return self * (1 / other)\n        else:\n            return Number.__truediv__(self, other)\n    return Number.__truediv__(self, other)",
    ".sympy.core.numbers.py@@Number.__truediv__": "def __truediv__(self, other):\n    if isinstance(other, Number) and global_parameters.evaluate:\n        if other is S.NaN:\n            return S.NaN\n        elif other in (S.Infinity, S.NegativeInfinity):\n            return S.Zero\n    return AtomicExpr.__truediv__(self, other)",
    ".sympy.core.assumptions.py@@StdFactKB.generator": "def generator(self):\n    return self._generator.copy()",
    ".sympy.core.numbers.py@@Rational._eval_is_zero": "def _eval_is_zero(self):\n    return self.p == 0",
    ".sympy.core.expr.py@@Expr.as_coeff_Mul": "def as_coeff_Mul(self, rational: bool=False) -> tuple['Number', Expr]:\n    return (S.One, self)",
    ".sympy.core.numbers.py@@Rational.__add__": "def __add__(self, other):\n    if global_parameters.evaluate:\n        if isinstance(other, Integer):\n            return Rational(self.p + self.q * other.p, self.q, 1)\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.q + self.q * other.p, self.q * other.q)\n        elif isinstance(other, Float):\n            return other + self\n        else:\n            return Number.__add__(self, other)\n    return Number.__add__(self, other)",
    ".sympy.core.numbers.py@@Number.__add__": "def __add__(self, other):\n    if isinstance(other, Number) and global_parameters.evaluate:\n        if other is S.NaN:\n            return S.NaN\n        elif other is S.Infinity:\n            return S.Infinity\n        elif other is S.NegativeInfinity:\n            return S.NegativeInfinity\n    return AtomicExpr.__add__(self, other)",
    ".sympy.core.expr.py@@Expr.__add__": "def __add__(self, other):\n    return Add(self, other)",
    ".sympy.core.power.py@@Pow._eval_is_zero": "def _eval_is_zero(self):\n    if self.base.is_zero:\n        if self.exp.is_extended_positive:\n            return True\n        elif self.exp.is_extended_nonpositive:\n            return False\n    elif self.base == S.Exp1:\n        return self.exp is S.NegativeInfinity\n    elif self.base.is_zero is False:\n        if self.base.is_finite and self.exp.is_finite:\n            return False\n        elif self.exp.is_negative:\n            return self.base.is_infinite\n        elif self.exp.is_nonnegative:\n            return False\n        elif self.exp.is_infinite and self.exp.is_extended_real:\n            if (1 - abs(self.base)).is_extended_positive:\n                return self.exp.is_extended_positive\n            elif (1 - abs(self.base)).is_extended_negative:\n                return self.exp.is_extended_negative\n    elif self.base.is_finite and self.exp.is_negative:\n        return False",
    ".sympy.core.numbers.py@@Integer._eval_is_composite": "def _eval_is_composite(self):\n    if self > 1:\n        return fuzzy_not(self.is_prime)\n    else:\n        return False",
    ".sympy.core.numbers.py@@Integer._eval_is_prime": "def _eval_is_prime(self):\n    from sympy.ntheory.primetest import isprime\n    return isprime(self)",
    ".sympy.ntheory.primetest.py@@isprime": "def isprime(n):\n    try:\n        n = as_int(n)\n    except ValueError:\n        return False\n    if n in [2, 3, 5]:\n        return True\n    if n < 2 or n % 2 == 0 or n % 3 == 0 or (n % 5 == 0):\n        return False\n    if n < 49:\n        return True\n    if n % 7 == 0 or n % 11 == 0 or n % 13 == 0 or (n % 17 == 0) or (n % 19 == 0) or (n % 23 == 0) or (n % 29 == 0) or (n % 31 == 0) or (n % 37 == 0) or (n % 41 == 0) or (n % 43 == 0) or (n % 47 == 0):\n        return False\n    if n < 2809:\n        return True\n    if n < 31417:\n        return pow(2, n, n) == 2 and n not in [7957, 8321, 13747, 18721, 19951, 23377]\n    from sympy.ntheory.generate import sieve as s\n    if n <= s._list[-1]:\n        l, u = s.search(n)\n        return l == u\n    if HAS_GMPY == 2:\n        from gmpy2 import is_strong_prp, is_strong_selfridge_prp\n        return is_strong_prp(n, 2) and is_strong_selfridge_prp(n)\n    if n < 341531:\n        return mr(n, [9345883071009581737])\n    if n < 885594169:\n        return mr(n, [725270293939359937, 3569819667048198375])\n    if n < 350269456337:\n        return mr(n, [4230279247111683200, 14694767155120705706, 16641139526367750375])\n    if n < 55245642489451:\n        return mr(n, [2, 141889084524735, 1199124725622454117, 11096072698276303650])\n    if n < 7999252175582851:\n        return mr(n, [2, 4130806001517, 149795463772692060, 186635894390467037, 3967304179347715805])\n    if n < 585226005592931977:\n        return mr(n, [2, 123635709730000, 9233062284813009, 43835965440333360, 761179012939631437, 1263739024124850375])\n    if n < 18446744073709551616:\n        return mr(n, [2, 325, 9375, 28178, 450775, 9780504, 1795265022])\n    if n < 318665857834031151167461:\n        return mr(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37])\n    if n < 3317044064679887385961981:\n        return mr(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41])\n    return mr(n, [2]) and is_strong_lucas_prp(n)",
    ".sympy.utilities.misc.py@@as_int": "def as_int(n, strict=True):\n    if strict:\n        try:\n            if isinstance(n, bool):\n                raise TypeError\n            return operator.index(n)\n        except TypeError:\n            raise ValueError('%s is not an integer' % (n,))\n    else:\n        try:\n            result = int(n)\n        except TypeError:\n            raise ValueError('%s is not an integer' % (n,))\n        if n != result:\n            raise ValueError('%s is not an integer' % (n,))\n        return result",
    ".sympy.core.logic.py@@fuzzy_not": "def fuzzy_not(v):\n    if v is None:\n        return v\n    else:\n        return not v",
    ".sympy.core.power.py@@Pow._eval_is_composite": "def _eval_is_composite(self):\n    if self.base.is_integer and self.exp.is_integer and ((self.base - 1).is_positive and (self.exp - 1).is_positive or ((self.base + 1).is_negative and self.exp.is_positive and self.exp.is_even)):\n        return True",
    ".sympy.core.power.py@@Pow._eval_is_even": "def _eval_is_even(self):\n    if self.exp.is_integer and self.exp.is_positive:\n        return self.base.is_even",
    ".sympy.core.power.py@@Pow._eval_is_rational": "def _eval_is_rational(self):\n    if self.exp.is_integer and self.base.is_rational and fuzzy_not(fuzzy_and([self.exp.is_negative, self.base.is_zero])):\n        return True\n    p = self.func(*self.as_base_exp())\n    if not p.is_Pow:\n        return p.is_rational\n    b, e = p.as_base_exp()\n    if e.is_Rational and b.is_Rational:\n        return False\n    if e.is_integer:\n        if b.is_rational:\n            if fuzzy_not(b.is_zero) or e.is_nonnegative:\n                return True\n            if b == e:\n                return True\n        elif b.is_irrational:\n            return e.is_zero\n    if b is S.Exp1:\n        if e.is_rational and e.is_nonzero:\n            return False",
    ".sympy.core.power.py@@Pow._eval_is_finite": "def _eval_is_finite(self):\n    if self.exp.is_negative:\n        if self.base.is_zero:\n            return False\n        if self.base.is_infinite or self.base.is_nonzero:\n            return True\n    c1 = self.base.is_finite\n    if c1 is None:\n        return\n    c2 = self.exp.is_finite\n    if c2 is None:\n        return\n    if c1 and c2:\n        if self.exp.is_nonnegative or fuzzy_not(self.base.is_zero):\n            return True",
    ".sympy.core.power.py@@Pow._eval_is_extended_real": "def _eval_is_extended_real(self):\n    if self.base is S.Exp1:\n        if self.exp.is_extended_real:\n            return True\n        elif self.exp.is_imaginary:\n            return (2 * S.ImaginaryUnit * self.exp / S.Pi).is_even\n    from sympy.functions.elementary.exponential import log, exp\n    real_b = self.base.is_extended_real\n    if real_b is None:\n        if self.base.func == exp and self.base.exp.is_imaginary:\n            return self.exp.is_imaginary\n        if self.base.func == Pow and self.base.base is S.Exp1 and self.base.exp.is_imaginary:\n            return self.exp.is_imaginary\n        return\n    real_e = self.exp.is_extended_real\n    if real_e is None:\n        return\n    if real_b and real_e:\n        if self.base.is_extended_positive:\n            return True\n        elif self.base.is_extended_nonnegative and self.exp.is_extended_nonnegative:\n            return True\n        elif self.exp.is_integer and self.base.is_extended_nonzero:\n            return True\n        elif self.exp.is_integer and self.exp.is_nonnegative:\n            return True\n        elif self.base.is_extended_negative:\n            if self.exp.is_Rational:\n                return False\n    if real_e and self.exp.is_extended_negative and (self.base.is_zero is False):\n        return Pow(self.base, -self.exp).is_extended_real\n    im_b = self.base.is_imaginary\n    im_e = self.exp.is_imaginary\n    if im_b:\n        if self.exp.is_integer:\n            if self.exp.is_even:\n                return True\n            elif self.exp.is_odd:\n                return False\n        elif im_e and log(self.base).is_imaginary:\n            return True\n        elif self.exp.is_Add:\n            c, a = self.exp.as_coeff_Add()\n            if c and c.is_Integer:\n                return Mul(self.base ** c, self.base ** a, evaluate=False).is_extended_real\n        elif self.base in (-S.ImaginaryUnit, S.ImaginaryUnit):\n            if (self.exp / 2).is_integer is False:\n                return False\n    if real_b and im_e:\n        if self.base is S.NegativeOne:\n            return True\n        c = self.exp.coeff(S.ImaginaryUnit)\n        if c:\n            if self.base.is_rational and c.is_rational:\n                if self.base.is_nonzero and (self.base - 1).is_nonzero and c.is_nonzero:\n                    return False\n            ok = (c * log(self.base) / S.Pi).is_integer\n            if ok is not None:\n                return ok\n    if real_b is False and real_e:\n        from sympy.functions.elementary.complexes import arg\n        i = arg(self.base) * self.exp / S.Pi\n        if i.is_complex:\n            return i.is_integer",
    ".sympy.core.power.py@@Pow._eval_is_odd": "def _eval_is_odd(self):\n    if self.exp.is_integer:\n        if self.exp.is_positive:\n            return self.base.is_odd\n        elif self.exp.is_nonnegative and self.base.is_odd:\n            return True\n        elif self.base is S.NegativeOne:\n            return True",
    ".sympy.core.power.py@@Pow._eval_is_extended_positive": "def _eval_is_extended_positive(self):\n    if self.base == self.exp:\n        if self.base.is_extended_nonnegative:\n            return True\n    elif self.base.is_positive:\n        if self.exp.is_real:\n            return True\n    elif self.base.is_extended_negative:\n        if self.exp.is_even:\n            return True\n        if self.exp.is_odd:\n            return False\n    elif self.base.is_zero:\n        if self.exp.is_extended_real:\n            return self.exp.is_zero\n    elif self.base.is_extended_nonpositive:\n        if self.exp.is_odd:\n            return False\n    elif self.base.is_imaginary:\n        if self.exp.is_integer:\n            m = self.exp % 4\n            if m.is_zero:\n                return True\n            if m.is_integer and m.is_zero is False:\n                return False\n        if self.exp.is_imaginary:\n            from sympy.functions.elementary.exponential import log\n            return log(self.base).is_imaginary",
    ".sympy.core.power.py@@Pow._eval_is_prime": "def _eval_is_prime(self):\n    if self.base.is_integer and self.exp.is_integer and (self.exp - 1).is_positive:\n        return False",
    ".sympy.core.power.py@@Pow._eval_is_integer": "def _eval_is_integer(self):\n    b, e = self.args\n    if b.is_rational:\n        if b.is_integer is False and e.is_positive:\n            return False\n    if b.is_integer and e.is_integer:\n        if b is S.NegativeOne:\n            return True\n        if e.is_nonnegative or e.is_positive:\n            return True\n    if b.is_integer and e.is_negative and (e.is_finite or e.is_integer):\n        if fuzzy_not((b - 1).is_zero) and fuzzy_not((b + 1).is_zero):\n            return False\n    if b.is_Number and e.is_Number:\n        check = self.func(*self.args)\n        return check.is_Integer\n    if e.is_negative and b.is_positive and (b - 1).is_positive:\n        return False\n    if e.is_negative and b.is_negative and (b + 1).is_negative:\n        return False",
    ".sympy.core.power.py@@Pow._eval_is_extended_negative": "def _eval_is_extended_negative(self):\n    if self.exp is S.Half:\n        if self.base.is_complex or self.base.is_extended_real:\n            return False\n    if self.base.is_extended_negative:\n        if self.exp.is_odd and self.base.is_finite:\n            return True\n        if self.exp.is_even:\n            return False\n    elif self.base.is_extended_positive:\n        if self.exp.is_extended_real:\n            return False\n    elif self.base.is_zero:\n        if self.exp.is_extended_real:\n            return False\n    elif self.base.is_extended_nonnegative:\n        if self.exp.is_extended_nonnegative:\n            return False\n    elif self.base.is_extended_nonpositive:\n        if self.exp.is_even:\n            return False\n    elif self.base.is_extended_real:\n        if self.exp.is_even:\n            return False",
    ".sympy.core.numbers.py@@Integer._eval_is_odd": "def _eval_is_odd(self):\n    return bool(self.p % 2)",
    ".sympy.core.power.py@@Pow._eval_is_algebraic": "def _eval_is_algebraic(self):\n\n    def _is_one(expr):\n        try:\n            return (expr - 1).is_zero\n        except ValueError:\n            return False\n    if self.base.is_zero or _is_one(self.base):\n        return True\n    elif self.base is S.Exp1:\n        s = self.func(*self.args)\n        if s.func == self.func:\n            if self.exp.is_nonzero:\n                if self.exp.is_algebraic:\n                    return False\n                elif (self.exp / S.Pi).is_rational:\n                    return False\n                elif (self.exp / (S.ImaginaryUnit * S.Pi)).is_rational:\n                    return True\n        else:\n            return s.is_algebraic\n    elif self.exp.is_rational:\n        if self.base.is_algebraic is False:\n            return self.exp.is_zero\n        if self.base.is_zero is False:\n            if self.exp.is_nonzero:\n                return self.base.is_algebraic\n            elif self.base.is_algebraic:\n                return True\n        if self.exp.is_positive:\n            return self.base.is_algebraic\n    elif self.base.is_algebraic and self.exp.is_algebraic:\n        if fuzzy_not(self.base.is_zero) and fuzzy_not(_is_one(self.base)) or self.base.is_integer is False or self.base.is_irrational:\n            return self.exp.is_rational",
    ".sympy.core.power.py@@Pow._is_one": "def _is_one(expr):\n    try:\n        return (expr - 1).is_zero\n    except ValueError:\n        return False",
    ".sympy.core.expr.py@@Expr.__sub__": "def __sub__(self, other):\n    return Add(self, -other)",
    ".sympy.core.numbers.py@@One.__neg__": "def __neg__():\n    return S.NegativeOne",
    ".sympy.core.add.py@@Add._eval_is_zero": "def _eval_is_zero(self):\n    if self.is_commutative is False:\n        return\n    nz = []\n    z = 0\n    im_or_z = False\n    im = 0\n    for a in self.args:\n        if a.is_extended_real:\n            if a.is_zero:\n                z += 1\n            elif a.is_zero is False:\n                nz.append(a)\n            else:\n                return\n        elif a.is_imaginary:\n            im += 1\n        elif (S.ImaginaryUnit * a).is_extended_real:\n            im_or_z = True\n        else:\n            return\n    if z == len(self.args):\n        return True\n    if len(nz) in [0, len(self.args)]:\n        return None\n    b = self.func(*nz)\n    if b.is_zero:\n        if not im_or_z:\n            if im == 0:\n                return True\n            elif im == 1:\n                return False\n    if b.is_zero is False:\n        return False",
    ".sympy.core.add.py@@Add._eval_is_extended_positive": "def _eval_is_extended_positive(self):\n    if self.is_number:\n        return super()._eval_is_extended_positive()\n    c, a = self.as_coeff_Add()\n    if not c.is_zero:\n        from .exprtools import _monotonic_sign\n        v = _monotonic_sign(a)\n        if v is not None:\n            s = v + c\n            if s != self and s.is_extended_positive and a.is_extended_nonnegative:\n                return True\n            if len(self.free_symbols) == 1:\n                v = _monotonic_sign(self)\n                if v is not None and v != self and v.is_extended_positive:\n                    return True\n    pos = nonneg = nonpos = unknown_sign = False\n    saw_INF = set()\n    args = [a for a in self.args if not a.is_zero]\n    if not args:\n        return False\n    for a in args:\n        ispos = a.is_extended_positive\n        infinite = a.is_infinite\n        if infinite:\n            saw_INF.add(fuzzy_or((ispos, a.is_extended_nonnegative)))\n            if True in saw_INF and False in saw_INF:\n                return\n        if ispos:\n            pos = True\n            continue\n        elif a.is_extended_nonnegative:\n            nonneg = True\n            continue\n        elif a.is_extended_nonpositive:\n            nonpos = True\n            continue\n        if infinite is None:\n            return\n        unknown_sign = True\n    if saw_INF:\n        if len(saw_INF) > 1:\n            return\n        return saw_INF.pop()\n    elif unknown_sign:\n        return\n    elif not nonpos and (not nonneg) and pos:\n        return True\n    elif not nonpos and pos:\n        return True\n    elif not pos and (not nonneg):\n        return False",
    ".sympy.core.add.py@@Add.as_coeff_Add": "def as_coeff_Add(self, rational=False, deps=None):\n    coeff, args = (self.args[0], self.args[1:])\n    if coeff.is_Number and (not rational) or coeff.is_Rational:\n        return (coeff, self._new_rawargs(*args))\n    return (S.Zero, self)",
    ".sympy.core.operations.py@@AssocOp._new_rawargs": "def _new_rawargs(self, *args, reeval=True, **kwargs):\n    if reeval and self.is_commutative is False:\n        is_commutative = None\n    else:\n        is_commutative = self.is_commutative\n    return self._from_args(args, is_commutative)",
    ".sympy.core.exprtools.py@@_monotonic_sign": "def _monotonic_sign(self):\n    if not self.is_extended_real:\n        return\n    if (-self).is_Symbol:\n        rv = _monotonic_sign(-self)\n        return rv if rv is None else -rv\n    if not self.is_Add and self.as_numer_denom()[1].is_number:\n        s = self\n        if s.is_prime:\n            if s.is_odd:\n                return Integer(3)\n            else:\n                return Integer(2)\n        elif s.is_composite:\n            if s.is_odd:\n                return Integer(9)\n            else:\n                return Integer(4)\n        elif s.is_positive:\n            if s.is_even:\n                if s.is_prime is False:\n                    return Integer(4)\n                else:\n                    return Integer(2)\n            elif s.is_integer:\n                return S.One\n            else:\n                return _eps\n        elif s.is_extended_negative:\n            if s.is_even:\n                return Integer(-2)\n            elif s.is_integer:\n                return S.NegativeOne\n            else:\n                return -_eps\n        if s.is_zero or s.is_extended_nonpositive or s.is_extended_nonnegative:\n            return S.Zero\n        return None\n    free = self.free_symbols\n    if len(free) == 1:\n        if self.is_polynomial():\n            from sympy.polys.polytools import real_roots\n            from sympy.polys.polyroots import roots\n            from sympy.polys.polyerrors import PolynomialError\n            x = free.pop()\n            x0 = _monotonic_sign(x)\n            if x0 in (_eps, -_eps):\n                x0 = S.Zero\n            if x0 is not None:\n                d = self.diff(x)\n                if d.is_number:\n                    currentroots = []\n                else:\n                    try:\n                        currentroots = real_roots(d)\n                    except (PolynomialError, NotImplementedError):\n                        currentroots = [r for r in roots(d, x) if r.is_extended_real]\n                y = self.subs(x, x0)\n                if x.is_nonnegative and all(((r - x0).is_nonpositive for r in currentroots)):\n                    if y.is_nonnegative and d.is_positive:\n                        if y:\n                            return y if y.is_positive else Dummy('pos', positive=True)\n                        else:\n                            return Dummy('nneg', nonnegative=True)\n                    if y.is_nonpositive and d.is_negative:\n                        if y:\n                            return y if y.is_negative else Dummy('neg', negative=True)\n                        else:\n                            return Dummy('npos', nonpositive=True)\n                elif x.is_nonpositive and all(((r - x0).is_nonnegative for r in currentroots)):\n                    if y.is_nonnegative and d.is_negative:\n                        if y:\n                            return Dummy('pos', positive=True)\n                        else:\n                            return Dummy('nneg', nonnegative=True)\n                    if y.is_nonpositive and d.is_positive:\n                        if y:\n                            return Dummy('neg', negative=True)\n                        else:\n                            return Dummy('npos', nonpositive=True)\n        else:\n            n, d = self.as_numer_denom()\n            den = None\n            if n.is_number:\n                den = _monotonic_sign(d)\n            elif not d.is_number:\n                if _monotonic_sign(n) is not None:\n                    den = _monotonic_sign(d)\n            if den is not None and (den.is_positive or den.is_negative):\n                v = n * den\n                if v.is_positive:\n                    return Dummy('pos', positive=True)\n                elif v.is_nonnegative:\n                    return Dummy('nneg', nonnegative=True)\n                elif v.is_negative:\n                    return Dummy('neg', negative=True)\n                elif v.is_nonpositive:\n                    return Dummy('npos', nonpositive=True)\n        return None\n    c, a = self.as_coeff_Add()\n    v = None\n    if not a.is_polynomial():\n        n, d = a.as_numer_denom()\n        if not (n.is_number or d.is_number):\n            return\n        if (a.is_Mul or a.is_Pow) and a.is_rational and all((p.exp.is_Integer for p in a.atoms(Pow) if p.is_Pow)) and (a.is_positive or a.is_negative):\n            v = S.One\n            for ai in Mul.make_args(a):\n                if ai.is_number:\n                    v *= ai\n                    continue\n                reps = {}\n                for x in ai.free_symbols:\n                    reps[x] = _monotonic_sign(x)\n                    if reps[x] is None:\n                        return\n                v *= ai.subs(reps)\n    elif c:\n        if not any((p for p in a.atoms(Pow) if not p.is_number)) and (a.is_nonpositive or a.is_nonnegative):\n            free = list(a.free_symbols)\n            p = {}\n            for i in free:\n                v = _monotonic_sign(i)\n                if v is None:\n                    return\n                p[i] = v or (_eps if i.is_nonnegative else -_eps)\n            v = a.xreplace(p)\n    if v is not None:\n        rv = v + c\n        if v.is_nonnegative and rv.is_positive:\n            return rv.subs(_eps, 0)\n        if v.is_nonpositive and rv.is_negative:\n            return rv.subs(_eps, 0)",
    ".sympy.core.expr.py@@Expr.as_numer_denom": "def as_numer_denom(self):\n    return (self, S.One)",
    ".sympy.core.logic.py@@_fuzzy_group": "def _fuzzy_group(args, quick_exit=False):\n    saw_other = False\n    for a in args:\n        if a is True:\n            continue\n        if a is None:\n            return\n        if quick_exit and saw_other:\n            return\n        saw_other = True\n    return not saw_other",
    ".sympy.core.add.py@@Add._eval_is_extended_nonpositive": "def _eval_is_extended_nonpositive(self):\n    if not self.is_number:\n        c, a = self.as_coeff_Add()\n        if not c.is_zero and a.is_extended_nonpositive:\n            from .exprtools import _monotonic_sign\n            v = _monotonic_sign(a)\n            if v is not None:\n                s = v + c\n                if s != self and s.is_extended_nonpositive:\n                    return True\n                if len(self.free_symbols) == 1:\n                    v = _monotonic_sign(self)\n                    if v is not None and v != self and v.is_extended_nonpositive:\n                        return True",
    ".sympy.core.add.py@@Add._eval_is_irrational": "def _eval_is_irrational(self):\n    for t in self.args:\n        a = t.is_irrational\n        if a:\n            others = list(self.args)\n            others.remove(t)\n            if all((x.is_rational is True for x in others)):\n                return True\n            return None\n        if a is None:\n            return\n    return False",
    ".sympy.core.add.py@@Add._eval_is_extended_negative": "def _eval_is_extended_negative(self):\n    if self.is_number:\n        return super()._eval_is_extended_negative()\n    c, a = self.as_coeff_Add()\n    if not c.is_zero:\n        from .exprtools import _monotonic_sign\n        v = _monotonic_sign(a)\n        if v is not None:\n            s = v + c\n            if s != self and s.is_extended_negative and a.is_extended_nonpositive:\n                return True\n            if len(self.free_symbols) == 1:\n                v = _monotonic_sign(self)\n                if v is not None and v != self and v.is_extended_negative:\n                    return True\n    neg = nonpos = nonneg = unknown_sign = False\n    saw_INF = set()\n    args = [a for a in self.args if not a.is_zero]\n    if not args:\n        return False\n    for a in args:\n        isneg = a.is_extended_negative\n        infinite = a.is_infinite\n        if infinite:\n            saw_INF.add(fuzzy_or((isneg, a.is_extended_nonpositive)))\n            if True in saw_INF and False in saw_INF:\n                return\n        if isneg:\n            neg = True\n            continue\n        elif a.is_extended_nonpositive:\n            nonpos = True\n            continue\n        elif a.is_extended_nonnegative:\n            nonneg = True\n            continue\n        if infinite is None:\n            return\n        unknown_sign = True\n    if saw_INF:\n        if len(saw_INF) > 1:\n            return\n        return saw_INF.pop()\n    elif unknown_sign:\n        return\n    elif not nonneg and (not nonpos) and neg:\n        return True\n    elif not nonneg and neg:\n        return True\n    elif not neg and (not nonpos):\n        return False",
    ".sympy.core.add.py@@Add._eval_is_extended_nonnegative": "def _eval_is_extended_nonnegative(self):\n    if not self.is_number:\n        c, a = self.as_coeff_Add()\n        if not c.is_zero and a.is_extended_nonnegative:\n            from .exprtools import _monotonic_sign\n            v = _monotonic_sign(a)\n            if v is not None:\n                s = v + c\n                if s != self and s.is_extended_nonnegative:\n                    return True\n                if len(self.free_symbols) == 1:\n                    v = _monotonic_sign(self)\n                    if v is not None and v != self and v.is_extended_nonnegative:\n                        return True",
    ".sympy.core.add.py@@Add._eval_is_odd": "def _eval_is_odd(self):\n    l = [f for f in self.args if not f.is_even is True]\n    if not l:\n        return False\n    if l[0].is_odd:\n        return self._new_rawargs(*l[1:]).is_even",
    ".sympy.core.mul.py@@Mul._eval_is_zero": "def _eval_is_zero(self):\n    zero = infinite = False\n    for a in self.args:\n        z = a.is_zero\n        if z:\n            if infinite:\n                return\n            zero = True\n        else:\n            if not a.is_finite:\n                if zero:\n                    return\n                infinite = True\n            if zero is False and z is None:\n                zero = None\n    return zero",
    ".sympy.core.mul.py@@Mul._eval_is_integer": "def _eval_is_integer(self):\n    from sympy.ntheory.factor_ import trailing\n    is_rational = self._eval_is_rational()\n    if is_rational is False:\n        return False\n    numerators = []\n    denominators = []\n    unknown = False\n    for a in self.args:\n        hit = False\n        if a.is_integer:\n            if abs(a) is not S.One:\n                numerators.append(a)\n        elif a.is_Rational:\n            n, d = a.as_numer_denom()\n            if abs(n) is not S.One:\n                numerators.append(n)\n            if d is not S.One:\n                denominators.append(d)\n        elif a.is_Pow:\n            b, e = a.as_base_exp()\n            if not b.is_integer or not e.is_integer:\n                hit = unknown = True\n            if e.is_negative:\n                denominators.append(2 if a is S.Half else Pow(a, S.NegativeOne))\n            elif not hit:\n                assert not e.is_positive\n                assert not e.is_zero\n                return\n            else:\n                return\n        else:\n            return\n    if not denominators and (not unknown):\n        return True\n    allodd = lambda x: all((i.is_odd for i in x))\n    alleven = lambda x: all((i.is_even for i in x))\n    anyeven = lambda x: any((i.is_even for i in x))\n    from .relational import is_gt\n    if not numerators and denominators and all((is_gt(_, S.One) for _ in denominators)):\n        return False\n    elif unknown:\n        return\n    elif allodd(numerators) and anyeven(denominators):\n        return False\n    elif anyeven(numerators) and denominators == [2]:\n        return True\n    elif alleven(numerators) and allodd(denominators) and (Mul(*denominators, evaluate=False) - 1).is_positive:\n        return False\n    if len(denominators) == 1:\n        d = denominators[0]\n        if d.is_Integer and d.is_even:\n            if (Add(*[i.as_base_exp()[1] for i in numerators if i.is_even]) - trailing(d.p)).is_nonnegative:\n                return True\n    if len(numerators) == 1:\n        n = numerators[0]\n        if n.is_Integer and n.is_even:\n            if (Add(*[i.as_base_exp()[1] for i in denominators if i.is_even]) - trailing(n.p)).is_positive:\n                return False",
    ".sympy.core.mul.py@@Mul._eval_is_rational": "def _eval_is_rational(self):\n    r = _fuzzy_group((a.is_rational for a in self.args), quick_exit=True)\n    if r:\n        return r\n    elif r is False:\n        if all((a.is_zero is False for a in self.args)):\n            return False",
    ".sympy.core.numbers.py@@Integer.__abs__": "def __abs__(self):\n    if self.p >= 0:\n        return self\n    else:\n        return Integer(-self.p)",
    ".sympy.core.mul.py@@Mul._eval_is_extended_negative": "def _eval_is_extended_negative(self):\n    return self._eval_pos_neg(-1)",
    ".sympy.core.mul.py@@Mul._eval_pos_neg": "def _eval_pos_neg(self, sign):\n    saw_NON = saw_NOT = False\n    for t in self.args:\n        if t.is_extended_positive:\n            continue\n        elif t.is_extended_negative:\n            sign = -sign\n        elif t.is_zero:\n            if all((a.is_finite for a in self.args)):\n                return False\n            return\n        elif t.is_extended_nonpositive:\n            sign = -sign\n            saw_NON = True\n        elif t.is_extended_nonnegative:\n            saw_NON = True\n        elif t.is_positive is False:\n            sign = -sign\n            if saw_NOT:\n                return\n            saw_NOT = True\n        elif t.is_negative is False:\n            if saw_NOT:\n                return\n            saw_NOT = True\n        else:\n            return\n    if sign == 1 and saw_NON is False and (saw_NOT is False):\n        return True\n    if sign < 0:\n        return False",
    ".sympy.core.numbers.py@@Number._eval_evalf": "def _eval_evalf(self, prec):\n    return Float._new(self._as_mpf_val(prec), prec)",
    ".sympy.core.numbers.py@@Integer._as_mpf_val": "def _as_mpf_val(self, prec):\n    return mlib.from_int(self.p, prec, rnd)",
    ".sympy.core.numbers.py@@Float._new": "def _new(cls, _mpf_, _prec, zero=True):\n    if zero and _mpf_ == fzero:\n        return S.Zero\n    elif _mpf_ == _mpf_nan:\n        return S.NaN\n    elif _mpf_ == _mpf_inf:\n        return S.Infinity\n    elif _mpf_ == _mpf_ninf:\n        return S.NegativeInfinity\n    obj = Expr.__new__(cls)\n    obj._mpf_ = mpf_norm(_mpf_, _prec)\n    obj._prec = _prec\n    return obj",
    ".sympy.core.numbers.py@@mpf_norm": "def mpf_norm(mpf, prec):\n    sign, man, expt, bc = mpf\n    if not man:\n        if not bc:\n            return fzero\n        else:\n            return mpf\n    from mpmath.libmp.backend import MPZ\n    rv = mpf_normalize(sign, MPZ(man), expt, bc, prec, rnd)\n    return rv",
    ".sympy.core.evalf.py@@EvalfMixin.evalf": "def evalf(self, n=15, subs=None, maxn=100, chop=False, strict=False, quad=None, verbose=False):\n    from .numbers import Float, Number\n    n = n if n is not None else 15\n    if subs and is_sequence(subs):\n        raise TypeError('subs must be given as a dictionary')\n    if n == 1 and isinstance(self, Number):\n        from .expr import _mag\n        rv = self.evalf(2, subs, maxn, chop, strict, quad, verbose)\n        m = _mag(rv)\n        rv = rv.round(1 - m)\n        return rv\n    if not evalf_table:\n        _create_evalf_table()\n    prec = dps_to_prec(n)\n    options = {'maxprec': max(prec, int(maxn * LG10)), 'chop': chop, 'strict': strict, 'verbose': verbose}\n    if subs is not None:\n        options['subs'] = subs\n    if quad is not None:\n        options['quad'] = quad\n    try:\n        result = evalf(self, prec + 4, options)\n    except NotImplementedError:\n        if hasattr(self, 'subs') and subs is not None:\n            v = self.subs(subs)._eval_evalf(prec)\n        else:\n            v = self._eval_evalf(prec)\n        if v is None:\n            return self\n        elif not v.is_number:\n            return v\n        try:\n            result = evalf(v, prec, options)\n        except NotImplementedError:\n            return v\n    if result is S.ComplexInfinity:\n        return result\n    re, im, re_acc, im_acc = result\n    if re is S.NaN or im is S.NaN:\n        return S.NaN\n    if re:\n        p = max(min(prec, re_acc), 1)\n        re = Float._new(re, p)\n    else:\n        re = S.Zero\n    if im:\n        p = max(min(prec, im_acc), 1)\n        im = Float._new(im, p)\n        return re + im * S.ImaginaryUnit\n    else:\n        return re",
    ".sympy.core.evalf.py@@evalf": "def evalf(x: 'Expr', prec: int, options: OPT_DICT) -> TMP_RES:\n    from sympy.functions.elementary.complexes import re as re_, im as im_\n    try:\n        rf = evalf_table[type(x)]\n        r = rf(x, prec, options)\n    except KeyError:\n        if 'subs' in options:\n            x = x.subs(evalf_subs(prec, options['subs']))\n        xe = x._eval_evalf(prec)\n        if xe is None:\n            raise NotImplementedError\n        as_real_imag = getattr(xe, 'as_real_imag', None)\n        if as_real_imag is None:\n            raise NotImplementedError\n        re, im = as_real_imag()\n        if re.has(re_) or im.has(im_):\n            raise NotImplementedError\n        if re == 0:\n            re = None\n            reprec = None\n        elif re.is_number:\n            re = re._to_mpmath(prec, allow_ints=False)._mpf_\n            reprec = prec\n        else:\n            raise NotImplementedError\n        if im == 0:\n            im = None\n            imprec = None\n        elif im.is_number:\n            im = im._to_mpmath(prec, allow_ints=False)._mpf_\n            imprec = prec\n        else:\n            raise NotImplementedError\n        r = (re, im, reprec, imprec)\n    if options.get('verbose'):\n        print('### input', x)\n        print('### output', to_str(r[0] or fzero, 50) if isinstance(r, tuple) else r)\n        print('### raw', r)\n        print()\n    chop = options.get('chop', False)\n    if chop:\n        if chop is True:\n            chop_prec = prec\n        else:\n            chop_prec = int(round(-3.321 * math.log10(chop) + 2.5))\n            if chop_prec == 3:\n                chop_prec -= 1\n        r = chop_parts(r, chop_prec)\n    if options.get('strict'):\n        check_target(x, r, prec)\n    return r",
    ".sympy.core.evalf.py@@evalf_integer": "def evalf_integer(expr: 'Integer', prec: int, options: OPT_DICT) -> TMP_RES:\n    return (from_int(expr.p, prec), None, prec, None)",
    ".sympy.core.numbers.py@@Float.__gt__": "def __gt__(self, other):\n    if isinstance(other, NumberSymbol):\n        return other.__lt__(self)\n    rv = self._Frel(other, mlib.mpf_gt)\n    if rv is None:\n        return Expr.__gt__(self, other)\n    return rv",
    ".sympy.core.numbers.py@@Float._Frel": "def _Frel(self, other, op):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if other.is_Rational:\n        '\\n        >>> f = Float(.1,2)\\n        >>> i = 1234567890\\n        >>> (f*i)._mpf_\\n        (0, 471, 18, 9)\\n        >>> mlib.mpf_mul(f._mpf_, mlib.from_int(i))\\n        (0, 505555550955, -12, 39)\\n        '\n        smpf = mlib.mpf_mul(self._mpf_, mlib.from_int(other.q))\n        ompf = mlib.from_int(other.p)\n        return _sympify(bool(op(smpf, ompf)))\n    elif other.is_Float:\n        return _sympify(bool(op(self._mpf_, other._mpf_)))\n    elif other.is_comparable and other not in (S.Infinity, S.NegativeInfinity):\n        other = other.evalf(prec_to_dps(self._prec))\n        if other._prec > 1:\n            if other.is_Number:\n                return _sympify(bool(op(self._mpf_, other._as_mpf_val(self._prec))))",
    ".sympy.core.mul.py@@Mul._eval_is_even": "def _eval_is_even(self):\n    from sympy.simplify.radsimp import fraction\n    n, d = fraction(self)\n    if n.is_Integer and n.is_even:\n        from sympy.ntheory.factor_ import trailing\n        if (Add(*[i.as_base_exp()[1] for i in Mul.make_args(d) if i.is_even]) - trailing(n.p)).is_nonnegative:\n            return False",
    ".sympy.simplify.radsimp.py@@fraction": "def fraction(expr, exact=False):\n    expr = sympify(expr)\n    numer, denom = ([], [])\n    for term in Mul.make_args(expr):\n        if term.is_commutative and (term.is_Pow or isinstance(term, exp)):\n            b, ex = term.as_base_exp()\n            if ex.is_negative:\n                if ex is S.NegativeOne:\n                    denom.append(b)\n                elif exact:\n                    if ex.is_constant():\n                        denom.append(Pow(b, -ex))\n                    else:\n                        numer.append(term)\n                else:\n                    denom.append(Pow(b, -ex))\n            elif ex.is_positive:\n                numer.append(term)\n            elif not exact and ex.is_Mul:\n                n, d = term.as_numer_denom()\n                if n != 1:\n                    numer.append(n)\n                denom.append(d)\n            else:\n                numer.append(term)\n        elif term.is_Rational and (not term.is_Integer):\n            if term.p != 1:\n                numer.append(term.p)\n            denom.append(term.q)\n        else:\n            numer.append(term)\n    return (Mul(*numer, evaluate=not exact), Mul(*denom, evaluate=not exact))",
    ".sympy.core.operations.py@@AssocOp.make_args": "def make_args(cls, expr):\n    if isinstance(expr, cls):\n        return expr.args\n    else:\n        return (sympify(expr),)",
    ".sympy.core.mul.py@@Mul._eval_is_infinite": "def _eval_is_infinite(self):\n    if any((a.is_infinite for a in self.args)):\n        if any((a.is_zero for a in self.args)):\n            return S.NaN.is_infinite\n        if any((a.is_zero is None for a in self.args)):\n            return None\n        return True",
    ".sympy.core.mul.py@@Mul._eval_is_imaginary": "def _eval_is_imaginary(self):\n    if all((a.is_zero is False and a.is_finite for a in self.args)):\n        return self._eval_real_imag(False)",
    ".sympy.core.mul.py@@Mul._eval_is_complex": "def _eval_is_complex(self):\n    comp = _fuzzy_group((a.is_complex for a in self.args))\n    if comp is False:\n        if any((a.is_infinite for a in self.args)):\n            if any((a.is_zero is not False for a in self.args)):\n                return None\n            return False\n    return comp",
    ".sympy.core.mul.py@@Mul._eval_is_hermitian": "def _eval_is_hermitian(self):\n    return self._eval_herm_antiherm(True)",
    ".sympy.core.mul.py@@Mul._eval_herm_antiherm": "def _eval_herm_antiherm(self, herm):\n    for t in self.args:\n        if t.is_hermitian is None or t.is_antihermitian is None:\n            return\n        if t.is_hermitian:\n            continue\n        elif t.is_antihermitian:\n            herm = not herm\n        else:\n            return\n    if herm is not False:\n        return herm\n    is_zero = self._eval_is_zero()\n    if is_zero:\n        return True\n    elif is_zero is False:\n        return herm",
    ".sympy.core.mul.py@@Mul._eval_is_odd": "def _eval_is_odd(self):\n    is_integer = self._eval_is_integer()\n    if is_integer is not True:\n        return is_integer\n    from sympy.simplify.radsimp import fraction\n    n, d = fraction(self)\n    if d.is_Integer and d.is_even:\n        from sympy.ntheory.factor_ import trailing\n        if (Add(*[i.as_base_exp()[1] for i in Mul.make_args(n) if i.is_even]) - trailing(d.p)).is_positive:\n            return False\n        return\n    r, acc = (True, 1)\n    for t in self.args:\n        if abs(t) is S.One:\n            continue\n        if t.is_even:\n            return False\n        if r is False:\n            pass\n        elif acc != 1 and (acc + t).is_odd:\n            r = False\n        elif t.is_even is None:\n            r = None\n        acc = t\n    return r",
    ".sympy.core.mul.py@@Mul._eval_is_extended_positive": "def _eval_is_extended_positive(self):\n    return self._eval_pos_neg(1)",
    ".sympy.core.mul.py@@Mul._eval_is_composite": "def _eval_is_composite(self):\n    number_of_args = 0\n    for arg in self.args:\n        if not (arg.is_integer and arg.is_positive):\n            return None\n        if (arg - 1).is_positive:\n            number_of_args += 1\n    if number_of_args > 1:\n        return True",
    ".sympy.core.mul.py@@Mul._eval_is_irrational": "def _eval_is_irrational(self):\n    for t in self.args:\n        a = t.is_irrational\n        if a:\n            others = list(self.args)\n            others.remove(t)\n            if all(((x.is_rational and fuzzy_not(x.is_zero)) is True for x in others)):\n                return True\n            return\n        if a is None:\n            return\n    if all((x.is_real for x in self.args)):\n        return False",
    ".sympy.core.mul.py@@Mul._eval_is_extended_real": "def _eval_is_extended_real(self):\n    return self._eval_real_imag(True)",
    ".sympy.core.mul.py@@Mul._eval_real_imag": "def _eval_real_imag(self, real):\n    zero = False\n    t_not_re_im = None\n    for t in self.args:\n        if (t.is_complex or t.is_infinite) is False and t.is_extended_real is False:\n            return False\n        elif t.is_imaginary:\n            real = not real\n        elif t.is_extended_real:\n            if not zero:\n                z = t.is_zero\n                if not z and zero is False:\n                    zero = z\n                elif z:\n                    if all((a.is_finite for a in self.args)):\n                        return True\n                    return\n        elif t.is_extended_real is False:\n            if t_not_re_im:\n                return\n            t_not_re_im = t\n        elif t.is_imaginary is False:\n            if t_not_re_im:\n                return\n            t_not_re_im = t\n        else:\n            return\n    if t_not_re_im:\n        if t_not_re_im.is_extended_real is False:\n            if real:\n                return zero\n        if t_not_re_im.is_imaginary is False:\n            if not real:\n                return zero\n    elif zero is False:\n        return real\n    elif real:\n        return real",
    ".sympy.core.mul.py@@Mul._eval_is_algebraic": "def _eval_is_algebraic(self):\n    r = _fuzzy_group((a.is_algebraic for a in self.args), quick_exit=True)\n    if r:\n        return r\n    elif r is False:\n        if all((a.is_zero is False for a in self.args)):\n            return False",
    ".sympy.core.mul.py@@Mul._eval_is_antihermitian": "def _eval_is_antihermitian(self):\n    return self._eval_herm_antiherm(False)",
    ".sympy.core.function.py@@Function.as_base_exp": "def as_base_exp(self):\n    return (self, S.One)",
    ".sympy.functions.elementary.exponential.py@@log._eval_is_zero": "def _eval_is_zero(self):\n    return (self.args[0] - 1).is_zero",
    ".sympy.core.mul.py@@Mul._eval_is_finite": "def _eval_is_finite(self):\n    if all((a.is_finite for a in self.args)):\n        return True\n    if any((a.is_infinite for a in self.args)):\n        if all((a.is_zero is False for a in self.args)):\n            return False",
    ".sympy.core.add.py@@Add._eval_is_infinite": "def _eval_is_infinite(self):\n    sawinf = False\n    for a in self.args:\n        ainf = a.is_infinite\n        if ainf is None:\n            return None\n        elif ainf is True:\n            if sawinf is True:\n                return None\n            sawinf = True\n    return sawinf",
    ".sympy.core.add.py@@Add._eval_is_imaginary": "def _eval_is_imaginary(self):\n    nz = []\n    im_I = []\n    for a in self.args:\n        if a.is_extended_real:\n            if a.is_zero:\n                pass\n            elif a.is_zero is False:\n                nz.append(a)\n            else:\n                return\n        elif a.is_imaginary:\n            im_I.append(a * S.ImaginaryUnit)\n        elif (S.ImaginaryUnit * a).is_extended_real:\n            im_I.append(a * S.ImaginaryUnit)\n        else:\n            return\n    b = self.func(*nz)\n    if b != self:\n        if b.is_zero:\n            return fuzzy_not(self.func(*im_I).is_zero)\n        elif b.is_zero is False:\n            return False",
    ".sympy.functions.elementary.exponential.py@@log._eval_is_complex": "def _eval_is_complex(self):\n    z = self.args[0]\n    return fuzzy_and([z.is_complex, fuzzy_not(z.is_zero)])",
    ".sympy.functions.elementary.exponential.py@@log._eval_is_rational": "def _eval_is_rational(self):\n    s = self.func(*self.args)\n    if s.func == self.func:\n        if (self.args[0] - 1).is_zero:\n            return True\n        if s.args[0].is_rational and fuzzy_not((self.args[0] - 1).is_zero):\n            return False\n    else:\n        return s.is_rational",
    ".sympy.core.function.py@@Application.func": "def func(self):\n    return self.__class__",
    ".sympy.functions.elementary.exponential.py@@log._eval_is_algebraic": "def _eval_is_algebraic(self):\n    s = self.func(*self.args)\n    if s.func == self.func:\n        if (self.args[0] - 1).is_zero:\n            return True\n        elif fuzzy_not((self.args[0] - 1).is_zero):\n            if self.args[0].is_algebraic:\n                return False\n    else:\n        return s.is_algebraic",
    ".sympy.functions.elementary.exponential.py@@log._eval_is_extended_real": "def _eval_is_extended_real(self):\n    return self.args[0].is_extended_positive",
    ".sympy.functions.elementary.exponential.py@@log._eval_is_extended_positive": "def _eval_is_extended_positive(self):\n    return (self.args[0] - 1).is_extended_positive",
    ".sympy.functions.elementary.exponential.py@@log._eval_is_extended_nonnegative": "def _eval_is_extended_nonnegative(self):\n    return (self.args[0] - 1).is_extended_nonnegative",
    ".sympy.core.containers.py@@Tuple.__hash__": "def __hash__(self):\n    return hash(self.args)",
    ".sympy.core.power.py@@Pow._eval_is_complex": "def _eval_is_complex(self):\n    if self.base == S.Exp1:\n        return fuzzy_or([self.exp.is_complex, self.exp.is_extended_negative])\n    if all((a.is_complex for a in self.args)) and self._eval_is_finite():\n        return True",
    ".sympy.core.numbers.py@@Rational._eval_is_positive": "def _eval_is_positive(self):\n    return self.p > 0",
    ".sympy.core.power.py@@Pow._eval_is_imaginary": "def _eval_is_imaginary(self):\n    if self.base.is_commutative is False:\n        return False\n    if self.base.is_imaginary:\n        if self.exp.is_integer:\n            odd = self.exp.is_odd\n            if odd is not None:\n                return odd\n            return\n    if self.base == S.Exp1:\n        f = 2 * self.exp / (S.Pi * S.ImaginaryUnit)\n        if f.is_even:\n            return False\n        if f.is_odd:\n            return True\n        return None\n    if self.exp.is_imaginary:\n        from sympy.functions.elementary.exponential import log\n        imlog = log(self.base).is_imaginary\n        if imlog is not None:\n            return False\n    if self.base.is_extended_real and self.exp.is_extended_real:\n        if self.base.is_positive:\n            return False\n        else:\n            rat = self.exp.is_rational\n            if not rat:\n                return rat\n            if self.exp.is_integer:\n                return False\n            else:\n                half = (2 * self.exp).is_integer\n                if half:\n                    return self.base.is_negative\n                return half\n    if self.base.is_extended_real is False:\n        from sympy.functions.elementary.complexes import arg\n        i = arg(self.base) * self.exp / S.Pi\n        isodd = (2 * i).is_odd\n        if isodd is not None:\n            return isodd",
    ".sympy.core.power.py@@Pow._eval_is_negative": "def _eval_is_negative(self):\n    ext_neg = Pow._eval_is_extended_negative(self)\n    if ext_neg is True:\n        return self.is_finite\n    return ext_neg",
    ".sympy.core.mul.py@@Mul.as_coeff_Mul": "def as_coeff_Mul(self, rational=False):\n    coeff, args = (self.args[0], self.args[1:])\n    if coeff.is_Number:\n        if not rational or coeff.is_Rational:\n            if len(args) == 1:\n                return (coeff, args[0])\n            else:\n                return (coeff, self._new_rawargs(*args))\n        elif coeff.is_extended_negative:\n            return (S.NegativeOne, self._new_rawargs(*(-coeff,) + args))\n    return (S.One, self)",
    ".sympy.core.basic.py@@Basic.xreplace": "def xreplace(self, rule):\n    value, _ = self._xreplace(rule)\n    return value",
    ".sympy.core.basic.py@@Basic._xreplace": "def _xreplace(self, rule):\n    if self in rule:\n        return (rule[self], True)\n    elif rule:\n        args = []\n        changed = False\n        for a in self.args:\n            _xreplace = getattr(a, '_xreplace', None)\n            if _xreplace is not None:\n                a_xr = _xreplace(rule)\n                args.append(a_xr[0])\n                changed |= a_xr[1]\n            else:\n                args.append(a)\n        args = tuple(args)\n        if changed:\n            return (self.func(*args), True)\n    return (self, False)",
    ".sympy.core.mul.py@@Mul.__neg__": "def __neg__(self):\n    c, args = self.as_coeff_mul()\n    if args[0] is not S.ComplexInfinity:\n        c = -c\n    if c is not S.One:\n        if args[0].is_Number:\n            args = list(args)\n            if c is S.NegativeOne:\n                args[0] = -args[0]\n            else:\n                args[0] *= c\n        else:\n            args = (c,) + args\n    return self._from_args(args, self.is_commutative)",
    ".sympy.core.mul.py@@Mul.as_coeff_mul": "def as_coeff_mul(self, *deps, rational=True, **kwargs):\n    if deps:\n        l1, l2 = sift(self.args, lambda x: x.has(*deps), binary=True)\n        return (self._new_rawargs(*l2), tuple(l1))\n    args = self.args\n    if args[0].is_Number:\n        if not rational or args[0].is_Rational:\n            return (args[0], args[1:])\n        elif args[0].is_extended_negative:\n            return (S.NegativeOne, (-args[0],) + args[1:])\n    return (S.One, args)",
    ".sympy.core.mul.py@@Mul._eval_power": "def _eval_power(self, e):\n    cargs, nc = self.args_cnc(split_1=False)\n    if e.is_Integer:\n        return Mul(*[Pow(b, e, evaluate=False) for b in cargs]) * Pow(Mul._from_args(nc), e, evaluate=False)\n    if e.is_Rational and e.q == 2:\n        if self.is_imaginary:\n            a = self.as_real_imag()[1]\n            if a.is_Rational:\n                from .power import integer_nthroot\n                n, d = abs(a / 2).as_numer_denom()\n                n, t = integer_nthroot(n, 2)\n                if t:\n                    d, t = integer_nthroot(d, 2)\n                    if t:\n                        from sympy.functions.elementary.complexes import sign\n                        r = sympify(n) / d\n                        return _unevaluated_Mul(r ** e.p, (1 + sign(a) * S.ImaginaryUnit) ** e.p)\n    p = Pow(self, e, evaluate=False)\n    if e.is_Rational or e.is_Float:\n        return p._eval_expand_power_base()\n    return p",
    ".sympy.core.expr.py@@Expr.args_cnc": "def args_cnc(self, cset=False, warn=True, split_1=True):\n    if self.is_Mul:\n        args = list(self.args)\n    else:\n        args = [self]\n    for i, mi in enumerate(args):\n        if not mi.is_commutative:\n            c = args[:i]\n            nc = args[i:]\n            break\n    else:\n        c = args\n        nc = []\n    if c and split_1 and (c[0].is_Number and c[0].is_extended_negative and (c[0] is not S.NegativeOne)):\n        c[:1] = [S.NegativeOne, -c[0]]\n    if cset:\n        clen = len(c)\n        c = set(c)\n        if clen and warn and (len(c) != clen):\n            raise ValueError('repeated commutative arguments: %s' % [ci for ci in c if list(self.args).count(ci) > 1])\n    return [c, nc]",
    ".sympy.core.numbers.py@@Number.could_extract_minus_sign": "def could_extract_minus_sign(self):\n    return bool(self.is_extended_negative)",
    ".sympy.core.numbers.py@@Float.__lt__": "def __lt__(self, other):\n    if isinstance(other, NumberSymbol):\n        return other.__gt__(self)\n    rv = self._Frel(other, mlib.mpf_lt)\n    if rv is None:\n        return Expr.__lt__(self, other)\n    return rv",
    ".sympy.core.numbers.py@@Integer._eval_power": "def _eval_power(self, expt):\n    from sympy.ntheory.factor_ import perfect_power\n    if expt is S.Infinity:\n        if self.p > S.One:\n            return S.Infinity\n        return S.Infinity + S.ImaginaryUnit * S.Infinity\n    if expt is S.NegativeInfinity:\n        return Rational(1, self, 1) ** S.Infinity\n    if not isinstance(expt, Number):\n        if self.is_negative and expt.is_even:\n            return (-self) ** expt\n    if isinstance(expt, Float):\n        return super()._eval_power(expt)\n    if not isinstance(expt, Rational):\n        return\n    if expt is S.Half and self.is_negative:\n        return S.ImaginaryUnit * Pow(-self, expt)\n    if expt.is_negative:\n        ne = -expt\n        if self.is_negative:\n            return S.NegativeOne ** expt * Rational(1, -self, 1) ** ne\n        else:\n            return Rational(1, self.p, 1) ** ne\n    x, xexact = integer_nthroot(abs(self.p), expt.q)\n    if xexact:\n        result = Integer(x ** abs(expt.p))\n        if self.is_negative:\n            result *= S.NegativeOne ** expt\n        return result\n    b_pos = int(abs(self.p))\n    p = perfect_power(b_pos)\n    if p is not False:\n        dict = {p[0]: p[1]}\n    else:\n        dict = Integer(b_pos).factors(limit=2 ** 15)\n    out_int = 1\n    out_rad = 1\n    sqr_int = 1\n    sqr_gcd = 0\n    sqr_dict = {}\n    for prime, exponent in dict.items():\n        exponent *= expt.p\n        div_e, div_m = divmod(exponent, expt.q)\n        if div_e > 0:\n            out_int *= prime ** div_e\n        if div_m > 0:\n            g = igcd(div_m, expt.q)\n            if g != 1:\n                out_rad *= Pow(prime, Rational(div_m // g, expt.q // g, 1))\n            else:\n                sqr_dict[prime] = div_m\n    for p, ex in sqr_dict.items():\n        if sqr_gcd == 0:\n            sqr_gcd = ex\n        else:\n            sqr_gcd = igcd(sqr_gcd, ex)\n            if sqr_gcd == 1:\n                break\n    for k, v in sqr_dict.items():\n        sqr_int *= k ** (v // sqr_gcd)\n    if sqr_int == b_pos and out_int == 1 and (out_rad == 1):\n        result = None\n    else:\n        result = out_int * out_rad * Pow(sqr_int, Rational(sqr_gcd, expt.q))\n        if self.is_negative:\n            result *= Pow(S.NegativeOne, expt)\n    return result",
    ".sympy.core.numbers.py@@NegativeOne.__neg__": "def __neg__():\n    return S.One",
    ".sympy.core.numbers.py@@igcd": "def igcd(*args):\n    if len(args) < 2:\n        raise TypeError('igcd() takes at least 2 arguments (%s given)' % len(args))\n    args_temp = [abs(as_int(i)) for i in args]\n    if 1 in args_temp:\n        return 1\n    a = args_temp.pop()\n    if HAS_GMPY:\n        for b in args_temp:\n            a = gmpy.gcd(a, b) if b else a\n        return as_int(a)\n    for b in args_temp:\n        a = math.gcd(a, b)\n    return a",
    ".sympy.core.numbers.py@@Rational._as_mpf_val": "def _as_mpf_val(self, prec):\n    return mlib.from_rational(self.p, self.q, prec, rnd)",
    ".sympy.core.numbers.py@@One.__abs__": "def __abs__():\n    return S.One",
    ".sympy.core.power.py@@Pow._eval_power": "def _eval_power(self, other):\n    b, e = self.as_base_exp()\n    if b is S.NaN:\n        return (b ** e) ** other\n    s = None\n    if other.is_integer:\n        s = 1\n    elif b.is_polar:\n        s = 1\n    elif e.is_extended_real is not None:\n        from sympy.functions.elementary.complexes import arg, im, re, sign\n        from sympy.functions.elementary.exponential import exp, log\n        from sympy.functions.elementary.integers import floor\n\n        def _half(e):\n            if getattr(e, 'q', None) == 2:\n                return True\n            n, d = e.as_numer_denom()\n            if n.is_integer and d == 2:\n                return True\n\n        def _n2(e):\n            try:\n                rv = e.evalf(2, strict=True)\n                if rv.is_Number:\n                    return rv\n            except PrecisionExhausted:\n                pass\n        if e.is_extended_real:\n            if e == -1:\n                if _half(other):\n                    if b.is_negative is True:\n                        return S.NegativeOne ** other * Pow(-b, e * other)\n                    elif b.is_negative is False:\n                        return Pow(b, -other)\n            elif e.is_even:\n                if b.is_extended_real:\n                    b = abs(b)\n                if b.is_imaginary:\n                    b = abs(im(b)) * S.ImaginaryUnit\n            if (abs(e) < 1) == True or e == 1:\n                s = 1\n            elif b.is_extended_nonnegative:\n                s = 1\n            elif re(b).is_extended_nonnegative and (abs(e) < 2) == True:\n                s = 1\n            elif fuzzy_not(im(b).is_zero) and abs(e) == 2:\n                s = 1\n            elif _half(other):\n                s = exp(2 * S.Pi * S.ImaginaryUnit * other * floor(S.Half - e * arg(b) / (2 * S.Pi)))\n                if s.is_extended_real and _n2(sign(s) - s) == 0:\n                    s = sign(s)\n                else:\n                    s = None\n        else:\n            try:\n                s = exp(2 * S.ImaginaryUnit * S.Pi * other * floor(S.Half - im(e * log(b)) / 2 / S.Pi))\n                if s.is_extended_real and _n2(sign(s) - s) == 0:\n                    s = sign(s)\n                else:\n                    s = None\n            except PrecisionExhausted:\n                s = None\n    if s is not None:\n        return s * Pow(b, e * other)",
    ".sympy.core.expr.py@@Expr.__rmul__": "def __rmul__(self, other):\n    return Mul(other, self)",
    ".sympy.core.relational.py@@is_gt": "def is_gt(lhs, rhs, assumptions=None):\n    return fuzzy_not(is_le(lhs, rhs, assumptions))",
    ".sympy.core.relational.py@@is_le": "def is_le(lhs, rhs, assumptions=None):\n    return is_ge(rhs, lhs, assumptions)",
    ".sympy.core.relational.py@@is_ge": "def is_ge(lhs, rhs, assumptions=None):\n    from sympy.assumptions.wrapper import AssumptionsWrapper, is_extended_nonnegative\n    if not (isinstance(lhs, Expr) and isinstance(rhs, Expr)):\n        raise TypeError('Can only compare inequalities with Expr')\n    retval = _eval_is_ge(lhs, rhs)\n    if retval is not None:\n        return retval\n    else:\n        n2 = _n2(lhs, rhs)\n        if n2 is not None:\n            if n2 in (S.Infinity, S.NegativeInfinity):\n                n2 = float(n2)\n            return n2 >= 0\n        _lhs = AssumptionsWrapper(lhs, assumptions)\n        _rhs = AssumptionsWrapper(rhs, assumptions)\n        if _lhs.is_extended_real and _rhs.is_extended_real:\n            if _lhs.is_infinite and _lhs.is_extended_positive or (_rhs.is_infinite and _rhs.is_extended_negative):\n                return True\n            diff = lhs - rhs\n            if diff is not S.NaN:\n                rv = is_extended_nonnegative(diff, assumptions)\n                if rv is not None:\n                    return rv",
    ".sympy.core.relational.py@@_eval_is_ge": "def _eval_is_ge(lhs, rhs):\n    return None",
    ".sympy.core.relational.py@@_n2": "def _n2(a, b):\n    if a.is_comparable and b.is_comparable:\n        dif = (a - b).evalf(2)\n        if dif.is_comparable:\n            return dif",
    ".sympy.core.basic.py@@Basic.is_comparable": "def is_comparable(self):\n    is_extended_real = self.is_extended_real\n    if is_extended_real is False:\n        return False\n    if not self.is_number:\n        return False\n    n, i = [p.evalf(2) if not p.is_Number else p for p in self.as_real_imag()]\n    if not (i.is_Number and n.is_Number):\n        return False\n    if i:\n        return False\n    else:\n        return n._prec != 1",
    ".sympy.core.expr.py@@Expr.as_real_imag": "def as_real_imag(self, deep=True, **hints):\n    if hints.get('ignore') == self:\n        return None\n    else:\n        from sympy.functions.elementary.complexes import im, re\n        return (re(self), im(self))",
    ".sympy.functions.elementary.complexes.py@@re.eval": "def eval(cls, arg):\n    if arg is S.NaN:\n        return S.NaN\n    elif arg is S.ComplexInfinity:\n        return S.NaN\n    elif arg.is_extended_real:\n        return arg\n    elif arg.is_imaginary or (S.ImaginaryUnit * arg).is_extended_real:\n        return S.Zero\n    elif arg.is_Matrix:\n        return arg.as_real_imag()[0]\n    elif arg.is_Function and isinstance(arg, conjugate):\n        return re(arg.args[0])\n    else:\n        included, reverted, excluded = ([], [], [])\n        args = Add.make_args(arg)\n        for term in args:\n            coeff = term.as_coefficient(S.ImaginaryUnit)\n            if coeff is not None:\n                if not coeff.is_extended_real:\n                    reverted.append(coeff)\n            elif not term.has(S.ImaginaryUnit) and term.is_extended_real:\n                excluded.append(term)\n            else:\n                real_imag = term.as_real_imag(ignore=arg)\n                if real_imag:\n                    excluded.append(real_imag[0])\n                else:\n                    included.append(term)\n        if len(args) != len(included):\n            a, b, c = (Add(*xs) for xs in [included, reverted, excluded])\n            return cls(a) - im(b) + c",
    ".sympy.functions.elementary.complexes.py@@im.eval": "def eval(cls, arg):\n    if arg is S.NaN:\n        return S.NaN\n    elif arg is S.ComplexInfinity:\n        return S.NaN\n    elif arg.is_extended_real:\n        return S.Zero\n    elif arg.is_imaginary or (S.ImaginaryUnit * arg).is_extended_real:\n        return -S.ImaginaryUnit * arg\n    elif arg.is_Matrix:\n        return arg.as_real_imag()[1]\n    elif arg.is_Function and isinstance(arg, conjugate):\n        return -im(arg.args[0])\n    else:\n        included, reverted, excluded = ([], [], [])\n        args = Add.make_args(arg)\n        for term in args:\n            coeff = term.as_coefficient(S.ImaginaryUnit)\n            if coeff is not None:\n                if not coeff.is_extended_real:\n                    reverted.append(coeff)\n                else:\n                    excluded.append(coeff)\n            elif term.has(S.ImaginaryUnit) or not term.is_extended_real:\n                real_imag = term.as_real_imag(ignore=arg)\n                if real_imag:\n                    excluded.append(real_imag[1])\n                else:\n                    included.append(term)\n        if len(args) != len(included):\n            a, b, c = (Add(*xs) for xs in [included, reverted, excluded])\n            return cls(a) + re(b) + c",
    ".sympy.core.numbers.py@@Float.__eq__": "def __eq__(self, other):\n    from sympy.logic.boolalg import Boolean\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if isinstance(other, Boolean):\n        return False\n    if other.is_NumberSymbol:\n        if other.is_irrational:\n            return False\n        return other.__eq__(self)\n    if other.is_Float:\n        return self._mpf_ == other._mpf_\n    if other.is_Rational:\n        return other.__eq__(self)\n    if other.is_Number:\n        ompf = other._as_mpf_val(self._prec)\n        return bool(mlib.mpf_eq(self._mpf_, ompf))\n    if not self:\n        return not other\n    return False",
    ".sympy.core.numbers.py@@Infinity._as_mpf_val": "def _as_mpf_val(self, prec):\n    return mlib.finf",
    ".sympy.core.numbers.py@@NegativeInfinity._as_mpf_val": "def _as_mpf_val(self, prec):\n    return mlib.fninf",
    ".sympy.core.numbers.py@@Float.__ge__": "def __ge__(self, other):\n    if isinstance(other, NumberSymbol):\n        return other.__le__(self)\n    rv = self._Frel(other, mlib.mpf_ge)\n    if rv is None:\n        return Expr.__ge__(self, other)\n    return rv",
    ".sympy.core.numbers.py@@NegativeOne.__abs__": "def __abs__():\n    return S.One",
    ".sympy.polys.polytools.py@@cancel": "def cancel(f, *gens, _signsimp=True, **args):\n    from sympy.simplify.simplify import signsimp\n    from sympy.polys.rings import sring\n    options.allowed_flags(args, ['polys'])\n    f = sympify(f)\n    if _signsimp:\n        f = signsimp(f)\n    opt = {}\n    if 'polys' in args:\n        opt['polys'] = args['polys']\n    if not isinstance(f, (tuple, Tuple)):\n        if f.is_Number or isinstance(f, Relational) or (not isinstance(f, Expr)):\n            return f\n        f = factor_terms(f, radical=True)\n        p, q = f.as_numer_denom()\n    elif len(f) == 2:\n        p, q = f\n        if isinstance(p, Poly) and isinstance(q, Poly):\n            opt['gens'] = p.gens\n            opt['domain'] = p.domain\n            opt['polys'] = opt.get('polys', True)\n        p, q = (p.as_expr(), q.as_expr())\n    elif isinstance(f, Tuple):\n        return factor_terms(f)\n    else:\n        raise ValueError('unexpected argument: %s' % f)\n    from sympy.functions.elementary.piecewise import Piecewise\n    try:\n        if f.has(Piecewise):\n            raise PolynomialError()\n        R, (F, G) = sring((p, q), *gens, **args)\n        if not R.ngens:\n            if not isinstance(f, (tuple, Tuple)):\n                return f.expand()\n            else:\n                return (S.One, p, q)\n    except PolynomialError as msg:\n        if f.is_commutative and (not f.has(Piecewise)):\n            raise PolynomialError(msg)\n        if f.is_Add or f.is_Mul:\n            c, nc = sift(f.args, lambda x: x.is_commutative is True and (not x.has(Piecewise)), binary=True)\n            nc = [cancel(i) for i in nc]\n            return f.func(cancel(f.func(*c)), *nc)\n        else:\n            reps = []\n            pot = preorder_traversal(f)\n            next(pot)\n            for e in pot:\n                if isinstance(e, (tuple, Tuple, BooleanAtom)):\n                    continue\n                try:\n                    reps.append((e, cancel(e)))\n                    pot.skip()\n                except NotImplementedError:\n                    pass\n            return f.xreplace(dict(reps))\n    c, (P, Q) = (1, F.cancel(G))\n    if opt.get('polys', False) and 'gens' not in opt:\n        opt['gens'] = R.symbols\n    if not isinstance(f, (tuple, Tuple)):\n        return c * (P.as_expr() / Q.as_expr())\n    else:\n        P, Q = (P.as_expr(), Q.as_expr())\n        if not opt.get('polys', False):\n            return (c, P, Q)\n        else:\n            return (c, Poly(P, *gens, **opt), Poly(Q, *gens, **opt))",
    ".sympy.polys.polyoptions.py@@allowed_flags": "def allowed_flags(args, flags):\n    flags = set(flags)\n    for arg in args.keys():\n        try:\n            if Options.__options__[arg].is_Flag and arg not in flags:\n                raise FlagError(\"'%s' flag is not allowed in this context\" % arg)\n        except KeyError:\n            raise OptionError(\"'%s' is not a valid option\" % arg)",
    ".sympy.simplify.simplify.py@@signsimp": "def signsimp(expr, evaluate=None):\n    if evaluate is None:\n        evaluate = global_parameters.evaluate\n    expr = sympify(expr)\n    if not isinstance(expr, (Expr, Relational)) or expr.is_Atom:\n        return expr\n    e = expr.replace(lambda x: x.is_Mul and --x != x, lambda x: --x)\n    e = sub_post(sub_pre(e))\n    if not isinstance(e, (Expr, Relational)) or e.is_Atom:\n        return e\n    if e.is_Add:\n        rv = e.func(*[signsimp(a) for a in e.args])\n        if not evaluate and isinstance(rv, Add) and rv.could_extract_minus_sign():\n            return Mul(S.NegativeOne, -rv, evaluate=False)\n        return rv\n    if evaluate:\n        e = e.replace(lambda x: x.is_Mul and --x != x, lambda x: --x)\n    return e",
    ".sympy.simplify.cse_opts.py@@sub_pre": "def sub_pre(e):\n    adds = [a for a in e.atoms(Add) if a.could_extract_minus_sign()]\n    reps = {}\n    ignore = set()\n    for a in adds:\n        na = -a\n        if na.is_Mul:\n            ignore.add(a)\n            continue\n        reps[a] = Mul._from_args([S.NegativeOne, na])\n    e = e.xreplace(reps)\n    if isinstance(e, Basic):\n        negs = {}\n        for a in sorted(e.atoms(Add), key=default_sort_key):\n            if a in ignore:\n                continue\n            if a in reps:\n                negs[a] = reps[a]\n            elif a.could_extract_minus_sign():\n                negs[a] = Mul._from_args([S.One, S.NegativeOne, -a])\n        e = e.xreplace(negs)\n    return e",
    ".sympy.core.basic.py@@Basic.atoms": "def atoms(self, *types):\n    if types:\n        types = tuple([t if isinstance(t, type) else type(t) for t in types])\n    nodes = _preorder_traversal(self)\n    if types:\n        result = {node for node in nodes if isinstance(node, types)}\n    else:\n        result = {node for node in nodes if not node.args}\n    return result",
    ".sympy.simplify.cse_opts.py@@sub_post": "def sub_post(e):\n    replacements = []\n    for node in preorder_traversal(e):\n        if isinstance(node, Mul) and node.args[0] is S.One and (node.args[1] is S.NegativeOne):\n            replacements.append((node, -Mul._from_args(node.args[2:])))\n    for node, replacement in replacements:\n        e = e.xreplace({node: replacement})\n    return e",
    ".sympy.core.exprtools.py@@factor_terms": "def factor_terms(expr, radical=False, clear=False, fraction=False, sign=True):\n\n    def do(expr):\n        from sympy.concrete.summations import Sum\n        from sympy.integrals.integrals import Integral\n        is_iterable = iterable(expr)\n        if not isinstance(expr, Basic) or expr.is_Atom:\n            if is_iterable:\n                return type(expr)([do(i) for i in expr])\n            return expr\n        if expr.is_Pow or expr.is_Function or is_iterable or (not hasattr(expr, 'args_cnc')):\n            args = expr.args\n            newargs = tuple([do(i) for i in args])\n            if newargs == args:\n                return expr\n            return expr.func(*newargs)\n        if isinstance(expr, (Sum, Integral)):\n            return _factor_sum_int(expr, radical=radical, clear=clear, fraction=fraction, sign=sign)\n        cont, p = expr.as_content_primitive(radical=radical, clear=clear)\n        if p.is_Add:\n            list_args = [do(a) for a in Add.make_args(p)]\n            if not any((a.as_coeff_Mul()[0].extract_multiplicatively(-1) is None for a in list_args)):\n                cont = -cont\n                list_args = [-a for a in list_args]\n            special = {}\n            for i, a in enumerate(list_args):\n                b, e = a.as_base_exp()\n                if e.is_Mul and e != Mul(*e.args):\n                    list_args[i] = Dummy()\n                    special[list_args[i]] = a\n            p = Add._from_args(list_args)\n            p = gcd_terms(p, isprimitive=True, clear=clear, fraction=fraction).xreplace(special)\n        elif p.args:\n            p = p.func(*[do(a) for a in p.args])\n        rv = _keep_coeff(cont, p, clear=clear, sign=sign)\n        return rv\n    expr = sympify(expr)\n    return do(expr)",
    ".sympy.core.exprtools.py@@do": "def do(expr):\n    from sympy.concrete.summations import Sum\n    from sympy.integrals.integrals import Integral\n    is_iterable = iterable(expr)\n    if not isinstance(expr, Basic) or expr.is_Atom:\n        if is_iterable:\n            return type(expr)([do(i) for i in expr])\n        return expr\n    if expr.is_Pow or expr.is_Function or is_iterable or (not hasattr(expr, 'args_cnc')):\n        args = expr.args\n        newargs = tuple([do(i) for i in args])\n        if newargs == args:\n            return expr\n        return expr.func(*newargs)\n    if isinstance(expr, (Sum, Integral)):\n        return _factor_sum_int(expr, radical=radical, clear=clear, fraction=fraction, sign=sign)\n    cont, p = expr.as_content_primitive(radical=radical, clear=clear)\n    if p.is_Add:\n        list_args = [do(a) for a in Add.make_args(p)]\n        if not any((a.as_coeff_Mul()[0].extract_multiplicatively(-1) is None for a in list_args)):\n            cont = -cont\n            list_args = [-a for a in list_args]\n        special = {}\n        for i, a in enumerate(list_args):\n            b, e = a.as_base_exp()\n            if e.is_Mul and e != Mul(*e.args):\n                list_args[i] = Dummy()\n                special[list_args[i]] = a\n        p = Add._from_args(list_args)\n        p = gcd_terms(p, isprimitive=True, clear=clear, fraction=fraction).xreplace(special)\n    elif p.args:\n        p = p.func(*[do(a) for a in p.args])\n    rv = _keep_coeff(cont, p, clear=clear, sign=sign)\n    return rv",
    ".sympy.utilities.iterables.py@@iterable": "def iterable(i, exclude=(str, dict, NotIterable)):\n    if hasattr(i, '_iterable'):\n        return i._iterable\n    try:\n        iter(i)\n    except TypeError:\n        return False\n    if exclude:\n        return not isinstance(i, exclude)\n    return True",
    ".sympy.core.mul.py@@Mul.as_content_primitive": "def as_content_primitive(self, radical=False, clear=True):\n    coef = S.One\n    args = []\n    for a in self.args:\n        c, p = a.as_content_primitive(radical=radical, clear=clear)\n        coef *= c\n        if p is not S.One:\n            args.append(p)\n    return (coef, self.func(*args))",
    ".sympy.core.numbers.py@@Rational.as_content_primitive": "def as_content_primitive(self, radical=False, clear=True):\n    if self:\n        if self.is_positive:\n            return (self, S.One)\n        return (-self, S.NegativeOne)\n    return (S.One, self)",
    ".sympy.core.expr.py@@Expr.as_content_primitive": "def as_content_primitive(self, radical=False, clear=True):\n    return (S.One, self)",
    ".sympy.core.power.py@@Pow.as_content_primitive": "def as_content_primitive(self, radical=False, clear=True):\n    b, e = self.as_base_exp()\n    b = _keep_coeff(*b.as_content_primitive(radical=radical, clear=clear))\n    ce, pe = e.as_content_primitive(radical=radical, clear=clear)\n    if b.is_Rational:\n        h, t = pe.as_coeff_Add()\n        if h.is_Rational and b != S.Zero:\n            ceh = ce * h\n            c = self.func(b, ceh)\n            r = S.Zero\n            if not c.is_Rational:\n                iceh, r = divmod(ceh.p, ceh.q)\n                c = self.func(b, iceh)\n            return (c, self.func(b, _keep_coeff(ce, t + r / ce / ceh.q)))\n    e = _keep_coeff(ce, pe)\n    if e.is_Rational and b.is_Mul:\n        h, t = b.as_content_primitive(radical=radical, clear=clear)\n        c, m = self.func(h, e).as_coeff_Mul()\n        m, me = m.as_base_exp()\n        if m is S.One or me == e:\n            return (c, self.func(_keep_coeff(m, t), e))\n    return (S.One, self.func(b, e))",
    ".sympy.core.mul.py@@_keep_coeff": "def _keep_coeff(coeff, factors, clear=True, sign=False):\n    if not coeff.is_Number:\n        if factors.is_Number:\n            factors, coeff = (coeff, factors)\n        else:\n            return coeff * factors\n    if factors is S.One:\n        return coeff\n    if coeff is S.One:\n        return factors\n    elif coeff is S.NegativeOne and (not sign):\n        return -factors\n    elif factors.is_Add:\n        if not clear and coeff.is_Rational and (coeff.q != 1):\n            args = [i.as_coeff_Mul() for i in factors.args]\n            args = [(_keep_coeff(c, coeff), m) for c, m in args]\n            if any((c.is_Integer for c, _ in args)):\n                return Add._from_args([Mul._from_args(i[1:] if i[0] == 1 else i) for i in args])\n        return Mul(coeff, factors, evaluate=False)\n    elif factors.is_Mul:\n        margs = list(factors.args)\n        if margs[0].is_Number:\n            margs[0] *= coeff\n            if margs[0] == 1:\n                margs.pop(0)\n        else:\n            margs.insert(0, coeff)\n        return Mul._from_args(margs)\n    else:\n        m = coeff * factors\n        if m.is_Number and (not factors.is_Number):\n            m = Mul._from_args((coeff, factors))\n        return m",
    ".sympy.core.mul.py@@Mul.as_numer_denom": "def as_numer_denom(self):\n    numers, denoms = list(zip(*[f.as_numer_denom() for f in self.args]))\n    return (self.func(*numers), self.func(*denoms))",
    ".sympy.core.numbers.py@@Integer.as_numer_denom": "def as_numer_denom(self):\n    return (self, S.One)",
    ".sympy.core.power.py@@Pow.as_numer_denom": "def as_numer_denom(self):\n    if not self.is_commutative:\n        return (self, S.One)\n    base, exp = self.as_base_exp()\n    n, d = base.as_numer_denom()\n    neg_exp = exp.is_negative\n    if exp.is_Mul and (not neg_exp) and (not exp.is_positive):\n        neg_exp = exp.could_extract_minus_sign()\n    int_exp = exp.is_integer\n    if not (d.is_extended_real or int_exp):\n        n = base\n        d = S.One\n    dnonpos = d.is_nonpositive\n    if dnonpos:\n        n, d = (-n, -d)\n    elif dnonpos is None and (not int_exp):\n        n = base\n        d = S.One\n    if neg_exp:\n        n, d = (d, n)\n        exp = -exp\n    if exp.is_infinite:\n        if n is S.One and d is not S.One:\n            return (n, self.func(d, exp))\n        if n is not S.One and d is S.One:\n            return (self.func(n, exp), d)\n    return (self.func(n, exp), self.func(d, exp))",
    ".sympy.polys.rings.py@@sring": "def sring(exprs, *symbols, **options):\n    single = False\n    if not is_sequence(exprs):\n        exprs, single = ([exprs], True)\n    exprs = list(map(sympify, exprs))\n    opt = build_options(symbols, options)\n    reps, opt = _parallel_dict_from_expr(exprs, opt)\n    if opt.domain is None:\n        coeffs = sum([list(rep.values()) for rep in reps], [])\n        opt.domain, coeffs_dom = construct_domain(coeffs, opt=opt)\n        coeff_map = dict(zip(coeffs, coeffs_dom))\n        reps = [{m: coeff_map[c] for m, c in rep.items()} for rep in reps]\n    _ring = PolyRing(opt.gens, opt.domain, opt.order)\n    polys = list(map(_ring.from_dict, reps))\n    if single:\n        return (_ring, polys[0])\n    else:\n        return (_ring, polys)",
    ".sympy.polys.polyoptions.py@@build_options": "def build_options(gens, args=None):\n    if args is None:\n        gens, args = ((), gens)\n    if len(args) != 1 or 'opt' not in args or gens:\n        return Options(gens, args)\n    else:\n        return args['opt']",
    ".sympy.polys.polyoptions.py@@Options.__init__": "def __init__(self, gens, args, flags=None, strict=False):\n    dict.__init__(self)\n    if gens and args.get('gens', ()):\n        raise OptionError(\"both '*gens' and keyword argument 'gens' supplied\")\n    elif gens:\n        args = dict(args)\n        args['gens'] = gens\n    defaults = args.pop('defaults', {})\n\n    def preprocess_options(args):\n        for option, value in args.items():\n            try:\n                cls = self.__options__[option]\n            except KeyError:\n                raise OptionError(\"'%s' is not a valid option\" % option)\n            if issubclass(cls, Flag):\n                if flags is None or option not in flags:\n                    if strict:\n                        raise OptionError(\"'%s' flag is not allowed in this context\" % option)\n            if value is not None:\n                self[option] = cls.preprocess(value)\n    preprocess_options(args)\n    for key, value in dict(defaults).items():\n        if key in self:\n            del defaults[key]\n        else:\n            for option in self.keys():\n                cls = self.__options__[option]\n                if key in cls.excludes:\n                    del defaults[key]\n                    break\n    preprocess_options(defaults)\n    for option in self.keys():\n        cls = self.__options__[option]\n        for require_option in cls.requires:\n            if self.get(require_option) is None:\n                raise OptionError(\"'%s' option is only allowed together with '%s'\" % (option, require_option))\n        for exclude_option in cls.excludes:\n            if self.get(exclude_option) is not None:\n                raise OptionError(\"'%s' option is not allowed together with '%s'\" % (option, exclude_option))\n    for option in self.__order__:\n        self.__options__[option].postprocess(self)",
    ".sympy.polys.polyoptions.py@@Options.preprocess_options": "def preprocess_options(args):\n    for option, value in args.items():\n        try:\n            cls = self.__options__[option]\n        except KeyError:\n            raise OptionError(\"'%s' is not a valid option\" % option)\n        if issubclass(cls, Flag):\n            if flags is None or option not in flags:\n                if strict:\n                    raise OptionError(\"'%s' flag is not allowed in this context\" % option)\n        if value is not None:\n            self[option] = cls.preprocess(value)",
    ".sympy.polys.polyoptions.py@@Option.postprocess": "def postprocess(cls, options):\n    pass",
    ".sympy.polys.polyoptions.py@@Extension.postprocess": "def postprocess(cls, options):\n    if 'extension' in options and options['extension'] is not True:\n        options['domain'] = sympy.polys.domains.QQ.algebraic_field(*options['extension'])",
    ".sympy.polys.polyoptions.py@@Gaussian.postprocess": "def postprocess(cls, options):\n    if 'gaussian' in options and options['gaussian'] is True:\n        options['domain'] = sympy.polys.domains.QQ_I\n        Extension.postprocess(options)",
    ".sympy.polys.polyoptions.py@@Domain.postprocess": "def postprocess(cls, options):\n    if 'gens' in options and 'domain' in options and options['domain'].is_Composite and set(options['domain'].symbols) & set(options['gens']):\n        raise GeneratorsError('ground domain and generators interfere together')\n    elif ('gens' not in options or not options['gens']) and 'domain' in options and (options['domain'] == sympy.polys.domains.EX):\n        raise GeneratorsError('you have to provide generators because EX domain was requested')",
    ".sympy.polys.polyoptions.py@@Auto.postprocess": "def postprocess(cls, options):\n    if ('domain' in options or 'field' in options) and 'auto' not in options:\n        options['auto'] = False",
    ".sympy.polys.polyoptions.py@@Modulus.postprocess": "def postprocess(cls, options):\n    if 'modulus' in options:\n        modulus = options['modulus']\n        symmetric = options.get('symmetric', True)\n        options['domain'] = sympy.polys.domains.FF(modulus, symmetric)",
    ".sympy.polys.polyoptions.py@@Split.postprocess": "def postprocess(cls, options):\n    if 'split' in options:\n        raise NotImplementedError(\"'split' option is not implemented yet\")",
    ".sympy.polys.polyutils.py@@_parallel_dict_from_expr": "def _parallel_dict_from_expr(exprs, opt):\n    if opt.expand is not False:\n        exprs = [expr.expand() for expr in exprs]\n    if any((expr.is_commutative is False for expr in exprs)):\n        raise PolynomialError('non-commutative expressions are not supported')\n    if opt.gens:\n        reps, gens = _parallel_dict_from_expr_if_gens(exprs, opt)\n    else:\n        reps, gens = _parallel_dict_from_expr_no_gens(exprs, opt)\n    return (reps, opt.clone({'gens': gens}))",
    ".sympy.polys.polyoptions.py@@OptionType.getter": "def getter(self):\n    try:\n        return self[cls.option]\n    except KeyError:\n        return cls.default()",
    ".sympy.polys.polyoptions.py@@Expand.default": "def default(cls):\n    return True",
    ".sympy.core.expr.py@@Expr.expand": "def expand(self, deep=True, modulus=None, power_base=True, power_exp=True, mul=True, log=True, multinomial=True, basic=True, **hints):\n    from sympy.simplify.radsimp import fraction\n    hints.update(power_base=power_base, power_exp=power_exp, mul=mul, log=log, multinomial=multinomial, basic=basic)\n    expr = self\n    if hints.pop('frac', False):\n        n, d = [a.expand(deep=deep, modulus=modulus, **hints) for a in fraction(self)]\n        return n / d\n    elif hints.pop('denom', False):\n        n, d = fraction(self)\n        return n / d.expand(deep=deep, modulus=modulus, **hints)\n    elif hints.pop('numer', False):\n        n, d = fraction(self)\n        return n.expand(deep=deep, modulus=modulus, **hints) / d\n\n    def _expand_hint_key(hint):\n        if hint == 'mul':\n            return 'mulz'\n        return hint\n    for hint in sorted(hints.keys(), key=_expand_hint_key):\n        use_hint = hints[hint]\n        if use_hint:\n            hint = '_eval_expand_' + hint\n            expr, hit = Expr._expand_hint(expr, hint, deep=deep, **hints)\n    while True:\n        was = expr\n        if hints.get('multinomial', False):\n            expr, _ = Expr._expand_hint(expr, '_eval_expand_multinomial', deep=deep, **hints)\n        if hints.get('mul', False):\n            expr, _ = Expr._expand_hint(expr, '_eval_expand_mul', deep=deep, **hints)\n        if hints.get('log', False):\n            expr, _ = Expr._expand_hint(expr, '_eval_expand_log', deep=deep, **hints)\n        if expr == was:\n            break\n    if modulus is not None:\n        modulus = sympify(modulus)\n        if not modulus.is_Integer or modulus <= 0:\n            raise ValueError('modulus must be a positive integer, got %s' % modulus)\n        terms = []\n        for term in Add.make_args(expr):\n            coeff, tail = term.as_coeff_Mul(rational=True)\n            coeff %= modulus\n            if coeff:\n                terms.append(coeff * tail)\n        expr = Add(*terms)\n    return expr",
    ".sympy.core.expr.py@@Expr._expand_hint_key": "def _expand_hint_key(hint):\n    if hint == 'mul':\n        return 'mulz'\n    return hint",
    ".sympy.core.expr.py@@Expr._expand_hint": "def _expand_hint(expr, hint, deep=True, **hints):\n    hit = False\n    if deep and getattr(expr, 'args', ()) and (not expr.is_Atom):\n        sargs = []\n        for arg in expr.args:\n            arg, arghit = Expr._expand_hint(arg, hint, **hints)\n            hit |= arghit\n            sargs.append(arg)\n        if hit:\n            expr = expr.func(*sargs)\n    if hasattr(expr, hint):\n        newexpr = getattr(expr, hint)(**hints)\n        if newexpr != expr:\n            return (newexpr, True)\n    return (expr, hit)",
    ".sympy.core.mul.py@@Mul._eval_expand_mul": "def _eval_expand_mul(self, **hints):\n    from sympy.simplify.radsimp import fraction\n    expr = self\n    n, d = fraction(expr)\n    if d.is_Mul:\n        n, d = [i._eval_expand_mul(**hints) if i.is_Mul else i for i in (n, d)]\n    expr = n / d\n    if not expr.is_Mul:\n        return expr\n    plain, sums, rewrite = ([], [], False)\n    for factor in expr.args:\n        if factor.is_Add:\n            sums.append(factor)\n            rewrite = True\n        elif factor.is_commutative:\n            plain.append(factor)\n        else:\n            sums.append(Basic(factor))\n    if not rewrite:\n        return expr\n    else:\n        plain = self.func(*plain)\n        if sums:\n            deep = hints.get('deep', False)\n            terms = self.func._expandsums(sums)\n            args = []\n            for term in terms:\n                t = self.func(plain, term)\n                if t.is_Mul and any((a.is_Add for a in t.args)) and deep:\n                    t = t._eval_expand_mul()\n                args.append(t)\n            return Add(*args)\n        else:\n            return plain",
    ".sympy.polys.polyoptions.py@@Gens.default": "def default(cls):\n    return ()",
    ".sympy.polys.polyutils.py@@_parallel_dict_from_expr_no_gens": "def _parallel_dict_from_expr_no_gens(exprs, opt):\n    if opt.domain is not None:\n\n        def _is_coeff(factor):\n            return factor in opt.domain\n    elif opt.extension is True:\n\n        def _is_coeff(factor):\n            return factor.is_algebraic\n    elif opt.greedy is not False:\n\n        def _is_coeff(factor):\n            return factor is S.ImaginaryUnit\n    else:\n\n        def _is_coeff(factor):\n            return factor.is_number\n    gens, reprs = (set(), [])\n    for expr in exprs:\n        terms = []\n        if expr.is_Equality:\n            expr = expr.lhs - expr.rhs\n        for term in Add.make_args(expr):\n            coeff, elements = ([], {})\n            for factor in Mul.make_args(term):\n                if not _not_a_coeff(factor) and (factor.is_Number or _is_coeff(factor)):\n                    coeff.append(factor)\n                else:\n                    if opt.series is False:\n                        base, exp = decompose_power(factor)\n                        if exp < 0:\n                            exp, base = (-exp, Pow(base, -S.One))\n                    else:\n                        base, exp = decompose_power_rat(factor)\n                    elements[base] = elements.setdefault(base, 0) + exp\n                    gens.add(base)\n            terms.append((coeff, elements))\n        reprs.append(terms)\n    gens = _sort_gens(gens, opt=opt)\n    k, indices = (len(gens), {})\n    for i, g in enumerate(gens):\n        indices[g] = i\n    polys = []\n    for terms in reprs:\n        poly = {}\n        for coeff, term in terms:\n            monom = [0] * k\n            for base, exp in term.items():\n                monom[indices[base]] = exp\n            monom = tuple(monom)\n            if monom in poly:\n                poly[monom] += Mul(*coeff)\n            else:\n                poly[monom] = Mul(*coeff)\n        polys.append(poly)\n    return (polys, tuple(gens))",
    ".sympy.polys.polyoptions.py@@Option.default": "def default(cls):\n    return None",
    ".sympy.polys.polyutils.py@@_not_a_coeff": "def _not_a_coeff(expr):\n    if type(expr) in illegal_types or expr in finf:\n        return True\n    if isinstance(expr, float) and float(expr) != expr:\n        return True\n    return",
    ".sympy.polys.polyutils.py@@_is_coeff": "def _is_coeff(factor):\n    return factor.is_number",
    ".sympy.polys.polyoptions.py@@Series.default": "def default(cls):\n    return False",
    ".sympy.core.exprtools.py@@decompose_power": "def decompose_power(expr: Expr) -> tTuple[Expr, int]:\n    base, exp = expr.as_base_exp()\n    if exp.is_Number:\n        if exp.is_Rational:\n            if not exp.is_Integer:\n                base = Pow(base, Rational(1, exp.q))\n            e = exp.p\n        else:\n            base, e = (expr, 1)\n    else:\n        exp, tail = exp.as_coeff_Mul(rational=True)\n        if exp is S.NegativeOne:\n            base, e = (Pow(base, tail), -1)\n        elif exp is not S.One:\n            tail = _keep_coeff(Rational(1, exp.q), tail)\n            base, e = (Pow(base, tail), exp.p)\n        else:\n            base, e = (expr, 1)\n    return (base, e)",
    ".sympy.polys.polyutils.py@@_sort_gens": "def _sort_gens(gens, **args):\n    opt = build_options(args)\n    gens_order, wrt = ({}, None)\n    if opt is not None:\n        gens_order, wrt = ({}, opt.wrt)\n        for i, gen in enumerate(opt.sort):\n            gens_order[gen] = i + 1\n\n    def order_key(gen):\n        gen = str(gen)\n        if wrt is not None:\n            try:\n                return (-len(wrt) + wrt.index(gen), gen, 0)\n            except ValueError:\n                pass\n        name, index = _re_gen.match(gen).groups()\n        if index:\n            index = int(index)\n        else:\n            index = 0\n        try:\n            return (gens_order[name], name, index)\n        except KeyError:\n            pass\n        try:\n            return (_gens_order[name], name, index)\n        except KeyError:\n            pass\n        return (_max_order, name, index)\n    try:\n        gens = sorted(gens, key=order_key)\n    except TypeError:\n        pass\n    return tuple(gens)",
    ".sympy.polys.polyoptions.py@@Sort.default": "def default(cls):\n    return []",
    ".sympy.polys.polyutils.py@@order_key": "def order_key(gen):\n    gen = str(gen)\n    if wrt is not None:\n        try:\n            return (-len(wrt) + wrt.index(gen), gen, 0)\n        except ValueError:\n            pass\n    name, index = _re_gen.match(gen).groups()\n    if index:\n        index = int(index)\n    else:\n        index = 0\n    try:\n        return (gens_order[name], name, index)\n    except KeyError:\n        pass\n    try:\n        return (_gens_order[name], name, index)\n    except KeyError:\n        pass\n    return (_max_order, name, index)",
    ".sympy.core._print_helpers.py@@Printable.__str__": "def __str__(self):\n    from sympy.printing.str import sstr\n    return sstr(self, order=None)",
    ".sympy.printing.printer.py@@_PrintFunction.__call__": "def __call__(self, *args, **kwargs):\n    return self.__wrapped__(*args, **kwargs)",
    ".sympy.printing.str.py@@sstr": "def sstr(expr, **settings):\n    p = StrPrinter(settings)\n    s = p.doprint(expr)\n    return s",
    ".sympy.printing.printer.py@@Printer.__init__": "def __init__(self, settings=None):\n    self._str = str\n    self._settings = self._get_initial_settings()\n    self._context = dict()\n    if settings is not None:\n        self._settings.update(settings)\n        if len(self._settings) > len(self._default_settings):\n            for key in self._settings:\n                if key not in self._default_settings:\n                    raise TypeError(\"Unknown setting '%s'.\" % key)\n    self._print_level = 0",
    ".sympy.printing.printer.py@@Printer._get_initial_settings": "def _get_initial_settings(cls):\n    settings = cls._default_settings.copy()\n    for key, val in cls._global_settings.items():\n        if key in cls._default_settings:\n            settings[key] = val\n    return settings",
    ".sympy.printing.printer.py@@Printer.doprint": "def doprint(self, expr):\n    return self._str(self._print(expr))",
    ".sympy.printing.printer.py@@Printer._print": "def _print(self, expr, **kwargs):\n    self._print_level += 1\n    try:\n        if self.printmethod and hasattr(expr, self.printmethod) and (not isinstance(expr, BasicMeta)):\n            return getattr(expr, self.printmethod)(self, **kwargs)\n        classes = type(expr).__mro__\n        if AppliedUndef in classes:\n            classes = classes[classes.index(AppliedUndef):]\n        if UndefinedFunction in classes:\n            classes = classes[classes.index(UndefinedFunction):]\n        if Function in classes:\n            i = classes.index(Function)\n            classes = tuple((c for c in classes[:i] if c.__name__ == classes[0].__name__ or c.__name__.endswith('Base'))) + classes[i:]\n        for cls in classes:\n            printmethodname = '_print_' + cls.__name__\n            printmethod = getattr(self, printmethodname, None)\n            if printmethod is not None:\n                return printmethod(expr, **kwargs)\n        return self.emptyPrinter(expr)\n    finally:\n        self._print_level -= 1",
    ".sympy.printing.str.py@@StrPrinter._print_Symbol": "def _print_Symbol(self, expr):\n    return expr.name",
    ".sympy.printing.str.py@@StrPrinter._print_Function": "def _print_Function(self, expr):\n    return expr.func.__name__ + '(%s)' % self.stringify(expr.args, ', ')",
    ".sympy.printing.str.py@@StrPrinter.stringify": "def stringify(self, args, sep, level=0):\n    return sep.join([self.parenthesize(item, level) for item in args])",
    ".sympy.printing.str.py@@StrPrinter.parenthesize": "def parenthesize(self, item, level, strict=False):\n    if precedence(item) < level or (not strict and precedence(item) <= level):\n        return '(%s)' % self._print(item)\n    else:\n        return self._print(item)",
    ".sympy.printing.precedence.py@@precedence": "def precedence(item):\n    if hasattr(item, 'precedence'):\n        return item.precedence\n    try:\n        mro = item.__class__.__mro__\n    except AttributeError:\n        return PRECEDENCE['Atom']\n    for i in mro:\n        n = i.__name__\n        if n in PRECEDENCE_FUNCTIONS:\n            return PRECEDENCE_FUNCTIONS[n](item)\n        elif n in PRECEDENCE_VALUES:\n            return PRECEDENCE_VALUES[n]\n    return PRECEDENCE['Atom']",
    ".sympy.polys.polyoptions.py@@Options.clone": "def clone(self, updates={}):\n    obj = dict.__new__(self.__class__)\n    for option, value in self.items():\n        obj[option] = value\n    for option, value in updates.items():\n        obj[option] = value\n    return obj",
    ".sympy.polys.constructor.py@@construct_domain": "def construct_domain(obj, **args):\n    opt = build_options(args)\n    if hasattr(obj, '__iter__'):\n        if isinstance(obj, dict):\n            if not obj:\n                monoms, coeffs = ([], [])\n            else:\n                monoms, coeffs = list(zip(*list(obj.items())))\n        else:\n            coeffs = obj\n    else:\n        coeffs = [obj]\n    coeffs = list(map(sympify, coeffs))\n    result = _construct_simple(coeffs, opt)\n    if result is not None:\n        if result is not False:\n            domain, coeffs = result\n        else:\n            domain, coeffs = _construct_expression(coeffs, opt)\n    else:\n        if opt.composite is False:\n            result = None\n        else:\n            result = _construct_composite(coeffs, opt)\n        if result is not None:\n            domain, coeffs = result\n        else:\n            domain, coeffs = _construct_expression(coeffs, opt)\n    if hasattr(obj, '__iter__'):\n        if isinstance(obj, dict):\n            return (domain, dict(list(zip(monoms, coeffs))))\n        else:\n            return (domain, coeffs)\n    else:\n        return (domain, coeffs[0])",
    ".sympy.polys.constructor.py@@_construct_simple": "def _construct_simple(coeffs, opt):\n    rationals = floats = complexes = algebraics = False\n    float_numbers = []\n    if opt.extension is True:\n        is_algebraic = lambda coeff: coeff.is_number and coeff.is_algebraic\n    else:\n        is_algebraic = lambda coeff: False\n    for coeff in coeffs:\n        if coeff.is_Rational:\n            if not coeff.is_Integer:\n                rationals = True\n        elif coeff.is_Float:\n            if algebraics:\n                return False\n            else:\n                floats = True\n                float_numbers.append(coeff)\n        else:\n            is_complex = pure_complex(coeff)\n            if is_complex:\n                complexes = True\n                x, y = is_complex\n                if x.is_Rational and y.is_Rational:\n                    if not (x.is_Integer and y.is_Integer):\n                        rationals = True\n                    continue\n                else:\n                    floats = True\n                    if x.is_Float:\n                        float_numbers.append(x)\n                    if y.is_Float:\n                        float_numbers.append(y)\n            elif is_algebraic(coeff):\n                if floats:\n                    return False\n                algebraics = True\n            else:\n                return None\n    max_prec = max((c._prec for c in float_numbers)) if float_numbers else 53\n    if algebraics:\n        domain, result = _construct_algebraic(coeffs, opt)\n    else:\n        if floats and complexes:\n            domain = ComplexField(prec=max_prec)\n        elif floats:\n            domain = RealField(prec=max_prec)\n        elif rationals or opt.field:\n            domain = QQ_I if complexes else QQ\n        else:\n            domain = ZZ_I if complexes else ZZ\n        result = [domain.from_sympy(coeff) for coeff in coeffs]\n    return (domain, result)",
    ".sympy.polys.domains.integerring.py@@IntegerRing.from_sympy": "def from_sympy(self, a):\n    if a.is_Integer:\n        return MPZ(a.p)\n    elif a.is_Float and int(a) == a:\n        return MPZ(int(a))\n    else:\n        raise CoercionFailed('expected an integer, got %s' % a)",
    ".sympy.polys.polyoptions.py@@Options.__setattr__": "def __setattr__(self, attr, value):\n    if attr in self.__options__:\n        self[attr] = value\n    else:\n        super().__setattr__(attr, value)",
    ".sympy.polys.polyoptions.py@@Order.default": "def default(cls):\n    return sympy.polys.orderings.lex",
    ".sympy.polys.rings.py@@PolyRing.__new__": "def __new__(cls, symbols, domain, order=lex):\n    symbols = tuple(_parse_symbols(symbols))\n    ngens = len(symbols)\n    domain = DomainOpt.preprocess(domain)\n    order = OrderOpt.preprocess(order)\n    _hash_tuple = (cls.__name__, symbols, ngens, domain, order)\n    obj = _ring_cache.get(_hash_tuple)\n    if obj is None:\n        if domain.is_Composite and set(symbols) & set(domain.symbols):\n            raise GeneratorsError(\"polynomial ring and it's ground domain share generators\")\n        obj = object.__new__(cls)\n        obj._hash_tuple = _hash_tuple\n        obj._hash = hash(_hash_tuple)\n        obj.dtype = type('PolyElement', (PolyElement,), {'ring': obj})\n        obj.symbols = symbols\n        obj.ngens = ngens\n        obj.domain = domain\n        obj.order = order\n        obj.zero_monom = (0,) * ngens\n        obj.gens = obj._gens()\n        obj._gens_set = set(obj.gens)\n        obj._one = [(obj.zero_monom, domain.one)]\n        if ngens:\n            codegen = MonomialOps(ngens)\n            obj.monomial_mul = codegen.mul()\n            obj.monomial_pow = codegen.pow()\n            obj.monomial_mulpow = codegen.mulpow()\n            obj.monomial_ldiv = codegen.ldiv()\n            obj.monomial_div = codegen.div()\n            obj.monomial_lcm = codegen.lcm()\n            obj.monomial_gcd = codegen.gcd()\n        else:\n            monunit = lambda a, b: ()\n            obj.monomial_mul = monunit\n            obj.monomial_pow = monunit\n            obj.monomial_mulpow = lambda a, b, c: ()\n            obj.monomial_ldiv = monunit\n            obj.monomial_div = monunit\n            obj.monomial_lcm = monunit\n            obj.monomial_gcd = monunit\n        if order is lex:\n            obj.leading_expv = max\n        else:\n            obj.leading_expv = lambda f: max(f, key=order)\n        for symbol, generator in zip(obj.symbols, obj.gens):\n            if isinstance(symbol, Symbol):\n                name = symbol.name\n                if not hasattr(obj, name):\n                    setattr(obj, name, generator)\n        _ring_cache[_hash_tuple] = obj\n    return obj",
    ".sympy.polys.rings.py@@_parse_symbols": "def _parse_symbols(symbols):\n    if isinstance(symbols, str):\n        return _symbols(symbols, seq=True) if symbols else ()\n    elif isinstance(symbols, Expr):\n        return (symbols,)\n    elif is_sequence(symbols):\n        if all((isinstance(s, str) for s in symbols)):\n            return _symbols(symbols)\n        elif all((isinstance(s, Expr) for s in symbols)):\n            return symbols\n    raise GeneratorsError('expected a string, Symbol or expression or a non-empty sequence of strings, Symbols or expressions')",
    ".sympy.polys.polyoptions.py@@Domain.preprocess": "def preprocess(cls, domain):\n    if isinstance(domain, sympy.polys.domains.Domain):\n        return domain\n    elif hasattr(domain, 'to_domain'):\n        return domain.to_domain()\n    elif isinstance(domain, str):\n        if domain in ['Z', 'ZZ']:\n            return sympy.polys.domains.ZZ\n        if domain in ['Q', 'QQ']:\n            return sympy.polys.domains.QQ\n        if domain == 'ZZ_I':\n            return sympy.polys.domains.ZZ_I\n        if domain == 'QQ_I':\n            return sympy.polys.domains.QQ_I\n        if domain == 'EX':\n            return sympy.polys.domains.EX\n        r = cls._re_realfield.match(domain)\n        if r is not None:\n            _, _, prec = r.groups()\n            if prec is None:\n                return sympy.polys.domains.RR\n            else:\n                return sympy.polys.domains.RealField(int(prec))\n        r = cls._re_complexfield.match(domain)\n        if r is not None:\n            _, _, prec = r.groups()\n            if prec is None:\n                return sympy.polys.domains.CC\n            else:\n                return sympy.polys.domains.ComplexField(int(prec))\n        r = cls._re_finitefield.match(domain)\n        if r is not None:\n            return sympy.polys.domains.FF(int(r.groups()[1]))\n        r = cls._re_polynomial.match(domain)\n        if r is not None:\n            ground, gens = r.groups()\n            gens = list(map(sympify, gens.split(',')))\n            if ground in ['Z', 'ZZ']:\n                return sympy.polys.domains.ZZ.poly_ring(*gens)\n            elif ground in ['Q', 'QQ']:\n                return sympy.polys.domains.QQ.poly_ring(*gens)\n            elif ground in ['R', 'RR']:\n                return sympy.polys.domains.RR.poly_ring(*gens)\n            elif ground == 'ZZ_I':\n                return sympy.polys.domains.ZZ_I.poly_ring(*gens)\n            elif ground == 'QQ_I':\n                return sympy.polys.domains.QQ_I.poly_ring(*gens)\n            else:\n                return sympy.polys.domains.CC.poly_ring(*gens)\n        r = cls._re_fraction.match(domain)\n        if r is not None:\n            ground, gens = r.groups()\n            gens = list(map(sympify, gens.split(',')))\n            if ground in ['Z', 'ZZ']:\n                return sympy.polys.domains.ZZ.frac_field(*gens)\n            else:\n                return sympy.polys.domains.QQ.frac_field(*gens)\n        r = cls._re_algebraic.match(domain)\n        if r is not None:\n            gens = list(map(sympify, r.groups()[1].split(',')))\n            return sympy.polys.domains.QQ.algebraic_field(*gens)\n    raise OptionError('expected a valid domain specification, got %s' % domain)",
    ".sympy.polys.polyoptions.py@@Order.preprocess": "def preprocess(cls, order):\n    return sympy.polys.orderings.monomial_key(order)",
    ".sympy.polys.orderings.py@@monomial_key": "def monomial_key(order=None, gens=None):\n    if order is None:\n        order = lex\n    if isinstance(order, Symbol):\n        order = str(order)\n    if isinstance(order, str):\n        try:\n            order = _monomial_key[order]\n        except KeyError:\n            raise ValueError(\"supported monomial orderings are 'lex', 'grlex' and 'grevlex', got %r\" % order)\n    if hasattr(order, '__call__'):\n        if gens is not None:\n\n            def _order(expr):\n                return order(expr.as_poly(*gens).degree_list())\n            return _order\n        return order\n    else:\n        raise ValueError('monomial ordering specification must be a string or a callable, got %s' % order)",
    ".sympy.polys.domains.domain.py@@Domain.__hash__": "def __hash__(self):\n    return hash((self.__class__.__name__, self.dtype))",
    ".sympy.polys.orderings.py@@MonomialOrder.__hash__": "def __hash__(self):\n    return hash(self.__class__)",
    ".sympy.polys.rings.py@@PolyRing._gens": "def _gens(self):\n    one = self.domain.one\n    _gens = []\n    for i in range(self.ngens):\n        expv = self.monomial_basis(i)\n        poly = self.zero\n        poly[expv] = one\n        _gens.append(poly)\n    return tuple(_gens)",
    ".sympy.polys.rings.py@@PolyRing.monomial_basis": "def monomial_basis(self, i):\n    basis = [0] * self.ngens\n    basis[i] = 1\n    return tuple(basis)",
    ".sympy.polys.rings.py@@PolyRing.zero": "def zero(self):\n    return self.dtype()",
    ".sympy.polys.rings.py@@PolyElement.__hash__": "def __hash__(self):\n    _hash = self._hash\n    if _hash is None:\n        self._hash = _hash = hash((self.ring, frozenset(self.items())))\n    return _hash",
    ".sympy.polys.rings.py@@PolyRing.__hash__": "def __hash__(self):\n    return self._hash",
    ".sympy.polys.monomials.py@@MonomialOps.__init__": "def __init__(self, ngens):\n    self.ngens = ngens",
    ".sympy.polys.monomials.py@@MonomialOps.mul": "def mul(self):\n    name = 'monomial_mul'\n    template = dedent('    def %(name)s(A, B):\\n        (%(A)s,) = A\\n        (%(B)s,) = B\\n        return (%(AB)s,)\\n    ')\n    A = self._vars('a')\n    B = self._vars('b')\n    AB = ['%s + %s' % (a, b) for a, b in zip(A, B)]\n    code = template % dict(name=name, A=', '.join(A), B=', '.join(B), AB=', '.join(AB))\n    return self._build(code, name)",
    ".sympy.polys.monomials.py@@MonomialOps._vars": "def _vars(self, name):\n    return ['%s%s' % (name, i) for i in range(self.ngens)]",
    ".sympy.polys.monomials.py@@MonomialOps._build": "def _build(self, code, name):\n    ns = {}\n    exec(code, ns)\n    return ns[name]",
    ".sympy.polys.monomials.py@@MonomialOps.pow": "def pow(self):\n    name = 'monomial_pow'\n    template = dedent('    def %(name)s(A, k):\\n        (%(A)s,) = A\\n        return (%(Ak)s,)\\n    ')\n    A = self._vars('a')\n    Ak = ['%s*k' % a for a in A]\n    code = template % dict(name=name, A=', '.join(A), Ak=', '.join(Ak))\n    return self._build(code, name)",
    ".sympy.polys.monomials.py@@MonomialOps.mulpow": "def mulpow(self):\n    name = 'monomial_mulpow'\n    template = dedent('    def %(name)s(A, B, k):\\n        (%(A)s,) = A\\n        (%(B)s,) = B\\n        return (%(ABk)s,)\\n    ')\n    A = self._vars('a')\n    B = self._vars('b')\n    ABk = ['%s + %s*k' % (a, b) for a, b in zip(A, B)]\n    code = template % dict(name=name, A=', '.join(A), B=', '.join(B), ABk=', '.join(ABk))\n    return self._build(code, name)",
    ".sympy.polys.monomials.py@@MonomialOps.ldiv": "def ldiv(self):\n    name = 'monomial_ldiv'\n    template = dedent('    def %(name)s(A, B):\\n        (%(A)s,) = A\\n        (%(B)s,) = B\\n        return (%(AB)s,)\\n    ')\n    A = self._vars('a')\n    B = self._vars('b')\n    AB = ['%s - %s' % (a, b) for a, b in zip(A, B)]\n    code = template % dict(name=name, A=', '.join(A), B=', '.join(B), AB=', '.join(AB))\n    return self._build(code, name)",
    ".sympy.polys.monomials.py@@MonomialOps.div": "def div(self):\n    name = 'monomial_div'\n    template = dedent('    def %(name)s(A, B):\\n        (%(A)s,) = A\\n        (%(B)s,) = B\\n        %(RAB)s\\n        return (%(R)s,)\\n    ')\n    A = self._vars('a')\n    B = self._vars('b')\n    RAB = ['r%(i)s = a%(i)s - b%(i)s\\n    if r%(i)s < 0: return None' % dict(i=i) for i in range(self.ngens)]\n    R = self._vars('r')\n    code = template % dict(name=name, A=', '.join(A), B=', '.join(B), RAB='\\n    '.join(RAB), R=', '.join(R))\n    return self._build(code, name)",
    ".sympy.polys.monomials.py@@MonomialOps.lcm": "def lcm(self):\n    name = 'monomial_lcm'\n    template = dedent('    def %(name)s(A, B):\\n        (%(A)s,) = A\\n        (%(B)s,) = B\\n        return (%(AB)s,)\\n    ')\n    A = self._vars('a')\n    B = self._vars('b')\n    AB = ['%s if %s >= %s else %s' % (a, a, b, b) for a, b in zip(A, B)]\n    code = template % dict(name=name, A=', '.join(A), B=', '.join(B), AB=', '.join(AB))\n    return self._build(code, name)",
    ".sympy.polys.monomials.py@@MonomialOps.gcd": "def gcd(self):\n    name = 'monomial_gcd'\n    template = dedent('    def %(name)s(A, B):\\n        (%(A)s,) = A\\n        (%(B)s,) = B\\n        return (%(AB)s,)\\n    ')\n    A = self._vars('a')\n    B = self._vars('b')\n    AB = ['%s if %s <= %s else %s' % (a, a, b, b) for a, b in zip(A, B)]\n    code = template % dict(name=name, A=', '.join(A), B=', '.join(B), AB=', '.join(AB))\n    return self._build(code, name)",
    ".sympy.polys.rings.py@@PolyRing.from_dict": "def from_dict(self, element, orig_domain=None):\n    domain_new = self.domain_new\n    poly = self.zero\n    for monom, coeff in element.items():\n        coeff = domain_new(coeff, orig_domain)\n        if coeff:\n            poly[monom] = coeff\n    return poly",
    ".sympy.polys.rings.py@@PolyRing.domain_new": "def domain_new(self, element, orig_domain=None):\n    return self.domain.convert(element, orig_domain)",
    ".sympy.polys.domains.domain.py@@Domain.convert": "def convert(self, element, base=None):\n    if base is not None:\n        if _not_a_coeff(element):\n            raise CoercionFailed('%s is not in any domain' % element)\n        return self.convert_from(element, base)\n    if self.of_type(element):\n        return element\n    if _not_a_coeff(element):\n        raise CoercionFailed('%s is not in any domain' % element)\n    from sympy.polys.domains import ZZ, QQ, RealField, ComplexField\n    if ZZ.of_type(element):\n        return self.convert_from(element, ZZ)\n    if isinstance(element, int):\n        return self.convert_from(ZZ(element), ZZ)\n    if HAS_GMPY:\n        integers = ZZ\n        if isinstance(element, integers.tp):\n            return self.convert_from(element, integers)\n        rationals = QQ\n        if isinstance(element, rationals.tp):\n            return self.convert_from(element, rationals)\n    if isinstance(element, float):\n        parent = RealField(tol=False)\n        return self.convert_from(parent(element), parent)\n    if isinstance(element, complex):\n        parent = ComplexField(tol=False)\n        return self.convert_from(parent(element), parent)\n    if isinstance(element, DomainElement):\n        return self.convert_from(element, element.parent())\n    if self.is_Numerical and getattr(element, 'is_ground', False):\n        return self.convert(element.LC())\n    if isinstance(element, Basic):\n        try:\n            return self.from_sympy(element)\n        except (TypeError, ValueError):\n            pass\n    elif not is_sequence(element):\n        try:\n            element = sympify(element, strict=True)\n            if isinstance(element, Basic):\n                return self.from_sympy(element)\n        except (TypeError, ValueError):\n            pass\n    raise CoercionFailed('Cannot convert %s of type %s to %s' % (element, type(element), self))",
    ".sympy.polys.domains.domain.py@@Domain.of_type": "def of_type(self, element):\n    return isinstance(element, self.tp)",
    ".sympy.polys.rings.py@@PolyElement.cancel": "def cancel(self, g):\n    f = self\n    ring = f.ring\n    if not f:\n        return (f, ring.one)\n    domain = ring.domain\n    if not (domain.is_Field and domain.has_assoc_Ring):\n        _, p, q = f.cofactors(g)\n    else:\n        new_ring = ring.clone(domain=domain.get_ring())\n        cq, f = f.clear_denoms()\n        cp, g = g.clear_denoms()\n        f = f.set_ring(new_ring)\n        g = g.set_ring(new_ring)\n        _, p, q = f.cofactors(g)\n        _, cp, cq = new_ring.domain.cofactors(cp, cq)\n        p = p.set_ring(ring)\n        q = q.set_ring(ring)\n        p = p.mul_ground(cp)\n        q = q.mul_ground(cq)\n    u = q.canonical_unit()\n    if u == domain.one:\n        p, q = (p, q)\n    elif u == -domain.one:\n        p, q = (-p, -q)\n    else:\n        p = p.mul_ground(u)\n        q = q.mul_ground(u)\n    return (p, q)",
    ".sympy.polys.rings.py@@PolyElement.cofactors": "def cofactors(f, g):\n    if not f and (not g):\n        zero = f.ring.zero\n        return (zero, zero, zero)\n    elif not f:\n        h, cff, cfg = f._gcd_zero(g)\n        return (h, cff, cfg)\n    elif not g:\n        h, cfg, cff = g._gcd_zero(f)\n        return (h, cff, cfg)\n    elif len(f) == 1:\n        h, cff, cfg = f._gcd_monom(g)\n        return (h, cff, cfg)\n    elif len(g) == 1:\n        h, cfg, cff = g._gcd_monom(f)\n        return (h, cff, cfg)\n    J, (f, g) = f.deflate(g)\n    h, cff, cfg = f._gcd(g)\n    return (h.inflate(J), cff.inflate(J), cfg.inflate(J))",
    ".sympy.polys.rings.py@@PolyElement._gcd_monom": "def _gcd_monom(f, g):\n    ring = f.ring\n    ground_gcd = ring.domain.gcd\n    ground_quo = ring.domain.quo\n    monomial_gcd = ring.monomial_gcd\n    monomial_ldiv = ring.monomial_ldiv\n    mf, cf = list(f.iterterms())[0]\n    _mgcd, _cgcd = (mf, cf)\n    for mg, cg in g.iterterms():\n        _mgcd = monomial_gcd(_mgcd, mg)\n        _cgcd = ground_gcd(_cgcd, cg)\n    h = f.new([(_mgcd, _cgcd)])\n    cff = f.new([(monomial_ldiv(mf, _mgcd), ground_quo(cf, _cgcd))])\n    cfg = f.new([(monomial_ldiv(mg, _mgcd), ground_quo(cg, _cgcd)) for mg, cg in g.iterterms()])\n    return (h, cff, cfg)",
    ".sympy.polys.rings.py@@PolyElement.iterterms": "def iterterms(self):\n    return iter(self.items())",
    ".sympy.polys.domains.integerring.py@@IntegerRing.gcd": "def gcd(self, a, b):\n    return gcd(a, b)",
    ".sympy.polys.rings.py@@PolyElement.new": "def new(self, init):\n    return self.__class__(init)",
    ".sympy.polys.domains.ring.py@@Ring.quo": "def quo(self, a, b):\n    return a // b",
    ".sympy.polys.rings.py@@PolyElement.canonical_unit": "def canonical_unit(f):\n    domain = f.ring.domain\n    return domain.canonical_unit(f.LC)",
    ".sympy.polys.rings.py@@PolyElement.LC": "def LC(self):\n    return self._get_coeff(self.leading_expv())",
    ".sympy.polys.rings.py@@PolyElement.leading_expv": "def leading_expv(self):\n    if self:\n        return self.ring.leading_expv(self)\n    else:\n        return None",
    ".sympy.polys.rings.py@@PolyElement._get_coeff": "def _get_coeff(self, expv):\n    return self.get(expv, self.ring.domain.zero)",
    ".sympy.polys.domains.domain.py@@Domain.canonical_unit": "def canonical_unit(self, a):\n    if self.is_negative(a):\n        return -self.one\n    else:\n        return self.one",
    ".sympy.polys.domains.domain.py@@Domain.is_negative": "def is_negative(self, a):\n    return a < 0",
    ".sympy.polys.rings.py@@PolyElement.as_expr": "def as_expr(self, *symbols):\n    if symbols and len(symbols) != self.ring.ngens:\n        raise ValueError('not enough symbols, expected %s got %s' % (self.ring.ngens, len(symbols)))\n    else:\n        symbols = self.ring.symbols\n    return expr_from_dict(self.as_expr_dict(), *symbols)",
    ".sympy.polys.rings.py@@PolyElement.as_expr_dict": "def as_expr_dict(self):\n    to_sympy = self.ring.domain.to_sympy\n    return {monom: to_sympy(coeff) for monom, coeff in self.iterterms()}",
    ".sympy.polys.domains.integerring.py@@IntegerRing.to_sympy": "def to_sympy(self, a):\n    return SymPyInteger(int(a))",
    ".sympy.polys.polyutils.py@@expr_from_dict": "def expr_from_dict(rep, *gens):\n    result = []\n    for monom, coeff in rep.items():\n        term = [coeff]\n        for g, m in zip(gens, monom):\n            if m:\n                term.append(Pow(g, m))\n        result.append(Mul(*term))\n    return Add(*result)",
    ".sympy.core.function.py@@expand_mul": "def expand_mul(expr, deep=True):\n    return sympify(expr).expand(deep=deep, mul=True, power_exp=False, power_base=False, basic=False, multinomial=False, log=False)",
    ".sympy.core.function.py@@Derivative.free_symbols": "def free_symbols(self):\n    ret = self.expr.free_symbols\n    for _, count in self.variable_count:\n        ret.update(count.free_symbols)\n    return ret",
    ".sympy.core.function.py@@Derivative._eval_derivative": "def _eval_derivative(self, v):\n    if v not in self._wrt_variables:\n        dedv = self.expr.diff(v)\n        if isinstance(dedv, Derivative):\n            return dedv.func(dedv.expr, *self.variable_count + dedv.variable_count)\n        return self.func(dedv, *self.variables, evaluate=True)\n    variable_count = list(self.variable_count)\n    variable_count.append((v, 1))\n    return self.func(self.expr, *variable_count, evaluate=False)",
    ".sympy.core.function.py@@Derivative._wrt_variables": "def _wrt_variables(self):\n    return [i[0] for i in self.variable_count]",
    ".sympy.core.mul.py@@Mul._eval_derivative_n_times": "def _eval_derivative_n_times(self, s, n):\n    from .function import AppliedUndef\n    from .symbol import Symbol, symbols, Dummy\n    if not isinstance(s, (AppliedUndef, Symbol)):\n        return super()._eval_derivative_n_times(s, n)\n    from .numbers import Integer\n    args = self.args\n    m = len(args)\n    if isinstance(n, (int, Integer)):\n        terms = []\n        from sympy.ntheory.multinomial import multinomial_coefficients_iterator\n        for kvals, c in multinomial_coefficients_iterator(m, n):\n            p = prod([arg.diff((s, k)) for k, arg in zip(kvals, args)])\n            terms.append(c * p)\n        return Add(*terms)\n    from sympy.concrete.summations import Sum\n    from sympy.functions.combinatorial.factorials import factorial\n    from sympy.functions.elementary.miscellaneous import Max\n    kvals = symbols('k1:%i' % m, cls=Dummy)\n    klast = n - sum(kvals)\n    nfact = factorial(n)\n    e, l = (nfact / prod(map(factorial, kvals)) / factorial(klast) * prod([args[t].diff((s, kvals[t])) for t in range(m - 1)]) * args[-1].diff((s, Max(0, klast))), [(k, 0, n) for k in kvals])\n    return Sum(e, *l)",
    ".sympy.ntheory.multinomial.py@@multinomial_coefficients_iterator": "def multinomial_coefficients_iterator(m, n, _tuple=tuple):\n    m = as_int(m)\n    n = as_int(n)\n    if m < 2 * n or n == 1:\n        mc = multinomial_coefficients(m, n)\n        yield from mc.items()\n    else:\n        mc = multinomial_coefficients(n, n)\n        mc1 = {}\n        for k, v in mc.items():\n            mc1[_tuple(filter(None, k))] = v\n        mc = mc1\n        t = [n] + [0] * (m - 1)\n        t1 = _tuple(t)\n        b = _tuple(filter(None, t1))\n        yield (t1, mc[b])\n        if n:\n            j = 0\n        else:\n            j = m\n        while j < m - 1:\n            tj = t[j]\n            if j:\n                t[j] = 0\n                t[0] = tj\n            if tj > 1:\n                t[j + 1] += 1\n                j = 0\n            else:\n                j += 1\n                t[j] += 1\n            t[0] -= 1\n            t1 = _tuple(t)\n            b = _tuple(filter(None, t1))\n            yield (t1, mc[b])",
    ".sympy.ntheory.multinomial.py@@multinomial_coefficients": "def multinomial_coefficients(m, n):\n    m = as_int(m)\n    n = as_int(n)\n    if not m:\n        if n:\n            return {}\n        return {(): 1}\n    if m == 2:\n        return binomial_coefficients(n)\n    if m >= 2 * n and n > 1:\n        return dict(multinomial_coefficients_iterator(m, n))\n    t = [n] + [0] * (m - 1)\n    r = {tuple(t): 1}\n    if n:\n        j = 0\n    else:\n        j = m\n    while j < m - 1:\n        tj = t[j]\n        if j:\n            t[j] = 0\n            t[0] = tj\n        if tj > 1:\n            t[j + 1] += 1\n            j = 0\n            start = 1\n            v = 0\n        else:\n            j += 1\n            start = j + 1\n            v = r[tuple(t)]\n            t[j] += 1\n        for k in range(start, m):\n            if t[k]:\n                t[k] -= 1\n                v += r[tuple(t)]\n                t[k] += 1\n        t[0] -= 1\n        r[tuple(t)] = v * tj // (n - t[0])\n    return r",
    ".sympy.ntheory.multinomial.py@@binomial_coefficients": "def binomial_coefficients(n):\n    n = as_int(n)\n    d = {(0, n): 1, (n, 0): 1}\n    a = 1\n    for k in range(1, n // 2 + 1):\n        a = a * (n - k + 1) // k\n        d[k, n - k] = d[n - k, k] = a\n    return d",
    ".sympy.core.mul.py@@prod": "def prod(a, start=1):\n    return reduce(operator.mul, a, start)",
    ".sympy.core.numbers.py@@Integer.__rmul__": "def __rmul__(self, other):\n    if global_parameters.evaluate:\n        if isinstance(other, int):\n            return Integer(other * self.p)\n        elif isinstance(other, Rational):\n            return Rational(other.p * self.p, other.q, igcd(self.p, other.q))\n        return Rational.__rmul__(self, other)\n    return Rational.__rmul__(self, other)",
    ".sympy.core.add.py@@Add.__neg__": "def __neg__(self):\n    if not global_parameters.distribute:\n        return super().__neg__()\n    return Add(*[-i for i in self.args])",
    ".sympy.core.mul.py@@Mul._eval_subs": "def _eval_subs(self, old, new):\n    from sympy.functions.elementary.complexes import sign\n    from sympy.ntheory.factor_ import multiplicity\n    from sympy.simplify.powsimp import powdenest\n    from sympy.simplify.radsimp import fraction\n    if not old.is_Mul:\n        return None\n    if old.args[0].is_Number and old.args[0] < 0:\n        if self.args[0].is_Number:\n            if self.args[0] < 0:\n                return self._subs(-old, -new)\n            return None\n\n    def base_exp(a):\n        from sympy.functions.elementary.exponential import exp\n        if a.is_Pow or isinstance(a, exp):\n            return a.as_base_exp()\n        return (a, S.One)\n\n    def breakup(eq):\n        c, nc = (defaultdict(int), list())\n        for a in Mul.make_args(eq):\n            a = powdenest(a)\n            b, e = base_exp(a)\n            if e is not S.One:\n                co, _ = e.as_coeff_mul()\n                b = Pow(b, e / co)\n                e = co\n            if a.is_commutative:\n                c[b] += e\n            else:\n                nc.append([b, e])\n        return (c, nc)\n\n    def rejoin(b, co):\n        b, e = base_exp(b)\n        return Pow(b, e * co)\n\n    def ndiv(a, b):\n        if not b.q % a.q or not a.q % b.q:\n            return int(a / b)\n        return 0\n    rv = None\n    n, d = fraction(self)\n    self2 = self\n    if d is not S.One:\n        self2 = n._subs(old, new) / d._subs(old, new)\n        if not self2.is_Mul:\n            return self2._subs(old, new)\n        if self2 != self:\n            rv = self2\n    co_self = self2.args[0]\n    co_old = old.args[0]\n    co_xmul = None\n    if co_old.is_Rational and co_self.is_Rational:\n        if co_old != co_self:\n            co_xmul = co_self.extract_multiplicatively(co_old)\n    elif co_old.is_Rational:\n        return rv\n    c, nc = breakup(self2)\n    old_c, old_nc = breakup(old)\n    if co_xmul and co_xmul.is_Rational and (abs(co_old) != 1):\n        mult = S(multiplicity(abs(co_old), co_self))\n        c.pop(co_self)\n        if co_old in c:\n            c[co_old] += mult\n        else:\n            c[co_old] = mult\n        co_residual = co_self / co_old ** mult\n    else:\n        co_residual = 1\n    ok = True\n    if len(old_nc) > len(nc):\n        ok = False\n    elif len(old_c) > len(c):\n        ok = False\n    elif {i[0] for i in old_nc}.difference({i[0] for i in nc}):\n        ok = False\n    elif set(old_c).difference(set(c)):\n        ok = False\n    elif any((sign(c[b]) != sign(old_c[b]) for b in old_c)):\n        ok = False\n    if not ok:\n        return rv\n    if not old_c:\n        cdid = None\n    else:\n        rat = []\n        for b, old_e in old_c.items():\n            c_e = c[b]\n            rat.append(ndiv(c_e, old_e))\n            if not rat[-1]:\n                return rv\n        cdid = min(rat)\n    if not old_nc:\n        ncdid = None\n        for i in range(len(nc)):\n            nc[i] = rejoin(*nc[i])\n    else:\n        ncdid = 0\n        take = len(old_nc)\n        limit = cdid or S.Infinity\n        failed = []\n        i = 0\n        while limit and i + take <= len(nc):\n            hit = False\n            rat = []\n            for j in range(take):\n                if nc[i + j][0] != old_nc[j][0]:\n                    break\n                elif j == 0:\n                    rat.append(ndiv(nc[i + j][1], old_nc[j][1]))\n                elif j == take - 1:\n                    rat.append(ndiv(nc[i + j][1], old_nc[j][1]))\n                elif nc[i + j][1] != old_nc[j][1]:\n                    break\n                else:\n                    rat.append(1)\n                j += 1\n            else:\n                ndo = min(rat)\n                if ndo:\n                    if take == 1:\n                        if cdid:\n                            ndo = min(cdid, ndo)\n                        nc[i] = Pow(new, ndo) * rejoin(nc[i][0], nc[i][1] - ndo * old_nc[0][1])\n                    else:\n                        ndo = 1\n                        l = rejoin(nc[i][0], nc[i][1] - ndo * old_nc[0][1])\n                        mid = new\n                        ir = i + take - 1\n                        r = (nc[ir][0], nc[ir][1] - ndo * old_nc[-1][1])\n                        if r[1]:\n                            if i + take < len(nc):\n                                nc[i:i + take] = [l * mid, r]\n                            else:\n                                r = rejoin(*r)\n                                nc[i:i + take] = [l * mid * r]\n                        else:\n                            nc[i:i + take] = [l * mid]\n                    limit -= ndo\n                    ncdid += ndo\n                    hit = True\n            if not hit:\n                failed.append(i)\n            i += 1\n        else:\n            if not ncdid:\n                return rv\n            failed.extend(range(i, len(nc)))\n            for i in failed:\n                nc[i] = rejoin(*nc[i]).subs(old, new)\n    if cdid is None:\n        do = ncdid\n    elif ncdid is None:\n        do = cdid\n    else:\n        do = min(ncdid, cdid)\n    margs = []\n    for b in c:\n        if b in old_c:\n            e = c[b] - old_c[b] * do\n            margs.append(rejoin(b, e))\n        else:\n            margs.append(rejoin(b.subs(old, new), c[b]))\n    if cdid and (not ncdid):\n        margs = [Pow(new, cdid)] + margs\n    return co_residual * self2.func(*margs) * self2.func(*nc)",
    ".sympy.core.function.py@@Application._eval_subs": "def _eval_subs(self, old, new):\n    if old.is_Function and new.is_Function and callable(old) and callable(new) and (old == self.func) and (len(self.args) in new.nargs):\n        return new(*[i._subs(old, new) for i in self.args])",
    ".sympy.core.containers.py@@Tuple.__ne__": "def __ne__(self, other):\n    if isinstance(other, Basic):\n        return super().__ne__(other)\n    return self.args != other",
    ".sympy.core.add.py@@Add.could_extract_minus_sign": "def could_extract_minus_sign(self):\n    return _could_extract_minus_sign(self)",
    ".sympy.core.add.py@@_could_extract_minus_sign": "def _could_extract_minus_sign(expr):\n    negative_args = sum((1 for i in expr.args if i.could_extract_minus_sign()))\n    positive_args = len(expr.args) - negative_args\n    if positive_args > negative_args:\n        return False\n    elif positive_args < negative_args:\n        return True\n    return bool(expr.sort_key() < (-expr).sort_key())",
    ".sympy.core.mul.py@@Mul.could_extract_minus_sign": "def could_extract_minus_sign(self):\n    if self == -self:\n        return False\n    c = self.args[0]\n    return c.is_Number and c.is_extended_negative",
    ".sympy.core.expr.py@@Expr.sort_key": "def sort_key(self, order=None):\n    coeff, expr = self.as_coeff_Mul()\n    if expr.is_Pow:\n        if expr.base is S.Exp1:\n            expr, exp = (Function('exp')(expr.exp), S.One)\n        else:\n            expr, exp = expr.args\n    else:\n        exp = S.One\n    if expr.is_Dummy:\n        args = (expr.sort_key(),)\n    elif expr.is_Atom:\n        args = (str(expr),)\n    else:\n        if expr.is_Add:\n            args = expr.as_ordered_terms(order=order)\n        elif expr.is_Mul:\n            args = expr.as_ordered_factors(order=order)\n        else:\n            args = expr.args\n        args = tuple([default_sort_key(arg, order=order) for arg in args])\n    args = (len(args), tuple(args))\n    exp = exp.sort_key(order=order)\n    return (expr.class_key(), args, exp, coeff)",
    ".sympy.core.expr.py@@Expr.as_ordered_terms": "def as_ordered_terms(self, order=None, data=False):\n    from .numbers import Number, NumberSymbol\n    if order is None and self.is_Add:\n        key = lambda x: not isinstance(x, (Number, NumberSymbol))\n        add_args = sorted(Add.make_args(self), key=key)\n        if len(add_args) == 2 and isinstance(add_args[0], (Number, NumberSymbol)) and isinstance(add_args[1], Mul):\n            mul_args = sorted(Mul.make_args(add_args[1]), key=key)\n            if len(mul_args) == 2 and isinstance(mul_args[0], Number) and add_args[0].is_positive and mul_args[0].is_negative:\n                return add_args\n    key, reverse = self._parse_order(order)\n    terms, gens = self.as_terms()\n    if not any((term.is_Order for term, _ in terms)):\n        ordered = sorted(terms, key=key, reverse=reverse)\n    else:\n        _terms, _order = ([], [])\n        for term, repr in terms:\n            if not term.is_Order:\n                _terms.append((term, repr))\n            else:\n                _order.append((term, repr))\n        ordered = sorted(_terms, key=key, reverse=True) + sorted(_order, key=key, reverse=True)\n    if data:\n        return (ordered, gens)\n    else:\n        return [term for term, _ in ordered]",
    ".sympy.core.expr.py@@Expr._parse_order": "def _parse_order(cls, order):\n    from sympy.polys.orderings import monomial_key\n    startswith = getattr(order, 'startswith', None)\n    if startswith is None:\n        reverse = False\n    else:\n        reverse = startswith('rev-')\n        if reverse:\n            order = order[4:]\n    monom_key = monomial_key(order)\n\n    def neg(monom):\n        result = []\n        for m in monom:\n            if isinstance(m, tuple):\n                result.append(neg(m))\n            else:\n                result.append(-m)\n        return tuple(result)\n\n    def key(term):\n        _, ((re, im), monom, ncpart) = term\n        monom = neg(monom_key(monom))\n        ncpart = tuple([e.sort_key(order=order) for e in ncpart])\n        coeff = ((bool(im), im), (re, im))\n        return (monom, ncpart, coeff)\n    return (key, reverse)",
    ".sympy.core.expr.py@@Expr.as_terms": "def as_terms(self):\n    from .exprtools import decompose_power\n    gens, terms = (set(), [])\n    for term in Add.make_args(self):\n        coeff, _term = term.as_coeff_Mul()\n        coeff = complex(coeff)\n        cpart, ncpart = ({}, [])\n        if _term is not S.One:\n            for factor in Mul.make_args(_term):\n                if factor.is_number:\n                    try:\n                        coeff *= complex(factor)\n                    except (TypeError, ValueError):\n                        pass\n                    else:\n                        continue\n                if factor.is_commutative:\n                    base, exp = decompose_power(factor)\n                    cpart[base] = exp\n                    gens.add(base)\n                else:\n                    ncpart.append(factor)\n        coeff = (coeff.real, coeff.imag)\n        ncpart = tuple(ncpart)\n        terms.append((term, (coeff, cpart, ncpart)))\n    gens = sorted(gens, key=default_sort_key)\n    k, indices = (len(gens), {})\n    for i, g in enumerate(gens):\n        indices[g] = i\n    result = []\n    for term, (coeff, cpart, ncpart) in terms:\n        monom = [0] * k\n        for base, exp in cpart.items():\n            monom[indices[base]] = exp\n        result.append((term, (coeff, tuple(monom), ncpart)))\n    return (result, gens)",
    ".sympy.core.expr.py@@Expr.__complex__": "def __complex__(self):\n    result = self.evalf()\n    re, im = result.as_real_imag()\n    return complex(float(re), float(im))",
    ".sympy.core.numbers.py@@Number.__float__": "def __float__(self):\n    return mlib.to_float(self._as_mpf_val(53))",
    ".sympy.core.numbers.py@@Float._as_mpf_val": "def _as_mpf_val(self, prec):\n    rv = mpf_norm(self._mpf_, prec)\n    if rv != self._mpf_ and self._prec == prec:\n        debug(self._mpf_, rv)\n    return rv",
    ".sympy.core.symbol.py@@Symbol.sort_key": "def sort_key(self, order=None):\n    return (self.class_key(), (1, (self.name,)), S.One.sort_key(), S.One)",
    ".sympy.core.basic.py@@Atom.class_key": "def class_key(cls):\n    return (2, 0, cls.__name__)",
    ".sympy.core.expr.py@@Expr.key": "def key(term):\n    _, ((re, im), monom, ncpart) = term\n    monom = neg(monom_key(monom))\n    ncpart = tuple([e.sort_key(order=order) for e in ncpart])\n    coeff = ((bool(im), im), (re, im))\n    return (monom, ncpart, coeff)",
    ".sympy.polys.orderings.py@@LexOrder.__call__": "def __call__(self, monomial):\n    return monomial",
    ".sympy.core.expr.py@@Expr.neg": "def neg(monom):\n    result = []\n    for m in monom:\n        if isinstance(m, tuple):\n            result.append(neg(m))\n        else:\n            result.append(-m)\n    return tuple(result)",
    ".sympy.core.mul.py@@Mul.as_ordered_factors": "def as_ordered_factors(self, order=None):\n    cpart, ncpart = self.args_cnc()\n    cpart.sort(key=lambda expr: expr.sort_key(order=order))\n    return cpart + ncpart",
    ".sympy.core.mul.py@@Mul.class_key": "def class_key(cls):\n    return (3, 0, cls.__name__)",
    ".sympy.core.add.py@@Add.class_key": "def class_key(cls):\n    return (3, 1, cls.__name__)",
    ".sympy.core.expr.py@@Expr.could_extract_minus_sign": "def could_extract_minus_sign(self):\n    return False",
    ".sympy.core.add.py@@Add.as_content_primitive": "def as_content_primitive(self, radical=False, clear=True):\n    con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(radical=radical, clear=clear)) for a in self.args]).primitive()\n    if not clear and (not con.is_Integer) and prim.is_Add:\n        con, d = con.as_numer_denom()\n        _p = prim / d\n        if any((a.as_coeff_Mul()[0].is_Integer for a in _p.args)):\n            prim = _p\n        else:\n            con /= d\n    if radical and prim.is_Add:\n        args = prim.args\n        rads = []\n        common_q = None\n        for m in args:\n            term_rads = defaultdict(list)\n            for ai in Mul.make_args(m):\n                if ai.is_Pow:\n                    b, e = ai.as_base_exp()\n                    if e.is_Rational and b.is_Integer:\n                        term_rads[e.q].append(abs(int(b)) ** e.p)\n            if not term_rads:\n                break\n            if common_q is None:\n                common_q = set(term_rads.keys())\n            else:\n                common_q = common_q & set(term_rads.keys())\n                if not common_q:\n                    break\n            rads.append(term_rads)\n        else:\n            for r in rads:\n                for q in list(r.keys()):\n                    if q not in common_q:\n                        r.pop(q)\n                for q in r:\n                    r[q] = prod(r[q])\n            G = []\n            for q in common_q:\n                g = reduce(igcd, [r[q] for r in rads], 0)\n                if g != 1:\n                    G.append(g ** Rational(1, q))\n            if G:\n                G = Mul(*G)\n                args = [ai / G for ai in args]\n                prim = G * prim.func(*args)\n    return (con, prim)",
    ".sympy.core.add.py@@Add.primitive": "def primitive(self):\n    terms = []\n    inf = False\n    for a in self.args:\n        c, m = a.as_coeff_Mul()\n        if not c.is_Rational:\n            c = S.One\n            m = a\n        inf = inf or m is S.ComplexInfinity\n        terms.append((c.p, c.q, m))\n    if not inf:\n        ngcd = reduce(igcd, [t[0] for t in terms], 0)\n        dlcm = reduce(ilcm, [t[1] for t in terms], 1)\n    else:\n        ngcd = reduce(igcd, [t[0] for t in terms if t[1]], 0)\n        dlcm = reduce(ilcm, [t[1] for t in terms if t[1]], 1)\n    if ngcd == dlcm == 1:\n        return (S.One, self)\n    if not inf:\n        for i, (p, q, term) in enumerate(terms):\n            terms[i] = _keep_coeff(Rational(p // ngcd * (dlcm // q)), term)\n    else:\n        for i, (p, q, term) in enumerate(terms):\n            if q:\n                terms[i] = _keep_coeff(Rational(p // ngcd * (dlcm // q)), term)\n            else:\n                terms[i] = _keep_coeff(Rational(p, q), term)\n    if terms[0].is_Number or terms[0] is S.ComplexInfinity:\n        c = terms.pop(0)\n    else:\n        c = None\n    _addsort(terms)\n    if c:\n        terms.insert(0, c)\n    return (Rational(ngcd, dlcm), self._new_rawargs(*terms))",
    ".sympy.core.numbers.py@@ilcm": "def ilcm(*args):\n    if len(args) < 2:\n        raise TypeError('ilcm() takes at least 2 arguments (%s given)' % len(args))\n    if 0 in args:\n        return 0\n    a = args[0]\n    for b in args[1:]:\n        a = a // igcd(a, b) * b\n    return a",
    ".sympy.core.mul.py@@Mul.as_base_exp": "def as_base_exp(self):\n    e1 = None\n    bases = []\n    nc = 0\n    for m in self.args:\n        b, e = m.as_base_exp()\n        if not b.is_commutative:\n            nc += 1\n        if e1 is None:\n            e1 = e\n        elif e != e1 or nc > 1:\n            return (self, S.One)\n        bases.append(b)\n    return (self.func(*bases), e1)",
    ".sympy.core.exprtools.py@@gcd_terms": "def gcd_terms(terms, isprimitive=False, clear=True, fraction=True):\n\n    def mask(terms):\n        args = [(a, []) if a.is_commutative else a.args_cnc() for a in terms]\n        reps = []\n        for i, (c, nc) in enumerate(args):\n            if nc:\n                nc = Mul(*nc)\n                d = Dummy()\n                reps.append((d, nc))\n                c.append(d)\n                args[i] = Mul(*c)\n            else:\n                args[i] = c\n        return (args, dict(reps))\n    isadd = isinstance(terms, Add)\n    addlike = isadd or (not isinstance(terms, Basic) and is_sequence(terms, include=set) and (not isinstance(terms, Dict)))\n    if addlike:\n        if isadd:\n            terms = list(terms.args)\n        else:\n            terms = sympify(terms)\n        terms, reps = mask(terms)\n        cont, numer, denom = _gcd_terms(terms, isprimitive, fraction)\n        numer = numer.xreplace(reps)\n        coeff, factors = cont.as_coeff_Mul()\n        if not clear:\n            c, _coeff = coeff.as_coeff_Mul()\n            if not c.is_Integer and (not clear) and numer.is_Add:\n                n, d = c.as_numer_denom()\n                _numer = numer / d\n                if any((a.as_coeff_Mul()[0].is_Integer for a in _numer.args)):\n                    numer = _numer\n                    coeff = n * _coeff\n        return _keep_coeff(coeff, factors * numer / denom, clear=clear)\n    if not isinstance(terms, Basic):\n        return terms\n    if terms.is_Atom:\n        return terms\n    if terms.is_Mul:\n        c, args = terms.as_coeff_mul()\n        return _keep_coeff(c, Mul(*[gcd_terms(i, isprimitive, clear, fraction) for i in args]), clear=clear)\n\n    def handle(a):\n        if not isinstance(a, Expr):\n            if isinstance(a, Basic):\n                if not a.args:\n                    return a\n                return a.func(*[handle(i) for i in a.args])\n            return type(a)([handle(i) for i in a])\n        return gcd_terms(a, isprimitive, clear, fraction)\n    if isinstance(terms, Dict):\n        return Dict(*[(k, handle(v)) for k, v in terms.args])\n    return terms.func(*[handle(i) for i in terms.args])",
    ".sympy.core.exprtools.py@@mask": "def mask(terms):\n    args = [(a, []) if a.is_commutative else a.args_cnc() for a in terms]\n    reps = []\n    for i, (c, nc) in enumerate(args):\n        if nc:\n            nc = Mul(*nc)\n            d = Dummy()\n            reps.append((d, nc))\n            c.append(d)\n            args[i] = Mul(*c)\n        else:\n            args[i] = c\n    return (args, dict(reps))",
    ".sympy.core.exprtools.py@@_gcd_terms": "def _gcd_terms(terms, isprimitive=False, fraction=True):\n    if isinstance(terms, Basic) and (not isinstance(terms, Tuple)):\n        terms = Add.make_args(terms)\n    terms = list(map(Term, [t for t in terms if t]))\n    if len(terms) == 0:\n        return (S.Zero, S.Zero, S.One)\n    if len(terms) == 1:\n        cont = terms[0].coeff\n        numer = terms[0].numer.as_expr()\n        denom = terms[0].denom.as_expr()\n    else:\n        cont = terms[0]\n        for term in terms[1:]:\n            cont = cont.gcd(term)\n        for i, term in enumerate(terms):\n            terms[i] = term.quo(cont)\n        if fraction:\n            denom = terms[0].denom\n            for term in terms[1:]:\n                denom = denom.lcm(term.denom)\n            numers = []\n            for term in terms:\n                numer = term.numer.mul(denom.quo(term.denom))\n                numers.append(term.coeff * numer.as_expr())\n        else:\n            numers = [t.as_expr() for t in terms]\n            denom = Term(S.One).numer\n        cont = cont.as_expr()\n        numer = Add(*numers)\n        denom = denom.as_expr()\n    if not isprimitive and numer.is_Add:\n        _cont, numer = numer.primitive()\n        cont *= _cont\n    return (cont, numer, denom)",
    ".sympy.core.exprtools.py@@Term.__init__": "def __init__(self, term, numer=None, denom=None):\n    if numer is None and denom is None:\n        if not term.is_commutative:\n            raise NonCommutativeExpression('commutative expression expected')\n        coeff, factors = term.as_coeff_mul()\n        numer, denom = (defaultdict(int), defaultdict(int))\n        for factor in factors:\n            base, exp = decompose_power(factor)\n            if base.is_Add:\n                cont, base = base.primitive()\n                coeff *= cont ** exp\n            if exp > 0:\n                numer[base] += exp\n            else:\n                denom[base] += -exp\n        numer = Factors(numer)\n        denom = Factors(denom)\n    else:\n        coeff = term\n        if numer is None:\n            numer = Factors()\n        if denom is None:\n            denom = Factors()\n    self.coeff = coeff\n    self.numer = numer\n    self.denom = denom",
    ".sympy.core.expr.py@@Expr.as_coeff_mul": "def as_coeff_mul(self, *deps, **kwargs) -> tuple[Expr, tuple[Expr, ...]]:\n    if deps:\n        if not self.has(*deps):\n            return (self, tuple())\n    return (S.One, (self,))",
    ".sympy.core.exprtools.py@@Factors.__init__": "def __init__(self, factors=None):\n    if isinstance(factors, (SYMPY_INTS, float)):\n        factors = S(factors)\n    if isinstance(factors, Factors):\n        factors = factors.factors.copy()\n    elif factors in (None, S.One):\n        factors = {}\n    elif factors is S.Zero or factors == 0:\n        factors = {S.Zero: S.One}\n    elif isinstance(factors, Number):\n        n = factors\n        factors = {}\n        if n < 0:\n            factors[S.NegativeOne] = S.One\n            n = -n\n        if n is not S.One:\n            if n.is_Float or n.is_Integer or n is S.Infinity:\n                factors[n] = S.One\n            elif n.is_Rational:\n                if n.p != 1:\n                    factors[Integer(n.p)] = S.One\n                factors[Integer(n.q)] = S.NegativeOne\n            else:\n                raise ValueError('Expected Float|Rational|Integer, not %s' % n)\n    elif isinstance(factors, Basic) and (not factors.args):\n        factors = {factors: S.One}\n    elif isinstance(factors, Expr):\n        c, nc = factors.args_cnc()\n        i = c.count(I)\n        for _ in range(i):\n            c.remove(I)\n        factors = dict(Mul._from_args(c).as_powers_dict())\n        for f in list(factors.keys()):\n            if isinstance(f, Rational) and (not isinstance(f, Integer)):\n                p, q = (Integer(f.p), Integer(f.q))\n                factors[p] = (factors[p] if p in factors else S.Zero) + factors[f]\n                factors[q] = (factors[q] if q in factors else S.Zero) - factors[f]\n                factors.pop(f)\n        if i:\n            factors[I] = factors.get(I, S.Zero) + i\n        if nc:\n            factors[Mul(*nc, evaluate=False)] = S.One\n    else:\n        factors = factors.copy()\n        handle = []\n        for k in factors:\n            if k is I or k in (-1, 1):\n                handle.append(k)\n        if handle:\n            i1 = S.One\n            for k in handle:\n                if not _isnumber(factors[k]):\n                    continue\n                i1 *= k ** factors.pop(k)\n            if i1 is not S.One:\n                for a in i1.args if i1.is_Mul else [i1]:\n                    if a is S.NegativeOne:\n                        factors[a] = S.One\n                    elif a is I:\n                        factors[I] = S.One\n                    elif a.is_Pow:\n                        factors[a.base] = factors.get(a.base, S.Zero) + a.exp\n                    elif a == 1:\n                        factors[a] = S.One\n                    elif a == -1:\n                        factors[-a] = S.One\n                        factors[S.NegativeOne] = S.One\n                    else:\n                        raise ValueError('unexpected factor in i1: %s' % a)\n    self.factors = factors\n    keys = getattr(factors, 'keys', None)\n    if keys is None:\n        raise TypeError('expecting Expr or dictionary')\n    self.gens = frozenset(keys())",
    ".sympy.core.containers.py@@Dict.__new__": "def __new__(cls, *args):\n    if len(args) == 1 and isinstance(args[0], (dict, Dict)):\n        items = [Tuple(k, v) for k, v in args[0].items()]\n    elif iterable(args) and all((len(arg) == 2 for arg in args)):\n        items = [Tuple(k, v) for k, v in args]\n    else:\n        raise TypeError('Pass Dict args as Dict((k1, v1), ...) or Dict({k1: v1, ...})')\n    elements = frozenset(items)\n    obj = Basic.__new__(cls, *ordered(items))\n    obj.elements = elements\n    obj._dict = dict(items)\n    return obj",
    ".sympy.core.exprtools.py@@Term.gcd": "def gcd(self, other):\n    return Term(self.coeff.gcd(other.coeff), self.numer.gcd(other.numer), self.denom.gcd(other.denom))",
    ".sympy.core.numbers.py@@Rational.gcd": "def gcd(self, other):\n    if isinstance(other, Rational):\n        if other == S.Zero:\n            return other\n        return Rational(igcd(self.p, other.p), ilcm(self.q, other.q))\n    return Number.gcd(self, other)",
    ".sympy.core.exprtools.py@@Factors.gcd": "def gcd(self, other):\n    if not isinstance(other, Factors):\n        other = Factors(other)\n        if other.is_zero:\n            return Factors(self.factors)\n    factors = {}\n    for factor, exp in self.factors.items():\n        factor, exp = (sympify(factor), sympify(exp))\n        if factor in other.factors:\n            lt = (exp - other.factors[factor]).is_negative\n            if lt == True:\n                factors[factor] = exp\n            elif lt == False:\n                factors[factor] = other.factors[factor]\n    return Factors(factors)",
    ".sympy.core.exprtools.py@@Term.quo": "def quo(self, other):\n    return self.mul(other.inv())",
    ".sympy.core.exprtools.py@@Term.inv": "def inv(self):\n    return Term(1 / self.coeff, self.denom, self.numer)",
    ".sympy.core.numbers.py@@Rational.__rtruediv__": "def __rtruediv__(self, other):\n    if global_parameters.evaluate:\n        if isinstance(other, Integer):\n            return Rational(other.p * self.q, self.p, igcd(self.p, other.p))\n        elif isinstance(other, Rational):\n            return Rational(other.p * self.q, other.q * self.p, igcd(self.p, other.p) * igcd(self.q, other.q))\n        elif isinstance(other, Float):\n            return other * (1 / self)\n        else:\n            return Number.__rtruediv__(self, other)\n    return Number.__rtruediv__(self, other)",
    ".sympy.core.exprtools.py@@Term.mul": "def mul(self, other):\n    coeff = self.coeff * other.coeff\n    numer = self.numer.mul(other.numer)\n    denom = self.denom.mul(other.denom)\n    numer, denom = numer.normal(denom)\n    return Term(coeff, numer, denom)",
    ".sympy.core.exprtools.py@@Factors.mul": "def mul(self, other):\n    if not isinstance(other, Factors):\n        other = Factors(other)\n    if any((f.is_zero for f in (self, other))):\n        return Factors(S.Zero)\n    factors = dict(self.factors)\n    for factor, exp in other.factors.items():\n        if factor in factors:\n            exp = factors[factor] + exp\n            if not exp:\n                del factors[factor]\n                continue\n        factors[factor] = exp\n    return Factors(factors)",
    ".sympy.core.exprtools.py@@Factors.is_zero": "def is_zero(self):\n    f = self.factors\n    return len(f) == 1 and S.Zero in f",
    ".sympy.core.exprtools.py@@Factors.normal": "def normal(self, other):\n    if not isinstance(other, Factors):\n        other = Factors(other)\n        if other.is_zero:\n            return (Factors(), Factors(S.Zero))\n        if self.is_zero:\n            return (Factors(S.Zero), Factors())\n    self_factors = dict(self.factors)\n    other_factors = dict(other.factors)\n    for factor, self_exp in self.factors.items():\n        try:\n            other_exp = other.factors[factor]\n        except KeyError:\n            continue\n        exp = self_exp - other_exp\n        if not exp:\n            del self_factors[factor]\n            del other_factors[factor]\n        elif _isnumber(exp):\n            if exp > 0:\n                self_factors[factor] = exp\n                del other_factors[factor]\n            else:\n                del self_factors[factor]\n                other_factors[factor] = -exp\n        else:\n            r = self_exp.extract_additively(other_exp)\n            if r is not None:\n                if r:\n                    self_factors[factor] = r\n                    del other_factors[factor]\n                else:\n                    del self_factors[factor]\n                    del other_factors[factor]\n            else:\n                sc, sa = self_exp.as_coeff_Add()\n                if sc:\n                    oc, oa = other_exp.as_coeff_Add()\n                    diff = sc - oc\n                    if diff > 0:\n                        self_factors[factor] -= oc\n                        other_exp = oa\n                    elif diff < 0:\n                        self_factors[factor] -= sc\n                        other_factors[factor] -= sc\n                        other_exp = oa - diff\n                    else:\n                        self_factors[factor] = sa\n                        other_exp = oa\n                if other_exp:\n                    other_factors[factor] = other_exp\n                else:\n                    del other_factors[factor]\n    return (Factors(self_factors), Factors(other_factors))",
    ".sympy.core.exprtools.py@@_isnumber": "def _isnumber(i):\n    return isinstance(i, (SYMPY_INTS, float)) or i.is_Number",
    ".sympy.core.exprtools.py@@Term.as_expr": "def as_expr(self):\n    return self.coeff * (self.numer.as_expr() / self.denom.as_expr())",
    ".sympy.core.exprtools.py@@Factors.as_expr": "def as_expr(self):\n    args = []\n    for factor, exp in self.factors.items():\n        if exp != 1:\n            if isinstance(exp, Integer):\n                b, e = factor.as_base_exp()\n                e = _keep_coeff(exp, e)\n                args.append(b ** e)\n            else:\n                args.append(factor ** exp)\n        else:\n            args.append(factor)\n    return Mul(*args)",
    ".sympy.core.numbers.py@@Number.as_coeff_mul": "def as_coeff_mul(self, *deps, rational=True, **kwargs):\n    if self.is_Rational or not rational:\n        return (self, tuple())\n    elif self.is_negative:\n        return (S.NegativeOne, (-self,))\n    return (S.One, (self,))",
    ".sympy.core.add.py@@Add.as_numer_denom": "def as_numer_denom(self):\n    content, expr = self.primitive()\n    if not isinstance(expr, Add):\n        return Mul(content, expr, evaluate=False).as_numer_denom()\n    ncon, dcon = content.as_numer_denom()\n    nd = defaultdict(list)\n    for f in expr.args:\n        ni, di = f.as_numer_denom()\n        nd[di].append(ni)\n    if len(nd) == 1:\n        d, n = nd.popitem()\n        return (self.func(*[_keep_coeff(ncon, ni) for ni in n]), _keep_coeff(dcon, d))\n    for d, n in nd.items():\n        if len(n) == 1:\n            nd[d] = n[0]\n        else:\n            nd[d] = self.func(*n)\n    denoms, numers = [list(i) for i in zip(*iter(nd.items()))]\n    n, d = (self.func(*[Mul(*denoms[:i] + [numers[i]] + denoms[i + 1:]) for i in range(len(numers))]), Mul(*denoms))\n    return (_keep_coeff(ncon, n), _keep_coeff(dcon, d))",
    ".sympy.core.power.py@@Pow._eval_expand_multinomial": "def _eval_expand_multinomial(self, **hints):\n    base, exp = self.args\n    result = self\n    if exp.is_Rational and exp.p > 0 and base.is_Add:\n        if not exp.is_Integer:\n            n = Integer(exp.p // exp.q)\n            if not n:\n                return result\n            else:\n                radical, result = (self.func(base, exp - n), [])\n                expanded_base_n = self.func(base, n)\n                if expanded_base_n.is_Pow:\n                    expanded_base_n = expanded_base_n._eval_expand_multinomial()\n                for term in Add.make_args(expanded_base_n):\n                    result.append(term * radical)\n                return Add(*result)\n        n = int(exp)\n        if base.is_commutative:\n            order_terms, other_terms = ([], [])\n            for b in base.args:\n                if b.is_Order:\n                    order_terms.append(b)\n                else:\n                    other_terms.append(b)\n            if order_terms:\n                f = Add(*other_terms)\n                o = Add(*order_terms)\n                if n == 2:\n                    return expand_multinomial(f ** n, deep=False) + n * f * o\n                else:\n                    g = expand_multinomial(f ** (n - 1), deep=False)\n                    return expand_mul(f * g, deep=False) + n * g * o\n            if base.is_number:\n                a, b = base.as_real_imag()\n                if a.is_Rational and b.is_Rational:\n                    if not a.is_Integer:\n                        if not b.is_Integer:\n                            k = self.func(a.q * b.q, n)\n                            a, b = (a.p * b.q, a.q * b.p)\n                        else:\n                            k = self.func(a.q, n)\n                            a, b = (a.p, a.q * b)\n                    elif not b.is_Integer:\n                        k = self.func(b.q, n)\n                        a, b = (a * b.q, b.p)\n                    else:\n                        k = 1\n                    a, b, c, d = (int(a), int(b), 1, 0)\n                    while n:\n                        if n & 1:\n                            c, d = (a * c - b * d, b * c + a * d)\n                            n -= 1\n                        a, b = (a * a - b * b, 2 * a * b)\n                        n //= 2\n                    I = S.ImaginaryUnit\n                    if k == 1:\n                        return c + I * d\n                    else:\n                        return Integer(c) / k + I * d / k\n            p = other_terms\n            from sympy.ntheory.multinomial import multinomial_coefficients\n            from sympy.polys.polyutils import basic_from_dict\n            expansion_dict = multinomial_coefficients(len(p), n)\n            return basic_from_dict(expansion_dict, *p)\n        elif n == 2:\n            return Add(*[f * g for f in base.args for g in base.args])\n        else:\n            multi = (base ** (n - 1))._eval_expand_multinomial()\n            if multi.is_Add:\n                return Add(*[f * g for f in base.args for g in multi.args])\n            else:\n                return Add(*[f * multi for f in base.args])\n    elif exp.is_Rational and exp.p < 0 and base.is_Add and (abs(exp.p) > exp.q):\n        return 1 / self.func(base, -exp)._eval_expand_multinomial()\n    elif exp.is_Add and base.is_Number:\n        coeff, tail = (S.One, S.Zero)\n        for term in exp.args:\n            if term.is_Number:\n                coeff *= self.func(base, term)\n            else:\n                tail += term\n        return coeff * self.func(base, tail)\n    else:\n        return result",
    ".sympy.core.power.py@@Pow._eval_expand_power_base": "def _eval_expand_power_base(self, **hints):\n    force = hints.get('force', False)\n    b = self.base\n    e = self.exp\n    if not b.is_Mul:\n        return self\n    cargs, nc = b.args_cnc(split_1=False)\n    if nc:\n        nc = [i._eval_expand_power_base(**hints) if hasattr(i, '_eval_expand_power_base') else i for i in nc]\n        if e.is_Integer:\n            if e.is_positive:\n                rv = Mul(*nc * e)\n            else:\n                rv = Mul(*[i ** (-1) for i in nc[::-1]] * -e)\n            if cargs:\n                rv *= Mul(*cargs) ** e\n            return rv\n        if not cargs:\n            return self.func(Mul(*nc), e, evaluate=False)\n        nc = [Mul(*nc)]\n    other, maybe_real = sift(cargs, lambda x: x.is_extended_real is False, binary=True)\n\n    def pred(x):\n        if x is S.ImaginaryUnit:\n            return S.ImaginaryUnit\n        polar = x.is_polar\n        if polar:\n            return True\n        if polar is None:\n            return fuzzy_bool(x.is_extended_nonnegative)\n    sifted = sift(maybe_real, pred)\n    nonneg = sifted[True]\n    other += sifted[None]\n    neg = sifted[False]\n    imag = sifted[S.ImaginaryUnit]\n    if imag:\n        I = S.ImaginaryUnit\n        i = len(imag) % 4\n        if i == 0:\n            pass\n        elif i == 1:\n            other.append(I)\n        elif i == 2:\n            if neg:\n                nonn = -neg.pop()\n                if nonn is not S.One:\n                    nonneg.append(nonn)\n            else:\n                neg.append(S.NegativeOne)\n        else:\n            if neg:\n                nonn = -neg.pop()\n                if nonn is not S.One:\n                    nonneg.append(nonn)\n            else:\n                neg.append(S.NegativeOne)\n            other.append(I)\n        del imag\n    if force or e.is_integer:\n        cargs = nonneg + neg + other\n        other = nc\n    else:\n        assert not e.is_Integer\n        if len(neg) > 1:\n            o = S.One\n            if not other and neg[0].is_Number:\n                o *= neg.pop(0)\n            if len(neg) % 2:\n                o = -o\n            for n in neg:\n                nonneg.append(-n)\n            if o is not S.One:\n                other.append(o)\n        elif neg and other:\n            if neg[0].is_Number and neg[0] is not S.NegativeOne:\n                other.append(S.NegativeOne)\n                nonneg.append(-neg[0])\n            else:\n                other.extend(neg)\n        else:\n            other.extend(neg)\n        del neg\n        cargs = nonneg\n        other += nc\n    rv = S.One\n    if cargs:\n        if e.is_Rational:\n            npow, cargs = sift(cargs, lambda x: x.is_Pow and x.exp.is_Rational and x.base.is_number, binary=True)\n            rv = Mul(*[self.func(b.func(*b.args), e) for b in npow])\n        rv *= Mul(*[self.func(b, e, evaluate=False) for b in cargs])\n    if other:\n        rv *= self.func(Mul(*other), e, evaluate=False)\n    return rv",
    ".sympy.core.power.py@@Pow._eval_expand_power_exp": "def _eval_expand_power_exp(self, **hints):\n    b = self.base\n    e = self.exp\n    if b == S.Exp1:\n        from sympy.concrete.summations import Sum\n        if isinstance(e, Sum) and e.is_commutative:\n            from sympy.concrete.products import Product\n            return Product(self.func(b, e.function), *e.limits)\n    if e.is_Add and e.is_commutative:\n        expr = []\n        for x in e.args:\n            expr.append(self.func(b, x))\n        return Mul(*expr)\n    return self.func(b, e)",
    ".sympy.core.mul.py@@Mul._expandsums": "def _expandsums(sums):\n    L = len(sums)\n    if L == 1:\n        return sums[0].args\n    terms = []\n    left = Mul._expandsums(sums[:L // 2])\n    right = Mul._expandsums(sums[L // 2:])\n    terms = [Mul(a, b) for a in left for b in right]\n    added = Add(*terms)\n    return Add.make_args(added)",
    ".sympy.core.numbers.py@@Integer.__lt__": "def __lt__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if other.is_Integer:\n        return _sympify(self.p < other.p)\n    return Rational.__lt__(self, other)",
    ".sympy.core.function.py@@Derivative._eval_subs": "def _eval_subs(self, old, new):\n    if old in self._wrt_variables:\n        expr = self.func(self.expr, *[(v, c.subs(old, new)) for v, c in self.variable_count])\n        if expr != self:\n            return expr._eval_subs(old, new)\n        if not getattr(new, '_diff_wrt', False):\n            if isinstance(old, Symbol):\n                return Subs(self, old, new)\n            else:\n                xi = Dummy('xi')\n                return Subs(self.xreplace({old: xi}), xi, new)\n    if old.is_Derivative and old.expr == self.expr:\n        if self.canonical == old.canonical:\n            return new\n\n        def _subset(a, b):\n            return all(((a[i] <= b[i]) == True for i in a))\n        old_vars = Counter(dict(reversed(old.variable_count)))\n        self_vars = Counter(dict(reversed(self.variable_count)))\n        if _subset(old_vars, self_vars):\n            return _derivative_dispatch(new, *(self_vars - old_vars).items()).canonical\n    args = list(self.args)\n    newargs = list((x._subs(old, new) for x in args))\n    if args[0] == old:\n        return _derivative_dispatch(*newargs)\n    if newargs[0] != args[0]:\n        syms = {vi: Dummy() for vi in self._wrt_variables if not vi.is_Symbol}\n        wrt = {syms.get(vi, vi) for vi in self._wrt_variables}\n        forbidden = args[0].xreplace(syms).free_symbols & wrt\n        nfree = new.xreplace(syms).free_symbols\n        ofree = old.xreplace(syms).free_symbols\n        if nfree - ofree & forbidden:\n            return Subs(self, old, new)\n    viter = ((i, j) for (i, _), (j, _) in zip(newargs[1:], args[1:]))\n    if any((i != j for i, j in viter)):\n        for a in _atomic(self.expr, recursive=True):\n            for i in range(1, len(newargs)):\n                vi, _ = newargs[i]\n                if a == vi and vi != args[i][0]:\n                    return Subs(self, old, new)\n        vc = newargs[1:]\n        oldv = self._wrt_variables\n        newe = self.expr\n        subs = []\n        for i, (vi, ci) in enumerate(vc):\n            if not vi._diff_wrt:\n                xi = Dummy('xi_%i' % i)\n                newe = newe.xreplace({oldv[i]: xi})\n                vc[i] = (xi, ci)\n                subs.append((xi, vi))\n        if subs:\n            newe = newe._subs(old, new)\n            return Subs(Derivative(newe, *vc), *zip(*subs))\n    return _derivative_dispatch(*newargs)",
    ".sympy.core.function.py@@Derivative._subset": "def _subset(a, b):\n    return all(((a[i] <= b[i]) == True for i in a))",
    ".sympy.core.numbers.py@@Integer.__ge__": "def __ge__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if other.is_Integer:\n        return _sympify(self.p >= other.p)\n    return Rational.__ge__(self, other)",
    ".sympy.core.basic.py@@Basic._eval_subs": "def _eval_subs(self, old, new):\n    return None",
    ".sympy.core.numbers.py@@Rational._hashable_content": "def _hashable_content(self):\n    return (self.p, self.q)",
    ".sympy.core.numbers.py@@Integer.__rsub__": "def __rsub__(self, other):\n    if global_parameters.evaluate:\n        if isinstance(other, int):\n            return Integer(other - self.p)\n        elif isinstance(other, Rational):\n            return Rational(other.p - self.p * other.q, other.q, 1)\n        return Rational.__rsub__(self, other)\n    return Rational.__rsub__(self, other)",
    ".sympy.core.basic.py@@Atom.xreplace": "def xreplace(self, rule, hack2=False):\n    return rule.get(self, self)"
}