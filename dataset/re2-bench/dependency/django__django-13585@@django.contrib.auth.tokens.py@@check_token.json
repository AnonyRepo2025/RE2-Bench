{
    ".django.utils.http.py@@base36_to_int": "def base36_to_int(s):\n    if len(s) > 13:\n        raise ValueError('Base36 input too large')\n    return int(s, 36)",
    ".django.utils.http.py@@int_to_base36": "def int_to_base36(i):\n    char_set = '0123456789abcdefghijklmnopqrstuvwxyz'\n    if i < 0:\n        raise ValueError('Negative base36 conversion input.')\n    if i < 36:\n        return char_set[i]\n    b36 = ''\n    while i != 0:\n        i, n = divmod(i, 36)\n        b36 = char_set[n] + b36\n    return b36",
    ".django.contrib.auth.base_user.py@@AbstractBaseUser.get_email_field_name": "def get_email_field_name(cls):\n    try:\n        return cls.EMAIL_FIELD\n    except AttributeError:\n        return 'email'",
    ".django.db.models.base.py@@Model._get_pk_val": "def _get_pk_val(self, meta=None):\n    meta = meta or self._meta\n    return getattr(self, meta.pk.attname)",
    ".django.utils.crypto.py@@salted_hmac": "def salted_hmac(key_salt, value, secret=None, *, algorithm='sha1'):\n    if secret is None:\n        secret = settings.SECRET_KEY\n    key_salt = force_bytes(key_salt)\n    secret = force_bytes(secret)\n    try:\n        hasher = getattr(hashlib, algorithm)\n    except AttributeError as e:\n        raise InvalidAlgorithm('%r is not an algorithm accepted by the hashlib module.' % algorithm) from e\n    key = hasher(key_salt + secret).digest()\n    return hmac.new(key, msg=force_bytes(value), digestmod=hasher)",
    ".django.utils.encoding.py@@force_bytes": "def force_bytes(s, encoding='utf-8', strings_only=False, errors='strict'):\n    if isinstance(s, bytes):\n        if encoding == 'utf-8':\n            return s\n        else:\n            return s.decode('utf-8', errors).encode(encoding, errors)\n    if strings_only and is_protected_type(s):\n        return s\n    if isinstance(s, memoryview):\n        return bytes(s)\n    return str(s).encode(encoding, errors)",
    ".django.utils.crypto.py@@constant_time_compare": "def constant_time_compare(val1, val2):\n    return secrets.compare_digest(force_bytes(val1), force_bytes(val2))",
    ".django.conf.__init__.py@@LazySettings.__getattr__": "def __getattr__(self, name):\n    if self._wrapped is empty:\n        self._setup(name)\n    val = getattr(self._wrapped, name)\n    if name in {'MEDIA_URL', 'STATIC_URL'} and val is not None:\n        val = self._add_script_prefix(val)\n    elif name == 'SECRET_KEY' and (not val):\n        raise ImproperlyConfigured('The SECRET_KEY setting must not be empty.')\n    self.__dict__[name] = val\n    return val",
    ".django.conf.__init__.py@@UserSettingsHolder.__getattr__": "def __getattr__(self, name):\n    if not name.isupper() or name in self._deleted:\n        raise AttributeError\n    return getattr(self.default_settings, name)"
}