{
    ".sympy.core.expr.py@@Expr.expand": "def expand(self, deep=True, modulus=None, power_base=True, power_exp=True, mul=True, log=True, multinomial=True, basic=True, **hints):\n    from sympy.simplify.radsimp import fraction\n    hints.update(power_base=power_base, power_exp=power_exp, mul=mul, log=log, multinomial=multinomial, basic=basic)\n    expr = self\n    if hints.pop('frac', False):\n        n, d = [a.expand(deep=deep, modulus=modulus, **hints) for a in fraction(self)]\n        return n / d\n    elif hints.pop('denom', False):\n        n, d = fraction(self)\n        return n / d.expand(deep=deep, modulus=modulus, **hints)\n    elif hints.pop('numer', False):\n        n, d = fraction(self)\n        return n.expand(deep=deep, modulus=modulus, **hints) / d\n\n    def _expand_hint_key(hint):\n        if hint == 'mul':\n            return 'mulz'\n        return hint\n    for hint in sorted(hints.keys(), key=_expand_hint_key):\n        use_hint = hints[hint]\n        if use_hint:\n            hint = '_eval_expand_' + hint\n            expr, hit = Expr._expand_hint(expr, hint, deep=deep, **hints)\n    while True:\n        was = expr\n        if hints.get('multinomial', False):\n            expr, _ = Expr._expand_hint(expr, '_eval_expand_multinomial', deep=deep, **hints)\n        if hints.get('mul', False):\n            expr, _ = Expr._expand_hint(expr, '_eval_expand_mul', deep=deep, **hints)\n        if hints.get('log', False):\n            expr, _ = Expr._expand_hint(expr, '_eval_expand_log', deep=deep, **hints)\n        if expr == was:\n            break\n    if modulus is not None:\n        modulus = sympify(modulus)\n        if not modulus.is_Integer or modulus <= 0:\n            raise ValueError('modulus must be a positive integer, got %s' % modulus)\n        terms = []\n        for term in Add.make_args(expr):\n            coeff, tail = term.as_coeff_Mul(rational=True)\n            coeff %= modulus\n            if coeff:\n                terms.append(coeff * tail)\n        expr = Add(*terms)\n    return expr",
    ".sympy.core.expr.py@@Expr._expand_hint_key": "def _expand_hint_key(hint):\n    if hint == 'mul':\n        return 'mulz'\n    return hint",
    ".sympy.core.expr.py@@Expr._expand_hint": "def _expand_hint(expr, hint, deep=True, **hints):\n    hit = False\n    if deep and getattr(expr, 'args', ()) and (not expr.is_Atom):\n        sargs = []\n        for arg in expr.args:\n            arg, arghit = Expr._expand_hint(arg, hint, **hints)\n            hit |= arghit\n            sargs.append(arg)\n        if hit:\n            expr = expr.func(*sargs)\n    if hasattr(expr, hint):\n        newexpr = getattr(expr, hint)(**hints)\n        if newexpr != expr:\n            return (newexpr, True)\n    return (expr, hit)",
    ".sympy.core.basic.py@@Basic.args": "def args(self):\n    return self._args",
    ".sympy.core.mul.py@@Mul._eval_expand_mul": "def _eval_expand_mul(self, **hints):\n    from sympy import fraction\n    expr = self\n    n, d = fraction(expr)\n    if d.is_Mul:\n        n, d = [i._eval_expand_mul(**hints) if i.is_Mul else i for i in (n, d)]\n        expr = n / d\n        if not expr.is_Mul:\n            return expr\n    plain, sums, rewrite = ([], [], False)\n    for factor in expr.args:\n        if factor.is_Add:\n            sums.append(factor)\n            rewrite = True\n        elif factor.is_commutative:\n            plain.append(factor)\n        else:\n            sums.append(Basic(factor))\n    if not rewrite:\n        return expr\n    else:\n        plain = self.func(*plain)\n        if sums:\n            deep = hints.get('deep', False)\n            terms = self.func._expandsums(sums)\n            args = []\n            for term in terms:\n                t = self.func(plain, term)\n                if t.is_Mul and any((a.is_Add for a in t.args)) and deep:\n                    t = t._eval_expand_mul()\n                args.append(t)\n            return Add(*args)\n        else:\n            return plain",
    ".sympy.simplify.radsimp.py@@fraction": "def fraction(expr, exact=False):\n    expr = sympify(expr)\n    numer, denom = ([], [])\n    for term in Mul.make_args(expr):\n        if term.is_commutative and (term.is_Pow or isinstance(term, exp)):\n            b, ex = term.as_base_exp()\n            if ex.is_negative:\n                if ex is S.NegativeOne:\n                    denom.append(b)\n                elif exact:\n                    if ex.is_constant():\n                        denom.append(Pow(b, -ex))\n                    else:\n                        numer.append(term)\n                else:\n                    denom.append(Pow(b, -ex))\n            elif ex.is_positive:\n                numer.append(term)\n            elif not exact and ex.is_Mul:\n                n, d = term.as_numer_denom()\n                numer.append(n)\n                denom.append(d)\n            else:\n                numer.append(term)\n        elif term.is_Rational:\n            n, d = term.as_numer_denom()\n            numer.append(n)\n            denom.append(d)\n        else:\n            numer.append(term)\n    if exact:\n        return (Mul(*numer, evaluate=False), Mul(*denom, evaluate=False))\n    else:\n        return (Mul(*numer), Mul(*denom))",
    ".sympy.core.sympify.py@@sympify": "def sympify(a, locals=None, convert_xor=True, strict=False, rational=False, evaluate=None):\n    is_sympy = getattr(a, '__sympy__', None)\n    if is_sympy is not None:\n        return a\n    if isinstance(a, CantSympify):\n        raise SympifyError(a)\n    cls = getattr(a, '__class__', None)\n    if cls is None:\n        cls = type(a)\n    conv = converter.get(cls, None)\n    if conv is not None:\n        return conv(a)\n    for superclass in getmro(cls):\n        try:\n            return converter[superclass](a)\n        except KeyError:\n            continue\n    if cls is type(None):\n        if strict:\n            raise SympifyError(a)\n        else:\n            return a\n    if evaluate is None:\n        if global_evaluate[0] is False:\n            evaluate = global_evaluate[0]\n        else:\n            evaluate = True\n    if type(a).__module__ == 'numpy':\n        import numpy as np\n        if np.isscalar(a):\n            return _convert_numpy_types(a, locals=locals, convert_xor=convert_xor, strict=strict, rational=rational, evaluate=evaluate)\n    _sympy_ = getattr(a, '_sympy_', None)\n    if _sympy_ is not None:\n        try:\n            return a._sympy_()\n        except AttributeError:\n            pass\n    if not strict:\n        flat = getattr(a, 'flat', None)\n        if flat is not None:\n            shape = getattr(a, 'shape', None)\n            if shape is not None:\n                from ..tensor.array import Array\n                return Array(a.flat, a.shape)\n    if not isinstance(a, string_types):\n        for coerce in (float, int):\n            try:\n                coerced = coerce(a)\n            except (TypeError, ValueError):\n                continue\n            except AttributeError:\n                continue\n            try:\n                return sympify(coerced)\n            except SympifyError:\n                continue\n    if strict:\n        raise SympifyError(a)\n    if iterable(a):\n        try:\n            return type(a)([sympify(x, locals=locals, convert_xor=convert_xor, rational=rational) for x in a])\n        except TypeError:\n            pass\n    if isinstance(a, dict):\n        try:\n            return type(a)([sympify(x, locals=locals, convert_xor=convert_xor, rational=rational) for x in a.items()])\n        except TypeError:\n            pass\n    try:\n        from .compatibility import unicode\n        a = unicode(a)\n    except Exception as exc:\n        raise SympifyError(a, exc)\n    from sympy.parsing.sympy_parser import parse_expr, TokenError, standard_transformations\n    from sympy.parsing.sympy_parser import convert_xor as t_convert_xor\n    from sympy.parsing.sympy_parser import rationalize as t_rationalize\n    transformations = standard_transformations\n    if rational:\n        transformations += (t_rationalize,)\n    if convert_xor:\n        transformations += (t_convert_xor,)\n    try:\n        a = a.replace('\\n', '')\n        expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n    except (TokenError, SyntaxError) as exc:\n        raise SympifyError('could not parse %r' % a, exc)\n    return expr",
    ".sympy.core.operations.py@@AssocOp.make_args": "def make_args(cls, expr):\n    if isinstance(expr, cls):\n        return expr.args\n    else:\n        return (sympify(expr),)",
    ".sympy.core.numbers.py@@Integer.as_numer_denom": "def as_numer_denom(self):\n    return (self, S.One)",
    ".sympy.core.assumptions.py@@getit": "def getit(self):\n    try:\n        return self._assumptions[fact]\n    except KeyError:\n        if self._assumptions is self.default_assumptions:\n            self._assumptions = self.default_assumptions.copy()\n        return _ask(fact, self)",
    ".sympy.core.operations.py@@AssocOp.__new__": "def __new__(cls, *args, **options):\n    from sympy import Order\n    args = list(map(_sympify, args))\n    args = [a for a in args if a is not cls.identity]\n    evaluate = options.get('evaluate')\n    if evaluate is None:\n        evaluate = global_evaluate[0]\n    if not evaluate:\n        obj = cls._from_args(args)\n        obj = cls._exec_constructor_postprocessors(obj)\n        return obj\n    if len(args) == 0:\n        return cls.identity\n    if len(args) == 1:\n        return args[0]\n    c_part, nc_part, order_symbols = cls.flatten(args)\n    is_commutative = not nc_part\n    obj = cls._from_args(c_part + nc_part, is_commutative)\n    obj = cls._exec_constructor_postprocessors(obj)\n    if order_symbols is not None:\n        return Order(obj, *order_symbols)\n    return obj",
    ".sympy.core.sympify.py@@_sympify": "def _sympify(a):\n    return sympify(a, strict=True)",
    ".sympy.core.mul.py@@Mul.flatten": "def flatten(cls, seq):\n    from sympy.calculus.util import AccumBounds\n    from sympy.matrices.expressions import MatrixExpr\n    rv = None\n    if len(seq) == 2:\n        a, b = seq\n        if b.is_Rational:\n            a, b = (b, a)\n            seq = [a, b]\n        assert not a is S.One\n        if not a.is_zero and a.is_Rational:\n            r, b = b.as_coeff_Mul()\n            if b.is_Add:\n                if r is not S.One:\n                    rv = ([cls(a * r, b, evaluate=False)], [], None)\n                elif global_distribute[0] and b.is_commutative:\n                    r, b = b.as_coeff_Add()\n                    bargs = [_keep_coeff(a, bi) for bi in Add.make_args(b)]\n                    _addsort(bargs)\n                    ar = a * r\n                    if ar:\n                        bargs.insert(0, ar)\n                    bargs = [Add._from_args(bargs)]\n                    rv = (bargs, [], None)\n        if rv:\n            return rv\n    c_part = []\n    nc_part = []\n    nc_seq = []\n    coeff = S.One\n    c_powers = []\n    num_exp = []\n    neg1e = S.Zero\n    pnum_rat = {}\n    order_symbols = None\n    for o in seq:\n        if o.is_Order:\n            o, order_symbols = o.as_expr_variables(order_symbols)\n        if o.is_Mul:\n            if o.is_commutative:\n                seq.extend(o.args)\n            else:\n                for q in o.args:\n                    if q.is_commutative:\n                        seq.append(q)\n                    else:\n                        nc_seq.append(q)\n                seq.append(NC_Marker)\n            continue\n        elif o.is_Number:\n            if o is S.NaN or (coeff is S.ComplexInfinity and o.is_zero):\n                return ([S.NaN], [], None)\n            elif coeff.is_Number or isinstance(coeff, AccumBounds):\n                coeff *= o\n                if coeff is S.NaN:\n                    return ([S.NaN], [], None)\n            continue\n        elif isinstance(o, AccumBounds):\n            coeff = o.__mul__(coeff)\n            continue\n        elif o is S.ComplexInfinity:\n            if not coeff:\n                return ([S.NaN], [], None)\n            if coeff is S.ComplexInfinity:\n                return ([S.ComplexInfinity], [], None)\n            coeff = S.ComplexInfinity\n            continue\n        elif o is S.ImaginaryUnit:\n            neg1e += S.Half\n            continue\n        elif o.is_commutative:\n            b, e = o.as_base_exp()\n            if o.is_Pow:\n                if b.is_Number:\n                    if e.is_Rational:\n                        if e.is_Integer:\n                            coeff *= Pow(b, e)\n                            continue\n                        elif e.is_negative:\n                            seq.append(Pow(b, e))\n                            continue\n                        elif b.is_negative:\n                            neg1e += e\n                            b = -b\n                        if b is not S.One:\n                            pnum_rat.setdefault(b, []).append(e)\n                        continue\n                    elif b.is_positive or e.is_integer:\n                        num_exp.append((b, e))\n                        continue\n            c_powers.append((b, e))\n        else:\n            if o is not NC_Marker:\n                nc_seq.append(o)\n            while nc_seq:\n                o = nc_seq.pop(0)\n                if not nc_part:\n                    nc_part.append(o)\n                    continue\n                o1 = nc_part.pop()\n                b1, e1 = o1.as_base_exp()\n                b2, e2 = o.as_base_exp()\n                new_exp = e1 + e2\n                if b1 == b2 and (not new_exp.is_Add):\n                    o12 = b1 ** new_exp\n                    if o12.is_commutative:\n                        seq.append(o12)\n                        continue\n                    else:\n                        nc_seq.insert(0, o12)\n                else:\n                    nc_part.append(o1)\n                    nc_part.append(o)\n\n    def _gather(c_powers):\n        common_b = {}\n        for b, e in c_powers:\n            co = e.as_coeff_Mul()\n            common_b.setdefault(b, {}).setdefault(co[1], []).append(co[0])\n        for b, d in common_b.items():\n            for di, li in d.items():\n                d[di] = Add(*li)\n        new_c_powers = []\n        for b, e in common_b.items():\n            new_c_powers.extend([(b, c * t) for t, c in e.items()])\n        return new_c_powers\n    c_powers = _gather(c_powers)\n    num_exp = _gather(num_exp)\n    for i in range(2):\n        new_c_powers = []\n        changed = False\n        for b, e in c_powers:\n            if e.is_zero:\n                if (b.is_Add or b.is_Mul) and any((infty in b.args for infty in (S.ComplexInfinity, S.Infinity, S.NegativeInfinity))):\n                    return ([S.NaN], [], None)\n                continue\n            if e is S.One:\n                if b.is_Number:\n                    coeff *= b\n                    continue\n                p = b\n            if e is not S.One:\n                p = Pow(b, e)\n                if p.is_Pow and (not b.is_Pow):\n                    bi = b\n                    b, e = p.as_base_exp()\n                    if b != bi:\n                        changed = True\n            c_part.append(p)\n            new_c_powers.append((b, e))\n        if changed and len(set((b for b, e in new_c_powers))) != len(new_c_powers):\n            c_part = []\n            c_powers = _gather(new_c_powers)\n        else:\n            break\n    inv_exp_dict = {}\n    for b, e in num_exp:\n        inv_exp_dict.setdefault(e, []).append(b)\n    for e, b in inv_exp_dict.items():\n        inv_exp_dict[e] = cls(*b)\n    c_part.extend([Pow(b, e) for e, b in inv_exp_dict.items() if e])\n    comb_e = {}\n    for b, e in pnum_rat.items():\n        comb_e.setdefault(Add(*e), []).append(b)\n    del pnum_rat\n    num_rat = []\n    for e, b in comb_e.items():\n        b = cls(*b)\n        if e.q == 1:\n            coeff *= Pow(b, e)\n            continue\n        if e.p > e.q:\n            e_i, ep = divmod(e.p, e.q)\n            coeff *= Pow(b, e_i)\n            e = Rational(ep, e.q)\n        num_rat.append((b, e))\n    del comb_e\n    pnew = defaultdict(list)\n    i = 0\n    while i < len(num_rat):\n        bi, ei = num_rat[i]\n        grow = []\n        for j in range(i + 1, len(num_rat)):\n            bj, ej = num_rat[j]\n            g = bi.gcd(bj)\n            if g is not S.One:\n                e = ei + ej\n                if e.q == 1:\n                    coeff *= Pow(g, e)\n                else:\n                    if e.p > e.q:\n                        e_i, ep = divmod(e.p, e.q)\n                        coeff *= Pow(g, e_i)\n                        e = Rational(ep, e.q)\n                    grow.append((g, e))\n                num_rat[j] = (bj / g, ej)\n                bi = bi / g\n                if bi is S.One:\n                    break\n        if bi is not S.One:\n            obj = Pow(bi, ei)\n            if obj.is_Number:\n                coeff *= obj\n            else:\n                for obj in Mul.make_args(obj):\n                    if obj.is_Number:\n                        coeff *= obj\n                    else:\n                        assert obj.is_Pow\n                        bi, ei = obj.args\n                        pnew[ei].append(bi)\n        num_rat.extend(grow)\n        i += 1\n    for e, b in pnew.items():\n        pnew[e] = cls(*b)\n    if neg1e:\n        p, q = neg1e.as_numer_denom()\n        n, p = divmod(p, q)\n        if n % 2:\n            coeff = -coeff\n        if q == 2:\n            c_part.append(S.ImaginaryUnit)\n        elif p:\n            neg1e = Rational(p, q)\n            for e, b in pnew.items():\n                if e == neg1e and b.is_positive:\n                    pnew[e] = -b\n                    break\n            else:\n                c_part.append(Pow(S.NegativeOne, neg1e, evaluate=False))\n    c_part.extend([Pow(b, e) for e, b in pnew.items()])\n    if coeff is S.Infinity or coeff is S.NegativeInfinity:\n\n        def _handle_for_oo(c_part, coeff_sign):\n            new_c_part = []\n            for t in c_part:\n                if t.is_extended_positive:\n                    continue\n                if t.is_extended_negative:\n                    coeff_sign *= -1\n                    continue\n                new_c_part.append(t)\n            return (new_c_part, coeff_sign)\n        c_part, coeff_sign = _handle_for_oo(c_part, 1)\n        nc_part, coeff_sign = _handle_for_oo(nc_part, coeff_sign)\n        coeff *= coeff_sign\n    if coeff is S.ComplexInfinity:\n        c_part = [c for c in c_part if not (fuzzy_not(c.is_zero) and c.is_extended_real is not None)]\n        nc_part = [c for c in nc_part if not (fuzzy_not(c.is_zero) and c.is_extended_real is not None)]\n    elif coeff.is_zero:\n        if any((isinstance(c, MatrixExpr) for c in nc_part)):\n            return ([coeff], nc_part, order_symbols)\n        if any((c.is_finite == False for c in c_part)):\n            return ([S.NaN], [], order_symbols)\n        return ([coeff], [], order_symbols)\n    _new = []\n    for i in c_part:\n        if i.is_Number:\n            coeff *= i\n        else:\n            _new.append(i)\n    c_part = _new\n    _mulsort(c_part)\n    if coeff is not S.One:\n        c_part.insert(0, coeff)\n    if global_distribute[0] and (not nc_part) and (len(c_part) == 2) and c_part[0].is_Number and c_part[0].is_finite and c_part[1].is_Add:\n        coeff = c_part[0]\n        c_part = [Add(*[coeff * f for f in c_part[1].args])]\n    return (c_part, nc_part, order_symbols)",
    ".sympy.core.numbers.py@@Integer.__mul__": "def __mul__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, integer_types):\n            return Integer(self.p * other)\n        elif isinstance(other, Integer):\n            return Integer(self.p * other.p)\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.p, other.q, igcd(self.p, other.q))\n        return Rational.__mul__(self, other)\n    return Rational.__mul__(self, other)",
    ".sympy.core.numbers.py@@Integer.__new__": "def __new__(cls, i):\n    if isinstance(i, string_types):\n        i = i.replace(' ', '')\n    try:\n        ival = int(i)\n    except TypeError:\n        raise TypeError('Argument of Integer should be of numeric type, got %s.' % i)\n    if ival == 1:\n        return S.One\n    if ival == -1:\n        return S.NegativeOne\n    if ival == 0:\n        return S.Zero\n    obj = Expr.__new__(cls)\n    obj.p = ival\n    return obj",
    ".sympy.core.basic.py@@Basic.__new__": "def __new__(cls, *args):\n    obj = object.__new__(cls)\n    obj._assumptions = cls.default_assumptions\n    obj._mhash = None\n    obj._args = args\n    return obj",
    ".sympy.core.expr.py@@Expr.as_base_exp": "def as_base_exp(self):\n    return (self, S.One)",
    ".sympy.core.mul.py@@Mul._gather": "def _gather(c_powers):\n    common_b = {}\n    for b, e in c_powers:\n        co = e.as_coeff_Mul()\n        common_b.setdefault(b, {}).setdefault(co[1], []).append(co[0])\n    for b, d in common_b.items():\n        for di, li in d.items():\n            d[di] = Add(*li)\n    new_c_powers = []\n    for b, e in common_b.items():\n        new_c_powers.extend([(b, c * t) for t, c in e.items()])\n    return new_c_powers",
    ".sympy.core.numbers.py@@Rational.as_coeff_Mul": "def as_coeff_Mul(self, rational=False):\n    return (self, S.One)",
    ".sympy.core.expr.py@@Expr.__hash__": "def __hash__(self):\n    h = self._mhash\n    if h is None:\n        h = hash((type(self).__name__,) + self._hashable_content())\n        self._mhash = h\n    return h",
    ".sympy.core.numbers.py@@Integer.__hash__": "def __hash__(self):\n    return hash(self.p)",
    ".sympy.core.numbers.py@@Zero.__nonzero__": "def __nonzero__(self):\n    return False",
    ".sympy.core.assumptions.py@@StdFactKB.copy": "def copy(self):\n    return self.__class__(self)",
    ".sympy.core.assumptions.py@@StdFactKB.__init__": "def __init__(self, facts=None):\n    super(StdFactKB, self).__init__(_assume_rules)\n    if not facts:\n        self._generator = {}\n    elif not isinstance(facts, FactKB):\n        self._generator = facts.copy()\n    else:\n        self._generator = facts.generator\n    if facts:\n        self.deduce_all_facts(facts)",
    ".sympy.core.facts.py@@FactKB.__init__": "def __init__(self, rules):\n    self.rules = rules",
    ".sympy.core.assumptions.py@@StdFactKB.generator": "def generator(self):\n    return self._generator.copy()",
    ".sympy.core.facts.py@@FactKB.deduce_all_facts": "def deduce_all_facts(self, facts):\n    full_implications = self.rules.full_implications\n    beta_triggers = self.rules.beta_triggers\n    beta_rules = self.rules.beta_rules\n    if isinstance(facts, dict):\n        facts = facts.items()\n    while facts:\n        beta_maytrigger = set()\n        for k, v in facts:\n            if not self._tell(k, v) or v is None:\n                continue\n            for key, value in full_implications[k, v]:\n                self._tell(key, value)\n            beta_maytrigger.update(beta_triggers[k, v])\n        facts = []\n        for bidx in beta_maytrigger:\n            bcond, bimpl = beta_rules[bidx]\n            if all((self.get(k) is v for k, v in bcond)):\n                facts.append(bimpl)",
    ".sympy.core.facts.py@@FactKB._tell": "def _tell(self, k, v):\n    if k in self and self[k] is not None:\n        if self[k] == v:\n            return False\n        else:\n            raise InconsistentAssumptions(self, k, v)\n    else:\n        self[k] = v\n        return True",
    ".sympy.core.assumptions.py@@_ask": "def _ask(fact, obj):\n    assumptions = obj._assumptions\n    handler_map = obj._prop_handler\n    assumptions._tell(fact, None)\n    try:\n        evaluate = handler_map[fact]\n    except KeyError:\n        pass\n    else:\n        a = evaluate(obj)\n        if a is not None:\n            assumptions.deduce_all_facts(((fact, a),))\n            return a\n    prereq = list(_assume_rules.prereq[fact])\n    shuffle(prereq)\n    for pk in prereq:\n        if pk in assumptions:\n            continue\n        if pk in handler_map:\n            _ask(pk, obj)\n            ret_val = assumptions.get(fact)\n            if ret_val is not None:\n                return ret_val\n    return None",
    ".sympy.core.numbers.py@@Rational._eval_is_zero": "def _eval_is_zero(self):\n    return self.p == 0",
    ".sympy.core.mul.py@@_mulsort": "def _mulsort(args):\n    args.sort(key=_args_sortkey)",
    ".sympy.core.basic.py@@Basic.compare": "def compare(self, other):\n    if self is other:\n        return 0\n    n1 = self.__class__\n    n2 = other.__class__\n    c = (n1 > n2) - (n1 < n2)\n    if c:\n        return c\n    st = self._hashable_content()\n    ot = other._hashable_content()\n    c = (len(st) > len(ot)) - (len(st) < len(ot))\n    if c:\n        return c\n    for l, r in zip(st, ot):\n        l = Basic(*l) if isinstance(l, frozenset) else l\n        r = Basic(*r) if isinstance(r, frozenset) else r\n        if isinstance(l, Basic):\n            c = l.compare(r)\n        else:\n            c = (l > r) - (l < r)\n        if c:\n            return c\n    return 0",
    ".sympy.core.core.py@@BasicMeta.__gt__": "def __gt__(cls, other):\n    if cls.__cmp__(other) == 1:\n        return True\n    return False",
    ".sympy.core.core.py@@BasicMeta.__cmp__": "def __cmp__(cls, other):\n    if not isinstance(other, BasicMeta):\n        return -1\n    n1 = cls.__name__\n    n2 = other.__name__\n    if n1 == n2:\n        return 0\n    UNKNOWN = len(ordering_of_classes) + 1\n    try:\n        i1 = ordering_of_classes.index(n1)\n    except ValueError:\n        i1 = UNKNOWN\n    try:\n        i2 = ordering_of_classes.index(n2)\n    except ValueError:\n        i2 = UNKNOWN\n    if i1 == UNKNOWN and i2 == UNKNOWN:\n        return (n1 > n2) - (n1 < n2)\n    return (i1 > i2) - (i1 < i2)",
    ".sympy.core.core.py@@BasicMeta.__lt__": "def __lt__(cls, other):\n    if cls.__cmp__(other) == -1:\n        return True\n    return False",
    ".sympy.core.symbol.py@@Symbol._hashable_content": "def _hashable_content(self):\n    return (self.name,) + tuple(sorted(self.assumptions0.items()))",
    ".sympy.core.symbol.py@@Symbol.assumptions0": "def assumptions0(self):\n    return dict(((key, value) for key, value in self._assumptions.items() if value is not None))",
    ".sympy.core.operations.py@@AssocOp._from_args": "def _from_args(cls, args, is_commutative=None):\n    if len(args) == 0:\n        return cls.identity\n    elif len(args) == 1:\n        return args[0]\n    obj = super(AssocOp, cls).__new__(cls, *args)\n    if is_commutative is None:\n        is_commutative = fuzzy_and((a.is_commutative for a in args))\n    obj.is_commutative = is_commutative\n    return obj",
    ".sympy.core.basic.py@@Basic._exec_constructor_postprocessors": "def _exec_constructor_postprocessors(cls, obj):\n    clsname = obj.__class__.__name__\n    postprocessors = defaultdict(list)\n    for i in obj.args:\n        try:\n            postprocessor_mappings = (Basic._constructor_postprocessor_mapping[cls].items() for cls in type(i).mro() if cls in Basic._constructor_postprocessor_mapping)\n            for k, v in chain.from_iterable(postprocessor_mappings):\n                postprocessors[k].extend([j for j in v if j not in postprocessors[k]])\n        except TypeError:\n            pass\n    for f in postprocessors.get(clsname, []):\n        obj = f(obj)\n    return obj",
    ".sympy.core.basic.py@@Basic.__ne__": "def __ne__(self, other):\n    return not self == other",
    ".sympy.core.expr.py@@Expr.__eq__": "def __eq__(self, other):\n    try:\n        other = _sympify(other)\n        if not isinstance(other, Expr):\n            return False\n    except (SympifyError, SyntaxError):\n        return False\n    if not (self.is_Number and other.is_Number) and type(self) != type(other):\n        return False\n    a, b = (self._hashable_content(), other._hashable_content())\n    if a != b:\n        return False\n    for a, b in zip(a, b):\n        if not isinstance(a, Expr):\n            continue\n        if a.is_Number and type(a) != type(b):\n            return False\n    return True",
    ".sympy.core.expr.py@@Expr._hashable_content": "def _hashable_content(self):\n    return self._args",
    ".sympy.core.basic.py@@Basic.free_symbols": "def free_symbols(self):\n    return set().union(*[a.free_symbols for a in self.args])",
    ".sympy.core.symbol.py@@Symbol.free_symbols": "def free_symbols(self):\n    return {self}",
    ".sympy.core.compatibility.py@@default_sort_key": "def default_sort_key(item, order=None):\n    from .singleton import S\n    from .basic import Basic\n    from .sympify import sympify, SympifyError\n    from .compatibility import iterable\n    if isinstance(item, Basic):\n        return item.sort_key(order=order)\n    if iterable(item, exclude=string_types):\n        if isinstance(item, dict):\n            args = item.items()\n            unordered = True\n        elif isinstance(item, set):\n            args = item\n            unordered = True\n        else:\n            args = list(item)\n            unordered = False\n        args = [default_sort_key(arg, order=order) for arg in args]\n        if unordered:\n            args = sorted(args)\n        cls_index, args = (10, (len(args), tuple(args)))\n    else:\n        if not isinstance(item, string_types):\n            try:\n                item = sympify(item)\n            except SympifyError:\n                pass\n            else:\n                if isinstance(item, Basic):\n                    return default_sort_key(item)\n        cls_index, args = (0, (1, (str(item),)))\n    return ((cls_index, 0, item.__class__.__name__), args, S.One.sort_key(), S.One)",
    ".sympy.core.symbol.py@@Symbol.sort_key": "def sort_key(self, order=None):\n    return (self.class_key(), (1, (str(self),)), S.One.sort_key(), S.One)",
    ".sympy.core.basic.py@@Atom.class_key": "def class_key(cls):\n    return (2, 0, cls.__name__)",
    ".sympy.core.basic.py@@Basic.__str__": "def __str__(self):\n    from sympy.printing import sstr\n    return sstr(self, order=None)",
    ".sympy.printing.str.py@@sstr": "def sstr(expr, **settings):\n    p = StrPrinter(settings)\n    s = p.doprint(expr)\n    return s",
    ".sympy.printing.printer.py@@Printer.__init__": "def __init__(self, settings=None):\n    self._str = str\n    self._settings = self._default_settings.copy()\n    self._context = dict()\n    for key, val in self._global_settings.items():\n        if key in self._default_settings:\n            self._settings[key] = val\n    if settings is not None:\n        self._settings.update(settings)\n        if len(self._settings) > len(self._default_settings):\n            for key in self._settings:\n                if key not in self._default_settings:\n                    raise TypeError(\"Unknown setting '%s'.\" % key)\n    self._print_level = 0",
    ".sympy.printing.printer.py@@Printer.doprint": "def doprint(self, expr):\n    return self._str(self._print(expr))",
    ".sympy.printing.printer.py@@Printer._print": "def _print(self, expr, **kwargs):\n    self._print_level += 1\n    try:\n        if self.printmethod and hasattr(expr, self.printmethod) and (not isinstance(expr, BasicMeta)):\n            return getattr(expr, self.printmethod)(self, **kwargs)\n        classes = type(expr).__mro__\n        if AppliedUndef in classes:\n            classes = classes[classes.index(AppliedUndef):]\n        if UndefinedFunction in classes:\n            classes = classes[classes.index(UndefinedFunction):]\n        if Function in classes:\n            i = classes.index(Function)\n            classes = tuple((c for c in classes[:i] if c.__name__ == classes[0].__name__ or c.__name__.endswith('Base'))) + classes[i:]\n        for cls in classes:\n            printmethod = '_print_' + cls.__name__\n            if hasattr(self, printmethod):\n                return getattr(self, printmethod)(expr, **kwargs)\n        if (self.emptyPrinter == str) & (self._settings.get('decimal_separator', None) == 'comma'):\n            expr = str(expr).replace('.', '{,}')\n        return self.emptyPrinter(expr)\n    finally:\n        self._print_level -= 1",
    ".sympy.printing.str.py@@StrPrinter._print_Symbol": "def _print_Symbol(self, expr):\n    return expr.name",
    ".sympy.core.numbers.py@@Number.sort_key": "def sort_key(self, order=None):\n    return (self.class_key(), (0, ()), (), self)",
    ".sympy.core.numbers.py@@Number.class_key": "def class_key(cls):\n    return (1, 0, 'Number')",
    ".sympy.core.mul.py@@Mul.as_numer_denom": "def as_numer_denom(self):\n    numers, denoms = list(zip(*[f.as_numer_denom() for f in self.args]))\n    return (self.func(*numers), self.func(*denoms))",
    ".sympy.core.expr.py@@Expr.as_numer_denom": "def as_numer_denom(self):\n    return (self, S.One)",
    ".sympy.core.basic.py@@Basic.func": "def func(self):\n    return self.__class__",
    ".sympy.core.expr.py@@Expr.is_number": "def is_number(self):\n    return all((obj.is_number for obj in self.args))",
    ".sympy.core.exprtools.py@@factor_terms": "def factor_terms(expr, radical=False, clear=False, fraction=False, sign=True):\n\n    def do(expr):\n        from sympy.concrete.summations import Sum\n        from sympy.integrals.integrals import Integral\n        is_iterable = iterable(expr)\n        if not isinstance(expr, Basic) or expr.is_Atom:\n            if is_iterable:\n                return type(expr)([do(i) for i in expr])\n            return expr\n        if expr.is_Pow or expr.is_Function or is_iterable or (not hasattr(expr, 'args_cnc')):\n            args = expr.args\n            newargs = tuple([do(i) for i in args])\n            if newargs == args:\n                return expr\n            return expr.func(*newargs)\n        if isinstance(expr, (Sum, Integral)):\n            return _factor_sum_int(expr, radical=radical, clear=clear, fraction=fraction, sign=sign)\n        cont, p = expr.as_content_primitive(radical=radical, clear=clear)\n        if p.is_Add:\n            list_args = [do(a) for a in Add.make_args(p)]\n            if all((a.as_coeff_Mul()[0].extract_multiplicatively(-1) is not None for a in list_args)):\n                cont = -cont\n                list_args = [-a for a in list_args]\n            special = {}\n            for i, a in enumerate(list_args):\n                b, e = a.as_base_exp()\n                if e.is_Mul and e != Mul(*e.args):\n                    list_args[i] = Dummy()\n                    special[list_args[i]] = a\n            p = Add._from_args(list_args)\n            p = gcd_terms(p, isprimitive=True, clear=clear, fraction=fraction).xreplace(special)\n        elif p.args:\n            p = p.func(*[do(a) for a in p.args])\n        rv = _keep_coeff(cont, p, clear=clear, sign=sign)\n        return rv\n    expr = sympify(expr)\n    return do(expr)",
    ".sympy.core.exprtools.py@@do": "def do(expr):\n    from sympy.concrete.summations import Sum\n    from sympy.integrals.integrals import Integral\n    is_iterable = iterable(expr)\n    if not isinstance(expr, Basic) or expr.is_Atom:\n        if is_iterable:\n            return type(expr)([do(i) for i in expr])\n        return expr\n    if expr.is_Pow or expr.is_Function or is_iterable or (not hasattr(expr, 'args_cnc')):\n        args = expr.args\n        newargs = tuple([do(i) for i in args])\n        if newargs == args:\n            return expr\n        return expr.func(*newargs)\n    if isinstance(expr, (Sum, Integral)):\n        return _factor_sum_int(expr, radical=radical, clear=clear, fraction=fraction, sign=sign)\n    cont, p = expr.as_content_primitive(radical=radical, clear=clear)\n    if p.is_Add:\n        list_args = [do(a) for a in Add.make_args(p)]\n        if all((a.as_coeff_Mul()[0].extract_multiplicatively(-1) is not None for a in list_args)):\n            cont = -cont\n            list_args = [-a for a in list_args]\n        special = {}\n        for i, a in enumerate(list_args):\n            b, e = a.as_base_exp()\n            if e.is_Mul and e != Mul(*e.args):\n                list_args[i] = Dummy()\n                special[list_args[i]] = a\n        p = Add._from_args(list_args)\n        p = gcd_terms(p, isprimitive=True, clear=clear, fraction=fraction).xreplace(special)\n    elif p.args:\n        p = p.func(*[do(a) for a in p.args])\n    rv = _keep_coeff(cont, p, clear=clear, sign=sign)\n    return rv",
    ".sympy.core.compatibility.py@@iterable": "def iterable(i, exclude=(string_types, dict, NotIterable)):\n    if hasattr(i, '_iterable'):\n        return i._iterable\n    try:\n        iter(i)\n    except TypeError:\n        return False\n    if exclude:\n        return not isinstance(i, exclude)\n    return True",
    ".sympy.core.mul.py@@Mul.as_content_primitive": "def as_content_primitive(self, radical=False, clear=True):\n    coef = S.One\n    args = []\n    for i, a in enumerate(self.args):\n        c, p = a.as_content_primitive(radical=radical, clear=clear)\n        coef *= c\n        if p is not S.One:\n            args.append(p)\n    return (coef, self.func(*args))",
    ".sympy.core.numbers.py@@Rational.as_content_primitive": "def as_content_primitive(self, radical=False, clear=True):\n    if self:\n        if self.is_positive:\n            return (self, S.One)\n        return (-self, S.NegativeOne)\n    return (S.One, self)",
    ".sympy.core.numbers.py@@Rational._eval_is_positive": "def _eval_is_positive(self):\n    return self.p > 0",
    ".sympy.core.expr.py@@Expr.as_content_primitive": "def as_content_primitive(self, radical=False, clear=True):\n    return (S.One, self)",
    ".sympy.core.mul.py@@_keep_coeff": "def _keep_coeff(coeff, factors, clear=True, sign=False):\n    if not coeff.is_Number:\n        if factors.is_Number:\n            factors, coeff = (coeff, factors)\n        else:\n            return coeff * factors\n    if coeff is S.One:\n        return factors\n    elif coeff is S.NegativeOne and (not sign):\n        return -factors\n    elif factors.is_Add:\n        if not clear and coeff.is_Rational and (coeff.q != 1):\n            q = S(coeff.q)\n            for i in factors.args:\n                c, t = i.as_coeff_Mul()\n                r = c / q\n                if r == int(r):\n                    return coeff * factors\n        return Mul(coeff, factors, evaluate=False)\n    elif factors.is_Mul:\n        margs = list(factors.args)\n        if margs[0].is_Number:\n            margs[0] *= coeff\n            if margs[0] == 1:\n                margs.pop(0)\n        else:\n            margs.insert(0, coeff)\n        return Mul._from_args(margs)\n    else:\n        return coeff * factors",
    ".sympy.core.logic.py@@fuzzy_and": "def fuzzy_and(args):\n    rv = True\n    for ai in args:\n        ai = fuzzy_bool(ai)\n        if ai is False:\n            return False\n        if rv:\n            rv = ai\n    return rv",
    ".sympy.core.logic.py@@fuzzy_bool": "def fuzzy_bool(x):\n    if x is None:\n        return None\n    if x in (True, False):\n        return bool(x)",
    ".sympy.core.expr.py@@Expr.as_independent": "def as_independent(self, *deps, **hint):\n    from .symbol import Symbol\n    from .add import _unevaluated_Add\n    from .mul import _unevaluated_Mul\n    from sympy.utilities.iterables import sift\n    if self.is_zero:\n        return (S.Zero, S.Zero)\n    func = self.func\n    if hint.get('as_Add', isinstance(self, Add)):\n        want = Add\n    else:\n        want = Mul\n    sym = set()\n    other = []\n    for d in deps:\n        if isinstance(d, Symbol):\n            sym.add(d)\n        else:\n            other.append(d)\n\n    def has(e):\n        has_other = e.has(*other)\n        if not sym:\n            return has_other\n        return has_other or e.has(*e.free_symbols & sym)\n    if want is not func or (func is not Add and func is not Mul):\n        if has(self):\n            return (want.identity, self)\n        else:\n            return (self, want.identity)\n    elif func is Add:\n        args = list(self.args)\n    else:\n        args, nc = self.args_cnc()\n    d = sift(args, lambda x: has(x))\n    depend = d[True]\n    indep = d[False]\n    if func is Add:\n        return (Add(*indep), _unevaluated_Add(*depend))\n    else:\n        for i, n in enumerate(nc):\n            if has(n):\n                depend.extend(nc[i:])\n                break\n            indep.append(n)\n        return (Mul(*indep), Mul(*depend, evaluate=False) if nc else _unevaluated_Mul(*depend))",
    ".sympy.core.mul.py@@Mul._eval_is_zero": "def _eval_is_zero(self):\n    zero = infinite = False\n    for a in self.args:\n        z = a.is_zero\n        if z:\n            if infinite:\n                return\n            zero = True\n        else:\n            if not a.is_finite:\n                if zero:\n                    return\n                infinite = True\n            if zero is False and z is None:\n                zero = None\n    return zero",
    ".sympy.core.mul.py@@Mul._eval_is_even": "def _eval_is_even(self):\n    is_integer = self.is_integer\n    if is_integer:\n        return fuzzy_not(self.is_odd)\n    elif is_integer is False:\n        return False",
    ".sympy.core.mul.py@@Mul._eval_is_integer": "def _eval_is_integer(self):\n    is_rational = self.is_rational\n    if is_rational:\n        n, d = self.as_numer_denom()\n        if d is S.One:\n            return True\n        elif d == S(2):\n            return n.is_even\n    elif is_rational is False:\n        return False",
    ".sympy.core.mul.py@@Mul._eval_is_rational": "def _eval_is_rational(self):\n    r = _fuzzy_group((a.is_rational for a in self.args), quick_exit=True)\n    if r:\n        return r\n    elif r is False:\n        return self.is_zero",
    ".sympy.core.logic.py@@_fuzzy_group": "def _fuzzy_group(args, quick_exit=False):\n    saw_other = False\n    for a in args:\n        if a is True:\n            continue\n        if a is None:\n            return\n        if quick_exit and saw_other:\n            return\n        saw_other = True\n    return not saw_other",
    ".sympy.core.mul.py@@Mul._eval_is_odd": "def _eval_is_odd(self):\n    is_integer = self.is_integer\n    if is_integer:\n        r, acc = (True, 1)\n        for t in self.args:\n            if not t.is_integer:\n                return None\n            elif t.is_even:\n                r = False\n            elif t.is_integer:\n                if r is False:\n                    pass\n                elif acc != 1 and (acc + t).is_odd:\n                    r = False\n                elif t.is_odd is None:\n                    r = None\n            acc = t\n        return r\n    elif is_integer is False:\n        return False",
    ".sympy.core.numbers.py@@Integer._eval_is_odd": "def _eval_is_odd(self):\n    return bool(self.p % 2)",
    ".sympy.core.logic.py@@fuzzy_not": "def fuzzy_not(v):\n    if v is None:\n        return v\n    else:\n        return not v",
    ".sympy.core.mul.py@@Mul._eval_is_composite": "def _eval_is_composite(self):\n    number_of_args = 0\n    for arg in self.args:\n        if not (arg.is_integer and arg.is_positive):\n            return None\n        if (arg - 1).is_positive:\n            number_of_args += 1\n    if number_of_args > 1:\n        return True",
    ".sympy.core.numbers.py@@Integer.__sub__": "def __sub__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, integer_types):\n            return Integer(self.p - other)\n        elif isinstance(other, Integer):\n            return Integer(self.p - other.p)\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.q - other.p, other.q, 1)\n        return Rational.__sub__(self, other)\n    return Rational.__sub__(self, other)",
    ".sympy.core.expr.py@@Expr._eval_is_negative": "def _eval_is_negative(self):\n    finite = self.is_finite\n    if finite is False:\n        return False\n    extended_negative = self.is_extended_negative\n    if finite is True:\n        return extended_negative\n    if extended_negative is False:\n        return False",
    ".sympy.core.mul.py@@Mul._eval_is_extended_negative": "def _eval_is_extended_negative(self):\n    return self._eval_pos_neg(-1)",
    ".sympy.core.mul.py@@Mul._eval_pos_neg": "def _eval_pos_neg(self, sign):\n    saw_NON = saw_NOT = False\n    for t in self.args:\n        if t.is_extended_positive:\n            continue\n        elif t.is_extended_negative:\n            sign = -sign\n        elif t.is_zero:\n            if all((a.is_finite for a in self.args)):\n                return False\n            return\n        elif t.is_extended_nonpositive:\n            sign = -sign\n            saw_NON = True\n        elif t.is_extended_nonnegative:\n            saw_NON = True\n        elif t.is_positive is False:\n            sign = -sign\n            if saw_NOT:\n                return\n            saw_NOT = True\n        elif t.is_negative is False:\n            if saw_NOT:\n                return\n            saw_NOT = True\n        else:\n            return\n    if sign == 1 and saw_NON is False and (saw_NOT is False):\n        return True\n    if sign < 0:\n        return False",
    ".sympy.core.mul.py@@Mul._eval_is_extended_positive": "def _eval_is_extended_positive(self):\n    return self._eval_pos_neg(1)",
    ".sympy.core.expr.py@@Expr._eval_is_positive": "def _eval_is_positive(self):\n    finite = self.is_finite\n    if finite is False:\n        return False\n    extended_positive = self.is_extended_positive\n    if finite is True:\n        return extended_positive\n    if extended_positive is False:\n        return False",
    ".sympy.core.expr.py@@Expr.args_cnc": "def args_cnc(self, cset=False, warn=True, split_1=True):\n    if self.is_Mul:\n        args = list(self.args)\n    else:\n        args = [self]\n    for i, mi in enumerate(args):\n        if not mi.is_commutative:\n            c = args[:i]\n            nc = args[i:]\n            break\n    else:\n        c = args\n        nc = []\n    if c and split_1 and (c[0].is_Number and c[0].is_extended_negative and (c[0] is not S.NegativeOne)):\n        c[:1] = [S.NegativeOne, -c[0]]\n    if cset:\n        clen = len(c)\n        c = set(c)\n        if clen and warn and (len(c) != clen):\n            raise ValueError('repeated commutative arguments: %s' % [ci for ci in c if list(self.args).count(ci) > 1])\n    return [c, nc]",
    ".sympy.utilities.iterables.py@@sift": "def sift(seq, keyfunc, binary=False):\n    if not binary:\n        m = defaultdict(list)\n        for i in seq:\n            m[keyfunc(i)].append(i)\n        return m\n    sift = F, T = ([], [])\n    for i in seq:\n        try:\n            sift[keyfunc(i)].append(i)\n        except (IndexError, TypeError):\n            raise ValueError('keyfunc gave non-binary output')\n    return (T, F)",
    ".sympy.core.expr.py@@Expr.has": "def has(e):\n    has_other = e.has(*other)\n    if not sym:\n        return has_other\n    return has_other or e.has(*e.free_symbols & sym)",
    ".sympy.core.basic.py@@Basic.has": "def has(self, *patterns):\n    return any((self._has(pattern) for pattern in patterns))",
    ".sympy.core.basic.py@@Basic._has": "def _has(self, pattern):\n    from sympy.core.function import UndefinedFunction, Function\n    if isinstance(pattern, UndefinedFunction):\n        return any((f.func == pattern or f == pattern for f in self.atoms(Function, UndefinedFunction)))\n    pattern = sympify(pattern)\n    if isinstance(pattern, BasicMeta):\n        return any((isinstance(arg, pattern) for arg in preorder_traversal(self)))\n    _has_matcher = getattr(pattern, '_has_matcher', None)\n    if _has_matcher is not None:\n        match = _has_matcher()\n        return any((match(arg) for arg in preorder_traversal(self)))\n    else:\n        return any((arg == pattern for arg in preorder_traversal(self)))",
    ".sympy.core.basic.py@@Basic._has_matcher": "def _has_matcher(self):\n    return lambda other: self == other",
    ".sympy.core.basic.py@@preorder_traversal.__init__": "def __init__(self, node, keys=None):\n    self._skip_flag = False\n    self._pt = self._preorder_traversal(node, keys)",
    ".sympy.core.basic.py@@preorder_traversal.__iter__": "def __iter__(self):\n    return self",
    ".sympy.core.basic.py@@preorder_traversal.__next__": "def __next__(self):\n    return next(self._pt)",
    ".sympy.core.basic.py@@preorder_traversal._preorder_traversal": "def _preorder_traversal(self, node, keys):\n    yield node\n    if self._skip_flag:\n        self._skip_flag = False\n        return\n    if isinstance(node, Basic):\n        if not keys and hasattr(node, '_argset'):\n            args = node._argset\n        else:\n            args = node.args\n        if keys:\n            if keys != True:\n                args = ordered(args, keys, default=False)\n            else:\n                args = ordered(args)\n        for arg in args:\n            for subtree in self._preorder_traversal(arg, keys):\n                yield subtree\n    elif iterable(node):\n        for item in node:\n            for subtree in self._preorder_traversal(item, keys):\n                yield subtree",
    ".sympy.core.mul.py@@_unevaluated_Mul": "def _unevaluated_Mul(*args):\n    args = list(args)\n    newargs = []\n    ncargs = []\n    co = S.One\n    while args:\n        a = args.pop()\n        if a.is_Mul:\n            c, nc = a.args_cnc()\n            args.extend(c)\n            if nc:\n                ncargs.append(Mul._from_args(nc))\n        elif a.is_Number:\n            co *= a\n        else:\n            newargs.append(a)\n    _mulsort(newargs)\n    if co is not S.One:\n        newargs.insert(0, co)\n    if ncargs:\n        newargs.append(Mul._from_args(ncargs))\n    return Mul._from_args(newargs)",
    ".sympy.polys.polytools.py@@Poly.__new__": "def __new__(cls, rep, *gens, **args):\n    opt = options.build_options(gens, args)\n    if 'order' in opt:\n        raise NotImplementedError(\"'order' keyword is not implemented yet\")\n    if iterable(rep, exclude=str):\n        if isinstance(rep, dict):\n            return cls._from_dict(rep, opt)\n        else:\n            return cls._from_list(list(rep), opt)\n    else:\n        rep = sympify(rep)\n        if rep.is_Poly:\n            return cls._from_poly(rep, opt)\n        else:\n            return cls._from_expr(rep, opt)",
    ".sympy.polys.polyoptions.py@@build_options": "def build_options(gens, args=None):\n    if args is None:\n        gens, args = ((), gens)\n    if len(args) != 1 or 'opt' not in args or gens:\n        return Options(gens, args)\n    else:\n        return args['opt']",
    ".sympy.polys.polyoptions.py@@Options.__init__": "def __init__(self, gens, args, flags=None, strict=False):\n    dict.__init__(self)\n    if gens and args.get('gens', ()):\n        raise OptionError(\"both '*gens' and keyword argument 'gens' supplied\")\n    elif gens:\n        args = dict(args)\n        args['gens'] = gens\n    defaults = args.pop('defaults', {})\n\n    def preprocess_options(args):\n        for option, value in args.items():\n            try:\n                cls = self.__options__[option]\n            except KeyError:\n                raise OptionError(\"'%s' is not a valid option\" % option)\n            if issubclass(cls, Flag):\n                if flags is None or option not in flags:\n                    if strict:\n                        raise OptionError(\"'%s' flag is not allowed in this context\" % option)\n            if value is not None:\n                self[option] = cls.preprocess(value)\n    preprocess_options(args)\n    for key, value in dict(defaults).items():\n        if key in self:\n            del defaults[key]\n        else:\n            for option in self.keys():\n                cls = self.__options__[option]\n                if key in cls.excludes:\n                    del defaults[key]\n                    break\n    preprocess_options(defaults)\n    for option in self.keys():\n        cls = self.__options__[option]\n        for require_option in cls.requires:\n            if self.get(require_option) is None:\n                raise OptionError(\"'%s' option is only allowed together with '%s'\" % (option, require_option))\n        for exclude_option in cls.excludes:\n            if self.get(exclude_option) is not None:\n                raise OptionError(\"'%s' option is not allowed together with '%s'\" % (option, exclude_option))\n    for option in self.__order__:\n        self.__options__[option].postprocess(self)",
    ".sympy.polys.polyoptions.py@@Options.preprocess_options": "def preprocess_options(args):\n    for option, value in args.items():\n        try:\n            cls = self.__options__[option]\n        except KeyError:\n            raise OptionError(\"'%s' is not a valid option\" % option)\n        if issubclass(cls, Flag):\n            if flags is None or option not in flags:\n                if strict:\n                    raise OptionError(\"'%s' flag is not allowed in this context\" % option)\n        if value is not None:\n            self[option] = cls.preprocess(value)",
    ".sympy.polys.polyoptions.py@@Option.postprocess": "def postprocess(cls, options):\n    pass",
    ".sympy.polys.polyoptions.py@@Extension.postprocess": "def postprocess(cls, options):\n    if 'extension' in options and options['extension'] is not True:\n        options['domain'] = sympy.polys.domains.QQ.algebraic_field(*options['extension'])",
    ".sympy.polys.polyoptions.py@@Gaussian.postprocess": "def postprocess(cls, options):\n    if 'gaussian' in options and options['gaussian'] is True:\n        options['extension'] = set([S.ImaginaryUnit])\n        Extension.postprocess(options)",
    ".sympy.polys.polyoptions.py@@Domain.postprocess": "def postprocess(cls, options):\n    if 'gens' in options and 'domain' in options and options['domain'].is_Composite and set(options['domain'].symbols) & set(options['gens']):\n        raise GeneratorsError('ground domain and generators interfere together')\n    elif ('gens' not in options or not options['gens']) and 'domain' in options and (options['domain'] == sympy.polys.domains.EX):\n        raise GeneratorsError('you have to provide generators because EX domain was requested')",
    ".sympy.polys.polyoptions.py@@Auto.postprocess": "def postprocess(cls, options):\n    if ('domain' in options or 'field' in options) and 'auto' not in options:\n        options['auto'] = False",
    ".sympy.polys.polyoptions.py@@Modulus.postprocess": "def postprocess(cls, options):\n    if 'modulus' in options:\n        modulus = options['modulus']\n        symmetric = options.get('symmetric', True)\n        options['domain'] = sympy.polys.domains.FF(modulus, symmetric)",
    ".sympy.polys.polyoptions.py@@Split.postprocess": "def postprocess(cls, options):\n    if 'split' in options:\n        raise NotImplementedError(\"'split' option is not implemented yet\")",
    ".sympy.polys.polytools.py@@Poly._from_expr": "def _from_expr(cls, rep, opt):\n    rep, opt = _dict_from_expr(rep, opt)\n    return cls._from_dict(rep, opt)",
    ".sympy.polys.polyutils.py@@_dict_from_expr": "def _dict_from_expr(expr, opt):\n    if expr.is_commutative is False:\n        raise PolynomialError('non-commutative expressions are not supported')\n\n    def _is_expandable_pow(expr):\n        return expr.is_Pow and expr.exp.is_positive and expr.exp.is_Integer and expr.base.is_Add\n    if opt.expand is not False:\n        if not isinstance(expr, Expr):\n            raise PolynomialError('expression must be of type Expr')\n        expr = expr.expand()\n        while any((_is_expandable_pow(i) or (i.is_Mul and any((_is_expandable_pow(j) for j in i.args))) for i in Add.make_args(expr))):\n            expr = expand_multinomial(expr)\n        while any((i.is_Mul and any((j.is_Add for j in i.args)) for i in Add.make_args(expr))):\n            expr = expand_mul(expr)\n    if opt.gens:\n        rep, gens = _dict_from_expr_if_gens(expr, opt)\n    else:\n        rep, gens = _dict_from_expr_no_gens(expr, opt)\n    return (rep, opt.clone({'gens': gens}))",
    ".sympy.polys.polyoptions.py@@OptionType.getter": "def getter(self):\n    try:\n        return self[cls.option]\n    except KeyError:\n        return cls.default()",
    ".sympy.polys.polyoptions.py@@Expand.default": "def default(cls):\n    return True",
    ".sympy.polys.polyutils.py@@_is_expandable_pow": "def _is_expandable_pow(expr):\n    return expr.is_Pow and expr.exp.is_positive and expr.exp.is_Integer and expr.base.is_Add",
    ".sympy.polys.polyoptions.py@@Gens.default": "def default(cls):\n    return ()",
    ".sympy.polys.polyutils.py@@_dict_from_expr_no_gens": "def _dict_from_expr_no_gens(expr, opt):\n    (poly,), gens = _parallel_dict_from_expr_no_gens((expr,), opt)\n    return (poly, gens)",
    ".sympy.polys.polyutils.py@@_parallel_dict_from_expr_no_gens": "def _parallel_dict_from_expr_no_gens(exprs, opt):\n    if opt.domain is not None:\n\n        def _is_coeff(factor):\n            return factor in opt.domain\n    elif opt.extension is True:\n\n        def _is_coeff(factor):\n            return factor.is_algebraic\n    elif opt.greedy is not False:\n\n        def _is_coeff(factor):\n            return False\n    else:\n\n        def _is_coeff(factor):\n            return factor.is_number\n    gens, reprs = (set([]), [])\n    for expr in exprs:\n        terms = []\n        if expr.is_Equality:\n            expr = expr.lhs - expr.rhs\n        for term in Add.make_args(expr):\n            coeff, elements = ([], {})\n            for factor in Mul.make_args(term):\n                if not _not_a_coeff(factor) and (factor.is_Number or _is_coeff(factor)):\n                    coeff.append(factor)\n                else:\n                    if opt.series is False:\n                        base, exp = decompose_power(factor)\n                        if exp < 0:\n                            exp, base = (-exp, Pow(base, -S.One))\n                    else:\n                        base, exp = decompose_power_rat(factor)\n                    elements[base] = elements.setdefault(base, 0) + exp\n                    gens.add(base)\n            terms.append((coeff, elements))\n        reprs.append(terms)\n    gens = _sort_gens(gens, opt=opt)\n    k, indices = (len(gens), {})\n    for i, g in enumerate(gens):\n        indices[g] = i\n    polys = []\n    for terms in reprs:\n        poly = {}\n        for coeff, term in terms:\n            monom = [0] * k\n            for base, exp in term.items():\n                monom[indices[base]] = exp\n            monom = tuple(monom)\n            if monom in poly:\n                poly[monom] += Mul(*coeff)\n            else:\n                poly[monom] = Mul(*coeff)\n        polys.append(poly)\n    return (polys, tuple(gens))",
    ".sympy.polys.polyoptions.py@@Option.default": "def default(cls):\n    return None",
    ".sympy.polys.polyutils.py@@_not_a_coeff": "def _not_a_coeff(expr):\n    if expr in illegal or expr in finf:\n        return True\n    if type(expr) is float and float(expr) != expr:\n        return True\n    return",
    ".sympy.core.numbers.py@@NaN.__eq__": "def __eq__(self, other):\n    return other is S.NaN",
    ".sympy.core.numbers.py@@Infinity.__eq__": "def __eq__(self, other):\n    return other is S.Infinity or other == float('inf')",
    ".sympy.core.numbers.py@@Float.__new__": "def __new__(cls, num, dps=None, prec=None, precision=None):\n    if prec is not None:\n        SymPyDeprecationWarning(feature=\"Using 'prec=XX' to denote decimal precision\", useinstead=\"'dps=XX' for decimal precision and 'precision=XX' for binary precision\", issue=12820, deprecated_since_version='1.1').warn()\n        dps = prec\n    del prec\n    if dps is not None and precision is not None:\n        raise ValueError('Both decimal and binary precision supplied. Supply only one. ')\n    if isinstance(num, string_types):\n        num = num.replace(' ', '').lower()\n        if '_' in num:\n            parts = num.split('_')\n            if not (all(parts) and all((parts[i][-1].isdigit() for i in range(0, len(parts), 2))) and all((parts[i][0].isdigit() for i in range(1, len(parts), 2)))):\n                raise ValueError(\"could not convert string to float: '%s'\" % num)\n            num = ''.join(parts)\n        if num.startswith('.') and len(num) > 1:\n            num = '0' + num\n        elif num.startswith('-.') and len(num) > 2:\n            num = '-0.' + num[2:]\n        elif num in ('inf', '+inf'):\n            return S.Infinity\n        elif num == '-inf':\n            return S.NegativeInfinity\n    elif isinstance(num, float) and num == 0:\n        num = '0'\n    elif isinstance(num, float) and num == float('inf'):\n        return S.Infinity\n    elif isinstance(num, float) and num == float('-inf'):\n        return S.NegativeInfinity\n    elif isinstance(num, float) and num == float('nan'):\n        return S.NaN\n    elif isinstance(num, (SYMPY_INTS, Integer)):\n        num = str(num)\n    elif num is S.Infinity:\n        return num\n    elif num is S.NegativeInfinity:\n        return num\n    elif num is S.NaN:\n        return num\n    elif type(num).__module__ == 'numpy':\n        num = _convert_numpy_types(num)\n    elif isinstance(num, mpmath.mpf):\n        if precision is None:\n            if dps is None:\n                precision = num.context.prec\n        num = num._mpf_\n    if dps is None and precision is None:\n        dps = 15\n        if isinstance(num, Float):\n            return num\n        if isinstance(num, string_types) and _literal_float(num):\n            try:\n                Num = decimal.Decimal(num)\n            except decimal.InvalidOperation:\n                pass\n            else:\n                isint = '.' not in num\n                num, dps = _decimal_to_Rational_prec(Num)\n                if num.is_Integer and isint:\n                    dps = max(dps, len(str(num).lstrip('-')))\n                dps = max(15, dps)\n                precision = mlib.libmpf.dps_to_prec(dps)\n    elif precision == '' and dps is None or (precision is None and dps == ''):\n        if not isinstance(num, string_types):\n            raise ValueError('The null string can only be used when the number to Float is passed as a string or an integer.')\n        ok = None\n        if _literal_float(num):\n            try:\n                Num = decimal.Decimal(num)\n            except decimal.InvalidOperation:\n                pass\n            else:\n                isint = '.' not in num\n                num, dps = _decimal_to_Rational_prec(Num)\n                if num.is_Integer and isint:\n                    dps = max(dps, len(str(num).lstrip('-')))\n                    precision = mlib.libmpf.dps_to_prec(dps)\n                ok = True\n        if ok is None:\n            raise ValueError('string-float not recognized: %s' % num)\n    if precision is None or precision == '':\n        precision = mlib.libmpf.dps_to_prec(dps)\n    precision = int(precision)\n    if isinstance(num, float):\n        _mpf_ = mlib.from_float(num, precision, rnd)\n    elif isinstance(num, string_types):\n        _mpf_ = mlib.from_str(num, precision, rnd)\n    elif isinstance(num, decimal.Decimal):\n        if num.is_finite():\n            _mpf_ = mlib.from_str(str(num), precision, rnd)\n        elif num.is_nan():\n            return S.NaN\n        elif num.is_infinite():\n            if num > 0:\n                return S.Infinity\n            return S.NegativeInfinity\n        else:\n            raise ValueError('unexpected decimal value %s' % str(num))\n    elif isinstance(num, tuple) and len(num) in (3, 4):\n        if type(num[1]) is str:\n            num = list(num)\n            if num[1].endswith('L'):\n                num[1] = num[1][:-1]\n            num[1] = MPZ(num[1], 16)\n            _mpf_ = tuple(num)\n        elif len(num) == 4:\n            return Float._new(num, precision)\n        else:\n            if not all((num[0] in (0, 1), num[1] >= 0, all((type(i) in (long, int) for i in num)))):\n                raise ValueError('malformed mpf: %s' % (num,))\n            return Float._new((num[0], num[1], num[2], bitcount(num[1])), precision)\n    else:\n        try:\n            _mpf_ = num._as_mpf_val(precision)\n        except (NotImplementedError, AttributeError):\n            _mpf_ = mpmath.mpf(num, prec=precision)._mpf_\n    return cls._new(_mpf_, precision, zero=False)",
    ".sympy.core.numbers.py@@NegativeInfinity.__eq__": "def __eq__(self, other):\n    return other is S.NegativeInfinity or other == float('-inf')",
    ".sympy.polys.polyutils.py@@_is_coeff": "def _is_coeff(factor):\n    return factor.is_number",
    ".sympy.polys.polyoptions.py@@Series.default": "def default(cls):\n    return False",
    ".sympy.core.exprtools.py@@decompose_power": "def decompose_power(expr):\n    base, exp = expr.as_base_exp()\n    if exp.is_Number:\n        if exp.is_Rational:\n            if not exp.is_Integer:\n                base = Pow(base, Rational(1, exp.q))\n            exp = exp.p\n        else:\n            base, exp = (expr, 1)\n    else:\n        exp, tail = exp.as_coeff_Mul(rational=True)\n        if exp is S.NegativeOne:\n            base, exp = (Pow(base, tail), -1)\n        elif exp is not S.One:\n            tail = _keep_coeff(Rational(1, exp.q), tail)\n            base, exp = (Pow(base, tail), exp.p)\n        else:\n            base, exp = (expr, 1)\n    return (base, exp)",
    ".sympy.polys.polyutils.py@@_sort_gens": "def _sort_gens(gens, **args):\n    opt = build_options(args)\n    gens_order, wrt = ({}, None)\n    if opt is not None:\n        gens_order, wrt = ({}, opt.wrt)\n        for i, gen in enumerate(opt.sort):\n            gens_order[gen] = i + 1\n\n    def order_key(gen):\n        gen = str(gen)\n        if wrt is not None:\n            try:\n                return (-len(wrt) + wrt.index(gen), gen, 0)\n            except ValueError:\n                pass\n        name, index = _re_gen.match(gen).groups()\n        if index:\n            index = int(index)\n        else:\n            index = 0\n        try:\n            return (gens_order[name], name, index)\n        except KeyError:\n            pass\n        try:\n            return (_gens_order[name], name, index)\n        except KeyError:\n            pass\n        return (_max_order, name, index)\n    try:\n        gens = sorted(gens, key=order_key)\n    except TypeError:\n        pass\n    return tuple(gens)",
    ".sympy.polys.polyoptions.py@@Sort.default": "def default(cls):\n    return []",
    ".sympy.polys.polyutils.py@@order_key": "def order_key(gen):\n    gen = str(gen)\n    if wrt is not None:\n        try:\n            return (-len(wrt) + wrt.index(gen), gen, 0)\n        except ValueError:\n            pass\n    name, index = _re_gen.match(gen).groups()\n    if index:\n        index = int(index)\n    else:\n        index = 0\n    try:\n        return (gens_order[name], name, index)\n    except KeyError:\n        pass\n    try:\n        return (_gens_order[name], name, index)\n    except KeyError:\n        pass\n    return (_max_order, name, index)",
    ".sympy.polys.polyoptions.py@@Options.clone": "def clone(self, updates={}):\n    obj = dict.__new__(self.__class__)\n    for option, value in self.items():\n        obj[option] = value\n    for option, value in updates.items():\n        obj[option] = value\n    return obj",
    ".sympy.polys.polytools.py@@Poly._from_dict": "def _from_dict(cls, rep, opt):\n    gens = opt.gens\n    if not gens:\n        raise GeneratorsNeeded(\"can't initialize from 'dict' without generators\")\n    level = len(gens) - 1\n    domain = opt.domain\n    if domain is None:\n        domain, rep = construct_domain(rep, opt=opt)\n    else:\n        for monom, coeff in rep.items():\n            rep[monom] = domain.convert(coeff)\n    return cls.new(DMP.from_dict(rep, level, domain), *gens)",
    ".sympy.polys.constructor.py@@construct_domain": "def construct_domain(obj, **args):\n    opt = build_options(args)\n    if hasattr(obj, '__iter__'):\n        if isinstance(obj, dict):\n            if not obj:\n                monoms, coeffs = ([], [])\n            else:\n                monoms, coeffs = list(zip(*list(obj.items())))\n        else:\n            coeffs = obj\n    else:\n        coeffs = [obj]\n    coeffs = list(map(sympify, coeffs))\n    result = _construct_simple(coeffs, opt)\n    if result is not None:\n        if result is not False:\n            domain, coeffs = result\n        else:\n            domain, coeffs = _construct_expression(coeffs, opt)\n    else:\n        if opt.composite is False:\n            result = None\n        else:\n            result = _construct_composite(coeffs, opt)\n        if result is not None:\n            domain, coeffs = result\n        else:\n            domain, coeffs = _construct_expression(coeffs, opt)\n    if hasattr(obj, '__iter__'):\n        if isinstance(obj, dict):\n            return (domain, dict(list(zip(monoms, coeffs))))\n        else:\n            return (domain, coeffs)\n    else:\n        return (domain, coeffs[0])",
    ".sympy.polys.constructor.py@@_construct_simple": "def _construct_simple(coeffs, opt):\n    result, rationals, reals, algebraics = ({}, False, False, False)\n    if opt.extension is True:\n        is_algebraic = lambda coeff: coeff.is_number and coeff.is_algebraic\n    else:\n        is_algebraic = lambda coeff: False\n    for coeff in coeffs:\n        if coeff.is_Rational:\n            if not coeff.is_Integer:\n                rationals = True\n        elif coeff.is_Float:\n            if not algebraics:\n                reals = True\n            else:\n                return False\n        elif is_algebraic(coeff):\n            if not reals:\n                algebraics = True\n            else:\n                return False\n        else:\n            return None\n    if algebraics:\n        domain, result = _construct_algebraic(coeffs, opt)\n    else:\n        if reals:\n            max_prec = max([c._prec for c in coeffs])\n            domain = RealField(prec=max_prec)\n        elif opt.field or rationals:\n            domain = QQ\n        else:\n            domain = ZZ\n        result = []\n        for coeff in coeffs:\n            result.append(domain.from_sympy(coeff))\n    return (domain, result)",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.from_sympy": "def from_sympy(self, a):\n    if a.is_Integer:\n        return PythonInteger(a.p)\n    elif a.is_Float and int(a) == a:\n        return PythonInteger(int(a))\n    else:\n        raise CoercionFailed('expected an integer, got %s' % a)",
    ".sympy.polys.polyclasses.py@@DMP.from_dict": "def from_dict(cls, rep, lev, dom):\n    return cls(dmp_from_dict(rep, lev, dom), dom, lev)",
    ".sympy.polys.densebasic.py@@dmp_from_dict": "def dmp_from_dict(f, u, K):\n    if not u:\n        return dup_from_dict(f, K)\n    if not f:\n        return dmp_zero(u)\n    coeffs = {}\n    for monom, coeff in f.items():\n        head, tail = (monom[0], monom[1:])\n        if head in coeffs:\n            coeffs[head][tail] = coeff\n        else:\n            coeffs[head] = {tail: coeff}\n    n, v, h = (max(coeffs.keys()), u - 1, [])\n    for k in range(n, -1, -1):\n        coeff = coeffs.get(k)\n        if coeff is not None:\n            h.append(dmp_from_dict(coeff, v, K))\n        else:\n            h.append(dmp_zero(v))\n    return dmp_strip(h, u)",
    ".sympy.polys.densebasic.py@@dup_from_dict": "def dup_from_dict(f, K):\n    if not f:\n        return []\n    n, h = (max(f.keys()), [])\n    if type(n) is int:\n        for k in range(n, -1, -1):\n            h.append(f.get(k, K.zero))\n    else:\n        n, = n\n        for k in range(n, -1, -1):\n            h.append(f.get((k,), K.zero))\n    return dup_strip(h)",
    ".sympy.polys.densebasic.py@@dup_strip": "def dup_strip(f):\n    if not f or f[0]:\n        return f\n    i = 0\n    for cf in f:\n        if cf:\n            break\n        else:\n            i += 1\n    return f[i:]",
    ".sympy.polys.densebasic.py@@dmp_zero": "def dmp_zero(u):\n    r = []\n    for i in range(u):\n        r = [r]\n    return r",
    ".sympy.polys.densebasic.py@@dmp_strip": "def dmp_strip(f, u):\n    if not u:\n        return dup_strip(f)\n    if dmp_zero_p(f, u):\n        return f\n    i, v = (0, u - 1)\n    for c in f:\n        if not dmp_zero_p(c, v):\n            break\n        else:\n            i += 1\n    if i == len(f):\n        return dmp_zero(u)\n    else:\n        return f[i:]",
    ".sympy.polys.densebasic.py@@dmp_zero_p": "def dmp_zero_p(f, u):\n    while u:\n        if len(f) != 1:\n            return False\n        f = f[0]\n        u -= 1\n    return not f",
    ".sympy.polys.polyclasses.py@@DMP.__init__": "def __init__(self, rep, dom, lev=None, ring=None):\n    if lev is not None:\n        if type(rep) is dict:\n            rep = dmp_from_dict(rep, lev, dom)\n        elif type(rep) is not list:\n            rep = dmp_ground(dom.convert(rep), lev)\n    else:\n        rep, lev = dmp_validate(rep)\n    self.rep = rep\n    self.lev = lev\n    self.dom = dom\n    self.ring = ring",
    ".sympy.polys.polytools.py@@Poly.new": "def new(cls, rep, *gens):\n    if not isinstance(rep, DMP):\n        raise PolynomialError('invalid polynomial representation: %s' % rep)\n    elif rep.lev != len(gens) - 1:\n        raise PolynomialError('invalid arguments: %s, %s' % (rep, gens))\n    obj = Basic.__new__(cls)\n    obj.rep = rep\n    obj.gens = gens\n    return obj",
    ".sympy.polys.polytools.py@@Poly.as_expr": "def as_expr(f, *gens):\n    if not gens:\n        gens = f.gens\n    elif len(gens) == 1 and isinstance(gens[0], dict):\n        mapping = gens[0]\n        gens = list(f.gens)\n        for gen, value in mapping.items():\n            try:\n                index = gens.index(gen)\n            except ValueError:\n                raise GeneratorsError(\"%s doesn't have %s as generator\" % (f, gen))\n            else:\n                gens[index] = value\n    return basic_from_dict(f.rep.to_sympy_dict(), *gens)",
    ".sympy.polys.polyclasses.py@@DMP.to_sympy_dict": "def to_sympy_dict(f, zero=False):\n    rep = dmp_to_dict(f.rep, f.lev, f.dom, zero=zero)\n    for k, v in rep.items():\n        rep[k] = f.dom.to_sympy(v)\n    return rep",
    ".sympy.polys.densebasic.py@@dmp_to_dict": "def dmp_to_dict(f, u, K=None, zero=False):\n    if not u:\n        return dup_to_dict(f, K, zero=zero)\n    if dmp_zero_p(f, u) and zero:\n        return {(0,) * (u + 1): K.zero}\n    n, v, result = (dmp_degree(f, u), u - 1, {})\n    if n == -oo:\n        n = -1\n    for k in range(0, n + 1):\n        h = dmp_to_dict(f[n - k], v)\n        for exp, coeff in h.items():\n            result[(k,) + exp] = coeff\n    return result",
    ".sympy.polys.densebasic.py@@dmp_degree": "def dmp_degree(f, u):\n    if dmp_zero_p(f, u):\n        return -oo\n    else:\n        return len(f) - 1",
    ".sympy.core.numbers.py@@Infinity.__neg__": "def __neg__(self):\n    return S.NegativeInfinity",
    ".sympy.polys.densebasic.py@@dup_to_dict": "def dup_to_dict(f, K=None, zero=False):\n    if not f and zero:\n        return {(0,): K.zero}\n    n, result = (len(f) - 1, {})\n    for k in range(0, n + 1):\n        if f[n - k]:\n            result[k,] = f[n - k]\n    return result",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.to_sympy": "def to_sympy(self, a):\n    return SymPyInteger(a)",
    ".sympy.polys.polyutils.py@@expr_from_dict": "def expr_from_dict(rep, *gens):\n    result = []\n    for monom, coeff in rep.items():\n        term = [coeff]\n        for g, m in zip(gens, monom):\n            if m:\n                term.append(Pow(g, m))\n        result.append(Mul(*term))\n    return Add(*result)",
    ".sympy.core.power.py@@Pow.__new__": "def __new__(cls, b, e, evaluate=None):\n    if evaluate is None:\n        evaluate = global_evaluate[0]\n    from sympy.functions.elementary.exponential import exp_polar\n    b = _sympify(b)\n    e = _sympify(e)\n    if evaluate:\n        if e is S.ComplexInfinity:\n            return S.NaN\n        if e is S.Zero:\n            return S.One\n        elif e is S.One:\n            return b\n        elif e == -1 and (not b):\n            return S.ComplexInfinity\n        elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and e.is_integer and _coeff_isneg(b):\n            if e.is_even:\n                b = -b\n            elif e.is_odd:\n                return -Pow(-b, e)\n        if S.NaN in (b, e):\n            return S.NaN\n        elif b is S.One:\n            if abs(e).is_infinite:\n                return S.NaN\n            return S.One\n        else:\n            if not e.is_Atom and b is not S.Exp1 and (not isinstance(b, exp_polar)):\n                from sympy import numer, denom, log, sign, im, factor_terms\n                c, ex = factor_terms(e, sign=False).as_coeff_Mul()\n                den = denom(ex)\n                if isinstance(den, log) and den.args[0] == b:\n                    return S.Exp1 ** (c * numer(ex))\n                elif den.is_Add:\n                    s = sign(im(b))\n                    if s.is_Number and s and (den == log(-factor_terms(b, sign=False)) + s * S.ImaginaryUnit * S.Pi):\n                        return S.Exp1 ** (c * numer(ex))\n            obj = b._eval_power(e)\n            if obj is not None:\n                return obj\n    obj = Expr.__new__(cls, b, e)\n    obj = cls._exec_constructor_postprocessors(obj)\n    if not isinstance(obj, Pow):\n        return obj\n    obj.is_commutative = b.is_commutative and e.is_commutative\n    return obj",
    ".sympy.core.expr.py@@Expr.is_polynomial": "def is_polynomial(self, *syms):\n    if syms:\n        syms = set(map(sympify, syms))\n    else:\n        syms = self.free_symbols\n    if syms.intersection(self.free_symbols) == set([]):\n        return True\n    else:\n        return self._eval_is_polynomial(syms)",
    ".sympy.core.mul.py@@Mul._eval_is_polynomial": "def _eval_is_polynomial(self, syms):\n    return all((term._eval_is_polynomial(syms) for term in self.args))",
    ".sympy.core.expr.py@@AtomicExpr._eval_is_polynomial": "def _eval_is_polynomial(self, syms):\n    return True",
    ".sympy.solvers.diophantine.py@@classify_diop": "def classify_diop(eq, _dict=True):\n    try:\n        var = list(eq.free_symbols)\n        assert var\n    except (AttributeError, AssertionError):\n        raise ValueError('equation should have 1 or more free symbols')\n    var.sort(key=default_sort_key)\n    eq = eq.expand(force=True)\n    coeff = eq.as_coefficients_dict()\n    if not all((_is_int(c) for c in coeff.values())):\n        raise TypeError('Coefficients should be Integers')\n    diop_type = None\n    total_degree = Poly(eq).total_degree()\n    homogeneous = 1 not in coeff\n    if total_degree == 1:\n        diop_type = 'linear'\n    elif len(var) == 1:\n        diop_type = 'univariate'\n    elif total_degree == 2 and len(var) == 2:\n        diop_type = 'binary_quadratic'\n    elif total_degree == 2 and len(var) == 3 and homogeneous:\n        if set(coeff) & set(var):\n            diop_type = 'inhomogeneous_ternary_quadratic'\n        else:\n            nonzero = [k for k in coeff if coeff[k]]\n            if len(nonzero) == 3 and all((i ** 2 in nonzero for i in var)):\n                diop_type = 'homogeneous_ternary_quadratic_normal'\n            else:\n                diop_type = 'homogeneous_ternary_quadratic'\n    elif total_degree == 2 and len(var) >= 3:\n        if set(coeff) & set(var):\n            diop_type = 'inhomogeneous_general_quadratic'\n        elif any((k.is_Mul for k in coeff)):\n            if not homogeneous:\n                diop_type = 'inhomogeneous_general_quadratic'\n            else:\n                diop_type = 'homogeneous_general_quadratic'\n        elif all((coeff[k] == 1 for k in coeff if k != 1)):\n            diop_type = 'general_sum_of_squares'\n        elif all((is_square(abs(coeff[k])) for k in coeff)):\n            if abs(sum((sign(coeff[k]) for k in coeff))) == len(var) - 2:\n                diop_type = 'general_pythagorean'\n    elif total_degree == 3 and len(var) == 2:\n        diop_type = 'cubic_thue'\n    elif total_degree > 3 and total_degree % 2 == 0 and all((k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):\n        if all((coeff[k] == 1 for k in coeff if k != 1)):\n            diop_type = 'general_sum_of_even_powers'\n    if diop_type is not None:\n        return (var, dict(coeff) if _dict else coeff, diop_type)\n    raise NotImplementedError(filldedent('\\n        This equation is not yet recognized or else has not been\\n        simplified sufficiently to put it in a form recognized by\\n        diop_classify().'))",
    ".sympy.core.mul.py@@Mul.as_coefficients_dict": "def as_coefficients_dict(self):\n    d = defaultdict(int)\n    args = self.args\n    if len(args) == 1 or not args[0].is_Number:\n        d[self] = S.One\n    else:\n        d[self._new_rawargs(*args[1:])] = args[0]\n    return d",
    ".sympy.solvers.diophantine.py@@_is_int": "def _is_int(i):\n    try:\n        as_int(i)\n        return True\n    except ValueError:\n        pass",
    ".sympy.core.compatibility.py@@as_int": "def as_int(n, strict=True):\n    from sympy.core.numbers import Integer\n    try:\n        if strict and (not isinstance(n, SYMPY_INTS + (Integer,))):\n            raise TypeError\n        result = int(n)\n        if result != n:\n            raise TypeError\n        return result\n    except TypeError:\n        raise ValueError('%s is not an integer' % (n,))",
    ".sympy.core.numbers.py@@Integer.__int__": "def __int__(self):\n    return self.p",
    ".sympy.core.numbers.py@@Integer.__ne__": "def __ne__(self, other):\n    return not self == other",
    ".sympy.core.numbers.py@@Integer.__eq__": "def __eq__(self, other):\n    if isinstance(other, integer_types):\n        return self.p == other\n    elif isinstance(other, Integer):\n        return self.p == other.p\n    return Rational.__eq__(self, other)",
    ".sympy.polys.polytools.py@@Poly.total_degree": "def total_degree(f):\n    if hasattr(f.rep, 'total_degree'):\n        return f.rep.total_degree()\n    else:\n        raise OperationNotSupported(f, 'total_degree')",
    ".sympy.polys.polyclasses.py@@DMP.total_degree": "def total_degree(f):\n    return max((sum(m) for m in f.monoms()))",
    ".sympy.polys.polyclasses.py@@DMP.monoms": "def monoms(f, order=None):\n    return [m for m, _ in dmp_list_terms(f.rep, f.lev, f.dom, order=order)]",
    ".sympy.polys.densebasic.py@@dmp_list_terms": "def dmp_list_terms(f, u, K, order=None):\n\n    def sort(terms, O):\n        return sorted(terms, key=lambda term: O(term[0]), reverse=True)\n    terms = _rec_list_terms(f, u, ())\n    if not terms:\n        return [((0,) * (u + 1), K.zero)]\n    if order is None:\n        return terms\n    else:\n        return sort(terms, monomial_key(order))",
    ".sympy.polys.densebasic.py@@_rec_list_terms": "def _rec_list_terms(g, v, monom):\n    d, terms = (dmp_degree(g, v), [])\n    if not v:\n        for i, c in enumerate(g):\n            if not c:\n                continue\n            terms.append((monom + (d - i,), c))\n    else:\n        w = v - 1\n        for i, c in enumerate(g):\n            terms.extend(_rec_list_terms(c, w, monom + (d - i,)))\n    return terms",
    ".sympy.polys.polytools.py@@factor_list": "def factor_list(f, *gens, **args):\n    return _generic_factor_list(f, gens, args, method='factor')",
    ".sympy.polys.polytools.py@@_generic_factor_list": "def _generic_factor_list(expr, gens, args, method):\n    options.allowed_flags(args, ['frac', 'polys'])\n    opt = options.build_options(gens, args)\n    expr = sympify(expr)\n    if isinstance(expr, Expr) and (not expr.is_Relational):\n        numer, denom = together(expr).as_numer_denom()\n        cp, fp = _symbolic_factor_list(numer, opt, method)\n        cq, fq = _symbolic_factor_list(denom, opt, method)\n        if fq and (not opt.frac):\n            raise PolynomialError('a polynomial expected, got %s' % expr)\n        _opt = opt.clone(dict(expand=True))\n        for factors in (fp, fq):\n            for i, (f, k) in enumerate(factors):\n                if not f.is_Poly:\n                    f, _ = _poly_from_expr(f, _opt)\n                    factors[i] = (f, k)\n        fp = _sorted_factors(fp, method)\n        fq = _sorted_factors(fq, method)\n        if not opt.polys:\n            fp = [(f.as_expr(), k) for f, k in fp]\n            fq = [(f.as_expr(), k) for f, k in fq]\n        coeff = cp / cq\n        if not opt.frac:\n            return (coeff, fp)\n        else:\n            return (coeff, fp, fq)\n    else:\n        raise PolynomialError('a polynomial expected, got %s' % expr)",
    ".sympy.polys.polyoptions.py@@allowed_flags": "def allowed_flags(args, flags):\n    flags = set(flags)\n    for arg in args.keys():\n        try:\n            if Options.__options__[arg].is_Flag and (not arg in flags):\n                raise FlagError(\"'%s' flag is not allowed in this context\" % arg)\n        except KeyError:\n            raise OptionError(\"'%s' is not a valid option\" % arg)",
    ".sympy.polys.rationaltools.py@@together": "def together(expr, deep=False, fraction=True):\n\n    def _together(expr):\n        if isinstance(expr, Basic):\n            if expr.is_Atom or (expr.is_Function and (not deep)):\n                return expr\n            elif expr.is_Add:\n                return gcd_terms(list(map(_together, Add.make_args(expr))), fraction=fraction)\n            elif expr.is_Pow:\n                base = _together(expr.base)\n                if deep:\n                    exp = _together(expr.exp)\n                else:\n                    exp = expr.exp\n                return expr.__class__(base, exp)\n            else:\n                return expr.__class__(*[_together(arg) for arg in expr.args])\n        elif iterable(expr):\n            return expr.__class__([_together(ex) for ex in expr])\n        return expr\n    return _together(sympify(expr))",
    ".sympy.polys.rationaltools.py@@_together": "def _together(expr):\n    if isinstance(expr, Basic):\n        if expr.is_Atom or (expr.is_Function and (not deep)):\n            return expr\n        elif expr.is_Add:\n            return gcd_terms(list(map(_together, Add.make_args(expr))), fraction=fraction)\n        elif expr.is_Pow:\n            base = _together(expr.base)\n            if deep:\n                exp = _together(expr.exp)\n            else:\n                exp = expr.exp\n            return expr.__class__(base, exp)\n        else:\n            return expr.__class__(*[_together(arg) for arg in expr.args])\n    elif iterable(expr):\n        return expr.__class__([_together(ex) for ex in expr])\n    return expr",
    ".sympy.polys.polytools.py@@_symbolic_factor_list": "def _symbolic_factor_list(expr, opt, method):\n    coeff, factors = (S.One, [])\n    args = [i._eval_factor() if hasattr(i, '_eval_factor') else i for i in Mul.make_args(expr)]\n    for arg in args:\n        if arg.is_Number:\n            coeff *= arg\n            continue\n        if arg.is_Mul:\n            args.extend(arg.args)\n            continue\n        if arg.is_Pow:\n            base, exp = arg.args\n            if base.is_Number and exp.is_Number:\n                coeff *= arg\n                continue\n            if base.is_Number:\n                factors.append((base, exp))\n                continue\n        else:\n            base, exp = (arg, S.One)\n        try:\n            poly, _ = _poly_from_expr(base, opt)\n        except PolificationFailed as exc:\n            factors.append((exc.expr, exp))\n        else:\n            func = getattr(poly, method + '_list')\n            _coeff, _factors = func()\n            if _coeff is not S.One:\n                if exp.is_Integer:\n                    coeff *= _coeff ** exp\n                elif _coeff.is_positive:\n                    factors.append((_coeff, exp))\n                else:\n                    _factors.append((_coeff, S.One))\n            if exp is S.One:\n                factors.extend(_factors)\n            elif exp.is_integer:\n                factors.extend([(f, k * exp) for f, k in _factors])\n            else:\n                other = []\n                for f, k in _factors:\n                    if f.as_expr().is_positive:\n                        factors.append((f, k * exp))\n                    else:\n                        other.append((f, k))\n                factors.append((_factors_product(other), exp))\n    return (coeff, factors)",
    ".sympy.polys.polytools.py@@_poly_from_expr": "def _poly_from_expr(expr, opt):\n    orig, expr = (expr, sympify(expr))\n    if not isinstance(expr, Basic):\n        raise PolificationFailed(opt, orig, expr)\n    elif expr.is_Poly:\n        poly = expr.__class__._from_poly(expr, opt)\n        opt.gens = poly.gens\n        opt.domain = poly.domain\n        if opt.polys is None:\n            opt.polys = True\n        return (poly, opt)\n    elif opt.expand:\n        expr = expr.expand()\n    rep, opt = _dict_from_expr(expr, opt)\n    if not opt.gens:\n        raise PolificationFailed(opt, orig, expr)\n    monoms, coeffs = list(zip(*list(rep.items())))\n    domain = opt.domain\n    if domain is None:\n        opt.domain, coeffs = construct_domain(coeffs, opt=opt)\n    else:\n        coeffs = list(map(domain.from_sympy, coeffs))\n    rep = dict(list(zip(monoms, coeffs)))\n    poly = Poly._from_dict(rep, opt)\n    if opt.polys is None:\n        opt.polys = False\n    return (poly, opt)",
    ".sympy.polys.polyoptions.py@@Options.__setattr__": "def __setattr__(self, attr, value):\n    if attr in self.__options__:\n        self[attr] = value\n    else:\n        super(Options, self).__setattr__(attr, value)",
    ".sympy.polys.domains.domain.py@@Domain.convert": "def convert(self, element, base=None):\n    if _not_a_coeff(element):\n        raise CoercionFailed('%s is not in any domain' % element)\n    if base is not None:\n        return self.convert_from(element, base)\n    if self.of_type(element):\n        return element\n    from sympy.polys.domains import PythonIntegerRing, GMPYIntegerRing, GMPYRationalField, RealField, ComplexField\n    if isinstance(element, integer_types):\n        return self.convert_from(element, PythonIntegerRing())\n    if HAS_GMPY:\n        integers = GMPYIntegerRing()\n        if isinstance(element, integers.tp):\n            return self.convert_from(element, integers)\n        rationals = GMPYRationalField()\n        if isinstance(element, rationals.tp):\n            return self.convert_from(element, rationals)\n    if isinstance(element, float):\n        parent = RealField(tol=False)\n        return self.convert_from(parent(element), parent)\n    if isinstance(element, complex):\n        parent = ComplexField(tol=False)\n        return self.convert_from(parent(element), parent)\n    if isinstance(element, DomainElement):\n        return self.convert_from(element, element.parent())\n    if self.is_Numerical and getattr(element, 'is_ground', False):\n        return self.convert(element.LC())\n    if isinstance(element, Basic):\n        try:\n            return self.from_sympy(element)\n        except (TypeError, ValueError):\n            pass\n    elif not is_sequence(element):\n        try:\n            element = sympify(element)\n            if isinstance(element, Basic):\n                return self.from_sympy(element)\n        except (TypeError, ValueError):\n            pass\n    raise CoercionFailed(\"can't convert %s of type %s to %s\" % (element, type(element), self))",
    ".sympy.polys.domains.domain.py@@Domain.of_type": "def of_type(self, element):\n    return isinstance(element, self.tp)",
    ".sympy.polys.domains.domain.py@@Domain.tp": "def tp(self):\n    return self.dtype",
    ".sympy.polys.polytools.py@@Poly.factor_list": "def factor_list(f):\n    if hasattr(f.rep, 'factor_list'):\n        try:\n            coeff, factors = f.rep.factor_list()\n        except DomainError:\n            return (S.One, [(f, 1)])\n    else:\n        raise OperationNotSupported(f, 'factor_list')\n    return (f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors])",
    ".sympy.polys.polyclasses.py@@DMP.factor_list": "def factor_list(f):\n    coeff, factors = dmp_factor_list(f.rep, f.lev, f.dom)\n    return (coeff, [(f.per(g), k) for g, k in factors])",
    ".sympy.polys.factortools.py@@dmp_factor_list": "def dmp_factor_list(f, u, K0):\n    if not u:\n        return dup_factor_list(f, K0)\n    J, f = dmp_terms_gcd(f, u, K0)\n    cont, f = dmp_ground_primitive(f, u, K0)\n    if K0.is_FiniteField:\n        coeff, factors = dmp_gf_factor(f, u, K0)\n    elif K0.is_Algebraic:\n        coeff, factors = dmp_ext_factor(f, u, K0)\n    else:\n        if not K0.is_Exact:\n            K0_inexact, K0 = (K0, K0.get_exact())\n            f = dmp_convert(f, u, K0_inexact, K0)\n        else:\n            K0_inexact = None\n        if K0.is_Field:\n            K = K0.get_ring()\n            denom, f = dmp_clear_denoms(f, u, K0, K)\n            f = dmp_convert(f, u, K0, K)\n        else:\n            K = K0\n        if K.is_ZZ:\n            levels, f, v = dmp_exclude(f, u, K)\n            coeff, factors = dmp_zz_factor(f, v, K)\n            for i, (f, k) in enumerate(factors):\n                factors[i] = (dmp_include(f, levels, v, K), k)\n        elif K.is_Poly:\n            f, v = dmp_inject(f, u, K)\n            coeff, factors = dmp_factor_list(f, v, K.dom)\n            for i, (f, k) in enumerate(factors):\n                factors[i] = (dmp_eject(f, v, K), k)\n            coeff = K.convert(coeff, K.dom)\n        else:\n            raise DomainError('factorization not supported over %s' % K0)\n        if K0.is_Field:\n            for i, (f, k) in enumerate(factors):\n                factors[i] = (dmp_convert(f, u, K, K0), k)\n            coeff = K0.convert(coeff, K)\n            coeff = K0.quo(coeff, denom)\n            if K0_inexact:\n                for i, (f, k) in enumerate(factors):\n                    max_norm = dmp_max_norm(f, u, K0)\n                    f = dmp_quo_ground(f, max_norm, u, K0)\n                    f = dmp_convert(f, u, K0, K0_inexact)\n                    factors[i] = (f, k)\n                    coeff = K0.mul(coeff, K0.pow(max_norm, k))\n                coeff = K0_inexact.convert(coeff, K0)\n                K0 = K0_inexact\n    for i, j in enumerate(reversed(J)):\n        if not j:\n            continue\n        term = {(0,) * (u - i) + (1,) + (0,) * i: K0.one}\n        factors.insert(0, (dmp_from_dict(term, u, K0), j))\n    return (coeff * cont, _sort_factors(factors))",
    ".sympy.polys.factortools.py@@dup_factor_list": "def dup_factor_list(f, K0):\n    j, f = dup_terms_gcd(f, K0)\n    cont, f = dup_primitive(f, K0)\n    if K0.is_FiniteField:\n        coeff, factors = dup_gf_factor(f, K0)\n    elif K0.is_Algebraic:\n        coeff, factors = dup_ext_factor(f, K0)\n    else:\n        if not K0.is_Exact:\n            K0_inexact, K0 = (K0, K0.get_exact())\n            f = dup_convert(f, K0_inexact, K0)\n        else:\n            K0_inexact = None\n        if K0.is_Field:\n            K = K0.get_ring()\n            denom, f = dup_clear_denoms(f, K0, K)\n            f = dup_convert(f, K0, K)\n        else:\n            K = K0\n        if K.is_ZZ:\n            coeff, factors = dup_zz_factor(f, K)\n        elif K.is_Poly:\n            f, u = dmp_inject(f, 0, K)\n            coeff, factors = dmp_factor_list(f, u, K.dom)\n            for i, (f, k) in enumerate(factors):\n                factors[i] = (dmp_eject(f, u, K), k)\n            coeff = K.convert(coeff, K.dom)\n        else:\n            raise DomainError('factorization not supported over %s' % K0)\n        if K0.is_Field:\n            for i, (f, k) in enumerate(factors):\n                factors[i] = (dup_convert(f, K, K0), k)\n            coeff = K0.convert(coeff, K)\n            coeff = K0.quo(coeff, denom)\n            if K0_inexact:\n                for i, (f, k) in enumerate(factors):\n                    max_norm = dup_max_norm(f, K0)\n                    f = dup_quo_ground(f, max_norm, K0)\n                    f = dup_convert(f, K0, K0_inexact)\n                    factors[i] = (f, k)\n                    coeff = K0.mul(coeff, K0.pow(max_norm, k))\n                coeff = K0_inexact.convert(coeff, K0)\n                K0 = K0_inexact\n    if j:\n        factors.insert(0, ([K0.one, K0.zero], j))\n    return (coeff * cont, _sort_factors(factors))",
    ".sympy.polys.densebasic.py@@dup_terms_gcd": "def dup_terms_gcd(f, K):\n    if dup_TC(f, K) or not f:\n        return (0, f)\n    i = 0\n    for c in reversed(f):\n        if not c:\n            i += 1\n        else:\n            break\n    return (i, f[:-i])",
    ".sympy.polys.densebasic.py@@poly_TC": "def poly_TC(f, K):\n    if not f:\n        return K.zero\n    else:\n        return f[-1]",
    ".sympy.polys.densetools.py@@dup_primitive": "def dup_primitive(f, K):\n    if not f:\n        return (K.zero, f)\n    cont = dup_content(f, K)\n    if K.is_one(cont):\n        return (cont, f)\n    else:\n        return (cont, dup_quo_ground(f, cont, K))",
    ".sympy.polys.densetools.py@@dup_content": "def dup_content(f, K):\n    from sympy.polys.domains import QQ\n    if not f:\n        return K.zero\n    cont = K.zero\n    if K == QQ:\n        for c in f:\n            cont = K.gcd(cont, c)\n    else:\n        for c in f:\n            cont = K.gcd(cont, c)\n            if K.is_one(cont):\n                break\n    return cont",
    ".sympy.polys.domains.domain.py@@Domain.__eq__": "def __eq__(self, other):\n    return isinstance(other, Domain) and self.dtype == other.dtype",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.gcd": "def gcd(self, a, b):\n    return python_gcd(a, b)",
    ".sympy.polys.domains.domain.py@@Domain.is_one": "def is_one(self, a):\n    return a == self.one",
    ".sympy.polys.factortools.py@@dup_zz_factor": "def dup_zz_factor(f, K):\n    cont, g = dup_primitive(f, K)\n    n = dup_degree(g)\n    if dup_LC(g, K) < 0:\n        cont, g = (-cont, dup_neg(g, K))\n    if n <= 0:\n        return (cont, [])\n    elif n == 1:\n        return (cont, [(g, 1)])\n    if query('USE_IRREDUCIBLE_IN_FACTOR'):\n        if dup_zz_irreducible_p(g, K):\n            return (cont, [(g, 1)])\n    g = dup_sqf_part(g, K)\n    H = None\n    if query('USE_CYCLOTOMIC_FACTOR'):\n        H = dup_zz_cyclotomic_factor(g, K)\n    if H is None:\n        H = dup_zz_zassenhaus(g, K)\n    factors = dup_trial_division(f, H, K)\n    return (cont, factors)",
    ".sympy.polys.densebasic.py@@dup_degree": "def dup_degree(f):\n    if not f:\n        return -oo\n    return len(f) - 1",
    ".sympy.polys.densebasic.py@@poly_LC": "def poly_LC(f, K):\n    if not f:\n        return K.zero\n    else:\n        return f[0]",
    ".sympy.polys.polyutils.py@@_sort_factors": "def _sort_factors(factors, **args):\n\n    def order_if_multiple_key(factor):\n        f, n = factor\n        return (len(f), n, f)\n\n    def order_no_multiple_key(f):\n        return (len(f), f)\n    if args.get('multiple', True):\n        return sorted(factors, key=order_if_multiple_key)\n    else:\n        return sorted(factors, key=order_no_multiple_key)",
    ".sympy.polys.polyutils.py@@order_if_multiple_key": "def order_if_multiple_key(factor):\n    f, n = factor\n    return (len(f), n, f)",
    ".sympy.polys.polyclasses.py@@DMP.per": "def per(f, rep, dom=None, kill=False, ring=None):\n    lev = f.lev\n    if kill:\n        if not lev:\n            return rep\n        else:\n            lev -= 1\n    if dom is None:\n        dom = f.dom\n    if ring is None:\n        ring = f.ring\n    return DMP(rep, dom, lev, ring)",
    ".sympy.polys.polytools.py@@Poly.per": "def per(f, rep, gens=None, remove=None):\n    if gens is None:\n        gens = f.gens\n    if remove is not None:\n        gens = gens[:remove] + gens[remove + 1:]\n        if not gens:\n            return f.rep.dom.to_sympy(rep)\n    return f.__class__.new(rep, *gens)",
    ".sympy.polys.polytools.py@@_sorted_factors": "def _sorted_factors(factors, method):\n    if method == 'sqf':\n\n        def key(obj):\n            poly, exp = obj\n            rep = poly.rep.rep\n            return (exp, len(rep), len(poly.gens), rep)\n    else:\n\n        def key(obj):\n            poly, exp = obj\n            rep = poly.rep.rep\n            return (len(rep), len(poly.gens), exp, rep)\n    return sorted(factors, key=key)",
    ".sympy.polys.polytools.py@@key": "def key(obj):\n    poly, exp = obj\n    rep = poly.rep.rep\n    return (len(rep), len(poly.gens), exp, rep)",
    ".sympy.core.decorators.py@@__sympifyit_wrapper": "def __sympifyit_wrapper(a, b):\n    try:\n        if not hasattr(b, '_op_priority'):\n            b = sympify(b, strict=True)\n        return func(a, b)\n    except SympifyError:\n        return retval",
    ".sympy.core.numbers.py@@Rational.__div__": "def __div__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, Integer):\n            if self.p and other.p == S.Zero:\n                return S.ComplexInfinity\n            else:\n                return Rational(self.p, self.q * other.p, igcd(self.p, other.p))\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.q, self.q * other.p, igcd(self.p, other.p) * igcd(self.q, other.q))\n        elif isinstance(other, Float):\n            return self * (1 / other)\n        else:\n            return Number.__div__(self, other)\n    return Number.__div__(self, other)",
    ".sympy.core.numbers.py@@Rational.__new__": "def __new__(cls, p, q=None, gcd=None):\n    if q is None:\n        if isinstance(p, Rational):\n            return p\n        if isinstance(p, SYMPY_INTS):\n            pass\n        else:\n            if isinstance(p, (float, Float)):\n                return Rational(*_as_integer_ratio(p))\n            if not isinstance(p, string_types):\n                try:\n                    p = sympify(p)\n                except (SympifyError, SyntaxError):\n                    pass\n            else:\n                if p.count('/') > 1:\n                    raise TypeError('invalid input: %s' % p)\n                p = p.replace(' ', '')\n                pq = p.rsplit('/', 1)\n                if len(pq) == 2:\n                    p, q = pq\n                    fp = fractions.Fraction(p)\n                    fq = fractions.Fraction(q)\n                    p = fp / fq\n                try:\n                    p = fractions.Fraction(p)\n                except ValueError:\n                    pass\n                else:\n                    return Rational(p.numerator, p.denominator, 1)\n            if not isinstance(p, Rational):\n                raise TypeError('invalid input: %s' % p)\n        q = 1\n        gcd = 1\n    else:\n        p = Rational(p)\n        q = Rational(q)\n    if isinstance(q, Rational):\n        p *= q.q\n        q = q.p\n    if isinstance(p, Rational):\n        q *= p.q\n        p = p.p\n    if q == 0:\n        if p == 0:\n            if _errdict['divide']:\n                raise ValueError('Indeterminate 0/0')\n            else:\n                return S.NaN\n        return S.ComplexInfinity\n    if q < 0:\n        q = -q\n        p = -p\n    if not gcd:\n        gcd = igcd(abs(p), q)\n    if gcd > 1:\n        p //= gcd\n        q //= gcd\n    if q == 1:\n        return Integer(p)\n    if p == 1 and q == 2:\n        return S.Half\n    obj = Expr.__new__(cls)\n    obj.p = p\n    obj.q = q\n    return obj",
    ".sympy.polys.polyoptions.py@@Frac.default": "def default(cls):\n    return False",
    ".sympy.core.expr.py@@Expr.as_coefficients_dict": "def as_coefficients_dict(self):\n    c, m = self.as_coeff_Mul()\n    if not c.is_Rational:\n        c = S.One\n        m = self\n    d = defaultdict(int)\n    d.update({m: c})\n    return d",
    ".sympy.core.expr.py@@Expr.as_coeff_Mul": "def as_coeff_Mul(self, rational=False):\n    return (S.One, self)",
    ".sympy.simplify.simplify.py@@signsimp": "def signsimp(expr, evaluate=None):\n    if evaluate is None:\n        evaluate = global_evaluate[0]\n    expr = sympify(expr)\n    if not isinstance(expr, Expr) or expr.is_Atom:\n        return expr\n    e = sub_post(sub_pre(expr))\n    if not isinstance(e, Expr) or e.is_Atom:\n        return e\n    if e.is_Add:\n        return e.func(*[signsimp(a, evaluate) for a in e.args])\n    if evaluate:\n        e = e.xreplace({m: --m for m in e.atoms(Mul) if --m != m})\n    return e",
    ".sympy.solvers.diophantine.py@@diop_solve": "def diop_solve(eq, param=symbols('t', integer=True)):\n    var, coeff, eq_type = classify_diop(eq, _dict=False)\n    if eq_type == 'linear':\n        return _diop_linear(var, coeff, param)\n    elif eq_type == 'binary_quadratic':\n        return _diop_quadratic(var, coeff, param)\n    elif eq_type == 'homogeneous_ternary_quadratic':\n        x_0, y_0, z_0 = _diop_ternary_quadratic(var, coeff)\n        return _parametrize_ternary_quadratic((x_0, y_0, z_0), var, coeff)\n    elif eq_type == 'homogeneous_ternary_quadratic_normal':\n        x_0, y_0, z_0 = _diop_ternary_quadratic_normal(var, coeff)\n        return _parametrize_ternary_quadratic((x_0, y_0, z_0), var, coeff)\n    elif eq_type == 'general_pythagorean':\n        return _diop_general_pythagorean(var, coeff, param)\n    elif eq_type == 'univariate':\n        return set([(int(i),) for i in solveset_real(eq, var[0]).intersect(S.Integers)])\n    elif eq_type == 'general_sum_of_squares':\n        return _diop_general_sum_of_squares(var, -int(coeff[1]), limit=S.Infinity)\n    elif eq_type == 'general_sum_of_even_powers':\n        for k in coeff.keys():\n            if k.is_Pow and coeff[k]:\n                p = k.exp\n        return _diop_general_sum_of_even_powers(var, p, -int(coeff[1]), limit=S.Infinity)\n    if eq_type is not None and eq_type not in diop_known:\n        raise ValueError(filldedent('\\n    Alhough this type of equation was identified, it is not yet\\n    handled. It should, however, be listed in `diop_known` at the\\n    top of this file. Developers should see comments at the end of\\n    `classify_diop`.\\n            '))\n    else:\n        raise NotImplementedError('No solver has been written for %s.' % eq_type)",
    ".sympy.solvers.diophantine.py@@_diop_linear": "def _diop_linear(var, coeff, param):\n    if 1 in coeff:\n        c = -coeff[1]\n    else:\n        c = 0\n    if param is None:\n        params = [symbols('t')] * len(var)\n    else:\n        temp = str(param) + '_%i'\n        params = [symbols(temp % i, integer=True) for i in range(len(var))]\n    if len(var) == 1:\n        q, r = divmod(c, coeff[var[0]])\n        if not r:\n            return (q,)\n        else:\n            return (None,)\n    \"\\n    base_solution_linear() can solve diophantine equations of the form:\\n\\n    a*x + b*y == c\\n\\n    We break down multivariate linear diophantine equations into a\\n    series of bivariate linear diophantine equations which can then\\n    be solved individually by base_solution_linear().\\n\\n    Consider the following:\\n\\n    a_0*x_0 + a_1*x_1 + a_2*x_2 == c\\n\\n    which can be re-written as:\\n\\n    a_0*x_0 + g_0*y_0 == c\\n\\n    where\\n\\n    g_0 == gcd(a_1, a_2)\\n\\n    and\\n\\n    y == (a_1*x_1)/g_0 + (a_2*x_2)/g_0\\n\\n    This leaves us with two binary linear diophantine equations.\\n    For the first equation:\\n\\n    a == a_0\\n    b == g_0\\n    c == c\\n\\n    For the second:\\n\\n    a == a_1/g_0\\n    b == a_2/g_0\\n    c == the solution we find for y_0 in the first equation.\\n\\n    The arrays A and B are the arrays of integers used for\\n    'a' and 'b' in each of the n-1 bivariate equations we solve.\\n    \"\n    A = [coeff[v] for v in var]\n    B = []\n    if len(var) > 2:\n        B.append(igcd(A[-2], A[-1]))\n        A[-2] = A[-2] // B[0]\n        A[-1] = A[-1] // B[0]\n        for i in range(len(A) - 3, 0, -1):\n            gcd = igcd(B[0], A[i])\n            B[0] = B[0] // gcd\n            A[i] = A[i] // gcd\n            B.insert(0, gcd)\n    B.append(A[-1])\n    \"\\n    Consider the trivariate linear equation:\\n\\n    4*x_0 + 6*x_1 + 3*x_2 == 2\\n\\n    This can be re-written as:\\n\\n    4*x_0 + 3*y_0 == 2\\n\\n    where\\n\\n    y_0 == 2*x_1 + x_2\\n    (Note that gcd(3, 6) == 3)\\n\\n    The complete integral solution to this equation is:\\n\\n    x_0 ==  2 + 3*t_0\\n    y_0 == -2 - 4*t_0\\n\\n    where 't_0' is any integer.\\n\\n    Now that we have a solution for 'x_0', find 'x_1' and 'x_2':\\n\\n    2*x_1 + x_2 == -2 - 4*t_0\\n\\n    We can then solve for '-2' and '-4' independently,\\n    and combine the results:\\n\\n    2*x_1a + x_2a == -2\\n    x_1a == 0 + t_0\\n    x_2a == -2 - 2*t_0\\n\\n    2*x_1b + x_2b == -4*t_0\\n    x_1b == 0*t_0 + t_1\\n    x_2b == -4*t_0 - 2*t_1\\n\\n    ==>\\n\\n    x_1 == t_0 + t_1\\n    x_2 == -2 - 6*t_0 - 2*t_1\\n\\n    where 't_0' and 't_1' are any integers.\\n\\n    Note that:\\n\\n    4*(2 + 3*t_0) + 6*(t_0 + t_1) + 3*(-2 - 6*t_0 - 2*t_1) == 2\\n\\n    for any integral values of 't_0', 't_1'; as required.\\n\\n    This method is generalised for many variables, below.\\n\\n    \"\n    solutions = []\n    for i in range(len(B)):\n        tot_x, tot_y = ([], [])\n        for j, arg in enumerate(Add.make_args(c)):\n            if arg.is_Integer:\n                k, p = (arg, S.One)\n                pnew = params[0]\n            else:\n                k, p = arg.as_coeff_Mul()\n                pnew = params[params.index(p) + 1]\n            sol = sol_x, sol_y = base_solution_linear(k, A[i], B[i], pnew)\n            if p is S.One:\n                if None in sol:\n                    return tuple([None] * len(var))\n            else:\n                if isinstance(sol_x, Add):\n                    sol_x = sol_x.args[0] * p + sol_x.args[1]\n                if isinstance(sol_y, Add):\n                    sol_y = sol_y.args[0] * p + sol_y.args[1]\n            tot_x.append(sol_x)\n            tot_y.append(sol_y)\n        solutions.append(Add(*tot_x))\n        c = Add(*tot_y)\n    solutions.append(c)\n    if param is None:\n        solutions = [i.as_coeff_Add()[0] for i in solutions]\n    return tuple(solutions)",
    ".sympy.core.symbol.py@@symbols": "def symbols(names, **args):\n    result = []\n    if isinstance(names, string_types):\n        marker = 0\n        literals = ['\\\\,', '\\\\:', '\\\\ ']\n        for i in range(len(literals)):\n            lit = literals.pop(0)\n            if lit in names:\n                while chr(marker) in names:\n                    marker += 1\n                lit_char = chr(marker)\n                marker += 1\n                names = names.replace(lit, lit_char)\n                literals.append((lit_char, lit[1:]))\n\n        def literal(s):\n            if literals:\n                for c, l in literals:\n                    s = s.replace(c, l)\n            return s\n        names = names.strip()\n        as_seq = names.endswith(',')\n        if as_seq:\n            names = names[:-1].rstrip()\n        if not names:\n            raise ValueError('no symbols given')\n        names = [n.strip() for n in names.split(',')]\n        if not all((n for n in names)):\n            raise ValueError('missing symbol between commas')\n        for i in range(len(names) - 1, -1, -1):\n            names[i:i + 1] = names[i].split()\n        cls = args.pop('cls', Symbol)\n        seq = args.pop('seq', as_seq)\n        for name in names:\n            if not name:\n                raise ValueError('missing symbol')\n            if ':' not in name:\n                symbol = cls(literal(name), **args)\n                result.append(symbol)\n                continue\n            split = _range.split(name)\n            for i in range(len(split) - 1):\n                if i and ':' in split[i] and (split[i] != ':') and split[i - 1].endswith('(') and split[i + 1].startswith(')'):\n                    split[i - 1] = split[i - 1][:-1]\n                    split[i + 1] = split[i + 1][1:]\n            for i, s in enumerate(split):\n                if ':' in s:\n                    if s[-1].endswith(':'):\n                        raise ValueError('missing end range')\n                    a, b = s.split(':')\n                    if b[-1] in string.digits:\n                        a = 0 if not a else int(a)\n                        b = int(b)\n                        split[i] = [str(c) for c in range(a, b)]\n                    else:\n                        a = a or 'a'\n                        split[i] = [string.ascii_letters[c] for c in range(string.ascii_letters.index(a), string.ascii_letters.index(b) + 1)]\n                    if not split[i]:\n                        break\n                else:\n                    split[i] = [s]\n            else:\n                seq = True\n                if len(split) == 1:\n                    names = split[0]\n                else:\n                    names = [''.join(s) for s in cartes(*split)]\n                if literals:\n                    result.extend([cls(literal(s), **args) for s in names])\n                else:\n                    result.extend([cls(s, **args) for s in names])\n        if not seq and len(result) <= 1:\n            if not result:\n                return ()\n            return result[0]\n        return tuple(result)\n    else:\n        for name in names:\n            result.append(symbols(name, **args))\n        return type(names)(result)",
    ".sympy.core.symbol.py@@literal": "def literal(s):\n    if literals:\n        for c, l in literals:\n            s = s.replace(c, l)\n    return s",
    ".sympy.core.symbol.py@@Symbol.__new__": "def __new__(cls, name, **assumptions):\n    cls._sanitize(assumptions, cls)\n    return Symbol.__xnew_cached_(cls, name, **assumptions)",
    ".sympy.core.symbol.py@@Symbol._sanitize": "def _sanitize(assumptions, obj=None):\n    is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n    if is_commutative is None:\n        whose = '%s ' % obj.__name__ if obj else ''\n        raise ValueError('%scommutativity must be True or False.' % whose)\n    for key in list(assumptions.keys()):\n        from collections import defaultdict\n        from sympy.utilities.exceptions import SymPyDeprecationWarning\n        keymap = defaultdict(lambda: None)\n        keymap.update({'bounded': 'finite', 'unbounded': 'infinite', 'infinitesimal': 'zero'})\n        if keymap[key]:\n            SymPyDeprecationWarning(feature='%s assumption' % key, useinstead='%s' % keymap[key], issue=8071, deprecated_since_version='0.7.6').warn()\n            assumptions[keymap[key]] = assumptions[key]\n            assumptions.pop(key)\n            key = keymap[key]\n        v = assumptions[key]\n        if v is None:\n            assumptions.pop(key)\n            continue\n        assumptions[key] = bool(v)",
    ".sympy.core.symbol.py@@Symbol.__new_stage2__": "def __new_stage2__(cls, name, **assumptions):\n    if not isinstance(name, string_types):\n        raise TypeError('name should be a string, not %s' % repr(type(name)))\n    obj = Expr.__new__(cls)\n    obj.name = name\n    tmp_asm_copy = assumptions.copy()\n    is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n    assumptions['commutative'] = is_commutative\n    obj._assumptions = StdFactKB(assumptions)\n    obj._assumptions._generator = tmp_asm_copy\n    return obj",
    ".sympy.core.numbers.py@@Integer.__rdivmod__": "def __rdivmod__(self, other):\n    from .containers import Tuple\n    if isinstance(other, integer_types) and global_evaluate[0]:\n        return Tuple(*divmod(other, self.p))\n    else:\n        try:\n            other = Number(other)\n        except TypeError:\n            msg = \"unsupported operand type(s) for divmod(): '%s' and '%s'\"\n            oname = type(other).__name__\n            sname = type(self).__name__\n            raise TypeError(msg % (oname, sname))\n        return Number.__divmod__(other, self)",
    ".sympy.core.containers.py@@Tuple.__new__": "def __new__(cls, *args, **kwargs):\n    if kwargs.get('sympify', True):\n        args = (sympify(arg) for arg in args)\n    obj = Basic.__new__(cls, *args)\n    return obj",
    ".sympy.core.containers.py@@Tuple.__iter__": "def __iter__(self):\n    return iter(self.args)",
    ".sympy.solvers.diophantine.py@@merge_solution": "def merge_solution(var, var_t, solution):\n    sol = []\n    if None in solution:\n        return ()\n    solution = iter(solution)\n    params = numbered_symbols('n', integer=True, start=1)\n    for v in var:\n        if v in var_t:\n            sol.append(next(solution))\n        else:\n            sol.append(next(params))\n    for val, symb in zip(sol, var):\n        if check_assumptions(val, **symb.assumptions0) is False:\n            return tuple()\n    return tuple(sol)",
    ".sympy.core.numbers.py@@Rational.__eq__": "def __eq__(self, other):\n    from sympy.core.power import integer_log\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if not isinstance(other, Number):\n        return False\n    if not self:\n        return not other\n    if other.is_NumberSymbol:\n        if other.is_irrational:\n            return False\n        return other.__eq__(self)\n    if other.is_Rational:\n        return self.p == other.p and self.q == other.q\n    if other.is_Float:\n        if self.q & self.q - 1:\n            return False\n        s, m, t = other._mpf_[:3]\n        if s:\n            m = -m\n        if not t:\n            if not self.is_Integer or self.is_even:\n                return False\n            return m == self.p\n        if t > 0:\n            if not self.is_Integer:\n                return False\n            return self.p and (not self.p % m) and (integer_log(self.p // m, 2) == (t, True))\n        if self.is_Integer:\n            return False\n        return m == self.p and integer_log(self.q, 2) == (-t, True)\n    return False",
    ".sympy.core.sympify.py@@SympifyError.__init__": "def __init__(self, expr, base_exc=None):\n    self.expr = expr\n    self.base_exc = base_exc",
    ".sympy.utilities.iterables.py@@numbered_symbols": "def numbered_symbols(prefix='x', cls=None, start=0, exclude=[], *args, **assumptions):\n    exclude = set(exclude or [])\n    if cls is None:\n        from sympy import Symbol\n        cls = Symbol\n    while True:\n        name = '%s%s' % (prefix, start)\n        s = cls(name, *args, **assumptions)\n        if s not in exclude:\n            yield s\n        start += 1",
    ".sympy.solvers.solvers.py@@check_assumptions": "def check_assumptions(expr, against=None, **assumptions):\n    expr = sympify(expr)\n    if against:\n        if not isinstance(against, Symbol):\n            raise TypeError('against should be of type Symbol')\n        if assumptions:\n            raise AssertionError('No assumptions should be specified')\n        assumptions = against.assumptions0\n\n    def _test(key):\n        v = getattr(expr, 'is_' + key, None)\n        if v is not None:\n            return assumptions[key] is v\n    return fuzzy_and((_test(key) for key in assumptions))",
    ".sympy.solvers.solvers.py@@_test": "def _test(key):\n    v = getattr(expr, 'is_' + key, None)\n    if v is not None:\n        return assumptions[key] is v",
    ".sympy.core.power.py@@Pow._eval_expand_multinomial": "def _eval_expand_multinomial(self, **hints):\n    base, exp = self.args\n    result = self\n    if exp.is_Rational and exp.p > 0 and base.is_Add:\n        if not exp.is_Integer:\n            n = Integer(exp.p // exp.q)\n            if not n:\n                return result\n            else:\n                radical, result = (self.func(base, exp - n), [])\n                expanded_base_n = self.func(base, n)\n                if expanded_base_n.is_Pow:\n                    expanded_base_n = expanded_base_n._eval_expand_multinomial()\n                for term in Add.make_args(expanded_base_n):\n                    result.append(term * radical)\n                return Add(*result)\n        n = int(exp)\n        if base.is_commutative:\n            order_terms, other_terms = ([], [])\n            for b in base.args:\n                if b.is_Order:\n                    order_terms.append(b)\n                else:\n                    other_terms.append(b)\n            if order_terms:\n                f = Add(*other_terms)\n                o = Add(*order_terms)\n                if n == 2:\n                    return expand_multinomial(f ** n, deep=False) + n * f * o\n                else:\n                    g = expand_multinomial(f ** (n - 1), deep=False)\n                    return expand_mul(f * g, deep=False) + n * g * o\n            if base.is_number:\n                a, b = base.as_real_imag()\n                if a.is_Rational and b.is_Rational:\n                    if not a.is_Integer:\n                        if not b.is_Integer:\n                            k = self.func(a.q * b.q, n)\n                            a, b = (a.p * b.q, a.q * b.p)\n                        else:\n                            k = self.func(a.q, n)\n                            a, b = (a.p, a.q * b)\n                    elif not b.is_Integer:\n                        k = self.func(b.q, n)\n                        a, b = (a * b.q, b.p)\n                    else:\n                        k = 1\n                    a, b, c, d = (int(a), int(b), 1, 0)\n                    while n:\n                        if n & 1:\n                            c, d = (a * c - b * d, b * c + a * d)\n                            n -= 1\n                        a, b = (a * a - b * b, 2 * a * b)\n                        n //= 2\n                    I = S.ImaginaryUnit\n                    if k == 1:\n                        return c + I * d\n                    else:\n                        return Integer(c) / k + I * d / k\n            p = other_terms\n            from sympy import multinomial_coefficients\n            from sympy.polys.polyutils import basic_from_dict\n            expansion_dict = multinomial_coefficients(len(p), n)\n            return basic_from_dict(expansion_dict, *p)\n        elif n == 2:\n            return Add(*[f * g for f in base.args for g in base.args])\n        else:\n            multi = (base ** (n - 1))._eval_expand_multinomial()\n            if multi.is_Add:\n                return Add(*[f * g for f in base.args for g in multi.args])\n            else:\n                return Add(*[f * multi for f in base.args])\n    elif exp.is_Rational and exp.p < 0 and base.is_Add and (abs(exp.p) > exp.q):\n        return 1 / self.func(base, -exp)._eval_expand_multinomial()\n    elif exp.is_Add and base.is_Number:\n        coeff, tail = (S.One, S.Zero)\n        for term in exp.args:\n            if term.is_Number:\n                coeff *= self.func(base, term)\n            else:\n                tail += term\n        return coeff * self.func(base, tail)\n    else:\n        return result",
    ".sympy.core.power.py@@Pow.as_base_exp": "def as_base_exp(self):\n    b, e = self.args\n    if b.is_Rational and b.p == 1 and (b.q != 1):\n        return (Integer(b.q), -e)\n    return (b, e)",
    ".sympy.core.expr.py@@Expr._eval_is_extended_negative": "def _eval_is_extended_negative(self):\n    return self._eval_is_extended_positive_negative(positive=False)",
    ".sympy.core.expr.py@@Expr._eval_is_extended_positive_negative": "def _eval_is_extended_positive_negative(self, positive):\n    from sympy.polys.numberfields import minimal_polynomial\n    from sympy.polys.polyerrors import NotAlgebraic\n    if self.is_number:\n        if self.is_extended_real is False:\n            return False\n        try:\n            n2 = self._eval_evalf(2)\n        except ValueError:\n            return None\n        if n2 is None:\n            return None\n        if getattr(n2, '_prec', 1) == 1:\n            return None\n        if n2 is S.NaN:\n            return None\n        r, i = self.evalf(2).as_real_imag()\n        if not i.is_Number or not r.is_Number:\n            return False\n        if r._prec != 1 and i._prec != 1:\n            return bool(not i and (r > 0 if positive else r < 0))\n        elif r._prec == 1 and (not i or i._prec == 1) and self.is_algebraic and (not self.has(Function)):\n            try:\n                if minimal_polynomial(self).is_Symbol:\n                    return False\n            except (NotAlgebraic, NotImplementedError):\n                pass",
    ".sympy.core.numbers.py@@Number._eval_evalf": "def _eval_evalf(self, prec):\n    return Float._new(self._as_mpf_val(prec), prec)",
    ".sympy.core.numbers.py@@Integer._as_mpf_val": "def _as_mpf_val(self, prec):\n    return mlib.from_int(self.p, prec, rnd)",
    ".sympy.core.numbers.py@@Float._new": "def _new(cls, _mpf_, _prec, zero=True):\n    if zero and _mpf_ == fzero:\n        return S.Zero\n    elif _mpf_ == _mpf_nan:\n        return S.NaN\n    elif _mpf_ == _mpf_inf:\n        return S.Infinity\n    elif _mpf_ == _mpf_ninf:\n        return S.NegativeInfinity\n    obj = Expr.__new__(cls)\n    obj._mpf_ = mpf_norm(_mpf_, _prec)\n    obj._prec = _prec\n    return obj",
    ".sympy.core.numbers.py@@mpf_norm": "def mpf_norm(mpf, prec):\n    sign, man, expt, bc = mpf\n    if not man:\n        if not bc:\n            return fzero\n        else:\n            return mpf\n    from mpmath.libmp.backend import MPZ\n    rv = mpf_normalize(sign, MPZ(man), expt, bc, prec, rnd)\n    return rv",
    ".sympy.core.evalf.py@@EvalfMixin.evalf": "def evalf(self, n=15, subs=None, maxn=100, chop=False, strict=False, quad=None, verbose=False):\n    from sympy import Float, Number\n    n = n if n is not None else 15\n    if subs and is_sequence(subs):\n        raise TypeError('subs must be given as a dictionary')\n    if n == 1 and isinstance(self, Number):\n        from sympy.core.expr import _mag\n        rv = self.evalf(2, subs, maxn, chop, strict, quad, verbose)\n        m = _mag(rv)\n        rv = rv.round(1 - m)\n        return rv\n    if not evalf_table:\n        _create_evalf_table()\n    prec = dps_to_prec(n)\n    options = {'maxprec': max(prec, int(maxn * LG10)), 'chop': chop, 'strict': strict, 'verbose': verbose}\n    if subs is not None:\n        options['subs'] = subs\n    if quad is not None:\n        options['quad'] = quad\n    try:\n        result = evalf(self, prec + 4, options)\n    except NotImplementedError:\n        v = self._eval_evalf(prec)\n        if v is None:\n            return self\n        elif not v.is_number:\n            return v\n        try:\n            result = evalf(v, prec, options)\n        except NotImplementedError:\n            return v\n    re, im, re_acc, im_acc = result\n    if re:\n        p = max(min(prec, re_acc), 1)\n        re = Float._new(re, p)\n    else:\n        re = S.Zero\n    if im:\n        p = max(min(prec, im_acc), 1)\n        im = Float._new(im, p)\n        return re + im * S.ImaginaryUnit\n    else:\n        return re",
    ".sympy.core.evalf.py@@evalf": "def evalf(x, prec, options):\n    from sympy import re as re_, im as im_\n    try:\n        rf = evalf_table[x.func]\n        r = rf(x, prec, options)\n    except KeyError:\n        if 'subs' in options:\n            x = x.subs(evalf_subs(prec, options['subs']))\n        xe = x._eval_evalf(prec)\n        if xe is None:\n            raise NotImplementedError\n        as_real_imag = getattr(xe, 'as_real_imag', None)\n        if as_real_imag is None:\n            raise NotImplementedError\n        re, im = as_real_imag()\n        if re.has(re_) or im.has(im_):\n            raise NotImplementedError\n        if re == 0:\n            re = None\n            reprec = None\n        elif re.is_number:\n            re = re._to_mpmath(prec, allow_ints=False)._mpf_\n            reprec = prec\n        else:\n            raise NotImplementedError\n        if im == 0:\n            im = None\n            imprec = None\n        elif im.is_number:\n            im = im._to_mpmath(prec, allow_ints=False)._mpf_\n            imprec = prec\n        else:\n            raise NotImplementedError\n        r = (re, im, reprec, imprec)\n    if options.get('verbose'):\n        print('### input', x)\n        print('### output', to_str(r[0] or fzero, 50))\n        print('### raw', r)\n        print()\n    chop = options.get('chop', False)\n    if chop:\n        if chop is True:\n            chop_prec = prec\n        else:\n            chop_prec = int(round(-3.321 * math.log10(chop) + 2.5))\n            if chop_prec == 3:\n                chop_prec -= 1\n        r = chop_parts(r, chop_prec)\n    if options.get('strict'):\n        check_target(x, r, prec)\n    return r",
    ".sympy.core.expr.py@@Expr.as_real_imag": "def as_real_imag(self, deep=True, **hints):\n    from sympy import im, re\n    if hints.get('ignore') == self:\n        return None\n    else:\n        return (re(self), im(self))",
    ".sympy.core.numbers.py@@Float.__eq__": "def __eq__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if not self:\n        return not other\n    if other.is_NumberSymbol:\n        if other.is_irrational:\n            return False\n        return other.__eq__(self)\n    if other.is_Float:\n        return self._mpf_ == other._mpf_\n    if other.is_Rational:\n        return other.__eq__(self)\n    if other.is_Number:\n        ompf = other._as_mpf_val(self._prec)\n        return bool(mlib.mpf_eq(self._mpf_, ompf))\n    return False",
    ".sympy.core.function.py@@Function.__new__": "def __new__(cls, *args, **options):\n    if cls is Function:\n        return UndefinedFunction(*args, **options)\n    n = len(args)\n    if n not in cls.nargs:\n        temp = '%(name)s takes %(qual)s %(args)s argument%(plural)s (%(given)s given)'\n        raise TypeError(temp % {'name': cls, 'qual': 'exactly' if len(cls.nargs) == 1 else 'at least', 'args': min(cls.nargs), 'plural': 's' * (min(cls.nargs) != 1), 'given': n})\n    evaluate = options.get('evaluate', global_evaluate[0])\n    result = super(Function, cls).__new__(cls, *args, **options)\n    if evaluate and isinstance(result, cls) and result.args:\n        pr2 = min((cls._should_evalf(a) for a in result.args))\n        if pr2 > 0:\n            pr = max((cls._should_evalf(a) for a in result.args))\n            result = result.evalf(mlib.libmpf.prec_to_dps(pr))\n    return result",
    ".sympy.core.function.py@@FunctionClass.nargs": "def nargs(self):\n    from sympy.sets.sets import FiniteSet\n    return FiniteSet(*self._nargs) if self._nargs else S.Naturals0",
    ".sympy.sets.sets.py@@FiniteSet.__new__": "def __new__(cls, *args, **kwargs):\n    evaluate = kwargs.get('evaluate', global_evaluate[0])\n    if evaluate:\n        args = list(map(sympify, args))\n        if len(args) == 0:\n            return S.EmptySet\n    else:\n        args = list(map(sympify, args))\n    _args_set = set(args)\n    args = list(ordered(_args_set, Set._infimum_key))\n    obj = Basic.__new__(cls, *args)\n    obj._args_set = _args_set\n    return obj",
    ".sympy.core.compatibility.py@@ordered": "def ordered(seq, keys=None, default=True, warn=False):\n    d = defaultdict(list)\n    if keys:\n        if not isinstance(keys, (list, tuple)):\n            keys = [keys]\n        keys = list(keys)\n        f = keys.pop(0)\n        for a in seq:\n            d[f(a)].append(a)\n    else:\n        if not default:\n            raise ValueError('if default=False then keys must be provided')\n        d[None].extend(seq)\n    for k in sorted(d.keys()):\n        if len(d[k]) > 1:\n            if keys:\n                d[k] = ordered(d[k], keys, default, warn)\n            elif default:\n                d[k] = ordered(d[k], (_nodes, default_sort_key), default=False, warn=warn)\n            elif warn:\n                from sympy.utilities.iterables import uniq\n                u = list(uniq(d[k]))\n                if len(u) > 1:\n                    raise ValueError('not enough keys to break ties: %s' % u)\n        for v in d[k]:\n            yield v\n        d.pop(k)",
    ".sympy.sets.sets.py@@Set._infimum_key": "def _infimum_key(expr):\n    try:\n        infimum = expr.inf\n        assert infimum.is_comparable\n    except (NotImplementedError, AttributeError, AssertionError, ValueError):\n        infimum = S.Infinity\n    return infimum",
    ".sympy.core.numbers.py@@Infinity.__hash__": "def __hash__(self):\n    return super(Infinity, self).__hash__()",
    ".sympy.core.numbers.py@@Number.__hash__": "def __hash__(self):\n    return super(Number, self).__hash__()",
    ".sympy.sets.sets.py@@Set.__contains__": "def __contains__(self, other):\n    other = _sympify(other)\n    c = self._contains(other)\n    b = tfn[c]\n    if b is None:\n        raise TypeError('did not evaluate to a bool: %r' % c)\n    return b",
    ".sympy.sets.sets.py@@FiniteSet._contains": "def _contains(self, other):\n    if other in self._args_set:\n        return True\n    else:\n        return fuzzy_or((fuzzy_bool(Eq(e, other, evaluate=True)) for e in self.args))",
    ".sympy.logic.boolalg.py@@BooleanTrue.__nonzero__": "def __nonzero__(self):\n    return True",
    ".sympy.core.function.py@@Application.__new__": "def __new__(cls, *args, **options):\n    from sympy.sets.fancysets import Naturals0\n    from sympy.sets.sets import FiniteSet\n    args = list(map(sympify, args))\n    evaluate = options.pop('evaluate', global_evaluate[0])\n    options.pop('nargs', None)\n    if options:\n        raise ValueError('Unknown options: %s' % options)\n    if evaluate:\n        evaluated = cls.eval(*args)\n        if evaluated is not None:\n            return evaluated\n    obj = super(Application, cls).__new__(cls, *args, **options)\n    sentinel = object()\n    objnargs = getattr(obj, 'nargs', sentinel)\n    if objnargs is not sentinel:\n        if is_sequence(objnargs):\n            nargs = tuple(ordered(set(objnargs)))\n        elif objnargs is not None:\n            nargs = (as_int(objnargs),)\n        else:\n            nargs = None\n    else:\n        nargs = obj._nargs\n    obj.nargs = FiniteSet(*nargs) if nargs else Naturals0()\n    return obj",
    ".sympy.functions.elementary.complexes.py@@re.eval": "def eval(cls, arg):\n    if arg is S.NaN:\n        return S.NaN\n    elif arg is S.ComplexInfinity:\n        return S.NaN\n    elif arg.is_extended_real:\n        return arg\n    elif arg.is_imaginary or (S.ImaginaryUnit * arg).is_extended_real:\n        return S.Zero\n    elif arg.is_Matrix:\n        return arg.as_real_imag()[0]\n    elif arg.is_Function and isinstance(arg, conjugate):\n        return re(arg.args[0])\n    else:\n        included, reverted, excluded = ([], [], [])\n        args = Add.make_args(arg)\n        for term in args:\n            coeff = term.as_coefficient(S.ImaginaryUnit)\n            if coeff is not None:\n                if not coeff.is_extended_real:\n                    reverted.append(coeff)\n            elif not term.has(S.ImaginaryUnit) and term.is_extended_real:\n                excluded.append(term)\n            else:\n                real_imag = term.as_real_imag(ignore=arg)\n                if real_imag:\n                    excluded.append(real_imag[0])\n                else:\n                    included.append(term)\n        if len(args) != len(included):\n            a, b, c = (Add(*xs) for xs in [included, reverted, excluded])\n            return cls(a) - im(b) + c",
    ".sympy.functions.elementary.complexes.py@@im.eval": "def eval(cls, arg):\n    if arg is S.NaN:\n        return S.NaN\n    elif arg is S.ComplexInfinity:\n        return S.NaN\n    elif arg.is_extended_real:\n        return S.Zero\n    elif arg.is_imaginary or (S.ImaginaryUnit * arg).is_extended_real:\n        return -S.ImaginaryUnit * arg\n    elif arg.is_Matrix:\n        return arg.as_real_imag()[1]\n    elif arg.is_Function and isinstance(arg, conjugate):\n        return -im(arg.args[0])\n    else:\n        included, reverted, excluded = ([], [], [])\n        args = Add.make_args(arg)\n        for term in args:\n            coeff = term.as_coefficient(S.ImaginaryUnit)\n            if coeff is not None:\n                if not coeff.is_extended_real:\n                    reverted.append(coeff)\n                else:\n                    excluded.append(coeff)\n            elif term.has(S.ImaginaryUnit) or not term.is_extended_real:\n                real_imag = term.as_real_imag(ignore=arg)\n                if real_imag:\n                    excluded.append(real_imag[1])\n                else:\n                    included.append(term)\n        if len(args) != len(included):\n            a, b, c = (Add(*xs) for xs in [included, reverted, excluded])\n            return cls(a) + re(b) + c",
    ".sympy.core.numbers.py@@Float.__lt__": "def __lt__(self, other):\n    if isinstance(other, NumberSymbol):\n        return other.__gt__(self)\n    rv = self._Frel(other, mlib.mpf_lt)\n    if rv is None:\n        return Expr.__lt__(self, other)\n    return rv",
    ".sympy.core.numbers.py@@Float._Frel": "def _Frel(self, other, op):\n    from sympy.core.evalf import evalf\n    from sympy.core.numbers import prec_to_dps\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if other.is_Rational:\n        '\\n        >>> f = Float(.1,2)\\n        >>> i = 1234567890\\n        >>> (f*i)._mpf_\\n        (0, 471, 18, 9)\\n        >>> mlib.mpf_mul(f._mpf_, mlib.from_int(i))\\n        (0, 505555550955, -12, 39)\\n        '\n        smpf = mlib.mpf_mul(self._mpf_, mlib.from_int(other.q))\n        ompf = mlib.from_int(other.p)\n        return _sympify(bool(op(smpf, ompf)))\n    elif other.is_Float:\n        return _sympify(bool(op(self._mpf_, other._mpf_)))\n    elif other.is_comparable and other not in (S.Infinity, S.NegativeInfinity):\n        other = other.evalf(prec_to_dps(self._prec))\n        if other._prec > 1:\n            if other.is_Number:\n                return _sympify(bool(op(self._mpf_, other._as_mpf_val(self._prec))))",
    ".sympy.logic.boolalg.py@@BooleanFalse.__nonzero__": "def __nonzero__(self):\n    return False",
    ".sympy.core.function.py@@_coeff_isneg": "def _coeff_isneg(a):\n    if a.is_MatMul:\n        a = a.args[0]\n    if a.is_Mul:\n        a = a.args[0]\n    return a.is_Number and a.is_extended_negative",
    ".sympy.core.expr.py@@Expr._eval_power": "def _eval_power(self, other):\n    return None",
    ".sympy.core.power.py@@Pow._eval_expand_power_base": "def _eval_expand_power_base(self, **hints):\n    force = hints.get('force', False)\n    b = self.base\n    e = self.exp\n    if not b.is_Mul:\n        return self\n    cargs, nc = b.args_cnc(split_1=False)\n    if nc:\n        nc = [i._eval_expand_power_base(**hints) if hasattr(i, '_eval_expand_power_base') else i for i in nc]\n        if e.is_Integer:\n            if e.is_positive:\n                rv = Mul(*nc * e)\n            else:\n                rv = Mul(*[i ** (-1) for i in nc[::-1]] * -e)\n            if cargs:\n                rv *= Mul(*cargs) ** e\n            return rv\n        if not cargs:\n            return self.func(Mul(*nc), e, evaluate=False)\n        nc = [Mul(*nc)]\n    other, maybe_real = sift(cargs, lambda x: x.is_extended_real is False, binary=True)\n\n    def pred(x):\n        if x is S.ImaginaryUnit:\n            return S.ImaginaryUnit\n        polar = x.is_polar\n        if polar:\n            return True\n        if polar is None:\n            return fuzzy_bool(x.is_extended_nonnegative)\n    sifted = sift(maybe_real, pred)\n    nonneg = sifted[True]\n    other += sifted[None]\n    neg = sifted[False]\n    imag = sifted[S.ImaginaryUnit]\n    if imag:\n        I = S.ImaginaryUnit\n        i = len(imag) % 4\n        if i == 0:\n            pass\n        elif i == 1:\n            other.append(I)\n        elif i == 2:\n            if neg:\n                nonn = -neg.pop()\n                if nonn is not S.One:\n                    nonneg.append(nonn)\n            else:\n                neg.append(S.NegativeOne)\n        else:\n            if neg:\n                nonn = -neg.pop()\n                if nonn is not S.One:\n                    nonneg.append(nonn)\n            else:\n                neg.append(S.NegativeOne)\n            other.append(I)\n        del imag\n    if force or e.is_integer:\n        cargs = nonneg + neg + other\n        other = nc\n    else:\n        assert not e.is_Integer\n        if len(neg) > 1:\n            o = S.One\n            if not other and neg[0].is_Number:\n                o *= neg.pop(0)\n            if len(neg) % 2:\n                o = -o\n            for n in neg:\n                nonneg.append(-n)\n            if o is not S.One:\n                other.append(o)\n        elif neg and other:\n            if neg[0].is_Number and neg[0] is not S.NegativeOne:\n                other.append(S.NegativeOne)\n                nonneg.append(-neg[0])\n            else:\n                other.extend(neg)\n        else:\n            other.extend(neg)\n        del neg\n        cargs = nonneg\n        other += nc\n    rv = S.One\n    if cargs:\n        rv *= Mul(*[self.func(b, e, evaluate=False) for b in cargs])\n    if other:\n        rv *= self.func(Mul(*other), e, evaluate=False)\n    return rv",
    ".sympy.core.power.py@@Pow.base": "def base(self):\n    return self._args[0]",
    ".sympy.core.power.py@@Pow.exp": "def exp(self):\n    return self._args[1]",
    ".sympy.core.power.py@@Pow._eval_expand_power_exp": "def _eval_expand_power_exp(self, **hints):\n    b = self.base\n    e = self.exp\n    if e.is_Add and e.is_commutative:\n        expr = []\n        for x in e.args:\n            expr.append(self.func(self.base, x))\n        return Mul(*expr)\n    return self.func(b, e)",
    ".sympy.core.add.py@@Add.as_numer_denom": "def as_numer_denom(self):\n    content, expr = self.primitive()\n    ncon, dcon = content.as_numer_denom()\n    nd = defaultdict(list)\n    for f in expr.args:\n        ni, di = f.as_numer_denom()\n        nd[di].append(ni)\n    if len(nd) == 1:\n        d, n = nd.popitem()\n        return (self.func(*[_keep_coeff(ncon, ni) for ni in n]), _keep_coeff(dcon, d))\n    for d, n in nd.items():\n        if len(n) == 1:\n            nd[d] = n[0]\n        else:\n            nd[d] = self.func(*n)\n    denoms, numers = [list(i) for i in zip(*iter(nd.items()))]\n    n, d = (self.func(*[Mul(*denoms[:i] + [numers[i]] + denoms[i + 1:]) for i in range(len(numers))]), Mul(*denoms))\n    return (_keep_coeff(ncon, n), _keep_coeff(dcon, d))",
    ".sympy.core.add.py@@Add.primitive": "def primitive(self):\n    terms = []\n    inf = False\n    for a in self.args:\n        c, m = a.as_coeff_Mul()\n        if not c.is_Rational:\n            c = S.One\n            m = a\n        inf = inf or m is S.ComplexInfinity\n        terms.append((c.p, c.q, m))\n    if not inf:\n        ngcd = reduce(igcd, [t[0] for t in terms], 0)\n        dlcm = reduce(ilcm, [t[1] for t in terms], 1)\n    else:\n        ngcd = reduce(igcd, [t[0] for t in terms if t[1]], 0)\n        dlcm = reduce(ilcm, [t[1] for t in terms if t[1]], 1)\n    if ngcd == dlcm == 1:\n        return (S.One, self)\n    if not inf:\n        for i, (p, q, term) in enumerate(terms):\n            terms[i] = _keep_coeff(Rational(p // ngcd * (dlcm // q)), term)\n    else:\n        for i, (p, q, term) in enumerate(terms):\n            if q:\n                terms[i] = _keep_coeff(Rational(p // ngcd * (dlcm // q)), term)\n            else:\n                terms[i] = _keep_coeff(Rational(p, q), term)\n    if terms[0].is_Number or terms[0] is S.ComplexInfinity:\n        c = terms.pop(0)\n    else:\n        c = None\n    _addsort(terms)\n    if c:\n        terms.insert(0, c)\n    return (Rational(ngcd, dlcm), self._new_rawargs(*terms))",
    ".sympy.core.mul.py@@Mul.as_coeff_Mul": "def as_coeff_Mul(self, rational=False):\n    coeff, args = (self.args[0], self.args[1:])\n    if coeff.is_Number:\n        if not rational or coeff.is_Rational:\n            if len(args) == 1:\n                return (coeff, args[0])\n            else:\n                return (coeff, self._new_rawargs(*args))\n        elif coeff.is_extended_negative:\n            return (S.NegativeOne, self._new_rawargs(*(-coeff,) + args))\n    return (S.One, self)",
    ".sympy.core.operations.py@@AssocOp._new_rawargs": "def _new_rawargs(self, *args, **kwargs):\n    if kwargs.pop('reeval', True) and self.is_commutative is False:\n        is_commutative = None\n    else:\n        is_commutative = self.is_commutative\n    return self._from_args(args, is_commutative)",
    ".sympy.core.numbers.py@@igcd": "def igcd(*args):\n    if len(args) < 2:\n        raise TypeError('igcd() takes at least 2 arguments (%s given)' % len(args))\n    args_temp = [abs(as_int(i)) for i in args]\n    if 1 in args_temp:\n        return 1\n    a = args_temp.pop()\n    for b in args_temp:\n        a = igcd2(a, b) if b else a\n    return a",
    ".sympy.core.numbers.py@@ilcm": "def ilcm(*args):\n    if len(args) < 2:\n        raise TypeError('ilcm() takes at least 2 arguments (%s given)' % len(args))\n    if 0 in args:\n        return 0\n    a = args[0]\n    for b in args[1:]:\n        a = a // igcd(a, b) * b\n    return a",
    ".sympy.core.power.py@@Pow.as_numer_denom": "def as_numer_denom(self):\n    if not self.is_commutative:\n        return (self, S.One)\n    base, exp = self.as_base_exp()\n    n, d = base.as_numer_denom()\n    neg_exp = exp.is_negative\n    if not neg_exp and (not (-exp).is_negative):\n        neg_exp = _coeff_isneg(exp)\n    int_exp = exp.is_integer\n    if not (d.is_extended_real or int_exp):\n        n = base\n        d = S.One\n    dnonpos = d.is_nonpositive\n    if dnonpos:\n        n, d = (-n, -d)\n    elif dnonpos is None and (not int_exp):\n        n = base\n        d = S.One\n    if neg_exp:\n        n, d = (d, n)\n        exp = -exp\n    if exp.is_infinite:\n        if n is S.One and d is not S.One:\n            return (n, self.func(d, exp))\n        if n is not S.One and d is S.One:\n            return (self.func(n, exp), d)\n    return (self.func(n, exp), self.func(d, exp))",
    ".sympy.core.numbers.py@@Integer.__neg__": "def __neg__(self):\n    return Integer(-self.p)",
    ".sympy.core.numbers.py@@Integer.__abs__": "def __abs__(self):\n    if self.p >= 0:\n        return self\n    else:\n        return Integer(-self.p)",
    ".sympy.core.add.py@@Add.flatten": "def flatten(cls, seq):\n    from sympy.calculus.util import AccumBounds\n    from sympy.matrices.expressions import MatrixExpr\n    from sympy.tensor.tensor import TensExpr\n    rv = None\n    if len(seq) == 2:\n        a, b = seq\n        if b.is_Rational:\n            a, b = (b, a)\n        if a.is_Rational:\n            if b.is_Mul:\n                rv = ([a, b], [], None)\n        if rv:\n            if all((s.is_commutative for s in rv[0])):\n                return rv\n            return ([], rv[0], None)\n    terms = {}\n    coeff = S.Zero\n    order_factors = []\n    extra = []\n    for o in seq:\n        if o.is_Order:\n            for o1 in order_factors:\n                if o1.contains(o):\n                    o = None\n                    break\n            if o is None:\n                continue\n            order_factors = [o] + [o1 for o1 in order_factors if not o.contains(o1)]\n            continue\n        elif o.is_Number:\n            if (o is S.NaN or (coeff is S.ComplexInfinity and o.is_finite is False)) and (not extra):\n                return ([S.NaN], [], None)\n            if coeff.is_Number:\n                coeff += o\n                if coeff is S.NaN and (not extra):\n                    return ([S.NaN], [], None)\n            continue\n        elif isinstance(o, AccumBounds):\n            coeff = o.__add__(coeff)\n            continue\n        elif isinstance(o, MatrixExpr):\n            extra.append(o)\n            continue\n        elif isinstance(o, TensExpr):\n            coeff = o.__add__(coeff) if coeff else o\n            continue\n        elif o is S.ComplexInfinity:\n            if coeff.is_finite is False and (not extra):\n                return ([S.NaN], [], None)\n            coeff = S.ComplexInfinity\n            continue\n        elif o.is_Add:\n            seq.extend(o.args)\n            continue\n        elif o.is_Mul:\n            c, s = o.as_coeff_Mul()\n        elif o.is_Pow:\n            b, e = o.as_base_exp()\n            if b.is_Number and (e.is_Integer or (e.is_Rational and e.is_negative)):\n                seq.append(b ** e)\n                continue\n            c, s = (S.One, o)\n        else:\n            c = S.One\n            s = o\n        if s in terms:\n            terms[s] += c\n            if terms[s] is S.NaN and (not extra):\n                return ([S.NaN], [], None)\n        else:\n            terms[s] = c\n    newseq = []\n    noncommutative = False\n    for s, c in terms.items():\n        if c.is_zero:\n            continue\n        elif c is S.One:\n            newseq.append(s)\n        elif s.is_Mul:\n            cs = s._new_rawargs(*(c,) + s.args)\n            newseq.append(cs)\n        elif s.is_Add:\n            newseq.append(Mul(c, s, evaluate=False))\n        else:\n            newseq.append(Mul(c, s))\n        noncommutative = noncommutative or not s.is_commutative\n    if coeff is S.Infinity:\n        newseq = [f for f in newseq if not (f.is_extended_nonnegative or f.is_real)]\n    elif coeff is S.NegativeInfinity:\n        newseq = [f for f in newseq if not (f.is_extended_nonpositive or f.is_real)]\n    if coeff is S.ComplexInfinity:\n        newseq = [c for c in newseq if not (c.is_finite and c.is_extended_real is not None)]\n    if order_factors:\n        newseq2 = []\n        for t in newseq:\n            for o in order_factors:\n                if o.contains(t):\n                    t = None\n                    break\n            if t is not None:\n                newseq2.append(t)\n        newseq = newseq2 + order_factors\n        for o in order_factors:\n            if o.contains(coeff):\n                coeff = S.Zero\n                break\n    _addsort(newseq)\n    if coeff is not S.Zero:\n        newseq.insert(0, coeff)\n    if extra:\n        newseq += extra\n        noncommutative = True\n    if noncommutative:\n        return ([], newseq, None)\n    else:\n        return (newseq, [], None)",
    ".sympy.core.numbers.py@@Integer.__add__": "def __add__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, integer_types):\n            return Integer(self.p + other)\n        elif isinstance(other, Integer):\n            return Integer(self.p + other.p)\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.q + other.p, other.q, 1)\n        return Rational.__add__(self, other)\n    else:\n        return Add(self, other)",
    ".sympy.core.add.py@@_addsort": "def _addsort(args):\n    args.sort(key=_args_sortkey)",
    ".sympy.core.numbers.py@@Rational._hashable_content": "def _hashable_content(self):\n    return (self.p, self.q)",
    ".sympy.core.add.py@@Add.as_content_primitive": "def as_content_primitive(self, radical=False, clear=True):\n    con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(radical=radical, clear=clear)) for a in self.args]).primitive()\n    if not clear and (not con.is_Integer) and prim.is_Add:\n        con, d = con.as_numer_denom()\n        _p = prim / d\n        if any((a.as_coeff_Mul()[0].is_Integer for a in _p.args)):\n            prim = _p\n        else:\n            con /= d\n    if radical and prim.is_Add:\n        args = prim.args\n        rads = []\n        common_q = None\n        for m in args:\n            term_rads = defaultdict(list)\n            for ai in Mul.make_args(m):\n                if ai.is_Pow:\n                    b, e = ai.as_base_exp()\n                    if e.is_Rational and b.is_Integer:\n                        term_rads[e.q].append(abs(int(b)) ** e.p)\n            if not term_rads:\n                break\n            if common_q is None:\n                common_q = set(term_rads.keys())\n            else:\n                common_q = common_q & set(term_rads.keys())\n                if not common_q:\n                    break\n            rads.append(term_rads)\n        else:\n            for r in rads:\n                for q in list(r.keys()):\n                    if q not in common_q:\n                        r.pop(q)\n                for q in r:\n                    r[q] = prod(r[q])\n            G = []\n            for q in common_q:\n                g = reduce(igcd, [r[q] for r in rads], 0)\n                if g != 1:\n                    G.append(g ** Rational(1, q))\n            if G:\n                G = Mul(*G)\n                args = [ai / G for ai in args]\n                prim = G * prim.func(*args)\n    return (con, prim)",
    ".sympy.core.numbers.py@@Rational.__mul__": "def __mul__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, Integer):\n            return Rational(self.p * other.p, self.q, igcd(other.p, self.q))\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.p, self.q * other.q, igcd(self.p, other.q) * igcd(self.q, other.p))\n        elif isinstance(other, Float):\n            return other * self\n        else:\n            return Number.__mul__(self, other)\n    return Number.__mul__(self, other)",
    ".sympy.core.numbers.py@@Number.__mul__": "def __mul__(self, other):\n    if isinstance(other, Number) and global_evaluate[0]:\n        if other is S.NaN:\n            return S.NaN\n        elif other is S.Infinity:\n            if self.is_zero:\n                return S.NaN\n            elif self.is_positive:\n                return S.Infinity\n            else:\n                return S.NegativeInfinity\n        elif other is S.NegativeInfinity:\n            if self.is_zero:\n                return S.NaN\n            elif self.is_positive:\n                return S.NegativeInfinity\n            else:\n                return S.Infinity\n    elif isinstance(other, Tuple):\n        return NotImplemented\n    return AtomicExpr.__mul__(self, other)",
    ".sympy.core.decorators.py@@_SympifyWrapper._func": "def _func(self, other):\n    if not hasattr(other, '_op_priority'):\n        try:\n            other = sympify(other, strict=True)\n        except SympifyError:\n            return retval\n    if not isinstance(other, expectedcls):\n        return retval\n    return func(self, other)",
    ".sympy.core.decorators.py@@binary_op_wrapper": "def binary_op_wrapper(self, other):\n    if hasattr(other, '_op_priority'):\n        if other._op_priority > self._op_priority:\n            f = getattr(other, method_name, None)\n            if f is not None:\n                return f(self)\n    return func(self, other)",
    ".sympy.core.expr.py@@Expr.__mul__": "def __mul__(self, other):\n    return Mul(self, other)",
    ".sympy.core.power.py@@Pow.as_content_primitive": "def as_content_primitive(self, radical=False, clear=True):\n    b, e = self.as_base_exp()\n    b = _keep_coeff(*b.as_content_primitive(radical=radical, clear=clear))\n    ce, pe = e.as_content_primitive(radical=radical, clear=clear)\n    if b.is_Rational:\n        h, t = pe.as_coeff_Add()\n        if h.is_Rational:\n            ceh = ce * h\n            c = self.func(b, ceh)\n            r = S.Zero\n            if not c.is_Rational:\n                iceh, r = divmod(ceh.p, ceh.q)\n                c = self.func(b, iceh)\n            return (c, self.func(b, _keep_coeff(ce, t + r / ce / ceh.q)))\n    e = _keep_coeff(ce, pe)\n    if e.is_Rational and b.is_Mul:\n        h, t = b.as_content_primitive(radical=radical, clear=clear)\n        c, m = self.func(h, e).as_coeff_Mul()\n        m, me = m.as_base_exp()\n        if m is S.One or me == e:\n            return (c, self.func(_keep_coeff(m, t), e))\n    return (S.One, self.func(b, e))",
    ".sympy.core.expr.py@@Expr.extract_multiplicatively": "def extract_multiplicatively(self, c):\n    from .add import _unevaluated_Add\n    c = sympify(c)\n    if self is S.NaN:\n        return None\n    if c is S.One:\n        return self\n    elif c == self:\n        return S.One\n    if c.is_Add:\n        cc, pc = c.primitive()\n        if cc is not S.One:\n            c = Mul(cc, pc, evaluate=False)\n    if c.is_Mul:\n        a, b = c.as_two_terms()\n        x = self.extract_multiplicatively(a)\n        if x is not None:\n            return x.extract_multiplicatively(b)\n        else:\n            return x\n    quotient = self / c\n    if self.is_Number:\n        if self is S.Infinity:\n            if c.is_positive:\n                return S.Infinity\n        elif self is S.NegativeInfinity:\n            if c.is_negative:\n                return S.Infinity\n            elif c.is_positive:\n                return S.NegativeInfinity\n        elif self is S.ComplexInfinity:\n            if not c.is_zero:\n                return S.ComplexInfinity\n        elif self.is_Integer:\n            if not quotient.is_Integer:\n                return None\n            elif self.is_positive and quotient.is_negative:\n                return None\n            else:\n                return quotient\n        elif self.is_Rational:\n            if not quotient.is_Rational:\n                return None\n            elif self.is_positive and quotient.is_negative:\n                return None\n            else:\n                return quotient\n        elif self.is_Float:\n            if not quotient.is_Float:\n                return None\n            elif self.is_positive and quotient.is_negative:\n                return None\n            else:\n                return quotient\n    elif self.is_NumberSymbol or self.is_Symbol or self is S.ImaginaryUnit:\n        if quotient.is_Mul and len(quotient.args) == 2:\n            if quotient.args[0].is_Integer and quotient.args[0].is_positive and (quotient.args[1] == self):\n                return quotient\n        elif quotient.is_Integer and c.is_Number:\n            return quotient\n    elif self.is_Add:\n        cs, ps = self.primitive()\n        if c.is_Number and c is not S.NegativeOne:\n            if cs is not S.One:\n                if c.is_negative:\n                    xc = -cs.extract_multiplicatively(-c)\n                else:\n                    xc = cs.extract_multiplicatively(c)\n                if xc is not None:\n                    return xc * ps\n            return\n        if c == ps:\n            return cs\n        newargs = []\n        for arg in ps.args:\n            newarg = arg.extract_multiplicatively(c)\n            if newarg is None:\n                return\n            newargs.append(newarg)\n        if cs is not S.One:\n            args = [cs * t for t in newargs]\n            return _unevaluated_Add(*args)\n        else:\n            return Add._from_args(newargs)\n    elif self.is_Mul:\n        args = list(self.args)\n        for i, arg in enumerate(args):\n            newarg = arg.extract_multiplicatively(c)\n            if newarg is not None:\n                args[i] = newarg\n                return Mul(*args)\n    elif self.is_Pow:\n        if c.is_Pow and c.base == self.base:\n            new_exp = self.exp.extract_additively(c.exp)\n            if new_exp is not None:\n                return self.base ** new_exp\n        elif c == self.base:\n            new_exp = self.exp.extract_additively(1)\n            if new_exp is not None:\n                return self.base ** new_exp",
    ".sympy.core.mul.py@@Mul.as_base_exp": "def as_base_exp(self):\n    e1 = None\n    bases = []\n    nc = 0\n    for m in self.args:\n        b, e = m.as_base_exp()\n        if not b.is_commutative:\n            nc += 1\n        if e1 is None:\n            e1 = e\n        elif e != e1 or nc > 1:\n            return (self, S.One)\n        bases.append(b)\n    return (self.func(*bases), e1)",
    ".sympy.core.exprtools.py@@gcd_terms": "def gcd_terms(terms, isprimitive=False, clear=True, fraction=True):\n\n    def mask(terms):\n        args = [(a, []) if a.is_commutative else a.args_cnc() for a in terms]\n        reps = []\n        for i, (c, nc) in enumerate(args):\n            if nc:\n                nc = Mul(*nc)\n                d = Dummy()\n                reps.append((d, nc))\n                c.append(d)\n                args[i] = Mul(*c)\n            else:\n                args[i] = c\n        return (args, dict(reps))\n    isadd = isinstance(terms, Add)\n    addlike = isadd or (not isinstance(terms, Basic) and is_sequence(terms, include=set) and (not isinstance(terms, Dict)))\n    if addlike:\n        if isadd:\n            terms = list(terms.args)\n        else:\n            terms = sympify(terms)\n        terms, reps = mask(terms)\n        cont, numer, denom = _gcd_terms(terms, isprimitive, fraction)\n        numer = numer.xreplace(reps)\n        coeff, factors = cont.as_coeff_Mul()\n        if not clear:\n            c, _coeff = coeff.as_coeff_Mul()\n            if not c.is_Integer and (not clear) and numer.is_Add:\n                n, d = c.as_numer_denom()\n                _numer = numer / d\n                if any((a.as_coeff_Mul()[0].is_Integer for a in _numer.args)):\n                    numer = _numer\n                    coeff = n * _coeff\n        return _keep_coeff(coeff, factors * numer / denom, clear=clear)\n    if not isinstance(terms, Basic):\n        return terms\n    if terms.is_Atom:\n        return terms\n    if terms.is_Mul:\n        c, args = terms.as_coeff_mul()\n        return _keep_coeff(c, Mul(*[gcd_terms(i, isprimitive, clear, fraction) for i in args]), clear=clear)\n\n    def handle(a):\n        if not isinstance(a, Expr):\n            if isinstance(a, Basic):\n                return a.func(*[handle(i) for i in a.args])\n            return type(a)([handle(i) for i in a])\n        return gcd_terms(a, isprimitive, clear, fraction)\n    if isinstance(terms, Dict):\n        return Dict(*[(k, handle(v)) for k, v in terms.args])\n    return terms.func(*[handle(i) for i in terms.args])",
    ".sympy.core.exprtools.py@@mask": "def mask(terms):\n    args = [(a, []) if a.is_commutative else a.args_cnc() for a in terms]\n    reps = []\n    for i, (c, nc) in enumerate(args):\n        if nc:\n            nc = Mul(*nc)\n            d = Dummy()\n            reps.append((d, nc))\n            c.append(d)\n            args[i] = Mul(*c)\n        else:\n            args[i] = c\n    return (args, dict(reps))",
    ".sympy.core.exprtools.py@@_gcd_terms": "def _gcd_terms(terms, isprimitive=False, fraction=True):\n    if isinstance(terms, Basic) and (not isinstance(terms, Tuple)):\n        terms = Add.make_args(terms)\n    terms = list(map(Term, [t for t in terms if t]))\n    if len(terms) == 0:\n        return (S.Zero, S.Zero, S.One)\n    if len(terms) == 1:\n        cont = terms[0].coeff\n        numer = terms[0].numer.as_expr()\n        denom = terms[0].denom.as_expr()\n    else:\n        cont = terms[0]\n        for term in terms[1:]:\n            cont = cont.gcd(term)\n        for i, term in enumerate(terms):\n            terms[i] = term.quo(cont)\n        if fraction:\n            denom = terms[0].denom\n            for term in terms[1:]:\n                denom = denom.lcm(term.denom)\n            numers = []\n            for term in terms:\n                numer = term.numer.mul(denom.quo(term.denom))\n                numers.append(term.coeff * numer.as_expr())\n        else:\n            numers = [t.as_expr() for t in terms]\n            denom = Term(S.One).numer\n        cont = cont.as_expr()\n        numer = Add(*numers)\n        denom = denom.as_expr()\n    if not isprimitive and numer.is_Add:\n        _cont, numer = numer.primitive()\n        cont *= _cont\n    return (cont, numer, denom)",
    ".sympy.core.exprtools.py@@Term.__init__": "def __init__(self, term, numer=None, denom=None):\n    if numer is None and denom is None:\n        if not term.is_commutative:\n            raise NonCommutativeExpression('commutative expression expected')\n        coeff, factors = term.as_coeff_mul()\n        numer, denom = (defaultdict(int), defaultdict(int))\n        for factor in factors:\n            base, exp = decompose_power(factor)\n            if base.is_Add:\n                cont, base = base.primitive()\n                coeff *= cont ** exp\n            if exp > 0:\n                numer[base] += exp\n            else:\n                denom[base] += -exp\n        numer = Factors(numer)\n        denom = Factors(denom)\n    else:\n        coeff = term\n        if numer is None:\n            numer = Factors()\n        if denom is None:\n            denom = Factors()\n    self.coeff = coeff\n    self.numer = numer\n    self.denom = denom",
    ".sympy.core.numbers.py@@Number.as_coeff_mul": "def as_coeff_mul(self, *deps, **kwargs):\n    if self.is_Rational or not kwargs.pop('rational', True):\n        return (self, tuple())\n    elif self.is_negative:\n        return (S.NegativeOne, (-self,))\n    return (S.One, (self,))",
    ".sympy.core.exprtools.py@@Factors.__init__": "def __init__(self, factors=None):\n    if isinstance(factors, (SYMPY_INTS, float)):\n        factors = S(factors)\n    if isinstance(factors, Factors):\n        factors = factors.factors.copy()\n    elif factors is None or factors is S.One:\n        factors = {}\n    elif factors is S.Zero or factors == 0:\n        factors = {S.Zero: S.One}\n    elif isinstance(factors, Number):\n        n = factors\n        factors = {}\n        if n < 0:\n            factors[S.NegativeOne] = S.One\n            n = -n\n        if n is not S.One:\n            if n.is_Float or n.is_Integer or n is S.Infinity:\n                factors[n] = S.One\n            elif n.is_Rational:\n                if n.p != 1:\n                    factors[Integer(n.p)] = S.One\n                factors[Integer(n.q)] = S.NegativeOne\n            else:\n                raise ValueError('Expected Float|Rational|Integer, not %s' % n)\n    elif isinstance(factors, Basic) and (not factors.args):\n        factors = {factors: S.One}\n    elif isinstance(factors, Expr):\n        c, nc = factors.args_cnc()\n        i = c.count(I)\n        for _ in range(i):\n            c.remove(I)\n        factors = dict(Mul._from_args(c).as_powers_dict())\n        for f in list(factors.keys()):\n            if isinstance(f, Rational) and (not isinstance(f, Integer)):\n                p, q = (Integer(f.p), Integer(f.q))\n                factors[p] = (factors[p] if p in factors else S.Zero) + factors[f]\n                factors[q] = (factors[q] if q in factors else S.Zero) - factors[f]\n                factors.pop(f)\n        if i:\n            factors[I] = S.One * i\n        if nc:\n            factors[Mul(*nc, evaluate=False)] = S.One\n    else:\n        factors = factors.copy()\n        handle = []\n        for k in factors:\n            if k is I or k in (-1, 1):\n                handle.append(k)\n        if handle:\n            i1 = S.One\n            for k in handle:\n                if not _isnumber(factors[k]):\n                    continue\n                i1 *= k ** factors.pop(k)\n            if i1 is not S.One:\n                for a in i1.args if i1.is_Mul else [i1]:\n                    if a is S.NegativeOne:\n                        factors[a] = S.One\n                    elif a is I:\n                        factors[I] = S.One\n                    elif a.is_Pow:\n                        if S.NegativeOne not in factors:\n                            factors[S.NegativeOne] = S.Zero\n                        factors[S.NegativeOne] += a.exp\n                    elif a == 1:\n                        factors[a] = S.One\n                    elif a == -1:\n                        factors[-a] = S.One\n                        factors[S.NegativeOne] = S.One\n                    else:\n                        raise ValueError('unexpected factor in i1: %s' % a)\n    self.factors = factors\n    keys = getattr(factors, 'keys', None)\n    if keys is None:\n        raise TypeError('expecting Expr or dictionary')\n    self.gens = frozenset(keys())",
    ".sympy.core.mul.py@@Mul.as_coeff_mul": "def as_coeff_mul(self, *deps, **kwargs):\n    if deps:\n        from sympy.utilities.iterables import sift\n        l1, l2 = sift(self.args, lambda x: x.has(*deps), binary=True)\n        return (self._new_rawargs(*l2), tuple(l1))\n    rational = kwargs.pop('rational', True)\n    args = self.args\n    if args[0].is_Number:\n        if not rational or args[0].is_Rational:\n            return (args[0], args[1:])\n        elif args[0].is_extended_negative:\n            return (S.NegativeOne, (-args[0],) + args[1:])\n    return (S.One, args)",
    ".sympy.core.exprtools.py@@Term.gcd": "def gcd(self, other):\n    return Term(self.coeff.gcd(other.coeff), self.numer.gcd(other.numer), self.denom.gcd(other.denom))",
    ".sympy.core.numbers.py@@Rational.gcd": "def gcd(self, other):\n    if isinstance(other, Rational):\n        if other == S.Zero:\n            return other\n        return Rational(Integer(igcd(self.p, other.p)), Integer(ilcm(self.q, other.q)))\n    return Number.gcd(self, other)",
    ".sympy.core.exprtools.py@@Factors.gcd": "def gcd(self, other):\n    if not isinstance(other, Factors):\n        other = Factors(other)\n        if other.is_zero:\n            return Factors(self.factors)\n    factors = {}\n    for factor, exp in self.factors.items():\n        factor, exp = (sympify(factor), sympify(exp))\n        if factor in other.factors:\n            lt = (exp - other.factors[factor]).is_negative\n            if lt == True:\n                factors[factor] = exp\n            elif lt == False:\n                factors[factor] = other.factors[factor]\n    return Factors(factors)",
    ".sympy.core.exprtools.py@@Term.quo": "def quo(self, other):\n    return self.mul(other.inv())",
    ".sympy.core.exprtools.py@@Term.inv": "def inv(self):\n    return Term(1 / self.coeff, self.denom, self.numer)",
    ".sympy.core.expr.py@@Expr.__rdiv__": "def __rdiv__(self, other):\n    return Mul(other, Pow(self, S.NegativeOne))",
    ".sympy.core.numbers.py@@NegativeOne.__abs__": "def __abs__():\n    return S.One",
    ".sympy.core.exprtools.py@@Term.mul": "def mul(self, other):\n    coeff = self.coeff * other.coeff\n    numer = self.numer.mul(other.numer)\n    denom = self.denom.mul(other.denom)\n    numer, denom = numer.normal(denom)\n    return Term(coeff, numer, denom)",
    ".sympy.core.exprtools.py@@Factors.mul": "def mul(self, other):\n    if not isinstance(other, Factors):\n        other = Factors(other)\n    if any((f.is_zero for f in (self, other))):\n        return Factors(S.Zero)\n    factors = dict(self.factors)\n    for factor, exp in other.factors.items():\n        if factor in factors:\n            exp = factors[factor] + exp\n            if not exp:\n                del factors[factor]\n                continue\n        factors[factor] = exp\n    return Factors(factors)",
    ".sympy.core.exprtools.py@@Factors.is_zero": "def is_zero(self):\n    f = self.factors\n    return len(f) == 1 and S.Zero in f",
    ".sympy.core.exprtools.py@@Factors.normal": "def normal(self, other):\n    if not isinstance(other, Factors):\n        other = Factors(other)\n        if other.is_zero:\n            return (Factors(), Factors(S.Zero))\n        if self.is_zero:\n            return (Factors(S.Zero), Factors())\n    self_factors = dict(self.factors)\n    other_factors = dict(other.factors)\n    for factor, self_exp in self.factors.items():\n        try:\n            other_exp = other.factors[factor]\n        except KeyError:\n            continue\n        exp = self_exp - other_exp\n        if not exp:\n            del self_factors[factor]\n            del other_factors[factor]\n        elif _isnumber(exp):\n            if exp > 0:\n                self_factors[factor] = exp\n                del other_factors[factor]\n            else:\n                del self_factors[factor]\n                other_factors[factor] = -exp\n        else:\n            r = self_exp.extract_additively(other_exp)\n            if r is not None:\n                if r:\n                    self_factors[factor] = r\n                    del other_factors[factor]\n                else:\n                    del self_factors[factor]\n                    del other_factors[factor]\n            else:\n                sc, sa = self_exp.as_coeff_Add()\n                if sc:\n                    oc, oa = other_exp.as_coeff_Add()\n                    diff = sc - oc\n                    if diff > 0:\n                        self_factors[factor] -= oc\n                        other_exp = oa\n                    elif diff < 0:\n                        self_factors[factor] -= sc\n                        other_factors[factor] -= sc\n                        other_exp = oa - diff\n                    else:\n                        self_factors[factor] = sa\n                        other_exp = oa\n                if other_exp:\n                    other_factors[factor] = other_exp\n                else:\n                    del other_factors[factor]\n    return (Factors(self_factors), Factors(other_factors))",
    ".sympy.core.exprtools.py@@Term.as_expr": "def as_expr(self):\n    return self.coeff * (self.numer.as_expr() / self.denom.as_expr())",
    ".sympy.core.exprtools.py@@Factors.as_expr": "def as_expr(self):\n    args = []\n    for factor, exp in self.factors.items():\n        if exp != 1:\n            if isinstance(exp, Integer):\n                b, e = factor.as_base_exp()\n                e = _keep_coeff(exp, e)\n                args.append(b ** e)\n            else:\n                args.append(factor ** exp)\n        else:\n            args.append(factor)\n    return Mul(*args)",
    ".sympy.core.expr.py@@Expr.__div__": "def __div__(self, other):\n    return Mul(self, Pow(other, S.NegativeOne))",
    ".sympy.core.expr.py@@Expr.__pow__": "def __pow__(self, other, mod=None):\n    if mod is None:\n        return self._pow(other)\n    try:\n        _self, other, mod = (as_int(self), as_int(other), as_int(mod))\n        if other >= 0:\n            return pow(_self, other, mod)\n        else:\n            from sympy.core.numbers import mod_inverse\n            return mod_inverse(pow(_self, -other, mod), mod)\n    except ValueError:\n        power = self._pow(other)\n        try:\n            return power % mod\n        except TypeError:\n            return NotImplemented",
    ".sympy.core.expr.py@@Expr._pow": "def _pow(self, other):\n    return Pow(self, other)",
    ".sympy.core.basic.py@@Basic.xreplace": "def xreplace(self, rule):\n    value, _ = self._xreplace(rule)\n    return value",
    ".sympy.core.basic.py@@Basic._xreplace": "def _xreplace(self, rule):\n    if self in rule:\n        return (rule[self], True)\n    elif rule:\n        args = []\n        changed = False\n        for a in self.args:\n            _xreplace = getattr(a, '_xreplace', None)\n            if _xreplace is not None:\n                a_xr = _xreplace(rule)\n                args.append(a_xr[0])\n                changed |= a_xr[1]\n            else:\n                args.append(a)\n        args = tuple(args)\n        if changed:\n            return (self.func(*args), True)\n    return (self, False)",
    ".sympy.core.add.py@@Add._eval_is_zero": "def _eval_is_zero(self):\n    if self.is_commutative is False:\n        return\n    nz = []\n    z = 0\n    im_or_z = False\n    im = False\n    for a in self.args:\n        if a.is_extended_real:\n            if a.is_zero:\n                z += 1\n            elif a.is_zero is False:\n                nz.append(a)\n            else:\n                return\n        elif a.is_imaginary:\n            im = True\n        elif (S.ImaginaryUnit * a).is_extended_real:\n            im_or_z = True\n        else:\n            return\n    if z == len(self.args):\n        return True\n    if len(nz) == 0 or len(nz) == len(self.args):\n        return None\n    b = self.func(*nz)\n    if b.is_zero:\n        if not im_or_z and (not im):\n            return True\n        if im and (not im_or_z):\n            return False\n    if b.is_zero is False:\n        return False",
    ".sympy.core.mul.py@@Mul._eval_is_extended_real": "def _eval_is_extended_real(self):\n    return self._eval_real_imag(True)",
    ".sympy.core.mul.py@@Mul._eval_real_imag": "def _eval_real_imag(self, real):\n    zero = False\n    t_not_re_im = None\n    for t in self.args:\n        if (t.is_complex or t.is_infinite) is False and t.is_extended_real is False:\n            return False\n        elif t.is_imaginary:\n            real = not real\n        elif t.is_extended_real:\n            if not zero:\n                z = t.is_zero\n                if not z and zero is False:\n                    zero = z\n                elif z:\n                    if all((a.is_finite for a in self.args)):\n                        return True\n                    return\n        elif t.is_extended_real is False:\n            if t_not_re_im:\n                return\n            t_not_re_im = t\n        elif t.is_imaginary is False:\n            if t_not_re_im:\n                return\n            t_not_re_im = t\n        else:\n            return\n    if t_not_re_im:\n        if t_not_re_im.is_extended_real is False:\n            if real:\n                return zero\n        if t_not_re_im.is_imaginary is False:\n            if not real:\n                return zero\n    elif zero is False:\n        return real\n    elif real:\n        return real",
    ".sympy.core.mul.py@@Mul._eval_is_complex": "def _eval_is_complex(self):\n    comp = _fuzzy_group((a.is_complex for a in self.args))\n    if comp is False:\n        if any((a.is_infinite for a in self.args)):\n            if any((a.is_zero is not False for a in self.args)):\n                return None\n            return False\n    return comp",
    ".sympy.core.numbers.py@@Rational.__add__": "def __add__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, Integer):\n            return Rational(self.p + self.q * other.p, self.q, 1)\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.q + self.q * other.p, self.q * other.q)\n        elif isinstance(other, Float):\n            return other + self\n        else:\n            return Number.__add__(self, other)\n    return Number.__add__(self, other)",
    ".sympy.core.numbers.py@@Number.__add__": "def __add__(self, other):\n    if isinstance(other, Number) and global_evaluate[0]:\n        if other is S.NaN:\n            return S.NaN\n        elif other is S.Infinity:\n            return S.Infinity\n        elif other is S.NegativeInfinity:\n            return S.NegativeInfinity\n    return AtomicExpr.__add__(self, other)",
    ".sympy.core.expr.py@@Expr.__add__": "def __add__(self, other):\n    return Add(self, other)",
    ".sympy.core.add.py@@Add._eval_is_odd": "def _eval_is_odd(self):\n    l = [f for f in self.args if not f.is_even is True]\n    if not l:\n        return False\n    if l[0].is_odd:\n        return self._new_rawargs(*l[1:]).is_even",
    ".sympy.core.add.py@@Add._eval_is_imaginary": "def _eval_is_imaginary(self):\n    nz = []\n    im_I = []\n    for a in self.args:\n        if a.is_extended_real:\n            if a.is_zero:\n                pass\n            elif a.is_zero is False:\n                nz.append(a)\n            else:\n                return\n        elif a.is_imaginary:\n            im_I.append(a * S.ImaginaryUnit)\n        elif (S.ImaginaryUnit * a).is_extended_real:\n            im_I.append(a * S.ImaginaryUnit)\n        else:\n            return\n    b = self.func(*nz)\n    if b.is_zero:\n        return fuzzy_not(self.func(*im_I).is_zero)\n    elif b.is_zero is False:\n        return False",
    ".sympy.core.add.py@@Add._eval_is_extended_nonnegative": "def _eval_is_extended_nonnegative(self):\n    from sympy.core.exprtools import _monotonic_sign\n    if not self.is_number:\n        c, a = self.as_coeff_Add()\n        if not c.is_zero and a.is_extended_nonnegative:\n            v = _monotonic_sign(a)\n            if v is not None:\n                s = v + c\n                if s != self and s.is_extended_nonnegative:\n                    return True\n                if len(self.free_symbols) == 1:\n                    v = _monotonic_sign(self)\n                    if v is not None and v != self and v.is_extended_nonnegative:\n                        return True",
    ".sympy.core.add.py@@Add.as_coeff_Add": "def as_coeff_Add(self, rational=False, deps=None):\n    coeff, args = (self.args[0], self.args[1:])\n    if coeff.is_Number and (not rational) or coeff.is_Rational:\n        return (coeff, self._new_rawargs(*args))\n    return (S.Zero, self)",
    ".sympy.core.add.py@@Add._eval_is_extended_negative": "def _eval_is_extended_negative(self):\n    from sympy.core.exprtools import _monotonic_sign\n    if self.is_number:\n        return super(Add, self)._eval_is_extended_negative()\n    c, a = self.as_coeff_Add()\n    if not c.is_zero:\n        v = _monotonic_sign(a)\n        if v is not None:\n            s = v + c\n            if s != self and s.is_extended_negative and a.is_extended_nonpositive:\n                return True\n            if len(self.free_symbols) == 1:\n                v = _monotonic_sign(self)\n                if v is not None and v != self and v.is_extended_negative:\n                    return True\n    neg = nonpos = nonneg = unknown_sign = False\n    saw_INF = set()\n    args = [a for a in self.args if not a.is_zero]\n    if not args:\n        return False\n    for a in args:\n        isneg = a.is_extended_negative\n        infinite = a.is_infinite\n        if infinite:\n            saw_INF.add(fuzzy_or((isneg, a.is_extended_nonpositive)))\n            if True in saw_INF and False in saw_INF:\n                return\n        if isneg:\n            neg = True\n            continue\n        elif a.is_extended_nonpositive:\n            nonpos = True\n            continue\n        elif a.is_extended_nonnegative:\n            nonneg = True\n            continue\n        if infinite is None:\n            return\n        unknown_sign = True\n    if saw_INF:\n        if len(saw_INF) > 1:\n            return\n        return saw_INF.pop()\n    elif unknown_sign:\n        return\n    elif not nonneg and (not nonpos) and neg:\n        return True\n    elif not nonneg and neg:\n        return True\n    elif not neg and (not nonpos):\n        return False",
    ".sympy.core.exprtools.py@@_monotonic_sign": "def _monotonic_sign(self):\n    if not self.is_extended_real:\n        return\n    if (-self).is_Symbol:\n        rv = _monotonic_sign(-self)\n        return rv if rv is None else -rv\n    if not self.is_Add and self.as_numer_denom()[1].is_number:\n        s = self\n        if s.is_prime:\n            if s.is_odd:\n                return S(3)\n            else:\n                return S(2)\n        elif s.is_composite:\n            if s.is_odd:\n                return S(9)\n            else:\n                return S(4)\n        elif s.is_positive:\n            if s.is_even:\n                if s.is_prime is False:\n                    return S(4)\n                else:\n                    return S(2)\n            elif s.is_integer:\n                return S.One\n            else:\n                return _eps\n        elif s.is_extended_negative:\n            if s.is_even:\n                return S(-2)\n            elif s.is_integer:\n                return S.NegativeOne\n            else:\n                return -_eps\n        if s.is_zero or s.is_extended_nonpositive or s.is_extended_nonnegative:\n            return S.Zero\n        return None\n    free = self.free_symbols\n    if len(free) == 1:\n        if self.is_polynomial():\n            from sympy.polys.polytools import real_roots\n            from sympy.polys.polyroots import roots\n            from sympy.polys.polyerrors import PolynomialError\n            x = free.pop()\n            x0 = _monotonic_sign(x)\n            if x0 == _eps or x0 == -_eps:\n                x0 = S.Zero\n            if x0 is not None:\n                d = self.diff(x)\n                if d.is_number:\n                    currentroots = []\n                else:\n                    try:\n                        currentroots = real_roots(d)\n                    except (PolynomialError, NotImplementedError):\n                        currentroots = [r for r in roots(d, x) if r.is_extended_real]\n                y = self.subs(x, x0)\n                if x.is_nonnegative and all((r <= x0 for r in currentroots)):\n                    if y.is_nonnegative and d.is_positive:\n                        if y:\n                            return y if y.is_positive else Dummy('pos', positive=True)\n                        else:\n                            return Dummy('nneg', nonnegative=True)\n                    if y.is_nonpositive and d.is_negative:\n                        if y:\n                            return y if y.is_negative else Dummy('neg', negative=True)\n                        else:\n                            return Dummy('npos', nonpositive=True)\n                elif x.is_nonpositive and all((r >= x0 for r in currentroots)):\n                    if y.is_nonnegative and d.is_negative:\n                        if y:\n                            return Dummy('pos', positive=True)\n                        else:\n                            return Dummy('nneg', nonnegative=True)\n                    if y.is_nonpositive and d.is_positive:\n                        if y:\n                            return Dummy('neg', negative=True)\n                        else:\n                            return Dummy('npos', nonpositive=True)\n        else:\n            n, d = self.as_numer_denom()\n            den = None\n            if n.is_number:\n                den = _monotonic_sign(d)\n            elif not d.is_number:\n                if _monotonic_sign(n) is not None:\n                    den = _monotonic_sign(d)\n            if den is not None and (den.is_positive or den.is_negative):\n                v = n * den\n                if v.is_positive:\n                    return Dummy('pos', positive=True)\n                elif v.is_nonnegative:\n                    return Dummy('nneg', nonnegative=True)\n                elif v.is_negative:\n                    return Dummy('neg', negative=True)\n                elif v.is_nonpositive:\n                    return Dummy('npos', nonpositive=True)\n        return None\n    c, a = self.as_coeff_Add()\n    v = None\n    if not a.is_polynomial():\n        n, d = a.as_numer_denom()\n        if not (n.is_number or d.is_number):\n            return\n        if (a.is_Mul or a.is_Pow) and a.is_rational and all((p.exp.is_Integer for p in a.atoms(Pow) if p.is_Pow)) and (a.is_positive or a.is_negative):\n            v = S.One\n            for ai in Mul.make_args(a):\n                if ai.is_number:\n                    v *= ai\n                    continue\n                reps = {}\n                for x in ai.free_symbols:\n                    reps[x] = _monotonic_sign(x)\n                    if reps[x] is None:\n                        return\n                v *= ai.subs(reps)\n    elif c:\n        if not any((p for p in a.atoms(Pow) if not p.is_number)) and (a.is_nonpositive or a.is_nonnegative):\n            free = list(a.free_symbols)\n            p = {}\n            for i in free:\n                v = _monotonic_sign(i)\n                if v is None:\n                    return\n                p[i] = v or (_eps if i.is_nonnegative else -_eps)\n            v = a.xreplace(p)\n    if v is not None:\n        rv = v + c\n        if v.is_nonnegative and rv.is_positive:\n            return rv.subs(_eps, 0)\n        if v.is_nonpositive and rv.is_negative:\n            return rv.subs(_eps, 0)",
    ".sympy.core.expr.py@@Expr.__neg__": "def __neg__(self):\n    c = self.is_commutative\n    return Mul._from_args((S.NegativeOne, self), c)",
    ".sympy.core.add.py@@Add._eval_is_extended_nonpositive": "def _eval_is_extended_nonpositive(self):\n    from sympy.core.exprtools import _monotonic_sign\n    if not self.is_number:\n        c, a = self.as_coeff_Add()\n        if not c.is_zero and a.is_extended_nonpositive:\n            v = _monotonic_sign(a)\n            if v is not None:\n                s = v + c\n                if s != self and s.is_extended_nonpositive:\n                    return True\n                if len(self.free_symbols) == 1:\n                    v = _monotonic_sign(self)\n                    if v is not None and v != self and v.is_extended_nonpositive:\n                        return True",
    ".sympy.core.add.py@@Add._eval_is_extended_positive": "def _eval_is_extended_positive(self):\n    from sympy.core.exprtools import _monotonic_sign\n    if self.is_number:\n        return super(Add, self)._eval_is_extended_positive()\n    c, a = self.as_coeff_Add()\n    if not c.is_zero:\n        v = _monotonic_sign(a)\n        if v is not None:\n            s = v + c\n            if s != self and s.is_extended_positive and a.is_extended_nonnegative:\n                return True\n            if len(self.free_symbols) == 1:\n                v = _monotonic_sign(self)\n                if v is not None and v != self and v.is_extended_positive:\n                    return True\n    pos = nonneg = nonpos = unknown_sign = False\n    saw_INF = set()\n    args = [a for a in self.args if not a.is_zero]\n    if not args:\n        return False\n    for a in args:\n        ispos = a.is_extended_positive\n        infinite = a.is_infinite\n        if infinite:\n            saw_INF.add(fuzzy_or((ispos, a.is_extended_nonnegative)))\n            if True in saw_INF and False in saw_INF:\n                return\n        if ispos:\n            pos = True\n            continue\n        elif a.is_extended_nonnegative:\n            nonneg = True\n            continue\n        elif a.is_extended_nonpositive:\n            nonpos = True\n            continue\n        if infinite is None:\n            return\n        unknown_sign = True\n    if saw_INF:\n        if len(saw_INF) > 1:\n            return\n        return saw_INF.pop()\n    elif unknown_sign:\n        return\n    elif not nonpos and (not nonneg) and pos:\n        return True\n    elif not nonpos and pos:\n        return True\n    elif not pos and (not nonneg):\n        return False",
    ".sympy.core.mul.py@@Mul._eval_is_hermitian": "def _eval_is_hermitian(self):\n    return self._eval_herm_antiherm(True)",
    ".sympy.core.mul.py@@Mul._eval_herm_antiherm": "def _eval_herm_antiherm(self, real):\n    one_nc = zero = one_neither = False\n    for t in self.args:\n        if not t.is_commutative:\n            if one_nc:\n                return\n            one_nc = True\n        if t.is_antihermitian:\n            real = not real\n        elif t.is_hermitian:\n            if not zero:\n                z = t.is_zero\n                if not z and zero is False:\n                    zero = z\n                elif z:\n                    if all((a.is_finite for a in self.args)):\n                        return True\n                    return\n        elif t.is_hermitian is False:\n            if one_neither:\n                return\n            one_neither = True\n        else:\n            return\n    if one_neither:\n        if real:\n            return zero\n    elif zero is False or real:\n        return real",
    ".sympy.core.power.py@@Pow._eval_is_imaginary": "def _eval_is_imaginary(self):\n    from sympy import arg, log\n    if self.base.is_imaginary:\n        if self.exp.is_integer:\n            odd = self.exp.is_odd\n            if odd is not None:\n                return odd\n            return\n    if self.exp.is_imaginary:\n        imlog = log(self.base).is_imaginary\n        if imlog is not None:\n            return False\n    if self.base.is_extended_real and self.exp.is_extended_real:\n        if self.base.is_positive:\n            return False\n        else:\n            rat = self.exp.is_rational\n            if not rat:\n                return rat\n            if self.exp.is_integer:\n                return False\n            else:\n                half = (2 * self.exp).is_integer\n                if half:\n                    return self.base.is_negative\n                return half\n    if self.base.is_extended_real is False:\n        i = arg(self.base) * self.exp / S.Pi\n        isodd = (2 * i).is_odd\n        if isodd is not None:\n            return isodd\n    if self.exp.is_negative:\n        return (1 / self).is_imaginary",
    ".sympy.core.power.py@@Pow._eval_is_positive": "def _eval_is_positive(self):\n    ext_pos = Pow._eval_is_extended_positive(self)\n    if ext_pos is True:\n        return self.is_finite\n    return ext_pos",
    ".sympy.core.power.py@@Pow._eval_is_extended_positive": "def _eval_is_extended_positive(self):\n    from sympy import log\n    if self.base == self.exp:\n        if self.base.is_extended_nonnegative:\n            return True\n    elif self.base.is_positive:\n        if self.exp.is_extended_real:\n            return True\n    elif self.base.is_extended_negative:\n        if self.exp.is_even:\n            return True\n        if self.exp.is_odd:\n            return False\n    elif self.base.is_zero:\n        if self.exp.is_extended_real:\n            return self.exp.is_zero\n    elif self.base.is_extended_nonpositive:\n        if self.exp.is_odd:\n            return False\n    elif self.base.is_imaginary:\n        if self.exp.is_integer:\n            m = self.exp % 4\n            if m.is_zero:\n                return True\n            if m.is_integer and m.is_zero is False:\n                return False\n        if self.exp.is_imaginary:\n            return log(self.base).is_imaginary",
    ".sympy.core.power.py@@Pow._eval_is_complex": "def _eval_is_complex(self):\n    if all((a.is_complex for a in self.args)) and self._eval_is_finite():\n        return True",
    ".sympy.core.power.py@@Pow._eval_is_finite": "def _eval_is_finite(self):\n    if self.exp.is_negative:\n        if self.base.is_zero:\n            return False\n        if self.base.is_infinite or self.base.is_nonzero:\n            return True\n    c1 = self.base.is_finite\n    if c1 is None:\n        return\n    c2 = self.exp.is_finite\n    if c2 is None:\n        return\n    if c1 and c2:\n        if self.exp.is_nonnegative or fuzzy_not(self.base.is_zero):\n            return True",
    ".sympy.core.power.py@@Pow._eval_is_zero": "def _eval_is_zero(self):\n    if self.base.is_zero:\n        if self.exp.is_extended_positive:\n            return True\n        elif self.exp.is_extended_nonpositive:\n            return False\n    elif self.base.is_zero is False:\n        if self.exp.is_negative:\n            return self.base.is_infinite\n        elif self.exp.is_nonnegative:\n            return False\n        elif self.exp.is_infinite:\n            if (1 - abs(self.base)).is_extended_positive:\n                return self.exp.is_extended_positive\n            elif (1 - abs(self.base)).is_extended_negative:\n                return self.exp.is_extended_negative\n    else:\n        return None",
    ".sympy.core.power.py@@Pow._eval_is_negative": "def _eval_is_negative(self):\n    ext_neg = Pow._eval_is_extended_negative(self)\n    if ext_neg is True:\n        return self.is_finite\n    return ext_neg",
    ".sympy.core.power.py@@Pow._eval_is_extended_negative": "def _eval_is_extended_negative(self):\n    if self.base.is_extended_negative:\n        if self.exp.is_odd and self.base.is_finite:\n            return True\n        if self.exp.is_even:\n            return False\n    elif self.base.is_extended_positive:\n        if self.exp.is_extended_real:\n            return False\n    elif self.base.is_zero:\n        if self.exp.is_extended_real:\n            return False\n    elif self.base.is_extended_nonnegative:\n        if self.exp.is_extended_nonnegative:\n            return False\n    elif self.base.is_extended_nonpositive:\n        if self.exp.is_even:\n            return False\n    elif self.base.is_extended_real:\n        if self.exp.is_even:\n            return False",
    ".sympy.core.power.py@@Pow._eval_is_odd": "def _eval_is_odd(self):\n    if self.exp.is_integer:\n        if self.exp.is_positive:\n            return self.base.is_odd\n        elif self.exp.is_nonnegative and self.base.is_odd:\n            return True\n        elif self.base is S.NegativeOne:\n            return True",
    ".sympy.core.power.py@@Pow._eval_is_extended_real": "def _eval_is_extended_real(self):\n    from sympy import arg, exp, log, Mul\n    real_b = self.base.is_extended_real\n    if real_b is None:\n        if self.base.func == exp and self.base.args[0].is_imaginary:\n            return self.exp.is_imaginary\n        return\n    real_e = self.exp.is_extended_real\n    if real_e is None:\n        return\n    if real_b and real_e:\n        if self.base.is_extended_positive:\n            return True\n        elif self.base.is_extended_nonnegative and self.exp.is_extended_nonnegative:\n            return True\n        elif self.exp.is_integer and self.base.is_extended_nonzero:\n            return True\n        elif self.exp.is_integer and self.exp.is_nonnegative:\n            return True\n        elif self.base.is_extended_negative:\n            if self.exp.is_Rational:\n                return False\n    if real_e and self.exp.is_extended_negative and (self.base.is_zero is False):\n        return Pow(self.base, -self.exp).is_extended_real\n    im_b = self.base.is_imaginary\n    im_e = self.exp.is_imaginary\n    if im_b:\n        if self.exp.is_integer:\n            if self.exp.is_even:\n                return True\n            elif self.exp.is_odd:\n                return False\n        elif im_e and log(self.base).is_imaginary:\n            return True\n        elif self.exp.is_Add:\n            c, a = self.exp.as_coeff_Add()\n            if c and c.is_Integer:\n                return Mul(self.base ** c, self.base ** a, evaluate=False).is_extended_real\n        elif self.base in (-S.ImaginaryUnit, S.ImaginaryUnit):\n            if (self.exp / 2).is_integer is False:\n                return False\n    if real_b and im_e:\n        if self.base is S.NegativeOne:\n            return True\n        c = self.exp.coeff(S.ImaginaryUnit)\n        if c:\n            if self.base.is_rational and c.is_rational:\n                if self.base.is_nonzero and (self.base - 1).is_nonzero and c.is_nonzero:\n                    return False\n            ok = (c * log(self.base) / S.Pi).is_integer\n            if ok is not None:\n                return ok\n    if real_b is False:\n        i = arg(self.base) * self.exp / S.Pi\n        return i.is_integer",
    ".sympy.core.power.py@@Pow._eval_is_even": "def _eval_is_even(self):\n    if self.exp.is_integer and self.exp.is_positive:\n        return self.base.is_even",
    ".sympy.core.power.py@@Pow._eval_is_rational": "def _eval_is_rational(self):\n    if self.exp.is_integer and self.base.is_rational and fuzzy_not(fuzzy_and([self.exp.is_negative, self.base.is_zero])):\n        return True\n    p = self.func(*self.as_base_exp())\n    if not p.is_Pow:\n        return p.is_rational\n    b, e = p.as_base_exp()\n    if e.is_Rational and b.is_Rational:\n        return False\n    if e.is_integer:\n        if b.is_rational:\n            if fuzzy_not(b.is_zero) or e.is_nonnegative:\n                return True\n            if b == e:\n                return True\n        elif b.is_irrational:\n            return e.is_zero",
    ".sympy.core.power.py@@Pow._eval_is_integer": "def _eval_is_integer(self):\n    b, e = self.args\n    if b.is_rational:\n        if b.is_integer is False and e.is_positive:\n            return False\n    if b.is_integer and e.is_integer:\n        if b is S.NegativeOne:\n            return True\n        if e.is_nonnegative or e.is_positive:\n            return True\n    if b.is_integer and e.is_negative and (e.is_finite or e.is_integer):\n        if fuzzy_not((b - 1).is_zero) and fuzzy_not((b + 1).is_zero):\n            return False\n    if b.is_Number and e.is_Number:\n        check = self.func(*self.args)\n        return check.is_Integer",
    ".sympy.core.power.py@@Pow._eval_is_prime": "def _eval_is_prime(self):\n    if self.base.is_integer and self.exp.is_integer and (self.exp - 1).is_positive:\n        return False",
    ".sympy.core.power.py@@Pow._eval_is_composite": "def _eval_is_composite(self):\n    if self.base.is_integer and self.exp.is_integer and ((self.base - 1).is_positive and (self.exp - 1).is_positive or ((self.base + 1).is_negative and self.exp.is_positive and self.exp.is_even)):\n        return True",
    ".sympy.core.expr.py@@Expr.__sub__": "def __sub__(self, other):\n    return Add(self, -other)",
    ".sympy.core.numbers.py@@One.__neg__": "def __neg__():\n    return S.NegativeOne",
    ".sympy.core.add.py@@Add._eval_is_irrational": "def _eval_is_irrational(self):\n    for t in self.args:\n        a = t.is_irrational\n        if a:\n            others = list(self.args)\n            others.remove(t)\n            if all((x.is_rational is True for x in others)):\n                return True\n            return None\n        if a is None:\n            return\n    return False",
    ".sympy.core.power.py@@Pow._eval_is_algebraic": "def _eval_is_algebraic(self):\n\n    def _is_one(expr):\n        try:\n            return (expr - 1).is_zero\n        except ValueError:\n            return False\n    if self.base.is_zero or _is_one(self.base):\n        return True\n    elif self.exp.is_rational:\n        if self.base.is_algebraic is False:\n            return self.exp.is_zero\n        if self.base.is_zero is False:\n            if self.exp.is_nonzero:\n                return self.base.is_algebraic\n            elif self.base.is_algebraic:\n                return True\n        if self.exp.is_positive:\n            return self.base.is_algebraic\n    elif self.base.is_algebraic and self.exp.is_algebraic:\n        if fuzzy_not(self.base.is_zero) and fuzzy_not(_is_one(self.base)) or self.base.is_integer is False or self.base.is_irrational:\n            return self.exp.is_rational",
    ".sympy.core.power.py@@Pow._is_one": "def _is_one(expr):\n    try:\n        return (expr - 1).is_zero\n    except ValueError:\n        return False",
    ".sympy.core.mul.py@@Mul._eval_is_finite": "def _eval_is_finite(self):\n    if all((a.is_finite for a in self.args)):\n        return True\n    if any((a.is_infinite for a in self.args)):\n        if all((a.is_zero is False for a in self.args)):\n            return False",
    ".sympy.core.expr.py@@Expr._eval_is_extended_positive": "def _eval_is_extended_positive(self):\n    return self._eval_is_extended_positive_negative(positive=True)",
    ".sympy.core.numbers.py@@Float.__gt__": "def __gt__(self, other):\n    if isinstance(other, NumberSymbol):\n        return other.__lt__(self)\n    rv = self._Frel(other, mlib.mpf_gt)\n    if rv is None:\n        return Expr.__gt__(self, other)\n    return rv",
    ".sympy.core.mul.py@@Mul._eval_is_algebraic": "def _eval_is_algebraic(self):\n    r = _fuzzy_group((a.is_algebraic for a in self.args), quick_exit=True)\n    if r:\n        return r\n    elif r is False:\n        return self.is_zero",
    ".sympy.core.mul.py@@Mul._eval_is_imaginary": "def _eval_is_imaginary(self):\n    z = self.is_zero\n    if z:\n        return False\n    elif z is False:\n        return self._eval_real_imag(False)",
    ".sympy.core.add.py@@Add.__neg__": "def __neg__(self):\n    if not global_distribute[0]:\n        return super(Add, self).__neg__()\n    return Add(*[-i for i in self.args])",
    ".sympy.core.mul.py@@Mul.__neg__": "def __neg__(self):\n    c, args = self.as_coeff_mul()\n    c = -c\n    if c is not S.One:\n        if args[0].is_Number:\n            args = list(args)\n            if c is S.NegativeOne:\n                args[0] = -args[0]\n            else:\n                args[0] *= c\n        else:\n            args = (c,) + args\n    return self._from_args(args, self.is_commutative)",
    ".sympy.core.add.py@@Add._eval_is_polynomial": "def _eval_is_polynomial(self, syms):\n    return all((term._eval_is_polynomial(syms) for term in self.args))",
    ".sympy.core.power.py@@Pow._eval_is_polynomial": "def _eval_is_polynomial(self, syms):\n    if self.exp.has(*syms):\n        return False\n    if self.base.has(*syms):\n        return bool(self.base._eval_is_polynomial(syms) and self.exp.is_Integer and (self.exp >= 0))\n    else:\n        return True",
    ".sympy.core.numbers.py@@Integer.__ge__": "def __ge__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if other.is_Integer:\n        return _sympify(self.p >= other.p)\n    return Rational.__ge__(self, other)",
    ".sympy.core.add.py@@Add.as_coefficients_dict": "def as_coefficients_dict(a):\n    d = defaultdict(list)\n    for ai in a.args:\n        c, m = ai.as_coeff_Mul()\n        d[m].append(c)\n    for k, v in d.items():\n        if len(v) == 1:\n            d[k] = v[0]\n        else:\n            d[k] = Add(*v)\n    di = defaultdict(int)\n    di.update(d)\n    return di",
    ".sympy.core.compatibility.py@@is_sequence": "def is_sequence(i, include=None):\n    return hasattr(i, '__getitem__') and iterable(i) or (bool(include) and isinstance(i, include))",
    ".sympy.core.exprtools.py@@Factors.lcm": "def lcm(self, other):\n    if not isinstance(other, Factors):\n        other = Factors(other)\n        if any((f.is_zero for f in (self, other))):\n            return Factors(S.Zero)\n    factors = dict(self.factors)\n    for factor, exp in other.factors.items():\n        if factor in factors:\n            exp = max(exp, factors[factor])\n        factors[factor] = exp\n    return Factors(factors)",
    ".sympy.core.exprtools.py@@Factors.quo": "def quo(self, other):\n    return self.div(other)[0]",
    ".sympy.core.exprtools.py@@Factors.div": "def div(self, other):\n    quo, rem = (dict(self.factors), {})\n    if not isinstance(other, Factors):\n        other = Factors(other)\n        if other.is_zero:\n            raise ZeroDivisionError\n        if self.is_zero:\n            return (Factors(S.Zero), Factors())\n    for factor, exp in other.factors.items():\n        if factor in quo:\n            d = quo[factor] - exp\n            if _isnumber(d):\n                if d <= 0:\n                    del quo[factor]\n                if d >= 0:\n                    if d:\n                        quo[factor] = d\n                    continue\n                exp = -d\n            else:\n                r = quo[factor].extract_additively(exp)\n                if r is not None:\n                    if r:\n                        quo[factor] = r\n                    else:\n                        del quo[factor]\n                else:\n                    other_exp = exp\n                    sc, sa = quo[factor].as_coeff_Add()\n                    if sc:\n                        oc, oa = other_exp.as_coeff_Add()\n                        diff = sc - oc\n                        if diff > 0:\n                            quo[factor] -= oc\n                            other_exp = oa\n                        elif diff < 0:\n                            quo[factor] -= sc\n                            other_exp = oa - diff\n                        else:\n                            quo[factor] = sa\n                            other_exp = oa\n                    if other_exp:\n                        rem[factor] = other_exp\n                    else:\n                        assert factor not in rem\n                continue\n        rem[factor] = exp\n    return (Factors(quo), Factors(rem))",
    ".sympy.polys.densebasic.py@@dmp_terms_gcd": "def dmp_terms_gcd(f, u, K):\n    if dmp_ground_TC(f, u, K) or dmp_zero_p(f, u):\n        return ((0,) * (u + 1), f)\n    F = dmp_to_dict(f, u)\n    G = monomial_min(*list(F.keys()))\n    if all((g == 0 for g in G)):\n        return (G, f)\n    f = {}\n    for monom, coeff in F.items():\n        f[monomial_div(monom, G)] = coeff\n    return (G, dmp_from_dict(f, u, K))",
    ".sympy.polys.densebasic.py@@dmp_ground_TC": "def dmp_ground_TC(f, u, K):\n    while u:\n        f = dmp_TC(f, K)\n        u -= 1\n    return dup_TC(f, K)",
    ".sympy.polys.densetools.py@@dmp_ground_primitive": "def dmp_ground_primitive(f, u, K):\n    if not u:\n        return dup_primitive(f, K)\n    if dmp_zero_p(f, u):\n        return (K.zero, f)\n    cont = dmp_ground_content(f, u, K)\n    if K.is_one(cont):\n        return (cont, f)\n    else:\n        return (cont, dmp_quo_ground(f, cont, u, K))",
    ".sympy.polys.densetools.py@@dmp_ground_content": "def dmp_ground_content(f, u, K):\n    from sympy.polys.domains import QQ\n    if not u:\n        return dup_content(f, K)\n    if dmp_zero_p(f, u):\n        return K.zero\n    cont, v = (K.zero, u - 1)\n    if K == QQ:\n        for c in f:\n            cont = K.gcd(cont, dmp_ground_content(c, v, K))\n    else:\n        for c in f:\n            cont = K.gcd(cont, dmp_ground_content(c, v, K))\n            if K.is_one(cont):\n                break\n    return cont",
    ".sympy.polys.densebasic.py@@dmp_exclude": "def dmp_exclude(f, u, K):\n    if not u or dmp_ground_p(f, None, u):\n        return ([], f, u)\n    J, F = ([], dmp_to_dict(f, u))\n    for j in range(0, u + 1):\n        for monom in F.keys():\n            if monom[j]:\n                break\n        else:\n            J.append(j)\n    if not J:\n        return ([], f, u)\n    f = {}\n    for monom, coeff in F.items():\n        monom = list(monom)\n        for j in reversed(J):\n            del monom[j]\n        f[tuple(monom)] = coeff\n    u -= len(J)\n    return (J, dmp_from_dict(f, u, K), u)",
    ".sympy.polys.densebasic.py@@dmp_ground_p": "def dmp_ground_p(f, c, u):\n    if c is not None and (not c):\n        return dmp_zero_p(f, u)\n    while u:\n        if len(f) != 1:\n            return False\n        f = f[0]\n        u -= 1\n    if c is None:\n        return len(f) <= 1\n    else:\n        return f == [c]",
    ".sympy.polys.factortools.py@@dmp_zz_factor": "def dmp_zz_factor(f, u, K):\n    if not u:\n        return dup_zz_factor(f, K)\n    if dmp_zero_p(f, u):\n        return (K.zero, [])\n    cont, g = dmp_ground_primitive(f, u, K)\n    if dmp_ground_LC(g, u, K) < 0:\n        cont, g = (-cont, dmp_neg(g, u, K))\n    if all((d <= 0 for d in dmp_degree_list(g, u))):\n        return (cont, [])\n    G, g = dmp_primitive(g, u, K)\n    factors = []\n    if dmp_degree(g, u) > 0:\n        g = dmp_sqf_part(g, u, K)\n        H = dmp_zz_wang(g, u, K)\n        factors = dmp_trial_division(f, H, u, K)\n    for g, k in dmp_zz_factor(G, u - 1, K)[1]:\n        factors.insert(0, ([g], k))\n    return (cont, _sort_factors(factors))",
    ".sympy.polys.densebasic.py@@dmp_ground_LC": "def dmp_ground_LC(f, u, K):\n    while u:\n        f = dmp_LC(f, K)\n        u -= 1\n    return dup_LC(f, K)",
    ".sympy.polys.densebasic.py@@dmp_degree_list": "def dmp_degree_list(f, u):\n    degs = [-oo] * (u + 1)\n    _rec_degree_list(f, u, 0, degs)\n    return tuple(degs)",
    ".sympy.polys.densebasic.py@@_rec_degree_list": "def _rec_degree_list(g, v, i, degs):\n    degs[i] = max(degs[i], dmp_degree(g, v))\n    if v > 0:\n        v, i = (v - 1, i + 1)\n        for c in g:\n            _rec_degree_list(c, v, i, degs)",
    ".sympy.core.expr.py@@Expr.__lt__": "def __lt__(self, other):\n    from sympy import StrictLessThan\n    return self._cmp(other, '<', StrictLessThan)",
    ".sympy.core.expr.py@@Expr._cmp": "def _cmp(self, other, op, cls):\n    assert op in ('<', '>', '<=', '>=')\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if not isinstance(other, Expr):\n        return NotImplemented\n    for me in (self, other):\n        if me.is_extended_real is False:\n            raise TypeError('Invalid comparison of non-real %s' % me)\n        if me is S.NaN:\n            raise TypeError('Invalid NaN comparison')\n    n2 = _n2(self, other)\n    if n2 is not None:\n        if n2 in (S.Infinity, S.NegativeInfinity):\n            n2 = float(n2)\n        if op == '<':\n            return _sympify(n2 < 0)\n        elif op == '>':\n            return _sympify(n2 > 0)\n        elif op == '<=':\n            return _sympify(n2 <= 0)\n        else:\n            return _sympify(n2 >= 0)\n    if self.is_extended_real and other.is_extended_real:\n        if op in ('<=', '>') and (self.is_infinite and self.is_extended_negative or (other.is_infinite and other.is_extended_positive)):\n            return S.true if op == '<=' else S.false\n        if op in ('<', '>=') and (self.is_infinite and self.is_extended_positive or (other.is_infinite and other.is_extended_negative)):\n            return S.true if op == '>=' else S.false\n        diff = self - other\n        if diff is not S.NaN:\n            if op == '<':\n                test = diff.is_extended_negative\n            elif op == '>':\n                test = diff.is_extended_positive\n            elif op == '<=':\n                test = diff.is_extended_nonpositive\n            else:\n                test = diff.is_extended_nonnegative\n            if test is not None:\n                return S.true if test == True else S.false\n    return cls(self, other, evaluate=False)",
    ".sympy.core.expr.py@@_n2": "def _n2(a, b):\n    if a.is_comparable and b.is_comparable:\n        dif = (a - b).evalf(2)\n        if dif.is_comparable:\n            return dif",
    ".sympy.core.basic.py@@Basic.is_comparable": "def is_comparable(self):\n    is_extended_real = self.is_extended_real\n    if is_extended_real is False:\n        return False\n    if not self.is_number:\n        return False\n    n, i = [p.evalf(2) if not p.is_Number else p for p in self.as_real_imag()]\n    if not (i.is_Number and n.is_Number):\n        return False\n    if i:\n        return False\n    else:\n        return n._prec != 1",
    ".sympy.core.numbers.py@@NegativeInfinity.__sub__": "def __sub__(self, other):\n    if isinstance(other, Number) and global_evaluate[0]:\n        if other is S.NegativeInfinity or other is S.NaN:\n            return S.NaN\n        return self\n    return Number.__sub__(self, other)",
    ".sympy.core.numbers.py@@NegativeInfinity.evalf": "def evalf(self, prec=None, **options):\n    return self._eval_evalf(prec)",
    ".sympy.core.numbers.py@@NegativeInfinity._eval_evalf": "def _eval_evalf(self, prec=None):\n    return Float('-inf')",
    ".sympy.core.numbers.py@@Number.__float__": "def __float__(self):\n    return mlib.to_float(self._as_mpf_val(53))",
    ".sympy.core.numbers.py@@NegativeInfinity._as_mpf_val": "def _as_mpf_val(self, prec):\n    return mlib.fninf",
    ".sympy.polys.euclidtools.py@@dmp_primitive": "def dmp_primitive(f, u, K):\n    cont, v = (dmp_content(f, u, K), u - 1)\n    if dmp_zero_p(f, u) or dmp_one_p(cont, v, K):\n        return (cont, f)\n    else:\n        return (cont, [dmp_quo(c, cont, v, K) for c in f])",
    ".sympy.polys.euclidtools.py@@dmp_content": "def dmp_content(f, u, K):\n    cont, v = (dmp_LC(f, K), u - 1)\n    if dmp_zero_p(f, u):\n        return cont\n    for c in f[1:]:\n        cont = dmp_gcd(cont, c, v, K)\n        if dmp_one_p(cont, v, K):\n            break\n    if K.is_negative(dmp_ground_LC(cont, v, K)):\n        return dmp_neg(cont, v, K)\n    else:\n        return cont",
    ".sympy.polys.euclidtools.py@@dmp_gcd": "def dmp_gcd(f, g, u, K):\n    return dmp_inner_gcd(f, g, u, K)[0]",
    ".sympy.polys.euclidtools.py@@dmp_inner_gcd": "def dmp_inner_gcd(f, g, u, K):\n    if not u:\n        return dup_inner_gcd(f, g, K)\n    J, (f, g) = dmp_multi_deflate((f, g), u, K)\n    h, cff, cfg = _dmp_inner_gcd(f, g, u, K)\n    return (dmp_inflate(h, J, u, K), dmp_inflate(cff, J, u, K), dmp_inflate(cfg, J, u, K))",
    ".sympy.polys.euclidtools.py@@dup_inner_gcd": "def dup_inner_gcd(f, g, K):\n    if not K.is_Exact:\n        try:\n            exact = K.get_exact()\n        except DomainError:\n            return ([K.one], f, g)\n        f = dup_convert(f, K, exact)\n        g = dup_convert(g, K, exact)\n        h, cff, cfg = dup_inner_gcd(f, g, exact)\n        h = dup_convert(h, exact, K)\n        cff = dup_convert(cff, exact, K)\n        cfg = dup_convert(cfg, exact, K)\n        return (h, cff, cfg)\n    elif K.is_Field:\n        if K.is_QQ and query('USE_HEU_GCD'):\n            try:\n                return dup_qq_heu_gcd(f, g, K)\n            except HeuristicGCDFailed:\n                pass\n        return dup_ff_prs_gcd(f, g, K)\n    else:\n        if K.is_ZZ and query('USE_HEU_GCD'):\n            try:\n                return dup_zz_heu_gcd(f, g, K)\n            except HeuristicGCDFailed:\n                pass\n        return dup_rr_prs_gcd(f, g, K)",
    ".sympy.polys.polyconfig.py@@query": "def query(key):\n    return _current_config.get(key.upper(), None)",
    ".sympy.polys.euclidtools.py@@dup_zz_heu_gcd": "def dup_zz_heu_gcd(f, g, K):\n    result = _dup_rr_trivial_gcd(f, g, K)\n    if result is not None:\n        return result\n    df = dup_degree(f)\n    dg = dup_degree(g)\n    gcd, f, g = dup_extract(f, g, K)\n    if df == 0 or dg == 0:\n        return ([gcd], f, g)\n    f_norm = dup_max_norm(f, K)\n    g_norm = dup_max_norm(g, K)\n    B = K(2 * min(f_norm, g_norm) + 29)\n    x = max(min(B, 99 * K.sqrt(B)), 2 * min(f_norm // abs(dup_LC(f, K)), g_norm // abs(dup_LC(g, K))) + 2)\n    for i in range(0, HEU_GCD_MAX):\n        ff = dup_eval(f, x, K)\n        gg = dup_eval(g, x, K)\n        if ff and gg:\n            h = K.gcd(ff, gg)\n            cff = ff // h\n            cfg = gg // h\n            h = _dup_zz_gcd_interpolate(h, x, K)\n            h = dup_primitive(h, K)[1]\n            cff_, r = dup_div(f, h, K)\n            if not r:\n                cfg_, r = dup_div(g, h, K)\n                if not r:\n                    h = dup_mul_ground(h, gcd, K)\n                    return (h, cff_, cfg_)\n            cff = _dup_zz_gcd_interpolate(cff, x, K)\n            h, r = dup_div(f, cff, K)\n            if not r:\n                cfg_, r = dup_div(g, h, K)\n                if not r:\n                    h = dup_mul_ground(h, gcd, K)\n                    return (h, cff, cfg_)\n            cfg = _dup_zz_gcd_interpolate(cfg, x, K)\n            h, r = dup_div(g, cfg, K)\n            if not r:\n                cff_, r = dup_div(f, h, K)\n                if not r:\n                    h = dup_mul_ground(h, gcd, K)\n                    return (h, cff_, cfg)\n        x = 73794 * x * K.sqrt(K.sqrt(x)) // 27011\n    raise HeuristicGCDFailed('no luck')",
    ".sympy.polys.euclidtools.py@@_dup_rr_trivial_gcd": "def _dup_rr_trivial_gcd(f, g, K):\n    if not (f or g):\n        return ([], [], [])\n    elif not f:\n        if K.is_nonnegative(dup_LC(g, K)):\n            return (g, [], [K.one])\n        else:\n            return (dup_neg(g, K), [], [-K.one])\n    elif not g:\n        if K.is_nonnegative(dup_LC(f, K)):\n            return (f, [K.one], [])\n        else:\n            return (dup_neg(f, K), [-K.one], [])\n    return None",
    ".sympy.polys.densetools.py@@dup_extract": "def dup_extract(f, g, K):\n    fc = dup_content(f, K)\n    gc = dup_content(g, K)\n    gcd = K.gcd(fc, gc)\n    if not K.is_one(gcd):\n        f = dup_quo_ground(f, gcd, K)\n        g = dup_quo_ground(g, gcd, K)\n    return (gcd, f, g)",
    ".sympy.polys.densebasic.py@@dmp_one_p": "def dmp_one_p(f, u, K):\n    return dmp_ground_p(f, K.one, u)",
    ".sympy.polys.domains.domain.py@@Domain.is_negative": "def is_negative(self, a):\n    return a < 0",
    ".sympy.polys.sqfreetools.py@@dmp_sqf_part": "def dmp_sqf_part(f, u, K):\n    if not u:\n        return dup_sqf_part(f, K)\n    if K.is_FiniteField:\n        return dmp_gf_sqf_part(f, u, K)\n    if dmp_zero_p(f, u):\n        return f\n    if K.is_negative(dmp_ground_LC(f, u, K)):\n        f = dmp_neg(f, u, K)\n    gcd = dmp_gcd(f, dmp_diff(f, 1, u, K), u, K)\n    sqf = dmp_quo(f, gcd, u, K)\n    if K.is_Field:\n        return dmp_ground_monic(sqf, u, K)\n    else:\n        return dmp_ground_primitive(sqf, u, K)[1]",
    ".sympy.polys.densetools.py@@dmp_diff": "def dmp_diff(f, m, u, K):\n    if not u:\n        return dup_diff(f, m, K)\n    if m <= 0:\n        return f\n    n = dmp_degree(f, u)\n    if n < m:\n        return dmp_zero(u)\n    deriv, v = ([], u - 1)\n    if m == 1:\n        for coeff in f[:-m]:\n            deriv.append(dmp_mul_ground(coeff, K(n), v, K))\n            n -= 1\n    else:\n        for coeff in f[:-m]:\n            k = n\n            for i in range(n - 1, n - m, -1):\n                k *= i\n            deriv.append(dmp_mul_ground(coeff, K(k), v, K))\n            n -= 1\n    return dmp_strip(deriv, u)",
    ".sympy.polys.domains.domain.py@@Domain.__call__": "def __call__(self, *args):\n    return self.new(*args)",
    ".sympy.polys.domains.domain.py@@Domain.new": "def new(self, *args):\n    return self.dtype(*args)",
    ".sympy.polys.densearith.py@@dmp_mul_ground": "def dmp_mul_ground(f, c, u, K):\n    if not u:\n        return dup_mul_ground(f, c, K)\n    v = u - 1\n    return [dmp_mul_ground(cf, c, v, K) for cf in f]",
    ".sympy.polys.densearith.py@@dup_mul_ground": "def dup_mul_ground(f, c, K):\n    if not c or not f:\n        return []\n    else:\n        return [cf * c for cf in f]",
    ".sympy.polys.densebasic.py@@dmp_multi_deflate": "def dmp_multi_deflate(polys, u, K):\n    if not u:\n        M, H = dup_multi_deflate(polys, K)\n        return ((M,), H)\n    F, B = ([], [0] * (u + 1))\n    for p in polys:\n        f = dmp_to_dict(p, u)\n        if not dmp_zero_p(p, u):\n            for M in f.keys():\n                for i, m in enumerate(M):\n                    B[i] = igcd(B[i], m)\n        F.append(f)\n    for i, b in enumerate(B):\n        if not b:\n            B[i] = 1\n    B = tuple(B)\n    if all((b == 1 for b in B)):\n        return (B, polys)\n    H = []\n    for f in F:\n        h = {}\n        for A, coeff in f.items():\n            N = [a // b for a, b in zip(A, B)]\n            h[tuple(N)] = coeff\n        H.append(dmp_from_dict(h, u, K))\n    return (B, tuple(H))",
    ".sympy.polys.euclidtools.py@@_dmp_inner_gcd": "def _dmp_inner_gcd(f, g, u, K):\n    if not K.is_Exact:\n        try:\n            exact = K.get_exact()\n        except DomainError:\n            return (dmp_one(u, K), f, g)\n        f = dmp_convert(f, u, K, exact)\n        g = dmp_convert(g, u, K, exact)\n        h, cff, cfg = _dmp_inner_gcd(f, g, u, exact)\n        h = dmp_convert(h, u, exact, K)\n        cff = dmp_convert(cff, u, exact, K)\n        cfg = dmp_convert(cfg, u, exact, K)\n        return (h, cff, cfg)\n    elif K.is_Field:\n        if K.is_QQ and query('USE_HEU_GCD'):\n            try:\n                return dmp_qq_heu_gcd(f, g, u, K)\n            except HeuristicGCDFailed:\n                pass\n        return dmp_ff_prs_gcd(f, g, u, K)\n    else:\n        if K.is_ZZ and query('USE_HEU_GCD'):\n            try:\n                return dmp_zz_heu_gcd(f, g, u, K)\n            except HeuristicGCDFailed:\n                pass\n        return dmp_rr_prs_gcd(f, g, u, K)",
    ".sympy.polys.euclidtools.py@@dmp_zz_heu_gcd": "def dmp_zz_heu_gcd(f, g, u, K):\n    if not u:\n        return dup_zz_heu_gcd(f, g, K)\n    result = _dmp_rr_trivial_gcd(f, g, u, K)\n    if result is not None:\n        return result\n    gcd, f, g = dmp_ground_extract(f, g, u, K)\n    f_norm = dmp_max_norm(f, u, K)\n    g_norm = dmp_max_norm(g, u, K)\n    B = K(2 * min(f_norm, g_norm) + 29)\n    x = max(min(B, 99 * K.sqrt(B)), 2 * min(f_norm // abs(dmp_ground_LC(f, u, K)), g_norm // abs(dmp_ground_LC(g, u, K))) + 2)\n    for i in range(0, HEU_GCD_MAX):\n        ff = dmp_eval(f, x, u, K)\n        gg = dmp_eval(g, x, u, K)\n        v = u - 1\n        if not (dmp_zero_p(ff, v) or dmp_zero_p(gg, v)):\n            h, cff, cfg = dmp_zz_heu_gcd(ff, gg, v, K)\n            h = _dmp_zz_gcd_interpolate(h, x, v, K)\n            h = dmp_ground_primitive(h, u, K)[1]\n            cff_, r = dmp_div(f, h, u, K)\n            if dmp_zero_p(r, u):\n                cfg_, r = dmp_div(g, h, u, K)\n                if dmp_zero_p(r, u):\n                    h = dmp_mul_ground(h, gcd, u, K)\n                    return (h, cff_, cfg_)\n            cff = _dmp_zz_gcd_interpolate(cff, x, v, K)\n            h, r = dmp_div(f, cff, u, K)\n            if dmp_zero_p(r, u):\n                cfg_, r = dmp_div(g, h, u, K)\n                if dmp_zero_p(r, u):\n                    h = dmp_mul_ground(h, gcd, u, K)\n                    return (h, cff, cfg_)\n            cfg = _dmp_zz_gcd_interpolate(cfg, x, v, K)\n            h, r = dmp_div(g, cfg, u, K)\n            if dmp_zero_p(r, u):\n                cff_, r = dmp_div(f, h, u, K)\n                if dmp_zero_p(r, u):\n                    h = dmp_mul_ground(h, gcd, u, K)\n                    return (h, cff_, cfg)\n        x = 73794 * x * K.sqrt(K.sqrt(x)) // 27011\n    raise HeuristicGCDFailed('no luck')",
    ".sympy.polys.euclidtools.py@@_dmp_rr_trivial_gcd": "def _dmp_rr_trivial_gcd(f, g, u, K):\n    zero_f = dmp_zero_p(f, u)\n    zero_g = dmp_zero_p(g, u)\n    if_contain_one = dmp_one_p(f, u, K) or dmp_one_p(g, u, K)\n    if zero_f and zero_g:\n        return tuple(dmp_zeros(3, u, K))\n    elif zero_f:\n        if K.is_nonnegative(dmp_ground_LC(g, u, K)):\n            return (g, dmp_zero(u), dmp_one(u, K))\n        else:\n            return (dmp_neg(g, u, K), dmp_zero(u), dmp_ground(-K.one, u))\n    elif zero_g:\n        if K.is_nonnegative(dmp_ground_LC(f, u, K)):\n            return (f, dmp_one(u, K), dmp_zero(u))\n        else:\n            return (dmp_neg(f, u, K), dmp_ground(-K.one, u), dmp_zero(u))\n    elif if_contain_one:\n        return (dmp_one(u, K), f, g)\n    elif query('USE_SIMPLIFY_GCD'):\n        return _dmp_simplify_gcd(f, g, u, K)\n    else:\n        return None",
    ".sympy.polys.euclidtools.py@@_dmp_simplify_gcd": "def _dmp_simplify_gcd(f, g, u, K):\n    df = dmp_degree(f, u)\n    dg = dmp_degree(g, u)\n    if df > 0 and dg > 0:\n        return None\n    if not (df or dg):\n        F = dmp_LC(f, K)\n        G = dmp_LC(g, K)\n    elif not df:\n        F = dmp_LC(f, K)\n        G = dmp_content(g, u, K)\n    else:\n        F = dmp_content(f, u, K)\n        G = dmp_LC(g, K)\n    v = u - 1\n    h = dmp_gcd(F, G, v, K)\n    cff = [dmp_quo(cf, h, v, K) for cf in f]\n    cfg = [dmp_quo(cg, h, v, K) for cg in g]\n    return ([h], cff, cfg)",
    ".sympy.polys.densetools.py@@dmp_ground_extract": "def dmp_ground_extract(f, g, u, K):\n    fc = dmp_ground_content(f, u, K)\n    gc = dmp_ground_content(g, u, K)\n    gcd = K.gcd(fc, gc)\n    if not K.is_one(gcd):\n        f = dmp_quo_ground(f, gcd, u, K)\n        g = dmp_quo_ground(g, gcd, u, K)\n    return (gcd, f, g)",
    ".sympy.polys.densearith.py@@dmp_max_norm": "def dmp_max_norm(f, u, K):\n    if not u:\n        return dup_max_norm(f, K)\n    v = u - 1\n    return max([dmp_max_norm(c, v, K) for c in f])",
    ".sympy.polys.densearith.py@@dup_max_norm": "def dup_max_norm(f, K):\n    if not f:\n        return K.zero\n    else:\n        return max(dup_abs(f, K))",
    ".sympy.polys.densearith.py@@dup_abs": "def dup_abs(f, K):\n    return [K.abs(coeff) for coeff in f]",
    ".sympy.polys.domains.domain.py@@Domain.abs": "def abs(self, a):\n    return abs(a)",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.sqrt": "def sqrt(self, a):\n    return python_sqrt(a)",
    ".sympy.polys.domains.groundtypes.py@@python_sqrt": "def python_sqrt(n):\n    return int(mlib.isqrt(n))",
    ".sympy.polys.densetools.py@@dmp_eval": "def dmp_eval(f, a, u, K):\n    if not u:\n        return dup_eval(f, a, K)\n    if not a:\n        return dmp_TC(f, K)\n    result, v = (dmp_LC(f, K), u - 1)\n    for coeff in f[1:]:\n        result = dmp_mul_ground(result, a, v, K)\n        result = dmp_add(result, coeff, v, K)\n    return result",
    ".sympy.polys.densearith.py@@dmp_add": "def dmp_add(f, g, u, K):\n    if not u:\n        return dup_add(f, g, K)\n    df = dmp_degree(f, u)\n    if df < 0:\n        return g\n    dg = dmp_degree(g, u)\n    if dg < 0:\n        return f\n    v = u - 1\n    if df == dg:\n        return dmp_strip([dmp_add(a, b, v, K) for a, b in zip(f, g)], u)\n    else:\n        k = abs(df - dg)\n        if df > dg:\n            h, f = (f[:k], f[k:])\n        else:\n            h, g = (g[:k], g[k:])\n        return h + [dmp_add(a, b, v, K) for a, b in zip(f, g)]",
    ".sympy.polys.densearith.py@@dup_add": "def dup_add(f, g, K):\n    if not f:\n        return g\n    if not g:\n        return f\n    df = dup_degree(f)\n    dg = dup_degree(g)\n    if df == dg:\n        return dup_strip([a + b for a, b in zip(f, g)])\n    else:\n        k = abs(df - dg)\n        if df > dg:\n            h, f = (f[:k], f[k:])\n        else:\n            h, g = (g[:k], g[k:])\n        return h + [a + b for a, b in zip(f, g)]",
    ".sympy.polys.densetools.py@@dup_eval": "def dup_eval(f, a, K):\n    if not a:\n        return dup_TC(f, K)\n    result = K.zero\n    for c in f:\n        result *= a\n        result += c\n    return result",
    ".sympy.polys.euclidtools.py@@_dup_zz_gcd_interpolate": "def _dup_zz_gcd_interpolate(h, x, K):\n    f = []\n    while h:\n        g = h % x\n        if g > x // 2:\n            g -= x\n        f.insert(0, g)\n        h = (h - g) // x\n    return f",
    ".sympy.polys.densearith.py@@dup_div": "def dup_div(f, g, K):\n    if K.is_Field:\n        return dup_ff_div(f, g, K)\n    else:\n        return dup_rr_div(f, g, K)",
    ".sympy.polys.densearith.py@@dup_rr_div": "def dup_rr_div(f, g, K):\n    df = dup_degree(f)\n    dg = dup_degree(g)\n    q, r, dr = ([], f, df)\n    if not g:\n        raise ZeroDivisionError('polynomial division')\n    elif df < dg:\n        return (q, r)\n    lc_g = dup_LC(g, K)\n    while True:\n        lc_r = dup_LC(r, K)\n        if lc_r % lc_g:\n            break\n        c = K.exquo(lc_r, lc_g)\n        j = dr - dg\n        q = dup_add_term(q, c, j, K)\n        h = dup_mul_term(g, c, j, K)\n        r = dup_sub(r, h, K)\n        _dr, dr = (dr, dup_degree(r))\n        if dr < dg:\n            break\n        elif not dr < _dr:\n            raise PolynomialDivisionFailed(f, g, K)\n    return (q, r)",
    ".sympy.polys.domains.ring.py@@Ring.exquo": "def exquo(self, a, b):\n    if a % b:\n        raise ExactQuotientFailed(a, b, self)\n    else:\n        return a // b",
    ".sympy.polys.densearith.py@@dup_add_term": "def dup_add_term(f, c, i, K):\n    if not c:\n        return f\n    n = len(f)\n    m = n - i - 1\n    if i == n - 1:\n        return dup_strip([f[0] + c] + f[1:])\n    elif i >= n:\n        return [c] + [K.zero] * (i - n) + f\n    else:\n        return f[:m] + [f[m] + c] + f[m + 1:]",
    ".sympy.polys.densearith.py@@dup_mul_term": "def dup_mul_term(f, c, i, K):\n    if not c or not f:\n        return []\n    else:\n        return [cf * c for cf in f] + [K.zero] * i",
    ".sympy.polys.densearith.py@@dup_sub": "def dup_sub(f, g, K):\n    if not f:\n        return dup_neg(g, K)\n    if not g:\n        return f\n    df = dup_degree(f)\n    dg = dup_degree(g)\n    if df == dg:\n        return dup_strip([a - b for a, b in zip(f, g)])\n    else:\n        k = abs(df - dg)\n        if df > dg:\n            h, f = (f[:k], f[k:])\n        else:\n            h, g = (dup_neg(g[:k], K), g[k:])\n        return h + [a - b for a, b in zip(f, g)]",
    ".sympy.polys.euclidtools.py@@_dmp_zz_gcd_interpolate": "def _dmp_zz_gcd_interpolate(h, x, v, K):\n    f = []\n    while not dmp_zero_p(h, v):\n        g = dmp_ground_trunc(h, x, v, K)\n        f.insert(0, g)\n        h = dmp_sub(h, g, v, K)\n        h = dmp_quo_ground(h, x, v, K)\n    if K.is_negative(dmp_ground_LC(f, v + 1, K)):\n        return dmp_neg(f, v + 1, K)\n    else:\n        return f",
    ".sympy.polys.densetools.py@@dmp_ground_trunc": "def dmp_ground_trunc(f, p, u, K):\n    if not u:\n        return dup_trunc(f, p, K)\n    v = u - 1\n    return dmp_strip([dmp_ground_trunc(c, p, v, K) for c in f], u)",
    ".sympy.polys.densetools.py@@dup_trunc": "def dup_trunc(f, p, K):\n    if K.is_ZZ:\n        g = []\n        for c in f:\n            c = c % p\n            if c > p // 2:\n                g.append(c - p)\n            else:\n                g.append(c)\n    else:\n        g = [c % p for c in f]\n    return dup_strip(g)",
    ".sympy.polys.densearith.py@@dmp_sub": "def dmp_sub(f, g, u, K):\n    if not u:\n        return dup_sub(f, g, K)\n    df = dmp_degree(f, u)\n    if df < 0:\n        return dmp_neg(g, u, K)\n    dg = dmp_degree(g, u)\n    if dg < 0:\n        return f\n    v = u - 1\n    if df == dg:\n        return dmp_strip([dmp_sub(a, b, v, K) for a, b in zip(f, g)], u)\n    else:\n        k = abs(df - dg)\n        if df > dg:\n            h, f = (f[:k], f[k:])\n        else:\n            h, g = (dmp_neg(g[:k], u, K), g[k:])\n        return h + [dmp_sub(a, b, v, K) for a, b in zip(f, g)]",
    ".sympy.polys.densearith.py@@dmp_quo_ground": "def dmp_quo_ground(f, c, u, K):\n    if not u:\n        return dup_quo_ground(f, c, K)\n    v = u - 1\n    return [dmp_quo_ground(cf, c, v, K) for cf in f]",
    ".sympy.polys.densearith.py@@dup_quo_ground": "def dup_quo_ground(f, c, K):\n    if not c:\n        raise ZeroDivisionError('polynomial division')\n    if not f:\n        return f\n    if K.is_Field:\n        return [K.quo(cf, c) for cf in f]\n    else:\n        return [cf // c for cf in f]",
    ".sympy.polys.densearith.py@@dmp_div": "def dmp_div(f, g, u, K):\n    if K.is_Field:\n        return dmp_ff_div(f, g, u, K)\n    else:\n        return dmp_rr_div(f, g, u, K)",
    ".sympy.polys.densearith.py@@dmp_rr_div": "def dmp_rr_div(f, g, u, K):\n    if not u:\n        return dup_rr_div(f, g, K)\n    df = dmp_degree(f, u)\n    dg = dmp_degree(g, u)\n    if dg < 0:\n        raise ZeroDivisionError('polynomial division')\n    q, r, dr = (dmp_zero(u), f, df)\n    if df < dg:\n        return (q, r)\n    lc_g, v = (dmp_LC(g, K), u - 1)\n    while True:\n        lc_r = dmp_LC(r, K)\n        c, R = dmp_rr_div(lc_r, lc_g, v, K)\n        if not dmp_zero_p(R, v):\n            break\n        j = dr - dg\n        q = dmp_add_term(q, c, j, u, K)\n        h = dmp_mul_term(g, c, j, u, K)\n        r = dmp_sub(r, h, u, K)\n        _dr, dr = (dr, dmp_degree(r, u))\n        if dr < dg:\n            break\n        elif not dr < _dr:\n            raise PolynomialDivisionFailed(f, g, K)\n    return (q, r)",
    ".sympy.polys.densearith.py@@dmp_add_term": "def dmp_add_term(f, c, i, u, K):\n    if not u:\n        return dup_add_term(f, c, i, K)\n    v = u - 1\n    if dmp_zero_p(c, v):\n        return f\n    n = len(f)\n    m = n - i - 1\n    if i == n - 1:\n        return dmp_strip([dmp_add(f[0], c, v, K)] + f[1:], u)\n    elif i >= n:\n        return [c] + dmp_zeros(i - n, v, K) + f\n    else:\n        return f[:m] + [dmp_add(f[m], c, v, K)] + f[m + 1:]",
    ".sympy.polys.densebasic.py@@dmp_zeros": "def dmp_zeros(n, u, K):\n    if not n:\n        return []\n    if u < 0:\n        return [K.zero] * n\n    else:\n        return [dmp_zero(u) for i in range(n)]",
    ".sympy.polys.densearith.py@@dmp_mul_term": "def dmp_mul_term(f, c, i, u, K):\n    if not u:\n        return dup_mul_term(f, c, i, K)\n    v = u - 1\n    if dmp_zero_p(f, u):\n        return f\n    if dmp_zero_p(c, v):\n        return dmp_zero(u)\n    else:\n        return [dmp_mul(cf, c, v, K) for cf in f] + dmp_zeros(i, v, K)",
    ".sympy.polys.densearith.py@@dmp_mul": "def dmp_mul(f, g, u, K):\n    if not u:\n        return dup_mul(f, g, K)\n    if f == g:\n        return dmp_sqr(f, u, K)\n    df = dmp_degree(f, u)\n    if df < 0:\n        return f\n    dg = dmp_degree(g, u)\n    if dg < 0:\n        return g\n    h, v = ([], u - 1)\n    for i in range(0, df + dg + 1):\n        coeff = dmp_zero(v)\n        for j in range(max(0, i - dg), min(df, i) + 1):\n            coeff = dmp_add(coeff, dmp_mul(f[j], g[i - j], v, K), v, K)\n        h.append(coeff)\n    return dmp_strip(h, u)",
    ".sympy.polys.densearith.py@@dup_mul": "def dup_mul(f, g, K):\n    if f == g:\n        return dup_sqr(f, K)\n    if not (f and g):\n        return []\n    df = dup_degree(f)\n    dg = dup_degree(g)\n    n = max(df, dg) + 1\n    if n < 100:\n        h = []\n        for i in range(0, df + dg + 1):\n            coeff = K.zero\n            for j in range(max(0, i - dg), min(df, i) + 1):\n                coeff += f[j] * g[i - j]\n            h.append(coeff)\n        return dup_strip(h)\n    else:\n        n2 = n // 2\n        fl, gl = (dup_slice(f, 0, n2, K), dup_slice(g, 0, n2, K))\n        fh = dup_rshift(dup_slice(f, n2, n, K), n2, K)\n        gh = dup_rshift(dup_slice(g, n2, n, K), n2, K)\n        lo, hi = (dup_mul(fl, gl, K), dup_mul(fh, gh, K))\n        mid = dup_mul(dup_add(fl, fh, K), dup_add(gl, gh, K), K)\n        mid = dup_sub(mid, dup_add(lo, hi, K), K)\n        return dup_add(dup_add(lo, dup_lshift(mid, n2, K), K), dup_lshift(hi, 2 * n2, K), K)",
    ".sympy.polys.densebasic.py@@dmp_inflate": "def dmp_inflate(f, M, u, K):\n    if not u:\n        return dup_inflate(f, M[0], K)\n    if all((m == 1 for m in M)):\n        return f\n    else:\n        return _rec_inflate(f, M, u, 0, K)",
    ".sympy.polys.densearith.py@@dmp_quo": "def dmp_quo(f, g, u, K):\n    return dmp_div(f, g, u, K)[0]",
    ".sympy.polys.factortools.py@@dmp_zz_wang": "def dmp_zz_wang(f, u, K, mod=None, seed=None):\n    from sympy.utilities.randtest import _randint\n    randint = _randint(seed)\n    ct, T = dmp_zz_factor(dmp_LC(f, K), u - 1, K)\n    b = dmp_zz_mignotte_bound(f, u, K)\n    p = K(nextprime(b))\n    if mod is None:\n        if u == 1:\n            mod = 2\n        else:\n            mod = 1\n    history, configs, A, r = (set([]), [], [K.zero] * u, None)\n    try:\n        cs, s, E = dmp_zz_wang_test_points(f, T, ct, A, u, K)\n        _, H = dup_zz_factor_sqf(s, K)\n        r = len(H)\n        if r == 1:\n            return [f]\n        configs = [(s, cs, E, H, A)]\n    except EvaluationFailed:\n        pass\n    eez_num_configs = query('EEZ_NUMBER_OF_CONFIGS')\n    eez_num_tries = query('EEZ_NUMBER_OF_TRIES')\n    eez_mod_step = query('EEZ_MODULUS_STEP')\n    while len(configs) < eez_num_configs:\n        for _ in range(eez_num_tries):\n            A = [K(randint(-mod, mod)) for _ in range(u)]\n            if tuple(A) not in history:\n                history.add(tuple(A))\n            else:\n                continue\n            try:\n                cs, s, E = dmp_zz_wang_test_points(f, T, ct, A, u, K)\n            except EvaluationFailed:\n                continue\n            _, H = dup_zz_factor_sqf(s, K)\n            rr = len(H)\n            if r is not None:\n                if rr != r:\n                    if rr < r:\n                        configs, r = ([], rr)\n                    else:\n                        continue\n            else:\n                r = rr\n            if r == 1:\n                return [f]\n            configs.append((s, cs, E, H, A))\n            if len(configs) == eez_num_configs:\n                break\n        else:\n            mod += eez_mod_step\n    s_norm, s_arg, i = (None, 0, 0)\n    for s, _, _, _, _ in configs:\n        _s_norm = dup_max_norm(s, K)\n        if s_norm is not None:\n            if _s_norm < s_norm:\n                s_norm = _s_norm\n                s_arg = i\n        else:\n            s_norm = _s_norm\n        i += 1\n    _, cs, E, H, A = configs[s_arg]\n    orig_f = f\n    try:\n        f, H, LC = dmp_zz_wang_lead_coeffs(f, T, cs, E, H, A, u, K)\n        factors = dmp_zz_wang_hensel_lifting(f, H, LC, A, p, u, K)\n    except ExtraneousFactors:\n        if query('EEZ_RESTART_IF_NEEDED'):\n            return dmp_zz_wang(orig_f, u, K, mod + 1)\n        else:\n            raise ExtraneousFactors('we need to restart algorithm with better parameters')\n    result = []\n    for f in factors:\n        _, f = dmp_ground_primitive(f, u, K)\n        if K.is_negative(dmp_ground_LC(f, u, K)):\n            f = dmp_neg(f, u, K)\n        result.append(f)\n    return result",
    ".sympy.utilities.randtest.py@@_randint": "def _randint(seed=None):\n    if seed is None:\n        return randint\n    elif isinstance(seed, int):\n        return Random(seed).randint\n    elif is_sequence(seed):\n        seed = list(seed)\n        seed.reverse()\n\n        def give(a, b, seq=seed):\n            a, b = (as_int(a), as_int(b))\n            w = b - a\n            if w < 0:\n                raise ValueError('_randint got empty range')\n            try:\n                x = seq.pop()\n            except IndexError:\n                raise ValueError('_randint sequence was too short')\n            if a <= x <= b:\n                return x\n            else:\n                return give(a, b, seq)\n        return give\n    else:\n        raise ValueError('_randint got an unexpected seed')",
    ".sympy.polys.factortools.py@@dmp_zz_mignotte_bound": "def dmp_zz_mignotte_bound(f, u, K):\n    a = dmp_max_norm(f, u, K)\n    b = abs(dmp_ground_LC(f, u, K))\n    n = sum(dmp_degree_list(f, u))\n    return K.sqrt(K(n + 1)) * 2 ** n * a * b",
    ".sympy.ntheory.generate.py@@nextprime": "def nextprime(n, ith=1):\n    n = int(n)\n    i = as_int(ith)\n    if i > 1:\n        pr = n\n        j = 1\n        while 1:\n            pr = nextprime(pr)\n            j += 1\n            if j > i:\n                break\n        return pr\n    if n < 2:\n        return 2\n    if n < 7:\n        return {2: 3, 3: 5, 4: 5, 5: 7, 6: 7}[n]\n    if n <= sieve._list[-2]:\n        l, u = sieve.search(n)\n        if l == u:\n            return sieve[u + 1]\n        else:\n            return sieve[u]\n    nn = 6 * (n // 6)\n    if nn == n:\n        n += 1\n        if isprime(n):\n            return n\n        n += 4\n    elif n - nn == 5:\n        n += 2\n        if isprime(n):\n            return n\n        n += 4\n    else:\n        n = nn + 5\n    while 1:\n        if isprime(n):\n            return n\n        n += 2\n        if isprime(n):\n            return n\n        n += 4",
    ".sympy.ntheory.primetest.py@@isprime": "def isprime(n):\n    try:\n        n = as_int(n)\n    except ValueError:\n        return False\n    if n in [2, 3, 5]:\n        return True\n    if n < 2 or n % 2 == 0 or n % 3 == 0 or (n % 5 == 0):\n        return False\n    if n < 49:\n        return True\n    if n % 7 == 0 or n % 11 == 0 or n % 13 == 0 or (n % 17 == 0) or (n % 19 == 0) or (n % 23 == 0) or (n % 29 == 0) or (n % 31 == 0) or (n % 37 == 0) or (n % 41 == 0) or (n % 43 == 0) or (n % 47 == 0):\n        return False\n    if n < 2809:\n        return True\n    if n <= 23001:\n        return pow(2, n, n) == 2 and n not in [7957, 8321, 13747, 18721, 19951]\n    from sympy.ntheory.generate import sieve as s\n    if n <= s._list[-1]:\n        l, u = s.search(n)\n        return l == u\n    from sympy.core.compatibility import HAS_GMPY\n    if HAS_GMPY == 2:\n        from gmpy2 import is_strong_prp, is_strong_selfridge_prp\n        return is_strong_prp(n, 2) and is_strong_selfridge_prp(n)\n    if n < 341531:\n        return mr(n, [9345883071009581737])\n    if n < 885594169:\n        return mr(n, [725270293939359937, 3569819667048198375])\n    if n < 350269456337:\n        return mr(n, [4230279247111683200, 14694767155120705706, 16641139526367750375])\n    if n < 55245642489451:\n        return mr(n, [2, 141889084524735, 1199124725622454117, 11096072698276303650])\n    if n < 7999252175582851:\n        return mr(n, [2, 4130806001517, 149795463772692060, 186635894390467037, 3967304179347715805])\n    if n < 585226005592931977:\n        return mr(n, [2, 123635709730000, 9233062284813009, 43835965440333360, 761179012939631437, 1263739024124850375])\n    if n < 18446744073709551616:\n        return mr(n, [2, 325, 9375, 28178, 450775, 9780504, 1795265022])\n    return mr(n, [2]) and is_strong_lucas_prp(n)",
    ".sympy.polys.factortools.py@@dmp_zz_wang_test_points": "def dmp_zz_wang_test_points(f, T, ct, A, u, K):\n    if not dmp_eval_tail(dmp_LC(f, K), A, u - 1, K):\n        raise EvaluationFailed('no luck')\n    g = dmp_eval_tail(f, A, u, K)\n    if not dup_sqf_p(g, K):\n        raise EvaluationFailed('no luck')\n    c, h = dup_primitive(g, K)\n    if K.is_negative(dup_LC(h, K)):\n        c, h = (-c, dup_neg(h, K))\n    v = u - 1\n    E = [dmp_eval_tail(t, A, v, K) for t, _ in T]\n    D = dmp_zz_wang_non_divisors(E, c, ct, K)\n    if D is not None:\n        return (c, h, E)\n    else:\n        raise EvaluationFailed('no luck')",
    ".sympy.polys.densetools.py@@dmp_eval_tail": "def dmp_eval_tail(f, A, u, K):\n    if not A:\n        return f\n    if dmp_zero_p(f, u):\n        return dmp_zero(u - len(A))\n    e = _rec_eval_tail(f, 0, A, u, K)\n    if u == len(A) - 1:\n        return e\n    else:\n        return dmp_strip(e, u - len(A))",
    ".sympy.polys.densetools.py@@_rec_eval_tail": "def _rec_eval_tail(g, i, A, u, K):\n    if i == u:\n        return dup_eval(g, A[-1], K)\n    else:\n        h = [_rec_eval_tail(c, i + 1, A, u, K) for c in g]\n        if i < u - len(A) + 1:\n            return h\n        else:\n            return dup_eval(h, A[-u + i - 1], K)",
    ".sympy.polys.sqfreetools.py@@dup_sqf_p": "def dup_sqf_p(f, K):\n    if not f:\n        return True\n    else:\n        return not dup_degree(dup_gcd(f, dup_diff(f, 1, K), K))",
    ".sympy.polys.densetools.py@@dup_diff": "def dup_diff(f, m, K):\n    if m <= 0:\n        return f\n    n = dup_degree(f)\n    if n < m:\n        return []\n    deriv = []\n    if m == 1:\n        for coeff in f[:-m]:\n            deriv.append(K(n) * coeff)\n            n -= 1\n    else:\n        for coeff in f[:-m]:\n            k = n\n            for i in range(n - 1, n - m, -1):\n                k *= i\n            deriv.append(K(k) * coeff)\n            n -= 1\n    return dup_strip(deriv)",
    ".sympy.polys.euclidtools.py@@dup_gcd": "def dup_gcd(f, g, K):\n    return dup_inner_gcd(f, g, K)[0]",
    ".sympy.polys.factortools.py@@dmp_zz_wang_non_divisors": "def dmp_zz_wang_non_divisors(E, cs, ct, K):\n    result = [cs * ct]\n    for q in E:\n        q = abs(q)\n        for r in reversed(result):\n            while r != 1:\n                r = K.gcd(r, q)\n                q = q // r\n            if K.is_one(q):\n                return None\n        result.append(q)\n    return result[1:]",
    ".sympy.polys.factortools.py@@dup_zz_factor_sqf": "def dup_zz_factor_sqf(f, K):\n    cont, g = dup_primitive(f, K)\n    n = dup_degree(g)\n    if dup_LC(g, K) < 0:\n        cont, g = (-cont, dup_neg(g, K))\n    if n <= 0:\n        return (cont, [])\n    elif n == 1:\n        return (cont, [g])\n    if query('USE_IRREDUCIBLE_IN_FACTOR'):\n        if dup_zz_irreducible_p(g, K):\n            return (cont, [g])\n    factors = None\n    if query('USE_CYCLOTOMIC_FACTOR'):\n        factors = dup_zz_cyclotomic_factor(g, K)\n    if factors is None:\n        factors = dup_zz_zassenhaus(g, K)\n    return (cont, _sort_factors(factors, multiple=False))",
    ".sympy.polys.factortools.py@@dup_zz_cyclotomic_factor": "def dup_zz_cyclotomic_factor(f, K):\n    lc_f, tc_f = (dup_LC(f, K), dup_TC(f, K))\n    if dup_degree(f) <= 0:\n        return None\n    if lc_f != 1 or tc_f not in [-1, 1]:\n        return None\n    if any((bool(cf) for cf in f[1:-1])):\n        return None\n    n = dup_degree(f)\n    F = _dup_cyclotomic_decompose(n, K)\n    if not K.is_one(tc_f):\n        return F\n    else:\n        H = []\n        for h in _dup_cyclotomic_decompose(2 * n, K):\n            if h not in F:\n                H.append(h)\n        return H",
    ".sympy.polys.factortools.py@@dup_zz_zassenhaus": "def dup_zz_zassenhaus(f, K):\n    n = dup_degree(f)\n    if n == 1:\n        return [f]\n    fc = f[-1]\n    A = dup_max_norm(f, K)\n    b = dup_LC(f, K)\n    B = int(abs(K.sqrt(K(n + 1)) * 2 ** n * A * b))\n    C = int((n + 1) ** (2 * n) * A ** (2 * n - 1))\n    gamma = int(_ceil(2 * _log(C, 2)))\n    bound = int(2 * gamma * _log(gamma))\n    a = []\n    for px in range(3, bound + 1):\n        if not isprime(px) or b % px == 0:\n            continue\n        px = K.convert(px)\n        F = gf_from_int_poly(f, px)\n        if not gf_sqf_p(F, px, K):\n            continue\n        fsqfx = gf_factor_sqf(F, px, K)[1]\n        a.append((px, fsqfx))\n        if len(fsqfx) < 15 or len(a) > 4:\n            break\n    p, fsqf = min(a, key=lambda x: len(x[1]))\n    l = int(_ceil(_log(2 * B + 1, p)))\n    modular = [gf_to_int_poly(ff, p) for ff in fsqf]\n    g = dup_zz_hensel_lift(p, f, modular, l, K)\n    sorted_T = range(len(g))\n    T = set(sorted_T)\n    factors, s = ([], 1)\n    pl = p ** l\n    while 2 * s <= len(T):\n        for S in subsets(sorted_T, s):\n            if b == 1:\n                q = 1\n                for i in S:\n                    q = q * g[i][-1]\n                q = q % pl\n                if not _test_pl(fc, q, pl):\n                    continue\n            else:\n                G = [b]\n                for i in S:\n                    G = dup_mul(G, g[i], K)\n                G = dup_trunc(G, pl, K)\n                G = dup_primitive(G, K)[1]\n                q = G[-1]\n                if q and fc % q != 0:\n                    continue\n            H = [b]\n            S = set(S)\n            T_S = T - S\n            if b == 1:\n                G = [b]\n                for i in S:\n                    G = dup_mul(G, g[i], K)\n                G = dup_trunc(G, pl, K)\n            for i in T_S:\n                H = dup_mul(H, g[i], K)\n            H = dup_trunc(H, pl, K)\n            G_norm = dup_l1_norm(G, K)\n            H_norm = dup_l1_norm(H, K)\n            if G_norm * H_norm <= B:\n                T = T_S\n                sorted_T = [i for i in sorted_T if i not in S]\n                G = dup_primitive(G, K)[1]\n                f = dup_primitive(H, K)[1]\n                factors.append(G)\n                b = dup_LC(f, K)\n                break\n        else:\n            s += 1\n    return factors + [f]",
    ".sympy.polys.galoistools.py@@gf_from_int_poly": "def gf_from_int_poly(f, p):\n    return gf_trunc(f, p)",
    ".sympy.polys.galoistools.py@@gf_trunc": "def gf_trunc(f, p):\n    return gf_strip([a % p for a in f])",
    ".sympy.polys.galoistools.py@@gf_strip": "def gf_strip(f):\n    if not f or f[0]:\n        return f\n    k = 0\n    for coeff in f:\n        if coeff:\n            break\n        else:\n            k += 1\n    return f[k:]",
    ".sympy.polys.galoistools.py@@gf_sqf_p": "def gf_sqf_p(f, p, K):\n    _, f = gf_monic(f, p, K)\n    if not f:\n        return True\n    else:\n        return gf_gcd(f, gf_diff(f, p, K), p, K) == [K.one]",
    ".sympy.polys.galoistools.py@@gf_monic": "def gf_monic(f, p, K):\n    if not f:\n        return (K.zero, [])\n    else:\n        lc = f[0]\n        if K.is_one(lc):\n            return (lc, list(f))\n        else:\n            return (lc, gf_quo_ground(f, lc, p, K))",
    ".sympy.polys.galoistools.py@@gf_quo_ground": "def gf_quo_ground(f, a, p, K):\n    return gf_mul_ground(f, K.invert(a, p), p, K)",
    ".sympy.polys.domains.ring.py@@Ring.invert": "def invert(self, a, b):\n    s, t, h = self.gcdex(a, b)\n    if self.is_one(h):\n        return s % b\n    else:\n        raise NotInvertible('zero divisor')",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.gcdex": "def gcdex(self, a, b):\n    return python_gcdex(a, b)",
    ".sympy.core.numbers.py@@igcdex": "def igcdex(a, b):\n    if not a and (not b):\n        return (0, 1, 0)\n    if not a:\n        return (0, b // abs(b), abs(b))\n    if not b:\n        return (a // abs(a), 0, abs(a))\n    if a < 0:\n        a, x_sign = (-a, -1)\n    else:\n        x_sign = 1\n    if b < 0:\n        b, y_sign = (-b, -1)\n    else:\n        y_sign = 1\n    x, y, r, s = (1, 0, 0, 1)\n    while b:\n        c, q = (a % b, a // b)\n        a, b, r, s, x, y = (b, c, x - q * r, y - q * s, r, s)\n    return (x * x_sign, y * y_sign, a)",
    ".sympy.polys.galoistools.py@@gf_mul_ground": "def gf_mul_ground(f, a, p, K):\n    if not a:\n        return []\n    else:\n        return [a * b % p for b in f]",
    ".sympy.polys.galoistools.py@@gf_diff": "def gf_diff(f, p, K):\n    df = gf_degree(f)\n    h, n = ([K.zero] * df, df)\n    for coeff in f[:-1]:\n        coeff *= K(n)\n        coeff %= p\n        if coeff:\n            h[df - n] = coeff\n        n -= 1\n    return gf_strip(h)",
    ".sympy.polys.galoistools.py@@gf_degree": "def gf_degree(f):\n    return len(f) - 1",
    ".sympy.polys.galoistools.py@@gf_gcd": "def gf_gcd(f, g, p, K):\n    while g:\n        f, g = (g, gf_rem(f, g, p, K))\n    return gf_monic(f, p, K)[1]",
    ".sympy.polys.galoistools.py@@gf_rem": "def gf_rem(f, g, p, K):\n    return gf_div(f, g, p, K)[1]",
    ".sympy.polys.galoistools.py@@gf_div": "def gf_div(f, g, p, K):\n    df = gf_degree(f)\n    dg = gf_degree(g)\n    if not g:\n        raise ZeroDivisionError('polynomial division')\n    elif df < dg:\n        return ([], f)\n    inv = K.invert(g[0], p)\n    h, dq, dr = (list(f), df - dg, dg - 1)\n    for i in range(0, df + 1):\n        coeff = h[i]\n        for j in range(max(0, dg - i), min(df - i, dr) + 1):\n            coeff -= h[i + j - dg] * g[dg - j]\n        if i <= dq:\n            coeff *= inv\n        h[i] = coeff % p\n    return (h[:dq + 1], gf_strip(h[dq + 1:]))",
    ".sympy.polys.galoistools.py@@gf_factor_sqf": "def gf_factor_sqf(f, p, K, method=None):\n    lc, f = gf_monic(f, p, K)\n    if gf_degree(f) < 1:\n        return (lc, [])\n    method = method or query('GF_FACTOR_METHOD')\n    if method is not None:\n        factors = _factor_methods[method](f, p, K)\n    else:\n        factors = gf_zassenhaus(f, p, K)\n    return (lc, factors)",
    ".sympy.polys.galoistools.py@@gf_zassenhaus": "def gf_zassenhaus(f, p, K):\n    factors = []\n    for factor, n in gf_ddf_zassenhaus(f, p, K):\n        factors += gf_edf_zassenhaus(factor, n, p, K)\n    return _sort_factors(factors, multiple=False)",
    ".sympy.polys.galoistools.py@@gf_ddf_zassenhaus": "def gf_ddf_zassenhaus(f, p, K):\n    i, g, factors = (1, [K.one, K.zero], [])\n    b = gf_frobenius_monomial_base(f, p, K)\n    while 2 * i <= gf_degree(f):\n        g = gf_frobenius_map(g, f, b, p, K)\n        h = gf_gcd(f, gf_sub(g, [K.one, K.zero], p, K), p, K)\n        if h != [K.one]:\n            factors.append((h, i))\n            f = gf_quo(f, h, p, K)\n            g = gf_rem(g, f, p, K)\n            b = gf_frobenius_monomial_base(f, p, K)\n        i += 1\n    if f != [K.one]:\n        return factors + [(f, gf_degree(f))]\n    else:\n        return factors",
    ".sympy.polys.galoistools.py@@gf_frobenius_monomial_base": "def gf_frobenius_monomial_base(g, p, K):\n    n = gf_degree(g)\n    if n == 0:\n        return []\n    b = [0] * n\n    b[0] = [1]\n    if p < n:\n        for i in range(1, n):\n            mon = gf_lshift(b[i - 1], p, K)\n            b[i] = gf_rem(mon, g, p, K)\n    elif n > 1:\n        b[1] = gf_pow_mod([K.one, K.zero], p, g, p, K)\n        for i in range(2, n):\n            b[i] = gf_mul(b[i - 1], b[1], p, K)\n            b[i] = gf_rem(b[i], g, p, K)\n    return b",
    ".sympy.polys.galoistools.py@@gf_pow_mod": "def gf_pow_mod(f, n, g, p, K):\n    if not n:\n        return [K.one]\n    elif n == 1:\n        return gf_rem(f, g, p, K)\n    elif n == 2:\n        return gf_rem(gf_sqr(f, p, K), g, p, K)\n    h = [K.one]\n    while True:\n        if n & 1:\n            h = gf_mul(h, f, p, K)\n            h = gf_rem(h, g, p, K)\n            n -= 1\n        n >>= 1\n        if not n:\n            break\n        f = gf_sqr(f, p, K)\n        f = gf_rem(f, g, p, K)\n    return h",
    ".sympy.polys.galoistools.py@@gf_mul": "def gf_mul(f, g, p, K):\n    df = gf_degree(f)\n    dg = gf_degree(g)\n    dh = df + dg\n    h = [0] * (dh + 1)\n    for i in range(0, dh + 1):\n        coeff = K.zero\n        for j in range(max(0, i - dg), min(i, df) + 1):\n            coeff += f[j] * g[i - j]\n        h[i] = coeff % p\n    return gf_strip(h)",
    ".sympy.polys.galoistools.py@@gf_sqr": "def gf_sqr(f, p, K):\n    df = gf_degree(f)\n    dh = 2 * df\n    h = [0] * (dh + 1)\n    for i in range(0, dh + 1):\n        coeff = K.zero\n        jmin = max(0, i - df)\n        jmax = min(i, df)\n        n = jmax - jmin + 1\n        jmax = jmin + n // 2 - 1\n        for j in range(jmin, jmax + 1):\n            coeff += f[j] * f[i - j]\n        coeff += coeff\n        if n & 1:\n            elem = f[jmax + 1]\n            coeff += elem ** 2\n        h[i] = coeff % p\n    return gf_strip(h)",
    ".sympy.polys.galoistools.py@@gf_frobenius_map": "def gf_frobenius_map(f, g, b, p, K):\n    m = gf_degree(g)\n    if gf_degree(f) >= m:\n        f = gf_rem(f, g, p, K)\n    if not f:\n        return []\n    n = gf_degree(f)\n    sf = [f[-1]]\n    for i in range(1, n + 1):\n        v = gf_mul_ground(b[i], f[n - i], p, K)\n        sf = gf_add(sf, v, p, K)\n    return sf",
    ".sympy.polys.galoistools.py@@gf_add": "def gf_add(f, g, p, K):\n    if not f:\n        return g\n    if not g:\n        return f\n    df = gf_degree(f)\n    dg = gf_degree(g)\n    if df == dg:\n        return gf_strip([(a + b) % p for a, b in zip(f, g)])\n    else:\n        k = abs(df - dg)\n        if df > dg:\n            h, f = (f[:k], f[k:])\n        else:\n            h, g = (g[:k], g[k:])\n        return h + [(a + b) % p for a, b in zip(f, g)]",
    ".sympy.polys.galoistools.py@@gf_sub": "def gf_sub(f, g, p, K):\n    if not g:\n        return f\n    if not f:\n        return gf_neg(g, p, K)\n    df = gf_degree(f)\n    dg = gf_degree(g)\n    if df == dg:\n        return gf_strip([(a - b) % p for a, b in zip(f, g)])\n    else:\n        k = abs(df - dg)\n        if df > dg:\n            h, f = (f[:k], f[k:])\n        else:\n            h, g = (gf_neg(g[:k], p, K), g[k:])\n        return h + [(a - b) % p for a, b in zip(f, g)]",
    ".sympy.polys.galoistools.py@@gf_edf_zassenhaus": "def gf_edf_zassenhaus(f, n, p, K):\n    factors = [f]\n    if gf_degree(f) <= n:\n        return factors\n    N = gf_degree(f) // n\n    if p != 2:\n        b = gf_frobenius_monomial_base(f, p, K)\n    while len(factors) < N:\n        r = gf_random(2 * n - 1, p, K)\n        if p == 2:\n            h = r\n            for i in range(0, 2 ** (n * N - 1)):\n                r = gf_pow_mod(r, 2, f, p, K)\n                h = gf_add(h, r, p, K)\n            g = gf_gcd(f, h, p, K)\n        else:\n            h = _gf_pow_pnm1d2(r, n, f, b, p, K)\n            g = gf_gcd(f, gf_sub_ground(h, K.one, p, K), p, K)\n        if g != [K.one] and g != f:\n            factors = gf_edf_zassenhaus(g, n, p, K) + gf_edf_zassenhaus(gf_quo(f, g, p, K), n, p, K)\n    return _sort_factors(factors, multiple=False)",
    ".sympy.polys.polyutils.py@@order_no_multiple_key": "def order_no_multiple_key(f):\n    return (len(f), f)",
    ".sympy.polys.galoistools.py@@gf_to_int_poly": "def gf_to_int_poly(f, p, symmetric=True):\n    if symmetric:\n        return [gf_int(c, p) for c in f]\n    else:\n        return f",
    ".sympy.polys.galoistools.py@@gf_int": "def gf_int(a, p):\n    if a <= p // 2:\n        return a\n    else:\n        return a - p",
    ".sympy.polys.factortools.py@@dup_zz_hensel_lift": "def dup_zz_hensel_lift(p, f, f_list, l, K):\n    r = len(f_list)\n    lc = dup_LC(f, K)\n    if r == 1:\n        F = dup_mul_ground(f, K.gcdex(lc, p ** l)[0], K)\n        return [dup_trunc(F, p ** l, K)]\n    m = p\n    k = r // 2\n    d = int(_ceil(_log(l, 2)))\n    g = gf_from_int_poly([lc], p)\n    for f_i in f_list[:k]:\n        g = gf_mul(g, gf_from_int_poly(f_i, p), p, K)\n    h = gf_from_int_poly(f_list[k], p)\n    for f_i in f_list[k + 1:]:\n        h = gf_mul(h, gf_from_int_poly(f_i, p), p, K)\n    s, t, _ = gf_gcdex(g, h, p, K)\n    g = gf_to_int_poly(g, p)\n    h = gf_to_int_poly(h, p)\n    s = gf_to_int_poly(s, p)\n    t = gf_to_int_poly(t, p)\n    for _ in range(1, d + 1):\n        (g, h, s, t), m = (dup_zz_hensel_step(m, f, g, h, s, t, K), m ** 2)\n    return dup_zz_hensel_lift(p, g, f_list[:k], l, K) + dup_zz_hensel_lift(p, h, f_list[k:], l, K)",
    ".sympy.polys.factortools.py@@dmp_trial_division": "def dmp_trial_division(f, factors, u, K):\n    result = []\n    for factor in factors:\n        k = 0\n        while True:\n            q, r = dmp_div(f, factor, u, K)\n            if dmp_zero_p(r, u):\n                f, k = (q, k + 1)\n            else:\n                break\n        result.append((factor, k))\n    return _sort_factors(result)",
    ".sympy.polys.densebasic.py@@dmp_include": "def dmp_include(f, J, u, K):\n    if not J:\n        return f\n    F, f = (dmp_to_dict(f, u), {})\n    for monom, coeff in F.items():\n        monom = list(monom)\n        for j in J:\n            monom.insert(j, 0)\n        f[tuple(monom)] = coeff\n    u += len(J)\n    return dmp_from_dict(f, u, K)",
    ".sympy.simplify.cse_opts.py@@sub_pre": "def sub_pre(e):\n    adds = [a for a in e.atoms(Add) if a.could_extract_minus_sign()]\n    reps = dict(((a, Mul._from_args([S.NegativeOne, -a])) for a in adds))\n    e = e.xreplace(reps)\n    if isinstance(e, Basic):\n        negs = {}\n        for a in sorted(e.atoms(Add), key=default_sort_key):\n            if a in reps:\n                negs[a] = reps[a]\n            elif a.could_extract_minus_sign():\n                negs[a] = Mul._from_args([S.One, S.NegativeOne, -a])\n        e = e.xreplace(negs)\n    return e",
    ".sympy.core.basic.py@@Basic.atoms": "def atoms(self, *types):\n    if types:\n        types = tuple([t if isinstance(t, type) else type(t) for t in types])\n    else:\n        types = (Atom,)\n    result = set()\n    for expr in preorder_traversal(self):\n        if isinstance(expr, types):\n            result.add(expr)\n    return result",
    ".sympy.core.expr.py@@Expr.could_extract_minus_sign": "def could_extract_minus_sign(self):\n    negative_self = -self\n    if self == negative_self:\n        return False\n    self_has_minus = self.extract_multiplicatively(-1) is not None\n    negative_self_has_minus = negative_self.extract_multiplicatively(-1) is not None\n    if self_has_minus != negative_self_has_minus:\n        return self_has_minus\n    else:\n        if self.is_Add:\n            all_args = len(self.args)\n            negative_args = len([False for arg in self.args if arg.could_extract_minus_sign()])\n            positive_args = all_args - negative_args\n            if positive_args > negative_args:\n                return False\n            elif positive_args < negative_args:\n                return True\n        elif self.is_Mul:\n            num, den = self.as_numer_denom()\n            args = Mul.make_args(num) + Mul.make_args(den)\n            arg_signs = [arg.could_extract_minus_sign() for arg in args]\n            negative_args = list(filter(None, arg_signs))\n            return len(negative_args) % 2 == 1\n        return bool(self.sort_key() < negative_self.sort_key())",
    ".sympy.core.numbers.py@@NegativeOne.__neg__": "def __neg__():\n    return S.One",
    ".sympy.core.expr.py@@Expr.sort_key": "def sort_key(self, order=None):\n    coeff, expr = self.as_coeff_Mul()\n    if expr.is_Pow:\n        expr, exp = expr.args\n    else:\n        expr, exp = (expr, S.One)\n    if expr.is_Dummy:\n        args = (expr.sort_key(),)\n    elif expr.is_Atom:\n        args = (str(expr),)\n    else:\n        if expr.is_Add:\n            args = expr.as_ordered_terms(order=order)\n        elif expr.is_Mul:\n            args = expr.as_ordered_factors(order=order)\n        else:\n            args = expr.args\n        args = tuple([default_sort_key(arg, order=order) for arg in args])\n    args = (len(args), tuple(args))\n    exp = exp.sort_key(order=order)\n    return (expr.class_key(), args, exp, coeff)",
    ".sympy.core.expr.py@@Expr.as_ordered_terms": "def as_ordered_terms(self, order=None, data=False):\n    from .numbers import Number, NumberSymbol\n    if order is None and self.is_Add:\n        key = lambda x: not isinstance(x, (Number, NumberSymbol))\n        add_args = sorted(Add.make_args(self), key=key)\n        if len(add_args) == 2 and isinstance(add_args[0], (Number, NumberSymbol)) and isinstance(add_args[1], Mul):\n            mul_args = sorted(Mul.make_args(add_args[1]), key=key)\n            if len(mul_args) == 2 and isinstance(mul_args[0], Number) and add_args[0].is_positive and mul_args[0].is_negative:\n                return add_args\n    key, reverse = self._parse_order(order)\n    terms, gens = self.as_terms()\n    if not any((term.is_Order for term, _ in terms)):\n        ordered = sorted(terms, key=key, reverse=reverse)\n    else:\n        _terms, _order = ([], [])\n        for term, repr in terms:\n            if not term.is_Order:\n                _terms.append((term, repr))\n            else:\n                _order.append((term, repr))\n        ordered = sorted(_terms, key=key, reverse=True) + sorted(_order, key=key, reverse=True)\n    if data:\n        return (ordered, gens)\n    else:\n        return [term for term, _ in ordered]",
    ".sympy.core.expr.py@@Expr._parse_order": "def _parse_order(cls, order):\n    from sympy.polys.orderings import monomial_key\n    startswith = getattr(order, 'startswith', None)\n    if startswith is None:\n        reverse = False\n    else:\n        reverse = startswith('rev-')\n        if reverse:\n            order = order[4:]\n    monom_key = monomial_key(order)\n\n    def neg(monom):\n        result = []\n        for m in monom:\n            if isinstance(m, tuple):\n                result.append(neg(m))\n            else:\n                result.append(-m)\n        return tuple(result)\n\n    def key(term):\n        _, ((re, im), monom, ncpart) = term\n        monom = neg(monom_key(monom))\n        ncpart = tuple([e.sort_key(order=order) for e in ncpart])\n        coeff = ((bool(im), im), (re, im))\n        return (monom, ncpart, coeff)\n    return (key, reverse)",
    ".sympy.polys.orderings.py@@monomial_key": "def monomial_key(order=None, gens=None):\n    if order is None:\n        order = lex\n    if isinstance(order, Symbol):\n        order = str(order)\n    if isinstance(order, str):\n        try:\n            order = _monomial_key[order]\n        except KeyError:\n            raise ValueError(\"supported monomial orderings are 'lex', 'grlex' and 'grevlex', got %r\" % order)\n    if hasattr(order, '__call__'):\n        if gens is not None:\n\n            def _order(expr):\n                return order(expr.as_poly(*gens).degree_list())\n            return _order\n        return order\n    else:\n        raise ValueError('monomial ordering specification must be a string or a callable, got %s' % order)",
    ".sympy.core.expr.py@@Expr.as_terms": "def as_terms(self):\n    from .add import Add\n    from .mul import Mul\n    from .exprtools import decompose_power\n    gens, terms = (set([]), [])\n    for term in Add.make_args(self):\n        coeff, _term = term.as_coeff_Mul()\n        coeff = complex(coeff)\n        cpart, ncpart = ({}, [])\n        if _term is not S.One:\n            for factor in Mul.make_args(_term):\n                if factor.is_number:\n                    try:\n                        coeff *= complex(factor)\n                    except (TypeError, ValueError):\n                        pass\n                    else:\n                        continue\n                if factor.is_commutative:\n                    base, exp = decompose_power(factor)\n                    cpart[base] = exp\n                    gens.add(base)\n                else:\n                    ncpart.append(factor)\n        coeff = (coeff.real, coeff.imag)\n        ncpart = tuple(ncpart)\n        terms.append((term, (coeff, cpart, ncpart)))\n    gens = sorted(gens, key=default_sort_key)\n    k, indices = (len(gens), {})\n    for i, g in enumerate(gens):\n        indices[g] = i\n    result = []\n    for term, (coeff, cpart, ncpart) in terms:\n        monom = [0] * k\n        for base, exp in cpart.items():\n            monom[indices[base]] = exp\n        result.append((term, (coeff, tuple(monom), ncpart)))\n    return (result, gens)",
    ".sympy.core.expr.py@@Expr.__complex__": "def __complex__(self):\n    result = self.evalf()\n    re, im = result.as_real_imag()\n    return complex(float(re), float(im))",
    ".sympy.core.numbers.py@@Float._as_mpf_val": "def _as_mpf_val(self, prec):\n    rv = mpf_norm(self._mpf_, prec)\n    if rv != self._mpf_ and self._prec == prec:\n        debug(self._mpf_, rv)\n    return rv",
    ".sympy.core.expr.py@@Expr.key": "def key(term):\n    _, ((re, im), monom, ncpart) = term\n    monom = neg(monom_key(monom))\n    ncpart = tuple([e.sort_key(order=order) for e in ncpart])\n    coeff = ((bool(im), im), (re, im))\n    return (monom, ncpart, coeff)",
    ".sympy.polys.orderings.py@@LexOrder.__call__": "def __call__(self, monomial):\n    return monomial",
    ".sympy.core.expr.py@@Expr.neg": "def neg(monom):\n    result = []\n    for m in monom:\n        if isinstance(m, tuple):\n            result.append(neg(m))\n        else:\n            result.append(-m)\n    return tuple(result)",
    ".sympy.core.mul.py@@Mul.as_ordered_factors": "def as_ordered_factors(self, order=None):\n    cpart, ncpart = self.args_cnc()\n    cpart.sort(key=lambda expr: expr.sort_key(order=order))\n    return cpart + ncpart",
    ".sympy.core.mul.py@@Mul.class_key": "def class_key(cls):\n    return (3, 0, cls.__name__)",
    ".sympy.core.add.py@@Add.class_key": "def class_key(cls):\n    return (3, 1, cls.__name__)",
    ".sympy.simplify.cse_opts.py@@sub_post": "def sub_post(e):\n    replacements = []\n    for node in preorder_traversal(e):\n        if isinstance(node, Mul) and node.args[0] is S.One and (node.args[1] is S.NegativeOne):\n            replacements.append((node, -Mul._from_args(node.args[2:])))\n    for node, replacement in replacements:\n        e = e.xreplace({node: replacement})\n    return e",
    ".sympy.solvers.diophantine.py@@_diop_quadratic": "def _diop_quadratic(var, coeff, t):\n    x, y = var\n    A = coeff[x ** 2]\n    B = coeff[x * y]\n    C = coeff[y ** 2]\n    D = coeff[x]\n    E = coeff[y]\n    F = coeff[S.One]\n    A, B, C, D, E, F = [as_int(i) for i in _remove_gcd(A, B, C, D, E, F)]\n    sol = set([])\n    discr = B ** 2 - 4 * A * C\n    if A == 0 and C == 0 and (B != 0):\n        if D * E - B * F == 0:\n            q, r = divmod(E, B)\n            if not r:\n                sol.add((-q, t))\n            q, r = divmod(D, B)\n            if not r:\n                sol.add((t, -q))\n        else:\n            div = divisors(D * E - B * F)\n            div = div + [-term for term in div]\n            for d in div:\n                x0, r = divmod(d - E, B)\n                if not r:\n                    q, r = divmod(D * E - B * F, d)\n                    if not r:\n                        y0, r = divmod(q - D, B)\n                        if not r:\n                            sol.add((x0, y0))\n    elif discr == 0:\n        if A == 0:\n            s = _diop_quadratic([y, x], coeff, t)\n            for soln in s:\n                sol.add((soln[1], soln[0]))\n        else:\n            g = sign(A) * igcd(A, C)\n            a = A // g\n            c = C // g\n            e = sign(B / A)\n            sqa = isqrt(a)\n            sqc = isqrt(c)\n            _c = e * sqc * D - sqa * E\n            if not _c:\n                z = symbols('z', real=True)\n                eq = sqa * g * z ** 2 + D * z + sqa * F\n                roots = solveset_real(eq, z).intersect(S.Integers)\n                for root in roots:\n                    ans = diop_solve(sqa * x + e * sqc * y - root)\n                    sol.add((ans[0], ans[1]))\n            elif _is_int(c):\n                solve_x = lambda u: -e * sqc * g * _c * t ** 2 - (E + 2 * e * sqc * g * u) * t - (e * sqc * g * u ** 2 + E * u + e * sqc * F) // _c\n                solve_y = lambda u: sqa * g * _c * t ** 2 + (D + 2 * sqa * g * u) * t + (sqa * g * u ** 2 + D * u + sqa * F) // _c\n                for z0 in range(0, abs(_c)):\n                    if divisible(sqa * g * z0 ** 2 + D * z0 + sqa * F, _c) and divisible(e * sqc * g * z0 ** 2 + E * z0 + e * sqc * F, _c):\n                        sol.add((solve_x(z0), solve_y(z0)))\n    elif is_square(discr):\n        if A != 0:\n            r = sqrt(discr)\n            u, v = symbols('u, v', integer=True)\n            eq = _mexpand(4 * A * r * u * v + 4 * A * D * (B * v + r * u + r * v - B * u) + 2 * A * 4 * A * E * (u - v) + 4 * A * r * 4 * A * F)\n            solution = diop_solve(eq, t)\n            for s0, t0 in solution:\n                num = B * t0 + r * s0 + r * t0 - B * s0\n                x_0 = S(num) / (4 * A * r)\n                y_0 = S(s0 - t0) / (2 * r)\n                if isinstance(s0, Symbol) or isinstance(t0, Symbol):\n                    if check_param(x_0, y_0, 4 * A * r, t) != (None, None):\n                        ans = check_param(x_0, y_0, 4 * A * r, t)\n                        sol.add((ans[0], ans[1]))\n                elif x_0.is_Integer and y_0.is_Integer:\n                    if is_solution_quad(var, coeff, x_0, y_0):\n                        sol.add((x_0, y_0))\n        else:\n            s = _diop_quadratic(var[::-1], coeff, t)\n            while s:\n                sol.add(s.pop()[::-1])\n    else:\n        P, Q = _transformation_to_DN(var, coeff)\n        D, N = _find_DN(var, coeff)\n        solns_pell = diop_DN(D, N)\n        if D < 0:\n            for x0, y0 in solns_pell:\n                for x in [-x0, x0]:\n                    for y in [-y0, y0]:\n                        s = P * Matrix([x, y]) + Q\n                        try:\n                            sol.add(tuple([as_int(_) for _ in s]))\n                        except ValueError:\n                            pass\n        else:\n            solns_pell = set(solns_pell)\n            for X, Y in list(solns_pell):\n                solns_pell.add((-X, -Y))\n            a = diop_DN(D, 1)\n            T = a[0][0]\n            U = a[0][1]\n            if all((_is_int(_) for _ in P[:4] + Q[:2])):\n                for r, s in solns_pell:\n                    _a = (r + s * sqrt(D)) * (T + U * sqrt(D)) ** t\n                    _b = (r - s * sqrt(D)) * (T - U * sqrt(D)) ** t\n                    x_n = _mexpand(S(_a + _b) / 2)\n                    y_n = _mexpand(S(_a - _b) / (2 * sqrt(D)))\n                    s = P * Matrix([x_n, y_n]) + Q\n                    sol.add(tuple(s))\n            else:\n                L = ilcm(*[_.q for _ in P[:4] + Q[:2]])\n                k = 1\n                T_k = T\n                U_k = U\n                while (T_k - 1) % L != 0 or U_k % L != 0:\n                    T_k, U_k = (T_k * T + D * U_k * U, T_k * U + U_k * T)\n                    k += 1\n                for X, Y in solns_pell:\n                    for i in range(k):\n                        if all((_is_int(_) for _ in P * Matrix([X, Y]) + Q)):\n                            _a = (X + sqrt(D) * Y) * (T_k + sqrt(D) * U_k) ** t\n                            _b = (X - sqrt(D) * Y) * (T_k - sqrt(D) * U_k) ** t\n                            Xt = S(_a + _b) / 2\n                            Yt = S(_a - _b) / (2 * sqrt(D))\n                            s = P * Matrix([Xt, Yt]) + Q\n                            sol.add(tuple(s))\n                        X, Y = (X * T + D * U * Y, X * U + Y * T)\n    return sol",
    ".sympy.solvers.diophantine.py@@_remove_gcd": "def _remove_gcd(*x):\n    try:\n        g = igcd(*x)\n    except ValueError:\n        fx = list(filter(None, x))\n        if len(fx) < 2:\n            return x\n        g = igcd(*[i.as_content_primitive()[0] for i in fx])\n    except TypeError:\n        raise TypeError('_remove_gcd(a,b,c) or _remove_gcd(*container)')\n    if g == 1:\n        return x\n    return tuple([i // g for i in x])",
    ".sympy.functions.elementary.complexes.py@@sign.eval": "def eval(cls, arg):\n    if arg.is_Mul:\n        c, args = arg.as_coeff_mul()\n        unk = []\n        s = sign(c)\n        for a in args:\n            if a.is_extended_negative:\n                s = -s\n            elif a.is_extended_positive:\n                pass\n            else:\n                ai = im(a)\n                if a.is_imaginary and ai.is_comparable:\n                    s *= S.ImaginaryUnit\n                    if ai.is_extended_negative:\n                        s = -s\n                else:\n                    unk.append(a)\n        if c is S.One and len(unk) == len(args):\n            return None\n        return s * cls(arg._new_rawargs(*unk))\n    if arg is S.NaN:\n        return S.NaN\n    if arg.is_zero:\n        return S.Zero\n    if arg.is_extended_positive:\n        return S.One\n    if arg.is_extended_negative:\n        return S.NegativeOne\n    if arg.is_Function:\n        if isinstance(arg, sign):\n            return arg\n    if arg.is_imaginary:\n        if arg.is_Pow and arg.exp is S.Half:\n            return S.ImaginaryUnit\n        arg2 = -S.ImaginaryUnit * arg\n        if arg2.is_extended_positive:\n            return S.ImaginaryUnit\n        if arg2.is_extended_negative:\n            return -S.ImaginaryUnit",
    ".sympy.core.numbers.py@@Integer.__rfloordiv__": "def __rfloordiv__(self, other):\n    return Integer(Integer(other).p // self.p)",
    ".sympy.core.numbers.py@@Float._eval_is_zero": "def _eval_is_zero(self):\n    return self._mpf_ == fzero",
    ".sympy.core.numbers.py@@Float._eval_is_extended_positive": "def _eval_is_extended_positive(self):\n    if self._mpf_ == _mpf_inf:\n        return True\n    if self._mpf_ == _mpf_ninf:\n        return False\n    return self.num > 0",
    ".sympy.core.numbers.py@@Float.num": "def num(self):\n    return mpmath.mpf(self._mpf_)",
    ".sympy.core.power.py@@isqrt": "def isqrt(n):\n    if n < 0:\n        raise ValueError('n must be nonnegative')\n    n = int(n)\n    if n < 4503599761588224:\n        s = int(_sqrt(n))\n        if 0 <= n - s * s <= 2 * s:\n            return s\n    return integer_nthroot(n, 2)[0]",
    ".sympy.core.numbers.py@@Integer.__lt__": "def __lt__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if other.is_Integer:\n        return _sympify(self.p < other.p)\n    return Rational.__lt__(self, other)",
    ".sympy.core.numbers.py@@Integer.__index__": "def __index__(self):\n    return self.p",
    ".sympy.core.numbers.py@@Integer.__rmul__": "def __rmul__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, integer_types):\n            return Integer(other * self.p)\n        elif isinstance(other, Rational):\n            return Rational(other.p * self.p, other.q, igcd(self.p, other.q))\n        return Rational.__rmul__(self, other)\n    return Rational.__rmul__(self, other)",
    ".sympy.solvers.diophantine.py@@divisible": "def divisible(a, b):\n    return not a % b",
    ".sympy.core.numbers.py@@Integer.__mod__": "def __mod__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, integer_types):\n            return Integer(self.p % other)\n        elif isinstance(other, Integer):\n            return Integer(self.p % other.p)\n        return Rational.__mod__(self, other)\n    return Rational.__mod__(self, other)",
    ".sympy.core.numbers.py@@Integer.__radd__": "def __radd__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, integer_types):\n            return Integer(other + self.p)\n        elif isinstance(other, Rational):\n            return Rational(other.p + self.p * other.q, other.q, 1)\n        return Rational.__radd__(self, other)\n    return Rational.__radd__(self, other)",
    ".sympy.core.numbers.py@@Integer.__floordiv__": "def __floordiv__(self, other):\n    if not isinstance(other, Expr):\n        return NotImplemented\n    if isinstance(other, Integer):\n        return Integer(self.p // other)\n    return Integer(divmod(self, other)[0])",
    ".sympy.printing.str.py@@StrPrinter._print_Add": "def _print_Add(self, expr, order=None):\n    if self.order == 'none':\n        terms = list(expr.args)\n    else:\n        terms = self._as_ordered_terms(expr, order=order)\n    PREC = precedence(expr)\n    l = []\n    for term in terms:\n        t = self._print(term)\n        if t.startswith('-'):\n            sign = '-'\n            t = t[1:]\n        else:\n            sign = '+'\n        if precedence(term) < PREC:\n            l.extend([sign, '(%s)' % t])\n        else:\n            l.extend([sign, t])\n    sign = l.pop(0)\n    if sign == '+':\n        sign = ''\n    return sign + ' '.join(l)",
    ".sympy.printing.printer.py@@Printer.order": "def order(self):\n    if 'order' in self._settings:\n        return self._settings['order']\n    else:\n        raise AttributeError('No order defined.')",
    ".sympy.printing.printer.py@@Printer._as_ordered_terms": "def _as_ordered_terms(self, expr, order=None):\n    order = order or self.order\n    if order == 'old':\n        return sorted(Add.make_args(expr), key=cmp_to_key(Basic._compare_pretty))\n    else:\n        return expr.as_ordered_terms(order=order)",
    ".sympy.printing.precedence.py@@precedence": "def precedence(item):\n    if hasattr(item, 'precedence'):\n        return item.precedence\n    try:\n        mro = item.__class__.__mro__\n    except AttributeError:\n        return PRECEDENCE['Atom']\n    for i in mro:\n        n = i.__name__\n        if n in PRECEDENCE_FUNCTIONS:\n            return PRECEDENCE_FUNCTIONS[n](item)\n        elif n in PRECEDENCE_VALUES:\n            return PRECEDENCE_VALUES[n]\n    return PRECEDENCE['Atom']",
    ".sympy.printing.str.py@@StrPrinter._print_Mul": "def _print_Mul(self, expr):\n    prec = precedence(expr)\n    c, e = expr.as_coeff_Mul()\n    if c < 0:\n        expr = _keep_coeff(-c, e)\n        sign = '-'\n    else:\n        sign = ''\n    a = []\n    b = []\n    pow_paren = []\n    if self.order not in ('old', 'none'):\n        args = expr.as_ordered_factors()\n    else:\n        args = Mul.make_args(expr)\n    for item in args:\n        if item.is_commutative and item.is_Pow and item.exp.is_Rational and item.exp.is_negative:\n            if item.exp != -1:\n                b.append(Pow(item.base, -item.exp, evaluate=False))\n            else:\n                if len(item.args[0].args) != 1 and isinstance(item.base, Mul):\n                    pow_paren.append(item)\n                b.append(Pow(item.base, -item.exp))\n        elif item.is_Rational and item is not S.Infinity:\n            if item.p != 1:\n                a.append(Rational(item.p))\n            if item.q != 1:\n                b.append(Rational(item.q))\n        else:\n            a.append(item)\n    a = a or [S.One]\n    a_str = [self.parenthesize(x, prec, strict=False) for x in a]\n    b_str = [self.parenthesize(x, prec, strict=False) for x in b]\n    for item in pow_paren:\n        if item.base in b:\n            b_str[b.index(item.base)] = '(%s)' % b_str[b.index(item.base)]\n    if not b:\n        return sign + '*'.join(a_str)\n    elif len(b) == 1:\n        return sign + '*'.join(a_str) + '/' + b_str[0]\n    else:\n        return sign + '*'.join(a_str) + '/(%s)' % '*'.join(b_str)",
    ".sympy.printing.precedence.py@@precedence_Mul": "def precedence_Mul(item):\n    if _coeff_isneg(item):\n        return PRECEDENCE['Add']\n    return PRECEDENCE['Mul']",
    ".sympy.printing.str.py@@StrPrinter.parenthesize": "def parenthesize(self, item, level, strict=False):\n    if precedence(item) < level or (not strict and precedence(item) <= level):\n        return '(%s)' % self._print(item)\n    else:\n        return self._print(item)",
    ".sympy.printing.precedence.py@@precedence_Integer": "def precedence_Integer(item):\n    if item.p < 0:\n        return PRECEDENCE['Add']\n    return PRECEDENCE['Atom']",
    ".sympy.printing.str.py@@StrPrinter._print_Integer": "def _print_Integer(self, expr):\n    if self._settings.get('sympy_integers', False):\n        return 'S(%s)' % expr\n    return str(expr.p)",
    ".sympy.printing.str.py@@StrPrinter._print_Pow": "def _print_Pow(self, expr, rational=False):\n    PREC = precedence(expr)\n    if expr.exp is S.Half and (not rational):\n        return 'sqrt(%s)' % self._print(expr.base)\n    if expr.is_commutative:\n        if -expr.exp is S.Half and (not rational):\n            return '%s/sqrt(%s)' % tuple(map(lambda arg: self._print(arg), (S.One, expr.base)))\n        if expr.exp is -S.One:\n            return '%s/%s' % (self._print(S.One), self.parenthesize(expr.base, PREC, strict=False))\n    e = self.parenthesize(expr.exp, PREC, strict=False)\n    if self.printmethod == '_sympyrepr' and expr.exp.is_Rational and (expr.exp.q != 1):\n        if e.startswith('(Rational'):\n            return '%s**%s' % (self.parenthesize(expr.base, PREC, strict=False), e[1:-1])\n    return '%s**%s' % (self.parenthesize(expr.base, PREC, strict=False), e)",
    ".sympy.core.mul.py@@Mul._eval_is_infinite": "def _eval_is_infinite(self):\n    if any((a.is_infinite for a in self.args)):\n        if any((a.is_zero for a in self.args)):\n            return S.NaN.is_infinite\n        if any((a.is_zero is None for a in self.args)):\n            return None\n        return True",
    ".sympy.core.mul.py@@Mul._eval_is_irrational": "def _eval_is_irrational(self):\n    for t in self.args:\n        a = t.is_irrational\n        if a:\n            others = list(self.args)\n            others.remove(t)\n            if all(((x.is_rational and fuzzy_not(x.is_zero)) is True for x in others)):\n                return True\n            return\n        if a is None:\n            return\n    return False",
    ".sympy.core.numbers.py@@Integer._eval_is_prime": "def _eval_is_prime(self):\n    from sympy.ntheory import isprime\n    return isprime(self)",
    ".sympy.core.mul.py@@Mul._eval_is_antihermitian": "def _eval_is_antihermitian(self):\n    z = self.is_zero\n    if z:\n        return False\n    elif z is False:\n        return self._eval_herm_antiherm(False)",
    ".sympy.core.numbers.py@@Zero.__neg__": "def __neg__():\n    return S.Zero",
    ".sympy.polys.galoistools.py@@gf_quo": "def gf_quo(f, g, p, K):\n    df = gf_degree(f)\n    dg = gf_degree(g)\n    if not g:\n        raise ZeroDivisionError('polynomial division')\n    elif df < dg:\n        return []\n    inv = K.invert(g[0], p)\n    h, dq, dr = (f[:], df - dg, dg - 1)\n    for i in range(0, dq + 1):\n        coeff = h[i]\n        for j in range(max(0, dg - i), min(df - i, dr) + 1):\n            coeff -= h[i + j - dg] * g[dg - j]\n        h[i] = coeff * inv % p\n    return h[:dq + 1]",
    ".sympy.polys.galoistools.py@@gf_random": "def gf_random(n, p, K):\n    return [K.one] + [K(int(uniform(0, p))) for i in range(0, n)]",
    ".sympy.polys.galoistools.py@@_gf_pow_pnm1d2": "def _gf_pow_pnm1d2(f, n, g, b, p, K):\n    f = gf_rem(f, g, p, K)\n    h = f\n    r = f\n    for i in range(1, n):\n        h = gf_frobenius_map(h, g, b, p, K)\n        r = gf_mul(r, h, p, K)\n        r = gf_rem(r, g, p, K)\n    res = gf_pow_mod(r, (p - 1) // 2, g, p, K)\n    return res",
    ".sympy.polys.galoistools.py@@gf_sub_ground": "def gf_sub_ground(f, a, p, K):\n    if not f:\n        a = -a % p\n    else:\n        a = (f[-1] - a) % p\n        if len(f) > 1:\n            return f[:-1] + [a]\n    if not a:\n        return []\n    else:\n        return [a]",
    ".sympy.polys.galoistools.py@@gf_gcdex": "def gf_gcdex(f, g, p, K):\n    if not (f or g):\n        return ([K.one], [], [])\n    p0, r0 = gf_monic(f, p, K)\n    p1, r1 = gf_monic(g, p, K)\n    if not f:\n        return ([], [K.invert(p1, p)], r1)\n    if not g:\n        return ([K.invert(p0, p)], [], r0)\n    s0, s1 = ([K.invert(p0, p)], [])\n    t0, t1 = ([], [K.invert(p1, p)])\n    while True:\n        Q, R = gf_div(r0, r1, p, K)\n        if not R:\n            break\n        (lc, r1), r0 = (gf_monic(R, p, K), r1)\n        inv = K.invert(lc, p)\n        s = gf_sub_mul(s0, s1, Q, p, K)\n        t = gf_sub_mul(t0, t1, Q, p, K)\n        s1, s0 = (gf_mul_ground(s, inv, p, K), s1)\n        t1, t0 = (gf_mul_ground(t, inv, p, K), t1)\n    return (s1, t1, r1)",
    ".sympy.polys.galoistools.py@@gf_sub_mul": "def gf_sub_mul(f, g, h, p, K):\n    return gf_sub(f, gf_mul(g, h, p, K), p, K)",
    ".sympy.polys.galoistools.py@@gf_neg": "def gf_neg(f, p, K):\n    return [-coeff % p for coeff in f]",
    ".sympy.polys.factortools.py@@dup_zz_hensel_step": "def dup_zz_hensel_step(m, f, g, h, s, t, K):\n    M = m ** 2\n    e = dup_sub_mul(f, g, h, K)\n    e = dup_trunc(e, M, K)\n    q, r = dup_div(dup_mul(s, e, K), h, K)\n    q = dup_trunc(q, M, K)\n    r = dup_trunc(r, M, K)\n    u = dup_add(dup_mul(t, e, K), dup_mul(q, g, K), K)\n    G = dup_trunc(dup_add(g, u, K), M, K)\n    H = dup_trunc(dup_add(h, r, K), M, K)\n    u = dup_add(dup_mul(s, G, K), dup_mul(t, H, K), K)\n    b = dup_trunc(dup_sub(u, [K.one], K), M, K)\n    c, d = dup_div(dup_mul(s, b, K), H, K)\n    c = dup_trunc(c, M, K)\n    d = dup_trunc(d, M, K)\n    u = dup_add(dup_mul(t, b, K), dup_mul(c, G, K), K)\n    S = dup_trunc(dup_sub(s, d, K), M, K)\n    T = dup_trunc(dup_sub(t, u, K), M, K)\n    return (G, H, S, T)",
    ".sympy.polys.densearith.py@@dup_sub_mul": "def dup_sub_mul(f, g, h, K):\n    return dup_sub(f, dup_mul(g, h, K), K)",
    ".sympy.polys.densearith.py@@dup_neg": "def dup_neg(f, K):\n    return [-coeff for coeff in f]",
    ".sympy.utilities.iterables.py@@subsets": "def subsets(seq, k=None, repetition=False):\n    if k is None:\n        for k in range(len(seq) + 1):\n            for i in subsets(seq, k, repetition):\n                yield i\n    elif not repetition:\n        for i in combinations(seq, k):\n            yield i\n    else:\n        for i in combinations_with_replacement(seq, k):\n            yield i",
    ".sympy.core.expr.py@@Expr.__rmul__": "def __rmul__(self, other):\n    return Mul(other, self)",
    ".sympy.solvers.solveset.py@@solveset_real": "def solveset_real(f, symbol):\n    return solveset(f, symbol, S.Reals)",
    ".sympy.solvers.solveset.py@@solveset": "def solveset(f, symbol=None, domain=S.Complexes):\n    f = sympify(f)\n    symbol = sympify(symbol)\n    if f is S.true:\n        return domain\n    if f is S.false:\n        return S.EmptySet\n    if not isinstance(f, (Expr, Number)):\n        raise ValueError('%s is not a valid SymPy expression' % f)\n    if not isinstance(symbol, Expr) and symbol is not None:\n        raise ValueError('%s is not a valid SymPy symbol' % symbol)\n    if not isinstance(domain, Set):\n        raise ValueError('%s is not a valid domain' % domain)\n    free_symbols = f.free_symbols\n    if symbol is None and (not free_symbols):\n        b = Eq(f, 0)\n        if b is S.true:\n            return domain\n        elif b is S.false:\n            return S.EmptySet\n        else:\n            raise NotImplementedError(filldedent('\\n                relationship between value and 0 is unknown: %s' % b))\n    if symbol is None:\n        if len(free_symbols) == 1:\n            symbol = free_symbols.pop()\n        elif free_symbols:\n            raise ValueError(filldedent('\\n                The independent variable must be specified for a\\n                multivariate equation.'))\n    elif not isinstance(symbol, Symbol):\n        f, s, swap = recast_to_symbols([f], [symbol])\n        return solveset(f[0], s[0], domain).xreplace(swap)\n    if domain.is_subset(S.Reals):\n        if not symbol.is_real:\n            assumptions = symbol.assumptions0\n            assumptions['real'] = True\n            try:\n                r = Dummy('r', **assumptions)\n                return solveset(f.xreplace({symbol: r}), r, domain).xreplace({r: symbol})\n            except InconsistentAssumptions:\n                pass\n    f, mask = _masked(f, Abs)\n    f = f.rewrite(Piecewise)\n    for d, e in mask:\n        e = e.func(e.args[0].rewrite(Piecewise))\n        f = f.xreplace({d: e})\n    f = piecewise_fold(f)\n    return _solveset(f, symbol, domain, _check=True)",
    ".sympy.sets.sets.py@@Set.is_subset": "def is_subset(self, other):\n    if not isinstance(other, Set):\n        raise ValueError(\"Unknown argument '%s'\" % other)\n    if self == other:\n        return True\n    is_empty = self.is_empty\n    if is_empty is True:\n        return True\n    elif fuzzy_not(is_empty) and other.is_empty:\n        return False\n    if self.is_finite_set is False and other.is_finite_set:\n        return False\n    ret = self._eval_is_subset(other)\n    if ret is not None:\n        return ret\n    ret = other._eval_is_superset(self)\n    if ret is not None:\n        return ret\n    from sympy.sets.handlers.issubset import is_subset_sets\n    ret = is_subset_sets(self, other)\n    if ret is not None:\n        return ret\n    if self.intersect(other) == self:\n        return True",
    ".sympy.sets.fancysets.py@@Reals.__eq__": "def __eq__(self, other):\n    return other == Interval(S.NegativeInfinity, S.Infinity)",
    ".sympy.sets.sets.py@@Interval.__new__": "def __new__(cls, start, end, left_open=False, right_open=False):\n    start = _sympify(start)\n    end = _sympify(end)\n    left_open = _sympify(left_open)\n    right_open = _sympify(right_open)\n    if not all((isinstance(a, (type(true), type(false))) for a in [left_open, right_open])):\n        raise NotImplementedError('left_open and right_open can have only true/false values, got %s and %s' % (left_open, right_open))\n    inftys = [S.Infinity, S.NegativeInfinity]\n    if not all((i.is_extended_real is not False or i in inftys for i in (start, end))):\n        raise ValueError('Non-real intervals are not supported')\n    if (end < start) == True:\n        return S.EmptySet\n    elif (end - start).is_negative:\n        return S.EmptySet\n    if end == start and (left_open or right_open):\n        return S.EmptySet\n    if end == start and (not (left_open or right_open)):\n        if start is S.Infinity or start is S.NegativeInfinity:\n            return S.EmptySet\n        return FiniteSet(end)\n    if start is S.NegativeInfinity:\n        left_open = true\n    if end is S.Infinity:\n        right_open = true\n    if start == S.Infinity or end == S.NegativeInfinity:\n        return S.EmptySet\n    return Basic.__new__(cls, start, end, left_open, right_open)",
    ".sympy.core.numbers.py@@Infinity.__sub__": "def __sub__(self, other):\n    if isinstance(other, Number) and global_evaluate[0]:\n        if other is S.Infinity or other is S.NaN:\n            return S.NaN\n        return self\n    return Number.__sub__(self, other)",
    ".sympy.core.numbers.py@@Infinity.evalf": "def evalf(self, prec=None, **options):\n    return self._eval_evalf(prec)",
    ".sympy.core.numbers.py@@Infinity._eval_evalf": "def _eval_evalf(self, prec=None):\n    return Float('inf')",
    ".sympy.core.numbers.py@@Infinity._as_mpf_val": "def _as_mpf_val(self, prec):\n    return mlib.finf",
    ".sympy.core.basic.py@@Basic.__eq__": "def __eq__(self, other):\n    if self is other:\n        return True\n    tself = type(self)\n    tother = type(other)\n    if tself is not tother:\n        try:\n            other = _sympify(other)\n            tother = type(other)\n        except SympifyError:\n            return NotImplemented\n        if PY3 or type(tself).__ne__ is not type.__ne__:\n            if tself != tother:\n                return False\n        elif tself is not tother:\n            return False\n    return self._hashable_content() == other._hashable_content()",
    ".sympy.core.basic.py@@Basic._hashable_content": "def _hashable_content(self):\n    return self._args",
    ".sympy.solvers.solveset.py@@_masked": "def _masked(f, *atoms):\n    sym = numbered_symbols('a', cls=Dummy, real=True)\n    mask = []\n    for a in ordered(f.atoms(*atoms)):\n        for i in mask:\n            a = a.replace(*i)\n        mask.append((a, next(sym)))\n    for i, (o, n) in enumerate(mask):\n        f = f.replace(o, n)\n        mask[i] = (n, o)\n    mask = list(reversed(mask))\n    return (f, mask)",
    ".sympy.core.basic.py@@Basic.rewrite": "def rewrite(self, *args, **hints):\n    if not args:\n        return self\n    else:\n        pattern = args[:-1]\n        if isinstance(args[-1], string_types):\n            rule = '_eval_rewrite_as_' + args[-1]\n        else:\n            try:\n                rule = '_eval_rewrite_as_' + args[-1].__name__\n            except:\n                rule = '_eval_rewrite_as_' + args[-1].__class__.__name__\n        if not pattern:\n            return self._eval_rewrite(None, rule, **hints)\n        else:\n            if iterable(pattern[0]):\n                pattern = pattern[0]\n            pattern = [p for p in pattern if self.has(p)]\n            if pattern:\n                return self._eval_rewrite(tuple(pattern), rule, **hints)\n            else:\n                return self",
    ".sympy.core.basic.py@@Basic._eval_rewrite": "def _eval_rewrite(self, pattern, rule, **hints):\n    if self.is_Atom:\n        if hasattr(self, rule):\n            return getattr(self, rule)()\n        return self\n    if hints.get('deep', True):\n        args = [a._eval_rewrite(pattern, rule, **hints) if isinstance(a, Basic) else a for a in self.args]\n    else:\n        args = self.args\n    if pattern is None or isinstance(self, pattern):\n        if hasattr(self, rule):\n            rewritten = getattr(self, rule)(*args, **hints)\n            if rewritten is not None:\n                return rewritten\n    return self.func(*args) if hints.get('evaluate', True) else self",
    ".sympy.functions.elementary.piecewise.py@@piecewise_fold": "def piecewise_fold(expr):\n    if not isinstance(expr, Basic) or not expr.has(Piecewise):\n        return expr\n    new_args = []\n    if isinstance(expr, (ExprCondPair, Piecewise)):\n        for e, c in expr.args:\n            if not isinstance(e, Piecewise):\n                e = piecewise_fold(e)\n            assert not c.has(Piecewise)\n            if isinstance(c, ITE):\n                c = c.to_nnf()\n                c = simplify_logic(c, form='cnf')\n            if isinstance(e, Piecewise):\n                new_args.extend([(piecewise_fold(ei), And(ci, c)) for ei, ci in e.args])\n            else:\n                new_args.append((e, c))\n    else:\n        from sympy.utilities.iterables import cartes, sift, common_prefix\n        if expr.is_Add or (expr.is_Mul and expr.is_commutative):\n            p, args = sift(expr.args, lambda x: x.is_Piecewise, binary=True)\n            pc = sift(p, lambda x: tuple([c for e, c in x.args]))\n            for c in list(ordered(pc)):\n                if len(pc[c]) > 1:\n                    pargs = [list(i.args) for i in pc[c]]\n                    com = common_prefix(*[[i.cond for i in j] for j in pargs])\n                    n = len(com)\n                    collected = []\n                    for i in range(n):\n                        collected.append((expr.func(*[ai[i].expr for ai in pargs]), com[i]))\n                    remains = []\n                    for a in pargs:\n                        if n == len(a):\n                            continue\n                        if a[n].cond == True:\n                            remains.append(a[n].expr)\n                        else:\n                            remains.append(Piecewise(*a[n:], evaluate=False))\n                    if remains:\n                        collected.append((expr.func(*remains), True))\n                    args.append(Piecewise(*collected, evaluate=False))\n                    continue\n                args.extend(pc[c])\n        else:\n            args = expr.args\n        folded = list(map(piecewise_fold, args))\n        for ec in cartes(*[i.args if isinstance(i, Piecewise) else [(i, true)] for i in folded]):\n            e, c = zip(*ec)\n            new_args.append((expr.func(*e), And(*c)))\n    return Piecewise(*new_args)",
    ".sympy.solvers.solveset.py@@_solveset": "def _solveset(f, symbol, domain, _check=False):\n    from sympy.simplify.simplify import signsimp\n    orig_f = f\n    if f.is_Mul:\n        coeff, f = f.as_independent(symbol, as_Add=False)\n        if coeff in set([S.ComplexInfinity, S.NegativeInfinity, S.Infinity]):\n            f = together(orig_f)\n    elif f.is_Add:\n        a, h = f.as_independent(symbol)\n        m, h = h.as_independent(symbol, as_Add=False)\n        if m not in set([S.ComplexInfinity, S.Zero, S.Infinity, S.NegativeInfinity]):\n            f = a / m + h\n    solver = lambda f, x, domain=domain: _solveset(f, x, domain)\n    inverter = lambda f, rhs, symbol: _invert(f, rhs, symbol, domain)\n    result = EmptySet\n    if f.expand().is_zero:\n        return domain\n    elif not f.has(symbol):\n        return EmptySet\n    elif f.is_Mul and all((_is_finite_with_finite_vars(m, domain) for m in f.args)):\n        result = Union(*[solver(m, symbol) for m in f.args])\n    elif _is_function_class_equation(TrigonometricFunction, f, symbol) or _is_function_class_equation(HyperbolicFunction, f, symbol):\n        result = _solve_trig(f, symbol, domain)\n    elif isinstance(f, arg):\n        a = f.args[0]\n        result = solveset_real(a > 0, symbol)\n    elif f.is_Piecewise:\n        result = EmptySet\n        expr_set_pairs = f.as_expr_set_pairs(domain)\n        for expr, in_set in expr_set_pairs:\n            if in_set.is_Relational:\n                in_set = in_set.as_set()\n            solns = solver(expr, symbol, in_set)\n            result += solns\n    elif isinstance(f, Eq):\n        result = solver(Add(f.lhs, -f.rhs, evaluate=False), symbol, domain)\n    elif f.is_Relational:\n        if not domain.is_subset(S.Reals):\n            raise NotImplementedError(filldedent('\\n                Inequalities in the complex domain are\\n                not supported. Try the real domain by\\n                setting domain=S.Reals'))\n        try:\n            result = solve_univariate_inequality(f, symbol, domain=domain, relational=False)\n        except NotImplementedError:\n            result = ConditionSet(symbol, f, domain)\n        return result\n    elif _is_modular(f, symbol):\n        result = _solve_modular(f, symbol, domain)\n    else:\n        lhs, rhs_s = inverter(f, 0, symbol)\n        if lhs == symbol:\n            if isinstance(rhs_s, FiniteSet):\n                rhs_s = FiniteSet(*[Mul(*signsimp(i).as_content_primitive()) for i in rhs_s])\n            result = rhs_s\n        elif isinstance(rhs_s, FiniteSet):\n            for equation in [lhs - rhs for rhs in rhs_s]:\n                if equation == f:\n                    if any((_has_rational_power(g, symbol)[0] for g in equation.args)) or _has_rational_power(equation, symbol)[0]:\n                        result += _solve_radical(equation, symbol, solver)\n                    elif equation.has(Abs):\n                        result += _solve_abs(f, symbol, domain)\n                    else:\n                        result_rational = _solve_as_rational(equation, symbol, domain)\n                        if isinstance(result_rational, ConditionSet):\n                            result += _transolve(equation, symbol, domain)\n                        else:\n                            result += result_rational\n                else:\n                    result += solver(equation, symbol)\n        elif rhs_s is not S.EmptySet:\n            result = ConditionSet(symbol, Eq(f, 0), domain)\n    if isinstance(result, ConditionSet):\n        num, den = f.as_numer_denom()\n        if den.has(symbol):\n            _result = _solveset(num, symbol, domain)\n            if not isinstance(_result, ConditionSet):\n                singularities = _solveset(den, symbol, domain)\n                result = _result - singularities\n    if _check:\n        if isinstance(result, ConditionSet):\n            return result\n        fx = orig_f.as_independent(symbol, as_Add=True)[1]\n        fx = fx.as_independent(symbol, as_Add=False)[1]\n        if isinstance(result, FiniteSet):\n            result = FiniteSet(*[s for s in result if isinstance(s, RootOf) or domain_check(fx, symbol, s)])\n    return result",
    ".sympy.core.add.py@@_unevaluated_Add": "def _unevaluated_Add(*args):\n    args = list(args)\n    newargs = []\n    co = S.Zero\n    while args:\n        a = args.pop()\n        if a.is_Add:\n            args.extend(a.args)\n        elif a.is_Number:\n            co += a\n        else:\n            newargs.append(a)\n    _addsort(newargs)\n    if co:\n        newargs.insert(0, co)\n    return Add._from_args(newargs)",
    ".sympy.core.numbers.py@@NegativeInfinity.__hash__": "def __hash__(self):\n    return super(NegativeInfinity, self).__hash__()",
    ".sympy.core.add.py@@Add._eval_is_infinite": "def _eval_is_infinite(self):\n    sawinf = False\n    for a in self.args:\n        ainf = a.is_infinite\n        if ainf is None:\n            return None\n        elif ainf is True:\n            if sawinf is True:\n                return None\n            sawinf = True\n    return sawinf",
    ".sympy.solvers.solveset.py@@_is_function_class_equation": "def _is_function_class_equation(func_class, f, symbol):\n    if f.is_Mul or f.is_Add:\n        return all((_is_function_class_equation(func_class, arg, symbol) for arg in f.args))\n    if f.is_Pow:\n        if not f.exp.has(symbol):\n            return _is_function_class_equation(func_class, f.base, symbol)\n        else:\n            return False\n    if not f.has(symbol):\n        return True\n    if isinstance(f, func_class):\n        try:\n            g = Poly(f.args[0], symbol)\n            return g.degree() <= 1\n        except PolynomialError:\n            return False\n    else:\n        return False",
    ".sympy.solvers.solveset.py@@_is_modular": "def _is_modular(f, symbol):\n    if not f.has(Mod):\n        return False\n    modterms = list(f.atoms(Mod))\n    return len(modterms) == 1 and modterms[0].args[0].has(symbol) and modterms[0].args[1].is_integer and any((isinstance(term, Mod) for term in list(_term_factors(f))))",
    ".sympy.solvers.solveset.py@@_invert": "def _invert(f_x, y, x, domain=S.Complexes):\n    x = sympify(x)\n    if not x.is_Symbol:\n        raise ValueError('x must be a symbol')\n    f_x = sympify(f_x)\n    if x not in f_x.free_symbols:\n        raise ValueError(\"Inverse of constant function doesn't exist\")\n    y = sympify(y)\n    if x in y.free_symbols:\n        raise ValueError('y should be independent of x ')\n    if domain.is_subset(S.Reals):\n        x1, s = _invert_real(f_x, FiniteSet(y), x)\n    else:\n        x1, s = _invert_complex(f_x, FiniteSet(y), x)\n    if not isinstance(s, FiniteSet) or x1 != x:\n        return (x1, s)\n    return (x1, s.intersection(domain))",
    ".sympy.solvers.solveset.py@@_invert_real": "def _invert_real(f, g_ys, symbol):\n    if f == symbol:\n        return (f, g_ys)\n    n = Dummy('n', real=True)\n    if hasattr(f, 'inverse') and (not isinstance(f, (TrigonometricFunction, HyperbolicFunction))):\n        if len(f.args) > 1:\n            raise ValueError('Only functions with one argument are supported.')\n        return _invert_real(f.args[0], imageset(Lambda(n, f.inverse()(n)), g_ys), symbol)\n    if isinstance(f, Abs):\n        return _invert_abs(f.args[0], g_ys, symbol)\n    if f.is_Add:\n        g, h = f.as_independent(symbol)\n        if g is not S.Zero:\n            return _invert_real(h, imageset(Lambda(n, n - g), g_ys), symbol)\n    if f.is_Mul:\n        g, h = f.as_independent(symbol)\n        if g is not S.One:\n            return _invert_real(h, imageset(Lambda(n, n / g), g_ys), symbol)\n    if f.is_Pow:\n        base, expo = f.args\n        base_has_sym = base.has(symbol)\n        expo_has_sym = expo.has(symbol)\n        if not expo_has_sym:\n            res = imageset(Lambda(n, real_root(n, expo)), g_ys)\n            if expo.is_rational:\n                numer, denom = expo.as_numer_denom()\n                if denom % 2 == 0:\n                    base_positive = solveset(base >= 0, symbol, S.Reals)\n                    res = imageset(Lambda(n, real_root(n, expo)), g_ys.intersect(Interval.Ropen(S.Zero, S.Infinity)))\n                    _inv, _set = _invert_real(base, res, symbol)\n                    return (_inv, _set.intersect(base_positive))\n                elif numer % 2 == 0:\n                    n = Dummy('n')\n                    neg_res = imageset(Lambda(n, -n), res)\n                    return _invert_real(base, res + neg_res, symbol)\n                else:\n                    return _invert_real(base, res, symbol)\n            else:\n                if not base.is_positive:\n                    raise ValueError('x**w where w is irrational is not defined for negative x')\n                return _invert_real(base, res, symbol)\n        if not base_has_sym:\n            rhs = g_ys.args[0]\n            if base.is_positive:\n                return _invert_real(expo, imageset(Lambda(n, log(n, base, evaluate=False)), g_ys), symbol)\n            elif base.is_negative:\n                from sympy.core.power import integer_log\n                s, b = integer_log(rhs, base)\n                if b:\n                    return _invert_real(expo, FiniteSet(s), symbol)\n                else:\n                    return _invert_real(expo, S.EmptySet, symbol)\n            elif base.is_zero:\n                one = Eq(rhs, 1)\n                if one == S.true:\n                    return _invert_real(expo, FiniteSet(0), symbol)\n                elif one == S.false:\n                    return _invert_real(expo, S.EmptySet, symbol)\n    if isinstance(f, TrigonometricFunction):\n        if isinstance(g_ys, FiniteSet):\n\n            def inv(trig):\n                if isinstance(f, (sin, csc)):\n                    F = asin if isinstance(f, sin) else acsc\n                    return (lambda a: n * pi + (-1) ** n * F(a),)\n                if isinstance(f, (cos, sec)):\n                    F = acos if isinstance(f, cos) else asec\n                    return (lambda a: 2 * n * pi + F(a), lambda a: 2 * n * pi - F(a))\n                if isinstance(f, (tan, cot)):\n                    return (lambda a: n * pi + f.inverse()(a),)\n            n = Dummy('n', integer=True)\n            invs = S.EmptySet\n            for L in inv(f):\n                invs += Union(*[imageset(Lambda(n, L(g)), S.Integers) for g in g_ys])\n            return _invert_real(f.args[0], invs, symbol)\n    return (f, g_ys)",
    ".sympy.core.symbol.py@@Dummy.__new__": "def __new__(cls, name=None, dummy_index=None, **assumptions):\n    if dummy_index is not None:\n        assert name is not None, 'If you specify a dummy_index, you must also provide a name'\n    if name is None:\n        name = 'Dummy_' + str(Dummy._count)\n    if dummy_index is None:\n        dummy_index = Dummy._base_dummy_index + Dummy._count\n        Dummy._count += 1\n    cls._sanitize(assumptions, cls)\n    obj = Symbol.__xnew__(cls, name, **assumptions)\n    obj.dummy_index = dummy_index\n    return obj",
    ".sympy.core.symbol.py@@Dummy._hashable_content": "def _hashable_content(self):\n    return Symbol._hashable_content(self) + (self.dummy_index,)",
    ".sympy.core.function.py@@Lambda.__new__": "def __new__(cls, signature, expr):\n    if iterable(signature) and (not isinstance(signature, (tuple, Tuple))):\n        SymPyDeprecationWarning(feature='non tuple iterable of argument symbols to Lambda', useinstead='tuple of argument symbols', issue=17474, deprecated_since_version='1.5').warn()\n        signature = tuple(signature)\n    sig = signature if iterable(signature) else (signature,)\n    sig = sympify(sig)\n    cls._check_signature(sig)\n    if len(sig) == 1 and sig[0] == expr:\n        return S.IdentityFunction\n    return Expr.__new__(cls, sig, sympify(expr))",
    ".sympy.core.function.py@@Lambda._check_signature": "def _check_signature(cls, sig):\n    syms = set()\n\n    def rcheck(args):\n        for a in args:\n            if a.is_symbol:\n                if a in syms:\n                    raise BadSignatureError('Duplicate symbol %s' % a)\n                syms.add(a)\n            elif isinstance(a, Tuple):\n                rcheck(a)\n            else:\n                raise BadSignatureError('Lambda signature should be only tuples and symbols, not %s' % a)\n    if not isinstance(sig, Tuple):\n        raise BadSignatureError('Lambda signature should be a tuple not %s' % sig)\n    rcheck(sig)",
    ".sympy.core.function.py@@Lambda.rcheck": "def rcheck(args):\n    for a in args:\n        if a.is_symbol:\n            if a in syms:\n                raise BadSignatureError('Duplicate symbol %s' % a)\n            syms.add(a)\n        elif isinstance(a, Tuple):\n            rcheck(a)\n        else:\n            raise BadSignatureError('Lambda signature should be only tuples and symbols, not %s' % a)",
    ".sympy.core.containers.py@@Tuple.__len__": "def __len__(self):\n    return len(self.args)",
    ".sympy.core.containers.py@@Tuple.__getitem__": "def __getitem__(self, i):\n    if isinstance(i, slice):\n        indices = i.indices(len(self))\n        return Tuple(*(self.args[j] for j in range(*indices)))\n    return self.args[i]",
    ".sympy.sets.sets.py@@imageset": "def imageset(*args):\n    from sympy.core import Lambda\n    from sympy.sets.fancysets import ImageSet\n    from sympy.sets.setexpr import set_function\n    if len(args) < 2:\n        raise ValueError('imageset expects at least 2 args, got: %s' % len(args))\n    if isinstance(args[0], (Symbol, tuple)) and len(args) > 2:\n        f = Lambda(args[0], args[1])\n        set_list = args[2:]\n    else:\n        f = args[0]\n        set_list = args[1:]\n    if isinstance(f, Lambda):\n        pass\n    elif callable(f):\n        nargs = getattr(f, 'nargs', {})\n        if nargs:\n            if len(nargs) != 1:\n                raise NotImplementedError(filldedent('\\n                    This function can take more than 1 arg\\n                    but the potentially complicated set input\\n                    has not been analyzed at this point to\\n                    know its dimensions. TODO\\n                    '))\n            N = nargs.args[0]\n            if N == 1:\n                s = 'x'\n            else:\n                s = [Symbol('x%i' % i) for i in range(1, N + 1)]\n        elif PY3:\n            s = inspect.signature(f).parameters\n        else:\n            s = inspect.getargspec(f).args\n        dexpr = _sympify(f(*[Dummy() for i in s]))\n        var = tuple((_uniquely_named_symbol(Symbol(i), dexpr) for i in s))\n        f = Lambda(var, f(*var))\n    else:\n        raise TypeError(filldedent(\"\\n            expecting lambda, Lambda, or FunctionClass,\\n            not '%s'.\" % func_name(f)))\n    if any((not isinstance(s, Set) for s in set_list)):\n        name = [func_name(s) for s in set_list]\n        raise ValueError('arguments after mapping should be sets, not %s' % name)\n    if len(set_list) == 1:\n        set = set_list[0]\n        try:\n            r = set_function(f, set)\n            if r is None:\n                raise TypeError\n            if not r:\n                return r\n        except TypeError:\n            r = ImageSet(f, set)\n        if isinstance(r, ImageSet):\n            f, set = r.args\n        if f.variables[0] == f.expr:\n            return set\n        if isinstance(set, ImageSet):\n            if len(set.lamda.variables) == 1 and len(f.variables) == 1:\n                x = set.lamda.variables[0]\n                y = f.variables[0]\n                return imageset(Lambda(x, f.expr.subs(y, set.lamda.expr)), *set.base_sets)\n        if r is not None:\n            return r\n    return ImageSet(f, *set_list)",
    ".sympy.sets.sets.py@@set_function": "def set_function(f, x):\n    from sympy.sets.handlers.functions import _set_function\n    return _set_function(f, x)",
    ".sympy.multipledispatch.dispatcher.py@@Dispatcher.__call__": "def __call__(self, *args, **kwargs):\n    types = tuple([type(arg) for arg in args])\n    try:\n        func = self._cache[types]\n    except KeyError:\n        func = self.dispatch(*types)\n        if not func:\n            raise NotImplementedError('Could not find signature for %s: <%s>' % (self.name, str_signature(types)))\n        self._cache[types] = func\n    try:\n        return func(*args, **kwargs)\n    except MDNotImplementedError:\n        funcs = self.dispatch_iter(*types)\n        next(funcs)\n        for func in funcs:\n            try:\n                return func(*args, **kwargs)\n            except MDNotImplementedError:\n                pass\n        raise NotImplementedError('Matching functions for %s: <%s> found, but none completed successfully' % (self.name, str_signature(types)))",
    ".sympy.sets.handlers.functions.py@@_set_function": "def _set_function(f, x):\n    return None",
    ".sympy.sets.sets.py@@FiniteSet.__iter__": "def __iter__(self):\n    return iter(self.args)",
    ".sympy.core.function.py@@Lambda.__call__": "def __call__(self, *args):\n    n = len(args)\n    if n not in self.nargs:\n        temp = '%(name)s takes exactly %(args)s argument%(plural)s (%(given)s given)'\n        raise BadArgumentsError(temp % {'name': self, 'args': list(self.nargs)[0], 'plural': 's' * (list(self.nargs)[0] != 1), 'given': n})\n    d = self._match_signature(self.signature, args)\n    return self.expr.xreplace(d)",
    ".sympy.core.function.py@@Lambda.nargs": "def nargs(self):\n    from sympy.sets.sets import FiniteSet\n    return FiniteSet(len(self.signature))",
    ".sympy.core.function.py@@Lambda.signature": "def signature(self):\n    return self._args[0]",
    ".sympy.core.function.py@@Lambda._match_signature": "def _match_signature(self, sig, args):\n    symargmap = {}\n\n    def rmatch(pars, args):\n        for par, arg in zip(pars, args):\n            if par.is_symbol:\n                symargmap[par] = arg\n            elif isinstance(par, Tuple):\n                if not isinstance(arg, (tuple, Tuple)) or len(args) != len(pars):\n                    raise BadArgumentsError(\"Can't match %s and %s\" % (args, pars))\n                rmatch(par, arg)\n    rmatch(sig, args)\n    return symargmap",
    ".sympy.core.function.py@@Lambda.rmatch": "def rmatch(pars, args):\n    for par, arg in zip(pars, args):\n        if par.is_symbol:\n            symargmap[par] = arg\n        elif isinstance(par, Tuple):\n            if not isinstance(arg, (tuple, Tuple)) or len(args) != len(pars):\n                raise BadArgumentsError(\"Can't match %s and %s\" % (args, pars))\n            rmatch(par, arg)",
    ".sympy.core.function.py@@Lambda.expr": "def expr(self):\n    return self._args[1]",
    ".sympy.sets.sets.py@@FiniteSet.__len__": "def __len__(self):\n    return len(self.args)",
    ".sympy.core.function.py@@Lambda.variables": "def variables(self):\n\n    def _variables(args):\n        if isinstance(args, Tuple):\n            for arg in args:\n                for a in _variables(arg):\n                    yield a\n        else:\n            yield args\n    return tuple(_variables(self.signature))",
    ".sympy.core.function.py@@Lambda._variables": "def _variables(args):\n    if isinstance(args, Tuple):\n        for arg in args:\n            for a in _variables(arg):\n                yield a\n    else:\n        yield args",
    ".sympy.solvers.solveset.py@@_has_rational_power": "def _has_rational_power(expr, symbol):\n    a, p, q = (Wild('a'), Wild('p'), Wild('q'))\n    pattern_match = expr.match(a * p ** q) or {}\n    if pattern_match.get(a, S.Zero).is_zero:\n        return (False, S.One)\n    elif p not in pattern_match.keys():\n        return (False, S.One)\n    elif isinstance(pattern_match[q], Rational) and pattern_match[p].has(symbol):\n        if not pattern_match[q].q == S.One:\n            return (True, pattern_match[q].q)\n    if not isinstance(pattern_match[a], Pow) or isinstance(pattern_match[a], Mul):\n        return (False, S.One)\n    else:\n        return _has_rational_power(pattern_match[a], symbol)",
    ".sympy.core.symbol.py@@Wild.__new__": "def __new__(cls, name, exclude=(), properties=(), **assumptions):\n    exclude = tuple([sympify(x) for x in exclude])\n    properties = tuple(properties)\n    cls._sanitize(assumptions, cls)\n    return Wild.__xnew__(cls, name, exclude, properties, **assumptions)",
    ".sympy.core.symbol.py@@Wild.__xnew__": "def __xnew__(cls, name, exclude, properties, **assumptions):\n    obj = Symbol.__xnew__(cls, name, **assumptions)\n    obj.exclude = exclude\n    obj.properties = properties\n    return obj",
    ".sympy.core.symbol.py@@Wild._hashable_content": "def _hashable_content(self):\n    return super(Wild, self)._hashable_content() + (self.exclude, self.properties)",
    ".sympy.core.basic.py@@Basic.match": "def match(self, pattern, old=False):\n    pattern = sympify(pattern)\n    return pattern.matches(self, old=old)",
    ".sympy.core.mul.py@@Mul.matches": "def matches(self, expr, repl_dict={}, old=False):\n    expr = sympify(expr)\n    if self.is_commutative and expr.is_commutative:\n        return AssocOp._matches_commutative(self, expr, repl_dict, old)\n    elif self.is_commutative is not expr.is_commutative:\n        return None\n    c1, nc1 = self.args_cnc()\n    c2, nc2 = expr.args_cnc()\n    c1, c2 = [c or [1] for c in [c1, c2]]\n    comm_mul_self = Mul(*c1)\n    comm_mul_expr = Mul(*c2)\n    repl_dict = comm_mul_self.matches(comm_mul_expr, repl_dict, old)\n    if repl_dict is None and c1 != c2:\n        return None\n    nc1 = Mul._matches_expand_pows(nc1)\n    nc2 = Mul._matches_expand_pows(nc2)\n    repl_dict = Mul._matches_noncomm(nc1, nc2, repl_dict)\n    return repl_dict or None",
    ".sympy.core.operations.py@@AssocOp._matches_commutative": "def _matches_commutative(self, expr, repl_dict={}, old=False):\n    from .expr import Add, Expr\n    from sympy import Mul\n    if isinstance(self, Expr) and (not isinstance(expr, Expr)):\n        return None\n    if self == expr:\n        return repl_dict\n    d = self._matches_simple(expr, repl_dict)\n    if d is not None:\n        return d\n    from .function import WildFunction\n    from .symbol import Wild\n    wild_part, exact_part = sift(self.args, lambda p: p.has(Wild, WildFunction) and (not expr.has(p)), binary=True)\n    if not exact_part:\n        wild_part = list(ordered(wild_part))\n    else:\n        exact = self._new_rawargs(*exact_part)\n        free = expr.free_symbols\n        if free and exact.free_symbols - free:\n            return None\n        newexpr = self._combine_inverse(expr, exact)\n        if not old and (expr.is_Add or expr.is_Mul):\n            if newexpr.count_ops() > expr.count_ops():\n                return None\n        newpattern = self._new_rawargs(*wild_part)\n        return newpattern.matches(newexpr, repl_dict)\n    i = 0\n    saw = set()\n    while expr not in saw:\n        saw.add(expr)\n        expr_list = (self.identity,) + tuple(ordered(self.make_args(expr)))\n        for last_op in reversed(expr_list):\n            for w in reversed(wild_part):\n                d1 = w.matches(last_op, repl_dict)\n                if d1 is not None:\n                    d2 = self.xreplace(d1).matches(expr, d1)\n                    if d2 is not None:\n                        return d2\n        if i == 0:\n            if self.is_Mul:\n                if expr.is_Pow and expr.exp.is_Integer:\n                    if expr.exp > 0:\n                        expr = Mul(*[expr.base, expr.base ** (expr.exp - 1)], evaluate=False)\n                    else:\n                        expr = Mul(*[1 / expr.base, expr.base ** (expr.exp + 1)], evaluate=False)\n                    i += 1\n                    continue\n            elif self.is_Add:\n                c, e = expr.as_coeff_Mul()\n                if abs(c) > 1:\n                    if c > 0:\n                        expr = Add(*[e, (c - 1) * e], evaluate=False)\n                    else:\n                        expr = Add(*[-e, (c + 1) * e], evaluate=False)\n                    i += 1\n                    continue\n                from sympy.simplify.radsimp import collect\n                was = expr\n                did = set()\n                for w in reversed(wild_part):\n                    c, w = w.as_coeff_mul(Wild)\n                    free = c.free_symbols - did\n                    if free:\n                        did.update(free)\n                        expr = collect(expr, free)\n                if expr != was:\n                    i += 0\n                    continue\n            break\n    return",
    ".sympy.core.mul.py@@Mul._matches_simple": "def _matches_simple(self, expr, repl_dict):\n    coeff, terms = self.as_coeff_Mul()\n    terms = Mul.make_args(terms)\n    if len(terms) == 1:\n        newexpr = self.__class__._combine_inverse(expr, coeff)\n        return terms[0].matches(newexpr, repl_dict)\n    return",
    ".sympy.core.compatibility.py@@_nodes": "def _nodes(e):\n    from .basic import Basic\n    if isinstance(e, Basic):\n        return e.count(Basic)\n    elif iterable(e):\n        return 1 + sum((_nodes(ei) for ei in e))\n    elif isinstance(e, dict):\n        return 1 + sum((_nodes(k) + _nodes(v) for k, v in e.items()))\n    else:\n        return 1",
    ".sympy.core.basic.py@@Basic.count": "def count(self, query):\n    query = _make_find_query(query)\n    return sum((bool(query(sub)) for sub in preorder_traversal(self)))",
    ".sympy.core.basic.py@@_make_find_query": "def _make_find_query(query):\n    try:\n        query = sympify(query)\n    except SympifyError:\n        pass\n    if isinstance(query, type):\n        return lambda expr: isinstance(expr, query)\n    elif isinstance(query, Basic):\n        return lambda expr: expr.match(query) is not None\n    return query",
    ".sympy.core.power.py@@Pow.matches": "def matches(self, expr, repl_dict={}, old=False):\n    expr = _sympify(expr)\n    if expr is S.One:\n        d = repl_dict.copy()\n        d = self.exp.matches(S.Zero, d)\n        if d is not None:\n            return d\n    if not isinstance(expr, Expr):\n        return None\n    b, e = expr.as_base_exp()\n    sb, se = self.as_base_exp()\n    if sb.is_Symbol and se.is_Integer and expr:\n        if e.is_rational:\n            return sb.matches(b ** (e / se), repl_dict)\n        return sb.matches(expr ** (1 / se), repl_dict)\n    d = repl_dict.copy()\n    d = self.base.matches(b, d)\n    if d is None:\n        return None\n    d = self.exp.xreplace(d).matches(e, d)\n    if d is None:\n        return Expr.matches(self, expr, repl_dict)\n    return d",
    ".sympy.core.symbol.py@@Wild.matches": "def matches(self, expr, repl_dict={}, old=False):\n    if any((expr.has(x) for x in self.exclude)):\n        return None\n    if any((not f(expr) for f in self.properties)):\n        return None\n    repl_dict = repl_dict.copy()\n    repl_dict[self] = expr\n    return repl_dict",
    ".sympy.core.basic.py@@Atom.xreplace": "def xreplace(self, rule, hack2=False):\n    return rule.get(self, self)",
    ".sympy.core.mul.py@@Mul._combine_inverse": "def _combine_inverse(lhs, rhs):\n    from .symbol import Dummy\n    if lhs == rhs:\n        return S.One\n\n    def check(l, r):\n        if l.is_Float and r.is_comparable:\n            return l.__add__(0) == r.evalf().__add__(0)\n        return False\n    if check(lhs, rhs) or check(rhs, lhs):\n        return S.One\n    if any((i.is_Pow or i.is_Mul for i in (lhs, rhs))):\n        d = Dummy('I')\n        _i = {S.ImaginaryUnit: d}\n        i_ = {d: S.ImaginaryUnit}\n        a = lhs.xreplace(_i).as_powers_dict()\n        b = rhs.xreplace(_i).as_powers_dict()\n        blen = len(b)\n        for bi in tuple(b.keys()):\n            if bi in a:\n                a[bi] -= b.pop(bi)\n                if not a[bi]:\n                    a.pop(bi)\n        if len(b) != blen:\n            lhs = Mul(*[k ** v for k, v in a.items()]).xreplace(i_)\n            rhs = Mul(*[k ** v for k, v in b.items()]).xreplace(i_)\n    return lhs / rhs",
    ".sympy.core.mul.py@@Mul.check": "def check(l, r):\n    if l.is_Float and r.is_comparable:\n        return l.__add__(0) == r.evalf().__add__(0)\n    return False",
    ".sympy.core.mul.py@@Mul.as_powers_dict": "def as_powers_dict(self):\n    d = defaultdict(int)\n    for term in self.args:\n        for b, e in term.as_powers_dict().items():\n            d[b] += e\n    return d",
    ".sympy.core.expr.py@@Expr.as_powers_dict": "def as_powers_dict(self):\n    d = defaultdict(int)\n    d.update(dict([self.as_base_exp()]))\n    return d",
    ".sympy.core.expr.py@@Expr.count_ops": "def count_ops(self, visual=None):\n    from .function import count_ops\n    return count_ops(self, visual)",
    ".sympy.core.function.py@@count_ops": "def count_ops(expr, visual=False):\n    from sympy import Integral, Symbol\n    from sympy.core.relational import Relational\n    from sympy.simplify.radsimp import fraction\n    from sympy.logic.boolalg import BooleanFunction\n    from sympy.utilities.misc import func_name\n    expr = sympify(expr)\n    if isinstance(expr, Expr) and (not expr.is_Relational):\n        ops = []\n        args = [expr]\n        NEG = Symbol('NEG')\n        DIV = Symbol('DIV')\n        SUB = Symbol('SUB')\n        ADD = Symbol('ADD')\n        while args:\n            a = args.pop()\n            if a.is_Rational:\n                if a is not S.One:\n                    if a.p < 0:\n                        ops.append(NEG)\n                    if a.q != 1:\n                        ops.append(DIV)\n                    continue\n            elif a.is_Mul or a.is_MatMul:\n                if _coeff_isneg(a):\n                    ops.append(NEG)\n                    if a.args[0] is S.NegativeOne:\n                        a = a.as_two_terms()[1]\n                    else:\n                        a = -a\n                n, d = fraction(a)\n                if n.is_Integer:\n                    ops.append(DIV)\n                    if n < 0:\n                        ops.append(NEG)\n                    args.append(d)\n                    continue\n                elif d is not S.One:\n                    if not d.is_Integer:\n                        args.append(d)\n                    ops.append(DIV)\n                    args.append(n)\n                    continue\n            elif a.is_Add or a.is_MatAdd:\n                aargs = list(a.args)\n                negs = 0\n                for i, ai in enumerate(aargs):\n                    if _coeff_isneg(ai):\n                        negs += 1\n                        args.append(-ai)\n                        if i > 0:\n                            ops.append(SUB)\n                    else:\n                        args.append(ai)\n                        if i > 0:\n                            ops.append(ADD)\n                if negs == len(aargs):\n                    ops.append(NEG)\n                elif _coeff_isneg(aargs[0]):\n                    ops.append(SUB - ADD)\n                continue\n            if a.is_Pow and a.exp is S.NegativeOne:\n                ops.append(DIV)\n                args.append(a.base)\n                continue\n            if a.is_Mul or a.is_Pow or a.is_Function or isinstance(a, Derivative) or isinstance(a, Integral):\n                o = Symbol(a.func.__name__.upper())\n                if a.is_Mul or isinstance(a, LatticeOp):\n                    ops.append(o * (len(a.args) - 1))\n                else:\n                    ops.append(o)\n            if not a.is_Symbol:\n                args.extend(a.args)\n    elif isinstance(expr, Dict):\n        ops = [count_ops(k, visual=visual) + count_ops(v, visual=visual) for k, v in expr.items()]\n    elif iterable(expr):\n        ops = [count_ops(i, visual=visual) for i in expr]\n    elif isinstance(expr, (Relational, BooleanFunction)):\n        ops = []\n        for arg in expr.args:\n            ops.append(count_ops(arg, visual=True))\n        o = Symbol(func_name(expr, short=True).upper())\n        ops.append(o)\n    elif not isinstance(expr, Basic):\n        ops = []\n    elif not isinstance(expr, Basic):\n        raise TypeError('Invalid type of expr')\n    else:\n        ops = []\n        args = [expr]\n        while args:\n            a = args.pop()\n            if a.args:\n                o = Symbol(a.func.__name__.upper())\n                if a.is_Boolean:\n                    ops.append(o * (len(a.args) - 1))\n                else:\n                    ops.append(o)\n                args.extend(a.args)\n    if not ops:\n        if visual:\n            return S.Zero\n        return 0\n    ops = Add(*ops)\n    if visual:\n        return ops\n    if ops.is_Number:\n        return int(ops)\n    return sum((int((a.args or [1])[0]) for a in Add.make_args(ops)))",
    ".sympy.solvers.solveset.py@@_solve_as_rational": "def _solve_as_rational(f, symbol, domain):\n    f = together(f, deep=True)\n    g, h = fraction(f)\n    if not h.has(symbol):\n        try:\n            return _solve_as_poly(g, symbol, domain)\n        except NotImplementedError:\n            return ConditionSet(symbol, Eq(f, 0), domain)\n        except CoercionFailed:\n            return S.EmptySet\n    else:\n        valid_solns = _solveset(g, symbol, domain)\n        invalid_solns = _solveset(h, symbol, domain)\n        return valid_solns - invalid_solns",
    ".sympy.core.numbers.py@@Integer._eval_power": "def _eval_power(self, expt):\n    from sympy.ntheory.factor_ import perfect_power\n    if expt is S.Infinity:\n        if self.p > S.One:\n            return S.Infinity\n        return S.Infinity + S.ImaginaryUnit * S.Infinity\n    if expt is S.NegativeInfinity:\n        return Rational(1, self) ** S.Infinity\n    if not isinstance(expt, Number):\n        if self.is_negative and expt.is_even:\n            return (-self) ** expt\n    if isinstance(expt, Float):\n        return super(Integer, self)._eval_power(expt)\n    if not isinstance(expt, Rational):\n        return\n    if expt is S.Half and self.is_negative:\n        return S.ImaginaryUnit * Pow(-self, expt)\n    if expt.is_negative:\n        ne = -expt\n        if self.is_negative:\n            return S.NegativeOne ** expt * Rational(1, -self) ** ne\n        else:\n            return Rational(1, self.p) ** ne\n    x, xexact = integer_nthroot(abs(self.p), expt.q)\n    if xexact:\n        result = Integer(x ** abs(expt.p))\n        if self.is_negative:\n            result *= S.NegativeOne ** expt\n        return result\n    b_pos = int(abs(self.p))\n    p = perfect_power(b_pos)\n    if p is not False:\n        dict = {p[0]: p[1]}\n    else:\n        dict = Integer(b_pos).factors(limit=2 ** 15)\n    out_int = 1\n    out_rad = 1\n    sqr_int = 1\n    sqr_gcd = 0\n    sqr_dict = {}\n    for prime, exponent in dict.items():\n        exponent *= expt.p\n        div_e, div_m = divmod(exponent, expt.q)\n        if div_e > 0:\n            out_int *= prime ** div_e\n        if div_m > 0:\n            g = igcd(div_m, expt.q)\n            if g != 1:\n                out_rad *= Pow(prime, Rational(div_m // g, expt.q // g))\n            else:\n                sqr_dict[prime] = div_m\n    for p, ex in sqr_dict.items():\n        if sqr_gcd == 0:\n            sqr_gcd = ex\n        else:\n            sqr_gcd = igcd(sqr_gcd, ex)\n            if sqr_gcd == 1:\n                break\n    for k, v in sqr_dict.items():\n        sqr_int *= k ** (v // sqr_gcd)\n    if sqr_int == b_pos and out_int == 1 and (out_rad == 1):\n        result = None\n    else:\n        result = out_int * out_rad * Pow(sqr_int, Rational(sqr_gcd, expt.q))\n        if self.is_negative:\n            result *= Pow(S.NegativeOne, expt)\n    return result",
    ".sympy.solvers.solveset.py@@_solve_as_poly": "def _solve_as_poly(f, symbol, domain=S.Complexes):\n    result = None\n    if f.is_polynomial(symbol):\n        solns = roots(f, symbol, cubics=True, quartics=True, quintics=True, domain='EX')\n        num_roots = sum(solns.values())\n        if degree(f, symbol) <= num_roots:\n            result = FiniteSet(*solns.keys())\n        else:\n            poly = Poly(f, symbol)\n            solns = poly.all_roots()\n            if poly.degree() <= len(solns):\n                result = FiniteSet(*solns)\n            else:\n                result = ConditionSet(symbol, Eq(f, 0), domain)\n    else:\n        poly = Poly(f)\n        if poly is None:\n            result = ConditionSet(symbol, Eq(f, 0), domain)\n        gens = [g for g in poly.gens if g.has(symbol)]\n        if len(gens) == 1:\n            poly = Poly(poly, gens[0])\n            gen = poly.gen\n            deg = poly.degree()\n            poly = Poly(poly.as_expr(), poly.gen, composite=True)\n            poly_solns = FiniteSet(*roots(poly, cubics=True, quartics=True, quintics=True).keys())\n            if len(poly_solns) < deg:\n                result = ConditionSet(symbol, Eq(f, 0), domain)\n            if gen != symbol:\n                y = Dummy('y')\n                inverter = invert_real if domain.is_subset(S.Reals) else invert_complex\n                lhs, rhs_s = inverter(gen, y, symbol)\n                if lhs == symbol:\n                    result = Union(*[rhs_s.subs(y, s) for s in poly_solns])\n                else:\n                    result = ConditionSet(symbol, Eq(f, 0), domain)\n        else:\n            result = ConditionSet(symbol, Eq(f, 0), domain)\n    if result is not None:\n        if isinstance(result, FiniteSet):\n            if all([s.atoms(Symbol, AppliedUndef) == set() and (not isinstance(s, RootOf)) for s in result]):\n                s = Dummy('s')\n                result = imageset(Lambda(s, expand_complex(s)), result)\n        if isinstance(result, FiniteSet):\n            result = result.intersection(domain)\n        return result\n    else:\n        return ConditionSet(symbol, Eq(f, 0), domain)",
    ".sympy.polys.polyroots.py@@roots": "def roots(f, *gens, **flags):\n    from sympy.polys.polytools import to_rational_coeffs\n    flags = dict(flags)\n    auto = flags.pop('auto', True)\n    cubics = flags.pop('cubics', True)\n    trig = flags.pop('trig', False)\n    quartics = flags.pop('quartics', True)\n    quintics = flags.pop('quintics', False)\n    multiple = flags.pop('multiple', False)\n    filter = flags.pop('filter', None)\n    predicate = flags.pop('predicate', None)\n    if isinstance(f, list):\n        if gens:\n            raise ValueError('redundant generators given')\n        x = Dummy('x')\n        poly, i = ({}, len(f) - 1)\n        for coeff in f:\n            poly[i], i = (sympify(coeff), i - 1)\n        f = Poly(poly, x, field=True)\n    else:\n        try:\n            f = Poly(f, *gens, **flags)\n            if f.length == 2 and f.degree() != 1:\n                n = f.degree()\n                npow_bases = []\n                others = []\n                expr = f.as_expr()\n                con = expr.as_independent(*gens)[0]\n                for p in Mul.make_args(con):\n                    if p.is_Pow and (not p.exp % n):\n                        npow_bases.append(p.base ** (p.exp / n))\n                    else:\n                        others.append(p)\n                    if npow_bases:\n                        b = Mul(*npow_bases)\n                        B = Dummy()\n                        d = roots(Poly(expr - con + B ** n * Mul(*others), *gens, **flags), *gens, **flags)\n                        rv = {}\n                        for k, v in d.items():\n                            rv[k.subs(B, b)] = v\n                        return rv\n        except GeneratorsNeeded:\n            if multiple:\n                return []\n            else:\n                return {}\n        if f.is_multivariate:\n            raise PolynomialError('multivariate polynomials are not supported')\n\n    def _update_dict(result, currentroot, k):\n        if currentroot in result:\n            result[currentroot] += k\n        else:\n            result[currentroot] = k\n\n    def _try_decompose(f):\n        factors, roots = (f.decompose(), [])\n        for currentroot in _try_heuristics(factors[0]):\n            roots.append(currentroot)\n        for currentfactor in factors[1:]:\n            previous, roots = (list(roots), [])\n            for currentroot in previous:\n                g = currentfactor - Poly(currentroot, f.gen)\n                for currentroot in _try_heuristics(g):\n                    roots.append(currentroot)\n        return roots\n\n    def _try_heuristics(f):\n        if f.is_ground:\n            return []\n        if f.is_monomial:\n            return [S.Zero] * f.degree()\n        if f.length() == 2:\n            if f.degree() == 1:\n                return list(map(cancel, roots_linear(f)))\n            else:\n                return roots_binomial(f)\n        result = []\n        for i in [-1, 1]:\n            if not f.eval(i):\n                f = f.quo(Poly(f.gen - i, f.gen))\n                result.append(i)\n                break\n        n = f.degree()\n        if n == 1:\n            result += list(map(cancel, roots_linear(f)))\n        elif n == 2:\n            result += list(map(cancel, roots_quadratic(f)))\n        elif f.is_cyclotomic:\n            result += roots_cyclotomic(f)\n        elif n == 3 and cubics:\n            result += roots_cubic(f, trig=trig)\n        elif n == 4 and quartics:\n            result += roots_quartic(f)\n        elif n == 5 and quintics:\n            result += roots_quintic(f)\n        return result\n    (k,), f = f.terms_gcd()\n    if not k:\n        zeros = {}\n    else:\n        zeros = {S.Zero: k}\n    coeff, f = preprocess_roots(f)\n    if auto and f.get_domain().is_Ring:\n        f = f.to_field()\n    rescale_x = None\n    translate_x = None\n    result = {}\n    if not f.is_ground:\n        dom = f.get_domain()\n        if not dom.is_Exact and dom.is_Numerical:\n            for r in f.nroots():\n                _update_dict(result, r, 1)\n        elif f.degree() == 1:\n            result[roots_linear(f)[0]] = 1\n        elif f.length() == 2:\n            roots_fun = roots_quadratic if f.degree() == 2 else roots_binomial\n            for r in roots_fun(f):\n                _update_dict(result, r, 1)\n        else:\n            _, factors = Poly(f.as_expr()).factor_list()\n            if len(factors) == 1 and f.degree() == 2:\n                for r in roots_quadratic(f):\n                    _update_dict(result, r, 1)\n            elif len(factors) == 1 and factors[0][1] == 1:\n                if f.get_domain().is_EX:\n                    res = to_rational_coeffs(f)\n                    if res:\n                        if res[0] is None:\n                            translate_x, f = res[2:]\n                        else:\n                            rescale_x, f = (res[1], res[-1])\n                        result = roots(f)\n                        if not result:\n                            for currentroot in _try_decompose(f):\n                                _update_dict(result, currentroot, 1)\n                    else:\n                        for r in _try_heuristics(f):\n                            _update_dict(result, r, 1)\n                else:\n                    for currentroot in _try_decompose(f):\n                        _update_dict(result, currentroot, 1)\n            else:\n                for currentfactor, k in factors:\n                    for r in _try_heuristics(Poly(currentfactor, f.gen, field=True)):\n                        _update_dict(result, r, k)\n    if coeff is not S.One:\n        _result, result = (result, {})\n        for currentroot, k in _result.items():\n            result[coeff * currentroot] = k\n    if filter not in [None, 'C']:\n        handlers = {'Z': lambda r: r.is_Integer, 'Q': lambda r: r.is_Rational, 'R': lambda r: all((a.is_real for a in r.as_numer_denom())), 'I': lambda r: r.is_imaginary}\n        try:\n            query = handlers[filter]\n        except KeyError:\n            raise ValueError('Invalid filter: %s' % filter)\n        for zero in dict(result).keys():\n            if not query(zero):\n                del result[zero]\n    if predicate is not None:\n        for zero in dict(result).keys():\n            if not predicate(zero):\n                del result[zero]\n    if rescale_x:\n        result1 = {}\n        for k, v in result.items():\n            result1[k * rescale_x] = v\n        result = result1\n    if translate_x:\n        result1 = {}\n        for k, v in result.items():\n            result1[k + translate_x] = v\n        result = result1\n    result.update(zeros)\n    if not multiple:\n        return result\n    else:\n        zeros = []\n        for zero in ordered(result):\n            zeros.extend([zero] * result[zero])\n        return zeros",
    ".sympy.polys.polyoptions.py@@Domain.preprocess": "def preprocess(cls, domain):\n    if isinstance(domain, sympy.polys.domains.Domain):\n        return domain\n    elif hasattr(domain, 'to_domain'):\n        return domain.to_domain()\n    elif isinstance(domain, string_types):\n        if domain in ['Z', 'ZZ']:\n            return sympy.polys.domains.ZZ\n        if domain in ['Q', 'QQ']:\n            return sympy.polys.domains.QQ\n        if domain == 'EX':\n            return sympy.polys.domains.EX\n        r = cls._re_realfield.match(domain)\n        if r is not None:\n            _, _, prec = r.groups()\n            if prec is None:\n                return sympy.polys.domains.RR\n            else:\n                return sympy.polys.domains.RealField(int(prec))\n        r = cls._re_complexfield.match(domain)\n        if r is not None:\n            _, _, prec = r.groups()\n            if prec is None:\n                return sympy.polys.domains.CC\n            else:\n                return sympy.polys.domains.ComplexField(int(prec))\n        r = cls._re_finitefield.match(domain)\n        if r is not None:\n            return sympy.polys.domains.FF(int(r.groups()[1]))\n        r = cls._re_polynomial.match(domain)\n        if r is not None:\n            ground, gens = r.groups()\n            gens = list(map(sympify, gens.split(',')))\n            if ground in ['Z', 'ZZ']:\n                return sympy.polys.domains.ZZ.poly_ring(*gens)\n            elif ground in ['Q', 'QQ']:\n                return sympy.polys.domains.QQ.poly_ring(*gens)\n            elif ground in ['R', 'RR']:\n                return sympy.polys.domains.RR.poly_ring(*gens)\n            else:\n                return sympy.polys.domains.CC.poly_ring(*gens)\n        r = cls._re_fraction.match(domain)\n        if r is not None:\n            ground, gens = r.groups()\n            gens = list(map(sympify, gens.split(',')))\n            if ground in ['Z', 'ZZ']:\n                return sympy.polys.domains.ZZ.frac_field(*gens)\n            else:\n                return sympy.polys.domains.QQ.frac_field(*gens)\n        r = cls._re_algebraic.match(domain)\n        if r is not None:\n            gens = list(map(sympify, r.groups()[1].split(',')))\n            return sympy.polys.domains.QQ.algebraic_field(*gens)\n    raise OptionError('expected a valid domain specification, got %s' % domain)",
    ".sympy.polys.polyoptions.py@@Gens.preprocess": "def preprocess(cls, gens):\n    if isinstance(gens, Basic):\n        gens = (gens,)\n    elif len(gens) == 1 and hasattr(gens[0], '__iter__'):\n        gens = gens[0]\n    if gens == (None,):\n        gens = ()\n    elif has_dups(gens):\n        raise GeneratorsError('duplicated generators: %s' % str(gens))\n    elif any((gen.is_commutative is False for gen in gens)):\n        raise GeneratorsError('non-commutative generators: %s' % str(gens))\n    return tuple(gens)",
    ".sympy.utilities.iterables.py@@has_dups": "def has_dups(seq):\n    from sympy.core.containers import Dict\n    from sympy.sets.sets import Set\n    if isinstance(seq, (dict, set, Dict, Set)):\n        return False\n    uniq = set()\n    return any((True for s in seq if s in uniq or uniq.add(s)))",
    ".sympy.polys.polyutils.py@@_dict_from_expr_if_gens": "def _dict_from_expr_if_gens(expr, opt):\n    (poly,), gens = _parallel_dict_from_expr_if_gens((expr,), opt)\n    return (poly, gens)",
    ".sympy.polys.polyutils.py@@_parallel_dict_from_expr_if_gens": "def _parallel_dict_from_expr_if_gens(exprs, opt):\n    k, indices = (len(opt.gens), {})\n    for i, g in enumerate(opt.gens):\n        indices[g] = i\n    polys = []\n    for expr in exprs:\n        poly = {}\n        if expr.is_Equality:\n            expr = expr.lhs - expr.rhs\n        for term in Add.make_args(expr):\n            coeff, monom = ([], [0] * k)\n            for factor in Mul.make_args(term):\n                if not _not_a_coeff(factor) and factor.is_Number:\n                    coeff.append(factor)\n                else:\n                    try:\n                        if opt.series is False:\n                            base, exp = decompose_power(factor)\n                            if exp < 0:\n                                exp, base = (-exp, Pow(base, -S.One))\n                        else:\n                            base, exp = decompose_power_rat(factor)\n                        monom[indices[base]] = exp\n                    except KeyError:\n                        if not factor.free_symbols.intersection(opt.gens):\n                            coeff.append(factor)\n                        else:\n                            raise PolynomialError('%s contains an element of the set of generators.' % factor)\n            monom = tuple(monom)\n            if monom in poly:\n                poly[monom] += Mul(*coeff)\n            else:\n                poly[monom] = Mul(*coeff)\n        polys.append(poly)\n    return (polys, opt.gens)",
    ".sympy.polys.domains.expressiondomain.py@@ExpressionDomain.from_sympy": "def from_sympy(self, a):\n    return self.dtype(a)",
    ".sympy.polys.domains.expressiondomain.py@@ExpressionDomain.Expression.__init__": "def __init__(self):\n    pass",
    ".sympy.polys.domains.expressiondomain.py@@ExpressionDomain.Expression.__nonzero__": "def __nonzero__(f):\n    return f.ex != 0",
    ".sympy.polys.polytools.py@@Poly.is_multivariate": "def is_multivariate(f):\n    return len(f.gens) != 1",
    ".sympy.polys.polytools.py@@Poly.terms_gcd": "def terms_gcd(f):\n    if hasattr(f.rep, 'terms_gcd'):\n        J, result = f.rep.terms_gcd()\n    else:\n        raise OperationNotSupported(f, 'terms_gcd')\n    return (J, f.per(result))",
    ".sympy.polys.polyclasses.py@@DMP.terms_gcd": "def terms_gcd(f):\n    J, F = dmp_terms_gcd(f.rep, f.lev, f.dom)\n    return (J, f.per(F))",
    ".sympy.polys.polyroots.py@@preprocess_roots": "def preprocess_roots(poly):\n    coeff = S.One\n    poly_func = poly.func\n    try:\n        _, poly = poly.clear_denoms(convert=True)\n    except DomainError:\n        return (coeff, poly)\n    poly = poly.primitive()[1]\n    poly = poly.retract()\n    if poly.get_domain().is_Poly and all((c.is_term for c in poly.rep.coeffs())):\n        poly = poly.inject()\n        strips = list(zip(*poly.monoms()))\n        gens = list(poly.gens[1:])\n        base, strips = (strips[0], strips[1:])\n        for gen, strip in zip(list(gens), strips):\n            reverse = False\n            if strip[0] < strip[-1]:\n                strip = reversed(strip)\n                reverse = True\n            ratio = None\n            for a, b in zip(base, strip):\n                if not a and (not b):\n                    continue\n                elif not a or not b:\n                    break\n                elif b % a != 0:\n                    break\n                else:\n                    _ratio = b // a\n                    if ratio is None:\n                        ratio = _ratio\n                    elif ratio != _ratio:\n                        break\n            else:\n                if reverse:\n                    ratio = -ratio\n                poly = poly.eval(gen, 1)\n                coeff *= gen ** (-ratio)\n                gens.remove(gen)\n        if gens:\n            poly = poly.eject(*gens)\n    if poly.is_univariate and poly.get_domain().is_ZZ:\n        basis = _integer_basis(poly)\n        if basis is not None:\n            n = poly.degree()\n\n            def func(k, coeff):\n                return coeff // basis ** (n - k[0])\n            poly = poly.termwise(func)\n            coeff *= basis\n    if not isinstance(poly, poly_func):\n        poly = poly_func(poly)\n    return (coeff, poly)",
    ".sympy.polys.polytools.py@@Poly.clear_denoms": "def clear_denoms(self, convert=False):\n    f = self\n    if not f.rep.dom.is_Field:\n        return (S.One, f)\n    dom = f.get_domain()\n    if dom.has_assoc_Ring:\n        dom = f.rep.dom.get_ring()\n    if hasattr(f.rep, 'clear_denoms'):\n        coeff, result = f.rep.clear_denoms()\n    else:\n        raise OperationNotSupported(f, 'clear_denoms')\n    coeff, f = (dom.to_sympy(coeff), f.per(result))\n    if not convert or not dom.has_assoc_Ring:\n        return (coeff, f)\n    else:\n        return (coeff, f.to_ring())",
    ".sympy.polys.polytools.py@@Poly.get_domain": "def get_domain(f):\n    return f.rep.dom",
    ".sympy.polys.polyclasses.py@@DMP.clear_denoms": "def clear_denoms(f):\n    coeff, F = dmp_clear_denoms(f.rep, f.lev, f.dom)\n    return (coeff, f.per(F))",
    ".sympy.polys.densetools.py@@dmp_clear_denoms": "def dmp_clear_denoms(f, u, K0, K1=None, convert=False):\n    if not u:\n        return dup_clear_denoms(f, K0, K1, convert=convert)\n    if K1 is None:\n        if K0.has_assoc_Ring:\n            K1 = K0.get_ring()\n        else:\n            K1 = K0\n    common = _rec_clear_denoms(f, u, K0, K1)\n    if not K1.is_one(common):\n        f = dmp_mul_ground(f, common, u, K0)\n    if not convert:\n        return (common, f)\n    else:\n        return (common, dmp_convert(f, u, K0, K1))",
    ".sympy.polys.densetools.py@@dup_clear_denoms": "def dup_clear_denoms(f, K0, K1=None, convert=False):\n    if K1 is None:\n        if K0.has_assoc_Ring:\n            K1 = K0.get_ring()\n        else:\n            K1 = K0\n    common = K1.one\n    for c in f:\n        common = K1.lcm(common, K0.denom(c))\n    if not K1.is_one(common):\n        f = dup_mul_ground(f, common, K0)\n    if not convert:\n        return (common, f)\n    else:\n        return (common, dup_convert(f, K0, K1))",
    ".sympy.polys.domains.expressiondomain.py@@ExpressionDomain.denom": "def denom(self, a):\n    return a.denom()",
    ".sympy.polys.domains.expressiondomain.py@@ExpressionDomain.Expression.denom": "def denom(self, a):\n    return a.denom()",
    ".sympy.polys.domains.expressiondomain.py@@ExpressionDomain.lcm": "def lcm(self, a, b):\n    return a.lcm(b)",
    ".sympy.polys.domains.expressiondomain.py@@ExpressionDomain.Expression.lcm": "def lcm(self, a, b):\n    return a.lcm(b)",
    ".sympy.polys.polytools.py@@lcm": "def lcm(f, g=None, *gens, **args):\n    if hasattr(f, '__iter__'):\n        if g is not None:\n            gens = (g,) + gens\n        return lcm_list(f, *gens, **args)\n    elif g is None:\n        raise TypeError('lcm() takes 2 arguments or a sequence of arguments')\n    options.allowed_flags(args, ['polys'])\n    try:\n        (F, G), opt = parallel_poly_from_expr((f, g), *gens, **args)\n        a, b = map(sympify, (f, g))\n        if a.is_algebraic and a.is_irrational and b.is_algebraic and b.is_irrational:\n            frc = (a / b).ratsimp()\n            if frc.is_rational:\n                return a * frc.as_numer_denom()[1]\n    except PolificationFailed as exc:\n        domain, (a, b) = construct_domain(exc.exprs)\n        try:\n            return domain.to_sympy(domain.lcm(a, b))\n        except NotImplementedError:\n            raise ComputationFailed('lcm', 2, exc)\n    result = F.lcm(G)\n    if not opt.polys:\n        return result.as_expr()\n    else:\n        return result",
    ".sympy.polys.polytools.py@@parallel_poly_from_expr": "def parallel_poly_from_expr(exprs, *gens, **args):\n    opt = options.build_options(gens, args)\n    return _parallel_poly_from_expr(exprs, opt)",
    ".sympy.polys.polytools.py@@_parallel_poly_from_expr": "def _parallel_poly_from_expr(exprs, opt):\n    from sympy.functions.elementary.piecewise import Piecewise\n    if len(exprs) == 2:\n        f, g = exprs\n        if isinstance(f, Poly) and isinstance(g, Poly):\n            f = f.__class__._from_poly(f, opt)\n            g = g.__class__._from_poly(g, opt)\n            f, g = f.unify(g)\n            opt.gens = f.gens\n            opt.domain = f.domain\n            if opt.polys is None:\n                opt.polys = True\n            return ([f, g], opt)\n    origs, exprs = (list(exprs), [])\n    _exprs, _polys = ([], [])\n    failed = False\n    for i, expr in enumerate(origs):\n        expr = sympify(expr)\n        if isinstance(expr, Basic):\n            if expr.is_Poly:\n                _polys.append(i)\n            else:\n                _exprs.append(i)\n                if opt.expand:\n                    expr = expr.expand()\n        else:\n            failed = True\n        exprs.append(expr)\n    if failed:\n        raise PolificationFailed(opt, origs, exprs, True)\n    if _polys:\n        for i in _polys:\n            exprs[i] = exprs[i].as_expr()\n    reps, opt = _parallel_dict_from_expr(exprs, opt)\n    if not opt.gens:\n        raise PolificationFailed(opt, origs, exprs, True)\n    for k in opt.gens:\n        if isinstance(k, Piecewise):\n            raise PolynomialError('Piecewise generators do not make sense')\n    coeffs_list, lengths = ([], [])\n    all_monoms = []\n    all_coeffs = []\n    for rep in reps:\n        monoms, coeffs = list(zip(*list(rep.items())))\n        coeffs_list.extend(coeffs)\n        all_monoms.append(monoms)\n        lengths.append(len(coeffs))\n    domain = opt.domain\n    if domain is None:\n        opt.domain, coeffs_list = construct_domain(coeffs_list, opt=opt)\n    else:\n        coeffs_list = list(map(domain.from_sympy, coeffs_list))\n    for k in lengths:\n        all_coeffs.append(coeffs_list[:k])\n        coeffs_list = coeffs_list[k:]\n    polys = []\n    for monoms, coeffs in zip(all_monoms, all_coeffs):\n        rep = dict(list(zip(monoms, coeffs)))\n        poly = Poly._from_dict(rep, opt)\n        polys.append(poly)\n    if opt.polys is None:\n        opt.polys = bool(_polys)\n    return (polys, opt)",
    ".sympy.polys.polyutils.py@@_parallel_dict_from_expr": "def _parallel_dict_from_expr(exprs, opt):\n    if opt.expand is not False:\n        exprs = [expr.expand() for expr in exprs]\n    if any((expr.is_commutative is False for expr in exprs)):\n        raise PolynomialError('non-commutative expressions are not supported')\n    if opt.gens:\n        reps, gens = _parallel_dict_from_expr_if_gens(exprs, opt)\n    else:\n        reps, gens = _parallel_dict_from_expr_no_gens(exprs, opt)\n    return (reps, opt.clone({'gens': gens}))",
    ".sympy.polys.polyerrors.py@@PolificationFailed.__init__": "def __init__(self, opt, origs, exprs, seq=False):\n    if not seq:\n        self.orig = origs\n        self.expr = exprs\n        self.origs = [origs]\n        self.exprs = [exprs]\n    else:\n        self.origs = origs\n        self.exprs = exprs\n    self.opt = opt\n    self.seq = seq",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.lcm": "def lcm(self, a, b):\n    return python_lcm(a, b)",
    ".sympy.polys.domains.expressiondomain.py@@ExpressionDomain.Expression.__eq__": "def __eq__(f, g):\n    return f.ex == f.__class__(g).ex",
    ".sympy.polys.domains.expressiondomain.py@@ExpressionDomain.to_sympy": "def to_sympy(self, a):\n    return a.as_expr()",
    ".sympy.polys.domains.expressiondomain.py@@ExpressionDomain.Expression.as_expr": "def as_expr(f):\n    return f.ex",
    ".sympy.polys.polytools.py@@Poly.primitive": "def primitive(f):\n    if hasattr(f.rep, 'primitive'):\n        cont, result = f.rep.primitive()\n    else:\n        raise OperationNotSupported(f, 'primitive')\n    return (f.rep.dom.to_sympy(cont), f.per(result))",
    ".sympy.polys.polyclasses.py@@DMP.primitive": "def primitive(f):\n    cont, F = dmp_ground_primitive(f.rep, f.lev, f.dom)\n    return (cont, f.per(F))",
    ".sympy.polys.domains.expressiondomain.py@@ExpressionDomain.gcd": "def gcd(self, a, b):\n    return a.gcd(b)",
    ".sympy.polys.domains.expressiondomain.py@@ExpressionDomain.Expression.gcd": "def gcd(self, a, b):\n    return a.gcd(b)",
    ".sympy.polys.polytools.py@@gcd": "def gcd(f, g=None, *gens, **args):\n    if hasattr(f, '__iter__'):\n        if g is not None:\n            gens = (g,) + gens\n        return gcd_list(f, *gens, **args)\n    elif g is None:\n        raise TypeError('gcd() takes 2 arguments or a sequence of arguments')\n    options.allowed_flags(args, ['polys'])\n    try:\n        (F, G), opt = parallel_poly_from_expr((f, g), *gens, **args)\n        a, b = map(sympify, (f, g))\n        if a.is_algebraic and a.is_irrational and b.is_algebraic and b.is_irrational:\n            frc = (a / b).ratsimp()\n            if frc.is_rational:\n                return a / frc.as_numer_denom()[0]\n    except PolificationFailed as exc:\n        domain, (a, b) = construct_domain(exc.exprs)\n        try:\n            return domain.to_sympy(domain.gcd(a, b))\n        except NotImplementedError:\n            raise ComputationFailed('gcd', 2, exc)\n    result = F.gcd(G)\n    if not opt.polys:\n        return result.as_expr()\n    else:\n        return result",
    ".sympy.polys.domains.field.py@@Field.quo": "def quo(self, a, b):\n    return a / b",
    ".sympy.polys.domains.expressiondomain.py@@ExpressionDomain.Expression.__truediv__": "def __truediv__(f, g):\n    g = f._to_ex(g)\n    if g is not None:\n        return f.simplify(f.ex / g.ex)\n    else:\n        return NotImplemented",
    ".sympy.polys.domains.expressiondomain.py@@ExpressionDomain.Expression._to_ex": "def _to_ex(f, g):\n    try:\n        return f.__class__(g)\n    except SympifyError:\n        return None",
    ".sympy.polys.domains.expressiondomain.py@@ExpressionDomain.Expression.simplify": "def simplify(f, ex):\n    return f.__class__(ex.cancel())",
    ".sympy.core.expr.py@@Expr.cancel": "def cancel(self, *gens, **args):\n    from sympy.polys import cancel\n    return cancel(self, *gens, **args)",
    ".sympy.polys.polytools.py@@cancel": "def cancel(f, *gens, **args):\n    from sympy.core.exprtools import factor_terms\n    from sympy.functions.elementary.piecewise import Piecewise\n    options.allowed_flags(args, ['polys'])\n    f = sympify(f)\n    if not isinstance(f, (tuple, Tuple)):\n        if f.is_Number or isinstance(f, Relational) or (not isinstance(f, Expr)):\n            return f\n        f = factor_terms(f, radical=True)\n        p, q = f.as_numer_denom()\n    elif len(f) == 2:\n        p, q = f\n    elif isinstance(f, Tuple):\n        return factor_terms(f)\n    else:\n        raise ValueError('unexpected argument: %s' % f)\n    try:\n        (F, G), opt = parallel_poly_from_expr((p, q), *gens, **args)\n    except PolificationFailed:\n        if not isinstance(f, (tuple, Tuple)):\n            return f\n        else:\n            return (S.One, p, q)\n    except PolynomialError as msg:\n        if f.is_commutative and (not f.has(Piecewise)):\n            raise PolynomialError(msg)\n        if f.is_Add or f.is_Mul:\n            c, nc = sift(f.args, lambda x: x.is_commutative is True and (not x.has(Piecewise)), binary=True)\n            nc = [cancel(i) for i in nc]\n            return f.func(cancel(f.func(*c)), *nc)\n        else:\n            reps = []\n            pot = preorder_traversal(f)\n            next(pot)\n            for e in pot:\n                if isinstance(e, (tuple, Tuple, BooleanAtom)):\n                    continue\n                try:\n                    reps.append((e, cancel(e)))\n                    pot.skip()\n                except NotImplementedError:\n                    pass\n            return f.xreplace(dict(reps))\n    c, P, Q = F.cancel(G)\n    if not isinstance(f, (tuple, Tuple)):\n        return c * (P.as_expr() / Q.as_expr())\n    elif not opt.polys:\n        return (c, P.as_expr(), Q.as_expr())\n    else:\n        return (c, P, Q)",
    ".sympy.polys.polytools.py@@Poly.retract": "def retract(f, field=None):\n    dom, rep = construct_domain(f.as_dict(zero=True), field=field, composite=f.domain.is_Composite or None)\n    return f.from_dict(rep, f.gens, domain=dom)",
    ".sympy.polys.polytools.py@@Poly.as_dict": "def as_dict(f, native=False, zero=False):\n    if native:\n        return f.rep.to_dict(zero=zero)\n    else:\n        return f.rep.to_sympy_dict(zero=zero)",
    ".sympy.polys.polytools.py@@Poly.domain": "def domain(self):\n    return self.get_domain()",
    ".sympy.polys.polytools.py@@Poly.from_dict": "def from_dict(cls, rep, *gens, **args):\n    opt = options.build_options(gens, args)\n    return cls._from_dict(rep, opt)",
    ".sympy.polys.polytools.py@@Poly.is_univariate": "def is_univariate(f):\n    return len(f.gens) == 1",
    ".sympy.polys.polyroots.py@@_integer_basis": "def _integer_basis(poly):\n    monoms, coeffs = list(zip(*poly.terms()))\n    monoms, = list(zip(*monoms))\n    coeffs = list(map(abs, coeffs))\n    if coeffs[0] < coeffs[-1]:\n        coeffs = list(reversed(coeffs))\n        n = monoms[0]\n        monoms = [n - i for i in reversed(monoms)]\n    else:\n        return None\n    monoms = monoms[:-1]\n    coeffs = coeffs[:-1]\n    divs = reversed(divisors(gcd_list(coeffs))[1:])\n    try:\n        div = next(divs)\n    except StopIteration:\n        return None\n    while True:\n        for monom, coeff in zip(monoms, coeffs):\n            if coeff % div ** monom != 0:\n                try:\n                    div = next(divs)\n                except StopIteration:\n                    return None\n                else:\n                    break\n        else:\n            return div",
    ".sympy.polys.polytools.py@@Poly.terms": "def terms(f, order=None):\n    return [(m, f.rep.dom.to_sympy(c)) for m, c in f.rep.terms(order=order)]",
    ".sympy.polys.polyclasses.py@@DMP.terms": "def terms(f, order=None):\n    return dmp_list_terms(f.rep, f.lev, f.dom, order=order)",
    ".sympy.polys.polytools.py@@gcd_list": "def gcd_list(seq, *gens, **args):\n    seq = sympify(seq)\n\n    def try_non_polynomial_gcd(seq):\n        if not gens and (not args):\n            domain, numbers = construct_domain(seq)\n            if not numbers:\n                return domain.zero\n            elif domain.is_Numerical:\n                result, numbers = (numbers[0], numbers[1:])\n                for number in numbers:\n                    result = domain.gcd(result, number)\n                    if domain.is_one(result):\n                        break\n                return domain.to_sympy(result)\n        return None\n    result = try_non_polynomial_gcd(seq)\n    if result is not None:\n        return result\n    options.allowed_flags(args, ['polys'])\n    try:\n        polys, opt = parallel_poly_from_expr(seq, *gens, **args)\n        if len(seq) > 1 and all((elt.is_algebraic and elt.is_irrational for elt in seq)):\n            a = seq[-1]\n            lst = [(a / elt).ratsimp() for elt in seq[:-1]]\n            if all((frc.is_rational for frc in lst)):\n                lc = 1\n                for frc in lst:\n                    lc = lcm(lc, frc.as_numer_denom()[0])\n                return a / lc\n    except PolificationFailed as exc:\n        result = try_non_polynomial_gcd(exc.exprs)\n        if result is not None:\n            return result\n        else:\n            raise ComputationFailed('gcd_list', len(seq), exc)\n    if not polys:\n        if not opt.polys:\n            return S.Zero\n        else:\n            return Poly(0, opt=opt)\n    result, polys = (polys[0], polys[1:])\n    for poly in polys:\n        result = result.gcd(poly)\n        if result.is_one:\n            break\n    if not opt.polys:\n        return result.as_expr()\n    else:\n        return result",
    ".sympy.polys.polytools.py@@try_non_polynomial_gcd": "def try_non_polynomial_gcd(seq):\n    if not gens and (not args):\n        domain, numbers = construct_domain(seq)\n        if not numbers:\n            return domain.zero\n        elif domain.is_Numerical:\n            result, numbers = (numbers[0], numbers[1:])\n            for number in numbers:\n                result = domain.gcd(result, number)\n                if domain.is_one(result):\n                    break\n            return domain.to_sympy(result)\n    return None",
    ".sympy.ntheory.factor_.py@@divisors": "def divisors(n, generator=False, proper=False):\n    n = as_int(abs(n))\n    if isprime(n):\n        if proper:\n            return [1]\n        return [1, n]\n    if n == 1:\n        if proper:\n            return []\n        return [1]\n    if n == 0:\n        return []\n    rv = _divisors(n, proper)\n    if not generator:\n        return sorted(rv)\n    return rv",
    ".sympy.core.numbers.py@@One.__abs__": "def __abs__():\n    return S.One",
    ".sympy.polys.polytools.py@@Poly.to_field": "def to_field(f):\n    if hasattr(f.rep, 'to_field'):\n        result = f.rep.to_field()\n    else:\n        raise OperationNotSupported(f, 'to_field')\n    return f.per(result)",
    ".sympy.polys.polyclasses.py@@DMP.to_field": "def to_field(f):\n    return f.convert(f.dom.get_field())",
    ".sympy.polys.domains.integerring.py@@IntegerRing.get_field": "def get_field(self):\n    from sympy.polys.domains import QQ\n    return QQ",
    ".sympy.polys.polyclasses.py@@DMP.convert": "def convert(f, dom):\n    if f.dom == dom:\n        return f\n    else:\n        return DMP(dmp_convert(f.rep, f.lev, f.dom, dom), dom, f.lev)",
    ".sympy.polys.densebasic.py@@dmp_convert": "def dmp_convert(f, u, K0, K1):\n    if not u:\n        return dup_convert(f, K0, K1)\n    if K0 is not None and K0 == K1:\n        return f\n    v = u - 1\n    return dmp_strip([dmp_convert(c, v, K0, K1) for c in f], u)",
    ".sympy.polys.densebasic.py@@dup_convert": "def dup_convert(f, K0, K1):\n    if K0 is not None and K0 == K1:\n        return f\n    else:\n        return dup_strip([K1.convert(c, K0) for c in f])",
    ".sympy.polys.domains.domain.py@@Domain.convert_from": "def convert_from(self, element, base):\n    if base.alias is not None:\n        method = 'from_' + base.alias\n    else:\n        method = 'from_' + base.__class__.__name__\n    _convert = getattr(self, method)\n    if _convert is not None:\n        result = _convert(element, base)\n        if result is not None:\n            return result\n    raise CoercionFailed(\"can't convert %s of type %s from %s to %s\" % (element, type(element), base, self))",
    ".sympy.polys.domains.pythonrationalfield.py@@PythonRationalField.from_ZZ_python": "def from_ZZ_python(K1, a, K0):\n    return PythonRational(a)",
    ".sympy.polys.domains.pythonrational.py@@PythonRational.__init__": "def __init__(self, p, q=1, _gcd=True):\n    from sympy.polys.domains.groundtypes import python_gcd as gcd\n    if isinstance(p, Integer):\n        p = p.p\n    elif isinstance(p, Rational):\n        p, q = (p.p, p.q)\n    if not q:\n        raise ZeroDivisionError('rational number')\n    elif q < 0:\n        p, q = (-p, -q)\n    if not p:\n        self.p = 0\n        self.q = 1\n    elif p == 1 or q == 1:\n        self.p = p\n        self.q = q\n    else:\n        if _gcd:\n            x = gcd(p, q)\n            if x != 1:\n                p //= x\n                q //= x\n        self.p = p\n        self.q = q",
    ".sympy.polys.domains.pythonrational.py@@PythonRational.__nonzero__": "def __nonzero__(self):\n    return self.p != 0",
    ".sympy.polys.polytools.py@@Poly.is_ground": "def is_ground(f):\n    return f.rep.is_ground",
    ".sympy.polys.polyclasses.py@@DMP.is_ground": "def is_ground(f):\n    return dmp_ground_p(f.rep, None, f.lev)",
    ".sympy.polys.polytools.py@@Poly.degree": "def degree(f, gen=0):\n    j = f._gen_to_level(gen)\n    if hasattr(f.rep, 'degree'):\n        return f.rep.degree(j)\n    else:\n        raise OperationNotSupported(f, 'degree')",
    ".sympy.polys.polytools.py@@Poly._gen_to_level": "def _gen_to_level(f, gen):\n    if isinstance(gen, int):\n        length = len(f.gens)\n        if -length <= gen < length:\n            if gen < 0:\n                return length + gen\n            else:\n                return gen\n        else:\n            raise PolynomialError('-%s <= gen < %s expected, got %s' % (length, length, gen))\n    else:\n        try:\n            return f.gens.index(sympify(gen))\n        except ValueError:\n            raise PolynomialError('a valid generator expected, got %s' % gen)",
    ".sympy.polys.polyclasses.py@@DMP.degree": "def degree(f, j=0):\n    if isinstance(j, int):\n        return dmp_degree_in(f.rep, j, f.lev)\n    else:\n        raise TypeError('``int`` expected, got %s' % type(j))",
    ".sympy.polys.densebasic.py@@dmp_degree_in": "def dmp_degree_in(f, j, u):\n    if not j:\n        return dmp_degree(f, u)\n    if j < 0 or j > u:\n        raise IndexError('0 <= j <= %s expected, got %s' % (u, j))\n    return _rec_degree_in(f, u, 0, j)",
    ".sympy.polys.polytools.py@@Poly.length": "def length(f):\n    return len(f.as_dict())",
    ".sympy.polys.domains.pythonrationalfield.py@@PythonRationalField.to_sympy": "def to_sympy(self, a):\n    return SymPyRational(a.numerator, a.denominator)",
    ".sympy.polys.domains.pythonrational.py@@PythonRational.numer": "def numer(self):\n    return self.p",
    ".sympy.polys.domains.pythonrational.py@@PythonRational.denom": "def denom(self):\n    return self.q",
    ".sympy.polys.sqfreetools.py@@dup_sqf_part": "def dup_sqf_part(f, K):\n    if K.is_FiniteField:\n        return dup_gf_sqf_part(f, K)\n    if not f:\n        return f\n    if K.is_negative(dup_LC(f, K)):\n        f = dup_neg(f, K)\n    gcd = dup_gcd(f, dup_diff(f, 1, K), K)\n    sqf = dup_quo(f, gcd, K)\n    if K.is_Field:\n        return dup_monic(sqf, K)\n    else:\n        return dup_primitive(sqf, K)[1]",
    ".sympy.polys.densearith.py@@dup_quo": "def dup_quo(f, g, K):\n    return dup_div(f, g, K)[0]",
    ".sympy.polys.factortools.py@@dup_trial_division": "def dup_trial_division(f, factors, K):\n    result = []\n    for factor in factors:\n        k = 0\n        while True:\n            q, r = dup_div(f, factor, K)\n            if not r:\n                f, k = (q, k + 1)\n            else:\n                break\n        result.append((factor, k))\n    return _sort_factors(result)",
    ".sympy.polys.polyroots.py@@roots_quadratic": "def roots_quadratic(f):\n    a, b, c = f.all_coeffs()\n    dom = f.get_domain()\n\n    def _sqrt(d):\n        co = []\n        other = []\n        for di in Mul.make_args(d):\n            if di.is_Pow and di.exp.is_Integer and (di.exp % 2 == 0):\n                co.append(Pow(di.base, di.exp // 2))\n            else:\n                other.append(di)\n        if co:\n            d = Mul(*other)\n            co = Mul(*co)\n            return co * sqrt(d)\n        return sqrt(d)\n\n    def _simplify(expr):\n        if dom.is_Composite:\n            return factor(expr)\n        else:\n            return simplify(expr)\n    if c is S.Zero:\n        r0, r1 = (S.Zero, -b / a)\n        if not dom.is_Numerical:\n            r1 = _simplify(r1)\n        elif r1.is_negative:\n            r0, r1 = (r1, r0)\n    elif b is S.Zero:\n        r = -c / a\n        if not dom.is_Numerical:\n            r = _simplify(r)\n        R = _sqrt(r)\n        r0 = -R\n        r1 = R\n    else:\n        d = b ** 2 - 4 * a * c\n        A = 2 * a\n        B = -b / A\n        if not dom.is_Numerical:\n            d = _simplify(d)\n            B = _simplify(B)\n        D = factor_terms(_sqrt(d) / A)\n        r0 = B - D\n        r1 = B + D\n        if a.is_negative:\n            r0, r1 = (r1, r0)\n        elif not dom.is_Numerical:\n            r0, r1 = [expand_2arg(i) for i in (r0, r1)]\n    return [r0, r1]",
    ".sympy.polys.polytools.py@@Poly.all_coeffs": "def all_coeffs(f):\n    return [f.rep.dom.to_sympy(c) for c in f.rep.all_coeffs()]",
    ".sympy.polys.polyclasses.py@@DMP.all_coeffs": "def all_coeffs(f):\n    if not f.lev:\n        if not f:\n            return [f.dom.zero]\n        else:\n            return [c for c in f.rep]\n    else:\n        raise PolynomialError('multivariate polynomials not supported')",
    ".sympy.polys.polyclasses.py@@DMP.__nonzero__": "def __nonzero__(f):\n    return not dmp_zero_p(f.rep, f.lev)",
    ".sympy.core.power.py@@integer_nthroot": "def integer_nthroot(y, n):\n    y, n = (as_int(y), as_int(n))\n    if y < 0:\n        raise ValueError('y must be nonnegative')\n    if n < 1:\n        raise ValueError('n must be positive')\n    if y in (0, 1):\n        return (y, True)\n    if n == 1:\n        return (y, True)\n    if n == 2:\n        x, rem = mpmath_sqrtrem(y)\n        return (int(x), not rem)\n    if n > y:\n        return (1, False)\n    try:\n        guess = int(y ** (1.0 / n) + 0.5)\n    except OverflowError:\n        exp = _log(y, 2) / n\n        if exp > 53:\n            shift = int(exp - 53)\n            guess = int(2.0 ** (exp - shift) + 1) << shift\n        else:\n            guess = int(2.0 ** exp)\n    if guess > 2 ** 50:\n        xprev, x = (-1, guess)\n        while 1:\n            t = x ** (n - 1)\n            xprev, x = (x, ((n - 1) * x + y // t) // n)\n            if abs(x - xprev) < 2:\n                break\n    else:\n        x = guess\n    t = x ** n\n    while t < y:\n        x += 1\n        t = x ** n\n    while t > y:\n        x -= 1\n        t = x ** n\n    return (int(x), t == y)",
    ".sympy.polys.polyroots.py@@_sqrt": "def _sqrt(d):\n    co = []\n    other = []\n    for di in Mul.make_args(d):\n        if di.is_Pow and di.exp.is_Integer and (di.exp % 2 == 0):\n            co.append(Pow(di.base, di.exp // 2))\n        else:\n            other.append(di)\n    if co:\n        d = Mul(*other)\n        co = Mul(*co)\n        return co * sqrt(d)\n    return sqrt(d)",
    ".sympy.functions.elementary.miscellaneous.py@@sqrt": "def sqrt(arg, evaluate=None):\n    return Pow(arg, S.Half, evaluate=evaluate)",
    ".sympy.ntheory.factor_.py@@perfect_power": "def perfect_power(n, candidates=None, big=True, factor=True):\n    from sympy.core.power import integer_nthroot\n    n = as_int(n)\n    if n < 3:\n        if n < 1:\n            raise ValueError('expecting positive n')\n        return False\n    logn = math.log(n, 2)\n    max_possible = int(logn) + 2\n    not_square = n % 10 in [2, 3, 7, 8]\n    min_possible = 2 + not_square\n    if not candidates:\n        candidates = primerange(min_possible, max_possible)\n    else:\n        candidates = sorted([i for i in candidates if min_possible <= i < max_possible])\n        if n % 2 == 0:\n            e = trailing(n)\n            candidates = [i for i in candidates if e % i == 0]\n        if big:\n            candidates = reversed(candidates)\n        for e in candidates:\n            r, ok = integer_nthroot(n, e)\n            if ok:\n                return (r, e)\n        return False\n\n    def _factors():\n        rv = 2 + n % 2\n        while True:\n            yield rv\n            rv = nextprime(rv)\n    for fac, e in zip(_factors(), candidates):\n        if factor and n % fac == 0:\n            if fac == 2:\n                e = trailing(n)\n            else:\n                e = multiplicity(fac, n)\n            if e == 1:\n                return False\n            r, exact = integer_nthroot(n, e)\n            if not exact:\n                m = n // fac ** e\n                rE = perfect_power(m, candidates=divisors(e, generator=True))\n                if not rE:\n                    return False\n                else:\n                    r, E = rE\n                    r, e = (fac ** (e // E) * r, E)\n            if not big:\n                e0 = primefactors(e)\n                if e0[0] != e:\n                    r, e = (r ** (e // e0[0]), e0[0])\n            return (r, e)\n        if logn / e < 40:\n            b = 2.0 ** (logn / e)\n            if abs(int(b + 0.5) - b) > 0.01:\n                continue\n        r, exact = integer_nthroot(n, e)\n        if exact:\n            if big:\n                m = perfect_power(r, big=big, factor=factor)\n                if m:\n                    r, e = (m[0], e * m[1])\n            return (int(r), e)\n    return False",
    ".sympy.ntheory.factor_.py@@_factors": "def _factors():\n    rv = 2 + n % 2\n    while True:\n        yield rv\n        rv = nextprime(rv)",
    ".sympy.ntheory.generate.py@@primerange": "def primerange(a, b):\n    from sympy.functions.elementary.integers import ceiling\n    if a >= b:\n        return\n    if b <= sieve._list[-1]:\n        for i in sieve.primerange(a, b):\n            yield i\n        return\n    a = as_int(ceiling(a)) - 1\n    b = as_int(ceiling(b))\n    while 1:\n        a = nextprime(a)\n        if a < b:\n            yield a\n        else:\n            return",
    ".sympy.ntheory.generate.py@@Sieve.primerange": "def primerange(self, a, b):\n    from sympy.functions.elementary.integers import ceiling\n    a = max(2, as_int(ceiling(a)))\n    b = as_int(ceiling(b))\n    if a >= b:\n        return\n    self.extend(b)\n    i = self.search(a)[1]\n    maxi = len(self._list) + 1\n    while i < maxi:\n        p = self._list[i - 1]\n        if p < b:\n            yield p\n            i += 1\n        else:\n            return",
    ".sympy.functions.elementary.integers.py@@RoundFunction.eval": "def eval(cls, arg):\n    from sympy import im\n    if arg.is_integer or arg.is_finite is False:\n        return arg\n    if arg.is_imaginary or (S.ImaginaryUnit * arg).is_real:\n        i = im(arg)\n        if not i.has(S.ImaginaryUnit):\n            return cls(i) * S.ImaginaryUnit\n        return cls(arg, evaluate=False)\n    v = cls._eval_number(arg)\n    if v is not None:\n        return v\n    ipart = npart = spart = S.Zero\n    terms = Add.make_args(arg)\n    for t in terms:\n        if t.is_integer or (t.is_imaginary and im(t).is_integer):\n            ipart += t\n        elif t.has(Symbol):\n            spart += t\n        else:\n            npart += t\n    if not (npart or spart):\n        return ipart\n    if npart and (not spart or (npart.is_real and (spart.is_imaginary or (S.ImaginaryUnit * spart).is_real)) or (npart.is_imaginary and spart.is_real)):\n        try:\n            r, i = get_integer_part(npart, cls._dir, {}, return_ints=True)\n            ipart += Integer(r) + Integer(i) * S.ImaginaryUnit\n            npart = S.Zero\n        except (PrecisionExhausted, NotImplementedError):\n            pass\n    spart += npart\n    if not spart:\n        return ipart\n    elif spart.is_imaginary or (S.ImaginaryUnit * spart).is_real:\n        return ipart + cls(im(spart), evaluate=False) * S.ImaginaryUnit\n    else:\n        return ipart + cls(spart, evaluate=False)",
    ".sympy.ntheory.generate.py@@Sieve.extend": "def extend(self, n):\n    n = int(n)\n    if n <= self._list[-1]:\n        return\n    maxbase = int(n ** 0.5) + 1\n    self.extend(maxbase)\n    begin = self._list[-1] + 1\n    newsieve = _arange(begin, n + 1)\n    for p in self.primerange(2, maxbase):\n        startindex = -begin % p\n        for i in range(startindex, len(newsieve), p):\n            newsieve[i] = 0\n    self._list += _array('l', [x for x in newsieve if x])",
    ".sympy.ntheory.generate.py@@Sieve.search": "def search(self, n):\n    from sympy.functions.elementary.integers import ceiling\n    test = as_int(ceiling(n))\n    n = as_int(n)\n    if n < 2:\n        raise ValueError('n should be >= 2 but got: %s' % n)\n    if n > self._list[-1]:\n        self.extend(n)\n    b = bisect(self._list, n)\n    if self._list[b - 1] == test:\n        return (b, b)\n    else:\n        return (b, b + 1)",
    ".sympy.ntheory.factor_.py@@trailing": "def trailing(n):\n    n = abs(int(n))\n    if not n:\n        return 0\n    low_byte = n & 255\n    if low_byte:\n        return small_trailing[low_byte]\n    z = bitcount(n) - 1\n    if isinstance(z, SYMPY_INTS):\n        if n == 1 << z:\n            return z\n    if z < 300:\n        t = 8\n        n >>= 8\n        while not n & 255:\n            n >>= 8\n            t += 8\n        return t + small_trailing[n & 255]\n    t = 0\n    p = 8\n    while not n & 1:\n        while not n & (1 << p) - 1:\n            n >>= p\n            t += p\n            p *= 2\n        p //= 2\n    return t",
    ".sympy.core.numbers.py@@Rational.factors": "def factors(self, limit=None, use_trial=True, use_rho=False, use_pm1=False, verbose=False, visual=False):\n    from sympy.ntheory import factorrat\n    return factorrat(self, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose).copy()",
    ".sympy.ntheory.factor_.py@@factorrat": "def factorrat(rat, limit=None, use_trial=True, use_rho=True, use_pm1=True, verbose=False, visual=None, multiple=False):\n    from collections import defaultdict\n    if multiple:\n        fac = factorrat(rat, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose, visual=False, multiple=False)\n        factorlist = sum(([p] * fac[p] if fac[p] > 0 else [S.One / p] * -fac[p] for p, _ in sorted(fac.items(), key=lambda elem: elem[0] if elem[1] > 0 else 1 / elem[0])), [])\n        return factorlist\n    f = factorint(rat.p, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose).copy()\n    f = defaultdict(int, f)\n    for p, e in factorint(rat.q, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose).items():\n        f[p] += -e\n    if len(f) > 1 and 1 in f:\n        del f[1]\n    if not visual:\n        return dict(f)\n    else:\n        if -1 in f:\n            f.pop(-1)\n            args = [S.NegativeOne]\n        else:\n            args = []\n        args.extend([Pow(*i, evaluate=False) for i in sorted(f.items())])\n        return Mul(*args, evaluate=False)",
    ".sympy.ntheory.factor_.py@@factorint": "def factorint(n, limit=None, use_trial=True, use_rho=True, use_pm1=True, verbose=False, visual=None, multiple=False):\n    if isinstance(n, Dict):\n        n = dict(n)\n    if multiple:\n        fac = factorint(n, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose, visual=False, multiple=False)\n        factorlist = sum(([p] * fac[p] if fac[p] > 0 else [S.One / p] * -fac[p] for p in sorted(fac)), [])\n        return factorlist\n    factordict = {}\n    if visual and (not isinstance(n, Mul)) and (not isinstance(n, dict)):\n        factordict = factorint(n, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose, visual=False)\n    elif isinstance(n, Mul):\n        factordict = {int(k): int(v) for k, v in n.as_powers_dict().items()}\n    elif isinstance(n, dict):\n        factordict = n\n    if factordict and (isinstance(n, Mul) or isinstance(n, dict)):\n        for key in list(factordict.keys()):\n            if isprime(key):\n                continue\n            e = factordict.pop(key)\n            d = factorint(key, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose, visual=False)\n            for k, v in d.items():\n                if k in factordict:\n                    factordict[k] += v * e\n                else:\n                    factordict[k] = v * e\n    if visual or (type(n) is dict and visual is not True and (visual is not False)):\n        if factordict == {}:\n            return S.One\n        if -1 in factordict:\n            factordict.pop(-1)\n            args = [S.NegativeOne]\n        else:\n            args = []\n        args.extend([Pow(*i, evaluate=False) for i in sorted(factordict.items())])\n        return Mul(*args, evaluate=False)\n    elif isinstance(n, dict) or isinstance(n, Mul):\n        return factordict\n    assert use_trial or use_rho or use_pm1\n    from sympy.functions.combinatorial.factorials import factorial\n    if isinstance(n, factorial):\n        x = as_int(n.args[0])\n        if x >= 20:\n            factors = {}\n            m = 2\n            for p in sieve.primerange(2, x + 1):\n                if m > 1:\n                    m, q = (0, x // p)\n                    while q != 0:\n                        m += q\n                        q //= p\n                factors[p] = m\n            if factors and verbose:\n                for k in sorted(factors):\n                    print(factor_msg % (k, factors[k]))\n            if verbose:\n                print(complete_msg)\n            return factors\n        else:\n            n = n.func(x)\n    n = as_int(n)\n    if limit:\n        limit = int(limit)\n    if n < 0:\n        factors = factorint(-n, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose, visual=False)\n        factors[-1] = 1\n        return factors\n    if limit and limit < 2:\n        if n == 1:\n            return {}\n        return {n: 1}\n    elif n < 10:\n        return [{0: 1}, {}, {2: 1}, {3: 1}, {2: 2}, {5: 1}, {2: 1, 3: 1}, {7: 1}, {2: 3}, {3: 2}][n]\n    factors = {}\n    if verbose:\n        sn = str(n)\n        if len(sn) > 50:\n            print('Factoring %s' % sn[:5] + '..(%i other digits)..' % (len(sn) - 10) + sn[-5:])\n        else:\n            print('Factoring', n)\n    if use_trial:\n        small = 2 ** 15\n        fail_max = 600\n        small = min(small, limit or small)\n        if verbose:\n            print(trial_int_msg % (2, small, fail_max))\n        n, next_p = _factorint_small(factors, n, small, fail_max)\n    else:\n        next_p = 2\n    if factors and verbose:\n        for k in sorted(factors):\n            print(factor_msg % (k, factors[k]))\n    if next_p == 0:\n        if n > 1:\n            factors[int(n)] = 1\n        if verbose:\n            print(complete_msg)\n        return factors\n    try:\n        if limit and next_p > limit:\n            if verbose:\n                print('Exceeded limit:', limit)\n            _check_termination(factors, n, limit, use_trial, use_rho, use_pm1, verbose)\n            if n > 1:\n                factors[int(n)] = 1\n            return factors\n        else:\n            sqrt_n = integer_nthroot(n, 2)[0]\n            a = sqrt_n + 1\n            a2 = a ** 2\n            b2 = a2 - n\n            for i in range(3):\n                b, fermat = integer_nthroot(b2, 2)\n                if fermat:\n                    break\n                b2 += 2 * a + 1\n                a += 1\n            if fermat:\n                if verbose:\n                    print(fermat_msg)\n                if limit:\n                    limit -= 1\n                for r in [a - b, a + b]:\n                    facs = factorint(r, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose)\n                    for k, v in facs.items():\n                        factors[k] = factors.get(k, 0) + v\n                raise StopIteration\n            _check_termination(factors, n, limit, use_trial, use_rho, use_pm1, verbose)\n    except StopIteration:\n        if verbose:\n            print(complete_msg)\n        return factors\n    low, high = (next_p, 2 * next_p)\n    limit = limit or sqrt_n\n    limit += 1\n    while 1:\n        try:\n            high_ = high\n            if limit < high_:\n                high_ = limit\n            if use_trial:\n                if verbose:\n                    print(trial_msg % (low, high_))\n                ps = sieve.primerange(low, high_)\n                n, found_trial = _trial(factors, n, ps, verbose)\n                if found_trial:\n                    _check_termination(factors, n, limit, use_trial, use_rho, use_pm1, verbose)\n            else:\n                found_trial = False\n            if high > limit:\n                if verbose:\n                    print('Exceeded limit:', limit)\n                if n > 1:\n                    factors[int(n)] = 1\n                raise StopIteration\n            if not found_trial:\n                if use_pm1 or use_rho:\n                    high_root = max(int(math.log(high_ ** 0.7)), low, 3)\n                    if use_pm1:\n                        if verbose:\n                            print(pm1_msg % (high_root, high_))\n                        c = pollard_pm1(n, B=high_root, seed=high_)\n                        if c:\n                            ps = factorint(c, limit=limit - 1, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose)\n                            n, _ = _trial(factors, n, ps, verbose=False)\n                            _check_termination(factors, n, limit, use_trial, use_rho, use_pm1, verbose)\n                    if use_rho:\n                        max_steps = high_root\n                        if verbose:\n                            print(rho_msg % (1, max_steps, high_))\n                        c = pollard_rho(n, retries=1, max_steps=max_steps, seed=high_)\n                        if c:\n                            ps = factorint(c, limit=limit - 1, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose)\n                            n, _ = _trial(factors, n, ps, verbose=False)\n                            _check_termination(factors, n, limit, use_trial, use_rho, use_pm1, verbose)\n        except StopIteration:\n            if verbose:\n                print(complete_msg)\n            return factors\n        low, high = (high, high * 2)",
    ".sympy.ntheory.factor_.py@@_factorint_small": "def _factorint_small(factors, n, limit, fail_max):\n\n    def done(n, d):\n        if d * d <= n:\n            return (n, d)\n        return (n, 0)\n    d = 2\n    m = trailing(n)\n    if m:\n        factors[d] = m\n        n >>= m\n    d = 3\n    if limit < d:\n        if n > 1:\n            factors[n] = 1\n        return done(n, d)\n    m = 0\n    while n % d == 0:\n        n //= d\n        m += 1\n        if m == 20:\n            mm = multiplicity(d, n)\n            m += mm\n            n //= d ** mm\n            break\n    if m:\n        factors[d] = m\n    if limit * limit > n:\n        maxx = 0\n    else:\n        maxx = limit * limit\n    dd = maxx or n\n    d = 5\n    fails = 0\n    while fails < fail_max:\n        if d * d > dd:\n            break\n        m = 0\n        while n % d == 0:\n            n //= d\n            m += 1\n            if m == 20:\n                mm = multiplicity(d, n)\n                m += mm\n                n //= d ** mm\n                break\n        if m:\n            factors[d] = m\n            dd = maxx or n\n            fails = 0\n        else:\n            fails += 1\n        d += 2\n        if d * d > dd:\n            break\n        m = 0\n        while n % d == 0:\n            n //= d\n            m += 1\n            if m == 20:\n                mm = multiplicity(d, n)\n                m += mm\n                n //= d ** mm\n                break\n        if m:\n            factors[d] = m\n            dd = maxx or n\n            fails = 0\n        else:\n            fails += 1\n        d += 4\n    return done(n, d)",
    ".sympy.ntheory.factor_.py@@done": "def done(n, d):\n    if d * d <= n:\n        return (n, d)\n    return (n, 0)",
    ".sympy.ntheory.factor_.py@@multiplicity": "def multiplicity(p, n):\n    try:\n        p, n = (as_int(p), as_int(n))\n    except ValueError:\n        if all((isinstance(i, (SYMPY_INTS, Rational)) for i in (p, n))):\n            p = Rational(p)\n            n = Rational(n)\n            if p.q == 1:\n                if n.p == 1:\n                    return -multiplicity(p.p, n.q)\n                return multiplicity(p.p, n.p) - multiplicity(p.p, n.q)\n            elif p.p == 1:\n                return multiplicity(p.q, n.q)\n            else:\n                like = min(multiplicity(p.p, n.p), multiplicity(p.q, n.q))\n                cross = min(multiplicity(p.q, n.p), multiplicity(p.p, n.q))\n                return like - cross\n        raise ValueError('expecting ints or fractions, got %s and %s' % (p, n))\n    if n == 0:\n        raise ValueError('no such integer exists: multiplicity of %s is not-defined' % n)\n    if p == 2:\n        return trailing(n)\n    if p < 2:\n        raise ValueError('p must be an integer, 2 or larger, but got %s' % p)\n    if p == n:\n        return 1\n    m = 0\n    n, rem = divmod(n, p)\n    while not rem:\n        m += 1\n        if m > 5:\n            e = 2\n            while 1:\n                ppow = p ** e\n                if ppow < n:\n                    nnew, rem = divmod(n, ppow)\n                    if not rem:\n                        m += e\n                        e *= 2\n                        n = nnew\n                        continue\n                return m + multiplicity(p, n)\n        n, rem = divmod(n, p)\n    return m",
    ".sympy.core.numbers.py@@Rational.__hash__": "def __hash__(self):\n    return super(Rational, self).__hash__()",
    ".sympy.core.numbers.py@@Rational.as_coeff_Add": "def as_coeff_Add(self, rational=False):\n    return (self, S.Zero)",
    ".sympy.core.numbers.py@@Rational._eval_power": "def _eval_power(self, expt):\n    if isinstance(expt, Number):\n        if isinstance(expt, Float):\n            return self._eval_evalf(expt._prec) ** expt\n        if expt.is_extended_negative:\n            ne = -expt\n            if ne is S.One:\n                return Rational(self.q, self.p)\n            if self.is_negative:\n                return S.NegativeOne ** expt * Rational(self.q, -self.p) ** ne\n            else:\n                return Rational(self.q, self.p) ** ne\n        if expt is S.Infinity:\n            if self.p > self.q:\n                return S.Infinity\n            if self.p < -self.q:\n                return S.Infinity + S.Infinity * S.ImaginaryUnit\n            return S.Zero\n        if isinstance(expt, Integer):\n            return Rational(self.p ** expt.p, self.q ** expt.p, 1)\n        if isinstance(expt, Rational):\n            if self.p != 1:\n                return Integer(self.p) ** expt * Integer(self.q) ** (-expt)\n            return Integer(self.q) ** Rational(expt.p * (expt.q - 1), expt.q) / Integer(self.q) ** Integer(expt.p)\n    if self.is_extended_negative and expt.is_even:\n        return (-self) ** expt\n    return",
    ".sympy.core.numbers.py@@Rational.__sub__": "def __sub__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, Integer):\n            return Rational(self.p - self.q * other.p, self.q, 1)\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.q - self.q * other.p, self.q * other.q)\n        elif isinstance(other, Float):\n            return -other + self\n        else:\n            return Number.__sub__(self, other)\n    return Number.__sub__(self, other)",
    ".sympy.core.numbers.py@@Number.__sub__": "def __sub__(self, other):\n    if isinstance(other, Number) and global_evaluate[0]:\n        if other is S.NaN:\n            return S.NaN\n        elif other is S.Infinity:\n            return S.NegativeInfinity\n        elif other is S.NegativeInfinity:\n            return S.Infinity\n    return AtomicExpr.__sub__(self, other)",
    ".sympy.core.numbers.py@@Rational.__neg__": "def __neg__(self):\n    return Rational(-self.p, self.q)",
    ".sympy.polys.polyroots.py@@_update_dict": "def _update_dict(result, currentroot, k):\n    if currentroot in result:\n        result[currentroot] += k\n    else:\n        result[currentroot] = k",
    ".sympy.polys.polytools.py@@degree": "def degree(f, gen=0):\n    f = sympify(f, strict=True)\n    gen_is_Num = sympify(gen, strict=True).is_Number\n    if f.is_Poly:\n        p = f\n        isNum = p.as_expr().is_Number\n    else:\n        isNum = f.is_Number\n        if not isNum:\n            if gen_is_Num:\n                p, _ = poly_from_expr(f)\n            else:\n                p, _ = poly_from_expr(f, gen)\n    if isNum:\n        return S.Zero if f else S.NegativeInfinity\n    if not gen_is_Num:\n        if f.is_Poly and gen not in p.gens:\n            p, _ = poly_from_expr(f.as_expr())\n        if gen not in p.gens:\n            return S.Zero\n    elif not f.is_Poly and len(f.free_symbols) > 1:\n        raise TypeError(filldedent('\\n         A symbolic generator of interest is required for a multivariate\\n         expression like func = %s, e.g. degree(func, gen = %s) instead of\\n         degree(func, gen = %s).\\n        ' % (f, next(ordered(f.free_symbols)), gen)))\n    return Integer(p.degree(gen))",
    ".sympy.polys.polytools.py@@poly_from_expr": "def poly_from_expr(expr, *gens, **args):\n    opt = options.build_options(gens, args)\n    return _poly_from_expr(expr, opt)",
    ".sympy.core.numbers.py@@Integer.__le__": "def __le__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if other.is_Integer:\n        return _sympify(self.p <= other.p)\n    return Rational.__le__(self, other)",
    ".sympy.core.evalf.py@@evalf_pow": "def evalf_pow(v, prec, options):\n    target_prec = prec\n    base, exp = v.args\n    if exp.is_Integer:\n        p = exp.p\n        if not p:\n            return (fone, None, prec, None)\n        prec += int(math.log(abs(p), 2))\n        re, im, re_acc, im_acc = evalf(base, prec + 5, options)\n        if re and (not im):\n            return (mpf_pow_int(re, p, target_prec), None, target_prec, None)\n        if im and (not re):\n            z = mpf_pow_int(im, p, target_prec)\n            case = p % 4\n            if case == 0:\n                return (z, None, target_prec, None)\n            if case == 1:\n                return (None, z, None, target_prec)\n            if case == 2:\n                return (mpf_neg(z), None, target_prec, None)\n            if case == 3:\n                return (None, mpf_neg(z), None, target_prec)\n        if not re:\n            return (None, None, None, None)\n        re, im = libmp.mpc_pow_int((re, im), p, prec)\n        return finalize_complex(re, im, target_prec)\n    if exp is S.Half:\n        xre, xim, _, _ = evalf(base, prec + 5, options)\n        if xim:\n            re, im = libmp.mpc_sqrt((xre or fzero, xim), prec)\n            return finalize_complex(re, im, prec)\n        if not xre:\n            return (None, None, None, None)\n        if mpf_lt(xre, fzero):\n            return (None, mpf_sqrt(mpf_neg(xre), prec), None, prec)\n        return (mpf_sqrt(xre, prec), None, prec, None)\n    prec += 10\n    yre, yim, _, _ = evalf(exp, prec, options)\n    if not (yre or yim):\n        return (fone, None, prec, None)\n    ysize = fastlog(yre)\n    if ysize > 5:\n        prec += ysize\n        yre, yim, _, _ = evalf(exp, prec, options)\n    if base is S.Exp1:\n        if yim:\n            re, im = libmp.mpc_exp((yre or fzero, yim), prec)\n            return finalize_complex(re, im, target_prec)\n        return (mpf_exp(yre, target_prec), None, target_prec, None)\n    xre, xim, _, _ = evalf(base, prec + 5, options)\n    if not (xre or xim):\n        return (None, None, None, None)\n    if yim:\n        re, im = libmp.mpc_pow((xre or fzero, xim or fzero), (yre or fzero, yim), target_prec)\n        return finalize_complex(re, im, target_prec)\n    if xim:\n        re, im = libmp.mpc_pow_mpf((xre or fzero, xim), yre, target_prec)\n        return finalize_complex(re, im, target_prec)\n    elif mpf_lt(xre, fzero):\n        re, im = libmp.mpc_pow_mpf((xre, fzero), yre, target_prec)\n        return finalize_complex(re, im, target_prec)\n    else:\n        return (mpf_pow(xre, yre, target_prec), None, target_prec, None)",
    ".sympy.core.function.py@@expand_complex": "def expand_complex(expr, deep=True):\n    return sympify(expr).expand(deep=deep, complex=True, basic=False, log=False, mul=False, power_exp=False, power_base=False, multinomial=False)",
    ".sympy.core.expr.py@@Expr._eval_expand_complex": "def _eval_expand_complex(self, **hints):\n    real, imag = self.as_real_imag(**hints)\n    return real + S.ImaginaryUnit * imag",
    ".sympy.core.symbol.py@@Symbol.as_real_imag": "def as_real_imag(self, deep=True, **hints):\n    from sympy import im, re\n    if hints.get('ignore') == self:\n        return None\n    else:\n        return (re(self), im(self))",
    ".sympy.core.numbers.py@@Rational.as_numer_denom": "def as_numer_denom(self):\n    return (Integer(self.p), Integer(self.q))",
    ".sympy.core.numbers.py@@Integer.__divmod__": "def __divmod__(self, other):\n    from .containers import Tuple\n    if isinstance(other, Integer) and global_evaluate[0]:\n        return Tuple(*divmod(self.p, other.p))\n    else:\n        return Number.__divmod__(self, other)",
    ".sympy.core.expr.py@@Expr.as_coefficient": "def as_coefficient(self, expr):\n    r = self.extract_multiplicatively(expr)\n    if r and (not r.has(expr)):\n        return r",
    ".sympy.core.numbers.py@@ImaginaryUnit._eval_power": "def _eval_power(self, expt):\n    if isinstance(expt, Number):\n        if isinstance(expt, Integer):\n            expt = expt.p % 4\n            if expt == 0:\n                return S.One\n            if expt == 1:\n                return S.ImaginaryUnit\n            if expt == 2:\n                return -S.One\n            return -S.ImaginaryUnit\n    return",
    ".sympy.core.function.py@@Function._should_evalf": "def _should_evalf(cls, arg):\n    from sympy.core.evalf import pure_complex\n    if arg.is_Float:\n        return arg._prec\n    if not arg.is_Add:\n        return -1\n    m = pure_complex(arg)\n    if m is None or not (m[0].is_Float or m[1].is_Float):\n        return -1\n    l = [i._prec for i in m if i.is_Float]\n    l.append(-1)\n    return max(l)",
    ".sympy.core.function.py@@Function.as_base_exp": "def as_base_exp(self):\n    return (self, S.One)",
    ".sympy.core.function.py@@Application.func": "def func(self):\n    return self.__class__",
    ".sympy.sets.sets.py@@Set.intersection": "def intersection(self, other):\n    return self.intersect(other)",
    ".sympy.sets.sets.py@@Set.intersect": "def intersect(self, other):\n    return Intersection(self, other)",
    ".sympy.sets.sets.py@@Intersection.__new__": "def __new__(cls, *args, **kwargs):\n    evaluate = kwargs.get('evaluate', global_evaluate[0])\n    args = list(ordered(set(_sympify(args))))\n    if evaluate:\n        args = list(cls._new_args_filter(args))\n        return simplify_intersection(args)\n    args = list(ordered(args, Set._infimum_key))\n    obj = Basic.__new__(cls, *args)\n    obj._argset = frozenset(args)\n    return obj",
    ".sympy.core.basic.py@@Basic.__hash__": "def __hash__(self):\n    h = self._mhash\n    if h is None:\n        h = hash((type(self).__name__,) + self._hashable_content())\n        self._mhash = h\n    return h",
    ".sympy.sets.fancysets.py@@Reals.__hash__": "def __hash__(self):\n    return hash(Interval(S.NegativeInfinity, S.Infinity))",
    ".sympy.logic.boolalg.py@@BooleanTrue.__hash__": "def __hash__(self):\n    return hash(True)",
    ".sympy.core.operations.py@@LatticeOp._new_args_filter": "def _new_args_filter(cls, arg_sequence, call_cls=None):\n    ncls = call_cls or cls\n    for arg in arg_sequence:\n        if arg == ncls.zero:\n            raise ShortCircuit(arg)\n        elif arg == ncls.identity:\n            continue\n        elif arg.func == ncls:\n            for x in arg.args:\n                yield x\n        else:\n            yield arg",
    ".sympy.sets.sets.py@@simplify_intersection": "def simplify_intersection(args):\n    if not args:\n        return S.UniversalSet\n    for arg in args:\n        if not isinstance(arg, Set):\n            raise TypeError('Input args to Union must be Sets')\n    if S.EmptySet in args:\n        return S.EmptySet\n    rv = Intersection._handle_finite_sets(args)\n    if rv is not None:\n        return rv\n    for s in args:\n        if s.is_Union:\n            other_sets = set(args) - set((s,))\n            if len(other_sets) > 0:\n                other = Intersection(*other_sets)\n                return Union(*(Intersection(arg, other) for arg in s.args))\n            else:\n                return Union(*[arg for arg in s.args])\n    for s in args:\n        if s.is_Complement:\n            args.remove(s)\n            other_sets = args + [s.args[0]]\n            return Complement(Intersection(*other_sets), s.args[1])\n    from sympy.sets.handlers.intersection import intersection_sets\n    args = set(args)\n    new_args = True\n    while new_args:\n        for s in args:\n            new_args = False\n            for t in args - set((s,)):\n                new_set = intersection_sets(s, t)\n                if new_set is not None:\n                    new_args = (args - set((s, t))).union(set((new_set,)))\n                    break\n            if new_args:\n                args = new_args\n                break\n    if len(args) == 1:\n        return args.pop()\n    else:\n        return Intersection(*args, evaluate=False)",
    ".sympy.sets.sets.py@@Intersection._handle_finite_sets": "def _handle_finite_sets(args):\n    fs_args, others = sift(args, lambda x: x.is_FiniteSet, binary=True)\n    if not fs_args:\n        return\n    fs_sets = [set(fs) for fs in fs_args]\n    all_elements = reduce(lambda a, b: a | b, fs_sets, set())\n    definite = set()\n    for e in all_elements:\n        inall = fuzzy_and((s.contains(e) for s in args))\n        if inall is True:\n            definite.add(e)\n        if inall is not None:\n            for s in fs_sets:\n                s.discard(e)\n    fs_elements = reduce(lambda a, b: a | b, fs_sets, set())\n    fs_symsets = [FiniteSet(*s) for s in fs_sets]\n    while fs_elements:\n        for e in fs_elements:\n            infs = fuzzy_and((s.contains(e) for s in fs_symsets))\n            if infs is True:\n                definite.add(e)\n            if infs is not None:\n                for n, s in enumerate(fs_sets):\n                    if e in s:\n                        s.remove(e)\n                        fs_symsets[n] = FiniteSet(*s)\n                fs_elements.remove(e)\n                break\n        else:\n            break\n    if not all(fs_sets):\n        fs_sets = [set()]\n    if definite:\n        fs_sets = [fs | definite for fs in fs_sets]\n    if fs_sets == [set()]:\n        return S.EmptySet\n    sets = [FiniteSet(*s) for s in fs_sets]\n    all_elements = reduce(lambda a, b: a | b, fs_sets, set())\n    is_redundant = lambda o: all((fuzzy_bool(o.contains(e)) for e in all_elements))\n    others = [o for o in others if not is_redundant(o)]\n    if others:\n        rest = Intersection(*others)\n        if rest is S.EmptySet:\n            return S.EmptySet\n        if rest.is_Intersection:\n            sets.extend(rest.args)\n        else:\n            sets.append(rest)\n    if len(sets) == 1:\n        return sets[0]\n    else:\n        return Intersection(*sets, evaluate=False)",
    ".sympy.sets.sets.py@@Set.contains": "def contains(self, other):\n    other = sympify(other, strict=True)\n    c = self._contains(other)\n    if c is None:\n        return Contains(other, self, evaluate=False)\n    b = tfn[c]\n    if b is None:\n        return c\n    return b",
    ".sympy.sets.sets.py@@Interval._contains": "def _contains(self, other):\n    if not isinstance(other, Expr) or (other is S.Infinity or other is S.NegativeInfinity or other is S.NaN or (other is S.ComplexInfinity)) or other.is_extended_real is False:\n        return false\n    if self.start is S.NegativeInfinity and self.end is S.Infinity:\n        if not other.is_extended_real is None:\n            return other.is_extended_real\n    d = Dummy()\n    return self.as_relational(d).subs(d, other)",
    ".sympy.sets.sets.py@@Interval.start": "def start(self):\n    return self._args[0]",
    ".sympy.sets.sets.py@@Interval.end": "def end(self):\n    return self._args[1]",
    ".sympy.sets.sets.py@@Set.__add__": "def __add__(self, other):\n    return self.union(other)",
    ".sympy.sets.sets.py@@Set.union": "def union(self, other):\n    return Union(self, other)",
    ".sympy.sets.sets.py@@Union.__new__": "def __new__(cls, *args, **kwargs):\n    evaluate = kwargs.get('evaluate', global_evaluate[0])\n    args = _sympify(args)\n    if evaluate:\n        args = list(cls._new_args_filter(args))\n        return simplify_union(args)\n    args = list(ordered(args, Set._infimum_key))\n    obj = Basic.__new__(cls, *args)\n    obj._argset = frozenset(args)\n    return obj",
    ".sympy.sets.sets.py@@simplify_union": "def simplify_union(args):\n    from sympy.sets.handlers.union import union_sets\n    if not args:\n        return S.EmptySet\n    for arg in args:\n        if not isinstance(arg, Set):\n            raise TypeError('Input args to Union must be Sets')\n    finite_sets = [x for x in args if x.is_FiniteSet]\n    if len(finite_sets) > 1:\n        a = (x for set in finite_sets for x in set)\n        finite_set = FiniteSet(*a)\n        args = [finite_set] + [x for x in args if not x.is_FiniteSet]\n    args = set(args)\n    new_args = True\n    while new_args:\n        for s in args:\n            new_args = False\n            for t in args - set((s,)):\n                new_set = union_sets(s, t)\n                if new_set is not None:\n                    if not isinstance(new_set, set):\n                        new_set = set((new_set,))\n                    new_args = (args - set((s, t))).union(new_set)\n                    break\n            if new_args:\n                args = new_args\n                break\n    if len(args) == 1:\n        return args.pop()\n    else:\n        return Union(*args, evaluate=False)",
    ".sympy.sets.sets.py@@EmptySet.__iter__": "def __iter__(self):\n    return iter([])",
    ".sympy.solvers.solveset.py@@domain_check": "def domain_check(f, symbol, p):\n    f, p = (sympify(f), sympify(p))\n    if p.is_infinite:\n        return False\n    return _domain_check(f, symbol, p)",
    ".sympy.solvers.solveset.py@@_domain_check": "def _domain_check(f, symbol, p):\n    if f.is_Atom and f.is_finite:\n        return True\n    elif f.subs(symbol, p).is_infinite:\n        return False\n    else:\n        return all([_domain_check(g, symbol, p) for g in f.args])",
    ".sympy.core.basic.py@@Basic.subs": "def subs(self, *args, **kwargs):\n    from sympy.core.containers import Dict\n    from sympy.utilities import default_sort_key\n    from sympy import Dummy, Symbol\n    unordered = False\n    if len(args) == 1:\n        sequence = args[0]\n        if isinstance(sequence, set):\n            unordered = True\n        elif isinstance(sequence, (Dict, Mapping)):\n            unordered = True\n            sequence = sequence.items()\n        elif not iterable(sequence):\n            from sympy.utilities.misc import filldedent\n            raise ValueError(filldedent('\\n               When a single argument is passed to subs\\n               it should be a dictionary of old: new pairs or an iterable\\n               of (old, new) tuples.'))\n    elif len(args) == 2:\n        sequence = [args]\n    else:\n        raise ValueError('subs accepts either 1 or 2 arguments')\n    sequence = list(sequence)\n    for i, s in enumerate(sequence):\n        if isinstance(s[0], string_types):\n            s = (Symbol(s[0]), s[1])\n        try:\n            s = [sympify(_, strict=not isinstance(_, string_types)) for _ in s]\n        except SympifyError:\n            sequence[i] = None\n            continue\n        sequence[i] = None if _aresame(*s) else tuple(s)\n    sequence = list(filter(None, sequence))\n    if unordered:\n        sequence = dict(sequence)\n        if not all((k.is_Atom for k in sequence)):\n            d = {}\n            for o, n in sequence.items():\n                try:\n                    ops = (o.count_ops(), len(o.args))\n                except TypeError:\n                    ops = (0, 0)\n                d.setdefault(ops, []).append((o, n))\n            newseq = []\n            for k in sorted(d.keys(), reverse=True):\n                newseq.extend(sorted([v[0] for v in d[k]], key=default_sort_key))\n            sequence = [(k, sequence[k]) for k in newseq]\n            del newseq, d\n        else:\n            sequence = sorted([(k, v) for k, v in sequence.items()], key=default_sort_key)\n    if kwargs.pop('simultaneous', False):\n        reps = {}\n        rv = self\n        kwargs['hack2'] = True\n        m = Dummy('subs_m')\n        for old, new in sequence:\n            com = new.is_commutative\n            if com is None:\n                com = True\n            d = Dummy('subs_d', commutative=com)\n            rv = rv._subs(old, d * m, **kwargs)\n            if not isinstance(rv, Basic):\n                break\n            reps[d] = new\n        reps[m] = S.One\n        return rv.xreplace(reps)\n    else:\n        rv = self\n        for old, new in sequence:\n            rv = rv._subs(old, new, **kwargs)\n            if not isinstance(rv, Basic):\n                break\n        return rv",
    ".sympy.core.basic.py@@_aresame": "def _aresame(a, b):\n    from .numbers import Number\n    from .function import AppliedUndef, UndefinedFunction as UndefFunc\n    if isinstance(a, Number) and isinstance(b, Number):\n        return a == b and a.__class__ == b.__class__\n    for i, j in zip_longest(preorder_traversal(a), preorder_traversal(b)):\n        if i != j or type(i) != type(j):\n            if isinstance(i, UndefFunc) and isinstance(j, UndefFunc) or (isinstance(i, AppliedUndef) and isinstance(j, AppliedUndef)):\n                if i.class_key() != j.class_key():\n                    return False\n            else:\n                return False\n    return True",
    ".sympy.core.basic.py@@Basic._subs": "def _subs(self, old, new, **hints):\n\n    def fallback(self, old, new):\n        hit = False\n        args = list(self.args)\n        for i, arg in enumerate(args):\n            if not hasattr(arg, '_eval_subs'):\n                continue\n            arg = arg._subs(old, new, **hints)\n            if not _aresame(arg, args[i]):\n                hit = True\n                args[i] = arg\n        if hit:\n            rv = self.func(*args)\n            hack2 = hints.get('hack2', False)\n            if hack2 and self.is_Mul and (not rv.is_Mul):\n                coeff = S.One\n                nonnumber = []\n                for i in args:\n                    if i.is_Number:\n                        coeff *= i\n                    else:\n                        nonnumber.append(i)\n                nonnumber = self.func(*nonnumber)\n                if coeff is S.One:\n                    return nonnumber\n                else:\n                    return self.func(coeff, nonnumber, evaluate=False)\n            return rv\n        return self\n    if _aresame(self, old):\n        return new\n    rv = self._eval_subs(old, new)\n    if rv is None:\n        rv = fallback(self, old, new)\n    return rv",
    ".sympy.core.add.py@@Add._eval_subs": "def _eval_subs(self, old, new):\n    if not old.is_Add:\n        if old is S.Infinity and -old in self.args:\n            return self.xreplace({-old: -new})\n        return None\n    coeff_self, terms_self = self.as_coeff_Add()\n    coeff_old, terms_old = old.as_coeff_Add()\n    if coeff_self.is_Rational and coeff_old.is_Rational:\n        if terms_self == terms_old:\n            return self.func(new, coeff_self, -coeff_old)\n        if terms_self == -terms_old:\n            return self.func(-new, coeff_self, coeff_old)\n    if coeff_self.is_Rational and coeff_old.is_Rational or coeff_self == coeff_old:\n        args_old, args_self = (self.func.make_args(terms_old), self.func.make_args(terms_self))\n        if len(args_old) < len(args_self):\n            self_set = set(args_self)\n            old_set = set(args_old)\n            if old_set < self_set:\n                ret_set = self_set - old_set\n                return self.func(new, coeff_self, -coeff_old, *[s._subs(old, new) for s in ret_set])\n            args_old = self.func.make_args(-terms_old)\n            old_set = set(args_old)\n            if old_set < self_set:\n                ret_set = self_set - old_set\n                return self.func(-new, coeff_self, coeff_old, *[s._subs(old, new) for s in ret_set])",
    ".sympy.core.basic.py@@Basic.fallback": "def fallback(self, old, new):\n    hit = False\n    args = list(self.args)\n    for i, arg in enumerate(args):\n        if not hasattr(arg, '_eval_subs'):\n            continue\n        arg = arg._subs(old, new, **hints)\n        if not _aresame(arg, args[i]):\n            hit = True\n            args[i] = arg\n    if hit:\n        rv = self.func(*args)\n        hack2 = hints.get('hack2', False)\n        if hack2 and self.is_Mul and (not rv.is_Mul):\n            coeff = S.One\n            nonnumber = []\n            for i in args:\n                if i.is_Number:\n                    coeff *= i\n                else:\n                    nonnumber.append(i)\n            nonnumber = self.func(*nonnumber)\n            if coeff is S.One:\n                return nonnumber\n            else:\n                return self.func(coeff, nonnumber, evaluate=False)\n        return rv\n    return self",
    ".sympy.core.mul.py@@Mul._eval_subs": "def _eval_subs(self, old, new):\n    from sympy.functions.elementary.complexes import sign\n    from sympy.ntheory.factor_ import multiplicity\n    from sympy.simplify.powsimp import powdenest\n    from sympy.simplify.radsimp import fraction\n    if not old.is_Mul:\n        return None\n    if old.args[0].is_Number and old.args[0] < 0:\n        if self.args[0].is_Number:\n            if self.args[0] < 0:\n                return self._subs(-old, -new)\n            return None\n\n    def base_exp(a):\n        from sympy import exp\n        if a.is_Pow or isinstance(a, exp):\n            return a.as_base_exp()\n        return (a, S.One)\n\n    def breakup(eq):\n        c, nc = (defaultdict(int), list())\n        for a in Mul.make_args(eq):\n            a = powdenest(a)\n            b, e = base_exp(a)\n            if e is not S.One:\n                co, _ = e.as_coeff_mul()\n                b = Pow(b, e / co)\n                e = co\n            if a.is_commutative:\n                c[b] += e\n            else:\n                nc.append([b, e])\n        return (c, nc)\n\n    def rejoin(b, co):\n        b, e = base_exp(b)\n        return Pow(b, e * co)\n\n    def ndiv(a, b):\n        if not b.q % a.q or not a.q % b.q:\n            return int(a / b)\n        return 0\n    rv = None\n    n, d = fraction(self)\n    self2 = self\n    if d is not S.One:\n        self2 = n._subs(old, new) / d._subs(old, new)\n        if not self2.is_Mul:\n            return self2._subs(old, new)\n        if self2 != self:\n            rv = self2\n    co_self = self2.args[0]\n    co_old = old.args[0]\n    co_xmul = None\n    if co_old.is_Rational and co_self.is_Rational:\n        if co_old != co_self:\n            co_xmul = co_self.extract_multiplicatively(co_old)\n    elif co_old.is_Rational:\n        return rv\n    c, nc = breakup(self2)\n    old_c, old_nc = breakup(old)\n    if co_xmul and co_xmul.is_Rational and (abs(co_old) != 1):\n        mult = S(multiplicity(abs(co_old), co_self))\n        c.pop(co_self)\n        if co_old in c:\n            c[co_old] += mult\n        else:\n            c[co_old] = mult\n        co_residual = co_self / co_old ** mult\n    else:\n        co_residual = 1\n    ok = True\n    if len(old_nc) > len(nc):\n        ok = False\n    elif len(old_c) > len(c):\n        ok = False\n    elif set((i[0] for i in old_nc)).difference(set((i[0] for i in nc))):\n        ok = False\n    elif set(old_c).difference(set(c)):\n        ok = False\n    elif any((sign(c[b]) != sign(old_c[b]) for b in old_c)):\n        ok = False\n    if not ok:\n        return rv\n    if not old_c:\n        cdid = None\n    else:\n        rat = []\n        for b, old_e in old_c.items():\n            c_e = c[b]\n            rat.append(ndiv(c_e, old_e))\n            if not rat[-1]:\n                return rv\n        cdid = min(rat)\n    if not old_nc:\n        ncdid = None\n        for i in range(len(nc)):\n            nc[i] = rejoin(*nc[i])\n    else:\n        ncdid = 0\n        take = len(old_nc)\n        limit = cdid or S.Infinity\n        failed = []\n        i = 0\n        while limit and i + take <= len(nc):\n            hit = False\n            rat = []\n            for j in range(take):\n                if nc[i + j][0] != old_nc[j][0]:\n                    break\n                elif j == 0:\n                    rat.append(ndiv(nc[i + j][1], old_nc[j][1]))\n                elif j == take - 1:\n                    rat.append(ndiv(nc[i + j][1], old_nc[j][1]))\n                elif nc[i + j][1] != old_nc[j][1]:\n                    break\n                else:\n                    rat.append(1)\n                j += 1\n            else:\n                ndo = min(rat)\n                if ndo:\n                    if take == 1:\n                        if cdid:\n                            ndo = min(cdid, ndo)\n                        nc[i] = Pow(new, ndo) * rejoin(nc[i][0], nc[i][1] - ndo * old_nc[0][1])\n                    else:\n                        ndo = 1\n                        l = rejoin(nc[i][0], nc[i][1] - ndo * old_nc[0][1])\n                        mid = new\n                        ir = i + take - 1\n                        r = (nc[ir][0], nc[ir][1] - ndo * old_nc[-1][1])\n                        if r[1]:\n                            if i + take < len(nc):\n                                nc[i:i + take] = [l * mid, r]\n                            else:\n                                r = rejoin(*r)\n                                nc[i:i + take] = [l * mid * r]\n                        else:\n                            nc[i:i + take] = [l * mid]\n                    limit -= ndo\n                    ncdid += ndo\n                    hit = True\n            if not hit:\n                failed.append(i)\n            i += 1\n        else:\n            if not ncdid:\n                return rv\n            failed.extend(range(i, len(nc)))\n            for i in failed:\n                nc[i] = rejoin(*nc[i]).subs(old, new)\n    if cdid is None:\n        do = ncdid\n    elif ncdid is None:\n        do = cdid\n    else:\n        do = min(ncdid, cdid)\n    margs = []\n    for b in c:\n        if b in old_c:\n            e = c[b] - old_c[b] * do\n            margs.append(rejoin(b, e))\n        else:\n            margs.append(rejoin(b.subs(old, new), c[b]))\n    if cdid and (not ncdid):\n        margs = [Pow(new, cdid)] + margs\n    return co_residual * self2.func(*margs) * self2.func(*nc)",
    ".sympy.core.numbers.py@@Number._eval_subs": "def _eval_subs(self, old, new):\n    if old == -self:\n        return -new\n    return self",
    ".sympy.core.power.py@@Pow._eval_subs": "def _eval_subs(self, old, new):\n    from sympy import exp, log, Symbol\n\n    def _check(ct1, ct2, old):\n        coeff1, terms1 = ct1\n        coeff2, terms2 = ct2\n        if terms1 == terms2:\n            if old.is_commutative:\n                pow = coeff1 / coeff2\n                try:\n                    as_int(pow, strict=False)\n                    combines = True\n                except ValueError:\n                    combines = isinstance(Pow._eval_power(Pow(*old.as_base_exp(), evaluate=False), pow), (Pow, exp, Symbol))\n                return (combines, pow, None)\n            else:\n                if not isinstance(terms1, tuple):\n                    terms1 = (terms1,)\n                if not all((term.is_integer for term in terms1)):\n                    return (False, None, None)\n                try:\n                    pow, remainder = divmod(as_int(coeff1), as_int(coeff2))\n                    if pow < 0 and remainder != 0:\n                        pow += 1\n                        remainder -= as_int(coeff2)\n                    if remainder == 0:\n                        remainder_pow = None\n                    else:\n                        remainder_pow = Mul(remainder, *terms1)\n                    return (True, pow, remainder_pow)\n                except ValueError:\n                    pass\n        return (False, None, None)\n    if old == self.base:\n        return new ** self.exp._subs(old, new)\n    if isinstance(old, self.func) and self.exp == old.exp:\n        l = log(self.base, old.base)\n        if l.is_Number:\n            return Pow(new, l)\n    if isinstance(old, self.func) and self.base == old.base:\n        if self.exp.is_Add is False:\n            ct1 = self.exp.as_independent(Symbol, as_Add=False)\n            ct2 = old.exp.as_independent(Symbol, as_Add=False)\n            ok, pow, remainder_pow = _check(ct1, ct2, old)\n            if ok:\n                result = self.func(new, pow)\n                if remainder_pow is not None:\n                    result = Mul(result, Pow(old.base, remainder_pow))\n                return result\n        else:\n            oarg = old.exp\n            new_l = []\n            o_al = []\n            ct2 = oarg.as_coeff_mul()\n            for a in self.exp.args:\n                newa = a._subs(old, new)\n                ct1 = newa.as_coeff_mul()\n                ok, pow, remainder_pow = _check(ct1, ct2, old)\n                if ok:\n                    new_l.append(new ** pow)\n                    if remainder_pow is not None:\n                        o_al.append(remainder_pow)\n                    continue\n                elif not old.is_commutative and (not newa.is_integer):\n                    return\n                o_al.append(newa)\n            if new_l:\n                expo = Add(*o_al)\n                new_l.append(Pow(self.base, expo, evaluate=False) if expo != 1 else self.base)\n                return Mul(*new_l)\n    if isinstance(old, exp) and self.exp.is_extended_real and self.base.is_positive:\n        ct1 = old.args[0].as_independent(Symbol, as_Add=False)\n        ct2 = (self.exp * log(self.base)).as_independent(Symbol, as_Add=False)\n        ok, pow, remainder_pow = _check(ct1, ct2, old)\n        if ok:\n            result = self.func(new, pow)\n            if remainder_pow is not None:\n                result = Mul(result, Pow(old.base, remainder_pow))\n            return result",
    ".sympy.core.add.py@@Add._eval_power": "def _eval_power(self, e):\n    if e.is_Rational and self.is_number:\n        from sympy.core.evalf import pure_complex\n        from sympy.core.mul import _unevaluated_Mul\n        from sympy.core.exprtools import factor_terms\n        from sympy.core.function import expand_multinomial\n        from sympy.functions.elementary.complexes import sign\n        from sympy.functions.elementary.miscellaneous import sqrt\n        ri = pure_complex(self)\n        if ri:\n            r, i = ri\n            if e.q == 2:\n                D = sqrt(r ** 2 + i ** 2)\n                if D.is_Rational:\n                    root = sqrt(factor_terms((D - r) / 2)) ** e.p\n                    return root * expand_multinomial(((D + r) / abs(i) + sign(i) * S.ImaginaryUnit) ** e.p)\n            elif e == -1:\n                return _unevaluated_Mul(r - i * S.ImaginaryUnit, 1 / (r ** 2 + i ** 2))\n    elif e.is_Number and abs(e) != 1:\n        c, m = zip(*[i.as_coeff_Mul() for i in self.args])\n        if any((i.is_Float for i in c)):\n            big = -1\n            for i in c:\n                if abs(i) >= big:\n                    big = abs(i)\n            if big > 0 and big != 1:\n                from sympy.functions.elementary.complexes import sign\n                bigs = (big, -big)\n                c = [sign(i) if i in bigs else i / big for i in c]\n                addpow = Add(*[c * m for c, m in zip(c, m)]) ** e\n                return big ** e * addpow",
    ".sympy.core.evalf.py@@pure_complex": "def pure_complex(v, or_real=False):\n    h, t = v.as_coeff_Add()\n    if not t:\n        if or_real:\n            return (h, t)\n        return\n    c, i = t.as_coeff_Mul()\n    if i is S.ImaginaryUnit:\n        return (h, c)",
    ".sympy.core.operations.py@@AssocOp._eval_evalf": "def _eval_evalf(self, prec):\n    from .add import Add\n    from .mul import Mul\n    from .symbol import Symbol\n    from .function import AppliedUndef\n    if isinstance(self, (Mul, Add)):\n        x, tail = self.as_independent(Symbol, AppliedUndef)\n        if not (tail is self.identity or (isinstance(x, AssocOp) and x.is_Function) or (x is self.identity and isinstance(tail, AssocOp))):\n            x = x._evalf(prec) if x is not self.identity else self.identity\n            args = []\n            tail_args = tuple(self.func.make_args(tail))\n            for a in tail_args:\n                newa = a._eval_evalf(prec)\n                if newa is None:\n                    args.append(a)\n                else:\n                    args.append(newa)\n            return self.func(x, *args)\n    args = []\n    for a in self.args:\n        newa = a._eval_evalf(prec)\n        if newa is None:\n            args.append(a)\n        else:\n            args.append(newa)\n    return self.func(*args)",
    ".sympy.core.numbers.py@@Rational._as_mpf_val": "def _as_mpf_val(self, prec):\n    return mlib.from_rational(self.p, self.q, prec, rnd)",
    ".sympy.core.mul.py@@Mul._eval_evalf": "def _eval_evalf(self, prec):\n    c, m = self.as_coeff_Mul()\n    if c is S.NegativeOne:\n        if m.is_Mul:\n            rv = -AssocOp._eval_evalf(m, prec)\n        else:\n            mnew = m._eval_evalf(prec)\n            if mnew is not None:\n                m = mnew\n            rv = -m\n    else:\n        rv = AssocOp._eval_evalf(self, prec)\n    if rv.is_number:\n        return rv.expand()\n    return rv",
    ".sympy.core.power.py@@Pow._eval_evalf": "def _eval_evalf(self, prec):\n    base, exp = self.as_base_exp()\n    base = base._evalf(prec)\n    if not exp.is_Integer:\n        exp = exp._evalf(prec)\n    if exp.is_negative and base.is_number and (base.is_extended_real is False):\n        base = base.conjugate() / (base * base.conjugate())._evalf(prec)\n        exp = -exp\n        return self.func(base, exp).expand()\n    return self.func(base, exp)",
    ".sympy.core.evalf.py@@EvalfMixin._evalf": "def _evalf(self, prec):\n    r = self._eval_evalf(prec)\n    if r is None:\n        r = self\n    return r",
    ".sympy.core.numbers.py@@Float._eval_is_negative": "def _eval_is_negative(self):\n    if self._mpf_ == _mpf_ninf or self._mpf_ == _mpf_inf:\n        return False\n    return self.num < 0",
    ".sympy.core.numbers.py@@Float.__nonzero__": "def __nonzero__(self):\n    return self._mpf_ != fzero",
    ".sympy.core.numbers.py@@Float._eval_is_integer": "def _eval_is_integer(self):\n    return self._mpf_ == fzero",
    ".sympy.core.numbers.py@@NaN._as_mpf_val": "def _as_mpf_val(self, prec):\n    return _mpf_nan",
    ".sympy.core.numbers.py@@Float._eval_power": "def _eval_power(self, expt):\n    if self == 0:\n        if expt.is_positive:\n            return S.Zero\n        if expt.is_negative:\n            return S.Infinity\n    if isinstance(expt, Number):\n        if isinstance(expt, Integer):\n            prec = self._prec\n            return Float._new(mlib.mpf_pow_int(self._mpf_, expt.p, prec, rnd), prec)\n        elif isinstance(expt, Rational) and expt.p == 1 and expt.q % 2 and self.is_negative:\n            return Pow(S.NegativeOne, expt, evaluate=False) * (-self)._eval_power(expt)\n        expt, prec = expt._as_mpf_op(self._prec)\n        mpfself = self._mpf_\n        try:\n            y = mpf_pow(mpfself, expt, prec, rnd)\n            return Float._new(y, prec)\n        except mlib.ComplexResult:\n            re, im = mlib.mpc_pow((mpfself, fzero), (expt, fzero), prec, rnd)\n            return Float._new(re, prec) + Float._new(im, prec) * S.ImaginaryUnit",
    ".sympy.core.numbers.py@@Float._as_mpf_op": "def _as_mpf_op(self, prec):\n    return (self._mpf_, max(prec, self._prec))",
    ".sympy.core.numbers.py@@Float.__mul__": "def __mul__(self, other):\n    if isinstance(other, Number) and global_evaluate[0]:\n        rhs, prec = other._as_mpf_op(self._prec)\n        return Float._new(mlib.mpf_mul(self._mpf_, rhs, prec, rnd), prec)\n    return Number.__mul__(self, other)",
    ".sympy.core.numbers.py@@Number._as_mpf_op": "def _as_mpf_op(self, prec):\n    prec = max(prec, self._prec)\n    return (self._as_mpf_val(prec), prec)",
    ".sympy.core.numbers.py@@Float.__add__": "def __add__(self, other):\n    if isinstance(other, Number) and global_evaluate[0]:\n        rhs, prec = other._as_mpf_op(self._prec)\n        return Float._new(mlib.mpf_add(self._mpf_, rhs, prec, rnd), prec)\n    return Number.__add__(self, other)",
    ".sympy.core.evalf.py@@evalf_add": "def evalf_add(v, prec, options):\n    res = pure_complex(v)\n    if res:\n        h, c = res\n        re, _, re_acc, _ = evalf(h, prec, options)\n        im, _, im_acc, _ = evalf(c, prec, options)\n        return (re, im, re_acc, im_acc)\n    oldmaxprec = options.get('maxprec', DEFAULT_MAXPREC)\n    i = 0\n    target_prec = prec\n    while 1:\n        options['maxprec'] = min(oldmaxprec, 2 * prec)\n        terms = [evalf(arg, prec + 10, options) for arg in v.args]\n        re, re_acc = add_terms([a[0::2] for a in terms if a[0]], prec, target_prec)\n        im, im_acc = add_terms([a[1::2] for a in terms if a[1]], prec, target_prec)\n        acc = complex_accuracy((re, im, re_acc, im_acc))\n        if acc >= target_prec:\n            if options.get('verbose'):\n                print('ADD: wanted', target_prec, 'accurate bits, got', re_acc, im_acc)\n            break\n        else:\n            if prec - target_prec > options['maxprec']:\n                break\n            prec = prec + max(10 + 2 ** i, target_prec - acc)\n            i += 1\n            if options.get('verbose'):\n                print('ADD: restarting with prec', prec)\n    options['maxprec'] = oldmaxprec\n    if iszero(re, scaled=True):\n        re = scaled_zero(re)\n    if iszero(im, scaled=True):\n        im = scaled_zero(im)\n    return (re, im, re_acc, im_acc)",
    ".sympy.core.evalf.py@@evalf_mul": "def evalf_mul(v, prec, options):\n    res = pure_complex(v)\n    if res:\n        _, h = res\n        im, _, im_acc, _ = evalf(h, prec, options)\n        return (None, im, None, im_acc)\n    args = list(v.args)\n    special = []\n    from sympy.core.numbers import Float\n    for arg in args:\n        arg = evalf(arg, prec, options)\n        if arg[0] is None:\n            continue\n        arg = Float._new(arg[0], 1)\n        if arg is S.NaN or arg.is_infinite:\n            special.append(arg)\n    if special:\n        from sympy.core.mul import Mul\n        special = Mul(*special)\n        return evalf(special, prec + 4, {})\n    acc = prec\n    working_prec = prec + len(args) + 5\n    start = man, exp, bc = (MPZ(1), 0, 1)\n    last = len(args)\n    direction = 0\n    args.append(S.One)\n    complex_factors = []\n    for i, arg in enumerate(args):\n        if i != last and pure_complex(arg):\n            args[-1] = (args[-1] * arg).expand()\n            continue\n        elif i == last and arg is S.One:\n            continue\n        re, im, re_acc, im_acc = evalf(arg, working_prec, options)\n        if re and im:\n            complex_factors.append((re, im, re_acc, im_acc))\n            continue\n        elif re:\n            (s, m, e, b), w_acc = (re, re_acc)\n        elif im:\n            (s, m, e, b), w_acc = (im, im_acc)\n            direction += 1\n        else:\n            return (None, None, None, None)\n        direction += 2 * s\n        man *= m\n        exp += e\n        bc += b\n        if bc > 3 * working_prec:\n            man >>= working_prec\n            exp += working_prec\n        acc = min(acc, w_acc)\n    sign = (direction & 2) >> 1\n    if not complex_factors:\n        v = normalize(sign, man, exp, bitcount(man), prec, rnd)\n        if direction & 1:\n            return (None, v, None, acc)\n        else:\n            return (v, None, acc, None)\n    else:\n        if (man, exp, bc) != start:\n            re, im = ((sign, man, exp, bitcount(man)), (0, MPZ(0), 0, 0))\n            i0 = 0\n        else:\n            wre, wim, wre_acc, wim_acc = complex_factors[0]\n            acc = min(acc, complex_accuracy((wre, wim, wre_acc, wim_acc)))\n            re = wre\n            im = wim\n            i0 = 1\n        for wre, wim, wre_acc, wim_acc in complex_factors[i0:]:\n            acc = min(acc, complex_accuracy((wre, wim, wre_acc, wim_acc)))\n            use_prec = working_prec\n            A = mpf_mul(re, wre, use_prec)\n            B = mpf_mul(mpf_neg(im), wim, use_prec)\n            C = mpf_mul(re, wim, use_prec)\n            D = mpf_mul(im, wre, use_prec)\n            re = mpf_add(A, B, use_prec)\n            im = mpf_add(C, D, use_prec)\n        if options.get('verbose'):\n            print('MUL: wanted', prec, 'accurate bits, got', acc)\n        if direction & 1:\n            re, im = (mpf_neg(im), re)\n        return (re, im, acc, acc)",
    ".sympy.core.expr.py@@Expr.as_coeff_Add": "def as_coeff_Add(self, rational=False):\n    return (S.Zero, self)",
    ".sympy.core.evalf.py@@bitcount": "def bitcount(n):\n    return mpmath_bitcount(abs(int(n)))",
    ".sympy.core.evalf.py@@add_terms": "def add_terms(terms, prec, target_prec):\n    terms = [t for t in terms if not iszero(t[0])]\n    if not terms:\n        return (None, None)\n    elif len(terms) == 1:\n        return terms[0]\n    special = []\n    from sympy.core.numbers import Float\n    for t in terms:\n        arg = Float._new(t[0], 1)\n        if arg is S.NaN or arg.is_infinite:\n            special.append(arg)\n    if special:\n        from sympy.core.add import Add\n        rv = evalf(Add(*special), prec + 4, {})\n        return (rv[0], rv[2])\n    working_prec = 2 * prec\n    sum_man, sum_exp, absolute_error = (0, 0, MINUS_INF)\n    for x, accuracy in terms:\n        sign, man, exp, bc = x\n        if sign:\n            man = -man\n        absolute_error = max(absolute_error, bc + exp - accuracy)\n        delta = exp - sum_exp\n        if exp >= sum_exp:\n            if delta > working_prec and (not sum_man or delta - bitcount(abs(sum_man)) > working_prec):\n                sum_man = man\n                sum_exp = exp\n            else:\n                sum_man += man << delta\n        else:\n            delta = -delta\n            if delta - bc > working_prec:\n                if not sum_man:\n                    sum_man, sum_exp = (man, exp)\n            else:\n                sum_man = (sum_man << delta) + man\n                sum_exp = exp\n    if not sum_man:\n        return scaled_zero(absolute_error)\n    if sum_man < 0:\n        sum_sign = 1\n        sum_man = -sum_man\n    else:\n        sum_sign = 0\n    sum_bc = bitcount(sum_man)\n    sum_accuracy = sum_exp + sum_bc - absolute_error\n    r = (normalize(sum_sign, sum_man, sum_exp, sum_bc, target_prec, rnd), sum_accuracy)\n    return r",
    ".sympy.core.evalf.py@@iszero": "def iszero(mpf, scaled=False):\n    if not scaled:\n        return not mpf or (not mpf[1] and (not mpf[-1]))\n    return mpf and type(mpf[0]) is list and (mpf[1] == mpf[-1] == 1)",
    ".sympy.core.evalf.py@@complex_accuracy": "def complex_accuracy(result):\n    re, im, re_acc, im_acc = result\n    if not im:\n        if not re:\n            return INF\n        return re_acc\n    if not re:\n        return im_acc\n    re_size = fastlog(re)\n    im_size = fastlog(im)\n    absolute_error = max(re_size - re_acc, im_size - im_acc)\n    relative_error = absolute_error - max(re_size, im_size)\n    return -relative_error",
    ".sympy.sets.fancysets.py@@Integers._contains": "def _contains(self, other):\n    if not isinstance(other, Expr):\n        return S.false\n    return other.is_integer",
    ".sympy.core.symbol.py@@Symbol._eval_subs": "def _eval_subs(self, old, new):\n    from sympy.core.power import Pow\n    if old.is_Pow:\n        return Pow(self, S.One, evaluate=False)._eval_subs(old, new)",
    ".sympy.core.numbers.py@@Zero._eval_power": "def _eval_power(self, expt):\n    if expt.is_positive:\n        return self\n    if expt.is_negative:\n        return S.ComplexInfinity\n    if expt.is_extended_real is False:\n        return S.NaN\n    coeff, terms = expt.as_coeff_Mul()\n    if coeff.is_negative:\n        return S.ComplexInfinity ** terms\n    if coeff is not S.One:\n        return self ** terms",
    ".sympy.polys.densearith.py@@dmp_neg": "def dmp_neg(f, u, K):\n    if not u:\n        return dup_neg(f, K)\n    v = u - 1\n    return [dmp_neg(cf, v, K) for cf in f]",
    ".sympy.core.expr.py@@Expr.as_coeff_mul": "def as_coeff_mul(self, *deps, **kwargs):\n    if deps:\n        if not self.has(*deps):\n            return (self, tuple())\n    return (S.One, (self,))",
    ".sympy.polys.densearith.py@@dup_sqr": "def dup_sqr(f, K):\n    df, h = (len(f) - 1, [])\n    for i in range(0, 2 * df + 1):\n        c = K.zero\n        jmin = max(0, i - df)\n        jmax = min(i, df)\n        n = jmax - jmin + 1\n        jmax = jmin + n // 2 - 1\n        for j in range(jmin, jmax + 1):\n            c += f[j] * f[i - j]\n        c += c\n        if n & 1:\n            elem = f[jmax + 1]\n            c += elem ** 2\n        h.append(c)\n    return dup_strip(h)",
    ".sympy.solvers.diophantine.py@@base_solution_linear": "def base_solution_linear(c, a, b, t=None):\n    a, b, c = _remove_gcd(a, b, c)\n    if c == 0:\n        if t is not None:\n            if b < 0:\n                t = -t\n            return (b * t, -a * t)\n        else:\n            return (0, 0)\n    else:\n        x0, y0, d = igcdex(abs(a), abs(b))\n        x0 *= sign(a)\n        y0 *= sign(b)\n        if divisible(c, d):\n            if t is not None:\n                if b < 0:\n                    t = -t\n                return (c * x0 + b * t, c * y0 - a * t)\n            else:\n                return (c * x0, c * y0)\n        else:\n            return (None, None)",
    ".sympy.core.numbers.py@@Integer.__rsub__": "def __rsub__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, integer_types):\n            return Integer(other - self.p)\n        elif isinstance(other, Rational):\n            return Rational(other.p - self.p * other.q, other.q, 1)\n        return Rational.__rsub__(self, other)\n    return Rational.__rsub__(self, other)",
    ".sympy.polys.densebasic.py@@_rec_inflate": "def _rec_inflate(g, M, v, i, K):\n    if not v:\n        return dup_inflate(g, M[i], K)\n    if M[i] <= 0:\n        raise IndexError('all M[i] must be positive, got %s' % M[i])\n    w, j = (v - 1, i + 1)\n    g = [_rec_inflate(c, M, w, j, K) for c in g]\n    result = [g[0]]\n    for coeff in g[1:]:\n        for _ in range(1, M[i]):\n            result.append(dmp_zero(w))\n        result.append(coeff)\n    return result",
    ".sympy.polys.densebasic.py@@dup_inflate": "def dup_inflate(f, m, K):\n    if m <= 0:\n        raise IndexError(\"'m' must be positive, got %s\" % m)\n    if m == 1 or not f:\n        return f\n    result = [f[0]]\n    for coeff in f[1:]:\n        result.extend([K.zero] * (m - 1))\n        result.append(coeff)\n    return result",
    ".sympy.ntheory.primetest.py@@mr": "def mr(n, bases):\n    from sympy.ntheory.factor_ import trailing\n    from sympy.polys.domains import ZZ\n    n = as_int(n)\n    if n < 2:\n        return False\n    s = trailing(n - 1)\n    t = n >> s\n    for base in bases:\n        if base >= n:\n            base %= n\n        if base >= 2:\n            base = ZZ(base)\n            if not _test(n, base, s, t):\n                return False\n    return True",
    ".sympy.ntheory.primetest.py@@_test": "def _test(n, base, s, t):\n    b = pow(base, t, n)\n    if b == 1 or b == n - 1:\n        return True\n    else:\n        for j in range(1, s):\n            b = pow(b, 2, n)\n            if b == n - 1:\n                return True\n            if b == 1:\n                return False\n    return False",
    ".sympy.core.numbers.py@@_literal_float": "def _literal_float(f):\n    return bool(_floatpat.match(f))",
    ".sympy.core.numbers.py@@_decimal_to_Rational_prec": "def _decimal_to_Rational_prec(dec):\n    if not dec.is_finite():\n        raise TypeError('dec must be finite, got %s.' % dec)\n    s, d, e = dec.as_tuple()\n    prec = len(d)\n    if e >= 0:\n        rv = Integer(int(dec))\n    else:\n        s = (-1) ** s\n        d = sum([di * 10 ** i for i, di in enumerate(reversed(d))])\n        rv = Rational(s * d, 10 ** (-e))\n    return (rv, prec)",
    ".sympy.printing.str.py@@StrPrinter._print_Zero": "def _print_Zero(self, expr):\n    if self._settings.get('sympy_integers', False):\n        return 'S(0)'\n    return '0'",
    ".sympy.ntheory.primetest.py@@is_square": "def is_square(n, prep=True):\n    if prep:\n        n = as_int(n)\n        if n < 0:\n            return False\n        if n in [0, 1]:\n            return True\n    m = n & 127\n    if not m * 2344881533 & m * 2716005841 & 1311242:\n        m = n % 63\n        if not m * 1028201975 & m * 3357846009 & 284246024:\n            from sympy.core.power import integer_nthroot\n            return integer_nthroot(n, 2)[1]\n    return False",
    ".sympy.core.function.py@@_mexpand": "def _mexpand(expr, recursive=False):\n    if expr is None:\n        return\n    was = None\n    while was != expr:\n        was, expr = (expr, expand_mul(expand_multinomial(expr)))\n        if not recursive:\n            break\n    return expr",
    ".sympy.core.function.py@@expand_multinomial": "def expand_multinomial(expr, deep=True):\n    return sympify(expr).expand(deep=deep, mul=False, power_exp=False, power_base=False, basic=False, multinomial=True, log=False)",
    ".sympy.core.function.py@@expand_mul": "def expand_mul(expr, deep=True):\n    return sympify(expr).expand(deep=deep, mul=True, power_exp=False, power_base=False, basic=False, multinomial=False, log=False)",
    ".sympy.ntheory.factor_.py@@_divisors": "def _divisors(n, proper=False):\n    factordict = factorint(n)\n    ps = sorted(factordict.keys())\n\n    def rec_gen(n=0):\n        if n == len(ps):\n            yield 1\n        else:\n            pows = [1]\n            for j in range(factordict[ps[n]]):\n                pows.append(pows[-1] * ps[n])\n            for q in rec_gen(n + 1):\n                for p in pows:\n                    yield (p * q)\n    if proper:\n        for p in rec_gen():\n            if p != n:\n                yield p\n    else:\n        for p in rec_gen():\n            yield p",
    ".sympy.ntheory.factor_.py@@rec_gen": "def rec_gen(n=0):\n    if n == len(ps):\n        yield 1\n    else:\n        pows = [1]\n        for j in range(factordict[ps[n]]):\n            pows.append(pows[-1] * ps[n])\n        for q in rec_gen(n + 1):\n            for p in pows:\n                yield (p * q)",
    ".sympy.solvers.diophantine.py@@is_solution_quad": "def is_solution_quad(var, coeff, u, v):\n    reps = dict(zip(var, (u, v)))\n    eq = Add(*[j * i.xreplace(reps) for i, j in coeff.items()])\n    return _mexpand(eq) == 0",
    ".sympy.polys.densearith.py@@dup_l1_norm": "def dup_l1_norm(f, K):\n    if not f:\n        return K.zero\n    else:\n        return sum(dup_abs(f, K))",
    ".sympy.core.numbers.py@@Zero.as_coeff_Mul": "def as_coeff_Mul(self, rational=False):\n    return (S.One, self)",
    ".sympy.polys.monomials.py@@monomial_min": "def monomial_min(*monoms):\n    M = list(monoms[0])\n    for N in monoms[1:]:\n        for i, n in enumerate(N):\n            M[i] = min(M[i], n)\n    return tuple(M)",
    ".sympy.polys.factortools.py@@_test_pl": "def _test_pl(fc, q, pl):\n    if q > pl // 2:\n        q = q - pl\n    if not q:\n        return True\n    return fc % q == 0",
    ".sympy.polys.factortools.py@@dmp_zz_wang_lead_coeffs": "def dmp_zz_wang_lead_coeffs(f, T, cs, E, H, A, u, K):\n    C, J, v = ([], [0] * len(E), u - 1)\n    for h in H:\n        c = dmp_one(v, K)\n        d = dup_LC(h, K) * cs\n        for i in reversed(range(len(E))):\n            k, e, (t, _) = (0, E[i], T[i])\n            while not d % e:\n                d, k = (d // e, k + 1)\n            if k != 0:\n                c, J[i] = (dmp_mul(c, dmp_pow(t, k, v, K), v, K), 1)\n        C.append(c)\n    if any((not j for j in J)):\n        raise ExtraneousFactors\n    CC, HH = ([], [])\n    for c, h in zip(C, H):\n        d = dmp_eval_tail(c, A, v, K)\n        lc = dup_LC(h, K)\n        if K.is_one(cs):\n            cc = lc // d\n        else:\n            g = K.gcd(lc, d)\n            d, cc = (d // g, lc // g)\n            h, cs = (dup_mul_ground(h, d, K), cs // d)\n        c = dmp_mul_ground(c, cc, v, K)\n        CC.append(c)\n        HH.append(h)\n    if K.is_one(cs):\n        return (f, HH, CC)\n    CCC, HHH = ([], [])\n    for c, h in zip(CC, HH):\n        CCC.append(dmp_mul_ground(c, cs, v, K))\n        HHH.append(dmp_mul_ground(h, cs, 0, K))\n    f = dmp_mul_ground(f, cs ** (len(H) - 1), u, K)\n    return (f, HHH, CCC)",
    ".sympy.polys.densebasic.py@@dmp_one": "def dmp_one(u, K):\n    return dmp_ground(K.one, u)",
    ".sympy.polys.densebasic.py@@dmp_ground": "def dmp_ground(c, u):\n    if not c:\n        return dmp_zero(u)\n    for i in range(u + 1):\n        c = [c]\n    return c",
    ".sympy.polys.factortools.py@@dmp_zz_wang_hensel_lifting": "def dmp_zz_wang_hensel_lifting(f, H, LC, A, p, u, K):\n    S, n, v = ([f], len(A), u - 1)\n    H = list(H)\n    for i, a in enumerate(reversed(A[1:])):\n        s = dmp_eval_in(S[0], a, n - i, u - i, K)\n        S.insert(0, dmp_ground_trunc(s, p, v - i, K))\n    d = max(dmp_degree_list(f, u)[1:])\n    for j, s, a in zip(range(2, n + 2), S, A):\n        G, w = (list(H), j - 1)\n        I, J = (A[:j - 2], A[j - 1:])\n        for i, (h, lc) in enumerate(zip(H, LC)):\n            lc = dmp_ground_trunc(dmp_eval_tail(lc, J, v, K), p, w - 1, K)\n            H[i] = [lc] + dmp_raise(h[1:], 1, w - 1, K)\n        m = dmp_nest([K.one, -a], w, K)\n        M = dmp_one(w, K)\n        c = dmp_sub(s, dmp_expand(H, w, K), w, K)\n        dj = dmp_degree_in(s, w, w)\n        for k in K.map(range(0, dj)):\n            if dmp_zero_p(c, w):\n                break\n            M = dmp_mul(M, m, w, K)\n            C = dmp_diff_eval_in(c, k + 1, a, w, w, K)\n            if not dmp_zero_p(C, w - 1):\n                C = dmp_quo_ground(C, K.factorial(k + 1), w - 1, K)\n                T = dmp_zz_diophantine(G, C, I, d, p, w - 1, K)\n                for i, (h, t) in enumerate(zip(H, T)):\n                    h = dmp_add_mul(h, dmp_raise(t, 1, w - 1, K), M, w, K)\n                    H[i] = dmp_ground_trunc(h, p, w, K)\n                h = dmp_sub(s, dmp_expand(H, w, K), w, K)\n                c = dmp_ground_trunc(h, p, w, K)\n    if dmp_expand(H, u, K) != f:\n        raise ExtraneousFactors\n    else:\n        return H",
    ".sympy.polys.densebasic.py@@dmp_raise": "def dmp_raise(f, l, u, K):\n    if not l:\n        return f\n    if not u:\n        if not f:\n            return dmp_zero(l)\n        k = l - 1\n        return [dmp_ground(c, k) for c in f]\n    v = u - 1\n    return [dmp_raise(c, l, v, K) for c in f]",
    ".sympy.polys.densebasic.py@@dmp_nest": "def dmp_nest(f, l, K):\n    if not isinstance(f, list):\n        return dmp_ground(f, l)\n    for i in range(l):\n        f = [f]\n    return f",
    ".sympy.polys.densearith.py@@dmp_expand": "def dmp_expand(polys, u, K):\n    if not polys:\n        return dmp_one(u, K)\n    f = polys[0]\n    for g in polys[1:]:\n        f = dmp_mul(f, g, u, K)\n    return f",
    ".sympy.polys.densebasic.py@@_rec_degree_in": "def _rec_degree_in(g, v, i, j):\n    if i == j:\n        return dmp_degree(g, v)\n    v, i = (v - 1, i + 1)\n    return max([_rec_degree_in(c, v, i, j) for c in g])",
    ".sympy.polys.domains.domain.py@@Domain.map": "def map(self, seq):\n    result = []\n    for elt in seq:\n        if isinstance(elt, list):\n            result.append(self.map(elt))\n        else:\n            result.append(self(elt))\n    return result",
    ".sympy.polys.densetools.py@@dmp_diff_eval_in": "def dmp_diff_eval_in(f, m, a, j, u, K):\n    if j > u:\n        raise IndexError('-%s <= j < %s expected, got %s' % (u, u, j))\n    if not j:\n        return dmp_eval(dmp_diff(f, m, u, K), a, u, K)\n    return _rec_diff_eval(f, m, a, u, 0, j, K)",
    ".sympy.polys.densetools.py@@_rec_diff_eval": "def _rec_diff_eval(g, m, a, v, i, j, K):\n    if i == j:\n        return dmp_eval(dmp_diff(g, m, v, K), a, v, K)\n    v, i = (v - 1, i + 1)\n    return dmp_strip([_rec_diff_eval(c, m, a, v, i, j, K) for c in g], v)",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.factorial": "def factorial(self, a):\n    return python_factorial(a)",
    ".sympy.polys.domains.groundtypes.py@@python_factorial": "def python_factorial(n):\n    return int(mlib.ifac(n))",
    ".sympy.polys.factortools.py@@dmp_zz_diophantine": "def dmp_zz_diophantine(F, c, A, d, p, u, K):\n    if not A:\n        S = [[] for _ in F]\n        n = dup_degree(c)\n        for i, coeff in enumerate(c):\n            if not coeff:\n                continue\n            T = dup_zz_diophantine(F, n - i, p, K)\n            for j, (s, t) in enumerate(zip(S, T)):\n                t = dup_mul_ground(t, coeff, K)\n                S[j] = dup_trunc(dup_add(s, t, K), p, K)\n    else:\n        n = len(A)\n        e = dmp_expand(F, u, K)\n        a, A = (A[-1], A[:-1])\n        B, G = ([], [])\n        for f in F:\n            B.append(dmp_quo(e, f, u, K))\n            G.append(dmp_eval_in(f, a, n, u, K))\n        C = dmp_eval_in(c, a, n, u, K)\n        v = u - 1\n        S = dmp_zz_diophantine(G, C, A, d, p, v, K)\n        S = [dmp_raise(s, 1, v, K) for s in S]\n        for s, b in zip(S, B):\n            c = dmp_sub_mul(c, s, b, u, K)\n        c = dmp_ground_trunc(c, p, u, K)\n        m = dmp_nest([K.one, -a], n, K)\n        M = dmp_one(n, K)\n        for k in K.map(range(0, d)):\n            if dmp_zero_p(c, u):\n                break\n            M = dmp_mul(M, m, u, K)\n            C = dmp_diff_eval_in(c, k + 1, a, n, u, K)\n            if not dmp_zero_p(C, v):\n                C = dmp_quo_ground(C, K.factorial(k + 1), v, K)\n                T = dmp_zz_diophantine(G, C, A, d, p, v, K)\n                for i, t in enumerate(T):\n                    T[i] = dmp_mul(dmp_raise(t, 1, v, K), M, u, K)\n                for i, (s, t) in enumerate(zip(S, T)):\n                    S[i] = dmp_add(s, t, u, K)\n                for t, b in zip(T, B):\n                    c = dmp_sub_mul(c, t, b, u, K)\n                c = dmp_ground_trunc(c, p, u, K)\n        S = [dmp_ground_trunc(s, p, u, K) for s in S]\n    return S",
    ".sympy.polys.factortools.py@@dup_zz_diophantine": "def dup_zz_diophantine(F, m, p, K):\n    if len(F) == 2:\n        a, b = F\n        f = gf_from_int_poly(a, p)\n        g = gf_from_int_poly(b, p)\n        s, t, G = gf_gcdex(g, f, p, K)\n        s = gf_lshift(s, m, K)\n        t = gf_lshift(t, m, K)\n        q, s = gf_div(s, f, p, K)\n        t = gf_add_mul(t, q, g, p, K)\n        s = gf_to_int_poly(s, p)\n        t = gf_to_int_poly(t, p)\n        result = [s, t]\n    else:\n        G = [F[-1]]\n        for f in reversed(F[1:-1]):\n            G.insert(0, dup_mul(f, G[0], K))\n        S, T = ([], [[1]])\n        for f, g in zip(F, G):\n            t, s = dmp_zz_diophantine([g, f], T[-1], [], 0, p, 1, K)\n            T.append(t)\n            S.append(s)\n        result, S = ([], S + [T[-1]])\n        for s, f in zip(S, F):\n            s = gf_from_int_poly(s, p)\n            f = gf_from_int_poly(f, p)\n            r = gf_rem(gf_lshift(s, m, K), f, p, K)\n            s = gf_to_int_poly(r, p)\n            result.append(s)\n    return result",
    ".sympy.polys.galoistools.py@@gf_lshift": "def gf_lshift(f, n, K):\n    if not f:\n        return f\n    else:\n        return f + [K.zero] * n",
    ".sympy.polys.galoistools.py@@gf_add_mul": "def gf_add_mul(f, g, h, p, K):\n    return gf_add(f, gf_mul(g, h, p, K), p, K)",
    ".sympy.polys.densearith.py@@dmp_add_mul": "def dmp_add_mul(f, g, h, u, K):\n    return dmp_add(f, dmp_mul(g, h, u, K), u, K)",
    ".sympy.core.numbers.py@@Integer._eval_is_composite": "def _eval_is_composite(self):\n    if self > 1:\n        return fuzzy_not(self.is_prime)\n    else:\n        return False",
    ".sympy.core.numbers.py@@Integer.__gt__": "def __gt__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if other.is_Integer:\n        return _sympify(self.p > other.p)\n    return Rational.__gt__(self, other)"
}