{
    ".django.utils.formats.py@@get_format": "def get_format(format_type, lang=None, use_l10n=None):\n    if use_l10n is None:\n        use_l10n = True\n    if use_l10n and lang is None:\n        lang = get_language()\n    format_type = str(format_type)\n    cache_key = (format_type, lang)\n    try:\n        return _format_cache[cache_key]\n    except KeyError:\n        pass\n    val = None\n    if use_l10n:\n        for module in get_format_modules(lang):\n            val = getattr(module, format_type, None)\n            if val is not None:\n                break\n    if val is None:\n        if format_type not in FORMAT_SETTINGS:\n            return format_type\n        val = getattr(settings, format_type)\n    elif format_type in ISO_INPUT_FORMATS:\n        val = list(val)\n        for iso_input in ISO_INPUT_FORMATS.get(format_type, ()):\n            if iso_input not in val:\n                val.append(iso_input)\n    _format_cache[cache_key] = val\n    return val",
    ".django.utils.translation.__init__.py@@get_language": "def get_language():\n    return _trans.get_language()",
    ".django.utils.translation.trans_real.py@@get_language": "def get_language():\n    t = getattr(_active, 'value', None)\n    if t is not None:\n        try:\n            return t.to_language()\n        except AttributeError:\n            pass\n    return settings.LANGUAGE_CODE",
    ".django.utils.translation.trans_real.py@@DjangoTranslation.to_language": "def to_language(self):\n    return self.__to_language",
    ".django.utils.formats.py@@sanitize_strftime_format": "def sanitize_strftime_format(fmt):\n    if datetime.date(1, 1, 1).strftime('%Y') == '0001':\n        return fmt\n    mapping = {'C': 2, 'F': 10, 'G': 4, 'Y': 4}\n    return re.sub('((?:^|[^%])(?:%%)*)%([CFGY])', lambda m: '%s%%0%s%s' % (m[1], mapping[m[2]], m[2]), fmt)",
    ".django.utils.formats.py@@get_format_modules": "def get_format_modules(lang=None):\n    if lang is None:\n        lang = get_language()\n    if lang not in _format_modules_cache:\n        _format_modules_cache[lang] = list(iter_format_modules(lang, settings.FORMAT_MODULE_PATH))\n    return _format_modules_cache[lang]",
    ".django.utils.functional.py@@LazyObject.__getattribute__": "def __getattribute__(self, name):\n    if name == '_wrapped':\n        return super().__getattribute__(name)\n    value = super().__getattribute__(name)\n    if not getattr(value, '_mask_wrapped', True):\n        raise AttributeError\n    return value",
    ".django.utils.formats.py@@iter_format_modules": "def iter_format_modules(lang, format_module_path=None):\n    if not check_for_language(lang):\n        return\n    if format_module_path is None:\n        format_module_path = settings.FORMAT_MODULE_PATH\n    format_locations = []\n    if format_module_path:\n        if isinstance(format_module_path, str):\n            format_module_path = [format_module_path]\n        for path in format_module_path:\n            format_locations.append(path + '.%s')\n    format_locations.append('django.conf.locale.%s')\n    locale = to_locale(lang)\n    locales = [locale]\n    if '_' in locale:\n        locales.append(locale.split('_')[0])\n    for location in format_locations:\n        for loc in locales:\n            try:\n                yield import_module('%s.formats' % (location % loc))\n            except ImportError:\n                pass",
    ".django.utils.translation.__init__.py@@check_for_language": "def check_for_language(lang_code):\n    return _trans.check_for_language(lang_code)",
    ".django.utils.translation.trans_real.py@@check_for_language": "def check_for_language(lang_code):\n    if lang_code is None or not language_code_re.search(lang_code):\n        return False\n    return any((gettext_module.find('django', path, [to_locale(lang_code)]) is not None for path in all_locale_paths()))",
    ".django.utils.functional.py@@inner": "def inner(self, *args):\n    if (_wrapped := self._wrapped) is empty:\n        self._setup()\n        _wrapped = self._wrapped\n    return func(_wrapped, *args)",
    ".django.utils.translation.trans_real.py@@all_locale_paths": "def all_locale_paths():\n    globalpath = os.path.join(os.path.dirname(sys.modules[settings.__module__].__file__), 'locale')\n    app_paths = []\n    for app_config in apps.get_app_configs():\n        locale_path = os.path.join(app_config.path, 'locale')\n        if os.path.exists(locale_path):\n            app_paths.append(locale_path)\n    return [globalpath, *settings.LOCALE_PATHS, *app_paths]",
    ".django.apps.registry.py@@Apps.get_app_configs": "def get_app_configs(self):\n    self.check_apps_ready()\n    return self.app_configs.values()",
    ".django.apps.registry.py@@Apps.check_apps_ready": "def check_apps_ready(self):\n    if not self.apps_ready:\n        from django.conf import settings\n        settings.INSTALLED_APPS\n        raise AppRegistryNotReady(\"Apps aren't loaded yet.\")",
    ".django.utils.translation.__init__.py@@to_locale": "def to_locale(language):\n    lang, _, country = language.lower().partition('-')\n    if not country:\n        return language[:3].lower() + language[3:]\n    country, _, tail = country.partition('-')\n    country = country.title() if len(country) > 2 else country.upper()\n    if tail:\n        country += '-' + tail\n    return lang + '_' + country",
    ".django.conf.__init__.py@@LazySettings.__getattr__": "def __getattr__(self, name):\n    if (_wrapped := self._wrapped) is empty:\n        self._setup(name)\n        _wrapped = self._wrapped\n    val = getattr(_wrapped, name)\n    if name in {'MEDIA_URL', 'STATIC_URL'} and val is not None:\n        val = self._add_script_prefix(val)\n    elif name == 'SECRET_KEY' and (not val):\n        raise ImproperlyConfigured('The SECRET_KEY setting must not be empty.')\n    self.__dict__[name] = val\n    return val",
    ".django.conf.__init__.py@@UserSettingsHolder.__getattr__": "def __getattr__(self, name):\n    if not name.isupper() or name in self._deleted:\n        raise AttributeError\n    return getattr(self.default_settings, name)"
}