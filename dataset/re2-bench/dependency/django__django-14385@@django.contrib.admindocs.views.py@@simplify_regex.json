{
    ".django.contrib.admindocs.utils.py@@replace_named_groups": "def replace_named_groups(pattern):\n    named_group_indices = [(m.start(0), m.end(0), m[1]) for m in named_group_matcher.finditer(pattern)]\n    group_pattern_and_name = []\n    for start, end, group_name in named_group_indices:\n        unmatched_open_brackets, prev_char = (1, None)\n        for idx, val in enumerate(pattern[end:]):\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n            if unmatched_open_brackets == 0:\n                group_pattern_and_name.append((pattern[start:end + idx + 1], group_name))\n                break\n    for group_pattern, group_name in group_pattern_and_name:\n        pattern = pattern.replace(group_pattern, group_name)\n    return pattern",
    ".django.utils.functional.py@@inner": "def inner(self, *args):\n    if self._wrapped is empty:\n        self._setup()\n    return func(self._wrapped, *args)",
    ".django.utils.functional.py@@SimpleLazyObject._setup": "def _setup(self):\n    self._wrapped = self._setupfunc()",
    ".django.utils.regex_helper.py@@_compile": "def _compile():\n    if isinstance(regex, (str, bytes)):\n        return re.compile(regex, flags)\n    else:\n        assert not flags, 'flags must be empty if regex is passed pre-compiled'\n        return regex",
    ".django.utils.functional.py@@LazyObject.__setattr__": "def __setattr__(self, name, value):\n    if name == '_wrapped':\n        self.__dict__['_wrapped'] = value\n    else:\n        if self._wrapped is empty:\n            self._setup()\n        setattr(self._wrapped, name, value)",
    ".django.contrib.admindocs.utils.py@@replace_unnamed_groups": "def replace_unnamed_groups(pattern):\n    unnamed_group_indices = [m.start(0) for m in unnamed_group_matcher.finditer(pattern)]\n    group_indices = []\n    for start in unnamed_group_indices:\n        unmatched_open_brackets, prev_char = (1, None)\n        for idx, val in enumerate(pattern[start + 1:]):\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n            if unmatched_open_brackets == 0:\n                group_indices.append((start, start + 2 + idx))\n                break\n    group_start_end_indices = []\n    prev_end = None\n    for start, end in group_indices:\n        if prev_end and start > prev_end or not prev_end:\n            group_start_end_indices.append((start, end))\n        prev_end = end\n    if group_start_end_indices:\n        final_pattern, prev_end = ([], None)\n        for start, end in group_start_end_indices:\n            if prev_end:\n                final_pattern.append(pattern[prev_end:start])\n            final_pattern.append(pattern[:start] + '<var>')\n            prev_end = end\n        final_pattern.append(pattern[prev_end:])\n        return ''.join(final_pattern)\n    else:\n        return pattern",
    ".django.contrib.admindocs.utils.py@@replace_metacharacters": "def replace_metacharacters(pattern):\n    return re.sub('((?:^|(?<!\\\\\\\\))(?:\\\\\\\\\\\\\\\\)*)(\\\\\\\\?)([?*+^$]|\\\\\\\\[bBAZ])', lambda m: m[1] + m[3] if m[2] else m[1], pattern)"
}