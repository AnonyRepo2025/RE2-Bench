{
    ".django.db.models.constraints.py@@BaseConstraint.deconstruct": "def deconstruct(self):\n    path = '%s.%s' % (self.__class__.__module__, self.__class__.__name__)\n    path = path.replace('django.db.models.constraints', 'django.db.models')\n    kwargs = {'name': self.name}\n    if self.violation_error_message is not None and self.violation_error_message != self.default_violation_error_message:\n        kwargs['violation_error_message'] = self.violation_error_message\n    if self.violation_error_code is not None:\n        kwargs['violation_error_code'] = self.violation_error_code\n    return (path, (), kwargs)",
    ".django.utils.translation.__init__.py@@gettext": "def gettext(message):\n    return _trans.gettext(message)",
    ".django.utils.translation.trans_real.py@@gettext": "def gettext(message):\n    global _default\n    eol_message = message.replace('\\r\\n', '\\n').replace('\\r', '\\n')\n    if eol_message:\n        _default = _default or translation(settings.LANGUAGE_CODE)\n        translation_object = getattr(_active, 'value', _default)\n        result = translation_object.gettext(eol_message)\n    else:\n        result = type(message)('')\n    if isinstance(message, SafeData):\n        return mark_safe(result)\n    return result",
    ".django.utils.translation.trans_real.py@@TranslationCatalog.get": "def get(self, key, default=None):\n    missing = object()\n    for cat in self._catalogs:\n        result = cat.get(key, missing)\n        if result is not missing:\n            return result\n    return default"
}