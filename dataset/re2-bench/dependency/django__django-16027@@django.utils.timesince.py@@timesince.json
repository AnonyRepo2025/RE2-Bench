{
    ".django.utils.translation.__init__.py@@ngettext": "def ngettext(singular, plural, number):\n    return _trans.ngettext(singular, plural, number)",
    ".django.utils.translation.__init__.py@@Trans.__getattr__": "def __getattr__(self, real_name):\n    from django.conf import settings\n    if settings.USE_I18N:\n        from django.utils.translation import trans_real as trans\n        from django.utils.translation.reloader import translation_file_changed, watch_for_translation_changes\n        autoreload_started.connect(watch_for_translation_changes, dispatch_uid='translation_file_changed')\n        file_changed.connect(translation_file_changed, dispatch_uid='translation_file_changed')\n    else:\n        from django.utils.translation import trans_null as trans\n    setattr(self, real_name, getattr(trans, real_name))\n    return getattr(trans, real_name)",
    ".django.utils.functional.py@@LazyObject.__getattribute__": "def __getattribute__(self, name):\n    if name == '_wrapped':\n        return super().__getattribute__(name)\n    value = super().__getattribute__(name)\n    if not getattr(value, '_mask_wrapped', True):\n        raise AttributeError\n    return value",
    ".django.dispatch.dispatcher.py@@Signal.connect": "def connect(self, receiver, sender=None, weak=True, dispatch_uid=None):\n    from django.conf import settings\n    if settings.configured and settings.DEBUG:\n        if not callable(receiver):\n            raise TypeError('Signal receivers must be callable.')\n        if not func_accepts_kwargs(receiver):\n            raise ValueError('Signal receivers must accept keyword arguments (**kwargs).')\n    if dispatch_uid:\n        lookup_key = (dispatch_uid, _make_id(sender))\n    else:\n        lookup_key = (_make_id(receiver), _make_id(sender))\n    if weak:\n        ref = weakref.ref\n        receiver_object = receiver\n        if hasattr(receiver, '__self__') and hasattr(receiver, '__func__'):\n            ref = weakref.WeakMethod\n            receiver_object = receiver.__self__\n        receiver = ref(receiver)\n        weakref.finalize(receiver_object, self._remove_receiver)\n    with self.lock:\n        self._clear_dead_receivers()\n        if not any((r_key == lookup_key for r_key, _ in self.receivers)):\n            self.receivers.append((lookup_key, receiver))\n        self.sender_receivers_cache.clear()",
    ".django.conf.__init__.py@@LazySettings.configured": "def configured(self):\n    return self._wrapped is not empty",
    ".django.dispatch.dispatcher.py@@_make_id": "def _make_id(target):\n    if hasattr(target, '__func__'):\n        return (id(target.__self__), id(target.__func__))\n    return id(target)",
    ".django.dispatch.dispatcher.py@@Signal._clear_dead_receivers": "def _clear_dead_receivers(self):\n    if self._dead_receivers:\n        self._dead_receivers = False\n        self.receivers = [r for r in self.receivers if not (isinstance(r[1], weakref.ReferenceType) and r[1]() is None)]",
    ".django.utils.translation.trans_real.py@@ngettext": "def ngettext(singular, plural, number):\n    return do_ntranslate(singular, plural, number, 'ngettext')",
    ".django.utils.translation.trans_real.py@@do_ntranslate": "def do_ntranslate(singular, plural, number, translation_function):\n    global _default\n    t = getattr(_active, 'value', None)\n    if t is not None:\n        return getattr(t, translation_function)(singular, plural, number)\n    if _default is None:\n        _default = translation(settings.LANGUAGE_CODE)\n    return getattr(_default, translation_function)(singular, plural, number)",
    ".django.utils.translation.trans_real.py@@DjangoTranslation.ngettext": "def ngettext(self, msgid1, msgid2, n):\n    try:\n        tmsg = self._catalog.plural(msgid1, n)\n    except KeyError:\n        if self._fallback:\n            return self._fallback.ngettext(msgid1, msgid2, n)\n        if n == 1:\n            tmsg = msgid1\n        else:\n            tmsg = msgid2\n    return tmsg",
    ".django.utils.translation.trans_real.py@@TranslationCatalog.plural": "def plural(self, msgid, num):\n    for cat, plural in zip(self._catalogs, self._plurals):\n        tmsg = cat.get((msgid, plural(num)))\n        if tmsg is not None:\n            return tmsg\n    raise KeyError",
    ".django.utils.html.py@@avoid_wrapping": "def avoid_wrapping(value):\n    return value.replace(' ', '\\xa0')",
    ".django.utils.timezone.py@@is_aware": "def is_aware(value):\n    return value.utcoffset() is not None",
    ".django.utils.translation.__init__.py@@npgettext": "def npgettext(context, singular, plural, number):\n    return _trans.npgettext(context, singular, plural, number)",
    ".django.utils.translation.trans_real.py@@npgettext": "def npgettext(context, singular, plural, number):\n    msgs_with_ctxt = ('%s%s%s' % (context, CONTEXT_SEPARATOR, singular), '%s%s%s' % (context, CONTEXT_SEPARATOR, plural), number)\n    result = ngettext(*msgs_with_ctxt)\n    if CONTEXT_SEPARATOR in result:\n        result = ngettext(singular, plural, number)\n    return result"
}