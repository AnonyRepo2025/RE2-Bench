{
    ".sympy.core.compatibility.py@@as_int": "def as_int(n, strict=True):\n    from sympy.core.numbers import Integer\n    try:\n        if strict and (not isinstance(n, SYMPY_INTS + (Integer,))):\n            raise TypeError\n        result = int(n)\n        if result != n:\n            raise TypeError\n        return result\n    except TypeError:\n        raise ValueError('%s is not an integer' % (n,))",
    ".sympy.ntheory.factor_.py@@_factorint_small": "def _factorint_small(factors, n, limit, fail_max):\n\n    def done(n, d):\n        if d * d <= n:\n            return (n, d)\n        return (n, 0)\n    d = 2\n    m = trailing(n)\n    if m:\n        factors[d] = m\n        n >>= m\n    d = 3\n    if limit < d:\n        if n > 1:\n            factors[n] = 1\n        return done(n, d)\n    m = 0\n    while n % d == 0:\n        n //= d\n        m += 1\n        if m == 20:\n            mm = multiplicity(d, n)\n            m += mm\n            n //= d ** mm\n            break\n    if m:\n        factors[d] = m\n    if limit * limit > n:\n        maxx = 0\n    else:\n        maxx = limit * limit\n    dd = maxx or n\n    d = 5\n    fails = 0\n    while fails < fail_max:\n        if d * d > dd:\n            break\n        m = 0\n        while n % d == 0:\n            n //= d\n            m += 1\n            if m == 20:\n                mm = multiplicity(d, n)\n                m += mm\n                n //= d ** mm\n                break\n        if m:\n            factors[d] = m\n            dd = maxx or n\n            fails = 0\n        else:\n            fails += 1\n        d += 2\n        if d * d > dd:\n            break\n        m = 0\n        while n % d == 0:\n            n //= d\n            m += 1\n            if m == 20:\n                mm = multiplicity(d, n)\n                m += mm\n                n //= d ** mm\n                break\n        if m:\n            factors[d] = m\n            dd = maxx or n\n            fails = 0\n        else:\n            fails += 1\n        d += 4\n    return done(n, d)",
    ".sympy.ntheory.factor_.py@@trailing": "def trailing(n):\n    n = abs(int(n))\n    if not n:\n        return 0\n    low_byte = n & 255\n    if low_byte:\n        return small_trailing[low_byte]\n    z = bitcount(n) - 1\n    if isinstance(z, SYMPY_INTS):\n        if n == 1 << z:\n            return z\n    if z < 300:\n        t = 8\n        n >>= 8\n        while not n & 255:\n            n >>= 8\n            t += 8\n        return t + small_trailing[n & 255]\n    t = 0\n    p = 8\n    while not n & 1:\n        while not n & (1 << p) - 1:\n            n >>= p\n            t += p\n            p *= 2\n        p //= 2\n    return t",
    ".sympy.ntheory.factor_.py@@done": "def done(n, d):\n    if d * d <= n:\n        return (n, d)\n    return (n, 0)",
    ".sympy.core.power.py@@integer_nthroot": "def integer_nthroot(y, n):\n    y, n = (as_int(y), as_int(n))\n    if y < 0:\n        raise ValueError('y must be nonnegative')\n    if n < 1:\n        raise ValueError('n must be positive')\n    if y in (0, 1):\n        return (y, True)\n    if n == 1:\n        return (y, True)\n    if n == 2:\n        x, rem = mpmath_sqrtrem(y)\n        return (int(x), not rem)\n    if n > y:\n        return (1, False)\n    try:\n        guess = int(y ** (1.0 / n) + 0.5)\n    except OverflowError:\n        exp = _log(y, 2) / n\n        if exp > 53:\n            shift = int(exp - 53)\n            guess = int(2.0 ** (exp - shift) + 1) << shift\n        else:\n            guess = int(2.0 ** exp)\n    if guess > 2 ** 50:\n        xprev, x = (-1, guess)\n        while 1:\n            t = x ** (n - 1)\n            xprev, x = (x, ((n - 1) * x + y // t) // n)\n            if abs(x - xprev) < 2:\n                break\n    else:\n        x = guess\n    t = x ** n\n    while t < y:\n        x += 1\n        t = x ** n\n    while t > y:\n        x -= 1\n        t = x ** n\n    return (int(x), t == y)",
    ".sympy.ntheory.factor_.py@@_check_termination": "def _check_termination(factors, n, limitp1, use_trial, use_rho, use_pm1, verbose):\n    if verbose:\n        print('Check for termination')\n    p = perfect_power(n, factor=False)\n    if p is not False:\n        base, exp = p\n        if limitp1:\n            limit = limitp1 - 1\n        else:\n            limit = limitp1\n        facs = factorint(base, limit, use_trial, use_rho, use_pm1, verbose=False)\n        for b, e in facs.items():\n            if verbose:\n                print(factor_msg % (b, e))\n            factors[b] = exp * e\n        raise StopIteration\n    if isprime(n):\n        factors[int(n)] = 1\n        raise StopIteration\n    if n == 1:\n        raise StopIteration",
    ".sympy.ntheory.factor_.py@@perfect_power": "def perfect_power(n, candidates=None, big=True, factor=True):\n    from sympy.core.power import integer_nthroot\n    n = as_int(n)\n    if n < 3:\n        if n < 1:\n            raise ValueError('expecting positive n')\n        return False\n    logn = math.log(n, 2)\n    max_possible = int(logn) + 2\n    not_square = n % 10 in [2, 3, 7, 8]\n    min_possible = 2 + not_square\n    if not candidates:\n        candidates = primerange(min_possible, max_possible)\n    else:\n        candidates = sorted([i for i in candidates if min_possible <= i < max_possible])\n        if n % 2 == 0:\n            e = trailing(n)\n            candidates = [i for i in candidates if e % i == 0]\n        if big:\n            candidates = reversed(candidates)\n        for e in candidates:\n            r, ok = integer_nthroot(n, e)\n            if ok:\n                return (r, e)\n        return False\n\n    def _factors():\n        rv = 2 + n % 2\n        while True:\n            yield rv\n            rv = nextprime(rv)\n    for fac, e in zip(_factors(), candidates):\n        if factor and n % fac == 0:\n            if fac == 2:\n                e = trailing(n)\n            else:\n                e = multiplicity(fac, n)\n            if e == 1:\n                return False\n            r, exact = integer_nthroot(n, e)\n            if not exact:\n                m = n // fac ** e\n                rE = perfect_power(m, candidates=divisors(e, generator=True))\n                if not rE:\n                    return False\n                else:\n                    r, E = rE\n                    r, e = (fac ** (e // E) * r, E)\n            if not big:\n                e0 = primefactors(e)\n                if e0[0] != e:\n                    r, e = (r ** (e // e0[0]), e0[0])\n            return (r, e)\n        if logn / e < 40:\n            b = 2.0 ** (logn / e)\n            if abs(int(b + 0.5) - b) > 0.01:\n                continue\n        r, exact = integer_nthroot(n, e)\n        if exact:\n            if big:\n                m = perfect_power(r, big=big, factor=factor)\n                if m:\n                    r, e = (m[0], e * m[1])\n            return (int(r), e)\n    return False",
    ".sympy.ntheory.factor_.py@@_factors": "def _factors():\n    rv = 2 + n % 2\n    while True:\n        yield rv\n        rv = nextprime(rv)",
    ".sympy.ntheory.generate.py@@primerange": "def primerange(a, b):\n    from sympy.functions.elementary.integers import ceiling\n    if a >= b:\n        return\n    if b <= sieve._list[-1]:\n        for i in sieve.primerange(a, b):\n            yield i\n        return\n    a = as_int(ceiling(a)) - 1\n    b = as_int(ceiling(b))\n    while 1:\n        a = nextprime(a)\n        if a < b:\n            yield a\n        else:\n            return",
    ".sympy.ntheory.generate.py@@Sieve.primerange": "def primerange(self, a, b):\n    from sympy.functions.elementary.integers import ceiling\n    a = max(2, as_int(ceiling(a)))\n    b = as_int(ceiling(b))\n    if a >= b:\n        return\n    self.extend(b)\n    i = self.search(a)[1]\n    maxi = len(self._list) + 1\n    while i < maxi:\n        p = self._list[i - 1]\n        if p < b:\n            yield p\n            i += 1\n        else:\n            return",
    ".sympy.core.function.py@@Function.__new__": "def __new__(cls, *args, **options):\n    if cls is Function:\n        return UndefinedFunction(*args, **options)\n    n = len(args)\n    if n not in cls.nargs:\n        temp = '%(name)s takes %(qual)s %(args)s argument%(plural)s (%(given)s given)'\n        raise TypeError(temp % {'name': cls, 'qual': 'exactly' if len(cls.nargs) == 1 else 'at least', 'args': min(cls.nargs), 'plural': 's' * (min(cls.nargs) != 1), 'given': n})\n    evaluate = options.get('evaluate', global_evaluate[0])\n    result = super(Function, cls).__new__(cls, *args, **options)\n    if evaluate and isinstance(result, cls) and result.args:\n        pr2 = min((cls._should_evalf(a) for a in result.args))\n        if pr2 > 0:\n            pr = max((cls._should_evalf(a) for a in result.args))\n            result = result.evalf(mlib.libmpf.prec_to_dps(pr))\n    return result",
    ".sympy.core.function.py@@FunctionClass.nargs": "def nargs(self):\n    from sympy.sets.sets import FiniteSet\n    return FiniteSet(*self._nargs) if self._nargs else S.Naturals0",
    ".sympy.sets.sets.py@@FiniteSet.__new__": "def __new__(cls, *args, **kwargs):\n    evaluate = kwargs.get('evaluate', global_evaluate[0])\n    if evaluate:\n        args = list(map(sympify, args))\n        if len(args) == 0:\n            return EmptySet()\n    else:\n        args = list(map(sympify, args))\n    args = list(ordered(set(args), Set._infimum_key))\n    obj = Basic.__new__(cls, *args)\n    return obj",
    ".sympy.core.sympify.py@@sympify": "def sympify(a, locals=None, convert_xor=True, strict=False, rational=False, evaluate=None):\n    is_sympy = getattr(a, '__sympy__', None)\n    if is_sympy is not None:\n        return a\n    if isinstance(a, CantSympify):\n        raise SympifyError(a)\n    cls = getattr(a, '__class__', None)\n    if cls is None:\n        cls = type(a)\n    conv = converter.get(cls, None)\n    if conv is not None:\n        return conv(a)\n    for superclass in getmro(cls):\n        try:\n            return converter[superclass](a)\n        except KeyError:\n            continue\n    if cls is type(None):\n        if strict:\n            raise SympifyError(a)\n        else:\n            return a\n    if evaluate is None:\n        if global_evaluate[0] is False:\n            evaluate = global_evaluate[0]\n        else:\n            evaluate = True\n    if type(a).__module__ == 'numpy':\n        import numpy as np\n        if np.isscalar(a):\n            return _convert_numpy_types(a, locals=locals, convert_xor=convert_xor, strict=strict, rational=rational, evaluate=evaluate)\n    _sympy_ = getattr(a, '_sympy_', None)\n    if _sympy_ is not None:\n        try:\n            return a._sympy_()\n        except AttributeError:\n            pass\n    if not strict:\n        flat = getattr(a, 'flat', None)\n        if flat is not None:\n            shape = getattr(a, 'shape', None)\n            if shape is not None:\n                from ..tensor.array import Array\n                return Array(a.flat, a.shape)\n    if not isinstance(a, string_types):\n        for coerce in (float, int):\n            try:\n                coerced = coerce(a)\n            except (TypeError, ValueError):\n                continue\n            except AttributeError:\n                continue\n            try:\n                return sympify(coerced)\n            except SympifyError:\n                continue\n    if strict:\n        raise SympifyError(a)\n    if iterable(a):\n        try:\n            return type(a)([sympify(x, locals=locals, convert_xor=convert_xor, rational=rational) for x in a])\n        except TypeError:\n            pass\n    if isinstance(a, dict):\n        try:\n            return type(a)([sympify(x, locals=locals, convert_xor=convert_xor, rational=rational) for x in a.items()])\n        except TypeError:\n            pass\n    try:\n        from .compatibility import unicode\n        a = unicode(a)\n    except Exception as exc:\n        raise SympifyError(a, exc)\n    from sympy.parsing.sympy_parser import parse_expr, TokenError, standard_transformations\n    from sympy.parsing.sympy_parser import convert_xor as t_convert_xor\n    from sympy.parsing.sympy_parser import rationalize as t_rationalize\n    transformations = standard_transformations\n    if rational:\n        transformations += (t_rationalize,)\n    if convert_xor:\n        transformations += (t_convert_xor,)\n    try:\n        a = a.replace('\\n', '')\n        expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n    except (TokenError, SyntaxError) as exc:\n        raise SympifyError('could not parse %r' % a, exc)\n    return expr",
    ".sympy.core.numbers.py@@Integer.__new__": "def __new__(cls, i):\n    if isinstance(i, string_types):\n        i = i.replace(' ', '')\n    try:\n        ival = int(i)\n    except TypeError:\n        raise TypeError('Argument of Integer should be of numeric type, got %s.' % i)\n    if ival == 1:\n        return S.One\n    if ival == -1:\n        return S.NegativeOne\n    if ival == 0:\n        return S.Zero\n    obj = Expr.__new__(cls)\n    obj.p = ival\n    return obj",
    ".sympy.core.numbers.py@@Integer.__hash__": "def __hash__(self):\n    return hash(self.p)",
    ".sympy.core.compatibility.py@@ordered": "def ordered(seq, keys=None, default=True, warn=False):\n    d = defaultdict(list)\n    if keys:\n        if not isinstance(keys, (list, tuple)):\n            keys = [keys]\n        keys = list(keys)\n        f = keys.pop(0)\n        for a in seq:\n            d[f(a)].append(a)\n    else:\n        if not default:\n            raise ValueError('if default=False then keys must be provided')\n        d[None].extend(seq)\n    for k in sorted(d.keys()):\n        if len(d[k]) > 1:\n            if keys:\n                d[k] = ordered(d[k], keys, default, warn)\n            elif default:\n                d[k] = ordered(d[k], (_nodes, default_sort_key), default=False, warn=warn)\n            elif warn:\n                from sympy.utilities.iterables import uniq\n                u = list(uniq(d[k]))\n                if len(u) > 1:\n                    raise ValueError('not enough keys to break ties: %s' % u)\n        for v in d[k]:\n            yield v\n        d.pop(k)",
    ".sympy.sets.sets.py@@Set._infimum_key": "def _infimum_key(expr):\n    try:\n        infimum = expr.inf\n        assert infimum.is_comparable\n    except (NotImplementedError, AttributeError, AssertionError, ValueError):\n        infimum = S.Infinity\n    return infimum",
    ".sympy.core.numbers.py@@Infinity.__hash__": "def __hash__(self):\n    return super(Infinity, self).__hash__()",
    ".sympy.core.numbers.py@@Number.__hash__": "def __hash__(self):\n    return super(Number, self).__hash__()",
    ".sympy.core.expr.py@@Expr.__hash__": "def __hash__(self):\n    h = self._mhash\n    if h is None:\n        h = hash((type(self).__name__,) + self._hashable_content())\n        self._mhash = h\n    return h",
    ".sympy.core.basic.py@@Basic.__new__": "def __new__(cls, *args):\n    obj = object.__new__(cls)\n    obj._assumptions = cls.default_assumptions\n    obj._mhash = None\n    obj._args = args\n    return obj",
    ".sympy.sets.sets.py@@Set.__contains__": "def __contains__(self, other):\n    other = sympify(other)\n    c = self._contains(other)\n    b = tfn[c]\n    if b is None:\n        raise TypeError('did not evaluate to a bool: %r' % c)\n    return b",
    ".sympy.sets.sets.py@@FiniteSet._contains": "def _contains(self, other):\n    return fuzzy_or((fuzzy_bool(Eq(e, other, evaluate=True)) for e in self.args))",
    ".sympy.core.basic.py@@Basic.args": "def args(self):\n    return self._args",
    ".sympy.core.logic.py@@fuzzy_or": "def fuzzy_or(args):\n    return fuzzy_not(fuzzy_and((fuzzy_not(i) for i in args)))",
    ".sympy.core.logic.py@@fuzzy_and": "def fuzzy_and(args):\n    rv = True\n    for ai in args:\n        ai = fuzzy_bool(ai)\n        if ai is False:\n            return False\n        if rv:\n            rv = ai\n    return rv",
    ".sympy.core.relational.py@@Equality.__new__": "def __new__(cls, lhs, rhs=None, **options):\n    from sympy.core.add import Add\n    from sympy.core.containers import Tuple\n    from sympy.core.logic import fuzzy_bool, fuzzy_xor, fuzzy_and, fuzzy_not\n    from sympy.core.expr import _n2\n    from sympy.functions.elementary.complexes import arg\n    from sympy.simplify.simplify import clear_coefficients\n    from sympy.utilities.iterables import sift\n    if rhs is None:\n        SymPyDeprecationWarning(feature='Eq(expr) with rhs default to 0', useinstead='Eq(expr, 0)', issue=16587, deprecated_since_version='1.5').warn()\n        rhs = 0\n    lhs = _sympify(lhs)\n    rhs = _sympify(rhs)\n    evaluate = options.pop('evaluate', global_evaluate[0])\n    if evaluate:\n        if hasattr(lhs, '_eval_Eq'):\n            r = lhs._eval_Eq(rhs)\n            if r is not None:\n                return r\n        if hasattr(rhs, '_eval_Eq'):\n            r = rhs._eval_Eq(lhs)\n            if r is not None:\n                return r\n        if lhs == rhs:\n            return S.true\n        elif all((isinstance(i, BooleanAtom) for i in (rhs, lhs))):\n            return S.false\n        elif not (lhs.is_Symbol or rhs.is_Symbol) and isinstance(lhs, Boolean) != isinstance(rhs, Boolean):\n            return S.false\n        if lhs.is_infinite or rhs.is_infinite:\n            if fuzzy_xor([lhs.is_infinite, rhs.is_infinite]):\n                return S.false\n            if fuzzy_xor([lhs.is_extended_real, rhs.is_extended_real]):\n                return S.false\n            if fuzzy_and([lhs.is_extended_real, rhs.is_extended_real]):\n                r = fuzzy_xor([lhs.is_extended_positive, fuzzy_not(rhs.is_extended_positive)])\n                return S(r)\n            I = S.ImaginaryUnit\n\n            def split_real_imag(expr):\n                real_imag = lambda t: 'real' if t.is_extended_real else 'imag' if (I * t).is_extended_real else None\n                return sift(Add.make_args(expr), real_imag)\n            lhs_ri = split_real_imag(lhs)\n            if not lhs_ri[None]:\n                rhs_ri = split_real_imag(rhs)\n                if not rhs_ri[None]:\n                    eq_real = Eq(Add(*lhs_ri['real']), Add(*rhs_ri['real']))\n                    eq_imag = Eq(I * Add(*lhs_ri['imag']), I * Add(*rhs_ri['imag']))\n                    res = fuzzy_and(map(fuzzy_bool, [eq_real, eq_imag]))\n                    if res is not None:\n                        return S(res)\n            arglhs = arg(lhs)\n            argrhs = arg(rhs)\n            if not (arglhs == S.NaN and argrhs == S.NaN):\n                res = fuzzy_bool(Eq(arglhs, argrhs))\n                if res is not None:\n                    return S(res)\n            return Relational.__new__(cls, lhs, rhs, **options)\n        if all((isinstance(i, Expr) for i in (lhs, rhs))):\n            dif = lhs - rhs\n            z = dif.is_zero\n            if z is not None:\n                if z is False and dif.is_commutative:\n                    return S.false\n                if z:\n                    return S.true\n            n2 = _n2(lhs, rhs)\n            if n2 is not None:\n                return _sympify(n2 == 0)\n            n, d = dif.as_numer_denom()\n            rv = None\n            if n.is_zero:\n                rv = d.is_nonzero\n            elif n.is_finite:\n                if d.is_infinite:\n                    rv = S.true\n                elif n.is_zero is False:\n                    rv = d.is_infinite\n                    if rv is None:\n                        l, r = clear_coefficients(d, S.Infinity)\n                        args = [_.subs(l, r) for _ in (lhs, rhs)]\n                        if args != [lhs, rhs]:\n                            rv = fuzzy_bool(Eq(*args))\n                            if rv is True:\n                                rv = None\n            elif any((a.is_infinite for a in Add.make_args(n))):\n                rv = S.false\n            if rv is not None:\n                return _sympify(rv)\n    return Relational.__new__(cls, lhs, rhs, **options)",
    ".sympy.core.sympify.py@@_sympify": "def _sympify(a):\n    return sympify(a, strict=True)",
    ".sympy.core.numbers.py@@Integer.__eq__": "def __eq__(self, other):\n    if isinstance(other, integer_types):\n        return self.p == other\n    elif isinstance(other, Integer):\n        return self.p == other.p\n    return Rational.__eq__(self, other)",
    ".sympy.core.logic.py@@fuzzy_bool": "def fuzzy_bool(x):\n    if x is None:\n        return None\n    if x in (True, False):\n        return bool(x)",
    ".sympy.core.basic.py@@Basic.__eq__": "def __eq__(self, other):\n    if self is other:\n        return True\n    tself = type(self)\n    tother = type(other)\n    if tself is not tother:\n        try:\n            other = _sympify(other)\n            tother = type(other)\n        except SympifyError:\n            return NotImplemented\n        if PY3 or type(tself).__ne__ is not type.__ne__:\n            if tself != tother:\n                return False\n        elif tself is not tother:\n            return False\n    return self._hashable_content() == other._hashable_content()",
    ".sympy.core.basic.py@@Basic._hashable_content": "def _hashable_content(self):\n    return self._args",
    ".sympy.logic.boolalg.py@@BooleanTrue.__nonzero__": "def __nonzero__(self):\n    return True",
    ".sympy.core.logic.py@@fuzzy_not": "def fuzzy_not(v):\n    if v is None:\n        return v\n    else:\n        return not v",
    ".sympy.core.function.py@@Application.__new__": "def __new__(cls, *args, **options):\n    from sympy.sets.fancysets import Naturals0\n    from sympy.sets.sets import FiniteSet\n    args = list(map(sympify, args))\n    evaluate = options.pop('evaluate', global_evaluate[0])\n    options.pop('nargs', None)\n    if options:\n        raise ValueError('Unknown options: %s' % options)\n    if evaluate:\n        evaluated = cls.eval(*args)\n        if evaluated is not None:\n            return evaluated\n    obj = super(Application, cls).__new__(cls, *args, **options)\n    sentinel = object()\n    objnargs = getattr(obj, 'nargs', sentinel)\n    if objnargs is not sentinel:\n        if is_sequence(objnargs):\n            nargs = tuple(ordered(set(objnargs)))\n        elif objnargs is not None:\n            nargs = (as_int(objnargs),)\n        else:\n            nargs = None\n    else:\n        nargs = obj._nargs\n    obj.nargs = FiniteSet(*nargs) if nargs else Naturals0()\n    return obj",
    ".sympy.functions.elementary.integers.py@@RoundFunction.eval": "def eval(cls, arg):\n    from sympy import im\n    if arg.is_integer or arg.is_finite is False:\n        return arg\n    if arg.is_imaginary or (S.ImaginaryUnit * arg).is_real:\n        i = im(arg)\n        if not i.has(S.ImaginaryUnit):\n            return cls(i) * S.ImaginaryUnit\n        return cls(arg, evaluate=False)\n    v = cls._eval_number(arg)\n    if v is not None:\n        return v\n    ipart = npart = spart = S.Zero\n    terms = Add.make_args(arg)\n    for t in terms:\n        if t.is_integer or (t.is_imaginary and im(t).is_integer):\n            ipart += t\n        elif t.has(Symbol):\n            spart += t\n        else:\n            npart += t\n    if not (npart or spart):\n        return ipart\n    if npart and (not spart or (npart.is_real and (spart.is_imaginary or (S.ImaginaryUnit * spart).is_real)) or (npart.is_imaginary and spart.is_real)):\n        try:\n            r, i = get_integer_part(npart, cls._dir, {}, return_ints=True)\n            ipart += Integer(r) + Integer(i) * S.ImaginaryUnit\n            npart = S.Zero\n        except (PrecisionExhausted, NotImplementedError):\n            pass\n    spart += npart\n    if not spart:\n        return ipart\n    elif spart.is_imaginary or (S.ImaginaryUnit * spart).is_real:\n        return ipart + cls(im(spart), evaluate=False) * S.ImaginaryUnit\n    else:\n        return ipart + cls(spart, evaluate=False)",
    ".sympy.core.numbers.py@@Integer.__int__": "def __int__(self):\n    return self.p",
    ".sympy.core.numbers.py@@Integer.__ne__": "def __ne__(self, other):\n    return not self == other",
    ".sympy.ntheory.generate.py@@Sieve.extend": "def extend(self, n):\n    n = int(n)\n    if n <= self._list[-1]:\n        return\n    maxbase = int(n ** 0.5) + 1\n    self.extend(maxbase)\n    begin = self._list[-1] + 1\n    newsieve = _arange(begin, n + 1)\n    for p in self.primerange(2, maxbase):\n        startindex = -begin % p\n        for i in range(startindex, len(newsieve), p):\n            newsieve[i] = 0\n    self._list += _array('l', [x for x in newsieve if x])",
    ".sympy.ntheory.generate.py@@Sieve.search": "def search(self, n):\n    from sympy.functions.elementary.integers import ceiling\n    test = as_int(ceiling(n))\n    n = as_int(n)\n    if n < 2:\n        raise ValueError('n should be >= 2 but got: %s' % n)\n    if n > self._list[-1]:\n        self.extend(n)\n    b = bisect(self._list, n)\n    if self._list[b - 1] == test:\n        return (b, b)\n    else:\n        return (b, b + 1)",
    ".sympy.ntheory.generate.py@@nextprime": "def nextprime(n, ith=1):\n    n = int(n)\n    i = as_int(ith)\n    if i > 1:\n        pr = n\n        j = 1\n        while 1:\n            pr = nextprime(pr)\n            j += 1\n            if j > i:\n                break\n        return pr\n    if n < 2:\n        return 2\n    if n < 7:\n        return {2: 3, 3: 5, 4: 5, 5: 7, 6: 7}[n]\n    if n <= sieve._list[-2]:\n        l, u = sieve.search(n)\n        if l == u:\n            return sieve[u + 1]\n        else:\n            return sieve[u]\n    nn = 6 * (n // 6)\n    if nn == n:\n        n += 1\n        if isprime(n):\n            return n\n        n += 4\n    elif n - nn == 5:\n        n += 2\n        if isprime(n):\n            return n\n        n += 4\n    else:\n        n = nn + 5\n    while 1:\n        if isprime(n):\n            return n\n        n += 2\n        if isprime(n):\n            return n\n        n += 4",
    ".sympy.ntheory.generate.py@@Sieve.__getitem__": "def __getitem__(self, n):\n    if isinstance(n, slice):\n        self.extend_to_no(n.stop)\n        return self._list[n.start - 1:n.stop - 1:n.step]\n    else:\n        n = as_int(n)\n        self.extend_to_no(n)\n        return self._list[n - 1]",
    ".sympy.ntheory.generate.py@@Sieve.extend_to_no": "def extend_to_no(self, i):\n    i = as_int(i)\n    while len(self._list) < i:\n        self.extend(int(self._list[-1] * 1.5))",
    ".sympy.ntheory.primetest.py@@isprime": "def isprime(n):\n    try:\n        n = as_int(n)\n    except ValueError:\n        return False\n    if n in [2, 3, 5]:\n        return True\n    if n < 2 or n % 2 == 0 or n % 3 == 0 or (n % 5 == 0):\n        return False\n    if n < 49:\n        return True\n    if n % 7 == 0 or n % 11 == 0 or n % 13 == 0 or (n % 17 == 0) or (n % 19 == 0) or (n % 23 == 0) or (n % 29 == 0) or (n % 31 == 0) or (n % 37 == 0) or (n % 41 == 0) or (n % 43 == 0) or (n % 47 == 0):\n        return False\n    if n < 2809:\n        return True\n    if n <= 23001:\n        return pow(2, n, n) == 2 and n not in [7957, 8321, 13747, 18721, 19951]\n    from sympy.ntheory.generate import sieve as s\n    if n <= s._list[-1]:\n        l, u = s.search(n)\n        return l == u\n    from sympy.core.compatibility import HAS_GMPY\n    if HAS_GMPY == 2:\n        from gmpy2 import is_strong_prp, is_strong_selfridge_prp\n        return is_strong_prp(n, 2) and is_strong_selfridge_prp(n)\n    if n < 341531:\n        return mr(n, [9345883071009581737])\n    if n < 885594169:\n        return mr(n, [725270293939359937, 3569819667048198375])\n    if n < 350269456337:\n        return mr(n, [4230279247111683200, 14694767155120705706, 16641139526367750375])\n    if n < 55245642489451:\n        return mr(n, [2, 141889084524735, 1199124725622454117, 11096072698276303650])\n    if n < 7999252175582851:\n        return mr(n, [2, 4130806001517, 149795463772692060, 186635894390467037, 3967304179347715805])\n    if n < 585226005592931977:\n        return mr(n, [2, 123635709730000, 9233062284813009, 43835965440333360, 761179012939631437, 1263739024124850375])\n    if n < 18446744073709551616:\n        return mr(n, [2, 325, 9375, 28178, 450775, 9780504, 1795265022])\n    return mr(n, [2]) and is_strong_lucas_prp(n)",
    ".sympy.ntheory.primetest.py@@mr": "def mr(n, bases):\n    from sympy.ntheory.factor_ import trailing\n    from sympy.polys.domains import ZZ\n    n = as_int(n)\n    if n < 2:\n        return False\n    s = trailing(n - 1)\n    t = n >> s\n    for base in bases:\n        if base >= n:\n            base %= n\n        if base >= 2:\n            base = ZZ(base)\n            if not _test(n, base, s, t):\n                return False\n    return True",
    ".sympy.polys.domains.domain.py@@Domain.__call__": "def __call__(self, *args):\n    return self.new(*args)",
    ".sympy.polys.domains.domain.py@@Domain.new": "def new(self, *args):\n    return self.dtype(*args)",
    ".sympy.ntheory.primetest.py@@_test": "def _test(n, base, s, t):\n    b = pow(base, t, n)\n    if b == 1 or b == n - 1:\n        return True\n    else:\n        for j in range(1, s):\n            b = pow(b, 2, n)\n            if b == n - 1:\n                return True\n            if b == 1:\n                return False\n    return False",
    ".sympy.ntheory.factor_.py@@_trial": "def _trial(factors, n, candidates, verbose=False):\n    if verbose:\n        factors0 = list(factors.keys())\n    nfactors = len(factors)\n    for d in candidates:\n        if n % d == 0:\n            m = multiplicity(d, n)\n            n //= d ** m\n            factors[d] = m\n    if verbose:\n        for k in sorted(set(factors).difference(set(factors0))):\n            print(factor_msg % (k, factors[k]))\n    return (int(n), len(factors) != nfactors)",
    ".sympy.ntheory.factor_.py@@multiplicity": "def multiplicity(p, n):\n    try:\n        p, n = (as_int(p), as_int(n))\n    except ValueError:\n        if all((isinstance(i, (SYMPY_INTS, Rational)) for i in (p, n))):\n            p = Rational(p)\n            n = Rational(n)\n            if p.q == 1:\n                if n.p == 1:\n                    return -multiplicity(p.p, n.q)\n                return multiplicity(p.p, n.p) - multiplicity(p.p, n.q)\n            elif p.p == 1:\n                return multiplicity(p.q, n.q)\n            else:\n                like = min(multiplicity(p.p, n.p), multiplicity(p.q, n.q))\n                cross = min(multiplicity(p.q, n.p), multiplicity(p.p, n.q))\n                return like - cross\n        raise ValueError('expecting ints or fractions, got %s and %s' % (p, n))\n    if n == 0:\n        raise ValueError('no such integer exists: multiplicity of %s is not-defined' % n)\n    if p == 2:\n        return trailing(n)\n    if p < 2:\n        raise ValueError('p must be an integer, 2 or larger, but got %s' % p)\n    if p == n:\n        return 1\n    m = 0\n    n, rem = divmod(n, p)\n    while not rem:\n        m += 1\n        if m > 5:\n            e = 2\n            while 1:\n                ppow = p ** e\n                if ppow < n:\n                    nnew, rem = divmod(n, ppow)\n                    if not rem:\n                        m += e\n                        e *= 2\n                        n = nnew\n                        continue\n                return m + multiplicity(p, n)\n        n, rem = divmod(n, p)\n    return m",
    ".sympy.ntheory.generate.py@@_arange": "def _arange(a, b):\n    return _array('l', range(a, b))",
    ".sympy.core.evalf.py@@bitcount": "def bitcount(n):\n    return mpmath_bitcount(abs(int(n)))",
    ".sympy.core.function.py@@Application.func": "def func(self):\n    return self.__class__",
    ".sympy.functions.combinatorial.factorials.py@@factorial.eval": "def eval(cls, n):\n    n = sympify(n)\n    if n.is_Number:\n        if n.is_zero:\n            return S.One\n        elif n is S.Infinity:\n            return S.Infinity\n        elif n.is_Integer:\n            if n.is_negative:\n                return S.ComplexInfinity\n            else:\n                n = n.p\n                if n < 20:\n                    if not cls._small_factorials:\n                        result = 1\n                        for i in range(1, 20):\n                            result *= i\n                            cls._small_factorials.append(result)\n                    result = cls._small_factorials[n - 1]\n                elif HAS_GMPY:\n                    from sympy.core.compatibility import gmpy\n                    result = gmpy.fac(n)\n                else:\n                    bits = bin(n).count('1')\n                    result = cls._recursive(n) * 2 ** (n - bits)\n                return Integer(result)",
    ".sympy.core.assumptions.py@@getit": "def getit(self):\n    try:\n        return self._assumptions[fact]\n    except KeyError:\n        if self._assumptions is self.default_assumptions:\n            self._assumptions = self.default_assumptions.copy()\n        return _ask(fact, self)",
    ".sympy.core.assumptions.py@@StdFactKB.copy": "def copy(self):\n    return self.__class__(self)",
    ".sympy.core.assumptions.py@@StdFactKB.__init__": "def __init__(self, facts=None):\n    super(StdFactKB, self).__init__(_assume_rules)\n    if not facts:\n        self._generator = {}\n    elif not isinstance(facts, FactKB):\n        self._generator = facts.copy()\n    else:\n        self._generator = facts.generator\n    if facts:\n        self.deduce_all_facts(facts)",
    ".sympy.core.facts.py@@FactKB.__init__": "def __init__(self, rules):\n    self.rules = rules",
    ".sympy.core.assumptions.py@@StdFactKB.generator": "def generator(self):\n    return self._generator.copy()",
    ".sympy.core.facts.py@@FactKB.deduce_all_facts": "def deduce_all_facts(self, facts):\n    full_implications = self.rules.full_implications\n    beta_triggers = self.rules.beta_triggers\n    beta_rules = self.rules.beta_rules\n    if isinstance(facts, dict):\n        facts = facts.items()\n    while facts:\n        beta_maytrigger = set()\n        for k, v in facts:\n            if not self._tell(k, v) or v is None:\n                continue\n            for key, value in full_implications[k, v]:\n                self._tell(key, value)\n            beta_maytrigger.update(beta_triggers[k, v])\n        facts = []\n        for bidx in beta_maytrigger:\n            bcond, bimpl = beta_rules[bidx]\n            if all((self.get(k) is v for k, v in bcond)):\n                facts.append(bimpl)",
    ".sympy.core.facts.py@@FactKB._tell": "def _tell(self, k, v):\n    if k in self and self[k] is not None:\n        if self[k] == v:\n            return False\n        else:\n            raise InconsistentAssumptions(self, k, v)\n    else:\n        self[k] = v\n        return True",
    ".sympy.core.assumptions.py@@_ask": "def _ask(fact, obj):\n    assumptions = obj._assumptions\n    handler_map = obj._prop_handler\n    assumptions._tell(fact, None)\n    try:\n        evaluate = handler_map[fact]\n    except KeyError:\n        pass\n    else:\n        a = evaluate(obj)\n        if a is not None:\n            assumptions.deduce_all_facts(((fact, a),))\n            return a\n    prereq = list(_assume_rules.prereq[fact])\n    shuffle(prereq)\n    for pk in prereq:\n        if pk in assumptions:\n            continue\n        if pk in handler_map:\n            _ask(pk, obj)\n            ret_val = assumptions.get(fact)\n            if ret_val is not None:\n                return ret_val\n    return None",
    ".sympy.core.numbers.py@@Rational._eval_is_zero": "def _eval_is_zero(self):\n    return self.p == 0",
    ".sympy.core.expr.py@@Expr._eval_is_negative": "def _eval_is_negative(self):\n    finite = self.is_finite\n    if finite is False:\n        return False\n    extended_negative = self.is_extended_negative\n    if finite is True:\n        return extended_negative\n    if extended_negative is False:\n        return False",
    ".sympy.core.expr.py@@Expr._eval_is_extended_negative": "def _eval_is_extended_negative(self):\n    from sympy.polys.numberfields import minimal_polynomial\n    from sympy.polys.polyerrors import NotAlgebraic\n    if self.is_number:\n        if self.is_extended_real is False:\n            return False\n        try:\n            n2 = self._eval_evalf(2)\n        except ValueError:\n            return None\n        if n2 is None:\n            return None\n        if getattr(n2, '_prec', 1) == 1:\n            return None\n        if n2 is S.NaN:\n            return None\n        r, i = self.evalf(2).as_real_imag()\n        if not i.is_Number or not r.is_Number:\n            return False\n        if r._prec != 1 and i._prec != 1:\n            return bool(not i and r < 0)\n        elif r._prec == 1 and (not i or i._prec == 1) and self.is_algebraic and (not self.has(Function)):\n            try:\n                if minimal_polynomial(self).is_Symbol:\n                    return False\n            except (NotAlgebraic, NotImplementedError):\n                pass",
    ".sympy.core.numbers.py@@Number._eval_evalf": "def _eval_evalf(self, prec):\n    return Float._new(self._as_mpf_val(prec), prec)",
    ".sympy.core.numbers.py@@Integer._as_mpf_val": "def _as_mpf_val(self, prec):\n    return mlib.from_int(self.p, prec, rnd)",
    ".sympy.core.numbers.py@@Float._new": "def _new(cls, _mpf_, _prec, zero=True):\n    if zero and _mpf_ == fzero:\n        return S.Zero\n    elif _mpf_ == _mpf_nan:\n        return S.NaN\n    elif _mpf_ == _mpf_inf:\n        return S.Infinity\n    elif _mpf_ == _mpf_ninf:\n        return S.NegativeInfinity\n    obj = Expr.__new__(cls)\n    obj._mpf_ = mpf_norm(_mpf_, _prec)\n    obj._prec = _prec\n    return obj",
    ".sympy.core.numbers.py@@mpf_norm": "def mpf_norm(mpf, prec):\n    sign, man, expt, bc = mpf\n    if not man:\n        if not bc:\n            return fzero\n        else:\n            return mpf\n    from mpmath.libmp.backend import MPZ\n    rv = mpf_normalize(sign, MPZ(man), expt, bc, prec, rnd)\n    return rv",
    ".sympy.core.evalf.py@@EvalfMixin.evalf": "def evalf(self, n=15, subs=None, maxn=100, chop=False, strict=False, quad=None, verbose=False):\n    from sympy import Float, Number\n    n = n if n is not None else 15\n    if subs and is_sequence(subs):\n        raise TypeError('subs must be given as a dictionary')\n    if n == 1 and isinstance(self, Number):\n        from sympy.core.expr import _mag\n        rv = self.evalf(2, subs, maxn, chop, strict, quad, verbose)\n        m = _mag(rv)\n        rv = rv.round(1 - m)\n        return rv\n    if not evalf_table:\n        _create_evalf_table()\n    prec = dps_to_prec(n)\n    options = {'maxprec': max(prec, int(maxn * LG10)), 'chop': chop, 'strict': strict, 'verbose': verbose}\n    if subs is not None:\n        options['subs'] = subs\n    if quad is not None:\n        options['quad'] = quad\n    try:\n        result = evalf(self, prec + 4, options)\n    except NotImplementedError:\n        v = self._eval_evalf(prec)\n        if v is None:\n            return self\n        elif not v.is_number:\n            return v\n        try:\n            result = evalf(v, prec, options)\n        except NotImplementedError:\n            return v\n    re, im, re_acc, im_acc = result\n    if re:\n        p = max(min(prec, re_acc), 1)\n        re = Float._new(re, p)\n    else:\n        re = S.Zero\n    if im:\n        p = max(min(prec, im_acc), 1)\n        im = Float._new(im, p)\n        return re + im * S.ImaginaryUnit\n    else:\n        return re",
    ".sympy.core.evalf.py@@evalf": "def evalf(x, prec, options):\n    from sympy import re as re_, im as im_\n    try:\n        rf = evalf_table[x.func]\n        r = rf(x, prec, options)\n    except KeyError:\n        if 'subs' in options:\n            x = x.subs(evalf_subs(prec, options['subs']))\n        xe = x._eval_evalf(prec)\n        if xe is None:\n            raise NotImplementedError\n        as_real_imag = getattr(xe, 'as_real_imag', None)\n        if as_real_imag is None:\n            raise NotImplementedError\n        re, im = as_real_imag()\n        if re.has(re_) or im.has(im_):\n            raise NotImplementedError\n        if re == 0:\n            re = None\n            reprec = None\n        elif re.is_number:\n            re = re._to_mpmath(prec, allow_ints=False)._mpf_\n            reprec = prec\n        else:\n            raise NotImplementedError\n        if im == 0:\n            im = None\n            imprec = None\n        elif im.is_number:\n            im = im._to_mpmath(prec, allow_ints=False)._mpf_\n            imprec = prec\n        else:\n            raise NotImplementedError\n        r = (re, im, reprec, imprec)\n    if options.get('verbose'):\n        print('### input', x)\n        print('### output', to_str(r[0] or fzero, 50))\n        print('### raw', r)\n        print()\n    chop = options.get('chop', False)\n    if chop:\n        if chop is True:\n            chop_prec = prec\n        else:\n            chop_prec = int(round(-3.321 * math.log10(chop) + 2.5))\n            if chop_prec == 3:\n                chop_prec -= 1\n        r = chop_parts(r, chop_prec)\n    if options.get('strict'):\n        check_target(x, r, prec)\n    return r",
    ".sympy.core.basic.py@@Basic.func": "def func(self):\n    return self.__class__",
    ".sympy.core.expr.py@@Expr.as_real_imag": "def as_real_imag(self, deep=True, **hints):\n    from sympy import im, re\n    if hints.get('ignore') == self:\n        return None\n    else:\n        return (re(self), im(self))",
    ".sympy.core.numbers.py@@Float.__eq__": "def __eq__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if not self:\n        return not other\n    if other.is_NumberSymbol:\n        if other.is_irrational:\n            return False\n        return other.__eq__(self)\n    if other.is_Float:\n        return self._mpf_ == other._mpf_\n    if other.is_Rational:\n        return other.__eq__(self)\n    if other.is_Number:\n        ompf = other._as_mpf_val(self._prec)\n        return bool(mlib.mpf_eq(self._mpf_, ompf))\n    return False",
    ".sympy.core.sympify.py@@SympifyError.__init__": "def __init__(self, expr, base_exc=None):\n    self.expr = expr\n    self.base_exc = base_exc",
    ".sympy.functions.elementary.complexes.py@@re.eval": "def eval(cls, arg):\n    if arg is S.NaN:\n        return S.NaN\n    elif arg is S.ComplexInfinity:\n        return S.NaN\n    elif arg.is_extended_real:\n        return arg\n    elif arg.is_imaginary or (S.ImaginaryUnit * arg).is_extended_real:\n        return S.Zero\n    elif arg.is_Matrix:\n        return arg.as_real_imag()[0]\n    elif arg.is_Function and isinstance(arg, conjugate):\n        return re(arg.args[0])\n    else:\n        included, reverted, excluded = ([], [], [])\n        args = Add.make_args(arg)\n        for term in args:\n            coeff = term.as_coefficient(S.ImaginaryUnit)\n            if coeff is not None:\n                if not coeff.is_extended_real:\n                    reverted.append(coeff)\n            elif not term.has(S.ImaginaryUnit) and term.is_extended_real:\n                excluded.append(term)\n            else:\n                real_imag = term.as_real_imag(ignore=arg)\n                if real_imag:\n                    excluded.append(real_imag[0])\n                else:\n                    included.append(term)\n        if len(args) != len(included):\n            a, b, c = (Add(*xs) for xs in [included, reverted, excluded])\n            return cls(a) - im(b) + c",
    ".sympy.functions.elementary.complexes.py@@im.eval": "def eval(cls, arg):\n    if arg is S.NaN:\n        return S.NaN\n    elif arg is S.ComplexInfinity:\n        return S.NaN\n    elif arg.is_extended_real:\n        return S.Zero\n    elif arg.is_imaginary or (S.ImaginaryUnit * arg).is_extended_real:\n        return -S.ImaginaryUnit * arg\n    elif arg.is_Matrix:\n        return arg.as_real_imag()[1]\n    elif arg.is_Function and isinstance(arg, conjugate):\n        return -im(arg.args[0])\n    else:\n        included, reverted, excluded = ([], [], [])\n        args = Add.make_args(arg)\n        for term in args:\n            coeff = term.as_coefficient(S.ImaginaryUnit)\n            if coeff is not None:\n                if not coeff.is_extended_real:\n                    reverted.append(coeff)\n                else:\n                    excluded.append(coeff)\n            elif term.has(S.ImaginaryUnit) or not term.is_extended_real:\n                real_imag = term.as_real_imag(ignore=arg)\n                if real_imag:\n                    excluded.append(real_imag[1])\n                else:\n                    included.append(term)\n        if len(args) != len(included):\n            a, b, c = (Add(*xs) for xs in [included, reverted, excluded])\n            return cls(a) + re(b) + c",
    ".sympy.core.numbers.py@@Zero.__nonzero__": "def __nonzero__(self):\n    return False",
    ".sympy.core.numbers.py@@Float.__lt__": "def __lt__(self, other):\n    if isinstance(other, NumberSymbol):\n        return other.__gt__(self)\n    rv = self._Frel(other, mlib.mpf_lt)\n    if rv is None:\n        return Expr.__lt__(self, other)\n    return rv",
    ".sympy.core.numbers.py@@Float._Frel": "def _Frel(self, other, op):\n    from sympy.core.evalf import evalf\n    from sympy.core.numbers import prec_to_dps\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s > %s' % (self, other))\n    if other.is_Rational:\n        '\\n        >>> f = Float(.1,2)\\n        >>> i = 1234567890\\n        >>> (f*i)._mpf_\\n        (0, 471, 18, 9)\\n        >>> mlib.mpf_mul(f._mpf_, mlib.from_int(i))\\n        (0, 505555550955, -12, 39)\\n        '\n        smpf = mlib.mpf_mul(self._mpf_, mlib.from_int(other.q))\n        ompf = mlib.from_int(other.p)\n        return _sympify(bool(op(smpf, ompf)))\n    elif other.is_Float:\n        return _sympify(bool(op(self._mpf_, other._mpf_)))\n    elif other.is_comparable and other not in (S.Infinity, S.NegativeInfinity):\n        other = other.evalf(prec_to_dps(self._prec))\n        if other._prec > 1:\n            if other.is_Number:\n                return _sympify(bool(op(self._mpf_, other._as_mpf_val(self._prec))))",
    ".sympy.logic.boolalg.py@@BooleanFalse.__nonzero__": "def __nonzero__(self):\n    return False",
    ".sympy.core.containers.py@@Dict.keys": "def keys(self):\n    return self._dict.keys()",
    ".sympy.core.containers.py@@Dict.__getitem__": "def __getitem__(self, key):\n    return self._dict[sympify(key)]",
    ".sympy.core.numbers.py@@Integer.__lt__": "def __lt__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s < %s' % (self, other))\n    if other.is_Integer:\n        return _sympify(self.p < other.p)\n    return Rational.__lt__(self, other)",
    ".sympy.core.power.py@@Pow.__new__": "def __new__(cls, b, e, evaluate=None):\n    if evaluate is None:\n        evaluate = global_evaluate[0]\n    from sympy.functions.elementary.exponential import exp_polar\n    b = _sympify(b)\n    e = _sympify(e)\n    if evaluate:\n        if e is S.ComplexInfinity:\n            return S.NaN\n        if e is S.Zero:\n            return S.One\n        elif e is S.One:\n            return b\n        elif e == -1 and (not b):\n            return S.ComplexInfinity\n        elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and e.is_integer and _coeff_isneg(b):\n            if e.is_even:\n                b = -b\n            elif e.is_odd:\n                return -Pow(-b, e)\n        if S.NaN in (b, e):\n            return S.NaN\n        elif b is S.One:\n            if abs(e).is_infinite:\n                return S.NaN\n            return S.One\n        else:\n            if not e.is_Atom and b is not S.Exp1 and (not isinstance(b, exp_polar)):\n                from sympy import numer, denom, log, sign, im, factor_terms\n                c, ex = factor_terms(e, sign=False).as_coeff_Mul()\n                den = denom(ex)\n                if isinstance(den, log) and den.args[0] == b:\n                    return S.Exp1 ** (c * numer(ex))\n                elif den.is_Add:\n                    s = sign(im(b))\n                    if s.is_Number and s and (den == log(-factor_terms(b, sign=False)) + s * S.ImaginaryUnit * S.Pi):\n                        return S.Exp1 ** (c * numer(ex))\n            obj = b._eval_power(e)\n            if obj is not None:\n                return obj\n    obj = Expr.__new__(cls, b, e)\n    obj = cls._exec_constructor_postprocessors(obj)\n    if not isinstance(obj, Pow):\n        return obj\n    obj.is_commutative = b.is_commutative and e.is_commutative\n    return obj",
    ".sympy.core.basic.py@@Basic._exec_constructor_postprocessors": "def _exec_constructor_postprocessors(cls, obj):\n    clsname = obj.__class__.__name__\n    postprocessors = defaultdict(list)\n    for i in obj.args:\n        try:\n            postprocessor_mappings = (Basic._constructor_postprocessor_mapping[cls].items() for cls in type(i).mro() if cls in Basic._constructor_postprocessor_mapping)\n            for k, v in chain.from_iterable(postprocessor_mappings):\n                postprocessors[k].extend([j for j in v if j not in postprocessors[k]])\n        except TypeError:\n            pass\n    for f in postprocessors.get(clsname, []):\n        obj = f(obj)\n    return obj",
    ".sympy.core.mul.py@@Mul.as_powers_dict": "def as_powers_dict(self):\n    d = defaultdict(int)\n    for term in self.args:\n        for b, e in term.as_powers_dict().items():\n            d[b] += e\n    return d",
    ".sympy.core.expr.py@@Expr.as_powers_dict": "def as_powers_dict(self):\n    d = defaultdict(int)\n    d.update(dict([self.as_base_exp()]))\n    return d",
    ".sympy.core.power.py@@Pow.as_base_exp": "def as_base_exp(self):\n    b, e = self.args\n    if b.is_Rational and b.p == 1 and (b.q != 1):\n        return (Integer(b.q), -e)\n    return (b, e)",
    ".sympy.core.numbers.py@@Integer.__radd__": "def __radd__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, integer_types):\n            return Integer(other + self.p)\n        elif isinstance(other, Rational):\n            return Rational(other.p + self.p * other.q, other.q, 1)\n        return Rational.__radd__(self, other)\n    return Rational.__radd__(self, other)",
    ".sympy.ntheory.primetest.py@@is_strong_lucas_prp": "def is_strong_lucas_prp(n):\n    from sympy.ntheory.factor_ import trailing\n    n = as_int(n)\n    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if is_square(n, False):\n        return False\n    D, P, Q = _lucas_selfridge_params(n)\n    if D == 0:\n        return False\n    s = trailing(n + 1)\n    k = n + 1 >> s\n    U, V, Qk = _lucas_sequence(n, P, Q, k)\n    if U == 0 or V == 0:\n        return True\n    for r in range(1, s):\n        V = (V * V - 2 * Qk) % n\n        if V == 0:\n            return True\n        Qk = pow(Qk, 2, n)\n    return False",
    ".sympy.ntheory.primetest.py@@is_square": "def is_square(n, prep=True):\n    if prep:\n        n = as_int(n)\n        if n < 0:\n            return False\n        if n in [0, 1]:\n            return True\n    m = n & 127\n    if not m * 2344881533 & m * 2716005841 & 1311242:\n        m = n % 63\n        if not m * 1028201975 & m * 3357846009 & 284246024:\n            from sympy.core.power import integer_nthroot\n            return integer_nthroot(n, 2)[1]\n    return False",
    ".sympy.ntheory.primetest.py@@_lucas_selfridge_params": "def _lucas_selfridge_params(n):\n    from sympy.core import igcd\n    from sympy.ntheory.residue_ntheory import jacobi_symbol\n    D = 5\n    while True:\n        g = igcd(abs(D), n)\n        if g > 1 and g != n:\n            return (0, 0, 0)\n        if jacobi_symbol(D, n) == -1:\n            break\n        if D > 0:\n            D = -D - 2\n        else:\n            D = -D + 2\n    return _int_tuple(D, 1, (1 - D) / 4)",
    ".sympy.core.numbers.py@@igcd": "def igcd(*args):\n    if len(args) < 2:\n        raise TypeError('igcd() takes at least 2 arguments (%s given)' % len(args))\n    args_temp = [abs(as_int(i)) for i in args]\n    if 1 in args_temp:\n        return 1\n    a = args_temp.pop()\n    for b in args_temp:\n        a = igcd2(a, b) if b else a\n    return a",
    ".sympy.ntheory.residue_ntheory.py@@jacobi_symbol": "def jacobi_symbol(m, n):\n    m, n = (as_int(m), as_int(n))\n    if n < 0 or not n % 2:\n        raise ValueError('n should be an odd positive integer')\n    if m < 0 or m > n:\n        m = m % n\n    if not m:\n        return int(n == 1)\n    if n == 1 or m == 1:\n        return 1\n    if igcd(m, n) != 1:\n        return 0\n    j = 1\n    if m < 0:\n        m = -m\n        if n % 4 == 3:\n            j = -j\n    while m != 0:\n        while m % 2 == 0 and m > 0:\n            m >>= 1\n            if n % 8 in [3, 5]:\n                j = -j\n        m, n = (n, m)\n        if m % 4 == 3 and n % 4 == 3:\n            j = -j\n        m %= n\n    if n != 1:\n        j = 0\n    return j",
    ".sympy.ntheory.primetest.py@@_int_tuple": "def _int_tuple(*i):\n    return tuple((int(_) for _ in i))",
    ".sympy.ntheory.primetest.py@@_lucas_sequence": "def _lucas_sequence(n, P, Q, k):\n    D = P * P - 4 * Q\n    if n < 2:\n        raise ValueError('n must be >= 2')\n    if k < 0:\n        raise ValueError('k must be >= 0')\n    if D == 0:\n        raise ValueError('D must not be zero')\n    if k == 0:\n        return _int_tuple(0, 2, Q)\n    U = 1\n    V = P\n    Qk = Q\n    b = _bitlength(k)\n    if Q == 1:\n        while b > 1:\n            U = U * V % n\n            V = (V * V - 2) % n\n            b -= 1\n            if k >> b - 1 & 1:\n                U, V = (U * P + V, V * P + U * D)\n                if U & 1:\n                    U += n\n                if V & 1:\n                    V += n\n                U, V = (U >> 1, V >> 1)\n    elif P == 1 and Q == -1:\n        while b > 1:\n            U = U * V % n\n            if Qk == 1:\n                V = (V * V - 2) % n\n            else:\n                V = (V * V + 2) % n\n                Qk = 1\n            b -= 1\n            if k >> b - 1 & 1:\n                U, V = (U + V, V + U * D)\n                if U & 1:\n                    U += n\n                if V & 1:\n                    V += n\n                U, V = (U >> 1, V >> 1)\n                Qk = -1\n    else:\n        while b > 1:\n            U = U * V % n\n            V = (V * V - 2 * Qk) % n\n            Qk *= Qk\n            b -= 1\n            if k >> b - 1 & 1:\n                U, V = (U * P + V, V * P + U * D)\n                if U & 1:\n                    U += n\n                if V & 1:\n                    V += n\n                U, V = (U >> 1, V >> 1)\n                Qk *= Q\n            Qk %= n\n    return _int_tuple(U % n, V % n, Qk)"
}