{
    ".django.urls.resolvers.py@@LocalePrefixPattern.language_prefix": "def language_prefix(self):\n    language_code = get_language() or settings.LANGUAGE_CODE\n    if language_code == settings.LANGUAGE_CODE and (not self.prefix_default_language):\n        return ''\n    else:\n        return '%s/' % language_code",
    ".django.utils.translation.__init__.py@@get_language": "def get_language():\n    return _trans.get_language()",
    ".django.utils.translation.trans_real.py@@get_language": "def get_language():\n    t = getattr(_active, 'value', None)\n    if t is not None:\n        try:\n            return t.to_language()\n        except AttributeError:\n            pass\n    return settings.LANGUAGE_CODE",
    ".django.utils.translation.trans_real.py@@DjangoTranslation.to_language": "def to_language(self):\n    return self.__to_language",
    ".django.conf.__init__.py@@LazySettings.__getattr__": "def __getattr__(self, name):\n    if self._wrapped is empty:\n        self._setup(name)\n    val = getattr(self._wrapped, name)\n    self.__dict__[name] = val\n    return val",
    ".django.conf.__init__.py@@UserSettingsHolder.__getattr__": "def __getattr__(self, name):\n    if not name.isupper() or name in self._deleted:\n        raise AttributeError\n    return getattr(self.default_settings, name)"
}