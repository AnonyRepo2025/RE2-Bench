{
    ".xarray.core.weighted.py@@Weighted._check_dim": "def _check_dim(self, dim: Optional[Union[Hashable, Iterable[Hashable]]]):\n    if isinstance(dim, str) or not isinstance(dim, Iterable):\n        dims = [dim] if dim else []\n    else:\n        dims = list(dim)\n    missing_dims = set(dims) - set(self.obj.dims) - set(self.weights.dims)\n    if missing_dims:\n        raise ValueError(f'{self.__class__.__name__} does not contain the dimensions: {missing_dims}')",
    ".xarray.core.dataset.py@@Dataset.dims": "def dims(self) -> Mapping[Hashable, int]:\n    return Frozen(self._dims)",
    ".xarray.core.utils.py@@Frozen.__init__": "def __init__(self, mapping: Mapping[K, V]):\n    self.mapping = mapping",
    ".xarray.core.utils.py@@Frozen.__iter__": "def __iter__(self) -> Iterator[K]:\n    return iter(self.mapping)",
    ".xarray.core.dataarray.py@@DataArray.dims": "def dims(self) -> Tuple[Hashable, ...]:\n    return self.variable.dims",
    ".xarray.core.dataarray.py@@DataArray.variable": "def variable(self) -> Variable:\n    return self._variable",
    ".xarray.core.variable.py@@Variable.dims": "def dims(self):\n    return self._dims"
}