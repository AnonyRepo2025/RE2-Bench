{
    ".django.db.backends.utils.py@@typecast_timestamp": "def typecast_timestamp(s):\n    if not s:\n        return None\n    if ' ' not in s:\n        return typecast_date(s)\n    d, t = s.split()\n    if '-' in t:\n        t, tz = t.split('-', 1)\n        tz = '-' + tz\n    elif '+' in t:\n        t, tz = t.split('+', 1)\n        tz = '+' + tz\n    else:\n        tz = ''\n    dates = d.split('-')\n    times = t.split(':')\n    seconds = times[2]\n    if '.' in seconds:\n        seconds, microseconds = seconds.split('.')\n    else:\n        microseconds = '0'\n    tzinfo = utc if settings.USE_TZ else None\n    return datetime.datetime(int(dates[0]), int(dates[1]), int(dates[2]), int(times[0]), int(times[1]), int(seconds), int((microseconds + '000000')[:6]), tzinfo)",
    ".django.db.backends.utils.py@@typecast_date": "def typecast_date(s):\n    return datetime.date(*map(int, s.split('-'))) if s else None",
    ".django.utils.timezone.py@@localtime": "def localtime(value=None, timezone=None):\n    if value is None:\n        value = now()\n    if timezone is None:\n        timezone = get_current_timezone()\n    if is_naive(value):\n        raise ValueError('localtime() cannot be applied to a naive datetime')\n    return value.astimezone(timezone)",
    ".django.utils.timezone.py@@is_naive": "def is_naive(value):\n    return value.utcoffset() is None"
}