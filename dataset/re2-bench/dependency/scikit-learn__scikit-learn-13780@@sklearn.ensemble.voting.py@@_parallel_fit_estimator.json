{
    ".sklearn.linear_model.logistic.py@@LogisticRegression.fit": "def fit(self, X, y, sample_weight=None):\n    solver = _check_solver(self.solver, self.penalty, self.dual)\n    if not isinstance(self.C, numbers.Number) or self.C < 0:\n        raise ValueError('Penalty term must be positive; got (C=%r)' % self.C)\n    if self.penalty == 'elasticnet':\n        if not isinstance(self.l1_ratio, numbers.Number) or self.l1_ratio < 0 or self.l1_ratio > 1:\n            raise ValueError('l1_ratio must be between 0 and 1; got (l1_ratio=%r)' % self.l1_ratio)\n    elif self.l1_ratio is not None:\n        warnings.warn(\"l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty={})\".format(self.penalty))\n    if self.penalty == 'none':\n        if self.C != 1.0:\n            warnings.warn(\"Setting penalty='none' will ignore the C and l1_ratio parameters\")\n        C_ = np.inf\n        penalty = 'l2'\n    else:\n        C_ = self.C\n        penalty = self.penalty\n    if not isinstance(self.max_iter, numbers.Number) or self.max_iter < 0:\n        raise ValueError('Maximum number of iteration must be positive; got (max_iter=%r)' % self.max_iter)\n    if not isinstance(self.tol, numbers.Number) or self.tol < 0:\n        raise ValueError('Tolerance for stopping criteria must be positive; got (tol=%r)' % self.tol)\n    if solver in ['lbfgs', 'liblinear']:\n        _dtype = np.float64\n    else:\n        _dtype = [np.float64, np.float32]\n    X, y = check_X_y(X, y, accept_sparse='csr', dtype=_dtype, order='C', accept_large_sparse=solver != 'liblinear')\n    check_classification_targets(y)\n    self.classes_ = np.unique(y)\n    n_samples, n_features = X.shape\n    multi_class = _check_multi_class(self.multi_class, solver, len(self.classes_))\n    if solver == 'liblinear':\n        if effective_n_jobs(self.n_jobs) != 1:\n            warnings.warn(\"'n_jobs' > 1 does not have any effect when 'solver' is set to 'liblinear'. Got 'n_jobs' = {}.\".format(effective_n_jobs(self.n_jobs)))\n        self.coef_, self.intercept_, n_iter_ = _fit_liblinear(X, y, self.C, self.fit_intercept, self.intercept_scaling, self.class_weight, self.penalty, self.dual, self.verbose, self.max_iter, self.tol, self.random_state, sample_weight=sample_weight)\n        self.n_iter_ = np.array([n_iter_])\n        return self\n    if solver in ['sag', 'saga']:\n        max_squared_sum = row_norms(X, squared=True).max()\n    else:\n        max_squared_sum = None\n    n_classes = len(self.classes_)\n    classes_ = self.classes_\n    if n_classes < 2:\n        raise ValueError('This solver needs samples of at least 2 classes in the data, but the data contains only one class: %r' % classes_[0])\n    if len(self.classes_) == 2:\n        n_classes = 1\n        classes_ = classes_[1:]\n    if self.warm_start:\n        warm_start_coef = getattr(self, 'coef_', None)\n    else:\n        warm_start_coef = None\n    if warm_start_coef is not None and self.fit_intercept:\n        warm_start_coef = np.append(warm_start_coef, self.intercept_[:, np.newaxis], axis=1)\n    self.coef_ = list()\n    self.intercept_ = np.zeros(n_classes)\n    if multi_class == 'multinomial':\n        classes_ = [None]\n        warm_start_coef = [warm_start_coef]\n    if warm_start_coef is None:\n        warm_start_coef = [None] * n_classes\n    path_func = delayed(_logistic_regression_path)\n    if solver in ['sag', 'saga']:\n        prefer = 'threads'\n    else:\n        prefer = 'processes'\n    fold_coefs_ = Parallel(n_jobs=self.n_jobs, verbose=self.verbose, **_joblib_parallel_args(prefer=prefer))((path_func(X, y, pos_class=class_, Cs=[C_], l1_ratio=self.l1_ratio, fit_intercept=self.fit_intercept, tol=self.tol, verbose=self.verbose, solver=solver, multi_class=multi_class, max_iter=self.max_iter, class_weight=self.class_weight, check_input=False, random_state=self.random_state, coef=warm_start_coef_, penalty=penalty, max_squared_sum=max_squared_sum, sample_weight=sample_weight) for class_, warm_start_coef_ in zip(classes_, warm_start_coef)))\n    fold_coefs_, _, n_iter_ = zip(*fold_coefs_)\n    self.n_iter_ = np.asarray(n_iter_, dtype=np.int32)[:, 0]\n    if multi_class == 'multinomial':\n        self.coef_ = fold_coefs_[0][0]\n    else:\n        self.coef_ = np.asarray(fold_coefs_)\n        self.coef_ = self.coef_.reshape(n_classes, n_features + int(self.fit_intercept))\n    if self.fit_intercept:\n        self.intercept_ = self.coef_[:, -1]\n        self.coef_ = self.coef_[:, :-1]\n    return self",
    ".sklearn.linear_model.logistic.py@@_check_solver": "def _check_solver(solver, penalty, dual):\n    if solver == 'warn':\n        solver = 'liblinear'\n        warnings.warn(\"Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\", FutureWarning)\n    all_solvers = ['liblinear', 'newton-cg', 'lbfgs', 'sag', 'saga']\n    if solver not in all_solvers:\n        raise ValueError('Logistic Regression supports only solvers in %s, got %s.' % (all_solvers, solver))\n    all_penalties = ['l1', 'l2', 'elasticnet', 'none']\n    if penalty not in all_penalties:\n        raise ValueError('Logistic Regression supports only penalties in %s, got %s.' % (all_penalties, penalty))\n    if solver not in ['liblinear', 'saga'] and penalty not in ('l2', 'none'):\n        raise ValueError(\"Solver %s supports only 'l2' or 'none' penalties, got %s penalty.\" % (solver, penalty))\n    if solver != 'liblinear' and dual:\n        raise ValueError('Solver %s supports only dual=False, got dual=%s' % (solver, dual))\n    if penalty == 'elasticnet' and solver != 'saga':\n        raise ValueError(\"Only 'saga' solver supports elasticnet penalty, got solver={}.\".format(solver))\n    if solver == 'liblinear' and penalty == 'none':\n        raise ValueError(\"penalty='none' is not supported for the liblinear solver\")\n    return solver",
    ".sklearn.utils.validation.py@@check_X_y": "def check_X_y(X, y, accept_sparse=False, accept_large_sparse=True, dtype='numeric', order=None, copy=False, force_all_finite=True, ensure_2d=True, allow_nd=False, multi_output=False, ensure_min_samples=1, ensure_min_features=1, y_numeric=False, warn_on_dtype=None, estimator=None):\n    if y is None:\n        raise ValueError('y cannot be None')\n    X = check_array(X, accept_sparse=accept_sparse, accept_large_sparse=accept_large_sparse, dtype=dtype, order=order, copy=copy, force_all_finite=force_all_finite, ensure_2d=ensure_2d, allow_nd=allow_nd, ensure_min_samples=ensure_min_samples, ensure_min_features=ensure_min_features, warn_on_dtype=warn_on_dtype, estimator=estimator)\n    if multi_output:\n        y = check_array(y, 'csr', force_all_finite=True, ensure_2d=False, dtype=None)\n    else:\n        y = column_or_1d(y, warn=True)\n        _assert_all_finite(y)\n    if y_numeric and y.dtype.kind == 'O':\n        y = y.astype(np.float64)\n    check_consistent_length(X, y)\n    return (X, y)",
    ".sklearn.utils.validation.py@@check_array": "def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='numeric', order=None, copy=False, force_all_finite=True, ensure_2d=True, allow_nd=False, ensure_min_samples=1, ensure_min_features=1, warn_on_dtype=None, estimator=None):\n    if warn_on_dtype is not None:\n        warnings.warn(\"'warn_on_dtype' is deprecated in version 0.21 and will be removed in 0.23. Don't set `warn_on_dtype` to remove this warning.\", DeprecationWarning)\n    array_orig = array\n    dtype_numeric = isinstance(dtype, str) and dtype == 'numeric'\n    dtype_orig = getattr(array, 'dtype', None)\n    if not hasattr(dtype_orig, 'kind'):\n        dtype_orig = None\n    dtypes_orig = None\n    if hasattr(array, 'dtypes') and hasattr(array.dtypes, '__array__'):\n        dtypes_orig = np.array(array.dtypes)\n    if dtype_numeric:\n        if dtype_orig is not None and dtype_orig.kind == 'O':\n            dtype = np.float64\n        else:\n            dtype = None\n    if isinstance(dtype, (list, tuple)):\n        if dtype_orig is not None and dtype_orig in dtype:\n            dtype = None\n        else:\n            dtype = dtype[0]\n    if force_all_finite not in (True, False, 'allow-nan'):\n        raise ValueError('force_all_finite should be a bool or \"allow-nan\". Got {!r} instead'.format(force_all_finite))\n    if estimator is not None:\n        if isinstance(estimator, str):\n            estimator_name = estimator\n        else:\n            estimator_name = estimator.__class__.__name__\n    else:\n        estimator_name = 'Estimator'\n    context = ' by %s' % estimator_name if estimator is not None else ''\n    if sp.issparse(array):\n        _ensure_no_complex_data(array)\n        array = _ensure_sparse_format(array, accept_sparse=accept_sparse, dtype=dtype, copy=copy, force_all_finite=force_all_finite, accept_large_sparse=accept_large_sparse)\n    else:\n        with warnings.catch_warnings():\n            try:\n                warnings.simplefilter('error', ComplexWarning)\n                array = np.asarray(array, dtype=dtype, order=order)\n            except ComplexWarning:\n                raise ValueError('Complex data not supported\\n{}\\n'.format(array))\n        _ensure_no_complex_data(array)\n        if ensure_2d:\n            if array.ndim == 0:\n                raise ValueError('Expected 2D array, got scalar array instead:\\narray={}.\\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.'.format(array))\n            if array.ndim == 1:\n                raise ValueError('Expected 2D array, got 1D array instead:\\narray={}.\\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.'.format(array))\n        if dtype_numeric and np.issubdtype(array.dtype, np.flexible):\n            warnings.warn(\"Beginning in version 0.22, arrays of bytes/strings will be converted to decimal numbers if dtype='numeric'. It is recommended that you convert the array to a float dtype before using it in scikit-learn, for example by using your_array = your_array.astype(np.float64).\", FutureWarning)\n        if dtype_numeric and array.dtype.kind == 'O':\n            array = array.astype(np.float64)\n        if not allow_nd and array.ndim >= 3:\n            raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim, estimator_name))\n        if force_all_finite:\n            _assert_all_finite(array, allow_nan=force_all_finite == 'allow-nan')\n    if ensure_min_samples > 0:\n        n_samples = _num_samples(array)\n        if n_samples < ensure_min_samples:\n            raise ValueError('Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.' % (n_samples, array.shape, ensure_min_samples, context))\n    if ensure_min_features > 0 and array.ndim == 2:\n        n_features = array.shape[1]\n        if n_features < ensure_min_features:\n            raise ValueError('Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.' % (n_features, array.shape, ensure_min_features, context))\n    if warn_on_dtype and dtype_orig is not None and (array.dtype != dtype_orig):\n        msg = 'Data with input dtype %s was converted to %s%s.' % (dtype_orig, array.dtype, context)\n        warnings.warn(msg, DataConversionWarning)\n    if copy and np.may_share_memory(array, array_orig):\n        array = np.array(array, dtype=dtype, order=order)\n    if warn_on_dtype and dtypes_orig is not None and ({array.dtype} != set(dtypes_orig)):\n        msg = 'Data with input dtype %s were all converted to %s%s.' % (', '.join(map(str, sorted(set(dtypes_orig)))), array.dtype, context)\n        warnings.warn(msg, DataConversionWarning, stacklevel=3)\n    return array",
    ".sklearn.utils.validation.py@@_ensure_no_complex_data": "def _ensure_no_complex_data(array):\n    if hasattr(array, 'dtype') and array.dtype is not None and hasattr(array.dtype, 'kind') and (array.dtype.kind == 'c'):\n        raise ValueError('Complex data not supported\\n{}\\n'.format(array))",
    ".sklearn.utils.validation.py@@_assert_all_finite": "def _assert_all_finite(X, allow_nan=False):\n    from .extmath import _safe_accumulator_op\n    if _get_config()['assume_finite']:\n        return\n    X = np.asanyarray(X)\n    is_float = X.dtype.kind in 'fc'\n    if is_float and np.isfinite(_safe_accumulator_op(np.sum, X)):\n        pass\n    elif is_float:\n        msg_err = 'Input contains {} or a value too large for {!r}.'\n        if allow_nan and np.isinf(X).any() or (not allow_nan and (not np.isfinite(X).all())):\n            type_err = 'infinity' if allow_nan else 'NaN, infinity'\n            raise ValueError(msg_err.format(type_err, X.dtype))\n    elif X.dtype == np.dtype('object') and (not allow_nan):\n        if _object_dtype_isnan(X).any():\n            raise ValueError('Input contains NaN')",
    ".sklearn._config.py@@get_config": "def get_config():\n    return _global_config.copy()",
    ".sklearn.utils.extmath.py@@_safe_accumulator_op": "def _safe_accumulator_op(op, x, *args, **kwargs):\n    if np.issubdtype(x.dtype, np.floating) and x.dtype.itemsize < 8:\n        result = op(x, *args, **kwargs, dtype=np.float64)\n    else:\n        result = op(x, *args, **kwargs)\n    return result",
    ".sklearn.utils.validation.py@@_num_samples": "def _num_samples(x):\n    if hasattr(x, 'fit') and callable(x.fit):\n        raise TypeError('Expected sequence or array-like, got estimator %s' % x)\n    if not hasattr(x, '__len__') and (not hasattr(x, 'shape')):\n        if hasattr(x, '__array__'):\n            x = np.asarray(x)\n        else:\n            raise TypeError('Expected sequence or array-like, got %s' % type(x))\n    if hasattr(x, 'shape'):\n        if len(x.shape) == 0:\n            raise TypeError('Singleton array %r cannot be considered a valid collection.' % x)\n        if isinstance(x.shape[0], numbers.Integral):\n            return x.shape[0]\n        else:\n            return len(x)\n    else:\n        return len(x)",
    ".sklearn.utils.validation.py@@column_or_1d": "def column_or_1d(y, warn=False):\n    shape = np.shape(y)\n    if len(shape) == 1:\n        return np.ravel(y)\n    if len(shape) == 2 and shape[1] == 1:\n        if warn:\n            warnings.warn('A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().', DataConversionWarning, stacklevel=2)\n        return np.ravel(y)\n    raise ValueError('bad input shape {0}'.format(shape))",
    ".sklearn.utils.validation.py@@check_consistent_length": "def check_consistent_length(*arrays):\n    lengths = [_num_samples(X) for X in arrays if X is not None]\n    uniques = np.unique(lengths)\n    if len(uniques) > 1:\n        raise ValueError('Found input variables with inconsistent numbers of samples: %r' % [int(l) for l in lengths])",
    ".sklearn.utils.multiclass.py@@check_classification_targets": "def check_classification_targets(y):\n    y_type = type_of_target(y)\n    if y_type not in ['binary', 'multiclass', 'multiclass-multioutput', 'multilabel-indicator', 'multilabel-sequences']:\n        raise ValueError('Unknown label type: %r' % y_type)",
    ".sklearn.utils.multiclass.py@@type_of_target": "def type_of_target(y):\n    valid = (isinstance(y, (Sequence, spmatrix)) or hasattr(y, '__array__')) and (not isinstance(y, str))\n    if not valid:\n        raise ValueError('Expected array-like (array or non-string sequence), got %r' % y)\n    sparseseries = y.__class__.__name__ == 'SparseSeries'\n    if sparseseries:\n        raise ValueError(\"y cannot be class 'SparseSeries'.\")\n    if is_multilabel(y):\n        return 'multilabel-indicator'\n    try:\n        y = np.asarray(y)\n    except ValueError:\n        return 'unknown'\n    try:\n        if not hasattr(y[0], '__array__') and isinstance(y[0], Sequence) and (not isinstance(y[0], str)):\n            raise ValueError('You appear to be using a legacy multi-label data representation. Sequence of sequences are no longer supported; use a binary array or sparse matrix instead - the MultiLabelBinarizer transformer can convert to this format.')\n    except IndexError:\n        pass\n    if y.ndim > 2 or (y.dtype == object and len(y) and (not isinstance(y.flat[0], str))):\n        return 'unknown'\n    if y.ndim == 2 and y.shape[1] == 0:\n        return 'unknown'\n    if y.ndim == 2 and y.shape[1] > 1:\n        suffix = '-multioutput'\n    else:\n        suffix = ''\n    if y.dtype.kind == 'f' and np.any(y != y.astype(int)):\n        _assert_all_finite(y)\n        return 'continuous' + suffix\n    if len(np.unique(y)) > 2 or (y.ndim >= 2 and len(y[0]) > 1):\n        return 'multiclass' + suffix\n    else:\n        return 'binary'",
    ".sklearn.utils.multiclass.py@@is_multilabel": "def is_multilabel(y):\n    if hasattr(y, '__array__'):\n        y = np.asarray(y)\n    if not (hasattr(y, 'shape') and y.ndim == 2 and (y.shape[1] > 1)):\n        return False\n    if issparse(y):\n        if isinstance(y, (dok_matrix, lil_matrix)):\n            y = y.tocsr()\n        return len(y.data) == 0 or (np.unique(y.data).size == 1 and (y.dtype.kind in 'biu' or _is_integral_float(np.unique(y.data))))\n    else:\n        labels = np.unique(y)\n        return len(labels) < 3 and (y.dtype.kind in 'biu' or _is_integral_float(labels))",
    ".sklearn.linear_model.logistic.py@@_check_multi_class": "def _check_multi_class(multi_class, solver, n_classes):\n    if multi_class == 'warn':\n        multi_class = 'ovr'\n        if n_classes > 2:\n            warnings.warn(\"Default multi_class will be changed to 'auto' in 0.22. Specify the multi_class option to silence this warning.\", FutureWarning)\n    if multi_class == 'auto':\n        if solver == 'liblinear':\n            multi_class = 'ovr'\n        elif n_classes > 2:\n            multi_class = 'multinomial'\n        else:\n            multi_class = 'ovr'\n    if multi_class not in ('multinomial', 'ovr'):\n        raise ValueError(\"multi_class should be 'multinomial', 'ovr' or 'auto'. Got %s.\" % multi_class)\n    if multi_class == 'multinomial' and solver == 'liblinear':\n        raise ValueError('Solver %s does not support a multinomial backend.' % solver)\n    return multi_class",
    ".sklearn.svm.base.py@@_fit_liblinear": "def _fit_liblinear(X, y, C, fit_intercept, intercept_scaling, class_weight, penalty, dual, verbose, max_iter, tol, random_state=None, multi_class='ovr', loss='logistic_regression', epsilon=0.1, sample_weight=None):\n    if loss not in ['epsilon_insensitive', 'squared_epsilon_insensitive']:\n        enc = LabelEncoder()\n        y_ind = enc.fit_transform(y)\n        classes_ = enc.classes_\n        if len(classes_) < 2:\n            raise ValueError('This solver needs samples of at least 2 classes in the data, but the data contains only one class: %r' % classes_[0])\n        class_weight_ = compute_class_weight(class_weight, classes_, y)\n    else:\n        class_weight_ = np.empty(0, dtype=np.float64)\n        y_ind = y\n    liblinear.set_verbosity_wrap(verbose)\n    rnd = check_random_state(random_state)\n    if verbose:\n        print('[LibLinear]', end='')\n    bias = -1.0\n    if fit_intercept:\n        if intercept_scaling <= 0:\n            raise ValueError('Intercept scaling is %r but needs to be greater than 0. To disable fitting an intercept, set fit_intercept=False.' % intercept_scaling)\n        else:\n            bias = intercept_scaling\n    libsvm.set_verbosity_wrap(verbose)\n    libsvm_sparse.set_verbosity_wrap(verbose)\n    liblinear.set_verbosity_wrap(verbose)\n    if sp.issparse(X):\n        _check_large_sparse(X)\n    y_ind = np.asarray(y_ind, dtype=np.float64).ravel()\n    y_ind = np.require(y_ind, requirements='W')\n    if sample_weight is None:\n        sample_weight = np.ones(X.shape[0])\n    else:\n        sample_weight = np.array(sample_weight, dtype=np.float64, order='C')\n        check_consistent_length(sample_weight, X)\n    solver_type = _get_liblinear_solver_type(multi_class, penalty, loss, dual)\n    raw_coef_, n_iter_ = liblinear.train_wrap(X, y_ind, sp.isspmatrix(X), solver_type, tol, bias, C, class_weight_, max_iter, rnd.randint(np.iinfo('i').max), epsilon, sample_weight)\n    n_iter_ = max(n_iter_)\n    if n_iter_ >= max_iter:\n        warnings.warn('Liblinear failed to converge, increase the number of iterations.', ConvergenceWarning)\n    if fit_intercept:\n        coef_ = raw_coef_[:, :-1]\n        intercept_ = intercept_scaling * raw_coef_[:, -1]\n    else:\n        coef_ = raw_coef_\n        intercept_ = 0.0\n    return (coef_, intercept_, n_iter_)",
    ".sklearn.preprocessing.label.py@@LabelEncoder.fit_transform": "def fit_transform(self, y):\n    y = column_or_1d(y, warn=True)\n    self.classes_, y = _encode(y, encode=True)\n    return y",
    ".sklearn.preprocessing.label.py@@_encode": "def _encode(values, uniques=None, encode=False):\n    if values.dtype == object:\n        try:\n            res = _encode_python(values, uniques, encode)\n        except TypeError:\n            raise TypeError('argument must be a string or number')\n        return res\n    else:\n        return _encode_numpy(values, uniques, encode)",
    ".sklearn.preprocessing.label.py@@_encode_numpy": "def _encode_numpy(values, uniques=None, encode=False):\n    if uniques is None:\n        if encode:\n            uniques, encoded = np.unique(values, return_inverse=True)\n            return (uniques, encoded)\n        else:\n            return np.unique(values)\n    if encode:\n        diff = _encode_check_unknown(values, uniques)\n        if diff:\n            raise ValueError('y contains previously unseen labels: %s' % str(diff))\n        encoded = np.searchsorted(uniques, values)\n        return (uniques, encoded)\n    else:\n        return uniques",
    ".sklearn.utils.class_weight.py@@compute_class_weight": "def compute_class_weight(class_weight, classes, y):\n    from ..preprocessing import LabelEncoder\n    if set(y) - set(classes):\n        raise ValueError('classes should include all valid labels that can be in y')\n    if class_weight is None or len(class_weight) == 0:\n        weight = np.ones(classes.shape[0], dtype=np.float64, order='C')\n    elif class_weight == 'balanced':\n        le = LabelEncoder()\n        y_ind = le.fit_transform(y)\n        if not all(np.in1d(classes, le.classes_)):\n            raise ValueError('classes should have valid labels that are in y')\n        recip_freq = len(y) / (len(le.classes_) * np.bincount(y_ind).astype(np.float64))\n        weight = recip_freq[le.transform(classes)]\n    else:\n        weight = np.ones(classes.shape[0], dtype=np.float64, order='C')\n        if not isinstance(class_weight, dict):\n            raise ValueError(\"class_weight must be dict, 'balanced', or None, got: %r\" % class_weight)\n        for c in class_weight:\n            i = np.searchsorted(classes, c)\n            if i >= len(classes) or classes[i] != c:\n                raise ValueError('Class label {} not present.'.format(c))\n            else:\n                weight[i] = class_weight[c]\n    return weight",
    ".sklearn.utils.validation.py@@check_random_state": "def check_random_state(seed):\n    if seed is None or seed is np.random:\n        return np.random.mtrand._rand\n    if isinstance(seed, (numbers.Integral, np.integer)):\n        return np.random.RandomState(seed)\n    if isinstance(seed, np.random.RandomState):\n        return seed\n    raise ValueError('%r cannot be used to seed a numpy.random.RandomState instance' % seed)",
    ".sklearn.svm.base.py@@_get_liblinear_solver_type": "def _get_liblinear_solver_type(multi_class, penalty, loss, dual):\n    _solver_type_dict = {'logistic_regression': {'l1': {False: 6}, 'l2': {False: 0, True: 7}}, 'hinge': {'l2': {True: 3}}, 'squared_hinge': {'l1': {False: 5}, 'l2': {False: 2, True: 1}}, 'epsilon_insensitive': {'l2': {True: 13}}, 'squared_epsilon_insensitive': {'l2': {False: 11, True: 12}}, 'crammer_singer': 4}\n    if multi_class == 'crammer_singer':\n        return _solver_type_dict[multi_class]\n    elif multi_class != 'ovr':\n        raise ValueError('`multi_class` must be one of `ovr`, `crammer_singer`, got %r' % multi_class)\n    _solver_pen = _solver_type_dict.get(loss, None)\n    if _solver_pen is None:\n        error_string = \"loss='%s' is not supported\" % loss\n    else:\n        _solver_dual = _solver_pen.get(penalty, None)\n        if _solver_dual is None:\n            error_string = \"The combination of penalty='%s' and loss='%s' is not supported\" % (penalty, loss)\n        else:\n            solver_num = _solver_dual.get(dual, None)\n            if solver_num is None:\n                error_string = \"The combination of penalty='%s' and loss='%s' are not supported when dual=%s\" % (penalty, loss, dual)\n            else:\n                return solver_num\n    raise ValueError('Unsupported set of arguments: %s, Parameters: penalty=%r, loss=%r, dual=%r' % (error_string, penalty, loss, dual))",
    ".sklearn.ensemble.forest.py@@BaseForest.fit": "def fit(self, X, y, sample_weight=None):\n    if self.n_estimators == 'warn':\n        warn('The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.', FutureWarning)\n        self.n_estimators = 10\n    X = check_array(X, accept_sparse='csc', dtype=DTYPE)\n    y = check_array(y, accept_sparse='csc', ensure_2d=False, dtype=None)\n    if sample_weight is not None:\n        sample_weight = check_array(sample_weight, ensure_2d=False)\n    if issparse(X):\n        X.sort_indices()\n    self.n_features_ = X.shape[1]\n    y = np.atleast_1d(y)\n    if y.ndim == 2 and y.shape[1] == 1:\n        warn('A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().', DataConversionWarning, stacklevel=2)\n    if y.ndim == 1:\n        y = np.reshape(y, (-1, 1))\n    self.n_outputs_ = y.shape[1]\n    y, expanded_class_weight = self._validate_y_class_weight(y)\n    if getattr(y, 'dtype', None) != DOUBLE or not y.flags.contiguous:\n        y = np.ascontiguousarray(y, dtype=DOUBLE)\n    if expanded_class_weight is not None:\n        if sample_weight is not None:\n            sample_weight = sample_weight * expanded_class_weight\n        else:\n            sample_weight = expanded_class_weight\n    self._validate_estimator()\n    if not self.bootstrap and self.oob_score:\n        raise ValueError('Out of bag estimation only available if bootstrap=True')\n    random_state = check_random_state(self.random_state)\n    if not self.warm_start or not hasattr(self, 'estimators_'):\n        self.estimators_ = []\n    n_more_estimators = self.n_estimators - len(self.estimators_)\n    if n_more_estimators < 0:\n        raise ValueError('n_estimators=%d must be larger or equal to len(estimators_)=%d when warm_start==True' % (self.n_estimators, len(self.estimators_)))\n    elif n_more_estimators == 0:\n        warn('Warm-start fitting without increasing n_estimators does not fit new trees.')\n    else:\n        if self.warm_start and len(self.estimators_) > 0:\n            random_state.randint(MAX_INT, size=len(self.estimators_))\n        trees = [self._make_estimator(append=False, random_state=random_state) for i in range(n_more_estimators)]\n        trees = Parallel(n_jobs=self.n_jobs, verbose=self.verbose, **_joblib_parallel_args(prefer='threads'))((delayed(_parallel_build_trees)(t, self, X, y, sample_weight, i, len(trees), verbose=self.verbose, class_weight=self.class_weight) for i, t in enumerate(trees)))\n        self.estimators_.extend(trees)\n    if self.oob_score:\n        self._set_oob_score(X, y)\n    if hasattr(self, 'classes_') and self.n_outputs_ == 1:\n        self.n_classes_ = self.n_classes_[0]\n        self.classes_ = self.classes_[0]\n    return self",
    ".sklearn.ensemble.forest.py@@ForestClassifier._validate_y_class_weight": "def _validate_y_class_weight(self, y):\n    check_classification_targets(y)\n    y = np.copy(y)\n    expanded_class_weight = None\n    if self.class_weight is not None:\n        y_original = np.copy(y)\n    self.classes_ = []\n    self.n_classes_ = []\n    y_store_unique_indices = np.zeros(y.shape, dtype=np.int)\n    for k in range(self.n_outputs_):\n        classes_k, y_store_unique_indices[:, k] = np.unique(y[:, k], return_inverse=True)\n        self.classes_.append(classes_k)\n        self.n_classes_.append(classes_k.shape[0])\n    y = y_store_unique_indices\n    if self.class_weight is not None:\n        valid_presets = ('balanced', 'balanced_subsample')\n        if isinstance(self.class_weight, str):\n            if self.class_weight not in valid_presets:\n                raise ValueError('Valid presets for class_weight include \"balanced\" and \"balanced_subsample\". Given \"%s\".' % self.class_weight)\n            if self.warm_start:\n                warn('class_weight presets \"balanced\" or \"balanced_subsample\" are not recommended for warm_start if the fitted data differs from the full dataset. In order to use \"balanced\" weights, use compute_class_weight(\"balanced\", classes, y). In place of y you can use a large enough sample of the full training set target to properly estimate the class frequency distributions. Pass the resulting weights as the class_weight parameter.')\n        if self.class_weight != 'balanced_subsample' or not self.bootstrap:\n            if self.class_weight == 'balanced_subsample':\n                class_weight = 'balanced'\n            else:\n                class_weight = self.class_weight\n            expanded_class_weight = compute_sample_weight(class_weight, y_original)\n    return (y, expanded_class_weight)",
    ".sklearn.ensemble.base.py@@BaseEnsemble._validate_estimator": "def _validate_estimator(self, default=None):\n    if not isinstance(self.n_estimators, (numbers.Integral, np.integer)):\n        raise ValueError('n_estimators must be an integer, got {0}.'.format(type(self.n_estimators)))\n    if self.n_estimators <= 0:\n        raise ValueError('n_estimators must be greater than zero, got {0}.'.format(self.n_estimators))\n    if self.base_estimator is not None:\n        self.base_estimator_ = self.base_estimator\n    else:\n        self.base_estimator_ = default\n    if self.base_estimator_ is None:\n        raise ValueError('base_estimator cannot be None')",
    ".sklearn.ensemble.base.py@@BaseEnsemble._make_estimator": "def _make_estimator(self, append=True, random_state=None):\n    estimator = clone(self.base_estimator_)\n    estimator.set_params(**{p: getattr(self, p) for p in self.estimator_params})\n    if random_state is not None:\n        _set_random_states(estimator, random_state)\n    if append:\n        self.estimators_.append(estimator)\n    return estimator",
    ".sklearn.base.py@@clone": "def clone(estimator, safe=True):\n    estimator_type = type(estimator)\n    if estimator_type in (list, tuple, set, frozenset):\n        return estimator_type([clone(e, safe=safe) for e in estimator])\n    elif not hasattr(estimator, 'get_params') or isinstance(estimator, type):\n        if not safe:\n            return copy.deepcopy(estimator)\n        else:\n            raise TypeError(\"Cannot clone object '%s' (type %s): it does not seem to be a scikit-learn estimator as it does not implement a 'get_params' methods.\" % (repr(estimator), type(estimator)))\n    klass = estimator.__class__\n    new_object_params = estimator.get_params(deep=False)\n    for name, param in new_object_params.items():\n        new_object_params[name] = clone(param, safe=False)\n    new_object = klass(**new_object_params)\n    params_set = new_object.get_params(deep=False)\n    for name in new_object_params:\n        param1 = new_object_params[name]\n        param2 = params_set[name]\n        if param1 is not param2:\n            raise RuntimeError('Cannot clone object %s, as the constructor either does not set or modifies parameter %s' % (estimator, name))\n    return new_object",
    ".sklearn.base.py@@BaseEstimator.get_params": "def get_params(self, deep=True):\n    out = dict()\n    for key in self._get_param_names():\n        value = getattr(self, key, None)\n        if deep and hasattr(value, 'get_params'):\n            deep_items = value.get_params().items()\n            out.update(((key + '__' + k, val) for k, val in deep_items))\n        out[key] = value\n    return out",
    ".sklearn.base.py@@BaseEstimator._get_param_names": "def _get_param_names(cls):\n    init = getattr(cls.__init__, 'deprecated_original', cls.__init__)\n    if init is object.__init__:\n        return []\n    init_signature = inspect.signature(init)\n    parameters = [p for p in init_signature.parameters.values() if p.name != 'self' and p.kind != p.VAR_KEYWORD]\n    for p in parameters:\n        if p.kind == p.VAR_POSITIONAL:\n            raise RuntimeError(\"scikit-learn estimators should always specify their parameters in the signature of their __init__ (no varargs). %s with constructor %s doesn't  follow this convention.\" % (cls, init_signature))\n    return sorted([p.name for p in parameters])",
    ".sklearn.tree.tree.py@@DecisionTreeClassifier.__init__": "def __init__(self, criterion='gini', splitter='best', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None, random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, class_weight=None, presort=False):\n    super().__init__(criterion=criterion, splitter=splitter, max_depth=max_depth, min_samples_split=min_samples_split, min_samples_leaf=min_samples_leaf, min_weight_fraction_leaf=min_weight_fraction_leaf, max_features=max_features, max_leaf_nodes=max_leaf_nodes, class_weight=class_weight, random_state=random_state, min_impurity_decrease=min_impurity_decrease, min_impurity_split=min_impurity_split, presort=presort)",
    ".sklearn.tree.tree.py@@BaseDecisionTree.__init__": "def __init__(self, criterion, splitter, max_depth, min_samples_split, min_samples_leaf, min_weight_fraction_leaf, max_features, max_leaf_nodes, random_state, min_impurity_decrease, min_impurity_split, class_weight=None, presort=False):\n    self.criterion = criterion\n    self.splitter = splitter\n    self.max_depth = max_depth\n    self.min_samples_split = min_samples_split\n    self.min_samples_leaf = min_samples_leaf\n    self.min_weight_fraction_leaf = min_weight_fraction_leaf\n    self.max_features = max_features\n    self.random_state = random_state\n    self.max_leaf_nodes = max_leaf_nodes\n    self.min_impurity_decrease = min_impurity_decrease\n    self.min_impurity_split = min_impurity_split\n    self.class_weight = class_weight\n    self.presort = presort",
    ".sklearn.base.py@@BaseEstimator.set_params": "def set_params(self, **params):\n    if not params:\n        return self\n    valid_params = self.get_params(deep=True)\n    nested_params = defaultdict(dict)\n    for key, value in params.items():\n        key, delim, sub_key = key.partition('__')\n        if key not in valid_params:\n            raise ValueError('Invalid parameter %s for estimator %s. Check the list of available parameters with `estimator.get_params().keys()`.' % (key, self))\n        if delim:\n            nested_params[key][sub_key] = value\n        else:\n            setattr(self, key, value)\n            valid_params[key] = value\n    for key, sub_params in nested_params.items():\n        valid_params[key].set_params(**sub_params)\n    return self",
    ".sklearn.ensemble.base.py@@_set_random_states": "def _set_random_states(estimator, random_state=None):\n    random_state = check_random_state(random_state)\n    to_set = {}\n    for key in sorted(estimator.get_params(deep=True)):\n        if key == 'random_state' or key.endswith('__random_state'):\n            to_set[key] = random_state.randint(MAX_RAND_SEED)\n    if to_set:\n        estimator.set_params(**to_set)",
    ".sklearn.utils.fixes.py@@_joblib_parallel_args": "def _joblib_parallel_args(**kwargs):\n    from . import _joblib\n    if _joblib.__version__ >= LooseVersion('0.12'):\n        return kwargs\n    extra_args = set(kwargs.keys()).difference({'prefer', 'require'})\n    if extra_args:\n        raise NotImplementedError('unhandled arguments %s with joblib %s' % (list(extra_args), _joblib.__version__))\n    args = {}\n    if 'prefer' in kwargs:\n        prefer = kwargs['prefer']\n        if prefer not in ['threads', 'processes', None]:\n            raise ValueError('prefer=%s is not supported' % prefer)\n        args['backend'] = {'threads': 'threading', 'processes': 'multiprocessing', None: None}[prefer]\n    if 'require' in kwargs:\n        require = kwargs['require']\n        if require not in [None, 'sharedmem']:\n            raise ValueError('require=%s is not supported' % require)\n        if require == 'sharedmem':\n            args['backend'] = 'threading'\n    return args",
    ".sklearn.ensemble.forest.py@@_parallel_build_trees": "def _parallel_build_trees(tree, forest, X, y, sample_weight, tree_idx, n_trees, verbose=0, class_weight=None):\n    if verbose > 1:\n        print('building tree %d of %d' % (tree_idx + 1, n_trees))\n    if forest.bootstrap:\n        n_samples = X.shape[0]\n        if sample_weight is None:\n            curr_sample_weight = np.ones((n_samples,), dtype=np.float64)\n        else:\n            curr_sample_weight = sample_weight.copy()\n        indices = _generate_sample_indices(tree.random_state, n_samples)\n        sample_counts = np.bincount(indices, minlength=n_samples)\n        curr_sample_weight *= sample_counts\n        if class_weight == 'subsample':\n            with catch_warnings():\n                simplefilter('ignore', DeprecationWarning)\n                curr_sample_weight *= compute_sample_weight('auto', y, indices)\n        elif class_weight == 'balanced_subsample':\n            curr_sample_weight *= compute_sample_weight('balanced', y, indices)\n        tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)\n    else:\n        tree.fit(X, y, sample_weight=sample_weight, check_input=False)\n    return tree",
    ".sklearn.ensemble.forest.py@@_generate_sample_indices": "def _generate_sample_indices(random_state, n_samples):\n    random_instance = check_random_state(random_state)\n    sample_indices = random_instance.randint(0, n_samples, n_samples)\n    return sample_indices",
    ".sklearn.tree.tree.py@@DecisionTreeClassifier.fit": "def fit(self, X, y, sample_weight=None, check_input=True, X_idx_sorted=None):\n    super().fit(X, y, sample_weight=sample_weight, check_input=check_input, X_idx_sorted=X_idx_sorted)\n    return self",
    ".sklearn.tree.tree.py@@BaseDecisionTree.fit": "def fit(self, X, y, sample_weight=None, check_input=True, X_idx_sorted=None):\n    random_state = check_random_state(self.random_state)\n    if check_input:\n        X = check_array(X, dtype=DTYPE, accept_sparse='csc')\n        y = check_array(y, ensure_2d=False, dtype=None)\n        if issparse(X):\n            X.sort_indices()\n            if X.indices.dtype != np.intc or X.indptr.dtype != np.intc:\n                raise ValueError('No support for np.int64 index based sparse matrices')\n    n_samples, self.n_features_ = X.shape\n    is_classification = is_classifier(self)\n    y = np.atleast_1d(y)\n    expanded_class_weight = None\n    if y.ndim == 1:\n        y = np.reshape(y, (-1, 1))\n    self.n_outputs_ = y.shape[1]\n    if is_classification:\n        check_classification_targets(y)\n        y = np.copy(y)\n        self.classes_ = []\n        self.n_classes_ = []\n        if self.class_weight is not None:\n            y_original = np.copy(y)\n        y_encoded = np.zeros(y.shape, dtype=np.int)\n        for k in range(self.n_outputs_):\n            classes_k, y_encoded[:, k] = np.unique(y[:, k], return_inverse=True)\n            self.classes_.append(classes_k)\n            self.n_classes_.append(classes_k.shape[0])\n        y = y_encoded\n        if self.class_weight is not None:\n            expanded_class_weight = compute_sample_weight(self.class_weight, y_original)\n    else:\n        self.classes_ = [None] * self.n_outputs_\n        self.n_classes_ = [1] * self.n_outputs_\n    self.n_classes_ = np.array(self.n_classes_, dtype=np.intp)\n    if getattr(y, 'dtype', None) != DOUBLE or not y.flags.contiguous:\n        y = np.ascontiguousarray(y, dtype=DOUBLE)\n    max_depth = 2 ** 31 - 1 if self.max_depth is None else self.max_depth\n    max_leaf_nodes = -1 if self.max_leaf_nodes is None else self.max_leaf_nodes\n    if isinstance(self.min_samples_leaf, (numbers.Integral, np.integer)):\n        if not 1 <= self.min_samples_leaf:\n            raise ValueError('min_samples_leaf must be at least 1 or in (0, 0.5], got %s' % self.min_samples_leaf)\n        min_samples_leaf = self.min_samples_leaf\n    else:\n        if not 0.0 < self.min_samples_leaf <= 0.5:\n            raise ValueError('min_samples_leaf must be at least 1 or in (0, 0.5], got %s' % self.min_samples_leaf)\n        min_samples_leaf = int(ceil(self.min_samples_leaf * n_samples))\n    if isinstance(self.min_samples_split, (numbers.Integral, np.integer)):\n        if not 2 <= self.min_samples_split:\n            raise ValueError('min_samples_split must be an integer greater than 1 or a float in (0.0, 1.0]; got the integer %s' % self.min_samples_split)\n        min_samples_split = self.min_samples_split\n    else:\n        if not 0.0 < self.min_samples_split <= 1.0:\n            raise ValueError('min_samples_split must be an integer greater than 1 or a float in (0.0, 1.0]; got the float %s' % self.min_samples_split)\n        min_samples_split = int(ceil(self.min_samples_split * n_samples))\n        min_samples_split = max(2, min_samples_split)\n    min_samples_split = max(min_samples_split, 2 * min_samples_leaf)\n    if isinstance(self.max_features, str):\n        if self.max_features == 'auto':\n            if is_classification:\n                max_features = max(1, int(np.sqrt(self.n_features_)))\n            else:\n                max_features = self.n_features_\n        elif self.max_features == 'sqrt':\n            max_features = max(1, int(np.sqrt(self.n_features_)))\n        elif self.max_features == 'log2':\n            max_features = max(1, int(np.log2(self.n_features_)))\n        else:\n            raise ValueError('Invalid value for max_features. Allowed string values are \"auto\", \"sqrt\" or \"log2\".')\n    elif self.max_features is None:\n        max_features = self.n_features_\n    elif isinstance(self.max_features, (numbers.Integral, np.integer)):\n        max_features = self.max_features\n    elif self.max_features > 0.0:\n        max_features = max(1, int(self.max_features * self.n_features_))\n    else:\n        max_features = 0\n    self.max_features_ = max_features\n    if len(y) != n_samples:\n        raise ValueError('Number of labels=%d does not match number of samples=%d' % (len(y), n_samples))\n    if not 0 <= self.min_weight_fraction_leaf <= 0.5:\n        raise ValueError('min_weight_fraction_leaf must in [0, 0.5]')\n    if max_depth <= 0:\n        raise ValueError('max_depth must be greater than zero. ')\n    if not 0 < max_features <= self.n_features_:\n        raise ValueError('max_features must be in (0, n_features]')\n    if not isinstance(max_leaf_nodes, (numbers.Integral, np.integer)):\n        raise ValueError('max_leaf_nodes must be integral number but was %r' % max_leaf_nodes)\n    if -1 < max_leaf_nodes < 2:\n        raise ValueError('max_leaf_nodes {0} must be either None or larger than 1'.format(max_leaf_nodes))\n    if sample_weight is not None:\n        if getattr(sample_weight, 'dtype', None) != DOUBLE or not sample_weight.flags.contiguous:\n            sample_weight = np.ascontiguousarray(sample_weight, dtype=DOUBLE)\n        if len(sample_weight.shape) > 1:\n            raise ValueError('Sample weights array has more than one dimension: %d' % len(sample_weight.shape))\n        if len(sample_weight) != n_samples:\n            raise ValueError('Number of weights=%d does not match number of samples=%d' % (len(sample_weight), n_samples))\n    if expanded_class_weight is not None:\n        if sample_weight is not None:\n            sample_weight = sample_weight * expanded_class_weight\n        else:\n            sample_weight = expanded_class_weight\n    if sample_weight is None:\n        min_weight_leaf = self.min_weight_fraction_leaf * n_samples\n    else:\n        min_weight_leaf = self.min_weight_fraction_leaf * np.sum(sample_weight)\n    if self.min_impurity_split is not None:\n        warnings.warn('The min_impurity_split parameter is deprecated. Its default value will change from 1e-7 to 0 in version 0.23, and it will be removed in 0.25. Use the min_impurity_decrease parameter instead.', DeprecationWarning)\n        min_impurity_split = self.min_impurity_split\n    else:\n        min_impurity_split = 1e-07\n    if min_impurity_split < 0.0:\n        raise ValueError('min_impurity_split must be greater than or equal to 0')\n    if self.min_impurity_decrease < 0.0:\n        raise ValueError('min_impurity_decrease must be greater than or equal to 0')\n    allowed_presort = ('auto', True, False)\n    if self.presort not in allowed_presort:\n        raise ValueError(\"'presort' should be in {}. Got {!r} instead.\".format(allowed_presort, self.presort))\n    if self.presort is True and issparse(X):\n        raise ValueError('Presorting is not supported for sparse matrices.')\n    presort = self.presort\n    if self.presort == 'auto':\n        presort = not issparse(X)\n    if X_idx_sorted is None and presort:\n        X_idx_sorted = np.asfortranarray(np.argsort(X, axis=0), dtype=np.int32)\n    if presort and X_idx_sorted.shape != X.shape:\n        raise ValueError(\"The shape of X (X.shape = {}) doesn't match the shape of X_idx_sorted (X_idx_sorted.shape = {})\".format(X.shape, X_idx_sorted.shape))\n    criterion = self.criterion\n    if not isinstance(criterion, Criterion):\n        if is_classification:\n            criterion = CRITERIA_CLF[self.criterion](self.n_outputs_, self.n_classes_)\n        else:\n            criterion = CRITERIA_REG[self.criterion](self.n_outputs_, n_samples)\n    SPLITTERS = SPARSE_SPLITTERS if issparse(X) else DENSE_SPLITTERS\n    splitter = self.splitter\n    if not isinstance(self.splitter, Splitter):\n        splitter = SPLITTERS[self.splitter](criterion, self.max_features_, min_samples_leaf, min_weight_leaf, random_state, self.presort)\n    self.tree_ = Tree(self.n_features_, self.n_classes_, self.n_outputs_)\n    if max_leaf_nodes < 0:\n        builder = DepthFirstTreeBuilder(splitter, min_samples_split, min_samples_leaf, min_weight_leaf, max_depth, self.min_impurity_decrease, min_impurity_split)\n    else:\n        builder = BestFirstTreeBuilder(splitter, min_samples_split, min_samples_leaf, min_weight_leaf, max_depth, max_leaf_nodes, self.min_impurity_decrease, min_impurity_split)\n    builder.build(self.tree_, X, y, sample_weight, X_idx_sorted)\n    if self.n_outputs_ == 1:\n        self.n_classes_ = self.n_classes_[0]\n        self.classes_ = self.classes_[0]\n    return self",
    ".sklearn.base.py@@is_classifier": "def is_classifier(estimator):\n    return getattr(estimator, '_estimator_type', None) == 'classifier'",
    ".sklearn.naive_bayes.py@@GaussianNB.fit": "def fit(self, X, y, sample_weight=None):\n    X, y = check_X_y(X, y)\n    return self._partial_fit(X, y, np.unique(y), _refit=True, sample_weight=sample_weight)",
    ".sklearn.naive_bayes.py@@GaussianNB._partial_fit": "def _partial_fit(self, X, y, classes=None, _refit=False, sample_weight=None):\n    X, y = check_X_y(X, y)\n    if sample_weight is not None:\n        sample_weight = check_array(sample_weight, ensure_2d=False)\n        check_consistent_length(y, sample_weight)\n    self.epsilon_ = self.var_smoothing * np.var(X, axis=0).max()\n    if _refit:\n        self.classes_ = None\n    if _check_partial_fit_first_call(self, classes):\n        n_features = X.shape[1]\n        n_classes = len(self.classes_)\n        self.theta_ = np.zeros((n_classes, n_features))\n        self.sigma_ = np.zeros((n_classes, n_features))\n        self.class_count_ = np.zeros(n_classes, dtype=np.float64)\n        if self.priors is not None:\n            priors = np.asarray(self.priors)\n            if len(priors) != n_classes:\n                raise ValueError('Number of priors must match number of classes.')\n            if not np.isclose(priors.sum(), 1.0):\n                raise ValueError('The sum of the priors should be 1.')\n            if (priors < 0).any():\n                raise ValueError('Priors must be non-negative.')\n            self.class_prior_ = priors\n        else:\n            self.class_prior_ = np.zeros(len(self.classes_), dtype=np.float64)\n    else:\n        if X.shape[1] != self.theta_.shape[1]:\n            msg = 'Number of features %d does not match previous data %d.'\n            raise ValueError(msg % (X.shape[1], self.theta_.shape[1]))\n        self.sigma_[:, :] -= self.epsilon_\n    classes = self.classes_\n    unique_y = np.unique(y)\n    unique_y_in_classes = np.in1d(unique_y, classes)\n    if not np.all(unique_y_in_classes):\n        raise ValueError('The target label(s) %s in y do not exist in the initial classes %s' % (unique_y[~unique_y_in_classes], classes))\n    for y_i in unique_y:\n        i = classes.searchsorted(y_i)\n        X_i = X[y == y_i, :]\n        if sample_weight is not None:\n            sw_i = sample_weight[y == y_i]\n            N_i = sw_i.sum()\n        else:\n            sw_i = None\n            N_i = X_i.shape[0]\n        new_theta, new_sigma = self._update_mean_variance(self.class_count_[i], self.theta_[i, :], self.sigma_[i, :], X_i, sw_i)\n        self.theta_[i, :] = new_theta\n        self.sigma_[i, :] = new_sigma\n        self.class_count_[i] += N_i\n    self.sigma_[:, :] += self.epsilon_\n    if self.priors is None:\n        self.class_prior_ = self.class_count_ / self.class_count_.sum()\n    return self",
    ".sklearn.utils.multiclass.py@@_check_partial_fit_first_call": "def _check_partial_fit_first_call(clf, classes=None):\n    if getattr(clf, 'classes_', None) is None and classes is None:\n        raise ValueError('classes must be passed on the first call to partial_fit.')\n    elif classes is not None:\n        if getattr(clf, 'classes_', None) is not None:\n            if not np.array_equal(clf.classes_, unique_labels(classes)):\n                raise ValueError('`classes=%r` is not the same as on last call to partial_fit, was: %r' % (classes, clf.classes_))\n        else:\n            clf.classes_ = unique_labels(classes)\n            return True\n    return False",
    ".sklearn.utils.multiclass.py@@unique_labels": "def unique_labels(*ys):\n    if not ys:\n        raise ValueError('No argument has been passed.')\n    ys_types = set((type_of_target(x) for x in ys))\n    if ys_types == {'binary', 'multiclass'}:\n        ys_types = {'multiclass'}\n    if len(ys_types) > 1:\n        raise ValueError('Mix type of y not allowed, got types %s' % ys_types)\n    label_type = ys_types.pop()\n    if label_type == 'multilabel-indicator' and len(set((check_array(y, ['csr', 'csc', 'coo']).shape[1] for y in ys))) > 1:\n        raise ValueError('Multi-label binary indicator input with different numbers of labels')\n    _unique_labels = _FN_UNIQUE_LABELS.get(label_type, None)\n    if not _unique_labels:\n        raise ValueError('Unknown label type: %s' % repr(ys))\n    ys_labels = set(chain.from_iterable((_unique_labels(y) for y in ys)))\n    if len(set((isinstance(label, str) for label in ys_labels))) > 1:\n        raise ValueError('Mix of label input types (string and number)')\n    return np.array(sorted(ys_labels))",
    ".sklearn.utils.multiclass.py@@_unique_multiclass": "def _unique_multiclass(y):\n    if hasattr(y, '__array__'):\n        return np.unique(np.asarray(y))\n    else:\n        return set(y)",
    ".sklearn.naive_bayes.py@@GaussianNB._update_mean_variance": "def _update_mean_variance(n_past, mu, var, X, sample_weight=None):\n    if X.shape[0] == 0:\n        return (mu, var)\n    if sample_weight is not None:\n        n_new = float(sample_weight.sum())\n        new_mu = np.average(X, axis=0, weights=sample_weight)\n        new_var = np.average((X - new_mu) ** 2, axis=0, weights=sample_weight)\n    else:\n        n_new = X.shape[0]\n        new_var = np.var(X, axis=0)\n        new_mu = np.mean(X, axis=0)\n    if n_past == 0:\n        return (new_mu, new_var)\n    n_total = float(n_past + n_new)\n    total_mu = (n_new * new_mu + n_past * mu) / n_total\n    old_ssd = n_past * var\n    new_ssd = n_new * new_var\n    total_ssd = old_ssd + new_ssd + n_new * n_past / n_total * (mu - new_mu) ** 2\n    total_var = total_ssd / n_total\n    return (total_mu, total_var)",
    ".sklearn.dummy.py@@DummyRegressor.fit": "def fit(self, X, y, sample_weight=None):\n    allowed_strategies = ('mean', 'median', 'quantile', 'constant')\n    if self.strategy not in allowed_strategies:\n        raise ValueError('Unknown strategy type: %s, expected one of %s.' % (self.strategy, allowed_strategies))\n    y = check_array(y, ensure_2d=False)\n    if len(y) == 0:\n        raise ValueError('y must not be empty.')\n    self.output_2d_ = y.ndim == 2 and y.shape[1] > 1\n    if y.ndim == 1:\n        y = np.reshape(y, (-1, 1))\n    self.n_outputs_ = y.shape[1]\n    check_consistent_length(X, y, sample_weight)\n    if self.strategy == 'mean':\n        self.constant_ = np.average(y, axis=0, weights=sample_weight)\n    elif self.strategy == 'median':\n        if sample_weight is None:\n            self.constant_ = np.median(y, axis=0)\n        else:\n            self.constant_ = [_weighted_percentile(y[:, k], sample_weight, percentile=50.0) for k in range(self.n_outputs_)]\n    elif self.strategy == 'quantile':\n        if self.quantile is None or not np.isscalar(self.quantile):\n            raise ValueError('Quantile must be a scalar in the range [0.0, 1.0], but got %s.' % self.quantile)\n        percentile = self.quantile * 100.0\n        if sample_weight is None:\n            self.constant_ = np.percentile(y, axis=0, q=percentile)\n        else:\n            self.constant_ = [_weighted_percentile(y[:, k], sample_weight, percentile=percentile) for k in range(self.n_outputs_)]\n    elif self.strategy == 'constant':\n        if self.constant is None:\n            raise TypeError('Constant target value has to be specified when the constant strategy is used.')\n        self.constant = check_array(self.constant, accept_sparse=['csr', 'csc', 'coo'], ensure_2d=False, ensure_min_samples=0)\n        if self.output_2d_ and self.constant.shape[0] != y.shape[1]:\n            raise ValueError('Constant target value should have shape (%d, 1).' % y.shape[1])\n        self.constant_ = self.constant\n    self.constant_ = np.reshape(self.constant_, (1, -1))\n    return self",
    ".sklearn.svm.base.py@@BaseLibSVM.fit": "def fit(self, X, y, sample_weight=None):\n    rnd = check_random_state(self.random_state)\n    sparse = sp.isspmatrix(X)\n    if sparse and self.kernel == 'precomputed':\n        raise TypeError('Sparse precomputed kernels are not supported.')\n    self._sparse = sparse and (not callable(self.kernel))\n    X, y = check_X_y(X, y, dtype=np.float64, order='C', accept_sparse='csr', accept_large_sparse=False)\n    y = self._validate_targets(y)\n    sample_weight = np.asarray([] if sample_weight is None else sample_weight, dtype=np.float64)\n    solver_type = LIBSVM_IMPL.index(self._impl)\n    if solver_type != 2 and X.shape[0] != y.shape[0]:\n        raise ValueError('X and y have incompatible shapes.\\n' + 'X has %s samples, but y has %s.' % (X.shape[0], y.shape[0]))\n    if self.kernel == 'precomputed' and X.shape[0] != X.shape[1]:\n        raise ValueError('X.shape[0] should be equal to X.shape[1]')\n    if sample_weight.shape[0] > 0 and sample_weight.shape[0] != X.shape[0]:\n        raise ValueError('sample_weight and X have incompatible shapes: %r vs %r\\nNote: Sparse matrices cannot be indexed w/boolean masks (use `indices=True` in CV).' % (sample_weight.shape, X.shape))\n    if self.gamma in ('scale', 'auto_deprecated'):\n        if sparse:\n            X_var = X.multiply(X).mean() - X.mean() ** 2\n        else:\n            X_var = X.var()\n        if self.gamma == 'scale':\n            if X_var != 0:\n                self._gamma = 1.0 / (X.shape[1] * X_var)\n            else:\n                self._gamma = 1.0\n        else:\n            kernel_uses_gamma = not callable(self.kernel) and self.kernel not in ('linear', 'precomputed')\n            if kernel_uses_gamma and (not np.isclose(X_var, 1.0)):\n                warnings.warn(\"The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\", FutureWarning)\n            self._gamma = 1.0 / X.shape[1]\n    elif self.gamma == 'auto':\n        self._gamma = 1.0 / X.shape[1]\n    else:\n        self._gamma = self.gamma\n    kernel = self.kernel\n    if callable(kernel):\n        kernel = 'precomputed'\n    fit = self._sparse_fit if self._sparse else self._dense_fit\n    if self.verbose:\n        print('[LibSVM]', end='')\n    seed = rnd.randint(np.iinfo('i').max)\n    fit(X, y, sample_weight, solver_type, kernel, random_seed=seed)\n    self.shape_fit_ = X.shape\n    self._intercept_ = self.intercept_.copy()\n    self._dual_coef_ = self.dual_coef_\n    if self._impl in ['c_svc', 'nu_svc'] and len(self.classes_) == 2:\n        self.intercept_ *= -1\n        self.dual_coef_ = -self.dual_coef_\n    return self",
    ".sklearn.svm.base.py@@BaseSVC._validate_targets": "def _validate_targets(self, y):\n    y_ = column_or_1d(y, warn=True)\n    check_classification_targets(y)\n    cls, y = np.unique(y_, return_inverse=True)\n    self.class_weight_ = compute_class_weight(self.class_weight, cls, y_)\n    if len(cls) < 2:\n        raise ValueError('The number of classes has to be greater than one; got %d class' % len(cls))\n    self.classes_ = cls\n    return np.asarray(y, dtype=np.float64, order='C')",
    ".sklearn.svm.base.py@@BaseLibSVM._dense_fit": "def _dense_fit(self, X, y, sample_weight, solver_type, kernel, random_seed):\n    if callable(self.kernel):\n        self.__Xfit = X\n        X = self._compute_kernel(X)\n        if X.shape[0] != X.shape[1]:\n            raise ValueError('X.shape[0] should be equal to X.shape[1]')\n    libsvm.set_verbosity_wrap(self.verbose)\n    self.support_, self.support_vectors_, self.n_support_, self.dual_coef_, self.intercept_, self.probA_, self.probB_, self.fit_status_ = libsvm.fit(X, y, svm_type=solver_type, sample_weight=sample_weight, class_weight=self.class_weight_, kernel=kernel, C=self.C, nu=self.nu, probability=self.probability, degree=self.degree, shrinking=self.shrinking, tol=self.tol, cache_size=self.cache_size, coef0=self.coef0, gamma=self._gamma, epsilon=self.epsilon, max_iter=self.max_iter, random_seed=random_seed)\n    self._warn_from_fit_status()",
    ".sklearn.svm.base.py@@BaseLibSVM._warn_from_fit_status": "def _warn_from_fit_status(self):\n    assert self.fit_status_ in (0, 1)\n    if self.fit_status_ == 1:\n        warnings.warn('Solver terminated early (max_iter=%i).  Consider pre-processing your data with StandardScaler or MinMaxScaler.' % self.max_iter, ConvergenceWarning)",
    ".sklearn.linear_model.base.py@@LinearRegression.fit": "def fit(self, X, y, sample_weight=None):\n    n_jobs_ = self.n_jobs\n    X, y = check_X_y(X, y, accept_sparse=['csr', 'csc', 'coo'], y_numeric=True, multi_output=True)\n    if sample_weight is not None and np.atleast_1d(sample_weight).ndim > 1:\n        raise ValueError('Sample weights must be 1D array or scalar')\n    X, y, X_offset, y_offset, X_scale = self._preprocess_data(X, y, fit_intercept=self.fit_intercept, normalize=self.normalize, copy=self.copy_X, sample_weight=sample_weight, return_mean=True)\n    if sample_weight is not None:\n        X, y = _rescale_data(X, y, sample_weight)\n    if sp.issparse(X):\n        X_offset_scale = X_offset / X_scale\n\n        def matvec(b):\n            return X.dot(b) - b.dot(X_offset_scale)\n\n        def rmatvec(b):\n            return X.T.dot(b) - X_offset_scale * np.sum(b)\n        X_centered = sparse.linalg.LinearOperator(shape=X.shape, matvec=matvec, rmatvec=rmatvec)\n        if y.ndim < 2:\n            out = sparse_lsqr(X_centered, y)\n            self.coef_ = out[0]\n            self._residues = out[3]\n        else:\n            outs = Parallel(n_jobs=n_jobs_)((delayed(sparse_lsqr)(X_centered, y[:, j].ravel()) for j in range(y.shape[1])))\n            self.coef_ = np.vstack([out[0] for out in outs])\n            self._residues = np.vstack([out[3] for out in outs])\n    else:\n        self.coef_, self._residues, self.rank_, self.singular_ = linalg.lstsq(X, y)\n        self.coef_ = self.coef_.T\n    if y.ndim == 1:\n        self.coef_ = np.ravel(self.coef_)\n    self._set_intercept(X_offset, y_offset, X_scale)\n    return self",
    ".sklearn.linear_model.base.py@@_preprocess_data": "def _preprocess_data(X, y, fit_intercept, normalize=False, copy=True, sample_weight=None, return_mean=False, check_input=True):\n    if isinstance(sample_weight, numbers.Number):\n        sample_weight = None\n    if check_input:\n        X = check_array(X, copy=copy, accept_sparse=['csr', 'csc'], dtype=FLOAT_DTYPES)\n    elif copy:\n        if sp.issparse(X):\n            X = X.copy()\n        else:\n            X = X.copy(order='K')\n    y = np.asarray(y, dtype=X.dtype)\n    if fit_intercept:\n        if sp.issparse(X):\n            X_offset, X_var = mean_variance_axis(X, axis=0)\n            if not return_mean:\n                X_offset[:] = X.dtype.type(0)\n            if normalize:\n                X_var *= X.shape[0]\n                X_scale = np.sqrt(X_var, X_var)\n                del X_var\n                X_scale[X_scale == 0] = 1\n                inplace_column_scale(X, 1.0 / X_scale)\n            else:\n                X_scale = np.ones(X.shape[1], dtype=X.dtype)\n        else:\n            X_offset = np.average(X, axis=0, weights=sample_weight)\n            X -= X_offset\n            if normalize:\n                X, X_scale = f_normalize(X, axis=0, copy=False, return_norm=True)\n            else:\n                X_scale = np.ones(X.shape[1], dtype=X.dtype)\n        y_offset = np.average(y, axis=0, weights=sample_weight)\n        y = y - y_offset\n    else:\n        X_offset = np.zeros(X.shape[1], dtype=X.dtype)\n        X_scale = np.ones(X.shape[1], dtype=X.dtype)\n        if y.ndim == 1:\n            y_offset = X.dtype.type(0)\n        else:\n            y_offset = np.zeros(y.shape[1], dtype=X.dtype)\n    return (X, y, X_offset, y_offset, X_scale)",
    ".sklearn.linear_model.base.py@@_rescale_data": "def _rescale_data(X, y, sample_weight):\n    n_samples = X.shape[0]\n    sample_weight = np.full(n_samples, sample_weight, dtype=np.array(sample_weight).dtype)\n    sample_weight = np.sqrt(sample_weight)\n    sw_matrix = sparse.dia_matrix((sample_weight, 0), shape=(n_samples, n_samples))\n    X = safe_sparse_dot(sw_matrix, X)\n    y = safe_sparse_dot(sw_matrix, y)\n    return (X, y)",
    ".sklearn.utils.extmath.py@@safe_sparse_dot": "def safe_sparse_dot(a, b, dense_output=False):\n    if sparse.issparse(a) or sparse.issparse(b):\n        ret = a * b\n        if dense_output and hasattr(ret, 'toarray'):\n            ret = ret.toarray()\n        return ret\n    else:\n        return np.dot(a, b)",
    ".sklearn.linear_model.base.py@@LinearModel._set_intercept": "def _set_intercept(self, X_offset, y_offset, X_scale):\n    if self.fit_intercept:\n        self.coef_ = self.coef_ / X_scale\n        self.intercept_ = y_offset - np.dot(X_offset, self.coef_.T)\n    else:\n        self.intercept_ = 0.0",
    ".sklearn.ensemble.forest.py@@BaseForest._validate_y_class_weight": "def _validate_y_class_weight(self, y):\n    return (y, None)",
    ".sklearn.tree.tree.py@@DecisionTreeRegressor.__init__": "def __init__(self, criterion='mse', splitter='best', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None, random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, presort=False):\n    super().__init__(criterion=criterion, splitter=splitter, max_depth=max_depth, min_samples_split=min_samples_split, min_samples_leaf=min_samples_leaf, min_weight_fraction_leaf=min_weight_fraction_leaf, max_features=max_features, max_leaf_nodes=max_leaf_nodes, random_state=random_state, min_impurity_decrease=min_impurity_decrease, min_impurity_split=min_impurity_split, presort=presort)",
    ".sklearn.tree.tree.py@@DecisionTreeRegressor.fit": "def fit(self, X, y, sample_weight=None, check_input=True, X_idx_sorted=None):\n    super().fit(X, y, sample_weight=sample_weight, check_input=check_input, X_idx_sorted=X_idx_sorted)\n    return self"
}