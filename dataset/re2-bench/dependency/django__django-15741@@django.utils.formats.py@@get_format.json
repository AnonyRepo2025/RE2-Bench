{
    ".django.utils.functional.py@@LazyObject.__getattribute__": "def __getattribute__(self, name):\n    if name == '_wrapped':\n        return super().__getattribute__(name)\n    value = super().__getattribute__(name)\n    if not getattr(value, '_mask_wrapped', True):\n        raise AttributeError\n    return value",
    ".django.conf.__init__.py@@LazySettings._USE_L10N_INTERNAL": "def _USE_L10N_INTERNAL(self):\n    return self.__getattr__('USE_L10N')",
    ".django.conf.__init__.py@@LazySettings.__getattr__": "def __getattr__(self, name):\n    if (_wrapped := self._wrapped) is empty:\n        self._setup(name)\n        _wrapped = self._wrapped\n    val = getattr(_wrapped, name)\n    if name in {'MEDIA_URL', 'STATIC_URL'} and val is not None:\n        val = self._add_script_prefix(val)\n    elif name == 'SECRET_KEY' and (not val):\n        raise ImproperlyConfigured('The SECRET_KEY setting must not be empty.')\n    self.__dict__[name] = val\n    return val",
    ".django.utils.translation.__init__.py@@get_language": "def get_language():\n    return _trans.get_language()",
    ".django.utils.translation.trans_real.py@@get_language": "def get_language():\n    t = getattr(_active, 'value', None)\n    if t is not None:\n        try:\n            return t.to_language()\n        except AttributeError:\n            pass\n    return settings.LANGUAGE_CODE",
    ".django.utils.translation.trans_real.py@@DjangoTranslation.to_language": "def to_language(self):\n    return self.__to_language",
    ".django.conf.__init__.py@@UserSettingsHolder.__getattr__": "def __getattr__(self, name):\n    if not name.isupper() or name in self._deleted:\n        raise AttributeError\n    return getattr(self.default_settings, name)",
    ".django.utils.translation.__init__.py@@gettext": "def gettext(message):\n    return _trans.gettext(message)",
    ".django.utils.translation.trans_real.py@@gettext": "def gettext(message):\n    global _default\n    eol_message = message.replace('\\r\\n', '\\n').replace('\\r', '\\n')\n    if eol_message:\n        _default = _default or translation(settings.LANGUAGE_CODE)\n        translation_object = getattr(_active, 'value', _default)\n        result = translation_object.gettext(eol_message)\n    else:\n        result = type(message)('')\n    if isinstance(message, SafeData):\n        return mark_safe(result)\n    return result",
    ".django.utils.translation.trans_real.py@@TranslationCatalog.get": "def get(self, key, default=None):\n    missing = object()\n    for cat in self._catalogs:\n        result = cat.get(key, missing)\n        if result is not missing:\n            return result\n    return default",
    ".django.utils.safestring.py@@SafeString.__str__": "def __str__(self):\n    return self",
    ".django.utils.safestring.py@@mark_safe": "def mark_safe(s):\n    if hasattr(s, '__html__'):\n        return s\n    if callable(s):\n        return _safety_decorator(mark_safe, s)\n    return SafeString(s)",
    ".django.utils.functional.py@@wrapper": "def wrapper(*args, **kwargs):\n    if any((isinstance(arg, Promise) for arg in itertools.chain(args, kwargs.values()))):\n        return lazy_func(*args, **kwargs)\n    return func(*args, **kwargs)"
}