{
    ".sklearn.decomposition.fastica_.py@@_sym_decorrelation": "def _sym_decorrelation(W):\n    s, u = linalg.eigh(np.dot(W, W.T))\n    return np.dot(np.dot(u * (1.0 / np.sqrt(s)), u.T), W)",
    ".sklearn.decomposition.fastica_.py@@_logcosh": "def _logcosh(x, fun_args=None):\n    alpha = fun_args.get('alpha', 1.0)\n    x *= alpha\n    gx = np.tanh(x, x)\n    g_x = np.empty(x.shape[0])\n    for i, gx_i in enumerate(gx):\n        g_x[i] = (alpha * (1 - gx_i ** 2)).mean()\n    return (gx, g_x)",
    ".sklearn.decomposition.fastica_.py@@_exp": "def _exp(x, fun_args):\n    exp = np.exp(-x ** 2 / 2)\n    gx = x * exp\n    g_x = (1 - x ** 2) * exp\n    return (gx, g_x.mean(axis=-1))",
    ".sklearn.decomposition.fastica_.py@@_cube": "def _cube(x, fun_args):\n    return (x ** 3, (3 * x ** 2).mean(axis=-1))",
    ".sklearn.decomposition.fastica_.py@@g": "def g(x, fun_args):\n    return fun(x, **fun_args)"
}