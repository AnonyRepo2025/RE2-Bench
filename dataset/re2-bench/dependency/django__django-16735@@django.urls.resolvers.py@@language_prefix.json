{
    ".django.utils.translation.__init__.py@@get_language": "def get_language():\n    return _trans.get_language()",
    ".django.utils.translation.trans_real.py@@get_language": "def get_language():\n    t = getattr(_active, 'value', None)\n    if t is not None:\n        try:\n            return t.to_language()\n        except AttributeError:\n            pass\n    return settings.LANGUAGE_CODE",
    ".django.utils.translation.trans_real.py@@DjangoTranslation.to_language": "def to_language(self):\n    return self.__to_language",
    ".django.utils.functional.py@@LazyObject.__getattribute__": "def __getattribute__(self, name):\n    if name == '_wrapped':\n        return super().__getattribute__(name)\n    value = super().__getattribute__(name)\n    if not getattr(value, '_mask_wrapped', True):\n        raise AttributeError\n    return value",
    ".django.utils.translation.__init__.py@@get_supported_language_variant": "def get_supported_language_variant(lang_code, *, strict=False):\n    return _trans.get_supported_language_variant(lang_code, strict)",
    ".django.utils.translation.trans_real.py@@get_supported_language_variant": "def get_supported_language_variant(lang_code, strict=False):\n    if lang_code:\n        possible_lang_codes = [lang_code]\n        try:\n            possible_lang_codes.extend(LANG_INFO[lang_code]['fallback'])\n        except KeyError:\n            pass\n        i = None\n        while (i := lang_code.rfind('-', 0, i)) > -1:\n            possible_lang_codes.append(lang_code[:i])\n        generic_lang_code = possible_lang_codes[-1]\n        supported_lang_codes = get_languages()\n        for code in possible_lang_codes:\n            if code.lower() in supported_lang_codes and check_for_language(code):\n                return code\n        if not strict:\n            for supported_code in supported_lang_codes:\n                if supported_code.startswith(generic_lang_code + '-'):\n                    return supported_code\n    raise LookupError(lang_code)",
    ".django.utils.translation.trans_real.py@@check_for_language": "def check_for_language(lang_code):\n    if lang_code is None or not language_code_re.search(lang_code):\n        return False\n    return any((gettext_module.find('django', path, [to_locale(lang_code)]) is not None for path in all_locale_paths()))",
    ".django.utils.functional.py@@inner": "def inner(self, *args):\n    if (_wrapped := self._wrapped) is empty:\n        self._setup()\n        _wrapped = self._wrapped\n    return func(_wrapped, *args)",
    ".django.utils.translation.trans_real.py@@all_locale_paths": "def all_locale_paths():\n    globalpath = os.path.join(os.path.dirname(sys.modules[settings.__module__].__file__), 'locale')\n    app_paths = []\n    for app_config in apps.get_app_configs():\n        locale_path = os.path.join(app_config.path, 'locale')\n        if os.path.exists(locale_path):\n            app_paths.append(locale_path)\n    return [globalpath, *settings.LOCALE_PATHS, *app_paths]",
    ".django.apps.registry.py@@Apps.get_app_configs": "def get_app_configs(self):\n    self.check_apps_ready()\n    return self.app_configs.values()",
    ".django.apps.registry.py@@Apps.check_apps_ready": "def check_apps_ready(self):\n    if not self.apps_ready:\n        from django.conf import settings\n        settings.INSTALLED_APPS\n        raise AppRegistryNotReady(\"Apps aren't loaded yet.\")",
    ".django.utils.translation.__init__.py@@to_locale": "def to_locale(language):\n    lang, _, country = language.lower().partition('-')\n    if not country:\n        return language[:3].lower() + language[3:]\n    country, _, tail = country.partition('-')\n    country = country.title() if len(country) > 2 else country.upper()\n    if tail:\n        country += '-' + tail\n    return lang + '_' + country"
}