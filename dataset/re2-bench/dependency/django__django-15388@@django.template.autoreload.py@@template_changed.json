{
    ".django.template.autoreload.py@@get_template_directories": "def get_template_directories():\n    cwd = Path.cwd()\n    items = set()\n    for backend in engines.all():\n        if not isinstance(backend, DjangoTemplates):\n            continue\n        items.update((cwd / to_path(dir) for dir in backend.engine.dirs))\n        for loader in backend.engine.template_loaders:\n            if not hasattr(loader, 'get_dirs'):\n                continue\n            items.update((cwd / to_path(directory) for directory in loader.get_dirs() if not is_django_path(directory)))\n    return items",
    ".django.template.utils.py@@EngineHandler.all": "def all(self):\n    return [self[alias] for alias in self]",
    ".django.template.utils.py@@EngineHandler.__iter__": "def __iter__(self):\n    return iter(self.templates)",
    ".django.template.utils.py@@EngineHandler.__getitem__": "def __getitem__(self, alias):\n    try:\n        return self._engines[alias]\n    except KeyError:\n        try:\n            params = self.templates[alias]\n        except KeyError:\n            raise InvalidTemplateEngineError(\"Could not find config for '{}' in settings.TEMPLATES\".format(alias))\n        params = params.copy()\n        backend = params.pop('BACKEND')\n        engine_cls = import_string(backend)\n        engine = engine_cls(params)\n        self._engines[alias] = engine\n        return engine",
    ".django.utils._os.py@@to_path": "def to_path(value):\n    if isinstance(value, Path):\n        return value\n    elif not isinstance(value, str):\n        raise TypeError('Invalid path type: %s' % type(value).__name__)\n    return Path(value)",
    ".django.template.loaders.filesystem.py@@Loader.get_dirs": "def get_dirs(self):\n    return self.dirs if self.dirs is not None else self.engine.dirs",
    ".django.utils.autoreload.py@@is_django_path": "def is_django_path(path):\n    return Path(django.__file__).parent in Path(path).parents",
    ".django.template.loaders.app_directories.py@@Loader.get_dirs": "def get_dirs(self):\n    return get_app_template_dirs('templates')"
}