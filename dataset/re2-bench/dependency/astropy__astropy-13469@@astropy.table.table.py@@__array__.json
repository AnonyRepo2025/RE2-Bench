{
    ".astropy.table.table.py@@Table.masked": "def masked(self):\n    return self._masked",
    ".astropy.table.table.py@@TableColumns.__getitem__": "def __getitem__(self, item):\n    if isinstance(item, str):\n        return OrderedDict.__getitem__(self, item)\n    elif isinstance(item, (int, np.integer)):\n        return list(self.values())[item]\n    elif isinstance(item, np.ndarray) and item.shape == () and (item.dtype.kind == 'i'):\n        return list(self.values())[item.item()]\n    elif isinstance(item, tuple):\n        return self.__class__([self[x] for x in item])\n    elif isinstance(item, slice):\n        return self.__class__([self[x] for x in list(self)[item]])\n    else:\n        raise IndexError('Illegal key or index value for {} object'.format(self.__class__.__name__))",
    ".astropy.table.table.py@@descr": "def descr(col):\n    col_dtype = 'O' if col.info.dtype is None else col.info.dtype\n    col_shape = col.shape[1:] if hasattr(col, 'shape') else ()\n    return (col.info.name, col_dtype, col_shape)",
    ".astropy.utils.data_info.py@@DataInfo.__get__": "def __get__(self, instance, owner_cls):\n    if instance is None:\n        self._parent_cls = owner_cls\n        return self\n    info = instance.__dict__.get('info')\n    if info is None:\n        info = instance.__dict__['info'] = self.__class__(bound=True)\n    info._parent_ref = weakref.ref(instance)\n    return info",
    ".astropy.utils.data_info.py@@ParentAttribute.__get__": "def __get__(self, instance, owner_cls):\n    if instance is None:\n        return self\n    return getattr(instance._parent, self.attr)",
    ".astropy.utils.data_info.py@@DataInfo._parent": "def _parent(self):\n    try:\n        parent = self._parent_ref()\n    except AttributeError:\n        return None\n    if parent is None:\n        raise AttributeError('failed to access \"info\" attribute on a temporary object.\\n\\nIt looks like you have done something like ``col[3:5].info`` or\\n``col.quantity.info``, i.e.  you accessed ``info`` from a temporary slice\\nobject that only exists momentarily.  This has failed because the reference to\\nthat temporary object is now lost.  Instead force a permanent reference (e.g.\\n``c = col[3:5]`` followed by ``c.info``).')\n    return parent",
    ".astropy.table.column.py@@BaseColumn.name": "def name(self):\n    return self._name",
    ".astropy.table.table.py@@has_info_class": "def has_info_class(obj, cls):\n    return isinstance(getattr(obj.__class__, 'info', None), cls)"
}