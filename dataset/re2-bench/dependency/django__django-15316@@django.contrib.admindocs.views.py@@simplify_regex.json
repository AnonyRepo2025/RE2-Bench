{
    ".django.contrib.admindocs.utils.py@@remove_non_capturing_groups": "def remove_non_capturing_groups(pattern):\n    group_start_end_indices = _find_groups(pattern, non_capturing_group_matcher)\n    final_pattern, prev_end = ('', None)\n    for start, end, _ in group_start_end_indices:\n        final_pattern += pattern[prev_end:start]\n        prev_end = end\n    return final_pattern + pattern[prev_end:]",
    ".django.contrib.admindocs.utils.py@@_find_groups": "def _find_groups(pattern, group_matcher):\n    prev_end = None\n    for match in group_matcher.finditer(pattern):\n        if (indices := _get_group_start_end(match.start(0), match.end(0), pattern)):\n            start, end = indices\n            if prev_end and start > prev_end or not prev_end:\n                yield (start, end, match)\n            prev_end = end",
    ".django.utils.functional.py@@inner": "def inner(self, *args):\n    if self._wrapped is empty:\n        self._setup()\n    return func(self._wrapped, *args)",
    ".django.utils.functional.py@@SimpleLazyObject._setup": "def _setup(self):\n    self._wrapped = self._setupfunc()",
    ".django.utils.regex_helper.py@@_compile": "def _compile():\n    if isinstance(regex, (str, bytes)):\n        return re.compile(regex, flags)\n    else:\n        assert not flags, 'flags must be empty if regex is passed pre-compiled'\n        return regex",
    ".django.utils.functional.py@@LazyObject.__setattr__": "def __setattr__(self, name, value):\n    if name == '_wrapped':\n        self.__dict__['_wrapped'] = value\n    else:\n        if self._wrapped is empty:\n            self._setup()\n        setattr(self._wrapped, name, value)",
    ".django.contrib.admindocs.utils.py@@replace_named_groups": "def replace_named_groups(pattern):\n    group_pattern_and_name = [(pattern[start:end], match[1]) for start, end, match in _find_groups(pattern, named_group_matcher)]\n    for group_pattern, group_name in group_pattern_and_name:\n        pattern = pattern.replace(group_pattern, group_name)\n    return pattern",
    ".django.contrib.admindocs.utils.py@@replace_unnamed_groups": "def replace_unnamed_groups(pattern):\n    final_pattern, prev_end = ('', None)\n    for start, end, _ in _find_groups(pattern, unnamed_group_matcher):\n        if prev_end:\n            final_pattern += pattern[prev_end:start]\n        final_pattern += pattern[:start] + '<var>'\n        prev_end = end\n    return final_pattern + pattern[prev_end:]",
    ".django.contrib.admindocs.utils.py@@replace_metacharacters": "def replace_metacharacters(pattern):\n    return re.sub('((?:^|(?<!\\\\\\\\))(?:\\\\\\\\\\\\\\\\)*)(\\\\\\\\?)([?*+^$]|\\\\\\\\[bBAZ])', lambda m: m[1] + m[3] if m[2] else m[1], pattern)",
    ".django.contrib.admindocs.utils.py@@_get_group_start_end": "def _get_group_start_end(start, end, pattern):\n    unmatched_open_brackets, prev_char = (1, None)\n    for idx, val in enumerate(pattern[end:]):\n        if val == '(' and prev_char != '\\\\':\n            unmatched_open_brackets += 1\n        elif val == ')' and prev_char != '\\\\':\n            unmatched_open_brackets -= 1\n        prev_char = val\n        if unmatched_open_brackets == 0:\n            return (start, end + idx + 1)"
}