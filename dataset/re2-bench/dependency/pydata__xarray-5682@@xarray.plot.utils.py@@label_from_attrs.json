{
    ".xarray.core.dataarray.py@@DataArray.attrs": "def attrs(self) -> Dict[Hashable, Any]:\n    return self.variable.attrs",
    ".xarray.core.dataarray.py@@DataArray.variable": "def variable(self) -> Variable:\n    return self._variable",
    ".xarray.core.variable.py@@Variable.attrs": "def attrs(self) -> Dict[Hashable, Any]:\n    if self._attrs is None:\n        self._attrs = {}\n    return self._attrs",
    ".xarray.core.dataarray.py@@DataArray.name": "def name(self) -> Optional[Hashable]:\n    return self._name",
    ".xarray.core.pycompat.py@@DuckArrayModule.__init__": "def __init__(self, mod):\n    try:\n        duck_array_module = import_module(mod)\n        duck_array_version = LooseVersion(duck_array_module.__version__)\n        if mod == 'dask':\n            duck_array_type = (import_module('dask.array').Array,)\n        elif mod == 'pint':\n            duck_array_type = (duck_array_module.Quantity,)\n        elif mod == 'cupy':\n            duck_array_type = (duck_array_module.ndarray,)\n        elif mod == 'sparse':\n            duck_array_type = (duck_array_module.SparseArray,)\n        else:\n            raise NotImplementedError\n    except ImportError:\n        duck_array_module = None\n        duck_array_version = LooseVersion('0.0.0')\n        duck_array_type = ()\n    self.module = duck_array_module\n    self.version = duck_array_version\n    self.type = duck_array_type\n    self.available = duck_array_module is not None",
    ".xarray.core.dataarray.py@@DataArray.data": "def data(self) -> Any:\n    return self.variable.data",
    ".xarray.core.variable.py@@Variable.data": "def data(self):\n    if is_duck_array(self._data):\n        return self._data\n    else:\n        return self.values",
    ".xarray.core.utils.py@@is_duck_array": "def is_duck_array(value: Any) -> bool:\n    if isinstance(value, np.ndarray):\n        return True\n    return hasattr(value, 'ndim') and hasattr(value, 'shape') and hasattr(value, 'dtype') and hasattr(value, '__array_function__') and hasattr(value, '__array_ufunc__')",
    ".xarray.core.utils.py@@NdimSizeLenMixin.ndim": "def ndim(self: Any) -> int:\n    return len(self.shape)",
    ".xarray.core.indexing.py@@PandasIndexingAdapter.shape": "def shape(self) -> Tuple[int]:\n    return (len(self.array),)",
    ".xarray.core.indexing.py@@PandasIndexingAdapter.dtype": "def dtype(self) -> np.dtype:\n    return self._dtype",
    ".xarray.core.variable.py@@Variable.values": "def values(self):\n    return _as_array_or_item(self._data)",
    ".xarray.core.variable.py@@_as_array_or_item": "def _as_array_or_item(data):\n    data = np.asarray(data)\n    if data.ndim == 0:\n        if data.dtype.kind == 'M':\n            data = np.datetime64(data, 'ns')\n        elif data.dtype.kind == 'm':\n            data = np.timedelta64(data, 'ns')\n    return data",
    ".xarray.core.indexing.py@@PandasIndexingAdapter.__array__": "def __array__(self, dtype: DTypeLike=None) -> np.ndarray:\n    if dtype is None:\n        dtype = self.dtype\n    array = self.array\n    if isinstance(array, pd.PeriodIndex):\n        with suppress(AttributeError):\n            array = array.astype('object')\n    return np.asarray(array.values, dtype=dtype)"
}