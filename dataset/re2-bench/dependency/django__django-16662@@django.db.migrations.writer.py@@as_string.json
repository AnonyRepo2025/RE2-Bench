{
    ".django.db.migrations.writer.py@@OperationWriter.__init__": "def __init__(self, operation, indentation=2):\n    self.operation = operation\n    self.buff = []\n    self.indentation = indentation",
    ".django.db.migrations.writer.py@@OperationWriter.serialize": "def serialize(self):\n\n    def _write(_arg_name, _arg_value):\n        if _arg_name in self.operation.serialization_expand_args and isinstance(_arg_value, (list, tuple, dict)):\n            if isinstance(_arg_value, dict):\n                self.feed('%s={' % _arg_name)\n                self.indent()\n                for key, value in _arg_value.items():\n                    key_string, key_imports = MigrationWriter.serialize(key)\n                    arg_string, arg_imports = MigrationWriter.serialize(value)\n                    args = arg_string.splitlines()\n                    if len(args) > 1:\n                        self.feed('%s: %s' % (key_string, args[0]))\n                        for arg in args[1:-1]:\n                            self.feed(arg)\n                        self.feed('%s,' % args[-1])\n                    else:\n                        self.feed('%s: %s,' % (key_string, arg_string))\n                    imports.update(key_imports)\n                    imports.update(arg_imports)\n                self.unindent()\n                self.feed('},')\n            else:\n                self.feed('%s=[' % _arg_name)\n                self.indent()\n                for item in _arg_value:\n                    arg_string, arg_imports = MigrationWriter.serialize(item)\n                    args = arg_string.splitlines()\n                    if len(args) > 1:\n                        for arg in args[:-1]:\n                            self.feed(arg)\n                        self.feed('%s,' % args[-1])\n                    else:\n                        self.feed('%s,' % arg_string)\n                    imports.update(arg_imports)\n                self.unindent()\n                self.feed('],')\n        else:\n            arg_string, arg_imports = MigrationWriter.serialize(_arg_value)\n            args = arg_string.splitlines()\n            if len(args) > 1:\n                self.feed('%s=%s' % (_arg_name, args[0]))\n                for arg in args[1:-1]:\n                    self.feed(arg)\n                self.feed('%s,' % args[-1])\n            else:\n                self.feed('%s=%s,' % (_arg_name, arg_string))\n            imports.update(arg_imports)\n    imports = set()\n    name, args, kwargs = self.operation.deconstruct()\n    operation_args = get_func_args(self.operation.__init__)\n    if getattr(migrations, name, None) == self.operation.__class__:\n        self.feed('migrations.%s(' % name)\n    else:\n        imports.add('import %s' % self.operation.__class__.__module__)\n        self.feed('%s.%s(' % (self.operation.__class__.__module__, name))\n    self.indent()\n    for i, arg in enumerate(args):\n        arg_value = arg\n        arg_name = operation_args[i]\n        _write(arg_name, arg_value)\n    i = len(args)\n    for arg_name in operation_args[i:]:\n        if arg_name in kwargs:\n            arg_value = kwargs[arg_name]\n            _write(arg_name, arg_value)\n    self.unindent()\n    self.feed('),')\n    return (self.render(), imports)",
    ".django.utils.inspect.py@@get_func_args": "def get_func_args(func):\n    params = _get_callable_parameters(func)\n    return [param.name for param in params if param.kind == inspect.Parameter.POSITIONAL_OR_KEYWORD]",
    ".django.utils.inspect.py@@_get_callable_parameters": "def _get_callable_parameters(meth_or_func):\n    is_method = inspect.ismethod(meth_or_func)\n    func = meth_or_func.__func__ if is_method else meth_or_func\n    return _get_func_parameters(func, remove_first=is_method)",
    ".django.db.migrations.writer.py@@OperationWriter.feed": "def feed(self, line):\n    self.buff.append(' ' * (self.indentation * 4) + line)",
    ".django.db.migrations.writer.py@@OperationWriter.indent": "def indent(self):\n    self.indentation += 1",
    ".django.db.migrations.writer.py@@OperationWriter.unindent": "def unindent(self):\n    self.indentation -= 1",
    ".django.db.migrations.writer.py@@OperationWriter.render": "def render(self):\n    return '\\n'.join(self.buff)",
    ".django.db.migrations.operations.models.py@@CreateModel.deconstruct": "def deconstruct(self):\n    kwargs = {'name': self.name, 'fields': self.fields}\n    if self.options:\n        kwargs['options'] = self.options\n    if self.bases and self.bases != (models.Model,):\n        kwargs['bases'] = self.bases\n    if self.managers and self.managers != [('objects', models.Manager())]:\n        kwargs['managers'] = self.managers\n    return (self.__class__.__qualname__, [], kwargs)",
    ".django.utils.inspect.py@@_get_func_parameters": "def _get_func_parameters(func, remove_first):\n    parameters = tuple(inspect.signature(func).parameters.values())\n    if remove_first:\n        parameters = parameters[1:]\n    return parameters",
    ".django.db.migrations.writer.py@@OperationWriter._write": "def _write(_arg_name, _arg_value):\n    if _arg_name in self.operation.serialization_expand_args and isinstance(_arg_value, (list, tuple, dict)):\n        if isinstance(_arg_value, dict):\n            self.feed('%s={' % _arg_name)\n            self.indent()\n            for key, value in _arg_value.items():\n                key_string, key_imports = MigrationWriter.serialize(key)\n                arg_string, arg_imports = MigrationWriter.serialize(value)\n                args = arg_string.splitlines()\n                if len(args) > 1:\n                    self.feed('%s: %s' % (key_string, args[0]))\n                    for arg in args[1:-1]:\n                        self.feed(arg)\n                    self.feed('%s,' % args[-1])\n                else:\n                    self.feed('%s: %s,' % (key_string, arg_string))\n                imports.update(key_imports)\n                imports.update(arg_imports)\n            self.unindent()\n            self.feed('},')\n        else:\n            self.feed('%s=[' % _arg_name)\n            self.indent()\n            for item in _arg_value:\n                arg_string, arg_imports = MigrationWriter.serialize(item)\n                args = arg_string.splitlines()\n                if len(args) > 1:\n                    for arg in args[:-1]:\n                        self.feed(arg)\n                    self.feed('%s,' % args[-1])\n                else:\n                    self.feed('%s,' % arg_string)\n                imports.update(arg_imports)\n            self.unindent()\n            self.feed('],')\n    else:\n        arg_string, arg_imports = MigrationWriter.serialize(_arg_value)\n        args = arg_string.splitlines()\n        if len(args) > 1:\n            self.feed('%s=%s' % (_arg_name, args[0]))\n            for arg in args[1:-1]:\n                self.feed(arg)\n            self.feed('%s,' % args[-1])\n        else:\n            self.feed('%s=%s,' % (_arg_name, arg_string))\n        imports.update(arg_imports)",
    ".django.db.migrations.serializer.py@@serializer_factory": "def serializer_factory(value):\n    if isinstance(value, Promise):\n        value = str(value)\n    elif isinstance(value, LazyObject):\n        value = value.__reduce__()[1][0]\n    if isinstance(value, models.Field):\n        return ModelFieldSerializer(value)\n    if isinstance(value, models.manager.BaseManager):\n        return ModelManagerSerializer(value)\n    if isinstance(value, Operation):\n        return OperationSerializer(value)\n    if isinstance(value, type):\n        return TypeSerializer(value)\n    if hasattr(value, 'deconstruct'):\n        return DeconstructableSerializer(value)\n    for type_, serializer_cls in Serializer._registry.items():\n        if isinstance(value, type_):\n            return serializer_cls(value)\n    raise ValueError('Cannot serialize: %r\\nThere are some values Django cannot serialize into migration files.\\nFor more, see https://docs.djangoproject.com/en/%s/topics/migrations/#migration-serializing' % (value, get_docs_version()))",
    ".django.db.migrations.serializer.py@@BaseSerializer.__init__": "def __init__(self, value):\n    self.value = value",
    ".django.db.migrations.serializer.py@@BaseSimpleSerializer.serialize": "def serialize(self):\n    return (repr(self.value), set())",
    ".django.utils.version.py@@get_version": "def get_version(version=None):\n    version = get_complete_version(version)\n    main = get_main_version(version)\n    sub = ''\n    if version[3] == 'alpha' and version[4] == 0:\n        git_changeset = get_git_changeset()\n        if git_changeset:\n            sub = '.dev%s' % git_changeset\n    elif version[3] != 'final':\n        mapping = {'alpha': 'a', 'beta': 'b', 'rc': 'rc'}\n        sub = mapping[version[3]] + str(version[4])\n    return main + sub",
    ".django.utils.version.py@@get_complete_version": "def get_complete_version(version=None):\n    if version is None:\n        from django import VERSION as version\n    else:\n        assert len(version) == 5\n        assert version[3] in ('alpha', 'beta', 'rc', 'final')\n    return version",
    ".django.utils.version.py@@get_main_version": "def get_main_version(version=None):\n    version = get_complete_version(version)\n    parts = 2 if version[2] == 0 else 3\n    return '.'.join((str(x) for x in version[:parts]))",
    ".django.utils.timezone.py@@now": "def now():\n    return datetime.now(tz=timezone.utc if settings.USE_TZ else None)",
    ".django.utils.functional.py@@LazyObject.__getattribute__": "def __getattribute__(self, name):\n    if name == '_wrapped':\n        return super().__getattribute__(name)\n    value = super().__getattribute__(name)\n    if not getattr(value, '_mask_wrapped', True):\n        raise AttributeError\n    return value",
    ".django.db.migrations.operations.models.py@@AlterModelOptions.deconstruct": "def deconstruct(self):\n    kwargs = {'name': self.name, 'options': self.options}\n    return (self.__class__.__qualname__, [], kwargs)",
    ".django.db.migrations.serializer.py@@DictionarySerializer.serialize": "def serialize(self):\n    imports = set()\n    strings = []\n    for k, v in sorted(self.value.items()):\n        k_string, k_imports = serializer_factory(k).serialize()\n        v_string, v_imports = serializer_factory(v).serialize()\n        imports.update(k_imports)\n        imports.update(v_imports)\n        strings.append((k_string, v_string))\n    return ('{%s}' % ', '.join(('%s: %s' % (k, v) for k, v in strings)), imports)",
    ".django.conf.__init__.py@@LazySettings.__getattr__": "def __getattr__(self, name):\n    if (_wrapped := self._wrapped) is empty:\n        self._setup(name)\n        _wrapped = self._wrapped\n    val = getattr(_wrapped, name)\n    if name in {'MEDIA_URL', 'STATIC_URL'} and val is not None:\n        val = self._add_script_prefix(val)\n    elif name == 'SECRET_KEY' and (not val):\n        raise ImproperlyConfigured('The SECRET_KEY setting must not be empty.')\n    self.__dict__[name] = val\n    return val",
    ".django.db.migrations.serializer.py@@BaseSequenceSerializer.serialize": "def serialize(self):\n    imports = set()\n    strings = []\n    for item in self.value:\n        item_string, item_imports = serializer_factory(item).serialize()\n        imports.update(item_imports)\n        strings.append(item_string)\n    value = self._format()\n    return (value % ', '.join(strings), imports)",
    ".django.db.migrations.serializer.py@@ModelFieldSerializer.serialize": "def serialize(self):\n    attr_name, path, args, kwargs = self.value.deconstruct()\n    return self.serialize_deconstructed(path, args, kwargs)",
    ".django.db.models.fields.__init__.py@@DateField.deconstruct": "def deconstruct(self):\n    name, path, args, kwargs = super().deconstruct()\n    if self.auto_now:\n        kwargs['auto_now'] = True\n    if self.auto_now_add:\n        kwargs['auto_now_add'] = True\n    if self.auto_now or self.auto_now_add:\n        del kwargs['editable']\n        del kwargs['blank']\n    return (name, path, args, kwargs)",
    ".django.db.models.fields.__init__.py@@Field.deconstruct": "def deconstruct(self):\n    keywords = {}\n    possibles = {'verbose_name': None, 'primary_key': False, 'max_length': None, 'unique': False, 'blank': False, 'null': False, 'db_index': False, 'default': NOT_PROVIDED, 'editable': True, 'serialize': True, 'unique_for_date': None, 'unique_for_month': None, 'unique_for_year': None, 'choices': None, 'help_text': '', 'db_column': None, 'db_comment': None, 'db_tablespace': None, 'auto_created': False, 'validators': [], 'error_messages': None}\n    attr_overrides = {'unique': '_unique', 'error_messages': '_error_messages', 'validators': '_validators', 'verbose_name': '_verbose_name', 'db_tablespace': '_db_tablespace'}\n    equals_comparison = {'choices', 'validators'}\n    for name, default in possibles.items():\n        value = getattr(self, attr_overrides.get(name, name))\n        if name == 'choices' and isinstance(value, collections.abc.Iterable):\n            value = list(value)\n        if name in equals_comparison:\n            if value != default:\n                keywords[name] = value\n        elif value is not default:\n            keywords[name] = value\n    path = '%s.%s' % (self.__class__.__module__, self.__class__.__qualname__)\n    if path.startswith('django.db.models.fields.related'):\n        path = path.replace('django.db.models.fields.related', 'django.db.models')\n    elif path.startswith('django.db.models.fields.files'):\n        path = path.replace('django.db.models.fields.files', 'django.db.models')\n    elif path.startswith('django.db.models.fields.json'):\n        path = path.replace('django.db.models.fields.json', 'django.db.models')\n    elif path.startswith('django.db.models.fields.proxy'):\n        path = path.replace('django.db.models.fields.proxy', 'django.db.models')\n    elif path.startswith('django.db.models.fields'):\n        path = path.replace('django.db.models.fields', 'django.db.models')\n    return (self.name, path, [], keywords)",
    ".django.db.migrations.serializer.py@@DeconstructableSerializer.serialize_deconstructed": "def serialize_deconstructed(path, args, kwargs):\n    name, imports = DeconstructableSerializer._serialize_path(path)\n    strings = []\n    for arg in args:\n        arg_string, arg_imports = serializer_factory(arg).serialize()\n        strings.append(arg_string)\n        imports.update(arg_imports)\n    for kw, arg in sorted(kwargs.items()):\n        arg_string, arg_imports = serializer_factory(arg).serialize()\n        imports.update(arg_imports)\n        strings.append('%s=%s' % (kw, arg_string))\n    return ('%s(%s)' % (name, ', '.join(strings)), imports)",
    ".django.db.migrations.serializer.py@@DeconstructableSerializer._serialize_path": "def _serialize_path(path):\n    module, name = path.rsplit('.', 1)\n    if module == 'django.db.models':\n        imports = {'from django.db import models'}\n        name = 'models.%s' % name\n    else:\n        imports = {'import %s' % module}\n        name = path\n    return (name, imports)",
    ".django.db.migrations.serializer.py@@FunctionTypeSerializer.serialize": "def serialize(self):\n    if getattr(self.value, '__self__', None) and isinstance(self.value.__self__, type):\n        klass = self.value.__self__\n        module = klass.__module__\n        return ('%s.%s.%s' % (module, klass.__name__, self.value.__name__), {'import %s' % module})\n    if self.value.__name__ == '<lambda>':\n        raise ValueError('Cannot serialize function: lambda')\n    if self.value.__module__ is None:\n        raise ValueError('Cannot serialize function %r: No module' % self.value)\n    module_name = self.value.__module__\n    if '<' not in self.value.__qualname__:\n        return ('%s.%s' % (module_name, self.value.__qualname__), {'import %s' % self.value.__module__})\n    raise ValueError('Could not find function %s in %s.\\n' % (self.value.__name__, module_name))",
    ".django.db.migrations.serializer.py@@TupleSerializer._format": "def _format(self):\n    return '(%s)' if len(self.value) != 1 else '(%s,)'",
    ".django.db.migrations.operations.models.py@@DeleteModel.deconstruct": "def deconstruct(self):\n    kwargs = {'name': self.name}\n    return (self.__class__.__qualname__, [], kwargs)",
    ".django.db.migrations.operations.fields.py@@AddField.deconstruct": "def deconstruct(self):\n    kwargs = {'model_name': self.model_name, 'name': self.name, 'field': self.field}\n    if self.preserve_default is not True:\n        kwargs['preserve_default'] = self.preserve_default\n    return (self.__class__.__name__, [], kwargs)",
    ".django.db.migrations.serializer.py@@DatetimeDatetimeSerializer.serialize": "def serialize(self):\n    if self.value.tzinfo is not None and self.value.tzinfo != datetime.timezone.utc:\n        self.value = self.value.astimezone(datetime.timezone.utc)\n    imports = ['import datetime']\n    return (repr(self.value), set(imports))"
}