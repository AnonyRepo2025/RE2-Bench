{
    ".astropy.utils.masked.core.py@@Masked._get_mask": "def _get_mask(self):\n    return self._mask",
    ".astropy.utils.masked.core.py@@Masked._get_data_and_masks": "def _get_data_and_masks(cls, *args):\n    data_masks = [cls._get_data_and_mask(arg) for arg in args]\n    return (tuple((data for data, _ in data_masks)), tuple((mask for _, mask in data_masks)))",
    ".astropy.utils.masked.core.py@@Masked._get_data_and_mask": "def _get_data_and_mask(cls, data, allow_ma_masked=False):\n    mask = getattr(data, 'mask', None)\n    if mask is not None:\n        try:\n            data = data.unmasked\n        except AttributeError:\n            if not isinstance(data, np.ma.MaskedArray):\n                raise\n            if data is np.ma.masked:\n                if allow_ma_masked:\n                    data = None\n                else:\n                    raise ValueError('cannot handle np.ma.masked here.') from None\n            else:\n                data = data.data\n    return (data, mask)",
    ".astropy.utils.masked.core.py@@Masked.__new__": "def __new__(cls, *args, **kwargs):\n    if cls is Masked:\n        if not kwargs and len(args) == 1 and isinstance(args[0], type):\n            return cls._get_masked_cls(args[0])\n        else:\n            return cls._get_masked_instance(*args, **kwargs)\n    else:\n        return super().__new__(cls, *args, **kwargs)",
    ".astropy.utils.masked.core.py@@Masked._get_masked_instance": "def _get_masked_instance(cls, data, mask=None, copy=False):\n    data, data_mask = cls._get_data_and_mask(data)\n    if mask is None:\n        mask = False if data_mask is None else data_mask\n    masked_cls = cls._get_masked_cls(data.__class__)\n    return masked_cls.from_unmasked(data, mask, copy)",
    ".astropy.utils.masked.core.py@@Masked._get_masked_cls": "def _get_masked_cls(cls, data_cls):\n    if issubclass(data_cls, (Masked, np.ma.MaskedArray)):\n        return data_cls\n    masked_cls = cls._masked_classes.get(data_cls)\n    if masked_cls is None:\n        for mro_item in data_cls.__mro__:\n            base_cls = cls._base_classes.get(mro_item)\n            if base_cls is not None:\n                break\n        else:\n            return MaskedNDArray\n        masked_cls = type('Masked' + data_cls.__name__, (data_cls, base_cls), {}, data_cls=data_cls)\n    return masked_cls",
    ".astropy.utils.masked.core.py@@Masked._set_mask": "def _set_mask(self, mask, copy=False):\n    self_dtype = getattr(self, 'dtype', None)\n    mask_dtype = np.ma.make_mask_descr(self_dtype) if self_dtype and self_dtype.names else np.dtype('?')\n    ma = np.asanyarray(mask, dtype=mask_dtype)\n    if ma.shape != self.shape:\n        self._mask = np.empty(self.shape, dtype=mask_dtype)\n        self._mask[...] = ma\n    elif ma is mask:\n        self._mask = mask.copy() if copy else mask.view()\n    else:\n        self._mask = ma",
    ".astropy.utils.masked.core.py@@MaskedNDArray.shape": "def shape(self):\n    return super().shape"
}