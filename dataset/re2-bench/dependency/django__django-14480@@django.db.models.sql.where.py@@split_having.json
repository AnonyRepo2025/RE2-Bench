{
    ".django.utils.functional.py@@cached_property.__get__": "def __get__(self, instance, cls=None):\n    if instance is None:\n        return self\n    res = instance.__dict__[self.name] = self.func(instance)\n    return res",
    ".django.db.models.expressions.py@@BaseExpression.contains_aggregate": "def contains_aggregate(self):\n    return any((expr and expr.contains_aggregate for expr in self.get_source_expressions()))",
    ".django.db.models.lookups.py@@Lookup.get_source_expressions": "def get_source_expressions(self):\n    if self.rhs_is_direct_value():\n        return [self.lhs]\n    return [self.lhs, self.rhs]",
    ".django.db.models.lookups.py@@Lookup.rhs_is_direct_value": "def rhs_is_direct_value(self):\n    return not hasattr(self.rhs, 'as_sql')",
    ".django.db.models.expressions.py@@BaseExpression.get_source_expressions": "def get_source_expressions(self):\n    return []",
    ".django.utils.tree.py@@Node.__init__": "def __init__(self, children=None, connector=None, negated=False):\n    self.children = children[:] if children else []\n    self.connector = connector or self.default\n    self.negated = negated",
    ".django.db.models.expressions.py@@CombinedExpression.get_source_expressions": "def get_source_expressions(self):\n    return [self.lhs, self.rhs]",
    ".django.db.models.expressions.py@@Func.get_source_expressions": "def get_source_expressions(self):\n    return self.source_expressions",
    ".django.db.models.expressions.py@@Case.get_source_expressions": "def get_source_expressions(self):\n    return self.cases + [self.default]",
    ".django.db.models.expressions.py@@When.get_source_expressions": "def get_source_expressions(self):\n    return [self.condition, self.result]",
    ".django.db.models.expressions.py@@ExpressionWrapper.get_source_expressions": "def get_source_expressions(self):\n    return [self.expression]",
    ".django.utils.tree.py@@Node.__bool__": "def __bool__(self):\n    return bool(self.children)"
}