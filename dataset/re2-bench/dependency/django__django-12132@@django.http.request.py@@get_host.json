{
    ".django.conf.__init__.py@@LazySettings.__getattr__": "def __getattr__(self, name):\n    if self._wrapped is empty:\n        self._setup(name)\n    val = getattr(self._wrapped, name)\n    self.__dict__[name] = val\n    return val",
    ".django.core.handlers.wsgi.py@@WSGIRequest._get_scheme": "def _get_scheme(self):\n    return self.environ.get('wsgi.url_scheme')",
    ".django.http.request.py@@split_domain_port": "def split_domain_port(host):\n    host = host.lower()\n    if not host_validation_re.match(host):\n        return ('', '')\n    if host[-1] == ']':\n        return (host, '')\n    bits = host.rsplit(':', 1)\n    domain, port = bits if len(bits) == 2 else (bits[0], '')\n    domain = domain[:-1] if domain.endswith('.') else domain\n    return (domain, port)",
    ".django.utils.functional.py@@inner": "def inner(self, *args):\n    if self._wrapped is empty:\n        self._setup()\n    return func(self._wrapped, *args)",
    ".django.utils.functional.py@@SimpleLazyObject._setup": "def _setup(self):\n    self._wrapped = self._setupfunc()",
    ".django.utils.regex_helper.py@@_compile": "def _compile():\n    if isinstance(regex, (str, bytes)):\n        return re.compile(regex, flags)\n    else:\n        assert not flags, 'flags must be empty if regex is passed pre-compiled'\n        return regex",
    ".django.utils.functional.py@@LazyObject.__setattr__": "def __setattr__(self, name, value):\n    if name == '_wrapped':\n        self.__dict__['_wrapped'] = value\n    else:\n        if self._wrapped is empty:\n            self._setup()\n        setattr(self._wrapped, name, value)",
    ".django.http.request.py@@validate_host": "def validate_host(host, allowed_hosts):\n    return any((pattern == '*' or is_same_domain(host, pattern) for pattern in allowed_hosts))",
    ".django.utils.http.py@@is_same_domain": "def is_same_domain(host, pattern):\n    if not pattern:\n        return False\n    pattern = pattern.lower()\n    return pattern[0] == '.' and (host.endswith(pattern) or host == pattern[1:]) or pattern == host",
    ".django.conf.__init__.py@@UserSettingsHolder.__getattr__": "def __getattr__(self, name):\n    if not name.isupper() or name in self._deleted:\n        raise AttributeError\n    return getattr(self.default_settings, name)"
}