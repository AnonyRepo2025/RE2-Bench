{
    ".django.core.cache.backends.base.py@@BaseCache.make_and_validate_key": "def make_and_validate_key(self, key, version=None):\n    key = self.make_key(key, version=version)\n    self.validate_key(key)\n    return key",
    ".django.core.cache.backends.base.py@@BaseCache.make_key": "def make_key(self, key, version=None):\n    if version is None:\n        version = self.version\n    return self.key_func(key, self.key_prefix, version)",
    ".django.core.cache.backends.base.py@@default_key_func": "def default_key_func(key, key_prefix, version):\n    return '%s:%s:%s' % (key_prefix, version, key)",
    ".django.core.cache.backends.base.py@@BaseCache.validate_key": "def validate_key(self, key):\n    for warning in memcache_key_warnings(key):\n        warnings.warn(warning, CacheKeyWarning)",
    ".django.core.cache.backends.base.py@@memcache_key_warnings": "def memcache_key_warnings(key):\n    if len(key) > MEMCACHE_MAX_KEY_LENGTH:\n        yield ('Cache key will cause errors if used with memcached: %r (longer than %s)' % (key, MEMCACHE_MAX_KEY_LENGTH))\n    for char in key:\n        if ord(char) < 33 or ord(char) == 127:\n            yield ('Cache key contains characters that will cause errors if used with memcached: %r' % key)\n            break"
}