{
    ".django.utils.encoding.py@@punycode": "def punycode(domain):\n    return domain.encode('idna').decode('ascii')",
    ".django.utils.encoding.py@@force_str": "def force_str(s, encoding='utf-8', strings_only=False, errors='strict'):\n    if issubclass(type(s), str):\n        return s\n    if strings_only and is_protected_type(s):\n        return s\n    try:\n        if isinstance(s, bytes):\n            s = str(s, encoding, errors)\n        else:\n            s = str(s)\n    except UnicodeDecodeError as e:\n        raise DjangoUnicodeDecodeError(s, *e.args)\n    return s",
    ".django.utils.translation.__init__.py@@gettext": "def gettext(message):\n    return _trans.gettext(message)",
    ".django.utils.translation.trans_real.py@@gettext": "def gettext(message):\n    global _default\n    eol_message = message.replace('\\r\\n', '\\n').replace('\\r', '\\n')\n    if eol_message:\n        _default = _default or translation(settings.LANGUAGE_CODE)\n        translation_object = getattr(_active, 'value', _default)\n        result = translation_object.gettext(eol_message)\n    else:\n        result = type(message)('')\n    if isinstance(message, SafeData):\n        return mark_safe(result)\n    return result"
}