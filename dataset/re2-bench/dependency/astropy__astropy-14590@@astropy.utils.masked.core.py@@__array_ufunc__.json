{
    ".astropy.utils.masked.core.py@@Masked._get_data_and_masks": "def _get_data_and_masks(cls, *args):\n    data_masks = [cls._get_data_and_mask(arg) for arg in args]\n    return (tuple((data for data, _ in data_masks)), tuple((mask for _, mask in data_masks)))",
    ".astropy.utils.masked.core.py@@Masked._get_data_and_mask": "def _get_data_and_mask(cls, data, allow_ma_masked=False):\n    mask = getattr(data, 'mask', None)\n    if mask is not None:\n        try:\n            data = data.unmasked\n        except AttributeError:\n            if not isinstance(data, np.ma.MaskedArray):\n                raise\n            if data is np.ma.masked:\n                if allow_ma_masked:\n                    data = None\n                else:\n                    raise ValueError('cannot handle np.ma.masked here.') from None\n            else:\n                data = data.data\n    return (data, mask)",
    ".astropy.utils.masked.core.py@@Masked._get_mask": "def _get_mask(self):\n    return self._mask"
}