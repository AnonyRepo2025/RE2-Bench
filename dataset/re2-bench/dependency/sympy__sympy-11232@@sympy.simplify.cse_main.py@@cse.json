{
    ".sympy.simplify.cse_main.py@@preprocess_for_cse": "def preprocess_for_cse(expr, optimizations):\n    for pre, post in optimizations:\n        if pre is not None:\n            expr = pre(expr)\n    return expr",
    ".sympy.core.basic.py@@Basic.atoms": "def atoms(self, *types):\n    if types:\n        types = tuple([t if isinstance(t, type) else type(t) for t in types])\n    else:\n        types = (Atom,)\n    result = set()\n    for expr in preorder_traversal(self):\n        if isinstance(expr, types):\n            result.add(expr)\n    return result",
    ".sympy.core.basic.py@@preorder_traversal.__init__": "def __init__(self, node, keys=None):\n    self._skip_flag = False\n    self._pt = self._preorder_traversal(node, keys)",
    ".sympy.core.basic.py@@preorder_traversal.__iter__": "def __iter__(self):\n    return self",
    ".sympy.core.basic.py@@preorder_traversal.__next__": "def __next__(self):\n    return next(self._pt)",
    ".sympy.core.basic.py@@preorder_traversal._preorder_traversal": "def _preorder_traversal(self, node, keys):\n    yield node\n    if self._skip_flag:\n        self._skip_flag = False\n        return\n    if isinstance(node, Basic):\n        if not keys and hasattr(node, '_argset'):\n            args = node._argset\n        else:\n            args = node.args\n        if keys:\n            if keys != True:\n                args = ordered(args, keys, default=False)\n            else:\n                args = ordered(args)\n        for arg in args:\n            for subtree in self._preorder_traversal(arg, keys):\n                yield subtree\n    elif iterable(node):\n        for item in node:\n            for subtree in self._preorder_traversal(item, keys):\n                yield subtree",
    ".sympy.core.basic.py@@Basic.args": "def args(self):\n    return self._args",
    ".sympy.core.basic.py@@Basic.__hash__": "def __hash__(self):\n    h = self._mhash\n    if h is None:\n        h = hash((type(self).__name__,) + self._hashable_content())\n        self._mhash = h\n    return h",
    ".sympy.simplify.cse_main.py@@opt_cse": "def opt_cse(exprs, order='canonical', verbose=False):\n    from sympy.matrices.expressions import MatAdd, MatMul, MatPow\n    opt_subs = dict()\n    adds = set()\n    muls = set()\n    seen_subexp = set()\n\n    def _find_opts(expr):\n        if not isinstance(expr, Basic):\n            return\n        if expr.is_Atom or expr.is_Order:\n            return\n        if iterable(expr):\n            list(map(_find_opts, expr))\n            return\n        if expr in seen_subexp:\n            return expr\n        seen_subexp.add(expr)\n        list(map(_find_opts, expr.args))\n        if _coeff_isneg(expr):\n            neg_expr = -expr\n            if not neg_expr.is_Atom:\n                opt_subs[expr] = Mul(S.NegativeOne, neg_expr, evaluate=False)\n                seen_subexp.add(neg_expr)\n                expr = neg_expr\n        if isinstance(expr, (Mul, MatMul)):\n            muls.add(expr)\n        elif isinstance(expr, (Add, MatAdd)):\n            adds.add(expr)\n        elif isinstance(expr, (Pow, MatPow)):\n            if _coeff_isneg(expr.exp):\n                opt_subs[expr] = Pow(Pow(expr.base, -expr.exp), S.NegativeOne, evaluate=False)\n    for e in exprs:\n        if isinstance(e, Basic):\n            _find_opts(e)\n\n    def _match_common_args(Func, funcs):\n        if order != 'none':\n            funcs = list(ordered(funcs))\n        else:\n            funcs = sorted(funcs, key=lambda x: len(x.args))\n        if Func is Mul:\n            F = Pow\n            meth = 'as_powers_dict'\n            from sympy.core.add import _addsort as inplace_sorter\n        elif Func is Add:\n            F = Mul\n            meth = 'as_coefficients_dict'\n            from sympy.core.mul import _mulsort as inplace_sorter\n        else:\n            assert None\n\n        def ufunc(*args):\n            args = list(args)\n            inplace_sorter(args)\n            return Func(*args, evaluate=False)\n\n        def as_dict(e):\n            d = getattr(e, meth, lambda: {a: S.One for a in e.args})()\n            for k in list(d.keys()):\n                try:\n                    as_int(d[k])\n                except ValueError:\n                    d[F(k, d.pop(k))] = S.One\n            return d\n\n        def from_dict(d):\n            return ufunc(*[F(k, v) for k, v in d.items()])\n\n        def update(k):\n            for di in com_dict:\n                if com_dict[di] > func_dicts[k][di]:\n                    return\n            if Func is Add:\n                take = min((func_dicts[k][i] for i in com_dict))\n                com_func_take = Mul(take, from_dict(com_dict), evaluate=False)\n            else:\n                take = igcd(*[func_dicts[k][i] for i in com_dict])\n                com_func_take = Pow(from_dict(com_dict), take, evaluate=False)\n            for di in com_dict:\n                func_dicts[k][di] -= take * com_dict[di]\n            rem = from_dict(func_dicts[k])\n            if Func is Add and rem and rem.is_Integer and (1 in com_dict):\n                return\n            if verbose:\n                print('\\nfunc %s (%s) \\ncontains %s \\nas %s \\nleaving %s' % (funcs[k], func_dicts[k], com_func, com_func_take, rem))\n            func_dicts[k] = as_dict(rem)\n            func_dicts[k][com_func] = take\n            func_args[k] = set(func_dicts[k])\n            opt_subs[funcs[k]] = ufunc(rem, com_func_take)\n            return True\n\n        def get_copy(i):\n            return [func_dicts[i].copy(), func_args[i].copy(), funcs[i], i]\n\n        def restore(dafi):\n            i = dafi.pop()\n            func_dicts[i], func_args[i], funcs[i] = dafi\n        func_dicts = [as_dict(f) for f in funcs]\n        func_args = [set(d) for d in func_dicts]\n        while True:\n            hit = pairwise_most_common(func_args)\n            if not hit or len(hit[0][0]) <= 1:\n                break\n            changed = False\n            for com_args, ij in hit:\n                take = len(com_args)\n                ALL = list(ordered(com_args))\n                while take >= 2:\n                    for com_args in subsets(ALL, take):\n                        com_func = Func(*com_args)\n                        com_dict = as_dict(com_func)\n                        for i, j in ij:\n                            dafi = None\n                            if com_func != funcs[i]:\n                                dafi = get_copy(i)\n                                ch = update(i)\n                                if not ch:\n                                    restore(dafi)\n                                    continue\n                            if com_func != funcs[j]:\n                                dafj = get_copy(j)\n                                ch = update(j)\n                                if not ch:\n                                    if dafi is not None:\n                                        restore(dafi)\n                                    restore(dafj)\n                                    continue\n                            changed = True\n                        if changed:\n                            break\n                    else:\n                        take -= 1\n                        continue\n                    break\n                else:\n                    continue\n                break\n            if not changed:\n                break\n    commutative_muls = set()\n    for m in muls:\n        c, nc = m.args_cnc(cset=True)\n        if c:\n            c_mul = m.func(*c)\n            if nc:\n                opt_subs[m] = m.func(c_mul, m.func(*nc), evaluate=False)\n            if len(c) > 1:\n                commutative_muls.add(c_mul)\n    _match_common_args(Add, adds)\n    _match_common_args(Mul, commutative_muls)\n    return opt_subs",
    ".sympy.simplify.cse_main.py@@_find_opts": "def _find_opts(expr):\n    if not isinstance(expr, Basic):\n        return\n    if expr.is_Atom or expr.is_Order:\n        return\n    if iterable(expr):\n        list(map(_find_opts, expr))\n        return\n    if expr in seen_subexp:\n        return expr\n    seen_subexp.add(expr)\n    list(map(_find_opts, expr.args))\n    if _coeff_isneg(expr):\n        neg_expr = -expr\n        if not neg_expr.is_Atom:\n            opt_subs[expr] = Mul(S.NegativeOne, neg_expr, evaluate=False)\n            seen_subexp.add(neg_expr)\n            expr = neg_expr\n    if isinstance(expr, (Mul, MatMul)):\n        muls.add(expr)\n    elif isinstance(expr, (Add, MatAdd)):\n        adds.add(expr)\n    elif isinstance(expr, (Pow, MatPow)):\n        if _coeff_isneg(expr.exp):\n            opt_subs[expr] = Pow(Pow(expr.base, -expr.exp), S.NegativeOne, evaluate=False)",
    ".sympy.core.compatibility.py@@iterable": "def iterable(i, exclude=(string_types, dict, NotIterable)):\n    if hasattr(i, '_iterable'):\n        return i._iterable\n    try:\n        iter(i)\n    except TypeError:\n        return False\n    if exclude:\n        return not isinstance(i, exclude)\n    return True",
    ".sympy.core.basic.py@@Basic._hashable_content": "def _hashable_content(self):\n    return self._args",
    ".sympy.core.function.py@@_coeff_isneg": "def _coeff_isneg(a):\n    if a.is_Mul:\n        a = a.args[0]\n    return a.is_Number and a.is_negative",
    ".sympy.core.basic.py@@Basic.__eq__": "def __eq__(self, other):\n    from sympy import Pow\n    if self is other:\n        return True\n    from .function import AppliedUndef, UndefinedFunction as UndefFunc\n    if isinstance(self, UndefFunc) and isinstance(other, UndefFunc):\n        if self.class_key() == other.class_key():\n            return True\n        else:\n            return False\n    if type(self) is not type(other):\n        if isinstance(self, Pow) and self.exp == 1:\n            return self.base == other\n        if isinstance(other, Pow) and other.exp == 1:\n            return self == other.base\n        try:\n            other = _sympify(other)\n        except SympifyError:\n            return False\n        if isinstance(self, AppliedUndef) and isinstance(other, AppliedUndef):\n            if self.class_key() != other.class_key():\n                return False\n        elif type(self) is not type(other):\n            return False\n    return self._hashable_content() == other._hashable_content()",
    ".sympy.simplify.cse_main.py@@_match_common_args": "def _match_common_args(Func, funcs):\n    if order != 'none':\n        funcs = list(ordered(funcs))\n    else:\n        funcs = sorted(funcs, key=lambda x: len(x.args))\n    if Func is Mul:\n        F = Pow\n        meth = 'as_powers_dict'\n        from sympy.core.add import _addsort as inplace_sorter\n    elif Func is Add:\n        F = Mul\n        meth = 'as_coefficients_dict'\n        from sympy.core.mul import _mulsort as inplace_sorter\n    else:\n        assert None\n\n    def ufunc(*args):\n        args = list(args)\n        inplace_sorter(args)\n        return Func(*args, evaluate=False)\n\n    def as_dict(e):\n        d = getattr(e, meth, lambda: {a: S.One for a in e.args})()\n        for k in list(d.keys()):\n            try:\n                as_int(d[k])\n            except ValueError:\n                d[F(k, d.pop(k))] = S.One\n        return d\n\n    def from_dict(d):\n        return ufunc(*[F(k, v) for k, v in d.items()])\n\n    def update(k):\n        for di in com_dict:\n            if com_dict[di] > func_dicts[k][di]:\n                return\n        if Func is Add:\n            take = min((func_dicts[k][i] for i in com_dict))\n            com_func_take = Mul(take, from_dict(com_dict), evaluate=False)\n        else:\n            take = igcd(*[func_dicts[k][i] for i in com_dict])\n            com_func_take = Pow(from_dict(com_dict), take, evaluate=False)\n        for di in com_dict:\n            func_dicts[k][di] -= take * com_dict[di]\n        rem = from_dict(func_dicts[k])\n        if Func is Add and rem and rem.is_Integer and (1 in com_dict):\n            return\n        if verbose:\n            print('\\nfunc %s (%s) \\ncontains %s \\nas %s \\nleaving %s' % (funcs[k], func_dicts[k], com_func, com_func_take, rem))\n        func_dicts[k] = as_dict(rem)\n        func_dicts[k][com_func] = take\n        func_args[k] = set(func_dicts[k])\n        opt_subs[funcs[k]] = ufunc(rem, com_func_take)\n        return True\n\n    def get_copy(i):\n        return [func_dicts[i].copy(), func_args[i].copy(), funcs[i], i]\n\n    def restore(dafi):\n        i = dafi.pop()\n        func_dicts[i], func_args[i], funcs[i] = dafi\n    func_dicts = [as_dict(f) for f in funcs]\n    func_args = [set(d) for d in func_dicts]\n    while True:\n        hit = pairwise_most_common(func_args)\n        if not hit or len(hit[0][0]) <= 1:\n            break\n        changed = False\n        for com_args, ij in hit:\n            take = len(com_args)\n            ALL = list(ordered(com_args))\n            while take >= 2:\n                for com_args in subsets(ALL, take):\n                    com_func = Func(*com_args)\n                    com_dict = as_dict(com_func)\n                    for i, j in ij:\n                        dafi = None\n                        if com_func != funcs[i]:\n                            dafi = get_copy(i)\n                            ch = update(i)\n                            if not ch:\n                                restore(dafi)\n                                continue\n                        if com_func != funcs[j]:\n                            dafj = get_copy(j)\n                            ch = update(j)\n                            if not ch:\n                                if dafi is not None:\n                                    restore(dafi)\n                                restore(dafj)\n                                continue\n                        changed = True\n                    if changed:\n                        break\n                else:\n                    take -= 1\n                    continue\n                break\n            else:\n                continue\n            break\n        if not changed:\n            break",
    ".sympy.core.compatibility.py@@ordered": "def ordered(seq, keys=None, default=True, warn=False):\n    d = defaultdict(list)\n    if keys:\n        if not isinstance(keys, (list, tuple)):\n            keys = [keys]\n        keys = list(keys)\n        f = keys.pop(0)\n        for a in seq:\n            d[f(a)].append(a)\n    else:\n        if not default:\n            raise ValueError('if default=False then keys must be provided')\n        d[None].extend(seq)\n    for k in sorted(d.keys()):\n        if len(d[k]) > 1:\n            if keys:\n                d[k] = ordered(d[k], keys, default, warn)\n            elif default:\n                d[k] = ordered(d[k], (_nodes, default_sort_key), default=False, warn=warn)\n            elif warn:\n                from sympy.utilities.iterables import uniq\n                u = list(uniq(d[k]))\n                if len(u) > 1:\n                    raise ValueError('not enough keys to break ties: %s' % u)\n        for v in d[k]:\n            yield v\n        d.pop(k)",
    ".sympy.simplify.cse_main.py@@as_dict": "def as_dict(e):\n    d = getattr(e, meth, lambda: {a: S.One for a in e.args})()\n    for k in list(d.keys()):\n        try:\n            as_int(d[k])\n        except ValueError:\n            d[F(k, d.pop(k))] = S.One\n    return d",
    ".sympy.core.add.py@@Add.as_coefficients_dict": "def as_coefficients_dict(a):\n    d = defaultdict(list)\n    for ai in a.args:\n        c, m = ai.as_coeff_Mul()\n        d[m].append(c)\n    for k, v in d.items():\n        if len(v) == 1:\n            d[k] = v[0]\n        else:\n            d[k] = Add(*v)\n    di = defaultdict(int)\n    di.update(d)\n    return di",
    ".sympy.core.expr.py@@Expr.as_coeff_Mul": "def as_coeff_Mul(self, rational=False):\n    return (S.One, self)",
    ".sympy.core.compatibility.py@@as_int": "def as_int(n):\n    try:\n        result = int(n)\n        if result != n:\n            raise TypeError\n    except TypeError:\n        raise ValueError('%s is not an integer' % n)\n    return result",
    ".sympy.core.numbers.py@@Integer.__int__": "def __int__(self):\n    return self.p",
    ".sympy.core.numbers.py@@Integer.__ne__": "def __ne__(self, other):\n    return not self.__eq__(other)",
    ".sympy.core.numbers.py@@Integer.__eq__": "def __eq__(self, other):\n    if isinstance(other, integer_types):\n        return self.p == other\n    elif isinstance(other, Integer):\n        return self.p == other.p\n    return Rational.__eq__(self, other)",
    ".sympy.simplify.cse_main.py@@pairwise_most_common": "def pairwise_most_common(sets):\n    from sympy.utilities.iterables import subsets\n    from collections import defaultdict\n    most = -1\n    for i, j in subsets(list(range(len(sets))), 2):\n        com = sets[i] & sets[j]\n        if com and len(com) > most:\n            best = defaultdict(list)\n            best_keys = []\n            most = len(com)\n        if len(com) == most:\n            if com not in best_keys:\n                best_keys.append(com)\n            best[best_keys.index(com)].append((i, j))\n    if most == -1:\n        return []\n    for k in range(len(best)):\n        best_keys[k] = (best_keys[k], best[k])\n    best_keys.sort(key=lambda x: len(x[1]))\n    return best_keys",
    ".sympy.utilities.iterables.py@@subsets": "def subsets(seq, k=None, repetition=False):\n    if k is None:\n        for k in range(len(seq) + 1):\n            for i in subsets(seq, k, repetition):\n                yield i\n    elif not repetition:\n        for i in combinations(seq, k):\n            yield i\n    else:\n        for i in combinations_with_replacement(seq, k):\n            yield i",
    ".sympy.simplify.cse_main.py@@tree_cse": "def tree_cse(exprs, symbols, opt_subs=None, order='canonical'):\n    from sympy.matrices.expressions import MatrixExpr, MatrixSymbol, MatMul, MatAdd\n    if opt_subs is None:\n        opt_subs = dict()\n    to_eliminate = set()\n    seen_subexp = set()\n\n    def _find_repeated(expr):\n        if not isinstance(expr, Basic):\n            return\n        if expr.is_Atom or expr.is_Order:\n            return\n        if iterable(expr):\n            args = expr\n        else:\n            if expr in seen_subexp:\n                to_eliminate.add(expr)\n                return\n            seen_subexp.add(expr)\n            if expr in opt_subs:\n                expr = opt_subs[expr]\n            args = expr.args\n        list(map(_find_repeated, args))\n    for e in exprs:\n        if isinstance(e, Basic):\n            _find_repeated(e)\n    replacements = []\n    subs = dict()\n\n    def _rebuild(expr):\n        if not isinstance(expr, Basic):\n            return expr\n        if not expr.args:\n            return expr\n        if iterable(expr):\n            new_args = [_rebuild(arg) for arg in expr]\n            return expr.func(*new_args)\n        if expr in subs:\n            return subs[expr]\n        orig_expr = expr\n        if expr in opt_subs:\n            expr = opt_subs[expr]\n        if order != 'none':\n            if isinstance(expr, (Mul, MatMul)):\n                c, nc = expr.args_cnc()\n                if c == [1]:\n                    args = nc\n                else:\n                    args = list(ordered(c)) + nc\n            elif isinstance(expr, (Add, MatAdd)):\n                args = list(ordered(expr.args))\n            else:\n                args = expr.args\n        else:\n            args = expr.args\n        new_args = list(map(_rebuild, args))\n        if new_args != args:\n            new_expr = expr.func(*new_args)\n        else:\n            new_expr = expr\n        if orig_expr in to_eliminate:\n            try:\n                sym = next(symbols)\n            except StopIteration:\n                raise ValueError('Symbols iterator ran out of symbols.')\n            if isinstance(orig_expr, MatrixExpr):\n                sym = MatrixSymbol(sym.name, orig_expr.rows, orig_expr.cols)\n            subs[orig_expr] = sym\n            replacements.append((sym, new_expr))\n            return sym\n        else:\n            return new_expr\n    reduced_exprs = []\n    for e in exprs:\n        if isinstance(e, Basic):\n            reduced_e = _rebuild(e)\n        else:\n            reduced_e = e\n        reduced_exprs.append(reduced_e)\n    nested = [[i for i in f.args if isinstance(i, f.func)] for f in exprs]\n    for i in range(len(exprs)):\n        F = reduced_exprs[i].func\n        if not (F is Mul or F is Add):\n            continue\n        nested = [a for a in exprs[i].args if isinstance(a, F)]\n        args = []\n        for a in reduced_exprs[i].args:\n            if isinstance(a, F):\n                for ai in a.args:\n                    if isinstance(ai, F) and ai not in nested:\n                        args.extend(ai.args)\n                    else:\n                        args.append(ai)\n            else:\n                args.append(a)\n        reduced_exprs[i] = F(*args)\n    return (replacements, reduced_exprs)",
    ".sympy.simplify.cse_main.py@@_find_repeated": "def _find_repeated(expr):\n    if not isinstance(expr, Basic):\n        return\n    if expr.is_Atom or expr.is_Order:\n        return\n    if iterable(expr):\n        args = expr\n    else:\n        if expr in seen_subexp:\n            to_eliminate.add(expr)\n            return\n        seen_subexp.add(expr)\n        if expr in opt_subs:\n            expr = opt_subs[expr]\n        args = expr.args\n    list(map(_find_repeated, args))",
    ".sympy.simplify.cse_main.py@@_rebuild": "def _rebuild(expr):\n    if not isinstance(expr, Basic):\n        return expr\n    if not expr.args:\n        return expr\n    if iterable(expr):\n        new_args = [_rebuild(arg) for arg in expr]\n        return expr.func(*new_args)\n    if expr in subs:\n        return subs[expr]\n    orig_expr = expr\n    if expr in opt_subs:\n        expr = opt_subs[expr]\n    if order != 'none':\n        if isinstance(expr, (Mul, MatMul)):\n            c, nc = expr.args_cnc()\n            if c == [1]:\n                args = nc\n            else:\n                args = list(ordered(c)) + nc\n        elif isinstance(expr, (Add, MatAdd)):\n            args = list(ordered(expr.args))\n        else:\n            args = expr.args\n    else:\n        args = expr.args\n    new_args = list(map(_rebuild, args))\n    if new_args != args:\n        new_expr = expr.func(*new_args)\n    else:\n        new_expr = expr\n    if orig_expr in to_eliminate:\n        try:\n            sym = next(symbols)\n        except StopIteration:\n            raise ValueError('Symbols iterator ran out of symbols.')\n        if isinstance(orig_expr, MatrixExpr):\n            sym = MatrixSymbol(sym.name, orig_expr.rows, orig_expr.cols)\n        subs[orig_expr] = sym\n        replacements.append((sym, new_expr))\n        return sym\n    else:\n        return new_expr",
    ".sympy.core.compatibility.py@@_nodes": "def _nodes(e):\n    from .basic import Basic\n    if isinstance(e, Basic):\n        return e.count(Basic)\n    elif iterable(e):\n        return 1 + sum((_nodes(ei) for ei in e))\n    elif isinstance(e, dict):\n        return 1 + sum((_nodes(k) + _nodes(v) for k, v in e.items()))\n    else:\n        return 1",
    ".sympy.core.basic.py@@Basic.count": "def count(self, query):\n    query = _make_find_query(query)\n    return sum((bool(query(sub)) for sub in preorder_traversal(self)))",
    ".sympy.core.basic.py@@_make_find_query": "def _make_find_query(query):\n    try:\n        query = sympify(query)\n    except SympifyError:\n        pass\n    if isinstance(query, type):\n        return lambda expr: isinstance(expr, query)\n    elif isinstance(query, Basic):\n        return lambda expr: expr.match(query) is not None\n    return query",
    ".sympy.core.sympify.py@@sympify": "def sympify(a, locals=None, convert_xor=True, strict=False, rational=False, evaluate=None):\n    if evaluate is None:\n        evaluate = global_evaluate[0]\n    try:\n        if a in sympy_classes:\n            return a\n    except TypeError:\n        pass\n    try:\n        cls = a.__class__\n    except AttributeError:\n        cls = type(a)\n    if cls in sympy_classes:\n        return a\n    if cls is type(None):\n        if strict:\n            raise SympifyError(a)\n        else:\n            return a\n    try:\n        return converter[cls](a)\n    except KeyError:\n        for superclass in getmro(cls):\n            try:\n                return converter[superclass](a)\n            except KeyError:\n                continue\n    if isinstance(a, CantSympify):\n        raise SympifyError(a)\n    try:\n        return a._sympy_()\n    except AttributeError:\n        pass\n    if not isinstance(a, string_types):\n        for coerce in (float, int):\n            try:\n                return sympify(coerce(a))\n            except (TypeError, ValueError, AttributeError, SympifyError):\n                continue\n    if strict:\n        raise SympifyError(a)\n    if iterable(a):\n        try:\n            return type(a)([sympify(x, locals=locals, convert_xor=convert_xor, rational=rational) for x in a])\n        except TypeError:\n            pass\n    if isinstance(a, dict):\n        try:\n            return type(a)([sympify(x, locals=locals, convert_xor=convert_xor, rational=rational) for x in a.items()])\n        except TypeError:\n            pass\n    try:\n        from .compatibility import unicode\n        a = unicode(a)\n    except Exception as exc:\n        raise SympifyError(a, exc)\n    from sympy.parsing.sympy_parser import parse_expr, TokenError, standard_transformations\n    from sympy.parsing.sympy_parser import convert_xor as t_convert_xor\n    from sympy.parsing.sympy_parser import rationalize as t_rationalize\n    transformations = standard_transformations\n    if rational:\n        transformations += (t_rationalize,)\n    if convert_xor:\n        transformations += (t_convert_xor,)\n    try:\n        a = a.replace('\\n', '')\n        expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n    except (TokenError, SyntaxError) as exc:\n        raise SympifyError('could not parse %r' % a, exc)\n    return expr",
    ".sympy.core.function.py@@Application.func": "def func(self):\n    return self.__class__",
    ".sympy.core.function.py@@AppliedUndef.__new__": "def __new__(cls, *args, **options):\n    args = list(map(sympify, args))\n    obj = super(AppliedUndef, cls).__new__(cls, *args, **options)\n    return obj",
    ".sympy.core.function.py@@Function.__new__": "def __new__(cls, *args, **options):\n    if cls is Function:\n        return UndefinedFunction(*args, **options)\n    n = len(args)\n    if n not in cls.nargs:\n        temp = '%(name)s takes %(qual)s %(args)s argument%(plural)s (%(given)s given)'\n        raise TypeError(temp % {'name': cls, 'qual': 'exactly' if len(cls.nargs) == 1 else 'at least', 'args': min(cls.nargs), 'plural': 's' * (min(cls.nargs) != 1), 'given': n})\n    evaluate = options.get('evaluate', global_evaluate[0])\n    result = super(Function, cls).__new__(cls, *args, **options)\n    if not evaluate or not isinstance(result, cls):\n        return result\n    pr = max((cls._should_evalf(a) for a in result.args))\n    pr2 = min((cls._should_evalf(a) for a in result.args))\n    if pr2 > 0:\n        return result.evalf(mlib.libmpf.prec_to_dps(pr))\n    return result",
    ".sympy.core.function.py@@FunctionClass.nargs": "def nargs(self):\n    from sympy.sets.sets import FiniteSet\n    return FiniteSet(*self._nargs) if self._nargs else S.Naturals0",
    ".sympy.sets.sets.py@@Set.__contains__": "def __contains__(self, other):\n    symb = sympify(self.contains(other))\n    if not (symb is S.true or symb is S.false):\n        raise TypeError('contains did not evaluate to a bool: %r' % symb)\n    return bool(symb)",
    ".sympy.sets.sets.py@@Set.contains": "def contains(self, other):\n    other = sympify(other, strict=True)\n    ret = sympify(self._contains(other))\n    if ret is None:\n        ret = Contains(other, self, evaluate=False)\n    return ret",
    ".sympy.core.numbers.py@@Integer.__new__": "def __new__(cls, i):\n    if isinstance(i, string_types):\n        i = i.replace(' ', '')\n    try:\n        ival = int(i)\n    except TypeError:\n        raise TypeError('Integer can only work with integer expressions.')\n    try:\n        return _intcache[ival]\n    except KeyError:\n        obj = Expr.__new__(cls)\n        obj.p = ival\n        _intcache[ival] = obj\n        return obj",
    ".sympy.sets.fancysets.py@@Naturals0._contains": "def _contains(self, other):\n    if other.is_integer and other.is_nonnegative:\n        return S.true\n    elif other.is_integer is False or other.is_nonnegative is False:\n        return S.false",
    ".sympy.core.assumptions.py@@getit": "def getit(self):\n    try:\n        return self._assumptions[fact]\n    except KeyError:\n        if self._assumptions is self.default_assumptions:\n            self._assumptions = self.default_assumptions.copy()\n        return _ask(fact, self)",
    ".sympy.logic.boolalg.py@@BooleanTrue.__hash__": "def __hash__(self):\n    return hash(True)",
    ".sympy.logic.boolalg.py@@BooleanTrue.__nonzero__": "def __nonzero__(self):\n    return True",
    ".sympy.core.function.py@@Application.__new__": "def __new__(cls, *args, **options):\n    from sympy.sets.fancysets import Naturals0\n    from sympy.sets.sets import FiniteSet\n    args = list(map(sympify, args))\n    evaluate = options.pop('evaluate', global_evaluate[0])\n    options.pop('nargs', None)\n    if options:\n        raise ValueError('Unknown options: %s' % options)\n    if evaluate:\n        evaluated = cls.eval(*args)\n        if evaluated is not None:\n            return evaluated\n    obj = super(Application, cls).__new__(cls, *args, **options)\n    try:\n        if is_sequence(obj.nargs):\n            nargs = tuple(ordered(set(obj.nargs)))\n        elif obj.nargs is not None:\n            nargs = (as_int(obj.nargs),)\n        else:\n            nargs = None\n    except AttributeError:\n        nargs = obj._nargs\n    obj.nargs = FiniteSet(*nargs) if nargs else Naturals0()\n    return obj",
    ".sympy.core.function.py@@Application.eval": "def eval(cls, *args):\n    return",
    ".sympy.core.basic.py@@Basic.__new__": "def __new__(cls, *args):\n    obj = object.__new__(cls)\n    obj._assumptions = cls.default_assumptions\n    obj._mhash = None\n    obj._args = args\n    return obj",
    ".sympy.core.singleton.py@@Singleton.__call__": "def __call__(self, *args, **kwargs):\n    if self not in Singleton._instances:\n        Singleton._instances[self] = super(Singleton, self).__call__(*args, **kwargs)\n    return Singleton._instances[self]\n\n    def __getnewargs__(self):\n        return ()\n    self.__getnewargs__ = __getnewargs__",
    ".sympy.core.function.py@@Function._should_evalf": "def _should_evalf(cls, arg):\n    from sympy.core.symbol import Wild\n    if arg.is_Float:\n        return arg._prec\n    if not arg.is_Add:\n        return -1\n    a, b = (Wild('a'), Wild('b'))\n    m = arg.match(a + b * S.ImaginaryUnit)\n    if not m or not (m[a].is_Float or m[b].is_Float):\n        return -1\n    l = [m[i]._prec for i in m if m[i].is_Float]\n    l.append(-1)\n    return max(l)",
    ".sympy.utilities.iterables.py@@filter_symbols": "def filter_symbols(iterator, exclude):\n    exclude = set(exclude)\n    for s in iterator:\n        if s not in exclude:\n            yield s",
    ".sympy.utilities.iterables.py@@numbered_symbols": "def numbered_symbols(prefix='x', cls=None, start=0, exclude=[], *args, **assumptions):\n    exclude = set(exclude or [])\n    if cls is None:\n        from sympy import Symbol\n        cls = Symbol\n    while True:\n        name = '%s%s' % (prefix, start)\n        s = cls(name, *args, **assumptions)\n        if s not in exclude:\n            yield s\n        start += 1",
    ".sympy.core.symbol.py@@Symbol.__new__": "def __new__(cls, name, **assumptions):\n    cls._sanitize(assumptions, cls)\n    return Symbol.__xnew_cached_(cls, name, **assumptions)",
    ".sympy.core.symbol.py@@Symbol._sanitize": "def _sanitize(assumptions, obj=None):\n    is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n    if is_commutative is None:\n        whose = '%s ' % obj.__name__ if obj else ''\n        raise ValueError('%scommutativity must be True or False.' % whose)\n    for key in list(assumptions.keys()):\n        from collections import defaultdict\n        from sympy.utilities.exceptions import SymPyDeprecationWarning\n        keymap = defaultdict(lambda: None)\n        keymap.update({'bounded': 'finite', 'unbounded': 'infinite', 'infinitesimal': 'zero'})\n        if keymap[key]:\n            SymPyDeprecationWarning(feature='%s assumption' % key, useinstead='%s' % keymap[key], issue=8071, deprecated_since_version='0.7.6').warn()\n            assumptions[keymap[key]] = assumptions[key]\n            assumptions.pop(key)\n            key = keymap[key]\n        v = assumptions[key]\n        if v is None:\n            assumptions.pop(key)\n            continue\n        assumptions[key] = bool(v)",
    ".sympy.core.logic.py@@fuzzy_bool": "def fuzzy_bool(x):\n    if x is None:\n        return None\n    if x in (True, False):\n        return bool(x)",
    ".sympy.core.symbol.py@@Symbol.__new_stage2__": "def __new_stage2__(cls, name, **assumptions):\n    if not isinstance(name, string_types):\n        raise TypeError('name should be a string, not %s' % repr(type(name)))\n    obj = Expr.__new__(cls)\n    obj.name = name\n    tmp_asm_copy = assumptions.copy()\n    is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n    assumptions['commutative'] = is_commutative\n    obj._assumptions = StdFactKB(assumptions)\n    obj._assumptions._generator = tmp_asm_copy\n    return obj",
    ".sympy.core.assumptions.py@@StdFactKB.__init__": "def __init__(self, facts=None):\n    if not facts:\n        self._generator = {}\n    elif not isinstance(facts, FactKB):\n        self._generator = facts.copy()\n    else:\n        self._generator = facts.generator\n    if facts:\n        self.deduce_all_facts(facts)",
    ".sympy.core.facts.py@@FactKB.deduce_all_facts": "def deduce_all_facts(self, facts):\n    full_implications = self.rules.full_implications\n    beta_triggers = self.rules.beta_triggers\n    beta_rules = self.rules.beta_rules\n    if isinstance(facts, dict):\n        facts = facts.items()\n    while facts:\n        beta_maytrigger = set()\n        for k, v in facts:\n            if not self._tell(k, v) or v is None:\n                continue\n            for key, value in full_implications[k, v]:\n                self._tell(key, value)\n            beta_maytrigger.update(beta_triggers[k, v])\n        facts = []\n        for bidx in beta_maytrigger:\n            bcond, bimpl = beta_rules[bidx]\n            if all((self.get(k) is v for k, v in bcond)):\n                facts.append(bimpl)",
    ".sympy.core.facts.py@@FactKB._tell": "def _tell(self, k, v):\n    if k in self and self[k] is not None:\n        if self[k] == v:\n            return False\n        else:\n            raise InconsistentAssumptions(self, k, v)\n    else:\n        self[k] = v\n        return True",
    ".sympy.core.symbol.py@@Symbol._hashable_content": "def _hashable_content(self):\n    return (self.name,) + tuple(sorted(self.assumptions0.items()))",
    ".sympy.core.symbol.py@@Symbol.assumptions0": "def assumptions0(self):\n    return dict(((key, value) for key, value in self._assumptions.items() if value is not None))",
    ".sympy.core.basic.py@@Basic.func": "def func(self):\n    return self.__class__",
    ".sympy.core.function.py@@Derivative.__new__": "def __new__(cls, expr, *variables, **assumptions):\n    expr = sympify(expr)\n    if not variables:\n        variables = expr.free_symbols\n        if len(variables) != 1:\n            if expr.is_number:\n                return S.Zero\n            from sympy.utilities.misc import filldedent\n            if len(variables) == 0:\n                raise ValueError(filldedent('\\n                    Since there are no variables in the expression,\\n                    the variable(s) of differentiation must be supplied\\n                    to differentiate %s' % expr))\n            else:\n                raise ValueError(filldedent('\\n                    Since there is more than one variable in the\\n                    expression, the variable(s) of differentiation\\n                    must be supplied to differentiate %s' % expr))\n    variables = list(sympify(variables))\n    if not variables[-1].is_Integer or len(variables) == 1:\n        variables.append(S.One)\n    variable_count = []\n    all_zero = True\n    i = 0\n    while i < len(variables) - 1:\n        v, count = variables[i:i + 2]\n        iwas = i\n        if v._diff_wrt:\n            if count.is_Integer:\n                count = int(count)\n                i += 2\n            elif count._diff_wrt:\n                count = 1\n                i += 1\n        if i == iwas:\n            from sympy.utilities.misc import filldedent\n            last_digit = int(str(count)[-1])\n            ordinal = 'st' if last_digit == 1 else 'nd' if last_digit == 2 else 'rd' if last_digit == 3 else 'th'\n            raise ValueError(filldedent(\"\\n            Can't calculate %s%s derivative wrt %s.\" % (count, ordinal, v)))\n        if all_zero and (not count == 0):\n            all_zero = False\n        if count:\n            variable_count.append((v, count))\n    if all_zero:\n        return expr\n    evaluate = assumptions.pop('evaluate', False)\n    if evaluate and all((isinstance(sc[0], Symbol) for sc in variable_count)):\n        symbol_set = set((sc[0] for sc in variable_count))\n        if symbol_set.difference(expr.free_symbols):\n            return S.Zero\n    variablegen = (v for v, count in variable_count for i in range(count))\n    if not (hasattr(expr, '_eval_derivative') and evaluate) and (not isinstance(expr, Derivative)):\n        variables = list(variablegen)\n        if evaluate:\n            variables = cls._sort_variables(variables)\n        obj = Expr.__new__(cls, expr, *variables, **assumptions)\n        return obj\n    unhandled_variables = []\n    unhandled_non_symbol = False\n    nderivs = 0\n    for v in variablegen:\n        is_symbol = v.is_Symbol\n        if unhandled_non_symbol:\n            obj = None\n        else:\n            if not is_symbol:\n                new_v = Dummy('xi_%i' % i)\n                new_v.dummy_index = hash(v)\n                expr = expr.xreplace({v: new_v})\n                old_v = v\n                v = new_v\n            obj = expr._eval_derivative(v)\n            nderivs += 1\n            if not is_symbol:\n                if obj is not None:\n                    if not old_v.is_Symbol and obj.is_Derivative:\n                        obj = Subs(obj, v, old_v)\n                    else:\n                        obj = obj.xreplace({v: old_v})\n                v = old_v\n        if obj is None:\n            unhandled_variables.append(v)\n            if not is_symbol:\n                unhandled_non_symbol = True\n        elif obj is S.Zero:\n            return S.Zero\n        else:\n            expr = obj\n    if unhandled_variables:\n        unhandled_variables = cls._sort_variables(unhandled_variables)\n        expr = Expr.__new__(cls, expr, *unhandled_variables, **assumptions)\n    elif isinstance(expr, Derivative):\n        expr = cls(expr.args[0], *cls._sort_variables(expr.args[1:]))\n    if nderivs > 1 and assumptions.get('simplify', True):\n        from sympy.core.exprtools import factor_terms\n        from sympy.simplify.simplify import signsimp\n        expr = factor_terms(signsimp(expr))\n    return expr",
    ".sympy.core.containers.py@@Tuple.__new__": "def __new__(cls, *args):\n    args = [sympify(arg) for arg in args]\n    obj = Basic.__new__(cls, *args)\n    return obj",
    ".sympy.core.containers.py@@Tuple.__len__": "def __len__(self):\n    return len(self.args)",
    ".sympy.core.containers.py@@Tuple.__iter__": "def __iter__(self):\n    return iter(self.args)",
    ".sympy.core.symbol.py@@Symbol._diff_wrt": "def _diff_wrt(self):\n    return True",
    ".sympy.core.sympify.py@@_sympify": "def _sympify(a):\n    return sympify(a, strict=True)",
    ".sympy.core.operations.py@@AssocOp.__new__": "def __new__(cls, *args, **options):\n    from sympy import Order\n    args = list(map(_sympify, args))\n    args = [a for a in args if a is not cls.identity]\n    if not options.pop('evaluate', global_evaluate[0]):\n        return cls._from_args(args)\n    if len(args) == 0:\n        return cls.identity\n    if len(args) == 1:\n        return args[0]\n    c_part, nc_part, order_symbols = cls.flatten(args)\n    is_commutative = not nc_part\n    obj = cls._from_args(c_part + nc_part, is_commutative)\n    if order_symbols is not None:\n        return Order(obj, *order_symbols)\n    return obj",
    ".sympy.core.add.py@@Add.flatten": "def flatten(cls, seq):\n    from sympy.calculus.util import AccumBounds\n    rv = None\n    if len(seq) == 2:\n        a, b = seq\n        if b.is_Rational:\n            a, b = (b, a)\n        if a.is_Rational:\n            if b.is_Mul:\n                rv = ([a, b], [], None)\n        if rv:\n            if all((s.is_commutative for s in rv[0])):\n                return rv\n            return ([], rv[0], None)\n    terms = {}\n    coeff = S.Zero\n    order_factors = []\n    for o in seq:\n        if o.is_Order:\n            for o1 in order_factors:\n                if o1.contains(o):\n                    o = None\n                    break\n            if o is None:\n                continue\n            order_factors = [o] + [o1 for o1 in order_factors if not o.contains(o1)]\n            continue\n        elif o.is_Number:\n            if o is S.NaN or (coeff is S.ComplexInfinity and o.is_finite is False):\n                return ([S.NaN], [], None)\n            if coeff.is_Number:\n                coeff += o\n                if coeff is S.NaN:\n                    return ([S.NaN], [], None)\n            continue\n        elif isinstance(o, AccumBounds):\n            coeff = o.__add__(coeff)\n            continue\n        elif o is S.ComplexInfinity:\n            if coeff.is_finite is False:\n                return ([S.NaN], [], None)\n            coeff = S.ComplexInfinity\n            continue\n        elif o.is_Add:\n            seq.extend(o.args)\n            continue\n        elif o.is_Mul:\n            c, s = o.as_coeff_Mul()\n        elif o.is_Pow:\n            b, e = o.as_base_exp()\n            if b.is_Number and (e.is_Integer or (e.is_Rational and e.is_negative)):\n                seq.append(b ** e)\n                continue\n            c, s = (S.One, o)\n        else:\n            c = S.One\n            s = o\n        if s in terms:\n            terms[s] += c\n            if terms[s] is S.NaN:\n                return ([S.NaN], [], None)\n        else:\n            terms[s] = c\n    newseq = []\n    noncommutative = False\n    for s, c in terms.items():\n        if c is S.Zero:\n            continue\n        elif c is S.One:\n            newseq.append(s)\n        elif s.is_Mul:\n            cs = s._new_rawargs(*(c,) + s.args)\n            newseq.append(cs)\n        elif s.is_Add:\n            newseq.append(Mul(c, s, evaluate=False))\n        else:\n            newseq.append(Mul(c, s))\n        noncommutative = noncommutative or not s.is_commutative\n    if coeff is S.Infinity:\n        newseq = [f for f in newseq if not (f.is_nonnegative or (f.is_real and f.is_finite))]\n    elif coeff is S.NegativeInfinity:\n        newseq = [f for f in newseq if not (f.is_nonpositive or (f.is_real and f.is_finite))]\n    if coeff is S.ComplexInfinity:\n        newseq = [c for c in newseq if not (c.is_finite and c.is_real is not None)]\n    if order_factors:\n        newseq2 = []\n        for t in newseq:\n            for o in order_factors:\n                if o.contains(t):\n                    t = None\n                    break\n            if t is not None:\n                newseq2.append(t)\n        newseq = newseq2 + order_factors\n        for o in order_factors:\n            if o.contains(coeff):\n                coeff = S.Zero\n                break\n    _addsort(newseq)\n    if coeff is not S.Zero:\n        newseq.insert(0, coeff)\n    if noncommutative:\n        return ([], newseq, None)\n    else:\n        return (newseq, [], None)",
    ".sympy.core.assumptions.py@@StdFactKB.copy": "def copy(self):\n    return self.__class__(self)",
    ".sympy.core.assumptions.py@@_ask": "def _ask(fact, obj):\n    assumptions = obj._assumptions\n    handler_map = obj._prop_handler\n    assumptions._tell(fact, None)\n    try:\n        evaluate = handler_map[fact]\n    except KeyError:\n        pass\n    else:\n        a = evaluate(obj)\n        if a is not None:\n            assumptions.deduce_all_facts(((fact, a),))\n            return a\n    prereq = list(_assume_rules.prereq[fact])\n    shuffle(prereq)\n    for pk in prereq:\n        if pk in assumptions:\n            continue\n        if pk in handler_map:\n            _ask(pk, obj)\n            ret_val = assumptions.get(fact)\n            if ret_val is not None:\n                return ret_val\n    return None",
    ".sympy.core.function.py@@Derivative._eval_is_commutative": "def _eval_is_commutative(self):\n    return self.expr.is_commutative",
    ".sympy.core.function.py@@Derivative.expr": "def expr(self):\n    return self._args[0]",
    ".sympy.core.add.py@@_addsort": "def _addsort(args):\n    args.sort(key=_args_sortkey)",
    ".sympy.core.basic.py@@Basic.compare": "def compare(self, other):\n    if self is other:\n        return 0\n    n1 = self.__class__\n    n2 = other.__class__\n    c = (n1 > n2) - (n1 < n2)\n    if c:\n        return c\n    st = self._hashable_content()\n    ot = other._hashable_content()\n    c = (len(st) > len(ot)) - (len(st) < len(ot))\n    if c:\n        return c\n    for l, r in zip(st, ot):\n        l = Basic(*l) if isinstance(l, frozenset) else l\n        r = Basic(*r) if isinstance(r, frozenset) else r\n        if isinstance(l, Basic):\n            c = l.compare(r)\n        else:\n            c = (l > r) - (l < r)\n        if c:\n            return c\n    return 0",
    ".sympy.core.core.py@@BasicMeta.__gt__": "def __gt__(cls, other):\n    if cls.__cmp__(other) == 1:\n        return True\n    return False",
    ".sympy.core.core.py@@BasicMeta.__cmp__": "def __cmp__(cls, other):\n    if not isinstance(other, BasicMeta):\n        return -1\n    n1 = cls.__name__\n    n2 = other.__name__\n    if n1 == n2:\n        return 0\n    UNKNOWN = len(ordering_of_classes) + 1\n    try:\n        i1 = ordering_of_classes.index(n1)\n    except ValueError:\n        i1 = UNKNOWN\n    try:\n        i2 = ordering_of_classes.index(n2)\n    except ValueError:\n        i2 = UNKNOWN\n    if i1 == UNKNOWN and i2 == UNKNOWN:\n        return (n1 > n2) - (n1 < n2)\n    return (i1 > i2) - (i1 < i2)",
    ".sympy.core.core.py@@BasicMeta.__lt__": "def __lt__(cls, other):\n    if cls.__cmp__(other) == -1:\n        return True\n    return False",
    ".sympy.core.operations.py@@AssocOp._from_args": "def _from_args(cls, args, is_commutative=None):\n    if len(args) == 0:\n        return cls.identity\n    elif len(args) == 1:\n        return args[0]\n    obj = super(AssocOp, cls).__new__(cls, *args)\n    if is_commutative is None:\n        is_commutative = fuzzy_and((a.is_commutative for a in args))\n    obj.is_commutative = is_commutative\n    return obj",
    ".sympy.simplify.cse_main.py@@postprocess_for_cse": "def postprocess_for_cse(expr, optimizations):\n    for pre, post in reversed(optimizations):\n        if post is not None:\n            expr = post(expr)\n    return expr",
    ".sympy.core.compatibility.py@@default_sort_key": "def default_sort_key(item, order=None):\n    from .singleton import S\n    from .basic import Basic\n    from .sympify import sympify, SympifyError\n    from .compatibility import iterable\n    if isinstance(item, Basic):\n        return item.sort_key(order=order)\n    if iterable(item, exclude=string_types):\n        if isinstance(item, dict):\n            args = item.items()\n            unordered = True\n        elif isinstance(item, set):\n            args = item\n            unordered = True\n        else:\n            args = list(item)\n            unordered = False\n        args = [default_sort_key(arg, order=order) for arg in args]\n        if unordered:\n            args = sorted(args)\n        cls_index, args = (10, (len(args), tuple(args)))\n    else:\n        if not isinstance(item, string_types):\n            try:\n                item = sympify(item)\n            except SympifyError:\n                pass\n            else:\n                if isinstance(item, Basic):\n                    return default_sort_key(item)\n        cls_index, args = (0, (1, (str(item),)))\n    return ((cls_index, 0, item.__class__.__name__), args, S.One.sort_key(), S.One)",
    ".sympy.core.expr.py@@Expr.sort_key": "def sort_key(self, order=None):\n    coeff, expr = self.as_coeff_Mul()\n    if expr.is_Pow:\n        expr, exp = expr.args\n    else:\n        expr, exp = (expr, S.One)\n    if expr.is_Dummy:\n        args = (expr.sort_key(),)\n    elif expr.is_Atom:\n        args = (str(expr),)\n    else:\n        if expr.is_Add:\n            args = expr.as_ordered_terms(order=order)\n        elif expr.is_Mul:\n            args = expr.as_ordered_factors(order=order)\n        else:\n            args = expr.args\n        args = tuple([default_sort_key(arg, order=order) for arg in args])\n    args = (len(args), tuple(args))\n    exp = exp.sort_key(order=order)\n    return (expr.class_key(), args, exp, coeff)",
    ".sympy.core.symbol.py@@Symbol.sort_key": "def sort_key(self, order=None):\n    return (self.class_key(), (1, (str(self),)), S.One.sort_key(), S.One)",
    ".sympy.core.basic.py@@Atom.class_key": "def class_key(cls):\n    return (2, 0, cls.__name__)",
    ".sympy.core.basic.py@@Basic.__str__": "def __str__(self):\n    from sympy.printing import sstr\n    return sstr(self, order=None)",
    ".sympy.printing.str.py@@sstr": "def sstr(expr, **settings):\n    p = StrPrinter(settings)\n    s = p.doprint(expr)\n    return s",
    ".sympy.printing.printer.py@@Printer.__init__": "def __init__(self, settings=None):\n    self._str = str\n    self._settings = self._default_settings.copy()\n    for key, val in self._global_settings.items():\n        if key in self._default_settings:\n            self._settings[key] = val\n    if settings is not None:\n        self._settings.update(settings)\n        if len(self._settings) > len(self._default_settings):\n            for key in self._settings:\n                if key not in self._default_settings:\n                    raise TypeError(\"Unknown setting '%s'.\" % key)\n    self._print_level = 0",
    ".sympy.printing.printer.py@@Printer.doprint": "def doprint(self, expr):\n    return self._str(self._print(expr))",
    ".sympy.printing.printer.py@@Printer._print": "def _print(self, expr, *args, **kwargs):\n    self._print_level += 1\n    try:\n        if self.printmethod and hasattr(expr, self.printmethod) and (not isinstance(expr, BasicMeta)):\n            return getattr(expr, self.printmethod)(self, *args, **kwargs)\n        for cls in type(expr).__mro__:\n            printmethod = '_print_' + cls.__name__\n            if hasattr(self, printmethod):\n                return getattr(self, printmethod)(expr, *args, **kwargs)\n        return self.emptyPrinter(expr)\n    finally:\n        self._print_level -= 1",
    ".sympy.printing.str.py@@StrPrinter._print_Symbol": "def _print_Symbol(self, expr):\n    return expr.name",
    ".sympy.core.numbers.py@@Number.sort_key": "def sort_key(self, order=None):\n    return (self.class_key(), (0, ()), (), self)",
    ".sympy.core.numbers.py@@Number.class_key": "def class_key(cls):\n    return (1, 0, 'Number')",
    ".sympy.core.function.py@@Function.class_key": "def class_key(cls):\n    from sympy.sets.fancysets import Naturals0\n    funcs = {'exp': 10, 'log': 11, 'sin': 20, 'cos': 21, 'tan': 22, 'cot': 23, 'sinh': 30, 'cosh': 31, 'tanh': 32, 'coth': 33, 'conjugate': 40, 're': 41, 'im': 42, 'arg': 43}\n    name = cls.__name__\n    try:\n        i = funcs[name]\n    except KeyError:\n        i = 0 if isinstance(cls.nargs, Naturals0) else 10000\n    return (4, i, name)",
    ".sympy.core.basic.py@@Basic.class_key": "def class_key(cls):\n    return (5, 0, cls.__name__)",
    ".sympy.core.numbers.py@@Integer.__hash__": "def __hash__(self):\n    return hash(self.p)",
    ".sympy.core.power.py@@Pow.exp": "def exp(self):\n    return self._args[1]",
    ".sympy.core.expr.py@@Expr.as_ordered_terms": "def as_ordered_terms(self, order=None, data=False):\n    key, reverse = self._parse_order(order)\n    terms, gens = self.as_terms()\n    if not any((term.is_Order for term, _ in terms)):\n        ordered = sorted(terms, key=key, reverse=reverse)\n    else:\n        _terms, _order = ([], [])\n        for term, repr in terms:\n            if not term.is_Order:\n                _terms.append((term, repr))\n            else:\n                _order.append((term, repr))\n        ordered = sorted(_terms, key=key, reverse=True) + sorted(_order, key=key, reverse=True)\n    if data:\n        return (ordered, gens)\n    else:\n        return [term for term, _ in ordered]",
    ".sympy.core.expr.py@@Expr._parse_order": "def _parse_order(cls, order):\n    from sympy.polys.orderings import monomial_key\n    try:\n        reverse = order.startswith('rev-')\n    except AttributeError:\n        reverse = False\n    else:\n        if reverse:\n            order = order[4:]\n    monom_key = monomial_key(order)\n\n    def neg(monom):\n        result = []\n        for m in monom:\n            if isinstance(m, tuple):\n                result.append(neg(m))\n            else:\n                result.append(-m)\n        return tuple(result)\n\n    def key(term):\n        _, ((re, im), monom, ncpart) = term\n        monom = neg(monom_key(monom))\n        ncpart = tuple([e.sort_key(order=order) for e in ncpart])\n        coeff = ((bool(im), im), (re, im))\n        return (monom, ncpart, coeff)\n    return (key, reverse)",
    ".sympy.polys.orderings.py@@monomial_key": "def monomial_key(order=None, gens=None):\n    if order is None:\n        order = lex\n    if isinstance(order, Symbol):\n        order = str(order)\n    if isinstance(order, str):\n        try:\n            order = _monomial_key[order]\n        except KeyError:\n            raise ValueError(\"supported monomial orderings are 'lex', 'grlex' and 'grevlex', got %r\" % order)\n    if hasattr(order, '__call__'):\n        if gens is not None:\n\n            def _order(expr):\n                return order(expr.as_poly(*gens).degree_list())\n            return _order\n        return order\n    else:\n        raise ValueError('monomial ordering specification must be a string or a callable, got %s' % order)",
    ".sympy.core.expr.py@@Expr.as_terms": "def as_terms(self):\n    from .add import Add\n    from .mul import Mul\n    from .exprtools import decompose_power\n    gens, terms = (set([]), [])\n    for term in Add.make_args(self):\n        coeff, _term = term.as_coeff_Mul()\n        coeff = complex(coeff)\n        cpart, ncpart = ({}, [])\n        if _term is not S.One:\n            for factor in Mul.make_args(_term):\n                if factor.is_number:\n                    try:\n                        coeff *= complex(factor)\n                    except TypeError:\n                        pass\n                    else:\n                        continue\n                if factor.is_commutative:\n                    base, exp = decompose_power(factor)\n                    cpart[base] = exp\n                    gens.add(base)\n                else:\n                    ncpart.append(factor)\n        coeff = (coeff.real, coeff.imag)\n        ncpart = tuple(ncpart)\n        terms.append((term, (coeff, cpart, ncpart)))\n    gens = sorted(gens, key=default_sort_key)\n    k, indices = (len(gens), {})\n    for i, g in enumerate(gens):\n        indices[g] = i\n    result = []\n    for term, (coeff, cpart, ncpart) in terms:\n        monom = [0] * k\n        for base, exp in cpart.items():\n            monom[indices[base]] = exp\n        result.append((term, (coeff, tuple(monom), ncpart)))\n    return (result, gens)",
    ".sympy.core.operations.py@@AssocOp.make_args": "def make_args(cls, expr):\n    if isinstance(expr, cls):\n        return expr.args\n    else:\n        return (sympify(expr),)",
    ".sympy.core.expr.py@@Expr.__complex__": "def __complex__(self):\n    result = self.evalf()\n    re, im = result.as_real_imag()\n    return complex(float(re), float(im))",
    ".sympy.core.evalf.py@@EvalfMixin.evalf": "def evalf(self, n=15, subs=None, maxn=100, chop=False, strict=False, quad=None, verbose=False):\n    from sympy import Float, Number\n    n = n if n is not None else 15\n    if subs and is_sequence(subs):\n        raise TypeError('subs must be given as a dictionary')\n    if n == 1 and isinstance(self, Number):\n        from sympy.core.expr import _mag\n        rv = self.evalf(2, subs, maxn, chop, strict, quad, verbose)\n        m = _mag(rv)\n        rv = rv.round(1 - m)\n        return rv\n    if not evalf_table:\n        _create_evalf_table()\n    prec = dps_to_prec(n)\n    options = {'maxprec': max(prec, int(maxn * LG10)), 'chop': chop, 'strict': strict, 'verbose': verbose}\n    if subs is not None:\n        options['subs'] = subs\n    if quad is not None:\n        options['quad'] = quad\n    try:\n        result = evalf(self, prec + 4, options)\n    except NotImplementedError:\n        v = self._eval_evalf(prec)\n        if v is None:\n            return self\n        try:\n            result = evalf(v, prec, options)\n        except NotImplementedError:\n            return v\n    re, im, re_acc, im_acc = result\n    if re:\n        p = max(min(prec, re_acc), 1)\n        re = Float._new(re, p)\n    else:\n        re = S.Zero\n    if im:\n        p = max(min(prec, im_acc), 1)\n        im = Float._new(im, p)\n        return re + im * S.ImaginaryUnit\n    else:\n        return re",
    ".sympy.core.evalf.py@@evalf": "def evalf(x, prec, options):\n    from sympy import re as re_, im as im_\n    try:\n        rf = evalf_table[x.func]\n        r = rf(x, prec, options)\n    except KeyError:\n        try:\n            if 'subs' in options:\n                x = x.subs(evalf_subs(prec, options['subs']))\n            xe = x._eval_evalf(prec)\n            re, im = xe.as_real_imag()\n            if re.has(re_) or im.has(im_):\n                raise NotImplementedError\n            if re == 0:\n                re = None\n                reprec = None\n            elif re.is_number:\n                re = re._to_mpmath(prec, allow_ints=False)._mpf_\n                reprec = prec\n            if im == 0:\n                im = None\n                imprec = None\n            elif im.is_number:\n                im = im._to_mpmath(prec, allow_ints=False)._mpf_\n                imprec = prec\n            r = (re, im, reprec, imprec)\n        except AttributeError:\n            raise NotImplementedError\n    if options.get('verbose'):\n        print('### input', x)\n        print('### output', to_str(r[0] or fzero, 50))\n        print('### raw', r)\n        print()\n    chop = options.get('chop', False)\n    if chop:\n        if chop is True:\n            chop_prec = prec\n        else:\n            chop_prec = int(round(-3.321 * math.log10(chop) + 2.5))\n            if chop_prec == 3:\n                chop_prec -= 1\n        r = chop_parts(r, chop_prec)\n    if options.get('strict'):\n        check_target(x, r, prec)\n    return r",
    ".sympy.core.numbers.py@@Float._new": "def _new(cls, _mpf_, _prec):\n    if _mpf_ == _mpf_zero:\n        return S.Zero\n    elif _mpf_ == _mpf_nan:\n        return S.NaN\n    obj = Expr.__new__(cls)\n    obj._mpf_ = mpf_norm(_mpf_, _prec)\n    obj._prec = _prec\n    return obj",
    ".sympy.core.numbers.py@@mpf_norm": "def mpf_norm(mpf, prec):\n    sign, man, expt, bc = mpf\n    if not man:\n        if not bc:\n            return _mpf_zero\n        else:\n            return mpf\n    rv = mpf_normalize(sign, man, expt, bc, prec, rnd)\n    return rv",
    ".sympy.core.expr.py@@Expr.as_real_imag": "def as_real_imag(self, deep=True, **hints):\n    from sympy import im, re\n    if hints.get('ignore') == self:\n        return None\n    else:\n        return (re(self), im(self))",
    ".sympy.core.numbers.py@@Float.__eq__": "def __eq__(self, other):\n    if isinstance(other, float):\n        o = Float(other)\n        try:\n            ompf = o._as_mpf_val(self._prec)\n        except ValueError:\n            return False\n        return bool(mlib.mpf_eq(self._mpf_, ompf))\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return False\n    if isinstance(other, NumberSymbol):\n        if other.is_irrational:\n            return False\n        return other.__eq__(self)\n    if isinstance(other, Float):\n        return bool(mlib.mpf_eq(self._mpf_, other._mpf_))\n    if isinstance(other, Number):\n        ompf = other._as_mpf_val(self._prec)\n        return bool(mlib.mpf_eq(self._mpf_, ompf))\n    return False",
    ".sympy.core.sympify.py@@SympifyError.__init__": "def __init__(self, expr, base_exc=None):\n    self.expr = expr\n    self.base_exc = base_exc",
    ".sympy.sets.sets.py@@FiniteSet.__new__": "def __new__(cls, *args, **kwargs):\n    evaluate = kwargs.get('evaluate', global_evaluate[0])\n    if evaluate:\n        args = list(map(sympify, args))\n        if len(args) == 0:\n            return EmptySet()\n    else:\n        args = list(map(sympify, args))\n    args = list(ordered(frozenset(tuple(args)), Set._infimum_key))\n    obj = Basic.__new__(cls, *args)\n    obj._elements = frozenset(args)\n    return obj",
    ".sympy.sets.sets.py@@Set._infimum_key": "def _infimum_key(expr):\n    try:\n        infimum = expr.inf\n        assert infimum.is_comparable\n    except (NotImplementedError, AttributeError, AssertionError, ValueError):\n        infimum = S.Infinity\n    return infimum",
    ".sympy.core.numbers.py@@Infinity.__hash__": "def __hash__(self):\n    return super(Infinity, self).__hash__()",
    ".sympy.core.numbers.py@@Number.__hash__": "def __hash__(self):\n    return super(Number, self).__hash__()",
    ".sympy.sets.sets.py@@FiniteSet._contains": "def _contains(self, other):\n    r = false\n    for e in self._elements:\n        t = Eq(e, other, evaluate=True)\n        if isinstance(t, Eq):\n            t = t.simplify()\n        if t == true:\n            return t\n        elif t != false:\n            r = None\n    return r",
    ".sympy.core.relational.py@@Equality.__new__": "def __new__(cls, lhs, rhs=0, **options):\n    from sympy.core.add import Add\n    from sympy.core.logic import fuzzy_bool\n    from sympy.simplify.simplify import clear_coefficients\n    lhs = _sympify(lhs)\n    rhs = _sympify(rhs)\n    evaluate = options.pop('evaluate', global_evaluate[0])\n    if evaluate:\n        if hasattr(lhs, '_eval_Eq'):\n            r = lhs._eval_Eq(rhs)\n            if r is not None:\n                return r\n        if hasattr(rhs, '_eval_Eq'):\n            r = rhs._eval_Eq(lhs)\n            if r is not None:\n                return r\n        if lhs == rhs:\n            return S.true\n        elif all((isinstance(i, BooleanAtom) for i in (rhs, lhs))):\n            return S.false\n        fin = L, R = [i.is_finite for i in (lhs, rhs)]\n        if None not in fin:\n            if L != R:\n                return S.false\n            if L is False:\n                return S.true\n        if all((isinstance(i, Expr) for i in (lhs, rhs))):\n            dif = lhs - rhs\n            z = dif.is_zero\n            if z is not None:\n                if z is False and dif.is_commutative:\n                    return S.false\n                if z:\n                    return S.true\n            n, d = dif.as_numer_denom()\n            rv = None\n            if n.is_zero:\n                rv = d.is_nonzero\n            elif n.is_finite:\n                if d.is_infinite:\n                    rv = S.true\n                elif n.is_zero is False:\n                    rv = d.is_infinite\n                    if rv is None:\n                        l, r = clear_coefficients(d, S.Infinity)\n                        args = [_.subs(l, r) for _ in (lhs, rhs)]\n                        if args != [lhs, rhs]:\n                            rv = fuzzy_bool(Eq(*args))\n                            if rv is True:\n                                rv = None\n            elif any((a.is_infinite for a in Add.make_args(n))):\n                rv = S.false\n            if rv is not None:\n                return _sympify(rv)\n    return Relational.__new__(cls, lhs, rhs, **options)",
    ".sympy.core.numbers.py@@Float.__hash__": "def __hash__(self):\n    return super(Float, self).__hash__()",
    ".sympy.core.numbers.py@@Float._hashable_content": "def _hashable_content(self):\n    return (self._mpf_, self._prec)",
    ".sympy.functions.elementary.complexes.py@@re.eval": "def eval(cls, arg):\n    if arg is S.NaN:\n        return S.NaN\n    elif arg is S.ComplexInfinity:\n        return S.NaN\n    elif arg.is_real:\n        return arg\n    elif arg.is_imaginary or (S.ImaginaryUnit * arg).is_real:\n        return S.Zero\n    elif arg.is_Function and arg.func is conjugate:\n        return re(arg.args[0])\n    else:\n        included, reverted, excluded = ([], [], [])\n        args = Add.make_args(arg)\n        for term in args:\n            coeff = term.as_coefficient(S.ImaginaryUnit)\n            if coeff is not None:\n                if not coeff.is_real:\n                    reverted.append(coeff)\n            elif not term.has(S.ImaginaryUnit) and term.is_real:\n                excluded.append(term)\n            else:\n                real_imag = term.as_real_imag(ignore=arg)\n                if real_imag:\n                    excluded.append(real_imag[0])\n                else:\n                    included.append(term)\n        if len(args) != len(included):\n            a, b, c = (Add(*xs) for xs in [included, reverted, excluded])\n            return cls(a) - im(b) + c",
    ".sympy.functions.elementary.complexes.py@@im.eval": "def eval(cls, arg):\n    if arg is S.NaN:\n        return S.NaN\n    elif arg is S.ComplexInfinity:\n        return S.NaN\n    elif arg.is_real:\n        return S.Zero\n    elif arg.is_imaginary or (S.ImaginaryUnit * arg).is_real:\n        return -S.ImaginaryUnit * arg\n    elif arg.is_Function and arg.func is conjugate:\n        return -im(arg.args[0])\n    else:\n        included, reverted, excluded = ([], [], [])\n        args = Add.make_args(arg)\n        for term in args:\n            coeff = term.as_coefficient(S.ImaginaryUnit)\n            if coeff is not None:\n                if not coeff.is_real:\n                    reverted.append(coeff)\n                else:\n                    excluded.append(coeff)\n            elif term.has(S.ImaginaryUnit) or not term.is_real:\n                real_imag = term.as_real_imag(ignore=arg)\n                if real_imag:\n                    excluded.append(real_imag[1])\n                else:\n                    included.append(term)\n        if len(args) != len(included):\n            a, b, c = (Add(*xs) for xs in [included, reverted, excluded])\n            return cls(a) + re(b) + c",
    ".sympy.core.numbers.py@@Number.__float__": "def __float__(self):\n    return mlib.to_float(self._as_mpf_val(53))",
    ".sympy.core.numbers.py@@Float._as_mpf_val": "def _as_mpf_val(self, prec):\n    rv = mpf_norm(self._mpf_, prec)\n    if rv != self._mpf_ and self._prec == prec:\n        debug(self._mpf_, rv)\n    return rv",
    ".sympy.core.numbers.py@@Integer._as_mpf_val": "def _as_mpf_val(self, prec):\n    return mlib.from_int(self.p, prec)",
    ".sympy.core.exprtools.py@@decompose_power": "def decompose_power(expr):\n    base, exp = expr.as_base_exp()\n    if exp.is_Number:\n        if exp.is_Rational:\n            if not exp.is_Integer:\n                base = Pow(base, Rational(1, exp.q))\n            exp = exp.p\n        else:\n            base, exp = (expr, 1)\n    else:\n        exp, tail = exp.as_coeff_Mul(rational=True)\n        if exp is S.NegativeOne:\n            base, exp = (Pow(base, tail), -1)\n        elif exp is not S.One:\n            tail = _keep_coeff(Rational(1, exp.q), tail)\n            base, exp = (Pow(base, tail), exp.p)\n        else:\n            base, exp = (expr, 1)\n    return (base, exp)",
    ".sympy.core.expr.py@@Expr.as_base_exp": "def as_base_exp(self):\n    return (self, S.One)",
    ".sympy.core.expr.py@@Expr.key": "def key(term):\n    _, ((re, im), monom, ncpart) = term\n    monom = neg(monom_key(monom))\n    ncpart = tuple([e.sort_key(order=order) for e in ncpart])\n    coeff = ((bool(im), im), (re, im))\n    return (monom, ncpart, coeff)",
    ".sympy.polys.orderings.py@@LexOrder.__call__": "def __call__(self, monomial):\n    return monomial",
    ".sympy.core.expr.py@@Expr.neg": "def neg(monom):\n    result = []\n    for m in monom:\n        if isinstance(m, tuple):\n            result.append(neg(m))\n        else:\n            result.append(-m)\n    return tuple(result)",
    ".sympy.core.add.py@@Add.class_key": "def class_key(cls):\n    return (3, 1, cls.__name__)",
    ".sympy.core.numbers.py@@Rational.__hash__": "def __hash__(self):\n    return super(Rational, self).__hash__()",
    ".sympy.core.numbers.py@@Rational.__eq__": "def __eq__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return False\n    if isinstance(other, NumberSymbol):\n        if other.is_irrational:\n            return False\n        return other.__eq__(self)\n    if isinstance(other, Number):\n        if isinstance(other, Rational):\n            return self.p == other.p and self.q == other.q\n        if isinstance(other, Float):\n            return mlib.mpf_eq(self._as_mpf_val(other._prec), other._mpf_)\n    return False",
    ".sympy.core.numbers.py@@Integer.__lt__": "def __lt__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s < %s' % (self, other))\n    if isinstance(other, Integer):\n        return _sympify(self.p < other.p)\n    return Rational.__lt__(self, other)",
    ".sympy.core.numbers.py@@Rational.__lt__": "def __lt__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s < %s' % (self, other))\n    if isinstance(other, NumberSymbol):\n        return other.__ge__(self)\n    expr = self\n    if isinstance(other, Number):\n        if isinstance(other, Rational):\n            return _sympify(bool(self.p * other.q < self.q * other.p))\n        if isinstance(other, Float):\n            return _sympify(bool(mlib.mpf_lt(self._as_mpf_val(other._prec), other._mpf_)))\n    elif other.is_number and other.is_real:\n        expr, other = (Integer(self.p), self.q * other)\n    return Expr.__lt__(expr, other)",
    ".sympy.logic.boolalg.py@@BooleanFalse.__nonzero__": "def __nonzero__(self):\n    return False",
    ".sympy.core.power.py@@Pow.__new__": "def __new__(cls, b, e, evaluate=None):\n    if evaluate is None:\n        evaluate = global_evaluate[0]\n    from sympy.functions.elementary.exponential import exp_polar\n    b = _sympify(b)\n    e = _sympify(e)\n    if evaluate:\n        if e is S.Zero:\n            return S.One\n        elif e is S.One:\n            return b\n        elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and e.is_integer and _coeff_isneg(b):\n            if e.is_even:\n                b = -b\n            elif e.is_odd:\n                return -Pow(-b, e)\n        if S.NaN in (b, e):\n            return S.NaN\n        elif b is S.One:\n            if abs(e).is_infinite:\n                return S.NaN\n            return S.One\n        else:\n            if not e.is_Atom and b is not S.Exp1 and (b.func is not exp_polar):\n                from sympy import numer, denom, log, sign, im, factor_terms\n                c, ex = factor_terms(e, sign=False).as_coeff_Mul()\n                den = denom(ex)\n                if den.func is log and den.args[0] == b:\n                    return S.Exp1 ** (c * numer(ex))\n                elif den.is_Add:\n                    s = sign(im(b))\n                    if s.is_Number and s and (den == log(-factor_terms(b, sign=False)) + s * S.ImaginaryUnit * S.Pi):\n                        return S.Exp1 ** (c * numer(ex))\n            obj = b._eval_power(e)\n            if obj is not None:\n                return obj\n    obj = Expr.__new__(cls, b, e)\n    obj.is_commutative = b.is_commutative and e.is_commutative\n    return obj",
    ".sympy.core.numbers.py@@NaN.__hash__": "def __hash__(self):\n    return super(NaN, self).__hash__()",
    ".sympy.core.expr.py@@Expr._eval_power": "def _eval_power(self, other):\n    return None",
    ".sympy.core.power.py@@Pow.as_base_exp": "def as_base_exp(self):\n    b, e = self.args\n    if b.is_Rational and b.p == 1 and (b.q != 1):\n        return (Integer(b.q), -e)\n    return (b, e)",
    ".sympy.matrices.dense.py@@MutableDenseMatrix.__new__": "def __new__(cls, *args, **kwargs):\n    return cls._new(*args, **kwargs)",
    ".sympy.matrices.dense.py@@MutableDenseMatrix._new": "def _new(cls, *args, **kwargs):\n    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)\n    self = object.__new__(cls)\n    self.rows = rows\n    self.cols = cols\n    self._mat = list(flat_list)\n    return self",
    ".sympy.matrices.matrices.py@@MatrixBase._handle_creation_inputs": "def _handle_creation_inputs(cls, *args, **kwargs):\n    from sympy.matrices.sparse import SparseMatrix\n    flat_list = None\n    if len(args) == 1:\n        if isinstance(args[0], SparseMatrix):\n            return (args[0].rows, args[0].cols, flatten(args[0].tolist()))\n        elif isinstance(args[0], MatrixBase):\n            return (args[0].rows, args[0].cols, args[0]._mat)\n        elif isinstance(args[0], Basic) and args[0].is_Matrix:\n            return (args[0].rows, args[0].cols, args[0].as_explicit()._mat)\n        elif hasattr(args[0], '__array__'):\n            arr = args[0].__array__()\n            if len(arr.shape) == 2:\n                rows, cols = (arr.shape[0], arr.shape[1])\n                flat_list = [cls._sympify(i) for i in arr.ravel()]\n                return (rows, cols, flat_list)\n            elif len(arr.shape) == 1:\n                rows, cols = (arr.shape[0], 1)\n                flat_list = [S.Zero] * rows\n                for i in range(len(arr)):\n                    flat_list[i] = cls._sympify(arr[i])\n                return (rows, cols, flat_list)\n            else:\n                raise NotImplementedError('SymPy supports just 1D and 2D matrices')\n        elif is_sequence(args[0]) and (not isinstance(args[0], DeferredVector)):\n            in_mat = []\n            ncol = set()\n            for row in args[0]:\n                if isinstance(row, MatrixBase):\n                    in_mat.extend(row.tolist())\n                    if row.cols or row.rows:\n                        ncol.add(row.cols)\n                else:\n                    in_mat.append(row)\n                    try:\n                        ncol.add(len(row))\n                    except TypeError:\n                        ncol.add(1)\n            if len(ncol) > 1:\n                raise ValueError('Got rows of variable lengths: %s' % sorted(list(ncol)))\n            cols = ncol.pop() if ncol else 0\n            rows = len(in_mat) if cols else 0\n            if rows:\n                if not is_sequence(in_mat[0]):\n                    cols = 1\n                    flat_list = [cls._sympify(i) for i in in_mat]\n                    return (rows, cols, flat_list)\n            flat_list = []\n            for j in range(rows):\n                for i in range(cols):\n                    flat_list.append(cls._sympify(in_mat[j][i]))\n    elif len(args) == 3:\n        rows = as_int(args[0])\n        cols = as_int(args[1])\n        if len(args) == 3 and isinstance(args[2], collections.Callable):\n            op = args[2]\n            flat_list = []\n            for i in range(rows):\n                flat_list.extend([cls._sympify(op(cls._sympify(i), cls._sympify(j))) for j in range(cols)])\n        elif len(args) == 3 and is_sequence(args[2]):\n            flat_list = args[2]\n            if len(flat_list) != rows * cols:\n                raise ValueError('List length should be equal to rows*columns')\n            flat_list = [cls._sympify(i) for i in flat_list]\n    elif len(args) == 0:\n        rows = cols = 0\n        flat_list = []\n    if flat_list is None:\n        raise TypeError('Data type not understood')\n    return (rows, cols, flat_list)",
    ".sympy.core.compatibility.py@@is_sequence": "def is_sequence(i, include=None):\n    return hasattr(i, '__getitem__') and iterable(i) or (bool(include) and isinstance(i, include))",
    ".sympy.core.basic.py@@Basic.sort_key": "def sort_key(self, order=None):\n\n    def inner_key(arg):\n        if isinstance(arg, Basic):\n            return arg.sort_key(order)\n        else:\n            return arg\n    args = self._sorted_args\n    args = (len(args), tuple([inner_key(arg) for arg in args]))\n    return (self.class_key(), args, S.One.sort_key(), S.One)",
    ".sympy.core.basic.py@@Basic._sorted_args": "def _sorted_args(self):\n    return self.args",
    ".sympy.core.basic.py@@Basic.inner_key": "def inner_key(arg):\n    if isinstance(arg, Basic):\n        return arg.sort_key(order)\n    else:\n        return arg",
    ".sympy.core.containers.py@@Tuple.__hash__": "def __hash__(self):\n    return hash(self.args)",
    ".sympy.functions.special.hyper.py@@meijerg.__new__": "def __new__(cls, *args):\n    if len(args) == 5:\n        args = [(args[0], args[1]), (args[2], args[3]), args[4]]\n    if len(args) != 3:\n        raise TypeError(\"args must be either as, as', bs, bs', z or as, bs, z\")\n\n    def tr(p):\n        if len(p) != 2:\n            raise TypeError('wrong argument')\n        return TupleArg(_prep_tuple(p[0]), _prep_tuple(p[1]))\n    arg0, arg1 = (tr(args[0]), tr(args[1]))\n    if Tuple(arg0, arg1).has(oo, zoo, -oo):\n        raise ValueError('G-function parameters must be finite')\n    if any(((a - b).is_Integer and a - b > 0 for a in arg0[0] for b in arg1[0])):\n        raise ValueError('no parameter a1, ..., an may differ from any b1, ..., bm by a positive integer')\n    return Function.__new__(cls, arg0, arg1, args[2])",
    ".sympy.functions.special.hyper.py@@meijerg.tr": "def tr(p):\n    if len(p) != 2:\n        raise TypeError('wrong argument')\n    return TupleArg(_prep_tuple(p[0]), _prep_tuple(p[1]))",
    ".sympy.core.containers.py@@Tuple.__getitem__": "def __getitem__(self, i):\n    if isinstance(i, slice):\n        indices = i.indices(len(self))\n        return Tuple(*[self.args[j] for j in range(*indices)])\n    return self.args[i]",
    ".sympy.functions.special.hyper.py@@_prep_tuple": "def _prep_tuple(v):\n    from sympy import unpolarify\n    return TupleArg(*[unpolarify(x) for x in v])",
    ".sympy.functions.elementary.complexes.py@@unpolarify": "def unpolarify(eq, subs={}, exponents_only=False):\n    if isinstance(eq, bool):\n        return eq\n    eq = sympify(eq)\n    if subs != {}:\n        return unpolarify(eq.subs(subs))\n    changed = True\n    pause = False\n    if exponents_only:\n        pause = True\n    while changed:\n        changed = False\n        res = _unpolarify(eq, exponents_only, pause)\n        if res != eq:\n            changed = True\n            eq = res\n        if isinstance(res, bool):\n            return res\n    return res.subs({exp_polar(0): 1, polar_lift(0): 0})",
    ".sympy.functions.elementary.complexes.py@@_unpolarify": "def _unpolarify(eq, exponents_only, pause=False):\n    if isinstance(eq, bool) or eq.is_Atom:\n        return eq\n    if not pause:\n        if eq.func is exp_polar:\n            return exp(_unpolarify(eq.exp, exponents_only))\n        if eq.func is principal_branch and eq.args[1] == 2 * pi:\n            return _unpolarify(eq.args[0], exponents_only)\n        if eq.is_Add or eq.is_Mul or eq.is_Boolean or (eq.is_Relational and (eq.rel_op in ('==', '!=') and 0 in eq.args or eq.rel_op not in ('==', '!='))):\n            return eq.func(*[_unpolarify(x, exponents_only) for x in eq.args])\n        if eq.func is polar_lift:\n            return _unpolarify(eq.args[0], exponents_only)\n    if eq.is_Pow:\n        expo = _unpolarify(eq.exp, exponents_only)\n        base = _unpolarify(eq.base, exponents_only, not (expo.is_integer and (not pause)))\n        return base ** expo\n    if eq.is_Function and getattr(eq.func, 'unbranched', False):\n        return eq.func(*[_unpolarify(x, exponents_only, exponents_only) for x in eq.args])\n    return eq.func(*[_unpolarify(x, exponents_only, True) for x in eq.args])",
    ".sympy.functions.elementary.complexes.py@@polar_lift.eval": "def eval(cls, arg):\n    from sympy import exp_polar, pi, I, arg as argument\n    if arg.is_number:\n        ar = argument(arg)\n        if ar in (0, pi / 2, -pi / 2, pi):\n            return exp_polar(I * ar) * abs(arg)\n    if arg.is_Mul:\n        args = arg.args\n    else:\n        args = [arg]\n    included = []\n    excluded = []\n    positive = []\n    for arg in args:\n        if arg.is_polar:\n            included += [arg]\n        elif arg.is_positive:\n            positive += [arg]\n        else:\n            excluded += [arg]\n    if len(excluded) < len(args):\n        if excluded:\n            return Mul(*included + positive) * polar_lift(Mul(*excluded))\n        elif included:\n            return Mul(*included + positive)\n        else:\n            return Mul(*positive) * exp_polar(0)",
    ".sympy.functions.elementary.complexes.py@@arg.eval": "def eval(cls, arg):\n    if not arg.is_Atom:\n        c, arg_ = factor_terms(arg).as_coeff_Mul()\n        if arg_.is_Mul:\n            arg_ = Mul(*[a if sign(a) not in (-1, 1) else sign(a) for a in arg_.args])\n        arg_ = sign(c) * arg_\n    else:\n        arg_ = arg\n    if arg_.atoms(AppliedUndef):\n        return\n    x, y = (re(arg_), im(arg_))\n    rv = atan2(y, x)\n    if rv.is_number:\n        return rv\n    if arg_ != arg:\n        return cls(arg_, evaluate=False)",
    ".sympy.functions.elementary.trigonometric.py@@atan2.eval": "def eval(cls, y, x):\n    from sympy import Heaviside, im, re\n    if x is S.NegativeInfinity:\n        if y.is_zero:\n            return S.Pi\n        return 2 * S.Pi * Heaviside(re(y)) - S.Pi\n    elif x is S.Infinity:\n        return S.Zero\n    elif x.is_imaginary and y.is_imaginary and x.is_number and y.is_number:\n        x = im(x)\n        y = im(y)\n    if x.is_real and y.is_real:\n        if x.is_positive:\n            return atan(y / x)\n        elif x.is_negative:\n            if y.is_negative:\n                return atan(y / x) - S.Pi\n            elif y.is_nonnegative:\n                return atan(y / x) + S.Pi\n        elif x.is_zero:\n            if y.is_positive:\n                return S.Pi / 2\n            elif y.is_negative:\n                return -S.Pi / 2\n            elif y.is_zero:\n                return S.NaN\n    if y.is_zero and x.is_real and fuzzy_not(x.is_zero):\n        return S.Pi * (S.One - Heaviside(x))\n    if x.is_number and y.is_number:\n        return -S.ImaginaryUnit * log((x + S.ImaginaryUnit * y) / sqrt(x ** 2 + y ** 2))",
    ".sympy.core.decorators.py@@__sympifyit_wrapper": "def __sympifyit_wrapper(a, b):\n    try:\n        if not hasattr(b, '_op_priority'):\n            b = sympify(b, strict=True)\n        return func(a, b)\n    except SympifyError:\n        return retval",
    ".sympy.core.decorators.py@@binary_op_wrapper": "def binary_op_wrapper(self, other):\n    if hasattr(other, '_op_priority'):\n        if other._op_priority > self._op_priority:\n            try:\n                f = getattr(other, method_name)\n            except AttributeError:\n                pass\n            else:\n                return f(self)\n    return func(self, other)",
    ".sympy.core.expr.py@@Expr.__div__": "def __div__(self, other):\n    return Mul(self, Pow(other, S.NegativeOne))",
    ".sympy.core.numbers.py@@Integer._eval_power": "def _eval_power(self, expt):\n    from sympy import perfect_power\n    if expt is S.Infinity:\n        if self.p > S.One:\n            return S.Infinity\n        return S.Infinity + S.ImaginaryUnit * S.Infinity\n    if expt is S.NegativeInfinity:\n        return Rational(1, self) ** S.Infinity\n    if not isinstance(expt, Number):\n        if self.is_negative and expt.is_even:\n            return (-self) ** expt\n    if isinstance(expt, Float):\n        return super(Integer, self)._eval_power(expt)\n    if not isinstance(expt, Rational):\n        return\n    if expt is S.Half and self.is_negative:\n        return S.ImaginaryUnit * Pow(-self, expt)\n    if expt.is_negative:\n        ne = -expt\n        if self.is_negative:\n            if expt.q != 1:\n                return -S.NegativeOne ** (expt.p % expt.q / S(expt.q)) * Rational(1, -self) ** ne\n            else:\n                return S.NegativeOne ** ne * Rational(1, -self) ** ne\n        else:\n            return Rational(1, self.p) ** ne\n    x, xexact = integer_nthroot(abs(self.p), expt.q)\n    if xexact:\n        result = Integer(x ** abs(expt.p))\n        if self.is_negative:\n            result *= S.NegativeOne ** expt\n        return result\n    b_pos = int(abs(self.p))\n    p = perfect_power(b_pos)\n    if p is not False:\n        dict = {p[0]: p[1]}\n    else:\n        dict = Integer(self).factors(limit=2 ** 15)\n    if self.is_negative:\n        dict[-1] = 1\n    out_int = 1\n    out_rad = 1\n    sqr_int = 1\n    sqr_gcd = 0\n    sqr_dict = {}\n    for prime, exponent in dict.items():\n        exponent *= expt.p\n        div_e, div_m = divmod(exponent, expt.q)\n        if div_e > 0:\n            out_int *= prime ** div_e\n        if div_m > 0:\n            g = igcd(div_m, expt.q)\n            if g != 1:\n                out_rad *= Pow(prime, Rational(div_m // g, expt.q // g))\n            else:\n                sqr_dict[prime] = div_m\n    for p, ex in sqr_dict.items():\n        if sqr_gcd == 0:\n            sqr_gcd = ex\n        else:\n            sqr_gcd = igcd(sqr_gcd, ex)\n            if sqr_gcd == 1:\n                break\n    for k, v in sqr_dict.items():\n        sqr_int *= k ** (v // sqr_gcd)\n    if sqr_int == self and out_int == 1 and (out_rad == 1):\n        result = None\n    else:\n        result = out_int * out_rad * Pow(sqr_int, Rational(sqr_gcd, expt.q))\n    return result",
    ".sympy.core.numbers.py@@NegativeOne.__neg__": "def __neg__():\n    return S.One",
    ".sympy.core.numbers.py@@Rational.__new__": "def __new__(cls, p, q=None, gcd=None):\n    if q is None:\n        if isinstance(p, Rational):\n            return p\n        if isinstance(p, string_types):\n            if p.count('/') > 1:\n                raise TypeError('invalid input: %s' % p)\n            pq = p.rsplit('/', 1)\n            if len(pq) == 2:\n                p, q = pq\n                fp = fractions.Fraction(p)\n                fq = fractions.Fraction(q)\n                f = fp / fq\n                return Rational(f.numerator, f.denominator, 1)\n            p = p.replace(' ', '')\n            try:\n                p = fractions.Fraction(p)\n            except ValueError:\n                pass\n        elif isinstance(p, float):\n            p = fractions.Fraction(p)\n        if not isinstance(p, string_types):\n            try:\n                if isinstance(p, fractions.Fraction):\n                    return Rational(p.numerator, p.denominator, 1)\n            except NameError:\n                pass\n            if isinstance(p, Float):\n                return Rational(*float(p).as_integer_ratio())\n        if not isinstance(p, SYMPY_INTS + (Rational,)):\n            raise TypeError('invalid input: %s' % p)\n        q = q or S.One\n        gcd = 1\n    else:\n        p = Rational(p)\n        q = Rational(q)\n    if isinstance(q, Rational):\n        p *= q.q\n        q = q.p\n    if isinstance(p, Rational):\n        q *= p.q\n        p = p.p\n    if q == 0:\n        if p == 0:\n            if _errdict['divide']:\n                raise ValueError('Indeterminate 0/0')\n            else:\n                return S.NaN\n        return S.ComplexInfinity\n    if q < 0:\n        q = -q\n        p = -p\n    if not gcd:\n        gcd = igcd(abs(p), q)\n    if gcd > 1:\n        p //= gcd\n        q //= gcd\n    if q == 1:\n        return Integer(p)\n    if p == 1 and q == 2:\n        return S.Half\n    obj = Expr.__new__(cls)\n    obj.p = p\n    obj.q = q\n    return obj",
    ".sympy.core.numbers.py@@Integer.__mul__": "def __mul__(self, other):\n    if isinstance(other, integer_types):\n        return Integer(self.p * other)\n    elif isinstance(other, Integer):\n        return Integer(self.p * other.p)\n    elif isinstance(other, Rational):\n        return Rational(self.p * other.p, other.q, igcd(self.p, other.q))\n    return Rational.__mul__(self, other)",
    ".sympy.core.numbers.py@@igcd": "def igcd(*args):\n    if len(args) < 2:\n        raise TypeError('igcd() takes at least 2 arguments (%s given)' % len(args))\n    if 1 in args:\n        a = 1\n        k = 0\n    else:\n        a = abs(as_int(args[0]))\n        k = 1\n    if a != 1:\n        while k < len(args):\n            b = args[k]\n            k += 1\n            try:\n                a = _gcdcache[a, b]\n            except KeyError:\n                b = as_int(b)\n                if not b:\n                    continue\n                if b == 1:\n                    a = 1\n                    break\n                if b < 0:\n                    b = -b\n                t = (a, b)\n                while b:\n                    a, b = (b, a % b)\n                _gcdcache[t] = _gcdcache[t[1], t[0]] = a\n    while k < len(args):\n        ok = as_int(args[k])\n        k += 1\n    return a",
    ".sympy.core.expr.py@@Expr.__pow__": "def __pow__(self, other):\n    return Pow(self, other)",
    ".sympy.core.numbers.py@@NumberSymbol.__hash__": "def __hash__(self):\n    return super(NumberSymbol, self).__hash__()",
    ".sympy.core.mul.py@@Mul.flatten": "def flatten(cls, seq):\n    from sympy.calculus.util import AccumBounds\n    rv = None\n    if len(seq) == 2:\n        a, b = seq\n        if b.is_Rational:\n            a, b = (b, a)\n        assert not a is S.One\n        if not a.is_zero and a.is_Rational:\n            r, b = b.as_coeff_Mul()\n            if b.is_Add:\n                if r is not S.One:\n                    rv = ([cls(a * r, b, evaluate=False)], [], None)\n                elif b.is_commutative:\n                    if a is S.One:\n                        rv = ([b], [], None)\n                    else:\n                        r, b = b.as_coeff_Add()\n                        bargs = [_keep_coeff(a, bi) for bi in Add.make_args(b)]\n                        _addsort(bargs)\n                        ar = a * r\n                        if ar:\n                            bargs.insert(0, ar)\n                        bargs = [Add._from_args(bargs)]\n                        rv = (bargs, [], None)\n        if rv:\n            return rv\n    c_part = []\n    nc_part = []\n    nc_seq = []\n    coeff = S.One\n    c_powers = []\n    num_exp = []\n    neg1e = S.Zero\n    pnum_rat = {}\n    order_symbols = None\n    for o in seq:\n        if o.is_Order:\n            o, order_symbols = o.as_expr_variables(order_symbols)\n        if o.is_Mul:\n            if o.is_commutative:\n                seq.extend(o.args)\n            else:\n                for q in o.args:\n                    if q.is_commutative:\n                        seq.append(q)\n                    else:\n                        nc_seq.append(q)\n                seq.append(NC_Marker)\n            continue\n        elif o.is_Number:\n            if o is S.NaN or (coeff is S.ComplexInfinity and o is S.Zero):\n                return ([S.NaN], [], None)\n            elif coeff.is_Number:\n                coeff *= o\n                if coeff is S.NaN:\n                    return ([S.NaN], [], None)\n            continue\n        elif isinstance(o, AccumBounds):\n            coeff = o.__mul__(coeff)\n            continue\n        elif o is S.ComplexInfinity:\n            if not coeff:\n                return ([S.NaN], [], None)\n            if coeff is S.ComplexInfinity:\n                return ([S.ComplexInfinity], [], None)\n            coeff = S.ComplexInfinity\n            continue\n        elif o is S.ImaginaryUnit:\n            neg1e += S.Half\n            continue\n        elif o.is_commutative:\n            b, e = o.as_base_exp()\n            if o.is_Pow:\n                if b.is_Number:\n                    if e.is_Rational:\n                        if e.is_Integer:\n                            coeff *= Pow(b, e)\n                            continue\n                        elif e.is_negative:\n                            seq.append(Pow(b, e))\n                            continue\n                        elif b.is_negative:\n                            neg1e += e\n                            b = -b\n                        if b is not S.One:\n                            pnum_rat.setdefault(b, []).append(e)\n                        continue\n                    elif b.is_positive or e.is_integer:\n                        num_exp.append((b, e))\n                        continue\n                elif b is S.ImaginaryUnit and e.is_Rational:\n                    neg1e += e / 2\n                    continue\n            c_powers.append((b, e))\n        else:\n            if o is not NC_Marker:\n                nc_seq.append(o)\n            while nc_seq:\n                o = nc_seq.pop(0)\n                if not nc_part:\n                    nc_part.append(o)\n                    continue\n                o1 = nc_part.pop()\n                b1, e1 = o1.as_base_exp()\n                b2, e2 = o.as_base_exp()\n                new_exp = e1 + e2\n                if b1 == b2 and (not new_exp.is_Add):\n                    o12 = b1 ** new_exp\n                    if o12.is_commutative:\n                        seq.append(o12)\n                        continue\n                    else:\n                        nc_seq.insert(0, o12)\n                else:\n                    nc_part.append(o1)\n                    nc_part.append(o)\n\n    def _gather(c_powers):\n        common_b = {}\n        for b, e in c_powers:\n            co = e.as_coeff_Mul()\n            common_b.setdefault(b, {}).setdefault(co[1], []).append(co[0])\n        for b, d in common_b.items():\n            for di, li in d.items():\n                d[di] = Add(*li)\n        new_c_powers = []\n        for b, e in common_b.items():\n            new_c_powers.extend([(b, c * t) for t, c in e.items()])\n        return new_c_powers\n    c_powers = _gather(c_powers)\n    num_exp = _gather(num_exp)\n    for i in range(2):\n        new_c_powers = []\n        changed = False\n        for b, e in c_powers:\n            if e.is_zero:\n                continue\n            if e is S.One:\n                if b.is_Number:\n                    coeff *= b\n                    continue\n                p = b\n            if e is not S.One:\n                p = Pow(b, e)\n                if p.is_Pow and (not b.is_Pow):\n                    bi = b\n                    b, e = p.as_base_exp()\n                    if b != bi:\n                        changed = True\n            c_part.append(p)\n            new_c_powers.append((b, e))\n        if changed and len(set((b for b, e in new_c_powers))) != len(new_c_powers):\n            c_part = []\n            c_powers = _gather(new_c_powers)\n        else:\n            break\n    inv_exp_dict = {}\n    for b, e in num_exp:\n        inv_exp_dict.setdefault(e, []).append(b)\n    for e, b in inv_exp_dict.items():\n        inv_exp_dict[e] = cls(*b)\n    c_part.extend([Pow(b, e) for e, b in inv_exp_dict.items() if e])\n    comb_e = {}\n    for b, e in pnum_rat.items():\n        comb_e.setdefault(Add(*e), []).append(b)\n    del pnum_rat\n    num_rat = []\n    for e, b in comb_e.items():\n        b = cls(*b)\n        if e.q == 1:\n            coeff *= Pow(b, e)\n            continue\n        if e.p > e.q:\n            e_i, ep = divmod(e.p, e.q)\n            coeff *= Pow(b, e_i)\n            e = Rational(ep, e.q)\n        num_rat.append((b, e))\n    del comb_e\n    pnew = defaultdict(list)\n    i = 0\n    while i < len(num_rat):\n        bi, ei = num_rat[i]\n        grow = []\n        for j in range(i + 1, len(num_rat)):\n            bj, ej = num_rat[j]\n            g = bi.gcd(bj)\n            if g is not S.One:\n                e = ei + ej\n                if e.q == 1:\n                    coeff *= Pow(g, e)\n                else:\n                    if e.p > e.q:\n                        e_i, ep = divmod(e.p, e.q)\n                        coeff *= Pow(g, e_i)\n                        e = Rational(ep, e.q)\n                    grow.append((g, e))\n                num_rat[j] = (bj / g, ej)\n                bi = bi / g\n                if bi is S.One:\n                    break\n        if bi is not S.One:\n            obj = Pow(bi, ei)\n            if obj.is_Number:\n                coeff *= obj\n            else:\n                for obj in Mul.make_args(obj):\n                    if obj.is_Number:\n                        coeff *= obj\n                    else:\n                        assert obj.is_Pow\n                        bi, ei = obj.args\n                        pnew[ei].append(bi)\n        num_rat.extend(grow)\n        i += 1\n    for e, b in pnew.items():\n        pnew[e] = cls(*b)\n    if neg1e:\n        p, q = neg1e.as_numer_denom()\n        n, p = divmod(p, q)\n        if n % 2:\n            coeff = -coeff\n        if q == 2:\n            c_part.append(S.ImaginaryUnit)\n        elif p:\n            neg1e = Rational(p, q)\n            for e, b in pnew.items():\n                if e == neg1e and b.is_positive:\n                    pnew[e] = -b\n                    break\n            else:\n                c_part.append(Pow(S.NegativeOne, neg1e, evaluate=False))\n    c_part.extend([Pow(b, e) for e, b in pnew.items()])\n    if coeff is S.Infinity or coeff is S.NegativeInfinity:\n\n        def _handle_for_oo(c_part, coeff_sign):\n            new_c_part = []\n            for t in c_part:\n                if t.is_positive:\n                    continue\n                if t.is_negative:\n                    coeff_sign *= -1\n                    continue\n                new_c_part.append(t)\n            return (new_c_part, coeff_sign)\n        c_part, coeff_sign = _handle_for_oo(c_part, 1)\n        nc_part, coeff_sign = _handle_for_oo(nc_part, coeff_sign)\n        coeff *= coeff_sign\n    if coeff is S.ComplexInfinity:\n        c_part = [c for c in c_part if not (fuzzy_not(c.is_zero) and c.is_real is not None)]\n        nc_part = [c for c in nc_part if not (fuzzy_not(c.is_zero) and c.is_real is not None)]\n    elif coeff is S.Zero:\n        if any((c.is_finite == False for c in c_part)):\n            return ([S.NaN], [], order_symbols)\n        return ([coeff], [], order_symbols)\n    _new = []\n    for i in c_part:\n        if i.is_Number:\n            coeff *= i\n        else:\n            _new.append(i)\n    c_part = _new\n    _mulsort(c_part)\n    if coeff is not S.One:\n        c_part.insert(0, coeff)\n    if not nc_part and len(c_part) == 2 and c_part[0].is_Number and c_part[1].is_Add:\n        coeff = c_part[0]\n        c_part = [Add(*[coeff * f for f in c_part[1].args])]\n    return (c_part, nc_part, order_symbols)",
    ".sympy.core.mul.py@@Mul._gather": "def _gather(c_powers):\n    common_b = {}\n    for b, e in c_powers:\n        co = e.as_coeff_Mul()\n        common_b.setdefault(b, {}).setdefault(co[1], []).append(co[0])\n    for b, d in common_b.items():\n        for di, li in d.items():\n            d[di] = Add(*li)\n    new_c_powers = []\n    for b, e in common_b.items():\n        new_c_powers.extend([(b, c * t) for t, c in e.items()])\n    return new_c_powers",
    ".sympy.core.numbers.py@@Rational.as_coeff_Mul": "def as_coeff_Mul(self, rational=False):\n    return (self, S.One)",
    ".sympy.core.numbers.py@@Zero.__nonzero__": "def __nonzero__(self):\n    return False",
    ".sympy.core.mul.py@@_mulsort": "def _mulsort(args):\n    args.sort(key=_args_sortkey)",
    ".sympy.core.expr.py@@Expr.__neg__": "def __neg__(self):\n    return Mul(S.NegativeOne, self)",
    ".sympy.core.mul.py@@Mul.as_coeff_Mul": "def as_coeff_Mul(self, rational=False):\n    coeff, args = (self.args[0], self.args[1:])\n    if coeff.is_Number:\n        if not rational or coeff.is_Rational:\n            if len(args) == 1:\n                return (coeff, args[0])\n            else:\n                return (coeff, self._new_rawargs(*args))\n        elif coeff.is_negative:\n            return (S.NegativeOne, self._new_rawargs(*(-coeff,) + args))\n    return (S.One, self)",
    ".sympy.core.numbers.py@@Rational.__mul__": "def __mul__(self, other):\n    if isinstance(other, Integer):\n        return Rational(self.p * other.p, self.q, igcd(other.p, self.q))\n    elif isinstance(other, Rational):\n        return Rational(self.p * other.p, self.q * other.q, igcd(self.p, other.q) * igcd(self.q, other.p))\n    elif isinstance(other, Float):\n        return other * self\n    else:\n        return Number.__mul__(self, other)",
    ".sympy.core.numbers.py@@NaN.__eq__": "def __eq__(self, other):\n    return other is S.NaN",
    ".sympy.core.numbers.py@@NumberSymbol.__eq__": "def __eq__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return False\n    if self is other:\n        return True\n    if isinstance(other, Number) and self.is_irrational:\n        return False\n    return False",
    ".sympy.core.basic.py@@Basic.subs": "def subs(self, *args, **kwargs):\n    from sympy.core.containers import Dict\n    from sympy.utilities import default_sort_key\n    from sympy import Dummy, Symbol\n    unordered = False\n    if len(args) == 1:\n        sequence = args[0]\n        if isinstance(sequence, set):\n            unordered = True\n        elif isinstance(sequence, (Dict, Mapping)):\n            unordered = True\n            sequence = sequence.items()\n        elif not iterable(sequence):\n            from sympy.utilities.misc import filldedent\n            raise ValueError(filldedent('\\n               When a single argument is passed to subs\\n               it should be a dictionary of old: new pairs or an iterable\\n               of (old, new) tuples.'))\n    elif len(args) == 2:\n        sequence = [args]\n    else:\n        raise ValueError('subs accepts either 1 or 2 arguments')\n    sequence = list(sequence)\n    for i in range(len(sequence)):\n        s = list(sequence[i])\n        for j, si in enumerate(s):\n            try:\n                si = sympify(si, strict=True)\n            except SympifyError:\n                if type(si) is str:\n                    si = Symbol(si)\n                else:\n                    sequence[i] = None\n                    break\n            s[j] = si\n        else:\n            sequence[i] = None if _aresame(*s) else tuple(s)\n    sequence = list(filter(None, sequence))\n    if unordered:\n        sequence = dict(sequence)\n        if not all((k.is_Atom for k in sequence)):\n            d = {}\n            for o, n in sequence.items():\n                try:\n                    ops = (o.count_ops(), len(o.args))\n                except TypeError:\n                    ops = (0, 0)\n                d.setdefault(ops, []).append((o, n))\n            newseq = []\n            for k in sorted(d.keys(), reverse=True):\n                newseq.extend(sorted([v[0] for v in d[k]], key=default_sort_key))\n            sequence = [(k, sequence[k]) for k in newseq]\n            del newseq, d\n        else:\n            sequence = sorted([(k, v) for k, v in sequence.items()], key=default_sort_key)\n    if kwargs.pop('simultaneous', False):\n        reps = {}\n        rv = self\n        kwargs['hack2'] = True\n        m = Dummy()\n        for old, new in sequence:\n            d = Dummy(commutative=new.is_commutative)\n            rv = rv._subs(old, d * m, **kwargs)\n            if not isinstance(rv, Basic):\n                break\n            reps[d] = new\n        reps[m] = S.One\n        return rv.xreplace(reps)\n    else:\n        rv = self\n        for old, new in sequence:\n            rv = rv._subs(old, new, **kwargs)\n            if not isinstance(rv, Basic):\n                break\n        return rv",
    ".sympy.core.basic.py@@_aresame": "def _aresame(a, b):\n    from .function import AppliedUndef, UndefinedFunction as UndefFunc\n    for i, j in zip_longest(preorder_traversal(a), preorder_traversal(b)):\n        if i != j or type(i) != type(j):\n            if isinstance(i, UndefFunc) and isinstance(j, UndefFunc) or (isinstance(i, AppliedUndef) and isinstance(j, AppliedUndef)):\n                if i.class_key() != j.class_key():\n                    return False\n            else:\n                return False\n    else:\n        return True",
    ".sympy.core.basic.py@@Basic.__ne__": "def __ne__(self, other):\n    return not self.__eq__(other)",
    ".sympy.core.expr.py@@Expr.count_ops": "def count_ops(self, visual=None):\n    from .function import count_ops\n    return count_ops(self, visual)",
    ".sympy.core.function.py@@count_ops": "def count_ops(expr, visual=False):\n    from sympy import Integral, Symbol\n    from sympy.simplify.radsimp import fraction\n    from sympy.logic.boolalg import BooleanFunction\n    expr = sympify(expr)\n    if isinstance(expr, Expr):\n        ops = []\n        args = [expr]\n        NEG = Symbol('NEG')\n        DIV = Symbol('DIV')\n        SUB = Symbol('SUB')\n        ADD = Symbol('ADD')\n        while args:\n            a = args.pop()\n            if isinstance(a, string_types):\n                continue\n            if a.is_Rational:\n                if a is not S.One:\n                    if a.p < 0:\n                        ops.append(NEG)\n                    if a.q != 1:\n                        ops.append(DIV)\n                    continue\n            elif a.is_Mul:\n                if _coeff_isneg(a):\n                    ops.append(NEG)\n                    if a.args[0] is S.NegativeOne:\n                        a = a.as_two_terms()[1]\n                    else:\n                        a = -a\n                n, d = fraction(a)\n                if n.is_Integer:\n                    ops.append(DIV)\n                    if n < 0:\n                        ops.append(NEG)\n                    args.append(d)\n                    continue\n                elif d is not S.One:\n                    if not d.is_Integer:\n                        args.append(d)\n                    ops.append(DIV)\n                    args.append(n)\n                    continue\n            elif a.is_Add:\n                aargs = list(a.args)\n                negs = 0\n                for i, ai in enumerate(aargs):\n                    if _coeff_isneg(ai):\n                        negs += 1\n                        args.append(-ai)\n                        if i > 0:\n                            ops.append(SUB)\n                    else:\n                        args.append(ai)\n                        if i > 0:\n                            ops.append(ADD)\n                if negs == len(aargs):\n                    ops.append(NEG)\n                elif _coeff_isneg(aargs[0]):\n                    ops.append(SUB - ADD)\n                continue\n            if a.is_Pow and a.exp is S.NegativeOne:\n                ops.append(DIV)\n                args.append(a.base)\n                continue\n            if a.is_Mul or a.is_Pow or a.is_Function or isinstance(a, Derivative) or isinstance(a, Integral):\n                o = Symbol(a.func.__name__.upper())\n                if a.is_Mul or isinstance(a, LatticeOp):\n                    ops.append(o * (len(a.args) - 1))\n                else:\n                    ops.append(o)\n            if not a.is_Symbol:\n                args.extend(a.args)\n    elif type(expr) is dict:\n        ops = [count_ops(k, visual=visual) + count_ops(v, visual=visual) for k, v in expr.items()]\n    elif iterable(expr):\n        ops = [count_ops(i, visual=visual) for i in expr]\n    elif isinstance(expr, BooleanFunction):\n        ops = []\n        for arg in expr.args:\n            ops.append(count_ops(arg, visual=True))\n        o = Symbol(expr.func.__name__.upper())\n        ops.append(o)\n    elif not isinstance(expr, Basic):\n        ops = []\n    elif not isinstance(expr, Basic):\n        raise TypeError('Invalid type of expr')\n    else:\n        ops = []\n        args = [expr]\n        while args:\n            a = args.pop()\n            if isinstance(a, string_types):\n                continue\n            if a.args:\n                o = Symbol(a.func.__name__.upper())\n                if a.is_Boolean:\n                    ops.append(o * (len(a.args) - 1))\n                else:\n                    ops.append(o)\n                args.extend(a.args)\n    if not ops:\n        if visual:\n            return S.Zero\n        return 0\n    ops = Add(*ops)\n    if visual:\n        return ops\n    if ops.is_Number:\n        return int(ops)\n    return sum((int((a.args or [1])[0]) for a in Add.make_args(ops)))",
    ".sympy.core.basic.py@@Basic._subs": "def _subs(self, old, new, **hints):\n\n    def fallback(self, old, new):\n        hit = False\n        args = list(self.args)\n        for i, arg in enumerate(args):\n            if not hasattr(arg, '_eval_subs'):\n                continue\n            arg = arg._subs(old, new, **hints)\n            if not _aresame(arg, args[i]):\n                hit = True\n                args[i] = arg\n        if hit:\n            rv = self.func(*args)\n            hack2 = hints.get('hack2', False)\n            if hack2 and self.is_Mul and (not rv.is_Mul):\n                coeff = S.One\n                nonnumber = []\n                for i in args:\n                    if i.is_Number:\n                        coeff *= i\n                    else:\n                        nonnumber.append(i)\n                nonnumber = self.func(*nonnumber)\n                if coeff is S.One:\n                    return nonnumber\n                else:\n                    return self.func(coeff, nonnumber, evaluate=False)\n            return rv\n        return self\n    if _aresame(self, old):\n        return new\n    rv = self._eval_subs(old, new)\n    if rv is None:\n        rv = fallback(self, old, new)\n    return rv",
    ".sympy.core.numbers.py@@Number._eval_subs": "def _eval_subs(self, old, new):\n    if old == -self:\n        return -new\n    return self",
    ".sympy.core.numbers.py@@One.__neg__": "def __neg__():\n    return S.NegativeOne",
    ".sympy.core.numbers.py@@Integer.__neg__": "def __neg__(self):\n    return Integer(-self.p)",
    ".sympy.core.basic.py@@Basic._eval_subs": "def _eval_subs(self, old, new):\n    return None",
    ".sympy.core.basic.py@@Basic.fallback": "def fallback(self, old, new):\n    hit = False\n    args = list(self.args)\n    for i, arg in enumerate(args):\n        if not hasattr(arg, '_eval_subs'):\n            continue\n        arg = arg._subs(old, new, **hints)\n        if not _aresame(arg, args[i]):\n            hit = True\n            args[i] = arg\n    if hit:\n        rv = self.func(*args)\n        hack2 = hints.get('hack2', False)\n        if hack2 and self.is_Mul and (not rv.is_Mul):\n            coeff = S.One\n            nonnumber = []\n            for i in args:\n                if i.is_Number:\n                    coeff *= i\n                else:\n                    nonnumber.append(i)\n            nonnumber = self.func(*nonnumber)\n            if coeff is S.One:\n                return nonnumber\n            else:\n                return self.func(coeff, nonnumber, evaluate=False)\n        return rv\n    return self",
    ".sympy.core.numbers.py@@Infinity.__neg__": "def __neg__(self):\n    return S.NegativeInfinity",
    ".sympy.core.basic.py@@Basic.has": "def has(self, *patterns):\n    return any((self._has(pattern) for pattern in patterns))",
    ".sympy.core.basic.py@@Basic._has": "def _has(self, pattern):\n    from sympy.core.function import UndefinedFunction, Function\n    if isinstance(pattern, UndefinedFunction):\n        return any((f.func == pattern or f == pattern for f in self.atoms(Function, UndefinedFunction)))\n    pattern = sympify(pattern)\n    if isinstance(pattern, BasicMeta):\n        return any((isinstance(arg, pattern) for arg in preorder_traversal(self)))\n    try:\n        match = pattern._has_matcher()\n        return any((match(arg) for arg in preorder_traversal(self)))\n    except AttributeError:\n        return any((arg == pattern for arg in preorder_traversal(self)))",
    ".sympy.core.basic.py@@Basic._has_matcher": "def _has_matcher(self):\n    return self.__eq__",
    ".sympy.core.numbers.py@@Infinity.__eq__": "def __eq__(self, other):\n    return other is S.Infinity",
    ".sympy.core.numbers.py@@NegativeInfinity.__hash__": "def __hash__(self):\n    return super(NegativeInfinity, self).__hash__()",
    ".sympy.core.numbers.py@@NegativeInfinity.__eq__": "def __eq__(self, other):\n    return other is S.NegativeInfinity",
    ".sympy.core.numbers.py@@Integer.__sub__": "def __sub__(self, other):\n    if isinstance(other, integer_types):\n        return Integer(self.p - other)\n    elif isinstance(other, Integer):\n        return Integer(self.p - other.p)\n    elif isinstance(other, Rational):\n        return Rational(self.p * other.q - other.p, other.q, 1)\n    return Rational.__sub__(self, other)",
    ".sympy.core.numbers.py@@Integer.__gt__": "def __gt__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s > %s' % (self, other))\n    if isinstance(other, Integer):\n        return _sympify(self.p > other.p)\n    return Rational.__gt__(self, other)",
    ".sympy.core.containers.py@@Tuple.__eq__": "def __eq__(self, other):\n    if isinstance(other, Basic):\n        return super(Tuple, self).__eq__(other)\n    return self.args == other",
    ".sympy.core.numbers.py@@Rational._hashable_content": "def _hashable_content(self):\n    return (self.p, self.q)",
    ".sympy.core.expr.py@@Expr.args_cnc": "def args_cnc(self, cset=False, warn=True, split_1=True):\n    if self.is_Mul:\n        args = list(self.args)\n    else:\n        args = [self]\n    for i, mi in enumerate(args):\n        if not mi.is_commutative:\n            c = args[:i]\n            nc = args[i:]\n            break\n    else:\n        c = args\n        nc = []\n    if c and split_1 and (c[0].is_Number and c[0].is_negative and (c[0] is not S.NegativeOne)):\n        c[:1] = [S.NegativeOne, -c[0]]\n    if cset:\n        clen = len(c)\n        c = set(c)\n        if clen and warn and (len(c) != clen):\n            raise ValueError('repeated commutative arguments: %s' % [ci for ci in c if list(self.args).count(ci) > 1])\n    return [c, nc]",
    ".sympy.core.mul.py@@Mul.as_powers_dict": "def as_powers_dict(self):\n    d = defaultdict(int)\n    for term in self.args:\n        b, e = term.as_base_exp()\n        d[b] += e\n    return d",
    ".sympy.core.numbers.py@@Integer.__radd__": "def __radd__(self, other):\n    if isinstance(other, integer_types):\n        return Integer(other + self.p)\n    elif isinstance(other, Rational):\n        return Rational(other.p + self.p * other.q, other.q, 1)\n    return Rational.__radd__(self, other)",
    ".sympy.core.mul.py@@Mul.as_ordered_factors": "def as_ordered_factors(self, order=None):\n    cpart, ncpart = self.args_cnc()\n    cpart.sort(key=lambda expr: expr.sort_key(order=order))\n    return cpart + ncpart",
    ".sympy.core.mul.py@@Mul.class_key": "def class_key(cls):\n    return (3, 0, cls.__name__)",
    ".sympy.simplify.cse_opts.py@@sub_pre": "def sub_pre(e):\n    reps = [a for a in e.atoms(Add) if a.could_extract_minus_sign()]\n    reps.sort(key=default_sort_key)\n    e = e.xreplace(dict(((a, Mul._from_args([S.NegativeOne, -a])) for a in reps)))\n    if isinstance(e, Basic):\n        negs = {}\n        for a in sorted(e.atoms(Add), key=default_sort_key):\n            if a in reps or a.could_extract_minus_sign():\n                negs[a] = Mul._from_args([S.One, S.NegativeOne, -a])\n        e = e.xreplace(negs)\n    return e",
    ".sympy.core.expr.py@@Expr.could_extract_minus_sign": "def could_extract_minus_sign(self):\n    negative_self = -self\n    self_has_minus = self.extract_multiplicatively(-1) is not None\n    negative_self_has_minus = negative_self.extract_multiplicatively(-1) is not None\n    if self_has_minus != negative_self_has_minus:\n        return self_has_minus\n    else:\n        if self.is_Add:\n            all_args = len(self.args)\n            negative_args = len([False for arg in self.args if arg.could_extract_minus_sign()])\n            positive_args = all_args - negative_args\n            if positive_args > negative_args:\n                return False\n            elif positive_args < negative_args:\n                return True\n        elif self.is_Mul:\n            num, den = self.as_numer_denom()\n            args = Mul.make_args(num) + Mul.make_args(den)\n            arg_signs = [arg.could_extract_minus_sign() for arg in args]\n            negative_args = list(filter(None, arg_signs))\n            return len(negative_args) % 2 == 1\n        return bool(self.sort_key() < negative_self.sort_key())",
    ".sympy.core.add.py@@Add.__neg__": "def __neg__(self):\n    return self.func(*[-t for t in self.args])",
    ".sympy.core.expr.py@@Expr.extract_multiplicatively": "def extract_multiplicatively(self, c):\n    c = sympify(c)\n    if self is S.NaN:\n        return None\n    if c is S.One:\n        return self\n    elif c == self:\n        return S.One\n    if c.is_Add:\n        cc, pc = c.primitive()\n        if cc is not S.One:\n            c = Mul(cc, pc, evaluate=False)\n    if c.is_Mul:\n        a, b = c.as_two_terms()\n        x = self.extract_multiplicatively(a)\n        if x is not None:\n            return x.extract_multiplicatively(b)\n    quotient = self / c\n    if self.is_Number:\n        if self is S.Infinity:\n            if c.is_positive:\n                return S.Infinity\n        elif self is S.NegativeInfinity:\n            if c.is_negative:\n                return S.Infinity\n            elif c.is_positive:\n                return S.NegativeInfinity\n        elif self is S.ComplexInfinity:\n            if not c.is_zero:\n                return S.ComplexInfinity\n        elif self.is_Integer:\n            if not quotient.is_Integer:\n                return None\n            elif self.is_positive and quotient.is_negative:\n                return None\n            else:\n                return quotient\n        elif self.is_Rational:\n            if not quotient.is_Rational:\n                return None\n            elif self.is_positive and quotient.is_negative:\n                return None\n            else:\n                return quotient\n        elif self.is_Float:\n            if not quotient.is_Float:\n                return None\n            elif self.is_positive and quotient.is_negative:\n                return None\n            else:\n                return quotient\n    elif self.is_NumberSymbol or self.is_Symbol or self is S.ImaginaryUnit:\n        if quotient.is_Mul and len(quotient.args) == 2:\n            if quotient.args[0].is_Integer and quotient.args[0].is_positive and (quotient.args[1] == self):\n                return quotient\n        elif quotient.is_Integer and c.is_Number:\n            return quotient\n    elif self.is_Add:\n        cs, ps = self.primitive()\n        if cs is not S.One:\n            return Mul(cs, ps, evaluate=False).extract_multiplicatively(c)\n        newargs = []\n        for arg in self.args:\n            newarg = arg.extract_multiplicatively(c)\n            if newarg is not None:\n                newargs.append(newarg)\n            else:\n                return None\n        return Add(*newargs)\n    elif self.is_Mul:\n        args = list(self.args)\n        for i, arg in enumerate(args):\n            newarg = arg.extract_multiplicatively(c)\n            if newarg is not None:\n                args[i] = newarg\n                return Mul(*args)\n    elif self.is_Pow:\n        if c.is_Pow and c.base == self.base:\n            new_exp = self.exp.extract_additively(c.exp)\n            if new_exp is not None:\n                return self.base ** new_exp\n        elif c == self.base:\n            new_exp = self.exp.extract_additively(1)\n            if new_exp is not None:\n                return self.base ** new_exp",
    ".sympy.core.numbers.py@@NegativeOne.__abs__": "def __abs__():\n    return S.One",
    ".sympy.core.add.py@@Add.as_coeff_Add": "def as_coeff_Add(self, rational=False):\n    coeff, args = (self.args[0], self.args[1:])\n    if coeff.is_Number and (not rational) or coeff.is_Rational:\n        return (coeff, self._new_rawargs(*args))\n    return (S.Zero, self)",
    ".sympy.core.mul.py@@_keep_coeff": "def _keep_coeff(coeff, factors, clear=True, sign=False):\n    if not coeff.is_Number:\n        if factors.is_Number:\n            factors, coeff = (coeff, factors)\n        else:\n            return coeff * factors\n    if coeff is S.One:\n        return factors\n    elif coeff is S.NegativeOne and (not sign):\n        return -factors\n    elif factors.is_Add:\n        if not clear and coeff.is_Rational and (coeff.q != 1):\n            q = S(coeff.q)\n            for i in factors.args:\n                c, t = i.as_coeff_Mul()\n                r = c / q\n                if r == int(r):\n                    return coeff * factors\n        return Mul._from_args((coeff, factors))\n    elif factors.is_Mul:\n        margs = list(factors.args)\n        if margs[0].is_Number:\n            margs[0] *= coeff\n            if margs[0] == 1:\n                margs.pop(0)\n        else:\n            margs.insert(0, coeff)\n        return Mul._from_args(margs)\n    else:\n        return coeff * factors",
    ".sympy.core.logic.py@@fuzzy_and": "def fuzzy_and(args):\n    rv = True\n    for ai in args:\n        ai = fuzzy_bool(ai)\n        if ai is False:\n            return False\n        if rv:\n            rv = ai\n    return rv",
    ".sympy.core.add.py@@Add.primitive": "def primitive(self):\n    terms = []\n    inf = False\n    for a in self.args:\n        c, m = a.as_coeff_Mul()\n        if not c.is_Rational:\n            c = S.One\n            m = a\n        inf = inf or m is S.ComplexInfinity\n        terms.append((c.p, c.q, m))\n    if not inf:\n        ngcd = reduce(igcd, [t[0] for t in terms], 0)\n        dlcm = reduce(ilcm, [t[1] for t in terms], 1)\n    else:\n        ngcd = reduce(igcd, [t[0] for t in terms if t[1]], 0)\n        dlcm = reduce(ilcm, [t[1] for t in terms if t[1]], 1)\n    if ngcd == dlcm == 1:\n        return (S.One, self)\n    if not inf:\n        for i, (p, q, term) in enumerate(terms):\n            terms[i] = _keep_coeff(Rational(p // ngcd * (dlcm // q)), term)\n    else:\n        for i, (p, q, term) in enumerate(terms):\n            if q:\n                terms[i] = _keep_coeff(Rational(p // ngcd * (dlcm // q)), term)\n            else:\n                terms[i] = _keep_coeff(Rational(p, q), term)\n    if terms[0].is_Number or terms[0] is S.ComplexInfinity:\n        c = terms.pop(0)\n    else:\n        c = None\n    _addsort(terms)\n    if c:\n        terms.insert(0, c)\n    return (Rational(ngcd, dlcm), self._new_rawargs(*terms))",
    ".sympy.core.numbers.py@@ilcm": "def ilcm(*args):\n    if len(args) < 2:\n        raise TypeError('ilcm() takes at least 2 arguments (%s given)' % len(args))\n    if 0 in args:\n        return 0\n    a = args[0]\n    for b in args[1:]:\n        a = a * b // igcd(a, b)\n    return a",
    ".sympy.core.function.py@@Function.is_commutative": "def is_commutative(self):\n    if all((getattr(t, 'is_commutative') for t in self.args)):\n        return True\n    else:\n        return False",
    ".sympy.functions.elementary.exponential.py@@ExpBase.as_base_exp": "def as_base_exp(self):\n    return (self.func(1), Mul(*self.args))",
    ".sympy.functions.elementary.exponential.py@@exp.eval": "def eval(cls, arg):\n    from sympy.assumptions import ask, Q\n    from sympy.calculus import AccumBounds\n    if arg.is_Number:\n        if arg is S.NaN:\n            return S.NaN\n        elif arg is S.Zero:\n            return S.One\n        elif arg is S.One:\n            return S.Exp1\n        elif arg is S.Infinity:\n            return S.Infinity\n        elif arg is S.NegativeInfinity:\n            return S.Zero\n    elif arg.func is log:\n        return arg.args[0]\n    elif isinstance(arg, AccumBounds):\n        return AccumBounds(exp(arg.min), exp(arg.max))\n    elif arg.is_Mul:\n        if arg.is_number or arg.is_Symbol:\n            coeff = arg.coeff(S.Pi * S.ImaginaryUnit)\n            if coeff:\n                if ask(Q.integer(2 * coeff)):\n                    if ask(Q.even(coeff)):\n                        return S.One\n                    elif ask(Q.odd(coeff)):\n                        return S.NegativeOne\n                    elif ask(Q.even(coeff + S.Half)):\n                        return -S.ImaginaryUnit\n                    elif ask(Q.odd(coeff + S.Half)):\n                        return S.ImaginaryUnit\n        coeff, terms = arg.as_coeff_Mul()\n        if coeff in [S.NegativeInfinity, S.Infinity]:\n            return None\n        coeffs, log_term = ([coeff], None)\n        for term in Mul.make_args(terms):\n            if term.func is log:\n                if log_term is None:\n                    log_term = term.args[0]\n                else:\n                    return None\n            elif term.is_comparable:\n                coeffs.append(term)\n            else:\n                return None\n        return log_term ** Mul(*coeffs) if log_term else None\n    elif arg.is_Add:\n        out = []\n        add = []\n        for a in arg.args:\n            if a is S.One:\n                add.append(a)\n                continue\n            newa = cls(a)\n            if newa.func is cls:\n                add.append(a)\n            else:\n                out.append(newa)\n        if out:\n            return Mul(*out) * cls(Add(*add), evaluate=False)\n    elif arg.is_Matrix:\n        return arg.exp()",
    ".sympy.core.numbers.py@@Number.__mul__": "def __mul__(self, other):\n    if isinstance(other, Number):\n        if other is S.NaN:\n            return S.NaN\n        elif other is S.Infinity:\n            if self.is_zero:\n                return S.NaN\n            elif self.is_positive:\n                return S.Infinity\n            else:\n                return S.NegativeInfinity\n        elif other is S.NegativeInfinity:\n            if self.is_zero:\n                return S.NaN\n            elif self.is_positive:\n                return S.NegativeInfinity\n            else:\n                return S.Infinity\n    elif isinstance(other, Tuple):\n        return NotImplemented\n    return AtomicExpr.__mul__(self, other)",
    ".sympy.core.expr.py@@Expr.__mul__": "def __mul__(self, other):\n    return Mul(self, other)",
    ".sympy.core.mul.py@@Mul._eval_is_zero": "def _eval_is_zero(self):\n    zero = infinite = False\n    for a in self.args:\n        z = a.is_zero\n        if z:\n            if infinite:\n                return\n            zero = True\n        else:\n            if not a.is_finite:\n                if zero:\n                    return\n                infinite = True\n            if zero is False and z is None:\n                zero = None\n    return zero",
    ".sympy.core.add.py@@Add._eval_is_zero": "def _eval_is_zero(self):\n    if self.is_commutative is False:\n        return\n    nz = []\n    z = 0\n    im_or_z = False\n    im = False\n    for a in self.args:\n        if a.is_real:\n            if a.is_zero:\n                z += 1\n            elif a.is_zero is False:\n                nz.append(a)\n            else:\n                return\n        elif a.is_imaginary:\n            im = True\n        elif (S.ImaginaryUnit * a).is_real:\n            im_or_z = True\n        else:\n            return\n    if z == len(self.args):\n        return True\n    if self.func(*nz).is_zero:\n        if not im_or_z and (not im):\n            return True\n        if im and (not im_or_z):\n            return False\n    if self.func(*nz).is_zero is False:\n        return False",
    ".sympy.core.expr.py@@Expr._eval_is_positive": "def _eval_is_positive(self):\n    from sympy.polys.numberfields import minimal_polynomial\n    from sympy.polys.polyerrors import NotAlgebraic\n    if self.is_number:\n        if self.is_real is False:\n            return False\n        try:\n            n2 = self._eval_evalf(2)\n            if n2 is None:\n                raise AttributeError\n            if n2._prec == 1:\n                raise AttributeError\n            if n2 == S.NaN:\n                raise AttributeError\n        except (AttributeError, ValueError):\n            return None\n        n, i = self.evalf(2).as_real_imag()\n        if not i.is_Number or not n.is_Number:\n            return False\n        if n._prec != 1 and i._prec != 1:\n            return bool(not i and n > 0)\n        elif n._prec == 1 and (not i or i._prec == 1) and self.is_algebraic and (not self.has(Function)):\n            try:\n                if minimal_polynomial(self).is_Symbol:\n                    return False\n            except (NotAlgebraic, NotImplementedError):\n                pass",
    ".sympy.core.expr.py@@Expr._eval_is_negative": "def _eval_is_negative(self):\n    from sympy.polys.numberfields import minimal_polynomial\n    from sympy.polys.polyerrors import NotAlgebraic\n    if self.is_number:\n        if self.is_real is False:\n            return False\n        try:\n            n2 = self._eval_evalf(2)\n            if n2 is None:\n                raise AttributeError\n            if n2._prec == 1:\n                raise AttributeError\n            if n2 == S.NaN:\n                raise AttributeError\n        except (AttributeError, ValueError):\n            return None\n        n, i = self.evalf(2).as_real_imag()\n        if not i.is_Number or not n.is_Number:\n            return False\n        if n._prec != 1 and i._prec != 1:\n            return bool(not i and n < 0)\n        elif n._prec == 1 and (not i or i._prec == 1) and self.is_algebraic and (not self.has(Function)):\n            try:\n                if minimal_polynomial(self).is_Symbol:\n                    return False\n            except (NotAlgebraic, NotImplementedError):\n                pass",
    ".sympy.core.numbers.py@@Integer.__add__": "def __add__(self, other):\n    if isinstance(other, integer_types):\n        return Integer(self.p + other)\n    elif isinstance(other, Integer):\n        return Integer(self.p + other.p)\n    elif isinstance(other, Rational):\n        return Rational(self.p * other.q + other.p, other.q, 1)\n    return Rational.__add__(self, other)",
    ".sympy.core.numbers.py@@Rational.as_numer_denom": "def as_numer_denom(self):\n    return (Integer(self.p), Integer(self.q))",
    ".sympy.core.numbers.py@@Integer.__divmod__": "def __divmod__(self, other):\n    from .containers import Tuple\n    if isinstance(other, Integer):\n        return Tuple(*divmod(self.p, other.p))\n    else:\n        return Number.__divmod__(self, other)",
    ".sympy.core.numbers.py@@Integer.__mod__": "def __mod__(self, other):\n    if isinstance(other, integer_types):\n        return Integer(self.p % other)\n    elif isinstance(other, Integer):\n        return Integer(self.p % other.p)\n    return Rational.__mod__(self, other)",
    ".sympy.core.mul.py@@Mul._eval_is_real": "def _eval_is_real(self):\n    return self._eval_real_imag(True)",
    ".sympy.core.mul.py@@Mul._eval_real_imag": "def _eval_real_imag(self, real):\n    zero = one_neither = False\n    for t in self.args:\n        if not t.is_complex:\n            return t.is_complex\n        elif t.is_imaginary:\n            real = not real\n        elif t.is_real:\n            if not zero:\n                z = t.is_zero\n                if not z and zero is False:\n                    zero = z\n                elif z:\n                    if all((a.is_finite for a in self.args)):\n                        return True\n                    return\n        elif t.is_real is False:\n            if one_neither:\n                return\n            one_neither = True\n        else:\n            return\n    if one_neither:\n        if real:\n            return zero\n    elif zero is False:\n        return real\n    elif real:\n        return real",
    ".sympy.core.mul.py@@Mul._eval_is_even": "def _eval_is_even(self):\n    is_integer = self.is_integer\n    if is_integer:\n        return fuzzy_not(self.is_odd)\n    elif is_integer is False:\n        return False",
    ".sympy.core.mul.py@@Mul._eval_is_integer": "def _eval_is_integer(self):\n    is_rational = self.is_rational\n    if is_rational:\n        n, d = self.as_numer_denom()\n        if d is S.One:\n            return True\n        elif d is S(2):\n            return n.is_even\n    elif is_rational is False:\n        return False",
    ".sympy.core.mul.py@@Mul._eval_is_rational": "def _eval_is_rational(self):\n    r = _fuzzy_group((a.is_rational for a in self.args), quick_exit=True)\n    if r:\n        return r\n    elif r is False:\n        return self.is_zero",
    ".sympy.core.logic.py@@_fuzzy_group": "def _fuzzy_group(args, quick_exit=False):\n    saw_other = False\n    for a in args:\n        if a is True:\n            continue\n        if a is None:\n            return\n        if quick_exit and saw_other:\n            return\n        saw_other = True\n    return not saw_other",
    ".sympy.core.mul.py@@Mul._eval_is_algebraic": "def _eval_is_algebraic(self):\n    r = _fuzzy_group((a.is_algebraic for a in self.args), quick_exit=True)\n    if r:\n        return r\n    elif r is False:\n        return self.is_zero",
    ".sympy.core.mul.py@@Mul._eval_is_odd": "def _eval_is_odd(self):\n    is_integer = self.is_integer\n    if is_integer:\n        r, acc = (True, 1)\n        for t in self.args:\n            if not t.is_integer:\n                return None\n            elif t.is_even:\n                r = False\n            elif t.is_integer:\n                if r is False:\n                    pass\n                elif acc != 1 and (acc + t).is_odd:\n                    r = False\n                elif t.is_odd is None:\n                    r = None\n            acc = t\n        return r\n    elif is_integer is False:\n        return False",
    ".sympy.core.mul.py@@Mul._eval_is_imaginary": "def _eval_is_imaginary(self):\n    z = self.is_zero\n    if z:\n        return False\n    elif z is False:\n        return self._eval_real_imag(False)",
    ".sympy.core.mul.py@@Mul._eval_is_antihermitian": "def _eval_is_antihermitian(self):\n    z = self.is_zero\n    if z:\n        return False\n    elif z is False:\n        return self._eval_herm_antiherm(False)",
    ".sympy.core.mul.py@@Mul._eval_is_positive": "def _eval_is_positive(self):\n    return self._eval_pos_neg(1)",
    ".sympy.core.mul.py@@Mul._eval_pos_neg": "def _eval_pos_neg(self, sign):\n    saw_NON = saw_NOT = False\n    for t in self.args:\n        if t.is_positive:\n            continue\n        elif t.is_negative:\n            sign = -sign\n        elif t.is_zero:\n            if all((a.is_finite for a in self.args)):\n                return False\n            return\n        elif t.is_nonpositive:\n            sign = -sign\n            saw_NON = True\n        elif t.is_nonnegative:\n            saw_NON = True\n        elif t.is_positive is False:\n            sign = -sign\n            if saw_NOT:\n                return\n            saw_NOT = True\n        elif t.is_negative is False:\n            if saw_NOT:\n                return\n            saw_NOT = True\n        else:\n            return\n    if sign == 1 and saw_NON is False and (saw_NOT is False):\n        return True\n    if sign < 0:\n        return False",
    ".sympy.core.mul.py@@Mul._eval_is_prime": "def _eval_is_prime(self):\n    if self.is_number:\n        '\\n        If input is a number that is not completely simplified.\\n        e.g. Mul(sqrt(3), sqrt(3), evaluate=False)\\n        So we manually evaluate it and return whether that is prime or not.\\n        '\n        r = S.One\n        for arg in self.args:\n            r *= arg\n        return r.is_prime\n    if self.is_integer and self.is_positive:\n        '\\n        Here we count the number of arguments that have a minimum value\\n        greater than two.\\n        If there are more than one of such a symbol then the result is not prime.\\n        Else, the result cannot be determined.\\n        '\n        number_of_args = 0\n        for arg in self.args:\n            if (arg - 1).is_positive:\n                number_of_args += 1\n        if number_of_args > 1:\n            return False",
    ".sympy.core.expr.py@@Expr.is_number": "def is_number(self):\n    return all((obj.is_number for obj in self.args))",
    ".sympy.core.mul.py@@Mul._eval_is_negative": "def _eval_is_negative(self):\n    if self.args[0] == -1:\n        return (-self).is_positive\n    return self._eval_pos_neg(-1)",
    ".sympy.core.mul.py@@Mul._eval_is_hermitian": "def _eval_is_hermitian(self):\n    return self._eval_herm_antiherm(True)",
    ".sympy.core.mul.py@@Mul._eval_herm_antiherm": "def _eval_herm_antiherm(self, real):\n    one_nc = zero = one_neither = False\n    for t in self.args:\n        if not t.is_commutative:\n            if one_nc:\n                return\n            one_nc = True\n        if t.is_antihermitian:\n            real = not real\n        elif t.is_hermitian:\n            if not zero:\n                z = t.is_zero\n                if not z and zero is False:\n                    zero = z\n                elif z:\n                    if all((a.is_finite for a in self.args)):\n                        return True\n                    return\n        elif t.is_hermitian is False:\n            if one_neither:\n                return\n            one_neither = True\n        else:\n            return\n    if one_neither:\n        if real:\n            return zero\n    elif zero is False or real:\n        return real",
    ".sympy.core.mul.py@@Mul._eval_is_irrational": "def _eval_is_irrational(self):\n    for t in self.args:\n        a = t.is_irrational\n        if a:\n            others = list(self.args)\n            others.remove(t)\n            if all(((x.is_rational and fuzzy_not(x.is_zero)) is True for x in others)):\n                return True\n            return\n        if a is None:\n            return\n    return False",
    ".sympy.core.mul.py@@Mul._eval_is_infinite": "def _eval_is_infinite(self):\n    if any((a.is_infinite for a in self.args)):\n        if any((a.is_zero for a in self.args)):\n            return S.NaN.is_infinite\n        if any((a.is_zero is None for a in self.args)):\n            return None\n        return True",
    ".sympy.core.add.py@@Add._eval_is_nonpositive": "def _eval_is_nonpositive(self):\n    from sympy.core.exprtools import _monotonic_sign\n    if not self.is_number:\n        c, a = self.as_coeff_Add()\n        if not c.is_zero and a.is_nonpositive:\n            v = _monotonic_sign(a)\n            if v is not None:\n                s = v + c\n                if s.is_nonpositive:\n                    return True\n                if len(self.free_symbols) == 1:\n                    v = _monotonic_sign(self)\n                    if v is not None and v.is_nonpositive:\n                        return True",
    ".sympy.core.add.py@@Add._eval_is_imaginary": "def _eval_is_imaginary(self):\n    nz = []\n    im_I = []\n    for a in self.args:\n        if a.is_real:\n            if a.is_zero:\n                pass\n            elif a.is_zero is False:\n                nz.append(a)\n            else:\n                return\n        elif a.is_imaginary:\n            im_I.append(a * S.ImaginaryUnit)\n        elif (S.ImaginaryUnit * a).is_real:\n            im_I.append(a * S.ImaginaryUnit)\n        else:\n            return\n    if self.func(*nz).is_zero:\n        return fuzzy_not(self.func(*im_I).is_zero)\n    elif self.func(*nz).is_zero is False:\n        return False",
    ".sympy.core.add.py@@Add._eval_is_positive": "def _eval_is_positive(self):\n    from sympy.core.exprtools import _monotonic_sign\n    if self.is_number:\n        return super(Add, self)._eval_is_positive()\n    c, a = self.as_coeff_Add()\n    if not c.is_zero:\n        v = _monotonic_sign(a)\n        if v is not None:\n            s = v + c\n            if s.is_positive and a.is_nonnegative:\n                return True\n            if len(self.free_symbols) == 1:\n                v = _monotonic_sign(self)\n                if v is not None and v.is_positive:\n                    return True\n    pos = nonneg = nonpos = unknown_sign = False\n    saw_INF = set()\n    args = [a for a in self.args if not a.is_zero]\n    if not args:\n        return False\n    for a in args:\n        ispos = a.is_positive\n        infinite = a.is_infinite\n        if infinite:\n            saw_INF.add(fuzzy_or((ispos, a.is_nonnegative)))\n            if True in saw_INF and False in saw_INF:\n                return\n        if ispos:\n            pos = True\n            continue\n        elif a.is_nonnegative:\n            nonneg = True\n            continue\n        elif a.is_nonpositive:\n            nonpos = True\n            continue\n        if infinite is None:\n            return\n        unknown_sign = True\n    if saw_INF:\n        if len(saw_INF) > 1:\n            return\n        return saw_INF.pop()\n    elif unknown_sign:\n        return\n    elif not nonpos and (not nonneg) and pos:\n        return True\n    elif not nonpos and pos:\n        return True\n    elif not pos and (not nonneg):\n        return False",
    ".sympy.core.add.py@@Add._eval_is_irrational": "def _eval_is_irrational(self):\n    for t in self.args:\n        a = t.is_irrational\n        if a:\n            others = list(self.args)\n            others.remove(t)\n            if all((x.is_rational is True for x in others)):\n                return True\n            return None\n        if a is None:\n            return\n    return False",
    ".sympy.core.add.py@@Add._eval_is_odd": "def _eval_is_odd(self):\n    l = [f for f in self.args if not f.is_even is True]\n    if not l:\n        return False\n    if l[0].is_odd:\n        return self._new_rawargs(*l[1:]).is_even",
    ".sympy.core.add.py@@Add._eval_is_negative": "def _eval_is_negative(self):\n    from sympy.core.exprtools import _monotonic_sign\n    if self.is_number:\n        return super(Add, self)._eval_is_negative()\n    c, a = self.as_coeff_Add()\n    if not c.is_zero:\n        v = _monotonic_sign(a)\n        if v is not None:\n            s = v + c\n            if s.is_negative and a.is_nonpositive:\n                return True\n            if len(self.free_symbols) == 1:\n                v = _monotonic_sign(self)\n                if v is not None and v.is_negative:\n                    return True\n    neg = nonpos = nonneg = unknown_sign = False\n    saw_INF = set()\n    args = [a for a in self.args if not a.is_zero]\n    if not args:\n        return False\n    for a in args:\n        isneg = a.is_negative\n        infinite = a.is_infinite\n        if infinite:\n            saw_INF.add(fuzzy_or((isneg, a.is_nonpositive)))\n            if True in saw_INF and False in saw_INF:\n                return\n        if isneg:\n            neg = True\n            continue\n        elif a.is_nonpositive:\n            nonpos = True\n            continue\n        elif a.is_nonnegative:\n            nonneg = True\n            continue\n        if infinite is None:\n            return\n        unknown_sign = True\n    if saw_INF:\n        if len(saw_INF) > 1:\n            return\n        return saw_INF.pop()\n    elif unknown_sign:\n        return\n    elif not nonneg and (not nonpos) and neg:\n        return True\n    elif not nonneg and neg:\n        return True\n    elif not neg and (not nonpos):\n        return False",
    ".sympy.core.add.py@@Add._eval_is_nonnegative": "def _eval_is_nonnegative(self):\n    from sympy.core.exprtools import _monotonic_sign\n    if not self.is_number:\n        c, a = self.as_coeff_Add()\n        if not c.is_zero and a.is_nonnegative:\n            v = _monotonic_sign(a)\n            if v is not None:\n                s = v + c\n                if s.is_nonnegative:\n                    return True\n                if len(self.free_symbols) == 1:\n                    v = _monotonic_sign(self)\n                    if v is not None and v.is_nonnegative:\n                        return True",
    ".sympy.core.numbers.py@@Exp1._eval_power": "def _eval_power(self, expt):\n    from sympy import exp\n    return exp(expt)",
    ".sympy.core.basic.py@@Basic.is_comparable": "def is_comparable(self):\n    is_real = self.is_real\n    if is_real is False:\n        return False\n    is_number = self.is_number\n    if is_number is False:\n        return False\n    n, i = [p.evalf(2) if not p.is_Number else p for p in self.as_real_imag()]\n    if not i.is_Number or not n.is_Number:\n        return False\n    if i:\n        return False\n    else:\n        return n._prec != 1",
    ".sympy.core.operations.py@@AssocOp._new_rawargs": "def _new_rawargs(self, *args, **kwargs):\n    if kwargs.pop('reeval', True) and self.is_commutative is False:\n        is_commutative = None\n    else:\n        is_commutative = self.is_commutative\n    return self._from_args(args, is_commutative)",
    ".sympy.core.basic.py@@Basic.xreplace": "def xreplace(self, rule):\n    value, _ = self._xreplace(rule)\n    return value",
    ".sympy.core.basic.py@@Basic._xreplace": "def _xreplace(self, rule):\n    if self in rule:\n        return (rule[self], True)\n    elif rule:\n        args = []\n        changed = False\n        for a in self.args:\n            try:\n                a_xr = a._xreplace(rule)\n                args.append(a_xr[0])\n                changed |= a_xr[1]\n            except AttributeError:\n                args.append(a)\n        args = tuple(args)\n        if changed:\n            return (self.func(*args), True)\n    return (self, False)",
    ".sympy.core.expr.py@@Expr.as_powers_dict": "def as_powers_dict(self):\n    d = defaultdict(int)\n    d.update(dict([self.as_base_exp()]))\n    return d",
    ".sympy.simplify.cse_opts.py@@sub_post": "def sub_post(e):\n    replacements = []\n    for node in preorder_traversal(e):\n        if isinstance(node, Mul) and node.args[0] is S.One and (node.args[1] is S.NegativeOne):\n            replacements.append((node, -Mul._from_args(node.args[2:])))\n    for node, replacement in replacements:\n        e = e.xreplace({node: replacement})\n    return e",
    ".sympy.core.power.py@@Pow.base": "def base(self):\n    return self._args[0]",
    ".sympy.core.numbers.py@@Rational.__div__": "def __div__(self, other):\n    if isinstance(other, Integer):\n        if self.p and other.p == S.Zero:\n            return S.ComplexInfinity\n        else:\n            return Rational(self.p, self.q * other.p, igcd(self.p, other.p))\n    elif isinstance(other, Rational):\n        return Rational(self.p * other.q, self.q * other.p, igcd(self.p, other.p) * igcd(self.q, other.q))\n    elif isinstance(other, Float):\n        return self * (1 / other)\n    else:\n        return Number.__div__(self, other)",
    ".sympy.core.power.py@@Pow._eval_is_zero": "def _eval_is_zero(self):\n    if self.base.is_zero:\n        if self.exp.is_positive:\n            return True\n        elif self.exp.is_nonpositive:\n            return False\n    elif self.base.is_zero is False:\n        if self.exp.is_finite:\n            return False\n        elif self.exp.is_infinite:\n            if (1 - abs(self.base)).is_positive:\n                return self.exp.is_positive\n            elif (1 - abs(self.base)).is_negative:\n                return self.exp.is_negative\n    else:\n        return None",
    ".sympy.core.power.py@@Pow._eval_is_rational": "def _eval_is_rational(self):\n    p = self.func(*self.as_base_exp())\n    if not p.is_Pow:\n        return p.is_rational\n    b, e = p.as_base_exp()\n    if e.is_Rational and b.is_Rational:\n        return False\n    if e.is_integer:\n        if b.is_rational:\n            if fuzzy_not(b.is_zero) or e.is_nonnegative:\n                return True\n            if b == e:\n                return True\n        elif b.is_irrational:\n            return e.is_zero",
    ".sympy.core.power.py@@Pow._eval_is_real": "def _eval_is_real(self):\n    from sympy import arg, exp, log, Mul\n    real_b = self.base.is_real\n    if real_b is None:\n        if self.base.func == exp and self.base.args[0].is_imaginary:\n            return self.exp.is_imaginary\n        return\n    real_e = self.exp.is_real\n    if real_e is None:\n        return\n    if real_b and real_e:\n        if self.base.is_positive:\n            return True\n        elif self.base.is_nonnegative:\n            if self.exp.is_nonnegative:\n                return True\n        elif self.exp.is_integer:\n            return True\n        elif self.base.is_negative:\n            if self.exp.is_Rational:\n                return False\n    if real_e and self.exp.is_negative:\n        return Pow(self.base, -self.exp).is_real\n    im_b = self.base.is_imaginary\n    im_e = self.exp.is_imaginary\n    if im_b:\n        if self.exp.is_integer:\n            if self.exp.is_even:\n                return True\n            elif self.exp.is_odd:\n                return False\n        elif im_e and log(self.base).is_imaginary:\n            return True\n        elif self.exp.is_Add:\n            c, a = self.exp.as_coeff_Add()\n            if c and c.is_Integer:\n                return Mul(self.base ** c, self.base ** a, evaluate=False).is_real\n        elif self.base in (-S.ImaginaryUnit, S.ImaginaryUnit):\n            if (self.exp / 2).is_integer is False:\n                return False\n    if real_b and im_e:\n        if self.base is S.NegativeOne:\n            return True\n        c = self.exp.coeff(S.ImaginaryUnit)\n        if c:\n            ok = (c * log(self.base) / S.Pi).is_Integer\n            if ok is not None:\n                return ok\n    if real_b is False:\n        i = arg(self.base) * self.exp / S.Pi\n        return i.is_integer",
    ".sympy.core.power.py@@Pow._eval_is_complex": "def _eval_is_complex(self):\n    if all((a.is_complex for a in self.args)):\n        return True",
    ".sympy.core.power.py@@Pow._eval_is_even": "def _eval_is_even(self):\n    if self.exp.is_integer and self.exp.is_positive:\n        return self.base.is_even",
    ".sympy.core.power.py@@Pow._eval_is_algebraic": "def _eval_is_algebraic(self):\n    if self.base.is_zero or (self.base - 1).is_zero:\n        return True\n    elif self.exp.is_rational:\n        if self.base.is_algebraic is False:\n            return self.exp.is_nonzero\n        return self.base.is_algebraic\n    elif self.base.is_algebraic and self.exp.is_algebraic:\n        if fuzzy_not(self.base.is_zero) and fuzzy_not((self.base - 1).is_zero) or self.base.is_integer is False or self.base.is_irrational:\n            return self.exp.is_rational",
    ".sympy.core.expr.py@@Expr.__sub__": "def __sub__(self, other):\n    return Add(self, -other)",
    ".sympy.core.exprtools.py@@_monotonic_sign": "def _monotonic_sign(self):\n    if not self.is_real:\n        return\n    if (-self).is_Symbol:\n        rv = _monotonic_sign(-self)\n        return rv if rv is None else -rv\n    if not self.is_Add and self.as_numer_denom()[1].is_number:\n        s = self\n        if s.is_prime:\n            if s.is_odd:\n                return S(3)\n            else:\n                return S(2)\n        elif s.is_positive:\n            if s.is_even:\n                return S(2)\n            elif s.is_integer:\n                return S.One\n            else:\n                return _eps\n        elif s.is_negative:\n            if s.is_even:\n                return S(-2)\n            elif s.is_integer:\n                return S.NegativeOne\n            else:\n                return -_eps\n        if s.is_zero or s.is_nonpositive or s.is_nonnegative:\n            return S.Zero\n        return None\n    free = self.free_symbols\n    if len(free) == 1:\n        if self.is_polynomial():\n            from sympy.polys.polytools import real_roots\n            from sympy.polys.polyroots import roots\n            from sympy.polys.polyerrors import PolynomialError\n            x = free.pop()\n            x0 = _monotonic_sign(x)\n            if x0 == _eps or x0 == -_eps:\n                x0 = S.Zero\n            if x0 is not None:\n                d = self.diff(x)\n                if d.is_number:\n                    roots = []\n                else:\n                    try:\n                        roots = real_roots(d)\n                    except (PolynomialError, NotImplementedError):\n                        roots = [r for r in roots(d, x) if r.is_real]\n                y = self.subs(x, x0)\n                if x.is_nonnegative and all((r <= x0 for r in roots)):\n                    if y.is_nonnegative and d.is_positive:\n                        if y:\n                            return y if y.is_positive else Dummy('pos', positive=True)\n                        else:\n                            return Dummy('nneg', nonnegative=True)\n                    if y.is_nonpositive and d.is_negative:\n                        if y:\n                            return y if y.is_negative else Dummy('neg', negative=True)\n                        else:\n                            return Dummy('npos', nonpositive=True)\n                elif x.is_nonpositive and all((r >= x0 for r in roots)):\n                    if y.is_nonnegative and d.is_negative:\n                        if y:\n                            return Dummy('pos', positive=True)\n                        else:\n                            return Dummy('nneg', nonnegative=True)\n                    if y.is_nonpositive and d.is_positive:\n                        if y:\n                            return Dummy('neg', negative=True)\n                        else:\n                            return Dummy('npos', nonpositive=True)\n        else:\n            n, d = self.as_numer_denom()\n            den = None\n            if n.is_number:\n                den = _monotonic_sign(d)\n            elif not d.is_number:\n                if _monotonic_sign(n) is not None:\n                    den = _monotonic_sign(d)\n            if den is not None and (den.is_positive or den.is_negative):\n                v = n * den\n                if v.is_positive:\n                    return Dummy('pos', positive=True)\n                elif v.is_nonnegative:\n                    return Dummy('nneg', nonnegative=True)\n                elif v.is_negative:\n                    return Dummy('neg', negative=True)\n                elif v.is_nonpositive:\n                    return Dummy('npos', nonpositive=True)\n        return None\n    c, a = self.as_coeff_Add()\n    v = None\n    if not a.is_polynomial():\n        n, d = a.as_numer_denom()\n        if not (n.is_number or d.is_number):\n            return\n        if (a.is_Mul or a.is_Pow) and a.is_rational and all((p.exp.is_Integer for p in a.atoms(Pow) if p.is_Pow)) and (a.is_positive or a.is_negative):\n            v = S(1)\n            for ai in Mul.make_args(a):\n                if ai.is_number:\n                    v *= ai\n                    continue\n                reps = {}\n                for x in ai.free_symbols:\n                    reps[x] = _monotonic_sign(x)\n                    if reps[x] is None:\n                        return\n                v *= ai.subs(reps)\n    elif c:\n        if not any((p for p in a.atoms(Pow) if not p.is_number)) and (a.is_nonpositive or a.is_nonnegative):\n            free = list(a.free_symbols)\n            p = {}\n            for i in free:\n                v = _monotonic_sign(i)\n                if v is None:\n                    return\n                p[i] = v or (_eps if i.is_nonnegative else -_eps)\n            v = a.xreplace(p)\n    if v is not None:\n        rv = v + c\n        if v.is_nonnegative and rv.is_positive:\n            return rv.subs(_eps, 0)\n        if v.is_nonpositive and rv.is_negative:\n            return rv.subs(_eps, 0)",
    ".sympy.core.power.py@@Pow._eval_is_prime": "def _eval_is_prime(self):\n    if self.exp == S.One:\n        return self.base.is_prime\n    if self.is_number:\n        return self.doit().is_prime\n    if self.is_integer and self.is_positive:\n        '\\n        a Power will be non-prime only if both base and exponent\\n        are greater than 1\\n        '\n        if (self.base - 1).is_positive or (self.exp - 1).is_positive:\n            return False",
    ".sympy.core.power.py@@Pow._eval_is_integer": "def _eval_is_integer(self):\n    b, e = self.args\n    if b.is_rational:\n        if b.is_integer is False and e.is_positive:\n            return False\n    if b.is_integer and e.is_integer:\n        if b is S.NegativeOne:\n            return True\n        if e.is_nonnegative or e.is_positive:\n            return True\n    if b.is_integer and e.is_negative and (e.is_finite or e.is_integer):\n        if fuzzy_not((b - 1).is_zero) and fuzzy_not((b + 1).is_zero):\n            return False\n    if b.is_Number and e.is_Number:\n        check = self.func(*self.args)\n        return check.is_Integer",
    ".sympy.core.power.py@@Pow._eval_is_odd": "def _eval_is_odd(self):\n    if self.exp.is_integer:\n        if self.exp.is_positive:\n            return self.base.is_odd\n        elif self.exp.is_nonnegative and self.base.is_odd:\n            return True\n        elif self.base is S.NegativeOne:\n            return True",
    ".sympy.core.power.py@@Pow._eval_is_imaginary": "def _eval_is_imaginary(self):\n    from sympy import arg, log\n    if self.base.is_imaginary:\n        if self.exp.is_integer:\n            odd = self.exp.is_odd\n            if odd is not None:\n                return odd\n            return\n    if self.exp.is_imaginary:\n        imlog = log(self.base).is_imaginary\n        if imlog is not None:\n            return False\n    if self.base.is_real and self.exp.is_real:\n        if self.base.is_positive:\n            return False\n        else:\n            rat = self.exp.is_rational\n            if not rat:\n                return rat\n            if self.exp.is_integer:\n                return False\n            else:\n                half = (2 * self.exp).is_integer\n                if half:\n                    return self.base.is_negative\n                return half\n    if self.base.is_real is False:\n        i = arg(self.base) * self.exp / S.Pi\n        isodd = (2 * i).is_odd\n        if isodd is not None:\n            return isodd\n    if self.exp.is_negative:\n        return (1 / self).is_imaginary",
    ".sympy.core.expr.py@@Expr.__rdiv__": "def __rdiv__(self, other):\n    return Mul(other, Pow(self, S.NegativeOne))",
    ".sympy.core.power.py@@Pow._eval_power": "def _eval_power(self, other):\n    from sympy import Abs, arg, exp, floor, im, log, re, sign\n    b, e = self.as_base_exp()\n    if b is S.NaN:\n        return (b ** e) ** other\n    s = None\n    if other.is_integer:\n        s = 1\n    elif b.is_polar:\n        s = 1\n    elif e.is_real is not None:\n\n        def _half(e):\n            if getattr(e, 'q', None) == 2:\n                return True\n            n, d = e.as_numer_denom()\n            if n.is_integer and d == 2:\n                return True\n\n        def _n2(e):\n            try:\n                rv = e.evalf(2, strict=True)\n                if rv.is_Number:\n                    return rv\n            except PrecisionExhausted:\n                pass\n        if e.is_real:\n            if (e == -1) == True:\n                if _half(other):\n                    if b.is_negative is True:\n                        return S.NegativeOne ** other * Pow(-b, e * other)\n                    if b.is_real is False:\n                        return Pow(b.conjugate() / Abs(b) ** 2, other)\n            elif e.is_even:\n                if b.is_real:\n                    b = abs(b)\n                if b.is_imaginary:\n                    b = abs(im(b)) * S.ImaginaryUnit\n            if (abs(e) < 1) == True or (e == 1) == True:\n                s = 1\n            elif b.is_nonnegative:\n                s = 1\n            elif re(b).is_nonnegative and (abs(e) < 2) == True:\n                s = 1\n            elif fuzzy_not(im(b).is_zero) and (abs(e) == 2) == True:\n                s = 1\n            elif _half(other):\n                s = exp(2 * S.Pi * S.ImaginaryUnit * other * floor(S.Half - e * arg(b) / (2 * S.Pi)))\n                if s.is_real and _n2(sign(s) - s) == 0:\n                    s = sign(s)\n                else:\n                    s = None\n        else:\n            try:\n                s = exp(2 * S.ImaginaryUnit * S.Pi * other * floor(S.Half - im(e * log(b)) / 2 / S.Pi))\n                if s.is_real and _n2(sign(s) - s) == 0:\n                    s = sign(s)\n                else:\n                    s = None\n            except PrecisionExhausted:\n                s = None\n    if s is not None:\n        return s * Pow(b, e * other)",
    ".sympy.core.expr.py@@Expr.__rmul__": "def __rmul__(self, other):\n    return Mul(other, self)",
    ".sympy.core.power.py@@Pow._eval_is_positive": "def _eval_is_positive(self):\n    from sympy import log\n    if self.base == self.exp:\n        if self.base.is_nonnegative:\n            return True\n    elif self.base.is_positive:\n        if self.exp.is_real:\n            return True\n    elif self.base.is_negative:\n        if self.exp.is_even:\n            return True\n        if self.exp.is_odd:\n            return False\n    elif self.base.is_nonpositive:\n        if self.exp.is_odd:\n            return False\n    elif self.base.is_imaginary:\n        if self.exp.is_integer:\n            m = self.exp % 4\n            if m.is_zero:\n                return True\n            if m.is_integer and m.is_zero is False:\n                return False\n        if self.exp.is_imaginary:\n            return log(self.base).is_imaginary",
    ".sympy.core.power.py@@Pow._eval_is_negative": "def _eval_is_negative(self):\n    if self.base.is_negative:\n        if self.exp.is_odd:\n            return True\n        if self.exp.is_even:\n            return False\n    elif self.base.is_positive:\n        if self.exp.is_real:\n            return False\n    elif self.base.is_nonnegative:\n        if self.exp.is_nonnegative:\n            return False\n    elif self.base.is_nonpositive:\n        if self.exp.is_even:\n            return False\n    elif self.base.is_real:\n        if self.exp.is_even:\n            return False",
    ".sympy.core.power.py@@Pow._eval_is_finite": "def _eval_is_finite(self):\n    if self.exp.is_negative:\n        if self.base.is_zero:\n            return False\n        if self.base.is_infinite:\n            return True\n    c1 = self.base.is_finite\n    if c1 is None:\n        return\n    c2 = self.exp.is_finite\n    if c2 is None:\n        return\n    if c1 and c2:\n        if self.exp.is_nonnegative or fuzzy_not(self.base.is_zero):\n            return True",
    ".sympy.core.mul.py@@Mul._eval_power": "def _eval_power(b, e):\n    cargs, nc = b.args_cnc(split_1=False)\n    if e.is_Integer:\n        return Mul(*[Pow(b, e, evaluate=False) for b in cargs]) * Pow(Mul._from_args(nc), e, evaluate=False)\n    p = Pow(b, e, evaluate=False)\n    if e.is_Rational or e.is_Float:\n        return p._eval_expand_power_base()\n    return p",
    ".sympy.core.basic.py@@Atom.xreplace": "def xreplace(self, rule, hack2=False):\n    return rule.get(self, self)",
    ".sympy.simplify.cse_main.py@@get_copy": "def get_copy(i):\n    return [func_dicts[i].copy(), func_args[i].copy(), funcs[i], i]",
    ".sympy.simplify.cse_main.py@@update": "def update(k):\n    for di in com_dict:\n        if com_dict[di] > func_dicts[k][di]:\n            return\n    if Func is Add:\n        take = min((func_dicts[k][i] for i in com_dict))\n        com_func_take = Mul(take, from_dict(com_dict), evaluate=False)\n    else:\n        take = igcd(*[func_dicts[k][i] for i in com_dict])\n        com_func_take = Pow(from_dict(com_dict), take, evaluate=False)\n    for di in com_dict:\n        func_dicts[k][di] -= take * com_dict[di]\n    rem = from_dict(func_dicts[k])\n    if Func is Add and rem and rem.is_Integer and (1 in com_dict):\n        return\n    if verbose:\n        print('\\nfunc %s (%s) \\ncontains %s \\nas %s \\nleaving %s' % (funcs[k], func_dicts[k], com_func, com_func_take, rem))\n    func_dicts[k] = as_dict(rem)\n    func_dicts[k][com_func] = take\n    func_args[k] = set(func_dicts[k])\n    opt_subs[funcs[k]] = ufunc(rem, com_func_take)\n    return True",
    ".sympy.simplify.cse_main.py@@from_dict": "def from_dict(d):\n    return ufunc(*[F(k, v) for k, v in d.items()])",
    ".sympy.simplify.cse_main.py@@ufunc": "def ufunc(*args):\n    args = list(args)\n    inplace_sorter(args)\n    return Func(*args, evaluate=False)",
    ".sympy.core.numbers.py@@Integer.__rmul__": "def __rmul__(self, other):\n    if isinstance(other, integer_types):\n        return Integer(other * self.p)\n    elif isinstance(other, Rational):\n        return Rational(other.p * self.p, other.q, igcd(self.p, other.q))\n    return Rational.__rmul__(self, other)",
    ".sympy.core.expr.py@@Expr.as_coefficients_dict": "def as_coefficients_dict(self):\n    c, m = self.as_coeff_Mul()\n    if not c.is_Rational:\n        c = S.One\n        m = self\n    d = defaultdict(int)\n    d.update({m: c})\n    return d",
    ".sympy.simplify.cse_main.py@@restore": "def restore(dafi):\n    i = dafi.pop()\n    func_dicts[i], func_args[i], funcs[i] = dafi",
    ".sympy.core.mul.py@@Mul.as_base_exp": "def as_base_exp(self):\n    e1 = None\n    bases = []\n    nc = 0\n    for m in self.args:\n        b, e = m.as_base_exp()\n        if not b.is_commutative:\n            nc += 1\n        if e1 is None:\n            e1 = e\n        elif e != e1 or nc > 1:\n            return (self, S.One)\n        bases.append(b)\n    return (self.func(*bases), e1)",
    ".sympy.core.exprtools.py@@factor_terms": "def factor_terms(expr, radical=False, clear=False, fraction=False, sign=True):\n\n    def do(expr):\n        is_iterable = iterable(expr)\n        if not isinstance(expr, Basic) or expr.is_Atom:\n            if is_iterable:\n                return type(expr)([do(i) for i in expr])\n            return expr\n        if expr.is_Pow or expr.is_Function or is_iterable or (not hasattr(expr, 'args_cnc')):\n            args = expr.args\n            newargs = tuple([do(i) for i in args])\n            if newargs == args:\n                return expr\n            return expr.func(*newargs)\n        cont, p = expr.as_content_primitive(radical=radical, clear=clear)\n        if p.is_Add:\n            list_args = [do(a) for a in Add.make_args(p)]\n            if all((a.as_coeff_Mul()[0] < 0 for a in list_args)):\n                cont = -cont\n                list_args = [-a for a in list_args]\n            special = {}\n            for i, a in enumerate(list_args):\n                b, e = a.as_base_exp()\n                if e.is_Mul and e != Mul(*e.args):\n                    list_args[i] = Dummy()\n                    special[list_args[i]] = a\n            p = Add._from_args(list_args)\n            p = gcd_terms(p, isprimitive=True, clear=clear, fraction=fraction).xreplace(special)\n        elif p.args:\n            p = p.func(*[do(a) for a in p.args])\n        rv = _keep_coeff(cont, p, clear=clear, sign=sign)\n        return rv\n    expr = sympify(expr)\n    return do(expr)",
    ".sympy.core.exprtools.py@@do": "def do(expr):\n    is_iterable = iterable(expr)\n    if not isinstance(expr, Basic) or expr.is_Atom:\n        if is_iterable:\n            return type(expr)([do(i) for i in expr])\n        return expr\n    if expr.is_Pow or expr.is_Function or is_iterable or (not hasattr(expr, 'args_cnc')):\n        args = expr.args\n        newargs = tuple([do(i) for i in args])\n        if newargs == args:\n            return expr\n        return expr.func(*newargs)\n    cont, p = expr.as_content_primitive(radical=radical, clear=clear)\n    if p.is_Add:\n        list_args = [do(a) for a in Add.make_args(p)]\n        if all((a.as_coeff_Mul()[0] < 0 for a in list_args)):\n            cont = -cont\n            list_args = [-a for a in list_args]\n        special = {}\n        for i, a in enumerate(list_args):\n            b, e = a.as_base_exp()\n            if e.is_Mul and e != Mul(*e.args):\n                list_args[i] = Dummy()\n                special[list_args[i]] = a\n        p = Add._from_args(list_args)\n        p = gcd_terms(p, isprimitive=True, clear=clear, fraction=fraction).xreplace(special)\n    elif p.args:\n        p = p.func(*[do(a) for a in p.args])\n    rv = _keep_coeff(cont, p, clear=clear, sign=sign)\n    return rv",
    ".sympy.core.add.py@@Add.as_content_primitive": "def as_content_primitive(self, radical=False, clear=True):\n    con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(radical=radical, clear=clear)) for a in self.args]).primitive()\n    if not clear and (not con.is_Integer) and prim.is_Add:\n        con, d = con.as_numer_denom()\n        _p = prim / d\n        if any((a.as_coeff_Mul()[0].is_Integer for a in _p.args)):\n            prim = _p\n        else:\n            con /= d\n    if radical and prim.is_Add:\n        args = prim.args\n        rads = []\n        common_q = None\n        for m in args:\n            term_rads = defaultdict(list)\n            for ai in Mul.make_args(m):\n                if ai.is_Pow:\n                    b, e = ai.as_base_exp()\n                    if e.is_Rational and b.is_Integer:\n                        term_rads[e.q].append(abs(int(b)) ** e.p)\n            if not term_rads:\n                break\n            if common_q is None:\n                common_q = set(term_rads.keys())\n            else:\n                common_q = common_q & set(term_rads.keys())\n                if not common_q:\n                    break\n            rads.append(term_rads)\n        else:\n            for r in rads:\n                for q in list(r.keys()):\n                    if q not in common_q:\n                        r.pop(q)\n                for q in r:\n                    r[q] = prod(r[q])\n            G = []\n            for q in common_q:\n                g = reduce(igcd, [r[q] for r in rads], 0)\n                if g != 1:\n                    G.append(g ** Rational(1, q))\n            if G:\n                G = Mul(*G)\n                args = [ai / G for ai in args]\n                prim = G * prim.func(*args)\n    return (con, prim)",
    ".sympy.core.mul.py@@Mul.as_content_primitive": "def as_content_primitive(self, radical=False, clear=True):\n    coef = S.One\n    args = []\n    for i, a in enumerate(self.args):\n        c, p = a.as_content_primitive(radical=radical, clear=clear)\n        coef *= c\n        if p is not S.One:\n            args.append(p)\n    return (coef, self.func(*args))",
    ".sympy.core.expr.py@@Expr.as_content_primitive": "def as_content_primitive(self, radical=False, clear=True):\n    return (S.One, self)",
    ".sympy.core.power.py@@Pow.as_content_primitive": "def as_content_primitive(self, radical=False, clear=True):\n    b, e = self.as_base_exp()\n    b = _keep_coeff(*b.as_content_primitive(radical=radical, clear=clear))\n    ce, pe = e.as_content_primitive(radical=radical, clear=clear)\n    if b.is_Rational:\n        h, t = pe.as_coeff_Add()\n        if h.is_Rational:\n            ceh = ce * h\n            c = self.func(b, ceh)\n            r = S.Zero\n            if not c.is_Rational:\n                iceh, r = divmod(ceh.p, ceh.q)\n                c = self.func(b, iceh)\n            return (c, self.func(b, _keep_coeff(ce, t + r / ce / ceh.q)))\n    e = _keep_coeff(ce, pe)\n    if e.is_Rational and b.is_Mul:\n        h, t = b.as_content_primitive(radical=radical, clear=clear)\n        c, m = self.func(h, e).as_coeff_Mul()\n        m, me = m.as_base_exp()\n        if m is S.One or me == e:\n            return (c, self.func(_keep_coeff(m, t), e))\n    return (S.One, self.func(b, e))",
    ".sympy.core.numbers.py@@Rational.as_content_primitive": "def as_content_primitive(self, radical=False, clear=True):\n    if self:\n        if self.is_positive:\n            return (self, S.One)\n        return (-self, S.NegativeOne)\n    return (S.One, self)",
    ".sympy.core.exprtools.py@@gcd_terms": "def gcd_terms(terms, isprimitive=False, clear=True, fraction=True):\n\n    def mask(terms):\n        args = [(a, []) if a.is_commutative else a.args_cnc() for a in terms]\n        reps = []\n        for i, (c, nc) in enumerate(args):\n            if nc:\n                nc = Mul._from_args(nc)\n                d = Dummy()\n                reps.append((d, nc))\n                c.append(d)\n                args[i] = Mul._from_args(c)\n            else:\n                args[i] = c\n        return (args, dict(reps))\n    isadd = isinstance(terms, Add)\n    addlike = isadd or (not isinstance(terms, Basic) and is_sequence(terms, include=set) and (not isinstance(terms, Dict)))\n    if addlike:\n        if isadd:\n            terms = list(terms.args)\n        else:\n            terms = sympify(terms)\n        terms, reps = mask(terms)\n        cont, numer, denom = _gcd_terms(terms, isprimitive, fraction)\n        numer = numer.xreplace(reps)\n        coeff, factors = cont.as_coeff_Mul()\n        if not clear:\n            c, _coeff = coeff.as_coeff_Mul()\n            if not c.is_Integer and (not clear) and numer.is_Add:\n                n, d = c.as_numer_denom()\n                _numer = numer / d\n                if any((a.as_coeff_Mul()[0].is_Integer for a in _numer.args)):\n                    numer = _numer\n                    coeff = n * _coeff\n        return _keep_coeff(coeff, factors * numer / denom, clear=clear)\n    if not isinstance(terms, Basic):\n        return terms\n    if terms.is_Atom:\n        return terms\n    if terms.is_Mul:\n        c, args = terms.as_coeff_mul()\n        return _keep_coeff(c, Mul(*[gcd_terms(i, isprimitive, clear, fraction) for i in args]), clear=clear)\n\n    def handle(a):\n        if not isinstance(a, Expr):\n            if isinstance(a, Basic):\n                return a.func(*[handle(i) for i in a.args])\n            return type(a)([handle(i) for i in a])\n        return gcd_terms(a, isprimitive, clear, fraction)\n    if isinstance(terms, Dict):\n        return Dict(*[(k, handle(v)) for k, v in terms.args])\n    return terms.func(*[handle(i) for i in terms.args])",
    ".sympy.core.exprtools.py@@mask": "def mask(terms):\n    args = [(a, []) if a.is_commutative else a.args_cnc() for a in terms]\n    reps = []\n    for i, (c, nc) in enumerate(args):\n        if nc:\n            nc = Mul._from_args(nc)\n            d = Dummy()\n            reps.append((d, nc))\n            c.append(d)\n            args[i] = Mul._from_args(c)\n        else:\n            args[i] = c\n    return (args, dict(reps))",
    ".sympy.core.exprtools.py@@_gcd_terms": "def _gcd_terms(terms, isprimitive=False, fraction=True):\n    if isinstance(terms, Basic) and (not isinstance(terms, Tuple)):\n        terms = Add.make_args(terms)\n    terms = list(map(Term, [t for t in terms if t]))\n    if len(terms) == 0:\n        return (S.Zero, S.Zero, S.One)\n    if len(terms) == 1:\n        cont = terms[0].coeff\n        numer = terms[0].numer.as_expr()\n        denom = terms[0].denom.as_expr()\n    else:\n        cont = terms[0]\n        for term in terms[1:]:\n            cont = cont.gcd(term)\n        for i, term in enumerate(terms):\n            terms[i] = term.quo(cont)\n        if fraction:\n            denom = terms[0].denom\n            for term in terms[1:]:\n                denom = denom.lcm(term.denom)\n            numers = []\n            for term in terms:\n                numer = term.numer.mul(denom.quo(term.denom))\n                numers.append(term.coeff * numer.as_expr())\n        else:\n            numers = [t.as_expr() for t in terms]\n            denom = Term(S(1)).numer\n        cont = cont.as_expr()\n        numer = Add(*numers)\n        denom = denom.as_expr()\n    if not isprimitive and numer.is_Add:\n        _cont, numer = numer.primitive()\n        cont *= _cont\n    return (cont, numer, denom)",
    ".sympy.core.exprtools.py@@Term.__init__": "def __init__(self, term, numer=None, denom=None):\n    if numer is None and denom is None:\n        if not term.is_commutative:\n            raise NonCommutativeExpression('commutative expression expected')\n        coeff, factors = term.as_coeff_mul()\n        numer, denom = (defaultdict(int), defaultdict(int))\n        for factor in factors:\n            base, exp = decompose_power(factor)\n            if base.is_Add:\n                cont, base = base.primitive()\n                coeff *= cont ** exp\n            if exp > 0:\n                numer[base] += exp\n            else:\n                denom[base] += -exp\n        numer = Factors(numer)\n        denom = Factors(denom)\n    else:\n        coeff = term\n        if numer is None:\n            numer = Factors()\n        if denom is None:\n            denom = Factors()\n    self.coeff = coeff\n    self.numer = numer\n    self.denom = denom",
    ".sympy.core.expr.py@@Expr.as_coeff_mul": "def as_coeff_mul(self, *deps, **kwargs):\n    if deps:\n        if not self.has(*deps):\n            return (self, tuple())\n    return (S.One, (self,))",
    ".sympy.core.exprtools.py@@Factors.__init__": "def __init__(self, factors=None):\n    if isinstance(factors, (SYMPY_INTS, float)):\n        factors = S(factors)\n    if isinstance(factors, Factors):\n        factors = factors.factors.copy()\n    elif factors is None or factors is S.One:\n        factors = {}\n    elif factors is S.Zero or factors == 0:\n        factors = {S.Zero: S.One}\n    elif isinstance(factors, Number):\n        n = factors\n        factors = {}\n        if n < 0:\n            factors[S.NegativeOne] = S.One\n            n = -n\n        if n is not S.One:\n            if n.is_Float or n.is_Integer or n is S.Infinity:\n                factors[n] = S.One\n            elif n.is_Rational:\n                if n.p != 1:\n                    factors[Integer(n.p)] = S.One\n                factors[Integer(n.q)] = S.NegativeOne\n            else:\n                raise ValueError('Expected Float|Rational|Integer, not %s' % n)\n    elif isinstance(factors, Basic) and (not factors.args):\n        factors = {factors: S.One}\n    elif isinstance(factors, Expr):\n        c, nc = factors.args_cnc()\n        i = c.count(I)\n        for _ in range(i):\n            c.remove(I)\n        factors = dict(Mul._from_args(c).as_powers_dict())\n        if i:\n            factors[I] = S.One * i\n        if nc:\n            factors[Mul(*nc, evaluate=False)] = S.One\n    else:\n        factors = factors.copy()\n        handle = []\n        for k in factors:\n            if k is I or k in (-1, 1):\n                handle.append(k)\n        if handle:\n            i1 = S.One\n            for k in handle:\n                if not _isnumber(factors[k]):\n                    continue\n                i1 *= k ** factors.pop(k)\n            if i1 is not S.One:\n                for a in i1.args if i1.is_Mul else [i1]:\n                    if a is S.NegativeOne:\n                        factors[a] = S.One\n                    elif a is I:\n                        factors[I] = S.One\n                    elif a.is_Pow:\n                        if S.NegativeOne not in factors:\n                            factors[S.NegativeOne] = S.Zero\n                        factors[S.NegativeOne] += a.exp\n                    elif a == 1:\n                        factors[a] = S.One\n                    elif a == -1:\n                        factors[-a] = S.One\n                        factors[S.NegativeOne] = S.One\n                    else:\n                        raise ValueError('unexpected factor in i1: %s' % a)\n    self.factors = factors\n    try:\n        self.gens = frozenset(factors.keys())\n    except AttributeError:\n        raise TypeError('expecting Expr or dictionary')",
    ".sympy.core.mul.py@@Mul.as_coeff_mul": "def as_coeff_mul(self, *deps, **kwargs):\n    rational = kwargs.pop('rational', True)\n    if deps:\n        l1 = []\n        l2 = []\n        for f in self.args:\n            if f.has(*deps):\n                l2.append(f)\n            else:\n                l1.append(f)\n        return (self._new_rawargs(*l1), tuple(l2))\n    args = self.args\n    if args[0].is_Number:\n        if not rational or args[0].is_Rational:\n            return (args[0], args[1:])\n        elif args[0].is_negative:\n            return (S.NegativeOne, (-args[0],) + args[1:])\n    return (S.One, args)",
    ".sympy.core.exprtools.py@@Term.gcd": "def gcd(self, other):\n    return Term(self.coeff.gcd(other.coeff), self.numer.gcd(other.numer), self.denom.gcd(other.denom))",
    ".sympy.core.numbers.py@@Rational.gcd": "def gcd(self, other):\n    if isinstance(other, Rational):\n        if other is S.Zero:\n            return other\n        return Rational(Integer(igcd(self.p, other.p)), Integer(ilcm(self.q, other.q)))\n    return Number.gcd(self, other)",
    ".sympy.core.exprtools.py@@Factors.gcd": "def gcd(self, other):\n    if not isinstance(other, Factors):\n        other = Factors(other)\n        if other.is_zero:\n            return Factors(self.factors)\n    factors = {}\n    for factor, exp in self.factors.items():\n        factor, exp = (sympify(factor), sympify(exp))\n        if factor in other.factors:\n            lt = (exp - other.factors[factor]).is_negative\n            if lt == True:\n                factors[factor] = exp\n            elif lt == False:\n                factors[factor] = other.factors[factor]\n    return Factors(factors)",
    ".sympy.core.exprtools.py@@Term.quo": "def quo(self, other):\n    return self.mul(other.inv())",
    ".sympy.core.exprtools.py@@Term.inv": "def inv(self):\n    return Term(1 / self.coeff, self.denom, self.numer)",
    ".sympy.core.exprtools.py@@Term.mul": "def mul(self, other):\n    coeff = self.coeff * other.coeff\n    numer = self.numer.mul(other.numer)\n    denom = self.denom.mul(other.denom)\n    numer, denom = numer.normal(denom)\n    return Term(coeff, numer, denom)",
    ".sympy.core.exprtools.py@@Factors.mul": "def mul(self, other):\n    if not isinstance(other, Factors):\n        other = Factors(other)\n    if any((f.is_zero for f in (self, other))):\n        return Factors(S.Zero)\n    factors = dict(self.factors)\n    for factor, exp in other.factors.items():\n        if factor in factors:\n            exp = factors[factor] + exp\n            if not exp:\n                del factors[factor]\n                continue\n        factors[factor] = exp\n    return Factors(factors)",
    ".sympy.core.exprtools.py@@Factors.is_zero": "def is_zero(self):\n    f = self.factors\n    return len(f) == 1 and S.Zero in f",
    ".sympy.core.exprtools.py@@Factors.normal": "def normal(self, other):\n    if not isinstance(other, Factors):\n        other = Factors(other)\n        if other.is_zero:\n            return (Factors(), Factors(S.Zero))\n        if self.is_zero:\n            return (Factors(S.Zero), Factors())\n    self_factors = dict(self.factors)\n    other_factors = dict(other.factors)\n    for factor, self_exp in self.factors.items():\n        try:\n            other_exp = other.factors[factor]\n        except KeyError:\n            continue\n        exp = self_exp - other_exp\n        if not exp:\n            del self_factors[factor]\n            del other_factors[factor]\n        elif _isnumber(exp):\n            if exp > 0:\n                self_factors[factor] = exp\n                del other_factors[factor]\n            else:\n                del self_factors[factor]\n                other_factors[factor] = -exp\n        else:\n            r = self_exp.extract_additively(other_exp)\n            if r is not None:\n                if r:\n                    self_factors[factor] = r\n                    del other_factors[factor]\n                else:\n                    del self_factors[factor]\n                    del other_factors[factor]\n            else:\n                sc, sa = self_exp.as_coeff_Add()\n                if sc:\n                    oc, oa = other_exp.as_coeff_Add()\n                    diff = sc - oc\n                    if diff > 0:\n                        self_factors[factor] -= oc\n                        other_exp = oa\n                    elif diff < 0:\n                        self_factors[factor] -= sc\n                        other_factors[factor] -= sc\n                        other_exp = oa - diff\n                    else:\n                        self_factors[factor] = sa\n                        other_exp = oa\n                if other_exp:\n                    other_factors[factor] = other_exp\n                else:\n                    del other_factors[factor]\n    return (Factors(self_factors), Factors(other_factors))",
    ".sympy.core.exprtools.py@@Term.as_expr": "def as_expr(self):\n    return self.coeff * (self.numer.as_expr() / self.denom.as_expr())",
    ".sympy.core.exprtools.py@@Factors.as_expr": "def as_expr(self):\n    args = []\n    for factor, exp in self.factors.items():\n        if exp != 1:\n            b, e = factor.as_base_exp()\n            if isinstance(exp, int):\n                e = _keep_coeff(Integer(exp), e)\n            elif isinstance(exp, Rational):\n                e = _keep_coeff(exp, e)\n            else:\n                e *= exp\n            args.append(b ** e)\n        else:\n            args.append(factor)\n    return Mul(*args)",
    ".sympy.core.numbers.py@@Number.as_coeff_mul": "def as_coeff_mul(self, *deps, **kwargs):\n    if self.is_Rational or not kwargs.pop('rational', True):\n        return (self, tuple())\n    elif self.is_negative:\n        return (S.NegativeOne, (-self,))\n    return (S.One, (self,))",
    ".sympy.core.numbers.py@@Number.__div__": "def __div__(self, other):\n    if isinstance(other, Number):\n        if other is S.NaN:\n            return S.NaN\n        elif other is S.Infinity or other is S.NegativeInfinity:\n            return S.Zero\n    return AtomicExpr.__div__(self, other)",
    ".sympy.core.numbers.py@@Integer.__rsub__": "def __rsub__(self, other):\n    if isinstance(other, integer_types):\n        return Integer(other - self.p)\n    elif isinstance(other, Rational):\n        return Rational(other.p - self.p * other.q, other.q, 1)\n    return Rational.__rsub__(self, other)",
    ".sympy.core.exprtools.py@@_isnumber": "def _isnumber(i):\n    return isinstance(i, (SYMPY_INTS, float)) or i.is_Number",
    ".sympy.simplify.radsimp.py@@denom": "def denom(expr):\n    return fraction(expr)[1]",
    ".sympy.simplify.radsimp.py@@fraction": "def fraction(expr, exact=False):\n    expr = sympify(expr)\n    numer, denom = ([], [])\n    for term in Mul.make_args(expr):\n        if term.is_commutative and (term.is_Pow or term.func is exp):\n            b, ex = term.as_base_exp()\n            if ex.is_negative:\n                if ex is S.NegativeOne:\n                    denom.append(b)\n                elif exact:\n                    if ex.is_constant():\n                        denom.append(Pow(b, -ex))\n                    else:\n                        numer.append(term)\n                else:\n                    denom.append(Pow(b, -ex))\n            elif ex.is_positive:\n                numer.append(term)\n            elif not exact and ex.is_Mul:\n                n, d = term.as_numer_denom()\n                numer.append(n)\n                denom.append(d)\n            else:\n                numer.append(term)\n        elif term.is_Rational:\n            n, d = term.as_numer_denom()\n            numer.append(n)\n            denom.append(d)\n        else:\n            numer.append(term)\n    if exact:\n        return (Mul(*numer, evaluate=False), Mul(*denom, evaluate=False))\n    else:\n        return (Mul(*numer), Mul(*denom))",
    ".sympy.core.function.py@@Function.as_base_exp": "def as_base_exp(self):\n    return (self, S.One)",
    ".sympy.core.expr.py@@Expr.__radd__": "def __radd__(self, other):\n    return Add(other, self)",
    ".sympy.core.expr.py@@Expr.__int__": "def __int__(self):\n    from sympy import Dummy\n    if not self.is_number:\n        raise TypeError(\"can't convert symbols to int\")\n    r = self.round(2)\n    if not r.is_Number:\n        raise TypeError(\"can't convert complex to int\")\n    if r in (S.NaN, S.Infinity, S.NegativeInfinity):\n        raise TypeError(\"can't convert %s to int\" % r)\n    i = int(r)\n    if not i:\n        return 0\n    if i == r and (not (self - i).equals(0)):\n        isign = 1 if i > 0 else -1\n        x = Dummy()\n        diff_sign = 1 if (self - x).evalf(2, subs={x: i}) > 0 else -1\n        if diff_sign != isign:\n            i -= isign\n    return i",
    ".sympy.printing.str.py@@StrPrinter._print_Mul": "def _print_Mul(self, expr):\n    prec = precedence(expr)\n    c, e = expr.as_coeff_Mul()\n    if c < 0:\n        expr = _keep_coeff(-c, e)\n        sign = '-'\n    else:\n        sign = ''\n    a = []\n    b = []\n    if self.order not in ('old', 'none'):\n        args = expr.as_ordered_factors()\n    else:\n        args = Mul.make_args(expr)\n    for item in args:\n        if item.is_commutative and item.is_Pow and item.exp.is_Rational and item.exp.is_negative:\n            if item.exp != -1:\n                b.append(Pow(item.base, -item.exp, evaluate=False))\n            else:\n                b.append(Pow(item.base, -item.exp))\n        elif item.is_Rational and item is not S.Infinity:\n            if item.p != 1:\n                a.append(Rational(item.p))\n            if item.q != 1:\n                b.append(Rational(item.q))\n        else:\n            a.append(item)\n    a = a or [S.One]\n    a_str = [self.parenthesize(x, prec, strict=False) for x in a]\n    b_str = [self.parenthesize(x, prec, strict=False) for x in b]\n    if len(b) == 0:\n        return sign + '*'.join(a_str)\n    elif len(b) == 1:\n        return sign + '*'.join(a_str) + '/' + b_str[0]\n    else:\n        return sign + '*'.join(a_str) + '/(%s)' % '*'.join(b_str)",
    ".sympy.printing.precedence.py@@precedence": "def precedence(item):\n    if hasattr(item, 'precedence'):\n        return item.precedence\n    try:\n        mro = item.__class__.__mro__\n    except AttributeError:\n        return PRECEDENCE['Atom']\n    for i in mro:\n        n = i.__name__\n        if n in PRECEDENCE_FUNCTIONS:\n            return PRECEDENCE_FUNCTIONS[n](item)\n        elif n in PRECEDENCE_VALUES:\n            return PRECEDENCE_VALUES[n]\n    return PRECEDENCE['Atom']",
    ".sympy.printing.precedence.py@@precedence_Mul": "def precedence_Mul(item):\n    if _coeff_isneg(item):\n        return PRECEDENCE['Add']\n    return PRECEDENCE['Mul']",
    ".sympy.printing.printer.py@@Printer.order": "def order(self):\n    if 'order' in self._settings:\n        return self._settings['order']\n    else:\n        raise AttributeError('No order defined.')",
    ".sympy.core.expr.py@@Expr.as_ordered_factors": "def as_ordered_factors(self, order=None):\n    return [self]",
    ".sympy.printing.str.py@@StrPrinter.parenthesize": "def parenthesize(self, item, level, strict=False):\n    if precedence(item) < level or (not strict and precedence(item) <= level):\n        return '(%s)' % self._print(item)\n    else:\n        return self._print(item)",
    ".sympy.functions.elementary.trigonometric.py@@sin.eval": "def eval(cls, arg):\n    from sympy.calculus import AccumBounds\n    if arg.is_Number:\n        if arg is S.NaN:\n            return S.NaN\n        elif arg is S.Zero:\n            return S.Zero\n        elif arg is S.Infinity or arg is S.NegativeInfinity:\n            return AccumBounds(-1, 1)\n    if isinstance(arg, AccumBounds):\n        min, max = (arg.min, arg.max)\n        d = floor(min / (2 * S.Pi))\n        if min is not S.NegativeInfinity:\n            min = min - d * 2 * S.Pi\n        if max is not S.Infinity:\n            max = max - d * 2 * S.Pi\n        if AccumBounds(min, max).intersection(FiniteSet(S.Pi / 2, 5 * S.Pi / 2)) is not S.EmptySet and AccumBounds(min, max).intersection(FiniteSet(3 * S.Pi / 2, 7 * S.Pi / 2)) is not S.EmptySet:\n            return AccumBounds(-1, 1)\n        elif AccumBounds(min, max).intersection(FiniteSet(S.Pi / 2, 5 * S.Pi / 2)) is not S.EmptySet:\n            return AccumBounds(Min(sin(min), sin(max)), 1)\n        elif AccumBounds(min, max).intersection(FiniteSet(3 * S.Pi / 2, 8 * S.Pi / 2)) is not S.EmptySet:\n            return AccumBounds(-1, Max(sin(min), sin(max)))\n        else:\n            return AccumBounds(Min(sin(min), sin(max)), Max(sin(min), sin(max)))\n    if arg.could_extract_minus_sign():\n        return -cls(-arg)\n    i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n    if i_coeff is not None:\n        return S.ImaginaryUnit * sinh(i_coeff)\n    pi_coeff = _pi_coeff(arg)\n    if pi_coeff is not None:\n        if pi_coeff.is_integer:\n            return S.Zero\n        if (2 * pi_coeff).is_integer:\n            if pi_coeff.is_even:\n                return S.Zero\n            elif pi_coeff.is_even is False:\n                return S.NegativeOne ** (pi_coeff - S.Half)\n        if not pi_coeff.is_Rational:\n            narg = pi_coeff * S.Pi\n            if narg != arg:\n                return cls(narg)\n            return None\n        if pi_coeff.is_Rational:\n            x = pi_coeff % 2\n            if x > 1:\n                return -cls(x % 1 * S.Pi)\n            if 2 * x > 1:\n                return cls((1 - x) * S.Pi)\n            narg = (pi_coeff + Rational(3, 2)) % 2 * S.Pi\n            result = cos(narg)\n            if not isinstance(result, cos):\n                return result\n            if pi_coeff * S.Pi != arg:\n                return cls(pi_coeff * S.Pi)\n            return None\n    if arg.is_Add:\n        x, m = _peeloff_pi(arg)\n        if m:\n            return sin(m) * cos(x) + cos(m) * sin(x)\n    if arg.func is asin:\n        return arg.args[0]\n    if arg.func is atan:\n        x = arg.args[0]\n        return x / sqrt(1 + x ** 2)\n    if arg.func is atan2:\n        y, x = arg.args\n        return y / sqrt(x ** 2 + y ** 2)\n    if arg.func is acos:\n        x = arg.args[0]\n        return sqrt(1 - x ** 2)\n    if arg.func is acot:\n        x = arg.args[0]\n        return 1 / (sqrt(1 + 1 / x ** 2) * x)",
    ".sympy.core.expr.py@@Expr.as_coefficient": "def as_coefficient(self, expr):\n    r = self.extract_multiplicatively(expr)\n    if r and (not r.has(expr)):\n        return r",
    ".sympy.core.numbers.py@@ImaginaryUnit._eval_power": "def _eval_power(self, expt):\n    if isinstance(expt, Number):\n        if isinstance(expt, Integer):\n            expt = expt.p % 4\n            if expt == 0:\n                return S.One\n            if expt == 1:\n                return S.ImaginaryUnit\n            if expt == 2:\n                return -S.One\n            return -S.ImaginaryUnit\n        return S.NegativeOne ** (expt * S.Half)\n    return",
    ".sympy.functions.elementary.trigonometric.py@@_pi_coeff": "def _pi_coeff(arg, cycles=1):\n    arg = sympify(arg)\n    if arg is S.Pi:\n        return S.One\n    elif not arg:\n        return S.Zero\n    elif arg.is_Mul:\n        cx = arg.coeff(S.Pi)\n        if cx:\n            c, x = cx.as_coeff_Mul()\n            if c.is_Float:\n                f = abs(c) % 1\n                if f != 0:\n                    p = -int(round(log(f, 2).evalf()))\n                    m = 2 ** p\n                    cm = c * m\n                    i = int(cm)\n                    if i == cm:\n                        c = Rational(i, m)\n                        cx = c * x\n                else:\n                    c = Rational(int(c))\n                    cx = c * x\n            if x.is_integer:\n                c2 = c % 2\n                if c2 == 1:\n                    return x\n                elif not c2:\n                    if x.is_even is not None:\n                        return S.Zero\n                    return S(2)\n                else:\n                    return c2 * x\n            return cx",
    ".sympy.functions.elementary.trigonometric.py@@sin._eval_is_real": "def _eval_is_real(self):\n    return self.args[0].is_real",
    ".sympy.core.function.py@@Function._eval_is_commutative": "def _eval_is_commutative(self):\n    return fuzzy_and((a.is_commutative for a in self.args))",
    ".sympy.functions.elementary.trigonometric.py@@TrigonometricFunction._eval_is_rational": "def _eval_is_rational(self):\n    s = self.func(*self.args)\n    if s.func == self.func:\n        if s.args[0].is_rational and fuzzy_not(s.args[0].is_zero):\n            return False\n    else:\n        return s.is_rational",
    ".sympy.functions.elementary.trigonometric.py@@TrigonometricFunction._eval_is_algebraic": "def _eval_is_algebraic(self):\n    s = self.func(*self.args)\n    if s.func == self.func:\n        if fuzzy_not(self.args[0].is_zero) and self.args[0].is_algebraic:\n            return False\n        pi_coeff = _pi_coeff(self.args[0])\n        if pi_coeff is not None and pi_coeff.is_rational:\n            return True\n    else:\n        return s.is_algebraic",
    ".sympy.core.logic.py@@fuzzy_not": "def fuzzy_not(v):\n    if v is None:\n        return v\n    else:\n        return not v",
    ".sympy.core.function.py@@Function._eval_is_complex": "def _eval_is_complex(self):\n    return fuzzy_and((a.is_complex for a in self.args))",
    ".sympy.functions.elementary.trigonometric.py@@sin._eval_is_finite": "def _eval_is_finite(self):\n    arg = self.args[0]\n    if arg.is_real:\n        return True",
    ".sympy.core.function.py@@Subs.__hash__": "def __hash__(self):\n    return super(Subs, self).__hash__()",
    ".sympy.core.function.py@@Subs.__new__": "def __new__(cls, expr, variables, point, **assumptions):\n    from sympy import Symbol\n    if not is_sequence(variables, Tuple):\n        variables = [variables]\n    variables = list(sympify(variables))\n    if list(uniq(variables)) != variables:\n        repeated = [v for v in set(variables) if variables.count(v) > 1]\n        raise ValueError('cannot substitute expressions %s more than once.' % repeated)\n    point = Tuple(*(point if is_sequence(point, Tuple) else [point]))\n    if len(point) != len(variables):\n        raise ValueError('Number of point values must be the same as the number of variables.')\n    expr = sympify(expr)\n    pre = '_'\n    pts = sorted(set(point), key=default_sort_key)\n    from sympy.printing import StrPrinter\n\n    class CustomStrPrinter(StrPrinter):\n\n        def _print_Dummy(self, expr):\n            return str(expr) + str(expr.dummy_index)\n\n    def mystr(expr, **settings):\n        p = CustomStrPrinter(settings)\n        return p.doprint(expr)\n    while 1:\n        s_pts = {p: Symbol(pre + mystr(p)) for p in pts}\n        reps = [(v, s_pts[p]) for v, p in zip(variables, point)]\n        if any((r in expr.free_symbols and r in variables and (Symbol(pre + mystr(point[variables.index(r)])) != r) for _, r in reps)):\n            pre += '_'\n            continue\n        break\n    obj = Expr.__new__(cls, expr, Tuple(*variables), point)\n    obj._expr = expr.subs(reps)\n    return obj",
    ".sympy.utilities.iterables.py@@uniq": "def uniq(seq, result=None):\n    try:\n        seen = set()\n        result = result or []\n        for i, s in enumerate(seq):\n            if not (s in seen or seen.add(s)):\n                yield s\n    except TypeError:\n        if s not in result:\n            yield s\n            result.append(s)\n        if hasattr(seq, '__getitem__'):\n            for s in uniq(seq[i + 1:], result):\n                yield s\n        else:\n            for s in uniq(seq, result):\n                yield s",
    ".sympy.core.function.py@@Subs.mystr": "def mystr(expr, **settings):\n    p = CustomStrPrinter(settings)\n    return p.doprint(expr)",
    ".sympy.printing.str.py@@StrPrinter._print_Zero": "def _print_Zero(self, expr):\n    return '0'",
    ".sympy.printing.str.py@@StrPrinter._print_Integer": "def _print_Integer(self, expr):\n    return str(expr.p)",
    ".sympy.core.basic.py@@Basic.free_symbols": "def free_symbols(self):\n    return set().union(*[a.free_symbols for a in self.args])",
    ".sympy.core.symbol.py@@Symbol.free_symbols": "def free_symbols(self):\n    return {self}",
    ".sympy.core.function.py@@Application._eval_subs": "def _eval_subs(self, old, new):\n    if old.is_Function and new.is_Function and (old == self.func) and (len(self.args) in new.nargs):\n        return new(*self.args)",
    ".sympy.core.function.py@@Subs.__eq__": "def __eq__(self, other):\n    if not isinstance(other, Subs):\n        return False\n    return self._expr == other._expr",
    ".sympy.core.function.py@@Subs._hashable_content": "def _hashable_content(self):\n    return (self._expr.xreplace(self.canonical_variables),)",
    ".sympy.core.basic.py@@Basic.canonical_variables": "def canonical_variables(self):\n    from sympy import Symbol\n    if not hasattr(self, 'variables'):\n        return {}\n    u = '_'\n    while any((s.name.endswith(u) for s in self.free_symbols)):\n        u += '_'\n    name = '%%i%s' % u\n    V = self.variables\n    return dict(list(zip(V, [Symbol(name % i, **v.assumptions0) for i, v in enumerate(V)])))",
    ".sympy.core.function.py@@Subs.variables": "def variables(self):\n    return self._args[1]",
    ".sympy.core.function.py@@Subs.free_symbols": "def free_symbols(self):\n    return self.expr.free_symbols - set(self.variables) | set(self.point.free_symbols)",
    ".sympy.core.function.py@@Subs.expr": "def expr(self):\n    return self._args[0]",
    ".sympy.core.function.py@@Subs.point": "def point(self):\n    return self._args[2]",
    ".sympy.core.function.py@@Subs._eval_is_commutative": "def _eval_is_commutative(self):\n    return self.expr.is_commutative",
    ".sympy.functions.elementary.trigonometric.py@@cos.eval": "def eval(cls, arg):\n    from sympy.functions.special.polynomials import chebyshevt\n    from sympy.calculus.util import AccumBounds\n    if arg.is_Number:\n        if arg is S.NaN:\n            return S.NaN\n        elif arg is S.Zero:\n            return S.One\n        elif arg is S.Infinity or arg is S.NegativeInfinity:\n            return AccumBounds(-1, 1)\n    if isinstance(arg, AccumBounds):\n        return sin(arg + S.Pi / 2)\n    if arg.could_extract_minus_sign():\n        return cls(-arg)\n    i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n    if i_coeff is not None:\n        return cosh(i_coeff)\n    pi_coeff = _pi_coeff(arg)\n    if pi_coeff is not None:\n        if pi_coeff.is_integer:\n            return S.NegativeOne ** pi_coeff\n        if (2 * pi_coeff).is_integer:\n            if pi_coeff.is_even:\n                return S.NegativeOne ** (pi_coeff / 2)\n            elif pi_coeff.is_even is False:\n                return S.Zero\n        if not pi_coeff.is_Rational:\n            narg = pi_coeff * S.Pi\n            if narg != arg:\n                return cls(narg)\n            return None\n        cst_table_some = {3: S.Half, 5: (sqrt(5) + 1) / 4}\n        if pi_coeff.is_Rational:\n            q = pi_coeff.q\n            p = pi_coeff.p % (2 * q)\n            if p > q:\n                narg = (pi_coeff - 1) * S.Pi\n                return -cls(narg)\n            if 2 * p > q:\n                narg = (1 - pi_coeff) * S.Pi\n                return -cls(narg)\n            table2 = {12: (3, 4), 20: (4, 5), 30: (5, 6), 15: (6, 10), 24: (6, 8), 40: (8, 10), 60: (20, 30), 120: (40, 60)}\n            if q in table2:\n                a, b = (p * S.Pi / table2[q][0], p * S.Pi / table2[q][1])\n                nvala, nvalb = (cls(a), cls(b))\n                if None == nvala or None == nvalb:\n                    return None\n                return nvala * nvalb + cls(S.Pi / 2 - a) * cls(S.Pi / 2 - b)\n            if q > 12:\n                return None\n            if q in cst_table_some:\n                cts = cst_table_some[pi_coeff.q]\n                return chebyshevt(pi_coeff.p, cts).expand()\n            if 0 == q % 2:\n                narg = pi_coeff * 2 * S.Pi\n                nval = cls(narg)\n                if None == nval:\n                    return None\n                x = (2 * pi_coeff + 1) / 2\n                sign_cos = (-1) ** ((-1 if x < 0 else 1) * int(abs(x)))\n                return sign_cos * sqrt((1 + nval) / 2)\n        return None\n    if arg.is_Add:\n        x, m = _peeloff_pi(arg)\n        if m:\n            return cos(m) * cos(x) - sin(m) * sin(x)\n    if arg.func is acos:\n        return arg.args[0]\n    if arg.func is atan:\n        x = arg.args[0]\n        return 1 / sqrt(1 + x ** 2)\n    if arg.func is atan2:\n        y, x = arg.args\n        return x / sqrt(x ** 2 + y ** 2)\n    if arg.func is asin:\n        x = arg.args[0]\n        return sqrt(1 - x ** 2)\n    if arg.func is acot:\n        x = arg.args[0]\n        return 1 / sqrt(1 + 1 / x ** 2)",
    ".sympy.core.add.py@@Add.as_numer_denom": "def as_numer_denom(self):\n    content, expr = self.primitive()\n    ncon, dcon = content.as_numer_denom()\n    nd = defaultdict(list)\n    for f in expr.args:\n        ni, di = f.as_numer_denom()\n        nd[di].append(ni)\n    if S.Zero in nd:\n        n = nd.pop(S.Zero)\n        assert len(n) == 1\n        n = n[0]\n        nd[S.One].append(n / S.Zero)\n    if len(nd) == 1:\n        d, n = nd.popitem()\n        return (self.func(*[_keep_coeff(ncon, ni) for ni in n]), _keep_coeff(dcon, d))\n    for d, n in nd.items():\n        if len(n) == 1:\n            nd[d] = n[0]\n        else:\n            nd[d] = self.func(*n)\n    denoms, numers = [list(i) for i in zip(*iter(nd.items()))]\n    n, d = (self.func(*[Mul(*denoms[:i] + [numers[i]] + denoms[i + 1:]) for i in range(len(numers))]), Mul(*denoms))\n    return (_keep_coeff(ncon, n), _keep_coeff(dcon, d))",
    ".sympy.core.numbers.py@@Integer.as_numer_denom": "def as_numer_denom(self):\n    return (self, S.One)",
    ".sympy.core.expr.py@@Expr.as_numer_denom": "def as_numer_denom(self):\n    return (self, S.One)",
    ".sympy.core.mul.py@@Mul.as_numer_denom": "def as_numer_denom(self):\n    numers, denoms = list(zip(*[f.as_numer_denom() for f in self.args]))\n    return (self.func(*numers), self.func(*denoms))",
    ".sympy.core.relational.py@@Relational.__new__": "def __new__(cls, lhs, rhs, rop=None, **assumptions):\n    if cls is not Relational:\n        return Expr.__new__(cls, lhs, rhs, **assumptions)\n    try:\n        cls = cls.ValidRelationOperator[rop]\n        return cls(lhs, rhs, **assumptions)\n    except KeyError:\n        raise ValueError('Invalid relational operator symbol: %r' % rop)",
    ".sympy.core.numbers.py@@Rational.__int__": "def __int__(self):\n    p, q = (self.p, self.q)\n    if p < 0:\n        return -int(-p // q)\n    return int(p // q)",
    ".sympy.core.numbers.py@@Rational.__ne__": "def __ne__(self, other):\n    return not self.__eq__(other)",
    ".sympy.printing.str.py@@StrPrinter._print_Rational": "def _print_Rational(self, expr):\n    if expr.q == 1:\n        return str(expr.p)\n    else:\n        return '%s/%s' % (expr.p, expr.q)",
    ".sympy.core.numbers.py@@Rational.__add__": "def __add__(self, other):\n    if isinstance(other, Integer):\n        return Rational(self.p + self.q * other.p, self.q, 1)\n    elif isinstance(other, Rational):\n        return Rational(self.p * other.q + self.q * other.p, self.q * other.q)\n    elif isinstance(other, Float):\n        return other + self\n    else:\n        return Number.__add__(self, other)",
    ".sympy.printing.str.py@@StrPrinter._print_Add": "def _print_Add(self, expr, order=None):\n    if self.order == 'none':\n        terms = list(expr.args)\n    else:\n        terms = self._as_ordered_terms(expr, order=order)\n    PREC = precedence(expr)\n    l = []\n    for term in terms:\n        t = self._print(term)\n        if t.startswith('-'):\n            sign = '-'\n            t = t[1:]\n        else:\n            sign = '+'\n        if precedence(term) < PREC:\n            l.extend([sign, '(%s)' % t])\n        else:\n            l.extend([sign, t])\n    sign = l.pop(0)\n    if sign == '+':\n        sign = ''\n    return sign + ' '.join(l)",
    ".sympy.printing.printer.py@@Printer._as_ordered_terms": "def _as_ordered_terms(self, expr, order=None):\n    order = order or self.order\n    if order == 'old':\n        return sorted(Add.make_args(expr), key=cmp_to_key(Basic._compare_pretty))\n    else:\n        return expr.as_ordered_terms(order=order)",
    ".sympy.printing.precedence.py@@precedence_Integer": "def precedence_Integer(item):\n    if item.p < 0:\n        return PRECEDENCE['Add']\n    return PRECEDENCE['Atom']",
    ".sympy.core.symbol.py@@Wild.__new__": "def __new__(cls, name, exclude=(), properties=(), **assumptions):\n    exclude = tuple([sympify(x) for x in exclude])\n    properties = tuple(properties)\n    cls._sanitize(assumptions, cls)\n    return Wild.__xnew__(cls, name, exclude, properties, **assumptions)",
    ".sympy.core.symbol.py@@Wild.__xnew__": "def __xnew__(cls, name, exclude, properties, **assumptions):\n    obj = Symbol.__xnew__(cls, name, **assumptions)\n    obj.exclude = exclude\n    obj.properties = properties\n    return obj",
    ".sympy.core.symbol.py@@Wild._hashable_content": "def _hashable_content(self):\n    return super(Wild, self)._hashable_content() + (self.exclude, self.properties)",
    ".sympy.core.expr.py@@Expr.__add__": "def __add__(self, other):\n    return Add(self, other)",
    ".sympy.core.basic.py@@Basic.match": "def match(self, pattern, old=False):\n    pattern = sympify(pattern)\n    return pattern.matches(self, old=old)",
    ".sympy.core.add.py@@Add.matches": "def matches(self, expr, repl_dict={}, old=False):\n    return AssocOp._matches_commutative(self, expr, repl_dict, old)",
    ".sympy.core.operations.py@@AssocOp._matches_commutative": "def _matches_commutative(self, expr, repl_dict={}, old=False):\n    from .expr import Add, Expr\n    from sympy import Mul\n    if isinstance(self, Expr) and (not isinstance(expr, Expr)):\n        return None\n    if self == expr:\n        return repl_dict\n    d = self._matches_simple(expr, repl_dict)\n    if d is not None:\n        return d\n    from .function import WildFunction\n    from .symbol import Wild\n    wild_part = []\n    exact_part = []\n    for p in ordered(self.args):\n        if p.has(Wild, WildFunction) and (not expr.has(p)):\n            wild_part.append(p)\n        else:\n            exact_part.append(p)\n    if exact_part:\n        exact = self.func(*exact_part)\n        free = expr.free_symbols\n        if free and exact.free_symbols - free:\n            return None\n        newpattern = self.func(*wild_part)\n        newexpr = self._combine_inverse(expr, exact)\n        if not old and (expr.is_Add or expr.is_Mul):\n            if newexpr.count_ops() > expr.count_ops():\n                return None\n        return newpattern.matches(newexpr, repl_dict)\n    i = 0\n    saw = set()\n    while expr not in saw:\n        saw.add(expr)\n        expr_list = (self.identity,) + tuple(ordered(self.make_args(expr)))\n        for last_op in reversed(expr_list):\n            for w in reversed(wild_part):\n                d1 = w.matches(last_op, repl_dict)\n                if d1 is not None:\n                    d2 = self.xreplace(d1).matches(expr, d1)\n                    if d2 is not None:\n                        return d2\n        if i == 0:\n            if self.is_Mul:\n                if expr.is_Pow and expr.exp.is_Integer:\n                    if expr.exp > 0:\n                        expr = Mul(*[expr.base, expr.base ** (expr.exp - 1)], evaluate=False)\n                    else:\n                        expr = Mul(*[1 / expr.base, expr.base ** (expr.exp + 1)], evaluate=False)\n                    i += 1\n                    continue\n            elif self.is_Add:\n                c, e = expr.as_coeff_Mul()\n                if abs(c) > 1:\n                    if c > 0:\n                        expr = Add(*[e, (c - 1) * e], evaluate=False)\n                    else:\n                        expr = Add(*[-e, (c + 1) * e], evaluate=False)\n                    i += 1\n                    continue\n                from sympy.simplify.radsimp import collect\n                was = expr\n                did = set()\n                for w in reversed(wild_part):\n                    c, w = w.as_coeff_mul(Wild)\n                    free = c.free_symbols - did\n                    if free:\n                        did.update(free)\n                        expr = collect(expr, free)\n                if expr != was:\n                    i += 0\n                    continue\n            break\n    return",
    ".sympy.core.add.py@@Add._matches_simple": "def _matches_simple(self, expr, repl_dict):\n    coeff, terms = self.as_coeff_add()\n    if len(terms) == 1:\n        return terms[0].matches(expr - coeff, repl_dict)\n    return",
    ".sympy.core.add.py@@Add.as_coeff_add": "def as_coeff_add(self, *deps):\n    if deps:\n        l1 = []\n        l2 = []\n        for f in self.args:\n            if f.has(*deps):\n                l2.append(f)\n            else:\n                l1.append(f)\n        return (self._new_rawargs(*l1), tuple(l2))\n    coeff, notrat = self.args[0].as_coeff_add()\n    if coeff is not S.Zero:\n        return (coeff, notrat + self.args[1:])\n    return (S.Zero, self.args)",
    ".sympy.core.expr.py@@Expr.as_coeff_add": "def as_coeff_add(self, *deps):\n    if deps:\n        if not self.has(*deps):\n            return (self, tuple())\n    return (S.Zero, (self,))",
    ".sympy.core.operations.py@@AssocOp._has_matcher": "def _has_matcher(self):\n\n    def _ncsplit(expr):\n        cpart, ncpart = ([], [])\n        for arg in expr.args:\n            if arg.is_commutative:\n                cpart.append(arg)\n            else:\n                ncpart.append(arg)\n        return (set(cpart), ncpart)\n    c, nc = _ncsplit(self)\n    cls = self.__class__\n\n    def is_in(expr):\n        if expr == self:\n            return True\n        elif not isinstance(expr, Basic):\n            return False\n        elif isinstance(expr, cls):\n            _c, _nc = _ncsplit(expr)\n            if c & _c == c:\n                if not nc:\n                    return True\n                elif len(nc) <= len(_nc):\n                    for i in range(len(_nc) - len(nc)):\n                        if _nc[i:i + len(nc)] == nc:\n                            return True\n        return False\n    return is_in",
    ".sympy.core.operations.py@@AssocOp._ncsplit": "def _ncsplit(expr):\n    cpart, ncpart = ([], [])\n    for arg in expr.args:\n        if arg.is_commutative:\n            cpart.append(arg)\n        else:\n            ncpart.append(arg)\n    return (set(cpart), ncpart)",
    ".sympy.core.operations.py@@AssocOp.is_in": "def is_in(expr):\n    if expr == self:\n        return True\n    elif not isinstance(expr, Basic):\n        return False\n    elif isinstance(expr, cls):\n        _c, _nc = _ncsplit(expr)\n        if c & _c == c:\n            if not nc:\n                return True\n            elif len(nc) <= len(_nc):\n                for i in range(len(_nc) - len(nc)):\n                    if _nc[i:i + len(nc)] == nc:\n                        return True\n    return False",
    ".sympy.core.mul.py@@Mul.matches": "def matches(self, expr, repl_dict={}, old=False):\n    expr = sympify(expr)\n    if self.is_commutative and expr.is_commutative:\n        return AssocOp._matches_commutative(self, expr, repl_dict, old)\n    elif self.is_commutative is not expr.is_commutative:\n        return None\n    c1, nc1 = self.args_cnc()\n    c2, nc2 = expr.args_cnc()\n    repl_dict = repl_dict.copy()\n    if c1:\n        if not c2:\n            c2 = [1]\n        a = self.func(*c1)\n        if isinstance(a, AssocOp):\n            repl_dict = a._matches_commutative(self.func(*c2), repl_dict, old)\n        else:\n            repl_dict = a.matches(self.func(*c2), repl_dict)\n    if repl_dict:\n        a = self.func(*nc1)\n        if isinstance(a, self.func):\n            repl_dict = a._matches(self.func(*nc2), repl_dict)\n        else:\n            repl_dict = a.matches(self.func(*nc2), repl_dict)\n    return repl_dict or None",
    ".sympy.core.mul.py@@Mul._matches_simple": "def _matches_simple(self, expr, repl_dict):\n    coeff, terms = self.as_coeff_Mul()\n    terms = Mul.make_args(terms)\n    if len(terms) == 1:\n        newexpr = self.__class__._combine_inverse(expr, coeff)\n        return terms[0].matches(newexpr, repl_dict)\n    return",
    ".sympy.core.basic.py@@Atom.sort_key": "def sort_key(self, order=None):\n    return (self.class_key(), (1, (str(self),)), S.One.sort_key(), S.One)",
    ".sympy.printing.str.py@@StrPrinter._print_ImaginaryUnit": "def _print_ImaginaryUnit(self, expr):\n    return 'I'",
    ".sympy.printing.str.py@@StrPrinter._print_Wild": "def _print_Wild(self, expr):\n    return expr.name + '_'",
    ".sympy.core.mul.py@@Mul._combine_inverse": "def _combine_inverse(lhs, rhs):\n    if lhs == rhs:\n        return S.One\n\n    def check(l, r):\n        if l.is_Float and r.is_comparable:\n            return l.__add__(0) == r.evalf().__add__(0)\n        return False\n    if check(lhs, rhs) or check(rhs, lhs):\n        return S.One\n    if lhs.is_Mul and rhs.is_Mul:\n        a = list(lhs.args)\n        b = [1]\n        for x in rhs.args:\n            if x in a:\n                a.remove(x)\n            elif -x in a:\n                a.remove(-x)\n                b.append(-1)\n            else:\n                b.append(x)\n        return lhs.func(*a) / rhs.func(*b)\n    return lhs / rhs",
    ".sympy.core.mul.py@@Mul.check": "def check(l, r):\n    if l.is_Float and r.is_comparable:\n        return l.__add__(0) == r.evalf().__add__(0)\n    return False",
    ".sympy.core.symbol.py@@Wild.matches": "def matches(self, expr, repl_dict={}, old=False):\n    if any((expr.has(x) for x in self.exclude)):\n        return None\n    if any((not f(expr) for f in self.properties)):\n        return None\n    repl_dict = repl_dict.copy()\n    repl_dict[self] = expr\n    return repl_dict",
    ".sympy.core.add.py@@Add._combine_inverse": "def _combine_inverse(lhs, rhs):\n    from sympy import oo, I, expand_mul\n    if lhs == oo and rhs == oo or (lhs == oo * I and rhs == oo * I):\n        return S.Zero\n    return expand_mul(lhs - rhs)",
    ".sympy.core.numbers.py@@Infinity.__mul__": "def __mul__(self, other):\n    if isinstance(other, Number):\n        if other is S.Zero or other is S.NaN:\n            return S.NaN\n        elif other.is_Float:\n            if other == 0:\n                return S.NaN\n            if other > 0:\n                return Float('inf')\n            else:\n                return Float('-inf')\n        elif other > 0:\n            return S.Infinity\n        else:\n            return S.NegativeInfinity\n    return NotImplemented",
    ".sympy.core.mul.py@@Mul._handle_for_oo": "def _handle_for_oo(c_part, coeff_sign):\n    new_c_part = []\n    for t in c_part:\n        if t.is_positive:\n            continue\n        if t.is_negative:\n            coeff_sign *= -1\n            continue\n        new_c_part.append(t)\n    return (new_c_part, coeff_sign)",
    ".sympy.core.function.py@@expand_mul": "def expand_mul(expr, deep=True):\n    return sympify(expr).expand(deep=deep, mul=True, power_exp=False, power_base=False, basic=False, multinomial=False, log=False)",
    ".sympy.core.expr.py@@Expr.expand": "def expand(self, deep=True, modulus=None, power_base=True, power_exp=True, mul=True, log=True, multinomial=True, basic=True, **hints):\n    from sympy.simplify.radsimp import fraction\n    hints.update(power_base=power_base, power_exp=power_exp, mul=mul, log=log, multinomial=multinomial, basic=basic)\n    expr = self\n    if hints.pop('frac', False):\n        n, d = [a.expand(deep=deep, modulus=modulus, **hints) for a in fraction(self)]\n        return n / d\n    elif hints.pop('denom', False):\n        n, d = fraction(self)\n        return n / d.expand(deep=deep, modulus=modulus, **hints)\n    elif hints.pop('numer', False):\n        n, d = fraction(self)\n        return n.expand(deep=deep, modulus=modulus, **hints) / d\n\n    def _expand_hint_key(hint):\n        if hint == 'mul':\n            return 'mulz'\n        return hint\n    for hint in sorted(hints.keys(), key=_expand_hint_key):\n        use_hint = hints[hint]\n        if use_hint:\n            hint = '_eval_expand_' + hint\n            expr, hit = Expr._expand_hint(expr, hint, deep=deep, **hints)\n    while True:\n        was = expr\n        if hints.get('multinomial', False):\n            expr, _ = Expr._expand_hint(expr, '_eval_expand_multinomial', deep=deep, **hints)\n        if hints.get('mul', False):\n            expr, _ = Expr._expand_hint(expr, '_eval_expand_mul', deep=deep, **hints)\n        if hints.get('log', False):\n            expr, _ = Expr._expand_hint(expr, '_eval_expand_log', deep=deep, **hints)\n        if expr == was:\n            break\n    if modulus is not None:\n        modulus = sympify(modulus)\n        if not modulus.is_Integer or modulus <= 0:\n            raise ValueError('modulus must be a positive integer, got %s' % modulus)\n        terms = []\n        for term in Add.make_args(expr):\n            coeff, tail = term.as_coeff_Mul(rational=True)\n            coeff %= modulus\n            if coeff:\n                terms.append(coeff * tail)\n        expr = Add(*terms)\n    return expr",
    ".sympy.core.expr.py@@Expr._expand_hint_key": "def _expand_hint_key(hint):\n    if hint == 'mul':\n        return 'mulz'\n    return hint",
    ".sympy.core.expr.py@@Expr._expand_hint": "def _expand_hint(expr, hint, deep=True, **hints):\n    hit = False\n    if deep and getattr(expr, 'args', ()) and (not expr.is_Atom):\n        sargs = []\n        for arg in expr.args:\n            arg, arghit = Expr._expand_hint(arg, hint, **hints)\n            hit |= arghit\n            sargs.append(arg)\n        if hit:\n            expr = expr.func(*sargs)\n    if hasattr(expr, hint):\n        newexpr = getattr(expr, hint)(**hints)\n        if newexpr != expr:\n            return (newexpr, True)\n    return (expr, hit)",
    ".sympy.polys.rootoftools.py@@ComplexRootOf.args": "def args(self):\n    return (self.expr, Integer(self.index))",
    ".sympy.polys.rootoftools.py@@ComplexRootOf.expr": "def expr(self):\n    return self.poly.as_expr()",
    ".sympy.polys.polytools.py@@Poly.as_expr": "def as_expr(f, *gens):\n    if not gens:\n        gens = f.gens\n    elif len(gens) == 1 and isinstance(gens[0], dict):\n        mapping = gens[0]\n        gens = list(f.gens)\n        for gen, value in mapping.items():\n            try:\n                index = gens.index(gen)\n            except ValueError:\n                raise GeneratorsError(\"%s doesn't have %s as generator\" % (f, gen))\n            else:\n                gens[index] = value\n    return basic_from_dict(f.rep.to_sympy_dict(), *gens)",
    ".sympy.polys.polyclasses.py@@DMP.to_sympy_dict": "def to_sympy_dict(f, zero=False):\n    rep = dmp_to_dict(f.rep, f.lev, f.dom, zero=zero)\n    for k, v in rep.items():\n        rep[k] = f.dom.to_sympy(v)\n    return rep",
    ".sympy.polys.densebasic.py@@dmp_to_dict": "def dmp_to_dict(f, u, K=None, zero=False):\n    if not u:\n        return dup_to_dict(f, K, zero=zero)\n    if dmp_zero_p(f, u) and zero:\n        return {(0,) * (u + 1): K.zero}\n    n, v, result = (dmp_degree(f, u), u - 1, {})\n    if n == -oo:\n        n = -1\n    for k in range(0, n + 1):\n        h = dmp_to_dict(f[n - k], v)\n        for exp, coeff in h.items():\n            result[(k,) + exp] = coeff\n    return result",
    ".sympy.polys.densebasic.py@@dup_to_dict": "def dup_to_dict(f, K=None, zero=False):\n    if not f and zero:\n        return {(0,): K.zero}\n    n, result = (len(f) - 1, {})\n    for k in range(0, n + 1):\n        if f[n - k]:\n            result[k,] = f[n - k]\n    return result",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.to_sympy": "def to_sympy(self, a):\n    return SymPyInteger(a)",
    ".sympy.polys.polyutils.py@@expr_from_dict": "def expr_from_dict(rep, *gens):\n    result = []\n    for monom, coeff in rep.items():\n        term = [coeff]\n        for g, m in zip(gens, monom):\n            if m:\n                term.append(Pow(g, m))\n        result.append(Mul(*term))\n    return Add(*result)",
    ".sympy.polys.rootoftools.py@@ComplexRootOf.__new__": "def __new__(cls, f, x, index=None, radicals=False, expand=True):\n    x = sympify(x)\n    if index is None and x.is_Integer:\n        x, index = (None, x)\n    else:\n        index = sympify(index)\n    if index is not None and index.is_Integer:\n        index = int(index)\n    else:\n        raise ValueError('expected an integer root index, got %s' % index)\n    poly = PurePoly(f, x, greedy=False, expand=expand)\n    if not poly.is_univariate:\n        raise PolynomialError('only univariate polynomials are allowed')\n    degree = poly.degree()\n    if degree <= 0:\n        raise PolynomialError(\"can't construct CRootOf object for %s\" % f)\n    if index < -degree or index >= degree:\n        raise IndexError('root index out of [%d, %d] range, got %d' % (-degree, degree - 1, index))\n    elif index < 0:\n        index += degree\n    dom = poly.get_domain()\n    if not dom.is_Exact:\n        poly = poly.to_exact()\n    roots = cls._roots_trivial(poly, radicals)\n    if roots is not None:\n        return roots[index]\n    coeff, poly = preprocess_roots(poly)\n    dom = poly.get_domain()\n    if not dom.is_ZZ:\n        raise NotImplementedError('CRootOf is not supported over %s' % dom)\n    root = cls._indexed_root(poly, index)\n    return coeff * cls._postprocess_root(root, radicals)",
    ".sympy.polys.polytools.py@@Poly.__new__": "def __new__(cls, rep, *gens, **args):\n    opt = options.build_options(gens, args)\n    if 'order' in opt:\n        raise NotImplementedError(\"'order' keyword is not implemented yet\")\n    if iterable(rep, exclude=str):\n        if isinstance(rep, dict):\n            return cls._from_dict(rep, opt)\n        else:\n            return cls._from_list(list(rep), opt)\n    else:\n        rep = sympify(rep)\n        if rep.is_Poly:\n            return cls._from_poly(rep, opt)\n        else:\n            return cls._from_expr(rep, opt)",
    ".sympy.polys.polyoptions.py@@build_options": "def build_options(gens, args=None):\n    if args is None:\n        gens, args = ((), gens)\n    if len(args) != 1 or 'opt' not in args or gens:\n        return Options(gens, args)\n    else:\n        return args['opt']",
    ".sympy.polys.polyoptions.py@@Options.__init__": "def __init__(self, gens, args, flags=None, strict=False):\n    dict.__init__(self)\n    if gens and args.get('gens', ()):\n        raise OptionError(\"both '*gens' and keyword argument 'gens' supplied\")\n    elif gens:\n        args = dict(args)\n        args['gens'] = gens\n    defaults = args.pop('defaults', {})\n\n    def preprocess_options(args):\n        for option, value in args.items():\n            try:\n                cls = self.__options__[option]\n            except KeyError:\n                raise OptionError(\"'%s' is not a valid option\" % option)\n            if issubclass(cls, Flag):\n                if flags is None or option not in flags:\n                    if strict:\n                        raise OptionError(\"'%s' flag is not allowed in this context\" % option)\n            if value is not None:\n                self[option] = cls.preprocess(value)\n    preprocess_options(args)\n    for key, value in dict(defaults).items():\n        if key in self:\n            del defaults[key]\n        else:\n            for option in self.keys():\n                cls = self.__options__[option]\n                if key in cls.excludes:\n                    del defaults[key]\n                    break\n    preprocess_options(defaults)\n    for option in self.keys():\n        cls = self.__options__[option]\n        for require_option in cls.requires:\n            if self.get(require_option) is None:\n                raise OptionError(\"'%s' option is only allowed together with '%s'\" % (option, require_option))\n        for exclude_option in cls.excludes:\n            if self.get(exclude_option) is not None:\n                raise OptionError(\"'%s' option is not allowed together with '%s'\" % (option, exclude_option))\n    for option in self.__order__:\n        self.__options__[option].postprocess(self)",
    ".sympy.polys.polyoptions.py@@Options.preprocess_options": "def preprocess_options(args):\n    for option, value in args.items():\n        try:\n            cls = self.__options__[option]\n        except KeyError:\n            raise OptionError(\"'%s' is not a valid option\" % option)\n        if issubclass(cls, Flag):\n            if flags is None or option not in flags:\n                if strict:\n                    raise OptionError(\"'%s' flag is not allowed in this context\" % option)\n        if value is not None:\n            self[option] = cls.preprocess(value)",
    ".sympy.polys.polyoptions.py@@BooleanOption.preprocess": "def preprocess(cls, value):\n    if value in [True, False]:\n        return bool(value)\n    else:\n        raise OptionError(\"'%s' must have a boolean value assigned, got %s\" % (cls.option, value))",
    ".sympy.polys.polyoptions.py@@Gens.preprocess": "def preprocess(cls, gens):\n    if isinstance(gens, Basic):\n        gens = (gens,)\n    elif len(gens) == 1 and hasattr(gens[0], '__iter__'):\n        gens = gens[0]\n    if gens == (None,):\n        gens = ()\n    elif has_dups(gens):\n        raise GeneratorsError('duplicated generators: %s' % str(gens))\n    elif any((gen.is_commutative is False for gen in gens)):\n        raise GeneratorsError('non-commutative generators: %s' % str(gens))\n    return tuple(gens)",
    ".sympy.polys.polyoptions.py@@Option.postprocess": "def postprocess(cls, options):\n    pass",
    ".sympy.polys.polyoptions.py@@Extension.postprocess": "def postprocess(cls, options):\n    if 'extension' in options and options['extension'] is not True:\n        options['domain'] = sympy.polys.domains.QQ.algebraic_field(*options['extension'])",
    ".sympy.polys.polyoptions.py@@Gaussian.postprocess": "def postprocess(cls, options):\n    if 'gaussian' in options and options['gaussian'] is True:\n        options['extension'] = set([S.ImaginaryUnit])\n        Extension.postprocess(options)",
    ".sympy.polys.polyoptions.py@@Domain.postprocess": "def postprocess(cls, options):\n    if 'gens' in options and 'domain' in options and options['domain'].is_Composite and set(options['domain'].symbols) & set(options['gens']):\n        raise GeneratorsError('ground domain and generators interfere together')\n    elif ('gens' not in options or not options['gens']) and 'domain' in options and (options['domain'] == sympy.polys.domains.EX):\n        raise GeneratorsError('you have to provide generators because EX domain was requested')",
    ".sympy.polys.polyoptions.py@@Auto.postprocess": "def postprocess(cls, options):\n    if ('domain' in options or 'field' in options) and 'auto' not in options:\n        options['auto'] = False",
    ".sympy.polys.polyoptions.py@@Modulus.postprocess": "def postprocess(cls, options):\n    if 'modulus' in options:\n        modulus = options['modulus']\n        symmetric = options.get('symmetric', True)\n        options['domain'] = sympy.polys.domains.FF(modulus, symmetric)",
    ".sympy.polys.polyoptions.py@@Split.postprocess": "def postprocess(cls, options):\n    if 'split' in options:\n        raise NotImplementedError(\"'split' option is not implemented yet\")",
    ".sympy.polys.polytools.py@@Poly._from_expr": "def _from_expr(cls, rep, opt):\n    rep, opt = _dict_from_expr(rep, opt)\n    return cls._from_dict(rep, opt)",
    ".sympy.polys.polyutils.py@@_dict_from_expr": "def _dict_from_expr(expr, opt):\n    if expr.is_commutative is False:\n        raise PolynomialError('non-commutative expressions are not supported')\n\n    def _is_expandable_pow(expr):\n        return expr.is_Pow and expr.exp.is_positive and expr.exp.is_Integer and expr.base.is_Add\n    if opt.expand is not False:\n        try:\n            expr = expr.expand()\n        except AttributeError:\n            raise PolynomialError('expression must support expand method')\n        while any((_is_expandable_pow(i) or (i.is_Mul and any((_is_expandable_pow(j) for j in i.args))) for i in Add.make_args(expr))):\n            expr = expand_multinomial(expr)\n        while any((i.is_Mul and any((j.is_Add for j in i.args)) for i in Add.make_args(expr))):\n            expr = expand_mul(expr)\n    if opt.gens:\n        rep, gens = _dict_from_expr_if_gens(expr, opt)\n    else:\n        rep, gens = _dict_from_expr_no_gens(expr, opt)\n    return (rep, opt.clone({'gens': gens}))",
    ".sympy.polys.polyoptions.py@@OptionType.getter": "def getter(self):\n    try:\n        return self[cls.option]\n    except KeyError:\n        return cls.default()",
    ".sympy.core.power.py@@Pow._eval_expand_multinomial": "def _eval_expand_multinomial(self, **hints):\n    base, exp = self.args\n    result = self\n    if exp.is_Rational and exp.p > 0 and base.is_Add:\n        if not exp.is_Integer:\n            n = Integer(exp.p // exp.q)\n            if not n:\n                return result\n            else:\n                radical, result = (self.func(base, exp - n), [])\n                expanded_base_n = self.func(base, n)\n                if expanded_base_n.is_Pow:\n                    expanded_base_n = expanded_base_n._eval_expand_multinomial()\n                for term in Add.make_args(expanded_base_n):\n                    result.append(term * radical)\n                return Add(*result)\n        n = int(exp)\n        if base.is_commutative:\n            order_terms, other_terms = ([], [])\n            for b in base.args:\n                if b.is_Order:\n                    order_terms.append(b)\n                else:\n                    other_terms.append(b)\n            if order_terms:\n                f = Add(*other_terms)\n                o = Add(*order_terms)\n                if n == 2:\n                    return expand_multinomial(f ** n, deep=False) + n * f * o\n                else:\n                    g = expand_multinomial(f ** (n - 1), deep=False)\n                    return expand_mul(f * g, deep=False) + n * g * o\n            if base.is_number:\n                a, b = base.as_real_imag()\n                if a.is_Rational and b.is_Rational:\n                    if not a.is_Integer:\n                        if not b.is_Integer:\n                            k = self.func(a.q * b.q, n)\n                            a, b = (a.p * b.q, a.q * b.p)\n                        else:\n                            k = self.func(a.q, n)\n                            a, b = (a.p, a.q * b)\n                    elif not b.is_Integer:\n                        k = self.func(b.q, n)\n                        a, b = (a * b.q, b.p)\n                    else:\n                        k = 1\n                    a, b, c, d = (int(a), int(b), 1, 0)\n                    while n:\n                        if n & 1:\n                            c, d = (a * c - b * d, b * c + a * d)\n                            n -= 1\n                        a, b = (a * a - b * b, 2 * a * b)\n                        n //= 2\n                    I = S.ImaginaryUnit\n                    if k == 1:\n                        return c + I * d\n                    else:\n                        return Integer(c) / k + I * d / k\n            p = other_terms\n            from sympy import multinomial_coefficients\n            from sympy.polys.polyutils import basic_from_dict\n            expansion_dict = multinomial_coefficients(len(p), n)\n            return basic_from_dict(expansion_dict, *p)\n        elif n == 2:\n            return Add(*[f * g for f in base.args for g in base.args])\n        else:\n            multi = (base ** (n - 1))._eval_expand_multinomial()\n            if multi.is_Add:\n                return Add(*[f * g for f in base.args for g in multi.args])\n            else:\n                return Add(*[f * multi for f in base.args])\n    elif exp.is_Rational and exp.p < 0 and base.is_Add and (abs(exp.p) > exp.q):\n        return 1 / self.func(base, -exp)._eval_expand_multinomial()\n    elif exp.is_Add and base.is_Number:\n        coeff, tail = (S.One, S.Zero)\n        for term in exp.args:\n            if term.is_Number:\n                coeff *= self.func(base, term)\n            else:\n                tail += term\n        return coeff * self.func(base, tail)\n    else:\n        return result",
    ".sympy.core.mul.py@@Mul._eval_expand_mul": "def _eval_expand_mul(self, **hints):\n    from sympy import fraction\n    expr = self\n    n, d = fraction(expr)\n    if d.is_Mul:\n        n, d = [i._eval_expand_mul(**hints) if i.is_Mul else i for i in (n, d)]\n        expr = n / d\n        if not expr.is_Mul:\n            return expr\n    plain, sums, rewrite = ([], [], False)\n    for factor in expr.args:\n        if factor.is_Add:\n            sums.append(factor)\n            rewrite = True\n        elif factor.is_commutative:\n            plain.append(factor)\n        else:\n            sums.append(Basic(factor))\n    if not rewrite:\n        return expr\n    else:\n        plain = self.func(*plain)\n        if sums:\n            terms = self.func._expandsums(sums)\n            args = []\n            for term in terms:\n                t = self.func(plain, term)\n                if t.is_Mul and any((a.is_Add for a in t.args)):\n                    t = t._eval_expand_mul()\n                args.append(t)\n            return Add(*args)\n        else:\n            return plain",
    ".sympy.core.power.py@@Pow._eval_expand_power_base": "def _eval_expand_power_base(self, **hints):\n    force = hints.get('force', False)\n    b = self.base\n    e = self.exp\n    if not b.is_Mul:\n        return self\n    cargs, nc = b.args_cnc(split_1=False)\n    if nc:\n        nc = [i._eval_expand_power_base(**hints) if hasattr(i, '_eval_expand_power_base') else i for i in nc]\n        if e.is_Integer:\n            if e.is_positive:\n                rv = Mul(*nc * e)\n            else:\n                rv = 1 / Mul(*nc * -e)\n            if cargs:\n                rv *= Mul(*cargs) ** e\n            return rv\n        if not cargs:\n            return self.func(Mul(*nc), e, evaluate=False)\n        nc = [Mul(*nc)]\n\n    def pred(x):\n        if x is S.ImaginaryUnit:\n            return S.ImaginaryUnit\n        polar = x.is_polar\n        if polar:\n            return True\n        if polar is None:\n            return fuzzy_bool(x.is_nonnegative)\n    sifted = sift(cargs, pred)\n    nonneg = sifted[True]\n    other = sifted[None]\n    neg = sifted[False]\n    imag = sifted[S.ImaginaryUnit]\n    if imag:\n        I = S.ImaginaryUnit\n        i = len(imag) % 4\n        if i == 0:\n            pass\n        elif i == 1:\n            other.append(I)\n        elif i == 2:\n            if neg:\n                nonn = -neg.pop()\n                if nonn is not S.One:\n                    nonneg.append(nonn)\n            else:\n                neg.append(S.NegativeOne)\n        else:\n            if neg:\n                nonn = -neg.pop()\n                if nonn is not S.One:\n                    nonneg.append(nonn)\n            else:\n                neg.append(S.NegativeOne)\n            other.append(I)\n        del imag\n    if force or e.is_integer:\n        cargs = nonneg + neg + other\n        other = nc\n    else:\n        assert not e.is_Integer\n        if len(neg) > 1:\n            o = S.One\n            if not other and neg[0].is_Number:\n                o *= neg.pop(0)\n            if len(neg) % 2:\n                o = -o\n            for n in neg:\n                nonneg.append(-n)\n            if o is not S.One:\n                other.append(o)\n        elif neg and other:\n            if neg[0].is_Number and neg[0] is not S.NegativeOne:\n                other.append(S.NegativeOne)\n                nonneg.append(-neg[0])\n            else:\n                other.extend(neg)\n        else:\n            other.extend(neg)\n        del neg\n        cargs = nonneg\n        other += nc\n    rv = S.One\n    if cargs:\n        rv *= Mul(*[self.func(b, e, evaluate=False) for b in cargs])\n    if other:\n        rv *= self.func(Mul(*other), e, evaluate=False)\n    return rv",
    ".sympy.core.power.py@@Pow._eval_expand_power_exp": "def _eval_expand_power_exp(self, **hints):\n    b = self.base\n    e = self.exp\n    if e.is_Add and e.is_commutative:\n        expr = []\n        for x in e.args:\n            expr.append(self.func(self.base, x))\n        return Mul(*expr)\n    return self.func(b, e)",
    ".sympy.polys.polyutils.py@@_is_expandable_pow": "def _is_expandable_pow(expr):\n    return expr.is_Pow and expr.exp.is_positive and expr.exp.is_Integer and expr.base.is_Add",
    ".sympy.polys.polyutils.py@@_dict_from_expr_no_gens": "def _dict_from_expr_no_gens(expr, opt):\n    (poly,), gens = _parallel_dict_from_expr_no_gens((expr,), opt)\n    return (poly, gens)",
    ".sympy.polys.polyutils.py@@_parallel_dict_from_expr_no_gens": "def _parallel_dict_from_expr_no_gens(exprs, opt):\n    if opt.domain is not None:\n\n        def _is_coeff(factor):\n            return factor in opt.domain\n    elif opt.extension is True:\n\n        def _is_coeff(factor):\n            return factor.is_algebraic\n    elif opt.greedy is not False:\n\n        def _is_coeff(factor):\n            return False\n    else:\n\n        def _is_coeff(factor):\n            return factor.is_number\n    gens, reprs = (set([]), [])\n    for expr in exprs:\n        terms = []\n        if expr.is_Equality:\n            expr = expr.lhs - expr.rhs\n        for term in Add.make_args(expr):\n            coeff, elements = ([], {})\n            for factor in Mul.make_args(term):\n                if not _not_a_coeff(factor) and (factor.is_Number or _is_coeff(factor)):\n                    coeff.append(factor)\n                else:\n                    if opt.series is False:\n                        base, exp = decompose_power(factor)\n                        if exp < 0:\n                            exp, base = (-exp, Pow(base, -S.One))\n                    else:\n                        base, exp = decompose_power_rat(factor)\n                    elements[base] = elements.setdefault(base, 0) + exp\n                    gens.add(base)\n            terms.append((coeff, elements))\n        reprs.append(terms)\n    if not gens:\n        if len(exprs) == 1:\n            arg = exprs[0]\n        else:\n            arg = (exprs,)\n        raise GeneratorsNeeded('specify generators to give %s a meaning' % arg)\n    gens = _sort_gens(gens, opt=opt)\n    k, indices = (len(gens), {})\n    for i, g in enumerate(gens):\n        indices[g] = i\n    polys = []\n    for terms in reprs:\n        poly = {}\n        for coeff, term in terms:\n            monom = [0] * k\n            for base, exp in term.items():\n                monom[indices[base]] = exp\n            monom = tuple(monom)\n            if monom in poly:\n                poly[monom] += Mul(*coeff)\n            else:\n                poly[monom] = Mul(*coeff)\n        polys.append(poly)\n    return (polys, tuple(gens))",
    ".sympy.polys.polyoptions.py@@Option.default": "def default(cls):\n    return None",
    ".sympy.polys.polyutils.py@@_not_a_coeff": "def _not_a_coeff(expr):\n    return expr in [S.NaN, S.Infinity, S.NegativeInfinity, S.ComplexInfinity]",
    ".sympy.polys.polyutils.py@@_is_coeff": "def _is_coeff(factor):\n    return factor.is_number",
    ".sympy.polys.polyoptions.py@@Series.default": "def default(cls):\n    return False",
    ".sympy.polys.polyutils.py@@_sort_gens": "def _sort_gens(gens, **args):\n    opt = build_options(args)\n    gens_order, wrt = ({}, None)\n    if opt is not None:\n        gens_order, wrt = ({}, opt.wrt)\n        for i, gen in enumerate(opt.sort):\n            gens_order[gen] = i + 1\n\n    def order_key(gen):\n        gen = str(gen)\n        if wrt is not None:\n            try:\n                return (-len(wrt) + wrt.index(gen), gen, 0)\n            except ValueError:\n                pass\n        name, index = _re_gen.match(gen).groups()\n        if index:\n            index = int(index)\n        else:\n            index = 0\n        try:\n            return (gens_order[name], name, index)\n        except KeyError:\n            pass\n        try:\n            return (_gens_order[name], name, index)\n        except KeyError:\n            pass\n        return (_max_order, name, index)\n    try:\n        gens = sorted(gens, key=order_key)\n    except TypeError:\n        pass\n    return tuple(gens)",
    ".sympy.polys.polyoptions.py@@Sort.default": "def default(cls):\n    return []",
    ".sympy.polys.polyutils.py@@order_key": "def order_key(gen):\n    gen = str(gen)\n    if wrt is not None:\n        try:\n            return (-len(wrt) + wrt.index(gen), gen, 0)\n        except ValueError:\n            pass\n    name, index = _re_gen.match(gen).groups()\n    if index:\n        index = int(index)\n    else:\n        index = 0\n    try:\n        return (gens_order[name], name, index)\n    except KeyError:\n        pass\n    try:\n        return (_gens_order[name], name, index)\n    except KeyError:\n        pass\n    return (_max_order, name, index)",
    ".sympy.polys.polyoptions.py@@Options.clone": "def clone(self, updates={}):\n    obj = dict.__new__(self.__class__)\n    for option, value in self.items():\n        obj[option] = value\n    for option, value in updates.items():\n        obj[option] = value\n    return obj",
    ".sympy.polys.polytools.py@@Poly._from_dict": "def _from_dict(cls, rep, opt):\n    gens = opt.gens\n    if not gens:\n        raise GeneratorsNeeded(\"can't initialize from 'dict' without generators\")\n    level = len(gens) - 1\n    domain = opt.domain\n    if domain is None:\n        domain, rep = construct_domain(rep, opt=opt)\n    else:\n        for monom, coeff in rep.items():\n            rep[monom] = domain.convert(coeff)\n    return cls.new(DMP.from_dict(rep, level, domain), *gens)",
    ".sympy.polys.constructor.py@@construct_domain": "def construct_domain(obj, **args):\n    opt = build_options(args)\n    if hasattr(obj, '__iter__'):\n        if isinstance(obj, dict):\n            if not obj:\n                monoms, coeffs = ([], [])\n            else:\n                monoms, coeffs = list(zip(*list(obj.items())))\n        else:\n            coeffs = obj\n    else:\n        coeffs = [obj]\n    coeffs = list(map(sympify, coeffs))\n    result = _construct_simple(coeffs, opt)\n    if result is not None:\n        if result is not False:\n            domain, coeffs = result\n        else:\n            domain, coeffs = _construct_expression(coeffs, opt)\n    else:\n        if opt.composite is False:\n            result = None\n        else:\n            result = _construct_composite(coeffs, opt)\n        if result is not None:\n            domain, coeffs = result\n        else:\n            domain, coeffs = _construct_expression(coeffs, opt)\n    if hasattr(obj, '__iter__'):\n        if isinstance(obj, dict):\n            return (domain, dict(list(zip(monoms, coeffs))))\n        else:\n            return (domain, coeffs)\n    else:\n        return (domain, coeffs[0])",
    ".sympy.polys.constructor.py@@_construct_simple": "def _construct_simple(coeffs, opt):\n    result, rationals, reals, algebraics = ({}, False, False, False)\n    if opt.extension is True:\n        is_algebraic = lambda coeff: coeff.is_number and coeff.is_algebraic\n    else:\n        is_algebraic = lambda coeff: False\n    for coeff in coeffs:\n        if coeff.is_Rational:\n            if not coeff.is_Integer:\n                rationals = True\n        elif coeff.is_Float:\n            if not algebraics:\n                reals = True\n            else:\n                return False\n        elif is_algebraic(coeff):\n            if not reals:\n                algebraics = True\n            else:\n                return False\n        else:\n            return None\n    if algebraics:\n        domain, result = _construct_algebraic(coeffs, opt)\n    else:\n        if reals:\n            max_prec = max([c._prec for c in coeffs])\n            domain = RealField(prec=max_prec)\n        elif opt.field or rationals:\n            domain = QQ\n        else:\n            domain = ZZ\n        result = []\n        for coeff in coeffs:\n            result.append(domain.from_sympy(coeff))\n    return (domain, result)",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.from_sympy": "def from_sympy(self, a):\n    if a.is_Integer:\n        return PythonInteger(a.p)\n    elif a.is_Float and int(a) == a:\n        return PythonInteger(int(a))\n    else:\n        raise CoercionFailed('expected an integer, got %s' % a)",
    ".sympy.polys.polyclasses.py@@DMP.from_dict": "def from_dict(cls, rep, lev, dom):\n    return cls(dmp_from_dict(rep, lev, dom), dom, lev)",
    ".sympy.polys.densebasic.py@@dmp_from_dict": "def dmp_from_dict(f, u, K):\n    if not u:\n        return dup_from_dict(f, K)\n    if not f:\n        return dmp_zero(u)\n    coeffs = {}\n    for monom, coeff in f.items():\n        head, tail = (monom[0], monom[1:])\n        if head in coeffs:\n            coeffs[head][tail] = coeff\n        else:\n            coeffs[head] = {tail: coeff}\n    n, v, h = (max(coeffs.keys()), u - 1, [])\n    for k in range(n, -1, -1):\n        coeff = coeffs.get(k)\n        if coeff is not None:\n            h.append(dmp_from_dict(coeff, v, K))\n        else:\n            h.append(dmp_zero(v))\n    return dmp_strip(h, u)",
    ".sympy.polys.densebasic.py@@dup_from_dict": "def dup_from_dict(f, K):\n    if not f:\n        return []\n    n, h = (max(f.keys()), [])\n    if type(n) is int:\n        for k in range(n, -1, -1):\n            h.append(f.get(k, K.zero))\n    else:\n        n, = n\n        for k in range(n, -1, -1):\n            h.append(f.get((k,), K.zero))\n    return dup_strip(h)",
    ".sympy.polys.densebasic.py@@dup_strip": "def dup_strip(f):\n    if not f or f[0]:\n        return f\n    i = 0\n    for cf in f:\n        if cf:\n            break\n        else:\n            i += 1\n    return f[i:]",
    ".sympy.polys.polyclasses.py@@DMP.__init__": "def __init__(self, rep, dom, lev=None, ring=None):\n    if lev is not None:\n        if type(rep) is dict:\n            rep = dmp_from_dict(rep, lev, dom)\n        elif type(rep) is not list:\n            rep = dmp_ground(dom.convert(rep), lev)\n    else:\n        rep, lev = dmp_validate(rep)\n    self.rep = rep\n    self.lev = lev\n    self.dom = dom\n    self.ring = ring",
    ".sympy.polys.polytools.py@@Poly.new": "def new(cls, rep, *gens):\n    if not isinstance(rep, DMP):\n        raise PolynomialError('invalid polynomial representation: %s' % rep)\n    elif rep.lev != len(gens) - 1:\n        raise PolynomialError('invalid arguments: %s, %s' % (rep, gens))\n    obj = Basic.__new__(cls)\n    obj.rep = rep\n    obj.gens = gens\n    return obj",
    ".sympy.polys.polytools.py@@Poly.is_univariate": "def is_univariate(f):\n    return len(f.gens) == 1",
    ".sympy.polys.polytools.py@@Poly.degree": "def degree(f, gen=0):\n    j = f._gen_to_level(gen)\n    if hasattr(f.rep, 'degree'):\n        return f.rep.degree(j)\n    else:\n        raise OperationNotSupported(f, 'degree')",
    ".sympy.polys.polytools.py@@Poly._gen_to_level": "def _gen_to_level(f, gen):\n    if isinstance(gen, int):\n        length = len(f.gens)\n        if -length <= gen < length:\n            if gen < 0:\n                return length + gen\n            else:\n                return gen\n        else:\n            raise PolynomialError('-%s <= gen < %s expected, got %s' % (length, length, gen))\n    else:\n        try:\n            return f.gens.index(sympify(gen))\n        except ValueError:\n            raise PolynomialError('a valid generator expected, got %s' % gen)",
    ".sympy.polys.polyclasses.py@@DMP.degree": "def degree(f, j=0):\n    if isinstance(j, int):\n        return dmp_degree_in(f.rep, j, f.lev)\n    else:\n        raise TypeError('``int`` expected, got %s' % type(j))",
    ".sympy.polys.densebasic.py@@dmp_degree_in": "def dmp_degree_in(f, j, u):\n    if not j:\n        return dmp_degree(f, u)\n    if j < 0 or j > u:\n        raise IndexError('0 <= j <= %s expected, got %s' % (u, j))\n    return _rec_degree_in(f, u, 0, j)",
    ".sympy.polys.densebasic.py@@dmp_degree": "def dmp_degree(f, u):\n    if dmp_zero_p(f, u):\n        return -oo\n    else:\n        return len(f) - 1",
    ".sympy.polys.densebasic.py@@dmp_zero_p": "def dmp_zero_p(f, u):\n    while u:\n        if len(f) != 1:\n            return False\n        f = f[0]\n        u -= 1\n    return not f",
    ".sympy.polys.polytools.py@@Poly.get_domain": "def get_domain(f):\n    return f.rep.dom",
    ".sympy.polys.rootoftools.py@@ComplexRootOf._roots_trivial": "def _roots_trivial(cls, poly, radicals):\n    if poly.degree() == 1:\n        return roots_linear(poly)\n    if not radicals:\n        return None\n    if poly.degree() == 2:\n        return roots_quadratic(poly)\n    elif poly.length() == 2 and poly.TC():\n        return roots_binomial(poly)\n    else:\n        return None",
    ".sympy.polys.polyroots.py@@preprocess_roots": "def preprocess_roots(poly):\n    coeff = S.One\n    try:\n        _, poly = poly.clear_denoms(convert=True)\n    except DomainError:\n        return (coeff, poly)\n    poly = poly.primitive()[1]\n    poly = poly.retract()\n    if poly.get_domain().is_Poly and all((c.is_term for c in poly.rep.coeffs())):\n        poly = poly.inject()\n        strips = list(zip(*poly.monoms()))\n        gens = list(poly.gens[1:])\n        base, strips = (strips[0], strips[1:])\n        for gen, strip in zip(list(gens), strips):\n            reverse = False\n            if strip[0] < strip[-1]:\n                strip = reversed(strip)\n                reverse = True\n            ratio = None\n            for a, b in zip(base, strip):\n                if not a and (not b):\n                    continue\n                elif not a or not b:\n                    break\n                elif b % a != 0:\n                    break\n                else:\n                    _ratio = b // a\n                    if ratio is None:\n                        ratio = _ratio\n                    elif ratio != _ratio:\n                        break\n            else:\n                if reverse:\n                    ratio = -ratio\n                poly = poly.eval(gen, 1)\n                coeff *= gen ** (-ratio)\n                gens.remove(gen)\n        if gens:\n            poly = poly.eject(*gens)\n    if poly.is_univariate and poly.get_domain().is_ZZ:\n        basis = _integer_basis(poly)\n        if basis is not None:\n            n = poly.degree()\n\n            def func(k, coeff):\n                return coeff // basis ** (n - k[0])\n            poly = poly.termwise(func)\n            coeff *= basis\n    return (coeff, poly)",
    ".sympy.polys.polytools.py@@Poly.clear_denoms": "def clear_denoms(self, convert=False):\n    f = self\n    if not f.rep.dom.has_Field:\n        return (S.One, f)\n    dom = f.get_domain()\n    if dom.has_assoc_Ring:\n        dom = f.rep.dom.get_ring()\n    if hasattr(f.rep, 'clear_denoms'):\n        coeff, result = f.rep.clear_denoms()\n    else:\n        raise OperationNotSupported(f, 'clear_denoms')\n    coeff, f = (dom.to_sympy(coeff), f.per(result))\n    if not convert or not dom.has_assoc_Ring:\n        return (coeff, f)\n    else:\n        return (coeff, f.to_ring())",
    ".sympy.polys.polytools.py@@Poly.primitive": "def primitive(f):\n    if hasattr(f.rep, 'primitive'):\n        cont, result = f.rep.primitive()\n    else:\n        raise OperationNotSupported(f, 'primitive')\n    return (f.rep.dom.to_sympy(cont), f.per(result))",
    ".sympy.polys.polyclasses.py@@DMP.primitive": "def primitive(f):\n    cont, F = dmp_ground_primitive(f.rep, f.lev, f.dom)\n    return (cont, f.per(F))",
    ".sympy.polys.densetools.py@@dmp_ground_primitive": "def dmp_ground_primitive(f, u, K):\n    if not u:\n        return dup_primitive(f, K)\n    if dmp_zero_p(f, u):\n        return (K.zero, f)\n    cont = dmp_ground_content(f, u, K)\n    if K.is_one(cont):\n        return (cont, f)\n    else:\n        return (cont, dmp_quo_ground(f, cont, u, K))",
    ".sympy.polys.densetools.py@@dup_primitive": "def dup_primitive(f, K):\n    if not f:\n        return (K.zero, f)\n    cont = dup_content(f, K)\n    if K.is_one(cont):\n        return (cont, f)\n    else:\n        return (cont, dup_quo_ground(f, cont, K))",
    ".sympy.polys.densetools.py@@dup_content": "def dup_content(f, K):\n    from sympy.polys.domains import QQ\n    if not f:\n        return K.zero\n    cont = K.zero\n    if K == QQ:\n        for c in f:\n            cont = K.gcd(cont, c)\n    else:\n        for c in f:\n            cont = K.gcd(cont, c)\n            if K.is_one(cont):\n                break\n    return cont",
    ".sympy.polys.domains.domain.py@@Domain.__eq__": "def __eq__(self, other):\n    return isinstance(other, Domain) and self.dtype == other.dtype",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.gcd": "def gcd(self, a, b):\n    return python_gcd(a, b)",
    ".sympy.polys.domains.domain.py@@Domain.is_one": "def is_one(self, a):\n    return a == self.one",
    ".sympy.polys.polyclasses.py@@DMP.per": "def per(f, rep, dom=None, kill=False, ring=None):\n    lev = f.lev\n    if kill:\n        if not lev:\n            return rep\n        else:\n            lev -= 1\n    if dom is None:\n        dom = f.dom\n    if ring is None:\n        ring = f.ring\n    return DMP(rep, dom, lev, ring)",
    ".sympy.polys.polytools.py@@Poly.per": "def per(f, rep, gens=None, remove=None):\n    if gens is None:\n        gens = f.gens\n    if remove is not None:\n        gens = gens[:remove] + gens[remove + 1:]\n        if not gens:\n            return f.rep.dom.to_sympy(rep)\n    return f.__class__.new(rep, *gens)",
    ".sympy.polys.polytools.py@@Poly.retract": "def retract(f, field=None):\n    dom, rep = construct_domain(f.as_dict(zero=True), field=field, composite=f.domain.is_Composite or None)\n    return f.from_dict(rep, f.gens, domain=dom)",
    ".sympy.polys.polytools.py@@Poly.as_dict": "def as_dict(f, native=False, zero=False):\n    if native:\n        return f.rep.to_dict(zero=zero)\n    else:\n        return f.rep.to_sympy_dict(zero=zero)",
    ".sympy.polys.polytools.py@@Poly.domain": "def domain(self):\n    return self.get_domain()",
    ".sympy.polys.polytools.py@@Poly.from_dict": "def from_dict(cls, rep, *gens, **args):\n    opt = options.build_options(gens, args)\n    return cls._from_dict(rep, opt)",
    ".sympy.polys.polyoptions.py@@Domain.preprocess": "def preprocess(cls, domain):\n    if isinstance(domain, sympy.polys.domains.Domain):\n        return domain\n    elif hasattr(domain, 'to_domain'):\n        return domain.to_domain()\n    elif isinstance(domain, string_types):\n        if domain in ['Z', 'ZZ']:\n            return sympy.polys.domains.ZZ\n        if domain in ['Q', 'QQ']:\n            return sympy.polys.domains.QQ\n        if domain == 'EX':\n            return sympy.polys.domains.EX\n        r = cls._re_realfield.match(domain)\n        if r is not None:\n            _, _, prec = r.groups()\n            if prec is None:\n                return sympy.polys.domains.RR\n            else:\n                return sympy.polys.domains.RealField(int(prec))\n        r = cls._re_complexfield.match(domain)\n        if r is not None:\n            _, _, prec = r.groups()\n            if prec is None:\n                return sympy.polys.domains.CC\n            else:\n                return sympy.polys.domains.ComplexField(int(prec))\n        r = cls._re_finitefield.match(domain)\n        if r is not None:\n            return sympy.polys.domains.FF(int(r.groups()[1]))\n        r = cls._re_polynomial.match(domain)\n        if r is not None:\n            ground, gens = r.groups()\n            gens = list(map(sympify, gens.split(',')))\n            if ground in ['Z', 'ZZ']:\n                return sympy.polys.domains.ZZ.poly_ring(*gens)\n            else:\n                return sympy.polys.domains.QQ.poly_ring(*gens)\n        r = cls._re_fraction.match(domain)\n        if r is not None:\n            ground, gens = r.groups()\n            gens = list(map(sympify, gens.split(',')))\n            if ground in ['Z', 'ZZ']:\n                return sympy.polys.domains.ZZ.frac_field(*gens)\n            else:\n                return sympy.polys.domains.QQ.frac_field(*gens)\n        r = cls._re_algebraic.match(domain)\n        if r is not None:\n            gens = list(map(sympify, r.groups()[1].split(',')))\n            return sympy.polys.domains.QQ.algebraic_field(*gens)\n    raise OptionError('expected a valid domain specification, got %s' % domain)",
    ".sympy.utilities.iterables.py@@has_dups": "def has_dups(seq):\n    from sympy.core.containers import Dict\n    from sympy.sets.sets import Set\n    if isinstance(seq, (dict, set, Dict, Set)):\n        return False\n    uniq = set()\n    return any((True for s in seq if s in uniq or uniq.add(s)))",
    ".sympy.polys.domains.domain.py@@Domain.convert": "def convert(self, element, base=None):\n    if base is not None:\n        return self.convert_from(element, base)\n    if self.of_type(element):\n        return element\n    from sympy.polys.domains import PythonIntegerRing, GMPYIntegerRing, GMPYRationalField, RealField, ComplexField\n    if isinstance(element, integer_types):\n        return self.convert_from(element, PythonIntegerRing())\n    if HAS_GMPY:\n        integers = GMPYIntegerRing()\n        if isinstance(element, integers.tp):\n            return self.convert_from(element, integers)\n        rationals = GMPYRationalField()\n        if isinstance(element, rationals.tp):\n            return self.convert_from(element, rationals)\n    if isinstance(element, float):\n        parent = RealField(tol=False)\n        return self.convert_from(parent(element), parent)\n    if isinstance(element, complex):\n        parent = ComplexField(tol=False)\n        return self.convert_from(parent(element), parent)\n    if isinstance(element, DomainElement):\n        return self.convert_from(element, element.parent())\n    if self.is_Numerical and getattr(element, 'is_ground', False):\n        return self.convert(element.LC())\n    if isinstance(element, Basic):\n        try:\n            return self.from_sympy(element)\n        except (TypeError, ValueError):\n            pass\n    elif not is_sequence(element):\n        try:\n            element = sympify(element)\n            if isinstance(element, Basic):\n                return self.from_sympy(element)\n        except (TypeError, ValueError):\n            pass\n    raise CoercionFailed(\"can't convert %s of type %s to %s\" % (element, type(element), self))",
    ".sympy.polys.domains.domain.py@@Domain.of_type": "def of_type(self, element):\n    return isinstance(element, self.tp)",
    ".sympy.polys.domains.domain.py@@Domain.tp": "def tp(self):\n    return self.dtype",
    ".sympy.polys.polyroots.py@@_integer_basis": "def _integer_basis(poly):\n    monoms, coeffs = list(zip(*poly.terms()))\n    monoms, = list(zip(*monoms))\n    coeffs = list(map(abs, coeffs))\n    if coeffs[0] < coeffs[-1]:\n        coeffs = list(reversed(coeffs))\n        n = monoms[0]\n        monoms = [n - i for i in reversed(monoms)]\n    else:\n        return None\n    monoms = monoms[:-1]\n    coeffs = coeffs[:-1]\n    divs = reversed(divisors(gcd_list(coeffs))[1:])\n    try:\n        div = next(divs)\n    except StopIteration:\n        return None\n    while True:\n        for monom, coeff in zip(monoms, coeffs):\n            if coeff % div ** monom != 0:\n                try:\n                    div = next(divs)\n                except StopIteration:\n                    return None\n                else:\n                    break\n        else:\n            return div",
    ".sympy.polys.polytools.py@@Poly.terms": "def terms(f, order=None):\n    return [(m, f.rep.dom.to_sympy(c)) for m, c in f.rep.terms(order=order)]",
    ".sympy.polys.polyclasses.py@@DMP.terms": "def terms(f, order=None):\n    return dmp_list_terms(f.rep, f.lev, f.dom, order=order)",
    ".sympy.polys.densebasic.py@@dmp_list_terms": "def dmp_list_terms(f, u, K, order=None):\n\n    def sort(terms, O):\n        return sorted(terms, key=lambda term: O(term[0]), reverse=True)\n    terms = _rec_list_terms(f, u, ())\n    if not terms:\n        return [((0,) * (u + 1), K.zero)]\n    if order is None:\n        return terms\n    else:\n        return sort(terms, monomial_key(order))",
    ".sympy.polys.densebasic.py@@_rec_list_terms": "def _rec_list_terms(g, v, monom):\n    d, terms = (dmp_degree(g, v), [])\n    if not v:\n        for i, c in enumerate(g):\n            if not c:\n                continue\n            terms.append((monom + (d - i,), c))\n    else:\n        w = v - 1\n        for i, c in enumerate(g):\n            terms.extend(_rec_list_terms(c, w, monom + (d - i,)))\n    return terms",
    ".sympy.core.numbers.py@@One.__abs__": "def __abs__():\n    return S.One",
    ".sympy.core.numbers.py@@Integer.__abs__": "def __abs__(self):\n    if self.p >= 0:\n        return self\n    else:\n        return Integer(-self.p)",
    ".sympy.polys.polytools.py@@gcd_list": "def gcd_list(seq, *gens, **args):\n    seq = sympify(seq)\n\n    def try_non_polynomial_gcd(seq):\n        if not gens and (not args):\n            domain, numbers = construct_domain(seq)\n            if not numbers:\n                return domain.zero\n            elif domain.is_Numerical:\n                result, numbers = (numbers[0], numbers[1:])\n                for number in numbers:\n                    result = domain.gcd(result, number)\n                    if domain.is_one(result):\n                        break\n                return domain.to_sympy(result)\n        return None\n    result = try_non_polynomial_gcd(seq)\n    if result is not None:\n        return result\n    options.allowed_flags(args, ['polys'])\n    try:\n        polys, opt = parallel_poly_from_expr(seq, *gens, **args)\n    except PolificationFailed as exc:\n        result = try_non_polynomial_gcd(exc.exprs)\n        if result is not None:\n            return result\n        else:\n            raise ComputationFailed('gcd_list', len(seq), exc)\n    if not polys:\n        if not opt.polys:\n            return S.Zero\n        else:\n            return Poly(0, opt=opt)\n    result, polys = (polys[0], polys[1:])\n    for poly in polys:\n        result = result.gcd(poly)\n        if result.is_one:\n            break\n    if not opt.polys:\n        return result.as_expr()\n    else:\n        return result",
    ".sympy.polys.polytools.py@@try_non_polynomial_gcd": "def try_non_polynomial_gcd(seq):\n    if not gens and (not args):\n        domain, numbers = construct_domain(seq)\n        if not numbers:\n            return domain.zero\n        elif domain.is_Numerical:\n            result, numbers = (numbers[0], numbers[1:])\n            for number in numbers:\n                result = domain.gcd(result, number)\n                if domain.is_one(result):\n                    break\n            return domain.to_sympy(result)\n    return None",
    ".sympy.ntheory.factor_.py@@divisors": "def divisors(n, generator=False):\n    n = as_int(abs(n))\n    if isprime(n):\n        return [1, n]\n    if n == 1:\n        return [1]\n    if n == 0:\n        return []\n    rv = _divisors(n)\n    if not generator:\n        return sorted(rv)\n    return rv",
    ".sympy.ntheory.primetest.py@@isprime": "def isprime(n):\n    if isinstance(n, (Float, float)):\n        return False\n    n = int(n)\n    if n in [2, 3, 5]:\n        return True\n    if n < 2 or n % 2 == 0 or n % 3 == 0 or (n % 5 == 0):\n        return False\n    if n < 49:\n        return True\n    if n % 7 == 0 or n % 11 == 0 or n % 13 == 0 or (n % 17 == 0) or (n % 19 == 0) or (n % 23 == 0) or (n % 29 == 0) or (n % 31 == 0) or (n % 37 == 0) or (n % 41 == 0) or (n % 43 == 0) or (n % 47 == 0):\n        return False\n    if n < 2809:\n        return True\n    if n <= 23001:\n        return pow(2, n, n) == 2 and n not in [341, 561, 645, 1105, 1387, 1729, 1905, 2047, 2465, 2701, 2821, 3277, 4033, 4369, 4371, 4681, 5461, 6601, 7957, 8321, 8481, 8911, 10261, 10585, 11305, 12801, 13741, 13747, 13981, 14491, 15709, 15841, 16705, 18705, 18721, 19951, 23001]\n    from sympy.ntheory.generate import sieve as s\n    if n <= s._list[-1]:\n        l, u = s.search(n)\n        return l == u\n    from sympy.core.compatibility import HAS_GMPY\n    if HAS_GMPY == 2:\n        from gmpy2 import is_strong_prp, is_strong_selfridge_prp\n        return is_strong_prp(n, 2) and is_strong_selfridge_prp(n)\n    if n < 341531:\n        return mr(n, [9345883071009581737])\n    if n < 885594169:\n        return mr(n, [725270293939359937, 3569819667048198375])\n    if n < 350269456337:\n        return mr(n, [4230279247111683200, 14694767155120705706, 16641139526367750375])\n    if n < 55245642489451:\n        return mr(n, [2, 141889084524735, 1199124725622454117, 11096072698276303650])\n    if n < 7999252175582851:\n        return mr(n, [2, 4130806001517, 149795463772692060, 186635894390467037, 3967304179347715805])\n    if n < 585226005592931977:\n        return mr(n, [2, 123635709730000, 9233062284813009, 43835965440333360, 761179012939631437, 1263739024124850375])\n    if n < 18446744073709551616:\n        return mr(n, [2, 325, 9375, 28178, 450775, 9780504, 1795265022])\n    return mr(n, [2]) and is_strong_lucas_prp(n)",
    ".sympy.polys.rootoftools.py@@ComplexRootOf._indexed_root": "def _indexed_root(cls, poly, index):\n    _, factors = poly.factor_list()\n    reals = cls._get_reals(factors)\n    reals_count = cls._count_roots(reals)\n    if index < reals_count:\n        reals = cls._reals_sorted(reals)\n        return cls._reals_index(reals, index)\n    else:\n        complexes = cls._get_complexes(factors)\n        complexes = cls._complexes_sorted(complexes)\n        return cls._complexes_index(complexes, index - reals_count)",
    ".sympy.polys.polytools.py@@Poly.factor_list": "def factor_list(f):\n    if hasattr(f.rep, 'factor_list'):\n        try:\n            coeff, factors = f.rep.factor_list()\n        except DomainError:\n            return (S.One, [(f, 1)])\n    else:\n        raise OperationNotSupported(f, 'factor_list')\n    return (f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors])",
    ".sympy.polys.polyclasses.py@@DMP.factor_list": "def factor_list(f):\n    coeff, factors = dmp_factor_list(f.rep, f.lev, f.dom)\n    return (coeff, [(f.per(g), k) for g, k in factors])",
    ".sympy.polys.factortools.py@@dmp_factor_list": "def dmp_factor_list(f, u, K0):\n    if not u:\n        return dup_factor_list(f, K0)\n    J, f = dmp_terms_gcd(f, u, K0)\n    cont, f = dmp_ground_primitive(f, u, K0)\n    if K0.is_FiniteField:\n        coeff, factors = dmp_gf_factor(f, u, K0)\n    elif K0.is_Algebraic:\n        coeff, factors = dmp_ext_factor(f, u, K0)\n    else:\n        if not K0.is_Exact:\n            K0_inexact, K0 = (K0, K0.get_exact())\n            f = dmp_convert(f, u, K0_inexact, K0)\n        else:\n            K0_inexact = None\n        if K0.has_Field:\n            K = K0.get_ring()\n            denom, f = dmp_clear_denoms(f, u, K0, K)\n            f = dmp_convert(f, u, K0, K)\n        else:\n            K = K0\n        if K.is_ZZ:\n            levels, f, v = dmp_exclude(f, u, K)\n            coeff, factors = dmp_zz_factor(f, v, K)\n            for i, (f, k) in enumerate(factors):\n                factors[i] = (dmp_include(f, levels, v, K), k)\n        elif K.is_Poly:\n            f, v = dmp_inject(f, u, K)\n            coeff, factors = dmp_factor_list(f, v, K.dom)\n            for i, (f, k) in enumerate(factors):\n                factors[i] = (dmp_eject(f, v, K), k)\n            coeff = K.convert(coeff, K.dom)\n        else:\n            raise DomainError('factorization not supported over %s' % K0)\n        if K0.has_Field:\n            for i, (f, k) in enumerate(factors):\n                factors[i] = (dmp_convert(f, u, K, K0), k)\n            coeff = K0.convert(coeff, K)\n            if K0_inexact is None:\n                coeff = coeff / denom\n            else:\n                for i, (f, k) in enumerate(factors):\n                    f = dmp_quo_ground(f, denom, u, K0)\n                    f = dmp_convert(f, u, K0, K0_inexact)\n                    factors[i] = (f, k)\n                coeff = K0_inexact.convert(coeff, K0)\n                K0 = K0_inexact\n    for i, j in enumerate(reversed(J)):\n        if not j:\n            continue\n        term = {(0,) * (u - i) + (1,) + (0,) * i: K0.one}\n        factors.insert(0, (dmp_from_dict(term, u, K0), j))\n    return (coeff * cont, _sort_factors(factors))",
    ".sympy.polys.factortools.py@@dup_factor_list": "def dup_factor_list(f, K0):\n    j, f = dup_terms_gcd(f, K0)\n    cont, f = dup_primitive(f, K0)\n    if K0.is_FiniteField:\n        coeff, factors = dup_gf_factor(f, K0)\n    elif K0.is_Algebraic:\n        coeff, factors = dup_ext_factor(f, K0)\n    else:\n        if not K0.is_Exact:\n            K0_inexact, K0 = (K0, K0.get_exact())\n            f = dup_convert(f, K0_inexact, K0)\n        else:\n            K0_inexact = None\n        if K0.has_Field:\n            K = K0.get_ring()\n            denom, f = dup_clear_denoms(f, K0, K)\n            f = dup_convert(f, K0, K)\n        else:\n            K = K0\n        if K.is_ZZ:\n            coeff, factors = dup_zz_factor(f, K)\n        elif K.is_Poly:\n            f, u = dmp_inject(f, 0, K)\n            coeff, factors = dmp_factor_list(f, u, K.dom)\n            for i, (f, k) in enumerate(factors):\n                factors[i] = (dmp_eject(f, u, K), k)\n            coeff = K.convert(coeff, K.dom)\n        else:\n            raise DomainError('factorization not supported over %s' % K0)\n        if K0.has_Field:\n            for i, (f, k) in enumerate(factors):\n                factors[i] = (dup_convert(f, K, K0), k)\n            coeff = K0.convert(coeff, K)\n            if K0_inexact is None:\n                coeff = coeff / denom\n            else:\n                for i, (f, k) in enumerate(factors):\n                    f = dup_quo_ground(f, denom, K0)\n                    f = dup_convert(f, K0, K0_inexact)\n                    factors[i] = (f, k)\n                coeff = K0_inexact.convert(coeff, K0)\n                K0 = K0_inexact\n    if j:\n        factors.insert(0, ([K0.one, K0.zero], j))\n    return (coeff * cont, _sort_factors(factors))",
    ".sympy.polys.densebasic.py@@dup_terms_gcd": "def dup_terms_gcd(f, K):\n    if dup_TC(f, K) or not f:\n        return (0, f)\n    i = 0\n    for c in reversed(f):\n        if not c:\n            i += 1\n        else:\n            break\n    return (i, f[:-i])",
    ".sympy.polys.densebasic.py@@poly_TC": "def poly_TC(f, K):\n    if not f:\n        return K.zero\n    else:\n        return f[-1]",
    ".sympy.polys.factortools.py@@dup_zz_factor": "def dup_zz_factor(f, K):\n    cont, g = dup_primitive(f, K)\n    n = dup_degree(g)\n    if dup_LC(g, K) < 0:\n        cont, g = (-cont, dup_neg(g, K))\n    if n <= 0:\n        return (cont, [])\n    elif n == 1:\n        return (cont, [(g, 1)])\n    if query('USE_IRREDUCIBLE_IN_FACTOR'):\n        if dup_zz_irreducible_p(g, K):\n            return (cont, [(g, 1)])\n    g = dup_sqf_part(g, K)\n    H = None\n    if query('USE_CYCLOTOMIC_FACTOR'):\n        H = dup_zz_cyclotomic_factor(g, K)\n    if H is None:\n        H = dup_zz_zassenhaus(g, K)\n    factors = dup_trial_division(f, H, K)\n    return (cont, factors)",
    ".sympy.polys.densebasic.py@@dup_degree": "def dup_degree(f):\n    if not f:\n        return -oo\n    return len(f) - 1",
    ".sympy.polys.densebasic.py@@poly_LC": "def poly_LC(f, K):\n    if not f:\n        return K.zero\n    else:\n        return f[0]",
    ".sympy.polys.polyconfig.py@@query": "def query(key):\n    return _current_config.get(key.upper(), None)",
    ".sympy.polys.sqfreetools.py@@dup_sqf_part": "def dup_sqf_part(f, K):\n    if K.is_FiniteField:\n        return dup_gf_sqf_part(f, K)\n    if not f:\n        return f\n    if K.is_negative(dup_LC(f, K)):\n        f = dup_neg(f, K)\n    gcd = dup_gcd(f, dup_diff(f, 1, K), K)\n    sqf = dup_quo(f, gcd, K)\n    if K.has_Field:\n        return dup_monic(sqf, K)\n    else:\n        return dup_primitive(sqf, K)[1]",
    ".sympy.polys.domains.domain.py@@Domain.is_negative": "def is_negative(self, a):\n    return a < 0",
    ".sympy.polys.densetools.py@@dup_diff": "def dup_diff(f, m, K):\n    if m <= 0:\n        return f\n    n = dup_degree(f)\n    if n < m:\n        return []\n    deriv = []\n    if m == 1:\n        for coeff in f[:-m]:\n            deriv.append(K(n) * coeff)\n            n -= 1\n    else:\n        for coeff in f[:-m]:\n            k = n\n            for i in range(n - 1, n - m, -1):\n                k *= i\n            deriv.append(K(k) * coeff)\n            n -= 1\n    return dup_strip(deriv)",
    ".sympy.polys.domains.domain.py@@Domain.__call__": "def __call__(self, *args):\n    return self.new(*args)",
    ".sympy.polys.domains.domain.py@@Domain.new": "def new(self, *args):\n    return self.dtype(*args)",
    ".sympy.polys.euclidtools.py@@dup_gcd": "def dup_gcd(f, g, K):\n    return dup_inner_gcd(f, g, K)[0]",
    ".sympy.polys.euclidtools.py@@dup_inner_gcd": "def dup_inner_gcd(f, g, K):\n    if not K.is_Exact:\n        try:\n            exact = K.get_exact()\n        except DomainError:\n            return ([K.one], f, g)\n        f = dup_convert(f, K, exact)\n        g = dup_convert(g, K, exact)\n        h, cff, cfg = dup_inner_gcd(f, g, exact)\n        h = dup_convert(h, exact, K)\n        cff = dup_convert(cff, exact, K)\n        cfg = dup_convert(cfg, exact, K)\n        return (h, cff, cfg)\n    elif K.has_Field:\n        if K.is_QQ and query('USE_HEU_GCD'):\n            try:\n                return dup_qq_heu_gcd(f, g, K)\n            except HeuristicGCDFailed:\n                pass\n        return dup_ff_prs_gcd(f, g, K)\n    else:\n        if K.is_ZZ and query('USE_HEU_GCD'):\n            try:\n                return dup_zz_heu_gcd(f, g, K)\n            except HeuristicGCDFailed:\n                pass\n        return dup_rr_prs_gcd(f, g, K)",
    ".sympy.polys.euclidtools.py@@dup_zz_heu_gcd": "def dup_zz_heu_gcd(f, g, K):\n    result = _dup_rr_trivial_gcd(f, g, K)\n    if result is not None:\n        return result\n    df = dup_degree(f)\n    dg = dup_degree(g)\n    gcd, f, g = dup_extract(f, g, K)\n    if df == 0 or dg == 0:\n        return ([gcd], f, g)\n    f_norm = dup_max_norm(f, K)\n    g_norm = dup_max_norm(g, K)\n    B = K(2 * min(f_norm, g_norm) + 29)\n    x = max(min(B, 99 * K.sqrt(B)), 2 * min(f_norm // abs(dup_LC(f, K)), g_norm // abs(dup_LC(g, K))) + 2)\n    for i in range(0, HEU_GCD_MAX):\n        ff = dup_eval(f, x, K)\n        gg = dup_eval(g, x, K)\n        if ff and gg:\n            h = K.gcd(ff, gg)\n            cff = ff // h\n            cfg = gg // h\n            h = _dup_zz_gcd_interpolate(h, x, K)\n            h = dup_primitive(h, K)[1]\n            cff_, r = dup_div(f, h, K)\n            if not r:\n                cfg_, r = dup_div(g, h, K)\n                if not r:\n                    h = dup_mul_ground(h, gcd, K)\n                    return (h, cff_, cfg_)\n            cff = _dup_zz_gcd_interpolate(cff, x, K)\n            h, r = dup_div(f, cff, K)\n            if not r:\n                cfg_, r = dup_div(g, h, K)\n                if not r:\n                    h = dup_mul_ground(h, gcd, K)\n                    return (h, cff, cfg_)\n            cfg = _dup_zz_gcd_interpolate(cfg, x, K)\n            h, r = dup_div(g, cfg, K)\n            if not r:\n                cff_, r = dup_div(f, h, K)\n                if not r:\n                    h = dup_mul_ground(h, gcd, K)\n                    return (h, cff_, cfg)\n        x = 73794 * x * K.sqrt(K.sqrt(x)) // 27011\n    raise HeuristicGCDFailed('no luck')",
    ".sympy.polys.euclidtools.py@@_dup_rr_trivial_gcd": "def _dup_rr_trivial_gcd(f, g, K):\n    if not (f or g):\n        return ([], [], [])\n    elif not f:\n        if K.is_nonnegative(dup_LC(g, K)):\n            return (g, [], [K.one])\n        else:\n            return (dup_neg(g, K), [], [-K.one])\n    elif not g:\n        if K.is_nonnegative(dup_LC(f, K)):\n            return (f, [K.one], [])\n        else:\n            return (dup_neg(f, K), [-K.one], [])\n    return None",
    ".sympy.polys.densetools.py@@dup_extract": "def dup_extract(f, g, K):\n    fc = dup_content(f, K)\n    gc = dup_content(g, K)\n    gcd = K.gcd(fc, gc)\n    if not K.is_one(gcd):\n        f = dup_quo_ground(f, gcd, K)\n        g = dup_quo_ground(g, gcd, K)\n    return (gcd, f, g)",
    ".sympy.polys.densearith.py@@dup_max_norm": "def dup_max_norm(f, K):\n    if not f:\n        return K.zero\n    else:\n        return max(dup_abs(f, K))",
    ".sympy.polys.densearith.py@@dup_abs": "def dup_abs(f, K):\n    return [K.abs(coeff) for coeff in f]",
    ".sympy.polys.domains.domain.py@@Domain.abs": "def abs(self, a):\n    return abs(a)",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.sqrt": "def sqrt(self, a):\n    return python_sqrt(a)",
    ".sympy.polys.domains.groundtypes.py@@python_sqrt": "def python_sqrt(n):\n    return int(mlib.isqrt(n))",
    ".sympy.polys.densetools.py@@dup_eval": "def dup_eval(f, a, K):\n    if not a:\n        return dup_TC(f, K)\n    result = K.zero\n    for c in f:\n        result *= a\n        result += c\n    return result",
    ".sympy.polys.euclidtools.py@@_dup_zz_gcd_interpolate": "def _dup_zz_gcd_interpolate(h, x, K):\n    f = []\n    while h:\n        g = h % x\n        if g > x // 2:\n            g -= x\n        f.insert(0, g)\n        h = (h - g) // x\n    return f",
    ".sympy.polys.densearith.py@@dup_div": "def dup_div(f, g, K):\n    if K.has_Field:\n        return dup_ff_div(f, g, K)\n    else:\n        return dup_rr_div(f, g, K)",
    ".sympy.polys.densearith.py@@dup_rr_div": "def dup_rr_div(f, g, K):\n    df = dup_degree(f)\n    dg = dup_degree(g)\n    q, r, dr = ([], f, df)\n    if not g:\n        raise ZeroDivisionError('polynomial division')\n    elif df < dg:\n        return (q, r)\n    lc_g = dup_LC(g, K)\n    while True:\n        lc_r = dup_LC(r, K)\n        if lc_r % lc_g:\n            break\n        c = K.exquo(lc_r, lc_g)\n        j = dr - dg\n        q = dup_add_term(q, c, j, K)\n        h = dup_mul_term(g, c, j, K)\n        r = dup_sub(r, h, K)\n        _dr, dr = (dr, dup_degree(r))\n        if dr < dg:\n            break\n        elif not dr < _dr:\n            raise PolynomialDivisionFailed(f, g, K)\n    return (q, r)",
    ".sympy.polys.domains.ring.py@@Ring.exquo": "def exquo(self, a, b):\n    if a % b:\n        raise ExactQuotientFailed(a, b, self)\n    else:\n        return a // b",
    ".sympy.polys.densearith.py@@dup_add_term": "def dup_add_term(f, c, i, K):\n    if not c:\n        return f\n    n = len(f)\n    m = n - i - 1\n    if i == n - 1:\n        return dup_strip([f[0] + c] + f[1:])\n    elif i >= n:\n        return [c] + [K.zero] * (i - n) + f\n    else:\n        return f[:m] + [f[m] + c] + f[m + 1:]",
    ".sympy.polys.densearith.py@@dup_mul_term": "def dup_mul_term(f, c, i, K):\n    if not c or not f:\n        return []\n    else:\n        return [cf * c for cf in f] + [K.zero] * i",
    ".sympy.polys.densearith.py@@dup_sub": "def dup_sub(f, g, K):\n    if not f:\n        return dup_neg(g, K)\n    if not g:\n        return f\n    df = dup_degree(f)\n    dg = dup_degree(g)\n    if df == dg:\n        return dup_strip([a - b for a, b in zip(f, g)])\n    else:\n        k = abs(df - dg)\n        if df > dg:\n            h, f = (f[:k], f[k:])\n        else:\n            h, g = (dup_neg(g[:k], K), g[k:])\n        return h + [a - b for a, b in zip(f, g)]",
    ".sympy.core.numbers.py@@NegativeInfinity.__lt__": "def __lt__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s < %s' % (self, other))\n    if other.is_real:\n        if other.is_finite or other is S.Infinity:\n            return S.true\n        elif other.is_nonnegative:\n            return S.true\n        elif other.is_infinite and other.is_negative:\n            return S.false\n    return Expr.__lt__(self, other)",
    ".sympy.polys.densearith.py@@dup_mul_ground": "def dup_mul_ground(f, c, K):\n    if not c or not f:\n        return []\n    else:\n        return [cf * c for cf in f]",
    ".sympy.polys.densearith.py@@dup_quo": "def dup_quo(f, g, K):\n    return dup_div(f, g, K)[0]",
    ".sympy.polys.factortools.py@@dup_zz_cyclotomic_factor": "def dup_zz_cyclotomic_factor(f, K):\n    lc_f, tc_f = (dup_LC(f, K), dup_TC(f, K))\n    if dup_degree(f) <= 0:\n        return None\n    if lc_f != 1 or tc_f not in [-1, 1]:\n        return None\n    if any((bool(cf) for cf in f[1:-1])):\n        return None\n    n = dup_degree(f)\n    F = _dup_cyclotomic_decompose(n, K)\n    if not K.is_one(tc_f):\n        return F\n    else:\n        H = []\n        for h in _dup_cyclotomic_decompose(2 * n, K):\n            if h not in F:\n                H.append(h)\n        return H",
    ".sympy.polys.factortools.py@@dup_zz_zassenhaus": "def dup_zz_zassenhaus(f, K):\n    n = dup_degree(f)\n    if n == 1:\n        return [f]\n    fc = f[-1]\n    A = dup_max_norm(f, K)\n    b = dup_LC(f, K)\n    B = int(abs(K.sqrt(K(n + 1)) * 2 ** n * A * b))\n    C = int((n + 1) ** (2 * n) * A ** (2 * n - 1))\n    gamma = int(_ceil(2 * _log(C, 2)))\n    bound = int(2 * gamma * _log(gamma))\n    a = []\n    for px in range(3, bound + 1):\n        if not isprime(px) or b % px == 0:\n            continue\n        px = K.convert(px)\n        F = gf_from_int_poly(f, px)\n        if not gf_sqf_p(F, px, K):\n            continue\n        fsqfx = gf_factor_sqf(F, px, K)[1]\n        a.append((px, fsqfx))\n        if len(fsqfx) < 15 or len(a) > 4:\n            break\n    p, fsqf = min(a, key=lambda x: len(x[1]))\n    l = int(_ceil(_log(2 * B + 1, p)))\n    modular = [gf_to_int_poly(ff, p) for ff in fsqf]\n    g = dup_zz_hensel_lift(p, f, modular, l, K)\n    sorted_T = range(len(g))\n    T = set(sorted_T)\n    factors, s = ([], 1)\n    pl = p ** l\n    while 2 * s <= len(T):\n        for S in subsets(sorted_T, s):\n            if b == 1:\n                q = 1\n                for i in S:\n                    q = q * g[i][-1]\n                q = q % pl\n                if not _test_pl(fc, q, pl):\n                    continue\n            else:\n                G = [b]\n                for i in S:\n                    G = dup_mul(G, g[i], K)\n                G = dup_trunc(G, pl, K)\n                G = dup_primitive(G, K)[1]\n                q = G[-1]\n                if q and fc % q != 0:\n                    continue\n            H = [b]\n            S = set(S)\n            T_S = T - S\n            if b == 1:\n                G = [b]\n                for i in S:\n                    G = dup_mul(G, g[i], K)\n                G = dup_trunc(G, pl, K)\n            for i in T_S:\n                H = dup_mul(H, g[i], K)\n            H = dup_trunc(H, pl, K)\n            G_norm = dup_l1_norm(G, K)\n            H_norm = dup_l1_norm(H, K)\n            if G_norm * H_norm <= B:\n                T = T_S\n                sorted_T = [i for i in sorted_T if i not in S]\n                G = dup_primitive(G, K)[1]\n                f = dup_primitive(H, K)[1]\n                factors.append(G)\n                b = dup_LC(f, K)\n                break\n        else:\n            s += 1\n    return factors + [f]",
    ".sympy.polys.galoistools.py@@gf_from_int_poly": "def gf_from_int_poly(f, p):\n    return gf_trunc(f, p)",
    ".sympy.polys.galoistools.py@@gf_trunc": "def gf_trunc(f, p):\n    return gf_strip([a % p for a in f])",
    ".sympy.polys.galoistools.py@@gf_strip": "def gf_strip(f):\n    if not f or f[0]:\n        return f\n    k = 0\n    for coeff in f:\n        if coeff:\n            break\n        else:\n            k += 1\n    return f[k:]",
    ".sympy.polys.galoistools.py@@gf_sqf_p": "def gf_sqf_p(f, p, K):\n    _, f = gf_monic(f, p, K)\n    if not f:\n        return True\n    else:\n        return gf_gcd(f, gf_diff(f, p, K), p, K) == [K.one]",
    ".sympy.polys.galoistools.py@@gf_monic": "def gf_monic(f, p, K):\n    if not f:\n        return (K.zero, [])\n    else:\n        lc = f[0]\n        if K.is_one(lc):\n            return (lc, list(f))\n        else:\n            return (lc, gf_quo_ground(f, lc, p, K))",
    ".sympy.polys.galoistools.py@@gf_diff": "def gf_diff(f, p, K):\n    df = gf_degree(f)\n    h, n = ([K.zero] * df, df)\n    for coeff in f[:-1]:\n        coeff *= K(n)\n        coeff %= p\n        if coeff:\n            h[df - n] = coeff\n        n -= 1\n    return gf_strip(h)",
    ".sympy.polys.galoistools.py@@gf_degree": "def gf_degree(f):\n    return len(f) - 1",
    ".sympy.polys.galoistools.py@@gf_gcd": "def gf_gcd(f, g, p, K):\n    while g:\n        f, g = (g, gf_rem(f, g, p, K))\n    return gf_monic(f, p, K)[1]",
    ".sympy.polys.galoistools.py@@gf_rem": "def gf_rem(f, g, p, K):\n    return gf_div(f, g, p, K)[1]",
    ".sympy.polys.galoistools.py@@gf_div": "def gf_div(f, g, p, K):\n    df = gf_degree(f)\n    dg = gf_degree(g)\n    if not g:\n        raise ZeroDivisionError('polynomial division')\n    elif df < dg:\n        return ([], f)\n    inv = K.invert(g[0], p)\n    h, dq, dr = (list(f), df - dg, dg - 1)\n    for i in range(0, df + 1):\n        coeff = h[i]\n        for j in range(max(0, dg - i), min(df - i, dr) + 1):\n            coeff -= h[i + j - dg] * g[dg - j]\n        if i <= dq:\n            coeff *= inv\n        h[i] = coeff % p\n    return (h[:dq + 1], gf_strip(h[dq + 1:]))",
    ".sympy.polys.domains.ring.py@@Ring.invert": "def invert(self, a, b):\n    s, t, h = self.gcdex(a, b)\n    if self.is_one(h):\n        return s % b\n    else:\n        raise NotInvertible('zero divisor')",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.gcdex": "def gcdex(self, a, b):\n    return python_gcdex(a, b)",
    ".sympy.core.numbers.py@@igcdex": "def igcdex(a, b):\n    if not a and (not b):\n        return (0, 1, 0)\n    if not a:\n        return (0, b // abs(b), abs(b))\n    if not b:\n        return (a // abs(a), 0, abs(a))\n    if a < 0:\n        a, x_sign = (-a, -1)\n    else:\n        x_sign = 1\n    if b < 0:\n        b, y_sign = (-b, -1)\n    else:\n        y_sign = 1\n    x, y, r, s = (1, 0, 0, 1)\n    while b:\n        c, q = (a % b, a // b)\n        a, b, r, s, x, y = (b, c, x - q * r, y - q * s, r, s)\n    return (x * x_sign, y * y_sign, a)",
    ".sympy.polys.galoistools.py@@gf_factor_sqf": "def gf_factor_sqf(f, p, K, method=None):\n    lc, f = gf_monic(f, p, K)\n    if gf_degree(f) < 1:\n        return (lc, [])\n    method = method or query('GF_FACTOR_METHOD')\n    if method is not None:\n        factors = _factor_methods[method](f, p, K)\n    else:\n        factors = gf_zassenhaus(f, p, K)\n    return (lc, factors)",
    ".sympy.polys.galoistools.py@@gf_zassenhaus": "def gf_zassenhaus(f, p, K):\n    factors = []\n    for factor, n in gf_ddf_zassenhaus(f, p, K):\n        factors += gf_edf_zassenhaus(factor, n, p, K)\n    return _sort_factors(factors, multiple=False)",
    ".sympy.polys.galoistools.py@@gf_ddf_zassenhaus": "def gf_ddf_zassenhaus(f, p, K):\n    i, g, factors = (1, [K.one, K.zero], [])\n    b = gf_frobenius_monomial_base(f, p, K)\n    while 2 * i <= gf_degree(f):\n        g = gf_frobenius_map(g, f, b, p, K)\n        h = gf_gcd(f, gf_sub(g, [K.one, K.zero], p, K), p, K)\n        if h != [K.one]:\n            factors.append((h, i))\n            f = gf_quo(f, h, p, K)\n            g = gf_rem(g, f, p, K)\n            b = gf_frobenius_monomial_base(f, p, K)\n        i += 1\n    if f != [K.one]:\n        return factors + [(f, gf_degree(f))]\n    else:\n        return factors",
    ".sympy.polys.galoistools.py@@gf_frobenius_monomial_base": "def gf_frobenius_monomial_base(g, p, K):\n    n = gf_degree(g)\n    if n == 0:\n        return []\n    b = [0] * n\n    b[0] = [1]\n    if p < n:\n        for i in range(1, n):\n            mon = gf_lshift(b[i - 1], p, K)\n            b[i] = gf_rem(mon, g, p, K)\n    elif n > 1:\n        b[1] = gf_pow_mod([K.one, K.zero], p, g, p, K)\n        for i in range(2, n):\n            b[i] = gf_mul(b[i - 1], b[1], p, K)\n            b[i] = gf_rem(b[i], g, p, K)\n    return b",
    ".sympy.polys.galoistools.py@@gf_lshift": "def gf_lshift(f, n, K):\n    if not f:\n        return f\n    else:\n        return f + [K.zero] * n",
    ".sympy.polys.galoistools.py@@gf_frobenius_map": "def gf_frobenius_map(f, g, b, p, K):\n    m = gf_degree(g)\n    if gf_degree(f) >= m:\n        f = gf_rem(f, g, p, K)\n    if not f:\n        return []\n    n = gf_degree(f)\n    sf = [f[-1]]\n    for i in range(1, n + 1):\n        v = gf_mul_ground(b[i], f[n - i], p, K)\n        sf = gf_add(sf, v, p, K)\n    return sf",
    ".sympy.polys.galoistools.py@@gf_mul_ground": "def gf_mul_ground(f, a, p, K):\n    if not a:\n        return []\n    else:\n        return [a * b % p for b in f]",
    ".sympy.polys.galoistools.py@@gf_add": "def gf_add(f, g, p, K):\n    if not f:\n        return g\n    if not g:\n        return f\n    df = gf_degree(f)\n    dg = gf_degree(g)\n    if df == dg:\n        return gf_strip([(a + b) % p for a, b in zip(f, g)])\n    else:\n        k = abs(df - dg)\n        if df > dg:\n            h, f = (f[:k], f[k:])\n        else:\n            h, g = (g[:k], g[k:])\n        return h + [(a + b) % p for a, b in zip(f, g)]",
    ".sympy.polys.galoistools.py@@gf_sub": "def gf_sub(f, g, p, K):\n    if not g:\n        return f\n    if not f:\n        return gf_neg(g, p, K)\n    df = gf_degree(f)\n    dg = gf_degree(g)\n    if df == dg:\n        return gf_strip([(a - b) % p for a, b in zip(f, g)])\n    else:\n        k = abs(df - dg)\n        if df > dg:\n            h, f = (f[:k], f[k:])\n        else:\n            h, g = (gf_neg(g[:k], p, K), g[k:])\n        return h + [(a - b) % p for a, b in zip(f, g)]",
    ".sympy.polys.galoistools.py@@gf_quo_ground": "def gf_quo_ground(f, a, p, K):\n    return gf_mul_ground(f, K.invert(a, p), p, K)",
    ".sympy.polys.galoistools.py@@gf_quo": "def gf_quo(f, g, p, K):\n    df = gf_degree(f)\n    dg = gf_degree(g)\n    if not g:\n        raise ZeroDivisionError('polynomial division')\n    elif df < dg:\n        return []\n    inv = K.invert(g[0], p)\n    h, dq, dr = (f[:], df - dg, dg - 1)\n    for i in range(0, dq + 1):\n        coeff = h[i]\n        for j in range(max(0, dg - i), min(df - i, dr) + 1):\n            coeff -= h[i + j - dg] * g[dg - j]\n        h[i] = coeff * inv % p\n    return h[:dq + 1]",
    ".sympy.polys.galoistools.py@@gf_pow_mod": "def gf_pow_mod(f, n, g, p, K):\n    if not n:\n        return [K.one]\n    elif n == 1:\n        return gf_rem(f, g, p, K)\n    elif n == 2:\n        return gf_rem(gf_sqr(f, p, K), g, p, K)\n    h = [K.one]\n    while True:\n        if n & 1:\n            h = gf_mul(h, f, p, K)\n            h = gf_rem(h, g, p, K)\n            n -= 1\n        n >>= 1\n        if not n:\n            break\n        f = gf_sqr(f, p, K)\n        f = gf_rem(f, g, p, K)\n    return h",
    ".sympy.polys.galoistools.py@@gf_mul": "def gf_mul(f, g, p, K):\n    df = gf_degree(f)\n    dg = gf_degree(g)\n    dh = df + dg\n    h = [0] * (dh + 1)\n    for i in range(0, dh + 1):\n        coeff = K.zero\n        for j in range(max(0, i - dg), min(i, df) + 1):\n            coeff += f[j] * g[i - j]\n        h[i] = coeff % p\n    return gf_strip(h)",
    ".sympy.polys.galoistools.py@@gf_sqr": "def gf_sqr(f, p, K):\n    df = gf_degree(f)\n    dh = 2 * df\n    h = [0] * (dh + 1)\n    for i in range(0, dh + 1):\n        coeff = K.zero\n        jmin = max(0, i - df)\n        jmax = min(i, df)\n        n = jmax - jmin + 1\n        jmax = jmin + n // 2 - 1\n        for j in range(jmin, jmax + 1):\n            coeff += f[j] * f[i - j]\n        coeff += coeff\n        if n & 1:\n            elem = f[jmax + 1]\n            coeff += elem ** 2\n        h[i] = coeff % p\n    return gf_strip(h)",
    ".sympy.polys.galoistools.py@@gf_edf_zassenhaus": "def gf_edf_zassenhaus(f, n, p, K):\n    factors, q = ([f], int(p))\n    if gf_degree(f) <= n:\n        return factors\n    N = gf_degree(f) // n\n    if p != 2:\n        b = gf_frobenius_monomial_base(f, p, K)\n    while len(factors) < N:\n        r = gf_random(2 * n - 1, p, K)\n        if p == 2:\n            h = r\n            for i in range(0, 2 ** (n * N - 1)):\n                r = gf_pow_mod(r, 2, f, p, K)\n                h = gf_add(h, r, p, K)\n            g = gf_gcd(f, h, p, K)\n        else:\n            h = _gf_pow_pnm1d2(r, n, f, b, p, K)\n            g = gf_gcd(f, gf_sub_ground(h, K.one, p, K), p, K)\n        if g != [K.one] and g != f:\n            factors = gf_edf_zassenhaus(g, n, p, K) + gf_edf_zassenhaus(gf_quo(f, g, p, K), n, p, K)\n    return _sort_factors(factors, multiple=False)",
    ".sympy.polys.polyutils.py@@_sort_factors": "def _sort_factors(factors, **args):\n\n    def order_if_multiple_key(factor):\n        f, n = factor\n        return (len(f), n, f)\n\n    def order_no_multiple_key(f):\n        return (len(f), f)\n    if args.get('multiple', True):\n        return sorted(factors, key=order_if_multiple_key)\n    else:\n        return sorted(factors, key=order_no_multiple_key)",
    ".sympy.polys.polyutils.py@@order_no_multiple_key": "def order_no_multiple_key(f):\n    return (len(f), f)",
    ".sympy.polys.galoistools.py@@gf_to_int_poly": "def gf_to_int_poly(f, p, symmetric=True):\n    if symmetric:\n        return [gf_int(c, p) for c in f]\n    else:\n        return f",
    ".sympy.polys.galoistools.py@@gf_int": "def gf_int(a, p):\n    if a <= p // 2:\n        return a\n    else:\n        return a - p",
    ".sympy.polys.factortools.py@@dup_zz_hensel_lift": "def dup_zz_hensel_lift(p, f, f_list, l, K):\n    r = len(f_list)\n    lc = dup_LC(f, K)\n    if r == 1:\n        F = dup_mul_ground(f, K.gcdex(lc, p ** l)[0], K)\n        return [dup_trunc(F, p ** l, K)]\n    m = p\n    k = r // 2\n    d = int(_ceil(_log(l, 2)))\n    g = gf_from_int_poly([lc], p)\n    for f_i in f_list[:k]:\n        g = gf_mul(g, gf_from_int_poly(f_i, p), p, K)\n    h = gf_from_int_poly(f_list[k], p)\n    for f_i in f_list[k + 1:]:\n        h = gf_mul(h, gf_from_int_poly(f_i, p), p, K)\n    s, t, _ = gf_gcdex(g, h, p, K)\n    g = gf_to_int_poly(g, p)\n    h = gf_to_int_poly(h, p)\n    s = gf_to_int_poly(s, p)\n    t = gf_to_int_poly(t, p)\n    for _ in range(1, d + 1):\n        (g, h, s, t), m = (dup_zz_hensel_step(m, f, g, h, s, t, K), m ** 2)\n    return dup_zz_hensel_lift(p, g, f_list[:k], l, K) + dup_zz_hensel_lift(p, h, f_list[k:], l, K)",
    ".sympy.polys.galoistools.py@@gf_gcdex": "def gf_gcdex(f, g, p, K):\n    if not (f or g):\n        return ([K.one], [], [])\n    p0, r0 = gf_monic(f, p, K)\n    p1, r1 = gf_monic(g, p, K)\n    if not f:\n        return ([], [K.invert(p1, p)], r1)\n    if not g:\n        return ([K.invert(p0, p)], [], r0)\n    s0, s1 = ([K.invert(p0, p)], [])\n    t0, t1 = ([], [K.invert(p1, p)])\n    while True:\n        Q, R = gf_div(r0, r1, p, K)\n        if not R:\n            break\n        (lc, r1), r0 = (gf_monic(R, p, K), r1)\n        inv = K.invert(lc, p)\n        s = gf_sub_mul(s0, s1, Q, p, K)\n        t = gf_sub_mul(t0, t1, Q, p, K)\n        s1, s0 = (gf_mul_ground(s, inv, p, K), s1)\n        t1, t0 = (gf_mul_ground(t, inv, p, K), t1)\n    return (s1, t1, r1)",
    ".sympy.polys.galoistools.py@@gf_sub_mul": "def gf_sub_mul(f, g, h, p, K):\n    return gf_sub(f, gf_mul(g, h, p, K), p, K)",
    ".sympy.polys.galoistools.py@@gf_neg": "def gf_neg(f, p, K):\n    return [-coeff % p for coeff in f]",
    ".sympy.polys.factortools.py@@dup_zz_hensel_step": "def dup_zz_hensel_step(m, f, g, h, s, t, K):\n    M = m ** 2\n    e = dup_sub_mul(f, g, h, K)\n    e = dup_trunc(e, M, K)\n    q, r = dup_div(dup_mul(s, e, K), h, K)\n    q = dup_trunc(q, M, K)\n    r = dup_trunc(r, M, K)\n    u = dup_add(dup_mul(t, e, K), dup_mul(q, g, K), K)\n    G = dup_trunc(dup_add(g, u, K), M, K)\n    H = dup_trunc(dup_add(h, r, K), M, K)\n    u = dup_add(dup_mul(s, G, K), dup_mul(t, H, K), K)\n    b = dup_trunc(dup_sub(u, [K.one], K), M, K)\n    c, d = dup_div(dup_mul(s, b, K), H, K)\n    c = dup_trunc(c, M, K)\n    d = dup_trunc(d, M, K)\n    u = dup_add(dup_mul(t, b, K), dup_mul(c, G, K), K)\n    S = dup_trunc(dup_sub(s, d, K), M, K)\n    T = dup_trunc(dup_sub(t, u, K), M, K)\n    return (G, H, S, T)",
    ".sympy.polys.densearith.py@@dup_sub_mul": "def dup_sub_mul(f, g, h, K):\n    return dup_sub(f, dup_mul(g, h, K), K)",
    ".sympy.polys.densearith.py@@dup_mul": "def dup_mul(f, g, K):\n    if f == g:\n        return dup_sqr(f, K)\n    if not (f and g):\n        return []\n    df = dup_degree(f)\n    dg = dup_degree(g)\n    n = max(df, dg) + 1\n    if n < 100:\n        h = []\n        for i in range(0, df + dg + 1):\n            coeff = K.zero\n            for j in range(max(0, i - dg), min(df, i) + 1):\n                coeff += f[j] * g[i - j]\n            h.append(coeff)\n        return dup_strip(h)\n    else:\n        n2 = n // 2\n        fl, gl = (dup_slice(f, 0, n2, K), dup_slice(g, 0, n2, K))\n        fh = dup_rshift(dup_slice(f, n2, n, K), n2, K)\n        gh = dup_rshift(dup_slice(g, n2, n, K), n2, K)\n        lo, hi = (dup_mul(fl, gl, K), dup_mul(fh, gh, K))\n        mid = dup_mul(dup_add(fl, fh, K), dup_add(gl, gh, K), K)\n        mid = dup_sub(mid, dup_add(lo, hi, K), K)\n        return dup_add(dup_add(lo, dup_lshift(mid, n2, K), K), dup_lshift(hi, 2 * n2, K), K)",
    ".sympy.polys.densetools.py@@dup_trunc": "def dup_trunc(f, p, K):\n    if K.is_ZZ:\n        g = []\n        for c in f:\n            c = c % p\n            if c > p // 2:\n                g.append(c - p)\n            else:\n                g.append(c)\n    else:\n        g = [c % p for c in f]\n    return dup_strip(g)",
    ".sympy.polys.densearith.py@@dup_add": "def dup_add(f, g, K):\n    if not f:\n        return g\n    if not g:\n        return f\n    df = dup_degree(f)\n    dg = dup_degree(g)\n    if df == dg:\n        return dup_strip([a + b for a, b in zip(f, g)])\n    else:\n        k = abs(df - dg)\n        if df > dg:\n            h, f = (f[:k], f[k:])\n        else:\n            h, g = (g[:k], g[k:])\n        return h + [a + b for a, b in zip(f, g)]",
    ".sympy.polys.densearith.py@@dup_neg": "def dup_neg(f, K):\n    return [-coeff for coeff in f]",
    ".sympy.polys.factortools.py@@_test_pl": "def _test_pl(fc, q, pl):\n    if q > pl // 2:\n        q = q - pl\n    if not q:\n        return True\n    return fc % q == 0",
    ".sympy.polys.factortools.py@@dup_trial_division": "def dup_trial_division(f, factors, K):\n    result = []\n    for factor in factors:\n        k = 0\n        while True:\n            q, r = dup_div(f, factor, K)\n            if not r:\n                f, k = (q, k + 1)\n            else:\n                break\n        result.append((factor, k))\n    return _sort_factors(result)",
    ".sympy.polys.polyutils.py@@order_if_multiple_key": "def order_if_multiple_key(factor):\n    f, n = factor\n    return (len(f), n, f)",
    ".sympy.polys.rootoftools.py@@ComplexRootOf._get_reals": "def _get_reals(cls, factors):\n    reals = []\n    for factor, k in factors:\n        real_part = cls._get_reals_sqf(factor)\n        reals.extend([(root, factor, k) for root in real_part])\n    return reals",
    ".sympy.polys.rootoftools.py@@ComplexRootOf._get_reals_sqf": "def _get_reals_sqf(cls, factor):\n    if factor in _reals_cache:\n        real_part = _reals_cache[factor]\n    else:\n        _reals_cache[factor] = real_part = dup_isolate_real_roots_sqf(factor.rep.rep, factor.rep.dom, blackbox=True)\n    return real_part",
    ".sympy.polys.polytools.py@@PurePoly.__hash__": "def __hash__(self):\n    return super(PurePoly, self).__hash__()",
    ".sympy.polys.polytools.py@@Poly.__hash__": "def __hash__(self):\n    return super(Poly, self).__hash__()",
    ".sympy.polys.polytools.py@@PurePoly._hashable_content": "def _hashable_content(self):\n    return (self.rep,)",
    ".sympy.polys.polyclasses.py@@DMP.__hash__": "def __hash__(f):\n    return hash((f.__class__.__name__, f.to_tuple(), f.lev, f.dom, f.ring))",
    ".sympy.polys.polyclasses.py@@DMP.to_tuple": "def to_tuple(f):\n    return dmp_to_tuple(f.rep, f.lev)",
    ".sympy.polys.densebasic.py@@dmp_to_tuple": "def dmp_to_tuple(f, u):\n    if not u:\n        return tuple(f)\n    v = u - 1\n    return tuple((dmp_to_tuple(c, v) for c in f))",
    ".sympy.polys.domains.domain.py@@Domain.__hash__": "def __hash__(self):\n    return hash((self.__class__.__name__, self.dtype))",
    ".sympy.polys.polytools.py@@PurePoly.__eq__": "def __eq__(self, other):\n    f, g = (self, other)\n    if not g.is_Poly:\n        try:\n            g = f.__class__(g, f.gens, domain=f.get_domain())\n        except (PolynomialError, DomainError, CoercionFailed):\n            return False\n    if len(f.gens) != len(g.gens):\n        return False\n    if f.rep.dom != g.rep.dom:\n        try:\n            dom = f.rep.dom.unify(g.rep.dom, f.gens)\n        except UnificationFailed:\n            return False\n        f = f.set_domain(dom)\n        g = g.set_domain(dom)\n    return f.rep == g.rep",
    ".sympy.polys.domains.domain.py@@Domain.__ne__": "def __ne__(self, other):\n    return not self.__eq__(other)",
    ".sympy.polys.polyclasses.py@@DMP.__eq__": "def __eq__(f, g):\n    try:\n        _, _, _, F, G = f.unify(g)\n        if f.lev == g.lev:\n            return F == G\n    except UnificationFailed:\n        pass\n    return False",
    ".sympy.polys.polyclasses.py@@DMP.unify": "def unify(f, g):\n    if not isinstance(g, DMP) or f.lev != g.lev:\n        raise UnificationFailed(\"can't unify %s with %s\" % (f, g))\n    if f.dom == g.dom and f.ring == g.ring:\n        return (f.lev, f.dom, f.per, f.rep, g.rep)\n    else:\n        lev, dom = (f.lev, f.dom.unify(g.dom))\n        ring = f.ring\n        if g.ring is not None:\n            if ring is not None:\n                ring = ring.unify(g.ring)\n            else:\n                ring = g.ring\n        F = dmp_convert(f.rep, lev, f.dom, dom)\n        G = dmp_convert(g.rep, lev, g.dom, dom)\n\n        def per(rep, dom=dom, lev=lev, kill=False):\n            if kill:\n                if not lev:\n                    return rep\n                else:\n                    lev -= 1\n            return DMP(rep, dom, lev, ring)\n        return (lev, dom, per, F, G)",
    ".sympy.polys.rootoftools.py@@ComplexRootOf._count_roots": "def _count_roots(cls, roots):\n    return sum([k for _, _, k in roots])",
    ".sympy.polys.rootoftools.py@@ComplexRootOf._reals_sorted": "def _reals_sorted(cls, reals):\n    cache = {}\n    for i, (u, f, k) in enumerate(reals):\n        for j, (v, g, m) in enumerate(reals[i + 1:]):\n            u, v = u.refine_disjoint(v)\n            reals[i + j + 1] = (v, g, m)\n        reals[i] = (u, f, k)\n    reals = sorted(reals, key=lambda r: r[0].a)\n    for root, factor, _ in reals:\n        if factor in cache:\n            cache[factor].append(root)\n        else:\n            cache[factor] = [root]\n    for factor, roots in cache.items():\n        _reals_cache[factor] = roots\n    return reals",
    ".sympy.polys.rootisolation.py@@RealInterval.refine_disjoint": "def refine_disjoint(self, other):\n    expr = self\n    while not expr.is_disjoint(other):\n        expr, other = (expr._inner_refine(), other._inner_refine())\n    return (expr, other)",
    ".sympy.polys.rootisolation.py@@RealInterval.is_disjoint": "def is_disjoint(self, other):\n    return self.b <= other.a or other.b <= self.a",
    ".sympy.polys.rootisolation.py@@RealInterval.b": "def b(self):\n    was = self.neg\n    self.neg = not was\n    rv = -self.a\n    self.neg = was\n    return rv",
    ".sympy.polys.rootisolation.py@@RealInterval.a": "def a(self):\n    field = self.dom.get_field()\n    a, b, c, d = self.mobius\n    if not self.neg:\n        if a * d < b * c:\n            return field(a, c)\n        return field(b, d)\n    else:\n        if a * d > b * c:\n            return -field(a, c)\n        return -field(b, d)",
    ".sympy.polys.domains.integerring.py@@IntegerRing.get_field": "def get_field(self):\n    from sympy.polys.domains import QQ\n    return QQ",
    ".sympy.polys.domains.pythonrational.py@@PythonRational.__init__": "def __init__(self, p, q=1):\n    if not q:\n        raise ZeroDivisionError('rational number')\n    elif q < 0:\n        p, q = (-p, -q)\n    if not p:\n        self.p = 0\n        self.q = 1\n    elif p == 1 or q == 1:\n        self.p = p\n        self.q = q\n    else:\n        x, y = (p, q)\n        while y:\n            x, y = (y, x % y)\n        if x != 1:\n            p //= x\n            q //= x\n        self.p = p\n        self.q = q",
    ".sympy.polys.domains.pythonrational.py@@PythonRational.__neg__": "def __neg__(self):\n    return self.new(-self.p, self.q)",
    ".sympy.polys.domains.pythonrational.py@@PythonRational.new": "def new(cls, p, q):\n    obj = object.__new__(cls)\n    obj.p = p\n    obj.q = q\n    return obj",
    ".sympy.polys.domains.pythonrational.py@@PythonRational.__le__": "def __le__(self, other):\n    return self._cmp(other, operator.le)",
    ".sympy.polys.domains.pythonrational.py@@PythonRational._cmp": "def _cmp(self, other, op):\n    try:\n        diff = self - other\n    except TypeError:\n        return NotImplemented\n    else:\n        return op(diff.p, 0)",
    ".sympy.polys.domains.pythonrational.py@@PythonRational.__sub__": "def __sub__(self, other):\n    if isinstance(other, PythonRational):\n        p = self.p * other.q - self.q * other.p\n        q = self.q * other.q\n    elif isinstance(other, integer_types):\n        p = self.p - self.q * other\n        q = self.q\n    else:\n        return NotImplemented\n    return self.__class__(p, q)",
    ".sympy.polys.domains.pythonrational.py@@PythonRational.__lt__": "def __lt__(self, other):\n    return self._cmp(other, operator.lt)",
    ".sympy.polys.rootoftools.py@@ComplexRootOf._reals_index": "def _reals_index(cls, reals, index):\n    i = 0\n    for j, (_, factor, k) in enumerate(reals):\n        if index < i + k:\n            poly, index = (factor, 0)\n            for _, factor, _ in reals[:j]:\n                if factor == poly:\n                    index += 1\n            return (poly, index)\n        else:\n            i += k",
    ".sympy.polys.rootoftools.py@@ComplexRootOf._postprocess_root": "def _postprocess_root(cls, root, radicals):\n    poly, index = root\n    roots = cls._roots_trivial(poly, radicals)\n    if roots is not None:\n        return roots[index]\n    else:\n        return cls._new(poly, index)",
    ".sympy.polys.rootoftools.py@@ComplexRootOf._new": "def _new(cls, poly, index):\n    obj = Expr.__new__(cls)\n    obj.poly = PurePoly(poly)\n    obj.index = index\n    try:\n        _reals_cache[obj.poly] = _reals_cache[poly]\n        _complexes_cache[obj.poly] = _complexes_cache[poly]\n    except KeyError:\n        pass\n    return obj",
    ".sympy.polys.polytools.py@@Poly._from_poly": "def _from_poly(cls, rep, opt):\n    if cls != rep.__class__:\n        rep = cls.new(rep.rep, *rep.gens)\n    gens = opt.gens\n    field = opt.field\n    domain = opt.domain\n    if gens and rep.gens != gens:\n        if set(rep.gens) != set(gens):\n            return cls._from_expr(rep.as_expr(), opt)\n        else:\n            rep = rep.reorder(*gens)\n    if 'domain' in opt and domain:\n        rep = rep.set_domain(domain)\n    elif field is True:\n        rep = rep.to_field()\n    return rep",
    ".sympy.polys.polyoptions.py@@Gens.default": "def default(cls):\n    return ()",
    ".sympy.polys.rootoftools.py@@ComplexRootOf._hashable_content": "def _hashable_content(self):\n    return (self.poly, self.index)",
    ".sympy.tensor.indexed.py@@Indexed._sympystr": "def _sympystr(self, p):\n    indices = list(map(p.doprint, self.indices))\n    return '%s[%s]' % (p.doprint(self.base), ', '.join(indices))",
    ".sympy.tensor.indexed.py@@Indexed.indices": "def indices(self):\n    return self.args[1:]",
    ".sympy.tensor.indexed.py@@Idx._sympystr": "def _sympystr(self, p):\n    return p.doprint(self.label)",
    ".sympy.tensor.indexed.py@@Idx.label": "def label(self):\n    return self.args[0]",
    ".sympy.tensor.indexed.py@@Indexed.base": "def base(self):\n    return self.args[0]",
    ".sympy.tensor.indexed.py@@IndexedBase._sympystr": "def _sympystr(self, p):\n    return p.doprint(self.label)",
    ".sympy.tensor.indexed.py@@IndexedBase.label": "def label(self):\n    return self.args[0]",
    ".sympy.tensor.indexed.py@@IndexedBase.__new__": "def __new__(cls, label, shape=None, **kw_args):\n    if isinstance(label, string_types):\n        label = Symbol(label)\n    elif isinstance(label, Symbol):\n        pass\n    else:\n        raise TypeError('Base label should be a string or Symbol.')\n    if is_sequence(shape):\n        shape = Tuple(*shape)\n    elif shape is not None:\n        shape = Tuple(shape)\n    if shape is not None:\n        obj = Expr.__new__(cls, label, shape, **kw_args)\n    else:\n        obj = Expr.__new__(cls, label, **kw_args)\n    obj._shape = shape\n    return obj",
    ".sympy.tensor.indexed.py@@Idx.__new__": "def __new__(cls, label, range=None, **kw_args):\n    from sympy.utilities.misc import filldedent\n    if isinstance(label, string_types):\n        label = Symbol(label, integer=True)\n    label, range = list(map(sympify, (label, range)))\n    if label.is_Number:\n        if not label.is_integer:\n            raise TypeError('Index is not an integer number.')\n        return label\n    if not label.is_integer:\n        raise TypeError('Idx object requires an integer label.')\n    elif is_sequence(range):\n        if len(range) != 2:\n            raise ValueError(filldedent('\\n                Idx range tuple must have length 2, but got %s' % len(range)))\n        for bound in range:\n            if not (bound.is_integer or abs(bound) is S.Infinity):\n                raise TypeError('Idx object requires integer bounds.')\n        args = (label, Tuple(*range))\n    elif isinstance(range, Expr):\n        if not (range.is_integer or range is S.Infinity):\n            raise TypeError('Idx object requires an integer dimension.')\n        args = (label, Tuple(0, range - 1))\n    elif range:\n        raise TypeError(filldedent('\\n            The range must be an ordered iterable or\\n            integer SymPy expression.'))\n    else:\n        args = (label,)\n    obj = Expr.__new__(cls, *args, **kw_args)\n    obj._assumptions['finite'] = True\n    obj._assumptions['real'] = True\n    return obj",
    ".sympy.tensor.indexed.py@@Indexed.__new__": "def __new__(cls, base, *args, **kw_args):\n    from sympy.utilities.misc import filldedent\n    if not args:\n        raise IndexException('Indexed needs at least one index.')\n    if isinstance(base, (string_types, Symbol)):\n        base = IndexedBase(base)\n    elif not hasattr(base, '__getitem__') and (not isinstance(base, IndexedBase)):\n        raise TypeError(filldedent('\\n            Indexed expects string, Symbol, or IndexedBase as base.'))\n    args = list(map(sympify, args))\n    return Expr.__new__(cls, base, *args, **kw_args)",
    ".sympy.matrices.expressions.matexpr.py@@MatrixSymbol._hashable_content": "def _hashable_content(self):\n    return (self.name, self.shape)",
    ".sympy.matrices.expressions.matexpr.py@@MatrixSymbol.name": "def name(self):\n    return self.args[0]",
    ".sympy.matrices.expressions.matexpr.py@@MatrixSymbol.shape": "def shape(self):\n    return self.args[1:3]",
    ".sympy.matrices.expressions.matexpr.py@@MatrixSymbol.__new__": "def __new__(cls, name, n, m):\n    n, m = (sympify(n), sympify(m))\n    obj = Basic.__new__(cls, name, n, m)\n    return obj",
    ".sympy.matrices.expressions.matpow.py@@MatPow.base": "def base(self):\n    return self.args[0]",
    ".sympy.matrices.expressions.matmul.py@@MatMul.args_cnc": "def args_cnc(self, **kwargs):\n    coeff, matrices = self.as_coeff_matrices()\n    coeff_c, coeff_nc = coeff.args_cnc(**kwargs)\n    if coeff_c == [1]:\n        coeff_c = []\n    elif coeff_c == set([1]):\n        coeff_c = set()\n    return (coeff_c, coeff_nc + matrices)",
    ".sympy.matrices.expressions.matmul.py@@MatMul.as_coeff_matrices": "def as_coeff_matrices(self):\n    scalars = [x for x in self.args if not x.is_Matrix]\n    matrices = [x for x in self.args if x.is_Matrix]\n    coeff = Mul(*scalars)\n    return (coeff, matrices)",
    ".sympy.matrices.expressions.matmul.py@@MatMul.__new__": "def __new__(cls, *args, **kwargs):\n    check = kwargs.get('check', True)\n    args = list(map(sympify, args))\n    obj = Basic.__new__(cls, *args)\n    factor, matrices = obj.as_coeff_matrices()\n    if check:\n        validate(*matrices)\n    if not matrices:\n        return factor\n    return obj",
    ".sympy.matrices.expressions.matmul.py@@validate": "def validate(*matrices):\n    for i in range(len(matrices) - 1):\n        A, B = matrices[i:i + 2]\n        if A.cols != B.rows:\n            raise ShapeError('Matrices %s and %s are not aligned' % (A, B))",
    ".sympy.matrices.expressions.matexpr.py@@MatrixExpr.cols": "def cols(self):\n    return self.shape[1]",
    ".sympy.matrices.expressions.inverse.py@@Inverse.shape": "def shape(self):\n    return self.arg.shape",
    ".sympy.matrices.expressions.inverse.py@@Inverse.arg": "def arg(self):\n    return self.args[0]",
    ".sympy.matrices.expressions.matexpr.py@@MatrixExpr.rows": "def rows(self):\n    return self.shape[0]",
    ".sympy.matrices.expressions.transpose.py@@Transpose.shape": "def shape(self):\n    return self.arg.shape[::-1]",
    ".sympy.matrices.expressions.transpose.py@@Transpose.arg": "def arg(self):\n    return self.args[0]",
    ".sympy.matrices.expressions.matexpr.py@@MatrixExpr._eval_power": "def _eval_power(self, exp):\n    return MatPow(self, exp)",
    ".sympy.matrices.expressions.matpow.py@@MatPow.__new__": "def __new__(cls, base, exp):\n    base = _sympify(base)\n    if not base.is_Matrix:\n        raise TypeError('Function parameter should be a matrix')\n    exp = _sympify(exp)\n    return super(MatPow, cls).__new__(cls, base, exp)",
    ".sympy.matrices.expressions.matexpr.py@@MatrixExpr.__new__": "def __new__(cls, *args, **kwargs):\n    args = map(sympify, args)\n    return Basic.__new__(cls, *args, **kwargs)",
    ".sympy.matrices.expressions.matpow.py@@MatPow.shape": "def shape(self):\n    return self.base.shape",
    ".sympy.matrices.expressions.matmul.py@@MatMul.shape": "def shape(self):\n    matrices = [arg for arg in self.args if arg.is_Matrix]\n    return (matrices[0].rows, matrices[-1].cols)",
    ".sympy.matrices.expressions.matadd.py@@MatAdd.__new__": "def __new__(cls, *args, **kwargs):\n    args = list(map(sympify, args))\n    check = kwargs.get('check', True)\n    obj = Basic.__new__(cls, *args)\n    if check:\n        validate(*args)\n    return obj",
    ".sympy.matrices.expressions.matadd.py@@validate": "def validate(*args):\n    if not all((arg.is_Matrix for arg in args)):\n        raise TypeError('Mix of Matrix and Scalar symbols')\n    A = args[0]\n    for B in args[1:]:\n        if A.shape != B.shape:\n            raise ShapeError('Matrices %s and %s are not aligned' % (A, B))",
    ".sympy.matrices.expressions.matpow.py@@MatPow.exp": "def exp(self):\n    return self.args[1]",
    ".sympy.functions.elementary.piecewise.py@@ExprCondPair.__iter__": "def __iter__(self):\n    yield self.expr\n    yield self.cond",
    ".sympy.functions.elementary.piecewise.py@@ExprCondPair.expr": "def expr(self):\n    return self.args[0]",
    ".sympy.functions.elementary.piecewise.py@@ExprCondPair.cond": "def cond(self):\n    return self.args[1]",
    ".sympy.core.numbers.py@@Zero.__neg__": "def __neg__():\n    return S.Zero",
    ".sympy.functions.elementary.piecewise.py@@ExprCondPair.__new__": "def __new__(cls, expr, cond):\n    if cond == True:\n        return Tuple.__new__(cls, expr, true)\n    elif cond == False:\n        return Tuple.__new__(cls, expr, false)\n    return Tuple.__new__(cls, expr, cond)",
    ".sympy.functions.elementary.piecewise.py@@Piecewise.__new__": "def __new__(cls, *args, **options):\n    newargs = []\n    for ec in args:\n        pair = ExprCondPair(*getattr(ec, 'args', ec))\n        cond = pair.cond\n        if cond == false:\n            continue\n        if not isinstance(cond, (bool, Relational, Boolean)):\n            raise TypeError('Cond %s is of type %s, but must be a Relational, Boolean, or a built-in bool.' % (cond, type(cond)))\n        newargs.append(pair)\n        if cond == True:\n            break\n    if options.pop('evaluate', True):\n        r = cls.eval(*newargs)\n    else:\n        r = None\n    if r is None:\n        return Basic.__new__(cls, *newargs, **options)\n    else:\n        return r",
    ".sympy.logic.boolalg.py@@BooleanFalse.__hash__": "def __hash__(self):\n    return hash(False)",
    ".sympy.functions.elementary.piecewise.py@@Piecewise.eval": "def eval(cls, *args):\n    all_conds_evaled = True\n    piecewise_again = False\n    non_false_ecpairs = []\n    or1 = Or(*[cond for _, cond in args if cond != true])\n    for expr, cond in args:\n        if isinstance(expr, Piecewise):\n            or2 = Or(*[c for _, c in expr.args if c != true])\n            for e, c in expr.args:\n                if c == cond and (or1 == or2 or cond != true):\n                    expr = e\n                    piecewise_again = True\n        cond_eval = cls.__eval_cond(cond)\n        if cond_eval is None:\n            all_conds_evaled = False\n        elif cond_eval:\n            if all_conds_evaled:\n                return expr\n        if len(non_false_ecpairs) != 0:\n            if non_false_ecpairs[-1].cond == cond:\n                continue\n            elif non_false_ecpairs[-1].expr == expr:\n                newcond = Or(cond, non_false_ecpairs[-1].cond)\n                if isinstance(newcond, (And, Or)):\n                    newcond = distribute_and_over_or(newcond)\n                non_false_ecpairs[-1] = ExprCondPair(expr, newcond)\n                continue\n        non_false_ecpairs.append(ExprCondPair(expr, cond))\n    if len(non_false_ecpairs) != len(args) or piecewise_again:\n        return cls(*non_false_ecpairs)\n    return None",
    ".sympy.core.operations.py@@LatticeOp.__new__": "def __new__(cls, *args, **options):\n    args = (_sympify(arg) for arg in args)\n    try:\n        _args = frozenset(cls._new_args_filter(args))\n    except ShortCircuit:\n        return sympify(cls.zero)\n    if not _args:\n        return sympify(cls.identity)\n    elif len(_args) == 1:\n        return set(_args).pop()\n    else:\n        obj = super(AssocOp, cls).__new__(cls, _args)\n        obj._argset = _args\n        return obj",
    ".sympy.logic.boolalg.py@@Or._new_args_filter": "def _new_args_filter(cls, args):\n    newargs = []\n    rel = []\n    for x in args:\n        if isinstance(x, Number) or x in (0, 1):\n            newargs.append(True if x else False)\n            continue\n        if x.is_Relational:\n            c = x.canonical\n            if c in rel:\n                continue\n            nc = (~c).canonical\n            if any((r == nc for r in rel)):\n                return [S.true]\n            rel.append(c)\n        newargs.append(x)\n    return LatticeOp._new_args_filter(newargs, Or)",
    ".sympy.core.relational.py@@Relational.canonical": "def canonical(self):\n    r = self\n    if r.func in (Ge, Gt):\n        r = r.reversed\n    elif r.func in (Lt, Le):\n        pass\n    elif r.func in (Eq, Ne):\n        r = r.func(*ordered(r.args), evaluate=False)\n    else:\n        raise NotImplemented\n    if r.lhs.is_Number and (not r.rhs.is_Number):\n        r = r.reversed\n    elif r.rhs.is_Symbol and (not r.lhs.is_Symbol):\n        r = r.reversed\n    if _coeff_isneg(r.lhs):\n        r = r.reversed.func(-r.lhs, -r.rhs, evaluate=False)\n    return r",
    ".sympy.core.relational.py@@Relational.lhs": "def lhs(self):\n    return self._args[0]",
    ".sympy.core.relational.py@@Relational.rhs": "def rhs(self):\n    return self._args[1]",
    ".sympy.core.relational.py@@Relational.reversed": "def reversed(self):\n    ops = {Gt: Lt, Ge: Le, Lt: Gt, Le: Ge}\n    a, b = self.args\n    return ops.get(self.func, self.func)(b, a, evaluate=False)",
    ".sympy.logic.boolalg.py@@Boolean.__invert__": "def __invert__(self):\n    return Not(self)",
    ".sympy.logic.boolalg.py@@Not.eval": "def eval(cls, arg):\n    from sympy import Equality, GreaterThan, LessThan, StrictGreaterThan, StrictLessThan, Unequality\n    if isinstance(arg, Number) or arg in (True, False):\n        return false if arg else true\n    if arg.is_Not:\n        return arg.args[0]\n    if isinstance(arg, Equality):\n        return Unequality(*arg.args)\n    if isinstance(arg, Unequality):\n        return Equality(*arg.args)\n    if isinstance(arg, StrictLessThan):\n        return GreaterThan(*arg.args)\n    if isinstance(arg, StrictGreaterThan):\n        return LessThan(*arg.args)\n    if isinstance(arg, LessThan):\n        return StrictGreaterThan(*arg.args)\n    if isinstance(arg, GreaterThan):\n        return StrictLessThan(*arg.args)",
    ".sympy.core.relational.py@@Unequality.__new__": "def __new__(cls, lhs, rhs, **options):\n    lhs = _sympify(lhs)\n    rhs = _sympify(rhs)\n    evaluate = options.pop('evaluate', global_evaluate[0])\n    if evaluate:\n        is_equal = Equality(lhs, rhs)\n        if isinstance(is_equal, BooleanAtom):\n            return ~is_equal\n    return Relational.__new__(cls, lhs, rhs, **options)",
    ".sympy.core.operations.py@@LatticeOp._new_args_filter": "def _new_args_filter(cls, arg_sequence, call_cls=None):\n    ncls = call_cls or cls\n    for arg in arg_sequence:\n        if arg == ncls.zero:\n            raise ShortCircuit(arg)\n        elif arg == ncls.identity:\n            continue\n        elif arg.func == ncls:\n            for x in arg.args:\n                yield x\n        else:\n            yield arg",
    ".sympy.functions.elementary.piecewise.py@@Piecewise.__eval_cond": "def __eval_cond(cls, cond):\n    from sympy.solvers.solvers import checksol\n    if cond == True:\n        return True\n    if isinstance(cond, Equality):\n        if checksol(cond, {}, minimal=True):\n            return True\n        diff = cond.lhs - cond.rhs\n        if diff.is_commutative:\n            return diff.is_zero\n    return None",
    ".sympy.solvers.solvers.py@@checksol": "def checksol(f, symbol, sol=None, **flags):\n    from sympy.physics.units import Unit\n    minimal = flags.get('minimal', False)\n    if sol is not None:\n        sol = {symbol: sol}\n    elif isinstance(symbol, dict):\n        sol = symbol\n    else:\n        msg = 'Expecting (sym, val) or ({sym: val}, None) but got (%s, %s)'\n        raise ValueError(msg % (symbol, sol))\n    if iterable(f):\n        if not f:\n            raise ValueError('no functions to check')\n        rv = True\n        for fi in f:\n            check = checksol(fi, sol, **flags)\n            if check:\n                continue\n            if check is False:\n                return False\n            rv = None\n        return rv\n    if isinstance(f, Poly):\n        f = f.as_expr()\n    elif isinstance(f, Equality):\n        f = f.lhs - f.rhs\n    if not f:\n        return True\n    if sol and (not f.has(*list(sol.keys()))):\n        return None\n    illegal = set([S.NaN, S.ComplexInfinity, S.Infinity, S.NegativeInfinity])\n    if any((sympify(v).atoms() & illegal for k, v in sol.items())):\n        return False\n    was = f\n    attempt = -1\n    numerical = flags.get('numerical', True)\n    while 1:\n        attempt += 1\n        if attempt == 0:\n            val = f.subs(sol)\n            if isinstance(val, Mul):\n                val = val.as_independent(Unit)[0]\n            if val.atoms() & illegal:\n                return False\n        elif attempt == 1:\n            if val.free_symbols:\n                if not val.is_constant(*list(sol.keys()), simplify=not minimal):\n                    return False\n                _, val = val.as_content_primitive()\n                val = expand_mul(expand_multinomial(val))\n        elif attempt == 2:\n            if minimal:\n                return\n            if flags.get('simplify', True):\n                for k in sol:\n                    sol[k] = simplify(sol[k])\n            val = simplify(f.subs(sol))\n            if flags.get('force', True):\n                val, reps = posify(val)\n                exval = expand_mul(expand_multinomial(val))\n                if exval.is_number or not exval.free_symbols:\n                    val = exval\n        else:\n            pot = preorder_traversal(expand_mul(val))\n            seen = set()\n            saw_pow_func = False\n            for p in pot:\n                if p in seen:\n                    continue\n                seen.add(p)\n                if p.is_Pow and (not p.exp.is_Integer):\n                    saw_pow_func = True\n                elif p.is_Function:\n                    saw_pow_func = True\n                elif isinstance(p, UndefinedFunction):\n                    saw_pow_func = True\n                if saw_pow_func:\n                    break\n            if saw_pow_func is False:\n                return False\n            if flags.get('force', True):\n                val = val.subs(reps)\n            nz = fuzzy_not(val.is_zero)\n            if nz is not None:\n                if val.is_number and val.has(LambertW):\n                    return None\n                return not nz\n            break\n        if val == was:\n            continue\n        elif val.is_Rational:\n            return val == 0\n        if numerical and (not val.free_symbols):\n            return bool(abs(val.n(18).n(12, chop=True)) < 1e-09)\n        was = val\n    if flags.get('warn', False):\n        warnings.warn('\\n\\tWarning: could not verify solution %s.' % sol)",
    ".sympy.core.symbol.py@@Symbol.is_constant": "def is_constant(self, *wrt, **flags):\n    if not wrt:\n        return False\n    return not self in wrt",
    ".sympy.core.numbers.py@@Float.__neg__": "def __neg__(self):\n    return Float._new(mlib.mpf_neg(self._mpf_), self._prec)",
    ".sympy.core.assumptions.py@@StdFactKB.generator": "def generator(self):\n    return self._generator.copy()",
    ".sympy.core.numbers.py@@Float._eval_is_integer": "def _eval_is_integer(self):\n    return self._mpf_ == _mpf_zero",
    ".sympy.core.numbers.py@@NaN._as_mpf_val": "def _as_mpf_val(self, prec):\n    return _mpf_nan",
    ".sympy.core.numbers.py@@Float._eval_is_negative": "def _eval_is_negative(self):\n    if self._mpf_ == _mpf_ninf:\n        return True\n    if self._mpf_ == _mpf_inf:\n        return False\n    return self.num < 0",
    ".sympy.core.numbers.py@@Float.num": "def num(self):\n    return mpmath.mpf(self._mpf_)",
    ".sympy.core.numbers.py@@Float.__mul__": "def __mul__(self, other):\n    if isinstance(other, Number):\n        rhs, prec = other._as_mpf_op(self._prec)\n        return Float._new(mlib.mpf_mul(self._mpf_, rhs, prec, rnd), prec)\n    return Number.__mul__(self, other)",
    ".sympy.core.numbers.py@@Number._as_mpf_op": "def _as_mpf_op(self, prec):\n    prec = max(prec, self._prec)\n    return (self._as_mpf_val(prec), prec)",
    ".sympy.core.numbers.py@@Number.as_coeff_Mul": "def as_coeff_Mul(self, rational=False):\n    if rational and (not self.is_Rational):\n        return (S.One, self)\n    return (self, S.One) if self else (S.One, self)",
    ".sympy.core.numbers.py@@Float.__nonzero__": "def __nonzero__(self):\n    return self._mpf_ != _mpf_zero",
    ".sympy.core.numbers.py@@Float._eval_is_zero": "def _eval_is_zero(self):\n    return self._mpf_ == _mpf_zero",
    ".sympy.core.numbers.py@@Float.__int__": "def __int__(self):\n    if self._mpf_ == _mpf_zero:\n        return 0\n    return int(mlib.to_int(self._mpf_))",
    ".sympy.core.numbers.py@@Float.__ne__": "def __ne__(self, other):\n    return not self.__eq__(other)",
    ".sympy.printing.str.py@@StrPrinter._print_Float": "def _print_Float(self, expr):\n    prec = expr._prec\n    if prec < 5:\n        dps = 0\n    else:\n        dps = prec_to_dps(expr._prec)\n    if self._settings['full_prec'] is True:\n        strip = False\n    elif self._settings['full_prec'] is False:\n        strip = True\n    elif self._settings['full_prec'] == 'auto':\n        strip = self._print_level > 1\n    rv = mlib.to_str(expr._mpf_, dps, strip_zeros=strip)\n    if rv.startswith('-.0'):\n        rv = '-0.' + rv[3:]\n    elif rv.startswith('.0'):\n        rv = '0.' + rv[2:]\n    return rv",
    ".sympy.core.numbers.py@@Float.__lt__": "def __lt__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s < %s' % (self, other))\n    if isinstance(other, NumberSymbol):\n        return other.__ge__(self)\n    if other.is_real and other.is_number:\n        other = other.evalf()\n    if isinstance(other, Number) and other is not S.NaN:\n        return _sympify(bool(mlib.mpf_lt(self._mpf_, other._as_mpf_val(self._prec))))\n    return Expr.__lt__(self, other)",
    ".sympy.core.relational.py@@_Inequality.__new__": "def __new__(cls, lhs, rhs, **options):\n    lhs = _sympify(lhs)\n    rhs = _sympify(rhs)\n    evaluate = options.pop('evaluate', global_evaluate[0])\n    if evaluate:\n        r = cls._eval_relation(lhs, rhs)\n        if r is not None:\n            return r\n    return Relational.__new__(cls, lhs, rhs, **options)",
    ".sympy.core.relational.py@@StrictLessThan._eval_relation": "def _eval_relation(cls, lhs, rhs):\n    return _sympify(lhs.__lt__(rhs))",
    ".sympy.core.expr.py@@Expr.__lt__": "def __lt__(self, other):\n    from sympy import StrictLessThan\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s < %s' % (self, other))\n    for me in (self, other):\n        if me.is_complex and me.is_real is False or me.has(S.ComplexInfinity):\n            raise TypeError('Invalid comparison of complex %s' % me)\n        if me is S.NaN:\n            raise TypeError('Invalid NaN comparison')\n    if self.is_real or other.is_real:\n        dif = self - other\n        if dif.is_negative is not None and dif.is_negative is not dif.is_nonnegative:\n            return sympify(dif.is_negative)\n    return StrictLessThan(self, other, evaluate=False)",
    ".sympy.core.numbers.py@@Float.__add__": "def __add__(self, other):\n    if isinstance(other, Number):\n        rhs, prec = other._as_mpf_op(self._prec)\n        return Float._new(mlib.mpf_add(self._mpf_, rhs, prec, rnd), prec)\n    return Number.__add__(self, other)",
    ".sympy.core.numbers.py@@Float._eval_is_infinite": "def _eval_is_infinite(self):\n    if self._mpf_ in (_mpf_inf, _mpf_ninf):\n        return True\n    return False",
    ".sympy.core.numbers.py@@Float._eval_is_finite": "def _eval_is_finite(self):\n    if self._mpf_ in (_mpf_inf, _mpf_ninf):\n        return False\n    return True",
    ".sympy.core.relational.py@@StrictGreaterThan._eval_relation": "def _eval_relation(cls, lhs, rhs):\n    return _sympify(lhs.__gt__(rhs))",
    ".sympy.core.expr.py@@Expr.__gt__": "def __gt__(self, other):\n    from sympy import StrictGreaterThan\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s > %s' % (self, other))\n    for me in (self, other):\n        if me.is_complex and me.is_real is False or me.has(S.ComplexInfinity):\n            raise TypeError('Invalid comparison of complex %s' % me)\n        if me is S.NaN:\n            raise TypeError('Invalid NaN comparison')\n    if self.is_real or other.is_real:\n        dif = self - other\n        if dif.is_positive is not None and dif.is_positive is not dif.is_nonpositive:\n            return sympify(dif.is_positive)\n    return StrictGreaterThan(self, other, evaluate=False)",
    ".sympy.core.numbers.py@@Float._eval_is_positive": "def _eval_is_positive(self):\n    if self._mpf_ == _mpf_inf:\n        return True\n    if self._mpf_ == _mpf_ninf:\n        return False\n    return self.num > 0",
    ".sympy.core.relational.py@@LessThan._eval_relation": "def _eval_relation(cls, lhs, rhs):\n    return _sympify(lhs.__le__(rhs))",
    ".sympy.core.expr.py@@Expr.__le__": "def __le__(self, other):\n    from sympy import LessThan\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s <= %s' % (self, other))\n    for me in (self, other):\n        if me.is_complex and me.is_real is False or me.has(S.ComplexInfinity):\n            raise TypeError('Invalid comparison of complex %s' % me)\n        if me is S.NaN:\n            raise TypeError('Invalid NaN comparison')\n    if self.is_real or other.is_real:\n        dif = self - other\n        if dif.is_nonpositive is not None and dif.is_nonpositive is not dif.is_positive:\n            return sympify(dif.is_nonpositive)\n    return LessThan(self, other, evaluate=False)",
    ".sympy.core.relational.py@@GreaterThan._eval_relation": "def _eval_relation(cls, lhs, rhs):\n    return _sympify(lhs.__ge__(rhs))",
    ".sympy.core.expr.py@@Expr.__ge__": "def __ge__(self, other):\n    from sympy import GreaterThan\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s >= %s' % (self, other))\n    for me in (self, other):\n        if me.is_complex and me.is_real is False or me.has(S.ComplexInfinity):\n            raise TypeError('Invalid comparison of complex %s' % me)\n        if me is S.NaN:\n            raise TypeError('Invalid NaN comparison')\n    if self.is_real or other.is_real:\n        dif = self - other\n        if dif.is_nonnegative is not None and dif.is_nonnegative is not dif.is_negative:\n            return sympify(dif.is_nonnegative)\n    return GreaterThan(self, other, evaluate=False)",
    ".sympy.core.expr.py@@Expr.is_constant": "def is_constant(self, *wrt, **flags):\n    simplify = flags.get('simplify', True)\n    free = self.free_symbols\n    if self.is_number or not free:\n        assert not free\n        return True\n    wrt = set(wrt)\n    if wrt and (not wrt & free):\n        return True\n    wrt = wrt or free\n    expr = self\n    if simplify:\n        expr = expr.simplify()\n    if expr.is_zero:\n        return True\n    failing_number = None\n    if wrt == free:\n        try:\n            a = expr.subs(list(zip(free, [0] * len(free))), simultaneous=True)\n            if a is S.NaN:\n                a = expr._random(None, 0, 0, 0, 0)\n        except ZeroDivisionError:\n            a = None\n        if a is not None and a is not S.NaN:\n            try:\n                b = expr.subs(list(zip(free, [1] * len(free))), simultaneous=True)\n                if b is S.NaN:\n                    b = expr._random(None, 1, 0, 1, 0)\n            except ZeroDivisionError:\n                b = None\n            if b is not None and b is not S.NaN and (b.equals(a) is False):\n                return False\n            b = expr._random(None, -1, 0, 1, 0)\n            if b is not None and b is not S.NaN and (b.equals(a) is False):\n                return False\n            b = expr._random()\n            if b is not None and b is not S.NaN:\n                if b.equals(a) is False:\n                    return False\n                failing_number = a if a.is_number else b\n    for w in wrt:\n        deriv = expr.diff(w)\n        if simplify:\n            deriv = deriv.simplify()\n        if deriv != 0:\n            if not pure_complex(deriv, or_real=True):\n                if flags.get('failing_number', False):\n                    return failing_number\n                elif deriv.free_symbols:\n                    return None\n            return False\n    return True",
    ".sympy.core.symbol.py@@Dummy.__new__": "def __new__(cls, name=None, **assumptions):\n    if name is None:\n        name = 'Dummy_' + str(Dummy._count)\n    cls._sanitize(assumptions, cls)\n    obj = Symbol.__xnew__(cls, name, **assumptions)\n    Dummy._count += 1\n    obj.dummy_index = Dummy._count\n    return obj",
    ".sympy.core.symbol.py@@Dummy._hashable_content": "def _hashable_content(self):\n    return Symbol._hashable_content(self) + (self.dummy_index,)",
    ".sympy.core.add.py@@Add._eval_subs": "def _eval_subs(self, old, new):\n    if not old.is_Add:\n        return None\n    coeff_self, terms_self = self.as_coeff_Add()\n    coeff_old, terms_old = old.as_coeff_Add()\n    if coeff_self.is_Rational and coeff_old.is_Rational:\n        if terms_self == terms_old:\n            return self.func(new, coeff_self, -coeff_old)\n        if terms_self == -terms_old:\n            return self.func(-new, coeff_self, coeff_old)\n    if coeff_self.is_Rational and coeff_old.is_Rational or coeff_self == coeff_old:\n        args_old, args_self = (self.func.make_args(terms_old), self.func.make_args(terms_self))\n        if len(args_old) < len(args_self):\n            self_set = set(args_self)\n            old_set = set(args_old)\n            if old_set < self_set:\n                ret_set = self_set - old_set\n                return self.func(new, coeff_self, -coeff_old, *[s._subs(old, new) for s in ret_set])\n            args_old = self.func.make_args(-terms_old)\n            old_set = set(args_old)\n            if old_set < self_set:\n                ret_set = self_set - old_set\n                return self.func(-new, coeff_self, coeff_old, *[s._subs(old, new) for s in ret_set])",
    ".sympy.core.mul.py@@Mul._eval_subs": "def _eval_subs(self, old, new):\n    from sympy.functions.elementary.complexes import sign\n    from sympy.ntheory.factor_ import multiplicity\n    from sympy.simplify.powsimp import powdenest\n    from sympy.simplify.radsimp import fraction\n    if not old.is_Mul:\n        return None\n    if old.args[0].is_Number and old.args[0] < 0:\n        if self.args[0].is_Number:\n            if self.args[0] < 0:\n                return self._subs(-old, -new)\n            return None\n\n    def base_exp(a):\n        from sympy import exp\n        if a.is_Pow or a.func is exp:\n            return a.as_base_exp()\n        return (a, S.One)\n\n    def breakup(eq):\n        c, nc = (defaultdict(int), list())\n        for a in Mul.make_args(eq):\n            a = powdenest(a)\n            b, e = base_exp(a)\n            if e is not S.One:\n                co, _ = e.as_coeff_mul()\n                b = Pow(b, e / co)\n                e = co\n            if a.is_commutative:\n                c[b] += e\n            else:\n                nc.append([b, e])\n        return (c, nc)\n\n    def rejoin(b, co):\n        b, e = base_exp(b)\n        return Pow(b, e * co)\n\n    def ndiv(a, b):\n        if not b.q % a.q or not a.q % b.q:\n            return int(a / b)\n        return 0\n    rv = None\n    n, d = fraction(self)\n    self2 = self\n    if d is not S.One:\n        self2 = n._subs(old, new) / d._subs(old, new)\n        if not self2.is_Mul:\n            return self2._subs(old, new)\n        if self2 != self:\n            rv = self2\n    co_self = self2.args[0]\n    co_old = old.args[0]\n    co_xmul = None\n    if co_old.is_Rational and co_self.is_Rational:\n        if co_old != co_self:\n            co_xmul = co_self.extract_multiplicatively(co_old)\n    elif co_old.is_Rational:\n        return rv\n    c, nc = breakup(self2)\n    old_c, old_nc = breakup(old)\n    if co_xmul and co_xmul.is_Rational and (abs(co_old) != 1):\n        mult = S(multiplicity(abs(co_old), co_self))\n        c.pop(co_self)\n        if co_old in c:\n            c[co_old] += mult\n        else:\n            c[co_old] = mult\n        co_residual = co_self / co_old ** mult\n    else:\n        co_residual = 1\n    ok = True\n    if len(old_nc) > len(nc):\n        ok = False\n    elif len(old_c) > len(c):\n        ok = False\n    elif set((i[0] for i in old_nc)).difference(set((i[0] for i in nc))):\n        ok = False\n    elif set(old_c).difference(set(c)):\n        ok = False\n    elif any((sign(c[b]) != sign(old_c[b]) for b in old_c)):\n        ok = False\n    if not ok:\n        return rv\n    if not old_c:\n        cdid = None\n    else:\n        rat = []\n        for b, old_e in old_c.items():\n            c_e = c[b]\n            rat.append(ndiv(c_e, old_e))\n            if not rat[-1]:\n                return rv\n        cdid = min(rat)\n    if not old_nc:\n        ncdid = None\n        for i in range(len(nc)):\n            nc[i] = rejoin(*nc[i])\n    else:\n        ncdid = 0\n        take = len(old_nc)\n        limit = cdid or S.Infinity\n        failed = []\n        i = 0\n        while limit and i + take <= len(nc):\n            hit = False\n            rat = []\n            for j in range(take):\n                if nc[i + j][0] != old_nc[j][0]:\n                    break\n                elif j == 0:\n                    rat.append(ndiv(nc[i + j][1], old_nc[j][1]))\n                elif j == take - 1:\n                    rat.append(ndiv(nc[i + j][1], old_nc[j][1]))\n                elif nc[i + j][1] != old_nc[j][1]:\n                    break\n                else:\n                    rat.append(1)\n                j += 1\n            else:\n                ndo = min(rat)\n                if ndo:\n                    if take == 1:\n                        if cdid:\n                            ndo = min(cdid, ndo)\n                        nc[i] = Pow(new, ndo) * rejoin(nc[i][0], nc[i][1] - ndo * old_nc[0][1])\n                    else:\n                        ndo = 1\n                        l = rejoin(nc[i][0], nc[i][1] - ndo * old_nc[0][1])\n                        mid = new\n                        ir = i + take - 1\n                        r = (nc[ir][0], nc[ir][1] - ndo * old_nc[-1][1])\n                        if r[1]:\n                            if i + take < len(nc):\n                                nc[i:i + take] = [l * mid, r]\n                            else:\n                                r = rejoin(*r)\n                                nc[i:i + take] = [l * mid * r]\n                        else:\n                            nc[i:i + take] = [l * mid]\n                    limit -= ndo\n                    ncdid += ndo\n                    hit = True\n            if not hit:\n                failed.append(i)\n            i += 1\n        else:\n            if not ncdid:\n                return rv\n            failed.extend(range(i, len(nc)))\n            for i in failed:\n                nc[i] = rejoin(*nc[i]).subs(old, new)\n    if cdid is None:\n        do = ncdid\n    elif ncdid is None:\n        do = cdid\n    else:\n        do = min(ncdid, cdid)\n    margs = []\n    for b in c:\n        if b in old_c:\n            e = c[b] - old_c[b] * do\n            margs.append(rejoin(b, e))\n        else:\n            margs.append(rejoin(b.subs(old, new), c[b]))\n    if cdid and (not ncdid):\n        margs = [Pow(new, cdid)] + margs\n    return co_residual * self2.func(*margs) * self2.func(*nc)",
    ".sympy.core.expr.py@@Expr.equals": "def equals(self, other, failing_expression=False):\n    from sympy.simplify.simplify import nsimplify, simplify\n    from sympy.solvers.solveset import solveset\n    from sympy.polys.polyerrors import NotAlgebraic\n    from sympy.polys.numberfields import minimal_polynomial\n    other = sympify(other)\n    if self == other:\n        return True\n    diff = factor_terms(simplify(self - other), radical=True)\n    if not diff:\n        return True\n    if not diff.has(Add, Mod):\n        return False\n    constant = diff.is_constant(simplify=False, failing_number=True)\n    if constant is False:\n        return False\n    if constant is None and (diff.free_symbols or not diff.is_number):\n        return\n    if constant is True:\n        ndiff = diff._random()\n        if ndiff:\n            return False\n    if diff.is_number:\n        approx = diff.nsimplify()\n        if not approx:\n            surds = [s for s in diff.atoms(Pow) if s.args[0].is_Integer]\n            surds.sort(key=lambda x: -x.args[0])\n            for s in surds:\n                try:\n                    if s.is_Symbol:\n                        sol = list(solveset(diff, s))\n                    else:\n                        sol = [s]\n                    if sol:\n                        if s in sol:\n                            return True\n                        if s.is_real:\n                            if any((nsimplify(si, [s]) == s and simplify(si) == s for si in sol)):\n                                return True\n                except NotImplementedError:\n                    pass\n            if True:\n                try:\n                    mp = minimal_polynomial(diff)\n                    if mp.is_Symbol:\n                        return True\n                    return False\n                except (NotAlgebraic, NotImplementedError):\n                    pass\n    if constant not in (True, None) and constant != 0:\n        return False\n    if failing_expression:\n        return diff\n    return None",
    ".sympy.core.expr.py@@Expr._random": "def _random(self, n=None, re_min=-1, im_min=-1, re_max=1, im_max=1):\n    free = self.free_symbols\n    prec = 1\n    if free:\n        from sympy.utilities.randtest import random_complex_number\n        a, c, b, d = (re_min, re_max, im_min, im_max)\n        reps = dict(list(zip(free, [random_complex_number(a, b, c, d, rational=True) for zi in free])))\n        try:\n            nmag = abs(self.evalf(2, subs=reps))\n        except (ValueError, TypeError):\n            return None\n    else:\n        reps = {}\n        nmag = abs(self.evalf(2))\n    if not hasattr(nmag, '_prec'):\n        return None\n    if nmag._prec == 1:\n        from mpmath.libmp.libintmath import giant_steps\n        from sympy.core.evalf import DEFAULT_MAXPREC as target\n        for prec in giant_steps(2, target):\n            nmag = abs(self.evalf(prec, subs=reps))\n            if nmag._prec != 1:\n                break\n    if nmag._prec != 1:\n        if n is None:\n            n = max(prec, 15)\n        return self.evalf(n, subs=reps)\n    return None",
    ".sympy.utilities.randtest.py@@random_complex_number": "def random_complex_number(a=2, b=-1, c=3, d=1, rational=False):\n    A, B = (uniform(a, c), uniform(b, d))\n    if not rational:\n        return A + I * B\n    return nsimplify(A, rational=True) + I * nsimplify(B, rational=True)",
    ".sympy.simplify.simplify.py@@nsimplify": "def nsimplify(expr, constants=[], tolerance=None, full=False, rational=None):\n    try:\n        return sympify(as_int(expr))\n    except (TypeError, ValueError):\n        pass\n    expr = sympify(expr).xreplace({Float('inf'): S.Infinity, Float('-inf'): S.NegativeInfinity})\n    if expr is S.Infinity or expr is S.NegativeInfinity:\n        return expr\n    if rational or expr.free_symbols:\n        return _real_to_rational(expr, tolerance)\n    if tolerance is None:\n        tolerance = 10 ** (-min([15] + [mpmath.libmp.libmpf.prec_to_dps(n._prec) for n in expr.atoms(Float)]))\n    prec = 30\n    bprec = int(prec * 3.33)\n    constants_dict = {}\n    for constant in constants:\n        constant = sympify(constant)\n        v = constant.evalf(prec)\n        if not v.is_Float:\n            raise ValueError('constants must be real-valued')\n        constants_dict[str(constant)] = v._to_mpmath(bprec)\n    exprval = expr.evalf(prec, chop=True)\n    re, im = exprval.as_real_imag()\n    if not (re.is_Number and im.is_Number):\n        return expr\n\n    def nsimplify_real(x):\n        orig = mpmath.mp.dps\n        xv = x._to_mpmath(bprec)\n        try:\n            if not (tolerance or full):\n                mpmath.mp.dps = 15\n                rat = mpmath.pslq([xv, 1])\n                if rat is not None:\n                    return Rational(-int(rat[1]), int(rat[0]))\n            mpmath.mp.dps = prec\n            newexpr = mpmath.identify(xv, constants=constants_dict, tol=tolerance, full=full)\n            if not newexpr:\n                raise ValueError\n            if full:\n                newexpr = newexpr[0]\n            expr = sympify(newexpr)\n            if x and (not expr):\n                raise ValueError\n            if expr.is_finite is False and (not xv in [mpmath.inf, mpmath.ninf]):\n                raise ValueError\n            return expr\n        finally:\n            mpmath.mp.dps = orig\n    try:\n        if re:\n            re = nsimplify_real(re)\n        if im:\n            im = nsimplify_real(im)\n    except ValueError:\n        if rational is None:\n            return _real_to_rational(expr)\n        return expr\n    rv = re + im * S.ImaginaryUnit\n    if rv != expr or rational is False:\n        return rv\n    return _real_to_rational(expr)",
    ".sympy.core.numbers.py@@Float.__new__": "def __new__(cls, num, prec=None):\n    if isinstance(num, string_types):\n        num = num.replace(' ', '')\n        if num.startswith('.') and len(num) > 1:\n            num = '0' + num\n        elif num.startswith('-.') and len(num) > 2:\n            num = '-0.' + num[2:]\n    elif isinstance(num, float) and num == 0:\n        num = '0'\n    elif isinstance(num, (SYMPY_INTS, Integer)):\n        num = str(num)\n    elif num is S.Infinity:\n        num = '+inf'\n    elif num is S.NegativeInfinity:\n        num = '-inf'\n    elif isinstance(num, mpmath.mpf):\n        num = num._mpf_\n    if prec is None:\n        dps = 15\n        if isinstance(num, Float):\n            return num\n        if isinstance(num, string_types) and _literal_float(num):\n            try:\n                Num = decimal.Decimal(num)\n            except decimal.InvalidOperation:\n                pass\n            else:\n                isint = '.' not in num\n                num, dps = _decimal_to_Rational_prec(Num)\n                if num.is_Integer and isint:\n                    dps = max(dps, len(str(num).lstrip('-')))\n                dps = max(15, dps)\n    elif prec == '':\n        if not isinstance(num, string_types):\n            raise ValueError('The null string can only be used when the number to Float is passed as a string or an integer.')\n        ok = None\n        if _literal_float(num):\n            try:\n                Num = decimal.Decimal(num)\n            except decimal.InvalidOperation:\n                pass\n            else:\n                isint = '.' not in num\n                num, dps = _decimal_to_Rational_prec(Num)\n                if num.is_Integer and isint:\n                    dps = max(dps, len(str(num).lstrip('-')))\n                ok = True\n        if ok is None:\n            raise ValueError('string-float not recognized: %s' % num)\n    else:\n        dps = prec\n    prec = mlib.libmpf.dps_to_prec(dps)\n    if isinstance(num, float):\n        _mpf_ = mlib.from_float(num, prec, rnd)\n    elif isinstance(num, string_types):\n        _mpf_ = mlib.from_str(num, prec, rnd)\n    elif isinstance(num, decimal.Decimal):\n        if num.is_finite():\n            _mpf_ = mlib.from_str(str(num), prec, rnd)\n        elif num.is_nan():\n            _mpf_ = _mpf_nan\n        elif num.is_infinite():\n            if num > 0:\n                _mpf_ = _mpf_inf\n            else:\n                _mpf_ = _mpf_ninf\n        else:\n            raise ValueError('unexpected decimal value %s' % str(num))\n    elif isinstance(num, Rational):\n        _mpf_ = mlib.from_rational(num.p, num.q, prec, rnd)\n    elif isinstance(num, tuple) and len(num) in (3, 4):\n        if type(num[1]) is str:\n            num = list(num)\n            num[1] = long(num[1], 16)\n            _mpf_ = tuple(num)\n        elif not num[1] and len(num) == 4:\n            return Float._new(num, prec)\n        else:\n            _mpf_ = mpmath.mpf(S.NegativeOne ** num[0] * num[1] * 2 ** num[2])._mpf_\n    elif isinstance(num, Float):\n        _mpf_ = num._mpf_\n        if prec < num._prec:\n            _mpf_ = mpf_norm(_mpf_, prec)\n    else:\n        _mpf_ = mpmath.mpf(num)._mpf_\n    if _mpf_ == _mpf_zero:\n        pass\n    elif _mpf_ == _mpf_nan:\n        return S.NaN\n    obj = Expr.__new__(cls)\n    obj._mpf_ = _mpf_\n    obj._prec = prec\n    return obj",
    ".sympy.core.numbers.py@@_literal_float": "def _literal_float(f):\n    pat = '[-+]?((\\\\d*\\\\.\\\\d+)|(\\\\d+\\\\.?))(eE[-+]?\\\\d+)?'\n    return bool(regex.match(pat, f))",
    ".sympy.simplify.simplify.py@@_real_to_rational": "def _real_to_rational(expr, tolerance=None):\n    inf = Float('inf')\n    p = expr\n    reps = {}\n    reduce_num = None\n    if tolerance is not None and tolerance < 1:\n        reduce_num = ceiling(1 / tolerance)\n    for float in p.atoms(Float):\n        key = float\n        if reduce_num is not None:\n            r = Rational(float).limit_denominator(reduce_num)\n        elif tolerance is not None and tolerance >= 1 and (float.is_Integer is False):\n            r = Rational(tolerance * round(float / tolerance)).limit_denominator(int(tolerance))\n        else:\n            r = nsimplify(float, rational=False)\n            if float and (not r):\n                r = Rational(float)\n            elif not r.is_Rational:\n                if float == inf or float == -inf:\n                    r = S.ComplexInfinity\n                elif float < 0:\n                    float = -float\n                    d = Pow(10, int(mpmath.log(float) / mpmath.log(10)))\n                    r = -Rational(str(float / d)) * d\n                elif float > 0:\n                    d = Pow(10, int(mpmath.log(float) / mpmath.log(10)))\n                    r = Rational(str(float / d)) * d\n                else:\n                    r = Integer(0)\n        reps[key] = r\n    return p.subs(reps, simultaneous=True)",
    ".sympy.core.evalf.py@@chop_parts": "def chop_parts(value, prec):\n    re, im, re_acc, im_acc = value\n    if re and re not in _infs_nan and (fastlog(re) < -prec + 4):\n        re, re_acc = (None, None)\n    if im and im not in _infs_nan and (fastlog(im) < -prec + 4):\n        im, im_acc = (None, None)\n    if re and im:\n        delta = fastlog(re) - fastlog(im)\n        if re_acc < 2 and delta - re_acc <= -prec + 4:\n            re, re_acc = (None, None)\n        if im_acc < 2 and delta - im_acc >= prec - 4:\n            im, im_acc = (None, None)\n    return (re, im, re_acc, im_acc)",
    ".sympy.core.evalf.py@@fastlog": "def fastlog(x):\n    if not x or x == fzero:\n        return MINUS_INF\n    return x[2] + x[3]",
    ".sympy.simplify.simplify.py@@nsimplify_real": "def nsimplify_real(x):\n    orig = mpmath.mp.dps\n    xv = x._to_mpmath(bprec)\n    try:\n        if not (tolerance or full):\n            mpmath.mp.dps = 15\n            rat = mpmath.pslq([xv, 1])\n            if rat is not None:\n                return Rational(-int(rat[1]), int(rat[0]))\n        mpmath.mp.dps = prec\n        newexpr = mpmath.identify(xv, constants=constants_dict, tol=tolerance, full=full)\n        if not newexpr:\n            raise ValueError\n        if full:\n            newexpr = newexpr[0]\n        expr = sympify(newexpr)\n        if x and (not expr):\n            raise ValueError\n        if expr.is_finite is False and (not xv in [mpmath.inf, mpmath.ninf]):\n            raise ValueError\n        return expr\n    finally:\n        mpmath.mp.dps = orig",
    ".sympy.core.evalf.py@@EvalfMixin._to_mpmath": "def _to_mpmath(self, prec, allow_ints=True):\n    errmsg = 'cannot convert to mpmath number'\n    if allow_ints and self.is_Integer:\n        return self.p\n    if hasattr(self, '_as_mpf_val'):\n        return make_mpf(self._as_mpf_val(prec))\n    try:\n        re, im, _, _ = evalf(self, prec, {})\n        if im:\n            if not re:\n                re = fzero\n            return make_mpc((re, im))\n        elif re:\n            return make_mpf(re)\n        else:\n            return make_mpf(fzero)\n    except NotImplementedError:\n        v = self._eval_evalf(prec)\n        if v is None:\n            raise ValueError(errmsg)\n        if v.is_Float:\n            return make_mpf(v._mpf_)\n        re, im = v.as_real_imag()\n        if allow_ints and re.is_Integer:\n            re = from_int(re.p)\n        elif re.is_Float:\n            re = re._mpf_\n        else:\n            raise ValueError(errmsg)\n        if allow_ints and im.is_Integer:\n            im = from_int(im.p)\n        elif im.is_Float:\n            im = im._mpf_\n        else:\n            raise ValueError(errmsg)\n        return make_mpc((re, im))",
    ".sympy.core.numbers.py@@Float.__div__": "def __div__(self, other):\n    if isinstance(other, Number) and other != 0:\n        rhs, prec = other._as_mpf_op(self._prec)\n        return Float._new(mlib.mpf_div(self._mpf_, rhs, prec, rnd), prec)\n    return Number.__div__(self, other)",
    ".sympy.core.numbers.py@@Rational.__neg__": "def __neg__(self):\n    return Rational(-self.p, self.q)",
    ".sympy.core.numbers.py@@Rational._as_mpf_val": "def _as_mpf_val(self, prec):\n    return mlib.from_rational(self.p, self.q, prec, rnd)",
    ".sympy.core.evalf.py@@evalf_add": "def evalf_add(v, prec, options):\n    res = pure_complex(v)\n    if res:\n        h, c = res\n        re, _, re_acc, _ = evalf(h, prec, options)\n        im, _, im_acc, _ = evalf(c, prec, options)\n        return (re, im, re_acc, im_acc)\n    oldmaxprec = options.get('maxprec', DEFAULT_MAXPREC)\n    i = 0\n    target_prec = prec\n    while 1:\n        options['maxprec'] = min(oldmaxprec, 2 * prec)\n        terms = [evalf(arg, prec + 10, options) for arg in v.args]\n        re, re_acc = add_terms([a[0::2] for a in terms if a[0]], prec, target_prec)\n        im, im_acc = add_terms([a[1::2] for a in terms if a[1]], prec, target_prec)\n        acc = complex_accuracy((re, im, re_acc, im_acc))\n        if acc >= target_prec:\n            if options.get('verbose'):\n                print('ADD: wanted', target_prec, 'accurate bits, got', re_acc, im_acc)\n            break\n        else:\n            if prec - target_prec > options['maxprec']:\n                break\n            prec = prec + max(10 + 2 ** i, target_prec - acc)\n            i += 1\n            if options.get('verbose'):\n                print('ADD: restarting with prec', prec)\n    options['maxprec'] = oldmaxprec\n    if iszero(re, scaled=True):\n        re = scaled_zero(re)\n    if iszero(im, scaled=True):\n        im = scaled_zero(im)\n    return (re, im, re_acc, im_acc)",
    ".sympy.core.evalf.py@@pure_complex": "def pure_complex(v, or_real=False):\n    h, t = v.as_coeff_Add()\n    if not t:\n        if or_real:\n            return (h, t)\n        return\n    c, i = t.as_coeff_Mul()\n    if i is S.ImaginaryUnit:\n        return (h, c)",
    ".sympy.core.evalf.py@@evalf_symbol": "def evalf_symbol(x, prec, options):\n    val = options['subs'][x]\n    if isinstance(val, mpf):\n        if not val:\n            return (None, None, None, None)\n        return (val._mpf_, None, prec, None)\n    else:\n        if not '_cache' in options:\n            options['_cache'] = {}\n        cache = options['_cache']\n        cached, cached_prec = cache.get(x, (None, MINUS_INF))\n        if cached_prec >= prec:\n            return cached\n        v = evalf(sympify(val), prec, options)\n        cache[x] = (v, prec)\n        return v",
    ".sympy.core.evalf.py@@evalf_mul": "def evalf_mul(v, prec, options):\n    res = pure_complex(v)\n    if res:\n        _, h = res\n        im, _, im_acc, _ = evalf(h, prec, options)\n        return (None, im, None, im_acc)\n    args = list(v.args)\n    special = []\n    from sympy.core.numbers import Float\n    for arg in args:\n        arg = evalf(arg, prec, options)\n        if arg[0] is None:\n            continue\n        arg = Float._new(arg[0], 1)\n        if arg is S.NaN or arg.is_infinite:\n            special.append(arg)\n    if special:\n        from sympy.core.mul import Mul\n        special = Mul(*special)\n        return evalf(special, prec + 4, {})\n    acc = prec\n    working_prec = prec + len(args) + 5\n    start = man, exp, bc = (MPZ(1), 0, 1)\n    last = len(args)\n    direction = 0\n    args.append(S.One)\n    complex_factors = []\n    for i, arg in enumerate(args):\n        if i != last and pure_complex(arg):\n            args[-1] = (args[-1] * arg).expand()\n            continue\n        elif i == last and arg is S.One:\n            continue\n        re, im, re_acc, im_acc = evalf(arg, working_prec, options)\n        if re and im:\n            complex_factors.append((re, im, re_acc, im_acc))\n            continue\n        elif re:\n            (s, m, e, b), w_acc = (re, re_acc)\n        elif im:\n            (s, m, e, b), w_acc = (im, im_acc)\n            direction += 1\n        else:\n            return (None, None, None, None)\n        direction += 2 * s\n        man *= m\n        exp += e\n        bc += b\n        if bc > 3 * working_prec:\n            man >>= working_prec\n            exp += working_prec\n        acc = min(acc, w_acc)\n    sign = (direction & 2) >> 1\n    if not complex_factors:\n        v = normalize(sign, man, exp, bitcount(man), prec, rnd)\n        if direction & 1:\n            return (None, v, None, acc)\n        else:\n            return (v, None, acc, None)\n    else:\n        if (man, exp, bc) != start:\n            re, im = ((sign, man, exp, bitcount(man)), (0, MPZ(0), 0, 0))\n            i0 = 0\n        else:\n            wre, wim, wre_acc, wim_acc = complex_factors[0]\n            acc = min(acc, complex_accuracy((wre, wim, wre_acc, wim_acc)))\n            re = wre\n            im = wim\n            i0 = 1\n        for wre, wim, wre_acc, wim_acc in complex_factors[i0:]:\n            acc = min(acc, complex_accuracy((wre, wim, wre_acc, wim_acc)))\n            use_prec = working_prec\n            A = mpf_mul(re, wre, use_prec)\n            B = mpf_mul(mpf_neg(im), wim, use_prec)\n            C = mpf_mul(re, wim, use_prec)\n            D = mpf_mul(im, wre, use_prec)\n            re = mpf_add(A, B, use_prec)\n            im = mpf_add(C, D, use_prec)\n        if options.get('verbose'):\n            print('MUL: wanted', prec, 'accurate bits, got', acc)\n        if direction & 1:\n            re, im = (mpf_neg(im), re)\n        return (re, im, acc, acc)",
    ".sympy.core.expr.py@@Expr.as_coeff_Add": "def as_coeff_Add(self, rational=False):\n    return (S.Zero, self)",
    ".sympy.core.numbers.py@@Rational.as_coeff_Add": "def as_coeff_Add(self, rational=False):\n    return (self, S.Zero)",
    ".sympy.core.evalf.py@@bitcount": "def bitcount(n):\n    return mpmath_bitcount(int(n))",
    ".sympy.core.evalf.py@@add_terms": "def add_terms(terms, prec, target_prec):\n    terms = [t for t in terms if not iszero(t)]\n    if not terms:\n        return (None, None)\n    elif len(terms) == 1:\n        return terms[0]\n    special = []\n    from sympy.core.numbers import Float\n    for t in terms:\n        arg = Float._new(t[0], 1)\n        if arg is S.NaN or arg.is_infinite:\n            special.append(arg)\n    if special:\n        from sympy.core.add import Add\n        rv = evalf(Add(*special), prec + 4, {})\n        return (rv[0], rv[2])\n    working_prec = 2 * prec\n    sum_man, sum_exp, absolute_error = (0, 0, MINUS_INF)\n    for x, accuracy in terms:\n        sign, man, exp, bc = x\n        if sign:\n            man = -man\n        absolute_error = max(absolute_error, bc + exp - accuracy)\n        delta = exp - sum_exp\n        if exp >= sum_exp:\n            if delta > working_prec and (not sum_man or delta - bitcount(abs(sum_man)) > working_prec):\n                sum_man = man\n                sum_exp = exp\n            else:\n                sum_man += man << delta\n        else:\n            delta = -delta\n            if delta - bc > working_prec:\n                if not sum_man:\n                    sum_man, sum_exp = (man, exp)\n            else:\n                sum_man = (sum_man << delta) + man\n                sum_exp = exp\n    if not sum_man:\n        return scaled_zero(absolute_error)\n    if sum_man < 0:\n        sum_sign = 1\n        sum_man = -sum_man\n    else:\n        sum_sign = 0\n    sum_bc = bitcount(sum_man)\n    sum_accuracy = sum_exp + sum_bc - absolute_error\n    r = (normalize(sum_sign, sum_man, sum_exp, sum_bc, target_prec, rnd), sum_accuracy)\n    return r",
    ".sympy.core.evalf.py@@iszero": "def iszero(mpf, scaled=False):\n    if not scaled:\n        return not mpf or (not mpf[1] and (not mpf[-1]))\n    return mpf and type(mpf[0]) is list and (mpf[1] == mpf[-1] == 1)",
    ".sympy.core.evalf.py@@complex_accuracy": "def complex_accuracy(result):\n    re, im, re_acc, im_acc = result\n    if not im:\n        if not re:\n            return INF\n        return re_acc\n    if not re:\n        return im_acc\n    re_size = fastlog(re)\n    im_size = fastlog(im)\n    absolute_error = max(re_size - re_acc, im_size - im_acc)\n    relative_error = absolute_error - max(re_size, im_size)\n    return -relative_error",
    ".sympy.core.numbers.py@@Float.__abs__": "def __abs__(self):\n    return Float._new(mlib.mpf_abs(self._mpf_), self._prec)",
    ".sympy.core.numbers.py@@Float.__sub__": "def __sub__(self, other):\n    if isinstance(other, Number):\n        rhs, prec = other._as_mpf_op(self._prec)\n        return Float._new(mlib.mpf_sub(self._mpf_, rhs, prec, rnd), prec)\n    return Number.__sub__(self, other)",
    ".sympy.simplify.simplify.py@@simplify": "def simplify(expr, ratio=1.7, measure=count_ops, fu=False):\n    expr = sympify(expr)\n    try:\n        return expr._eval_simplify(ratio=ratio, measure=measure)\n    except AttributeError:\n        pass\n    original_expr = expr = signsimp(expr)\n    from sympy.simplify.hyperexpand import hyperexpand\n    from sympy.functions.special.bessel import BesselBase\n    from sympy import Sum, Product\n    if not isinstance(expr, Basic) or not expr.args:\n        return expr\n    if not isinstance(expr, (Add, Mul, Pow, ExpBase)):\n        if isinstance(expr, Function) and hasattr(expr, 'inverse'):\n            if len(expr.args) == 1 and len(expr.args[0].args) == 1 and isinstance(expr.args[0], expr.inverse(argindex=1)):\n                return simplify(expr.args[0].args[0], ratio=ratio, measure=measure, fu=fu)\n        return expr.func(*[simplify(x, ratio=ratio, measure=measure, fu=fu) for x in expr.args])\n\n    def shorter(*choices):\n        if not has_variety(choices):\n            return choices[0]\n        return min(choices, key=measure)\n    expr = bottom_up(expr, lambda w: w.normal())\n    expr = Mul(*powsimp(expr).as_content_primitive())\n    _e = cancel(expr)\n    expr1 = shorter(_e, _mexpand(_e).cancel())\n    expr2 = shorter(together(expr, deep=True), together(expr1, deep=True))\n    if ratio is S.Infinity:\n        expr = expr2\n    else:\n        expr = shorter(expr2, expr1, expr)\n    if not isinstance(expr, Basic):\n        return expr\n    expr = factor_terms(expr, sign=False)\n    expr = hyperexpand(expr)\n    expr = piecewise_fold(expr)\n    if expr.has(BesselBase):\n        expr = besselsimp(expr)\n    if expr.has(TrigonometricFunction) and (not fu) or expr.has(HyperbolicFunction):\n        expr = trigsimp(expr, deep=True)\n    if expr.has(log):\n        expr = shorter(expand_log(expr, deep=True), logcombine(expr))\n    if expr.has(CombinatorialFunction, gamma):\n        expr = combsimp(expr)\n    if expr.has(Sum):\n        expr = sum_simplify(expr)\n    if expr.has(Product):\n        expr = product_simplify(expr)\n    short = shorter(powsimp(expr, combine='exp', deep=True), powsimp(expr), expr)\n    short = shorter(short, factor_terms(short), expand_power_exp(expand_mul(short)))\n    if short.has(TrigonometricFunction, HyperbolicFunction, ExpBase):\n        short = exptrigsimp(short, simplify=False)\n    hollow_mul = Transform(lambda x: Mul(*x.args), lambda x: x.is_Mul and len(x.args) == 2 and x.args[0].is_Number and x.args[1].is_Add and x.is_commutative)\n    expr = short.xreplace(hollow_mul)\n    numer, denom = expr.as_numer_denom()\n    if denom.is_Add:\n        n, d = fraction(radsimp(1 / denom, symbolic=False, max_terms=1))\n        if n is not S.One:\n            expr = (numer * n).expand() / d\n    if expr.could_extract_minus_sign():\n        n, d = fraction(expr)\n        if d != 0:\n            expr = signsimp(-n / -d)\n    if measure(expr) > ratio * measure(original_expr):\n        expr = original_expr\n    return expr",
    ".sympy.core.basic.py@@Atom._eval_simplify": "def _eval_simplify(self, ratio, measure):\n    return self",
    ".sympy.matrices.sparse.py@@SparseMatrix.__init__": "def __init__(self, *args):\n    if len(args) == 1 and isinstance(args[0], SparseMatrix):\n        self.rows = args[0].rows\n        self.cols = args[0].cols\n        self._smat = dict(args[0]._smat)\n        return\n    self._smat = {}\n    if len(args) == 3:\n        self.rows = as_int(args[0])\n        self.cols = as_int(args[1])\n        if isinstance(args[2], collections.Callable):\n            op = args[2]\n            for i in range(self.rows):\n                for j in range(self.cols):\n                    value = self._sympify(op(self._sympify(i), self._sympify(j)))\n                    if value:\n                        self._smat[i, j] = value\n        elif isinstance(args[2], (dict, Dict)):\n            for key in args[2].keys():\n                v = args[2][key]\n                if v:\n                    self._smat[key] = self._sympify(v)\n        elif is_sequence(args[2]):\n            if len(args[2]) != self.rows * self.cols:\n                raise ValueError('List length (%s) != rows*columns (%s)' % (len(args[2]), self.rows * self.cols))\n            flat_list = args[2]\n            for i in range(self.rows):\n                for j in range(self.cols):\n                    value = self._sympify(flat_list[i * self.cols + j])\n                    if value:\n                        self._smat[i, j] = value\n    else:\n        r, c, _list = Matrix._handle_creation_inputs(*args)\n        self.rows = r\n        self.cols = c\n        for i in range(self.rows):\n            for j in range(self.cols):\n                value = _list[self.cols * i + j]\n                if value:\n                    self._smat[i, j] = value",
    ".sympy.matrices.sparse.py@@MutableSparseMatrix.__setitem__": "def __setitem__(self, key, value):\n    rv = self._setitem(key, value)\n    if rv is not None:\n        i, j, value = rv\n        if value:\n            self._smat[i, j] = value\n        elif (i, j) in self._smat:\n            del self._smat[i, j]",
    ".sympy.matrices.matrices.py@@MatrixBase._setitem": "def _setitem(self, key, value):\n    from .dense import Matrix\n    is_slice = isinstance(key, slice)\n    i, j = key = self.key2ij(key)\n    is_mat = isinstance(value, MatrixBase)\n    if type(i) is slice or type(j) is slice:\n        if is_mat:\n            self.copyin_matrix(key, value)\n            return\n        if not isinstance(value, Expr) and is_sequence(value):\n            self.copyin_list(key, value)\n            return\n        raise ValueError('unexpected value: %s' % value)\n    else:\n        if not is_mat and (not isinstance(value, Basic)) and is_sequence(value):\n            value = Matrix(value)\n            is_mat = True\n        if is_mat:\n            if is_slice:\n                key = (slice(*divmod(i, self.cols)), slice(*divmod(j, self.cols)))\n            else:\n                key = (slice(i, i + value.rows), slice(j, j + value.cols))\n            self.copyin_matrix(key, value)\n        else:\n            return (i, j, self._sympify(value))\n        return",
    ".sympy.matrices.matrices.py@@MatrixBase.key2ij": "def key2ij(self, key):\n    if is_sequence(key):\n        if not len(key) == 2:\n            raise TypeError('key must be a sequence of length 2')\n        return [a2idx(i, n) if not isinstance(i, slice) else i for i, n in zip(key, self.shape)]\n    elif isinstance(key, slice):\n        return key.indices(len(self))[:2]\n    else:\n        return divmod(a2idx(key, len(self)), self.cols)",
    ".sympy.matrices.matrices.py@@MatrixBase.shape": "def shape(self):\n    return (self.rows, self.cols)",
    ".sympy.matrices.matrices.py@@a2idx": "def a2idx(j, n=None):\n    if type(j) is not int:\n        try:\n            j = j.__index__()\n        except AttributeError:\n            raise IndexError('Invalid index a[%r]' % (j,))\n    if n is not None:\n        if j < 0:\n            j += n\n        if not (j >= 0 and j < n):\n            raise IndexError('Index out of range: a[%s]' % (j,))\n    return int(j)",
    ".sympy.core.numbers.py@@Integer.__index__": "def __index__(self):\n    return self.p",
    ".sympy.matrices.immutable.py@@ImmutableMatrix._mat": "def _mat(self):\n    return list(self.args[2])",
    ".sympy.matrices.immutable.py@@ImmutableMatrix.shape": "def shape(self):\n    return tuple([int(i) for i in self.args[:2]])",
    ".sympy.matrices.dense.py@@DenseMatrix.as_immutable": "def as_immutable(self):\n    from .immutable import ImmutableMatrix as cls\n    if self.rows and self.cols:\n        return cls._new(self.tolist())\n    return cls._new(self.rows, self.cols, [])",
    ".sympy.matrices.dense.py@@DenseMatrix.tolist": "def tolist(self):\n    if not self.rows:\n        return []\n    if not self.cols:\n        return [[] for i in range(self.rows)]\n    return [self._mat[i:i + self.cols] for i in range(0, len(self), self.cols)]",
    ".sympy.matrices.matrices.py@@MatrixBase.__len__": "def __len__(self):\n    return self.rows * self.cols",
    ".sympy.matrices.immutable.py@@ImmutableMatrix._new": "def _new(cls, *args, **kwargs):\n    if len(args) == 1 and isinstance(args[0], ImmutableMatrix):\n        return args[0]\n    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)\n    rows = Integer(rows)\n    cols = Integer(cols)\n    mat = Tuple(*flat_list)\n    return Basic.__new__(cls, rows, cols, mat)",
    ".sympy.matrices.sparse.py@@SparseMatrix.as_immutable": "def as_immutable(self):\n    from .immutable import ImmutableSparseMatrix\n    return ImmutableSparseMatrix(self)",
    ".sympy.matrices.immutable.py@@ImmutableSparseMatrix.__new__": "def __new__(cls, *args, **kwargs):\n    return cls._new(*args, **kwargs)",
    ".sympy.matrices.immutable.py@@ImmutableSparseMatrix._new": "def _new(cls, *args, **kwargs):\n    s = MutableSparseMatrix(*args)\n    rows = Integer(s.rows)\n    cols = Integer(s.cols)\n    mat = Dict(s._smat)\n    obj = Basic.__new__(cls, rows, cols, mat)\n    obj.rows = s.rows\n    obj.cols = s.cols\n    obj._smat = s._smat\n    return obj",
    ".sympy.core.containers.py@@Dict.__new__": "def __new__(cls, *args):\n    if len(args) == 1 and isinstance(args[0], (dict, Dict)):\n        items = [Tuple(k, v) for k, v in args[0].items()]\n    elif iterable(args) and all((len(arg) == 2 for arg in args)):\n        items = [Tuple(k, v) for k, v in args]\n    else:\n        raise TypeError('Pass Dict args as Dict((k1, v1), ...) or Dict({k1: v1, ...})')\n    elements = frozenset(items)\n    obj = Basic.__new__(cls, elements)\n    obj.elements = elements\n    obj._dict = dict(items)\n    return obj",
    ".sympy.core.mul.py@@Mul.as_coefficients_dict": "def as_coefficients_dict(self):\n    d = defaultdict(int)\n    args = self.args\n    if len(args) == 1 or not args[0].is_Number:\n        d[self] = S.One\n    else:\n        d[self._new_rawargs(*args[1:])] = args[0]\n    return d"
}