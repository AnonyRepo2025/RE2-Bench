{
    ".xarray.core.indexes.py@@Indexes.copy": "def copy(self):\n    return type(self)(dict(self._indexes), dict(self._variables))",
    ".xarray.core.indexes.py@@Indexes.__init__": "def __init__(self, indexes: dict[Any, T_PandasOrXarrayIndex], variables: dict[Any, Variable]):\n    self._indexes = indexes\n    self._variables = variables\n    self._dims: Mapping[Hashable, int] | None = None\n    self.__coord_name_id: dict[Any, int] | None = None\n    self.__id_index: dict[int, T_PandasOrXarrayIndex] | None = None\n    self.__id_coord_names: dict[int, tuple[Hashable, ...]] | None = None",
    ".xarray.core.indexes.py@@Indexes.__iter__": "def __iter__(self) -> Iterator[T_PandasOrXarrayIndex]:\n    return iter(self._indexes)",
    ".xarray.core.indexes.py@@Indexes.__getitem__": "def __getitem__(self, key) -> T_PandasOrXarrayIndex:\n    return self._indexes[key]",
    ".xarray.core.indexes.py@@Indexes.get_all_coords": "def get_all_coords(self, key: Hashable, errors: ErrorOptions='raise') -> dict[Hashable, Variable]:\n    if errors not in ['raise', 'ignore']:\n        raise ValueError('errors must be either \"raise\" or \"ignore\"')\n    if key not in self._indexes:\n        if errors == 'raise':\n            raise ValueError(f'no index found for {key!r} coordinate')\n        else:\n            return {}\n    all_coord_names = self._id_coord_names[self._coord_name_id[key]]\n    return {k: self._variables[k] for k in all_coord_names}",
    ".xarray.core.indexes.py@@Indexes._id_coord_names": "def _id_coord_names(self) -> dict[int, tuple[Hashable, ...]]:\n    if self.__id_coord_names is None:\n        id_coord_names: Mapping[int, list[Hashable]] = defaultdict(list)\n        for k, v in self._coord_name_id.items():\n            id_coord_names[v].append(k)\n        self.__id_coord_names = {k: tuple(v) for k, v in id_coord_names.items()}\n    return self.__id_coord_names",
    ".xarray.core.indexes.py@@Indexes._coord_name_id": "def _coord_name_id(self) -> dict[Any, int]:\n    if self.__coord_name_id is None:\n        self.__coord_name_id = {k: id(idx) for k, idx in self._indexes.items()}\n    return self.__coord_name_id"
}