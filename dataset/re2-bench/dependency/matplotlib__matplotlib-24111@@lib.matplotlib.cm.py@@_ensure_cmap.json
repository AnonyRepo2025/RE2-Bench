{
    ".lib.matplotlib.__init__.py@@RcParams.__getitem__": "def __getitem__(self, key):\n    if key in _deprecated_map:\n        version, alt_key, alt_val, inverse_alt = _deprecated_map[key]\n        _api.warn_deprecated(version, name=key, obj_type='rcparam', alternative=alt_key)\n        return inverse_alt(dict.__getitem__(self, alt_key))\n    elif key in _deprecated_ignore_map:\n        version, alt_key = _deprecated_ignore_map[key]\n        _api.warn_deprecated(version, name=key, obj_type='rcparam', alternative=alt_key)\n        return dict.__getitem__(self, alt_key) if alt_key else None\n    elif key == 'backend' and self is globals().get('rcParams'):\n        val = dict.__getitem__(self, key)\n        if val is rcsetup._auto_backend_sentinel:\n            from matplotlib import pyplot as plt\n            plt.switch_backend(rcsetup._auto_backend_sentinel)\n    return dict.__getitem__(self, key)",
    ".lib.matplotlib.cm.py@@ColormapRegistry.__iter__": "def __iter__(self):\n    return iter(self._cmaps)",
    ".lib.matplotlib.cm.py@@ColormapRegistry.__len__": "def __len__(self):\n    return len(self._cmaps)",
    ".lib.matplotlib._api.__init__.py@@check_in_list": "def check_in_list(_values, *, _print_supported_values=True, **kwargs):\n    if not kwargs:\n        raise TypeError('No argument to check!')\n    values = _values\n    for key, val in kwargs.items():\n        if val not in values:\n            msg = f'{val!r} is not a valid value for {key}'\n            if _print_supported_values:\n                msg += f'; supported values are {', '.join(map(repr, values))}'\n            raise ValueError(msg)"
}