{
    ".django.utils.tree.py@@Node.__bool__": "def __bool__(self):\n    return bool(self.children)",
    ".django.utils.tree.py@@Node.__init__": "def __init__(self, children=None, connector=None, negated=False):\n    self.children = children[:] if children else []\n    self.connector = connector or self.default\n    self.negated = negated",
    ".django.utils.tree.py@@Node.add": "def add(self, data, conn_type, squash=True):\n    if data in self.children:\n        return data\n    if not squash:\n        self.children.append(data)\n        return data\n    if self.connector == conn_type:\n        if isinstance(data, Node) and (not data.negated) and (data.connector == conn_type or len(data) == 1):\n            self.children.extend(data.children)\n            return self\n        else:\n            self.children.append(data)\n            return data\n    else:\n        obj = self._new_instance(self.children, self.connector, self.negated)\n        self.connector = conn_type\n        self.children = [obj, data]\n        return data",
    ".django.utils.tree.py@@Node.__len__": "def __len__(self):\n    return len(self.children)",
    ".django.utils.tree.py@@Node.__eq__": "def __eq__(self, other):\n    return self.__class__ == other.__class__ and (self.connector, self.negated) == (other.connector, other.negated) and (self.children == other.children)",
    ".django.db.models.expressions.py@@BaseExpression.conditional": "def conditional(self):\n    return isinstance(self.output_field, fields.BooleanField)",
    ".django.db.models.expressions.py@@BaseExpression.__eq__": "def __eq__(self, other):\n    if not isinstance(other, BaseExpression):\n        return NotImplemented\n    return other.identity == self.identity",
    ".django.utils.deconstruct.py@@deconstruct": "def deconstruct(obj):\n    if path:\n        module_name, _, name = path.rpartition('.')\n    else:\n        module_name = obj.__module__\n        name = obj.__class__.__name__\n    module = import_module(module_name)\n    if not hasattr(module, name):\n        raise ValueError('Could not find object %s in %s.\\nPlease note that you cannot serialize things like inner classes. Please move the object into the main module body to use migrations.\\nFor more information, see https://docs.djangoproject.com/en/%s/topics/migrations/#serializing-values' % (name, module_name, get_docs_version()))\n    return (path or '%s.%s' % (obj.__class__.__module__, name), obj._constructor_args[0], obj._constructor_args[1])"
}