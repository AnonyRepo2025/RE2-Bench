{
    ".django.utils.tree.py@@Node.__bool__": "def __bool__(self):\n    return bool(self.children)",
    ".django.db.models.expressions.py@@BaseExpression.conditional": "def conditional(self):\n    return isinstance(self.output_field, fields.BooleanField)",
    ".django.utils.tree.py@@Node.__init__": "def __init__(self, children=None, connector=None, negated=False):\n    self.children = children[:] if children else []\n    self.connector = connector or self.default\n    self.negated = negated",
    ".django.utils.tree.py@@Node.add": "def add(self, data, conn_type, squash=True):\n    if data in self.children:\n        return data\n    if not squash:\n        self.children.append(data)\n        return data\n    if self.connector == conn_type:\n        if isinstance(data, Node) and (not data.negated) and (data.connector == conn_type or len(data) == 1):\n            self.children.extend(data.children)\n            return self\n        else:\n            self.children.append(data)\n            return data\n    else:\n        obj = self._new_instance(self.children, self.connector, self.negated)\n        self.connector = conn_type\n        self.children = [obj, data]\n        return data",
    ".django.utils.tree.py@@Node.__eq__": "def __eq__(self, other):\n    return self.__class__ == other.__class__ and (self.connector, self.negated) == (other.connector, other.negated) and (self.children == other.children)",
    ".django.utils.tree.py@@Node.__len__": "def __len__(self):\n    return len(self.children)"
}