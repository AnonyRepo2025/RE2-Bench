{
    ".django.core.cache.backends.filebased.py@@FileBasedCache.get": "def get(self, key, default=None, version=None):\n    fname = self._key_to_file(key, version)\n    try:\n        with open(fname, 'rb') as f:\n            if not self._is_expired(f):\n                return pickle.loads(zlib.decompress(f.read()))\n    except FileNotFoundError:\n        pass\n    return default",
    ".django.core.cache.backends.filebased.py@@FileBasedCache._key_to_file": "def _key_to_file(self, key, version=None):\n    key = self.make_key(key, version=version)\n    self.validate_key(key)\n    return os.path.join(self._dir, ''.join([hashlib.md5(key.encode()).hexdigest(), self.cache_suffix]))",
    ".django.core.cache.backends.base.py@@default_key_func": "def default_key_func(key, key_prefix, version):\n    return '%s:%s:%s' % (key_prefix, version, key)",
    ".django.core.cache.backends.base.py@@memcache_key_warnings": "def memcache_key_warnings(key):\n    if len(key) > MEMCACHE_MAX_KEY_LENGTH:\n        yield ('Cache key will cause errors if used with memcached: %r (longer than %s)' % (key, MEMCACHE_MAX_KEY_LENGTH))\n    for char in key:\n        if ord(char) < 33 or ord(char) == 127:\n            yield ('Cache key contains characters that will cause errors if used with memcached: %r' % key)\n            break",
    ".django.core.cache.backends.filebased.py@@FileBasedCache._is_expired": "def _is_expired(self, f):\n    try:\n        exp = pickle.load(f)\n    except EOFError:\n        exp = 0\n    if exp is not None and exp < time.time():\n        f.close()\n        self._delete(f.name)\n        return True\n    return False",
    ".django.core.cache.backends.locmem.py@@LocMemCache.get": "def get(self, key, default=None, version=None):\n    key = self.make_key(key, version=version)\n    self.validate_key(key)\n    with self._lock:\n        if self._has_expired(key):\n            self._delete(key)\n            return default\n        pickled = self._cache[key]\n        self._cache.move_to_end(key, last=False)\n    return pickle.loads(pickled)",
    ".django.core.cache.backends.locmem.py@@LocMemCache._has_expired": "def _has_expired(self, key):\n    exp = self._expire_info.get(key, -1)\n    return exp is not None and exp <= time.time()",
    ".django.core.cache.backends.locmem.py@@LocMemCache._delete": "def _delete(self, key):\n    try:\n        del self._cache[key]\n        del self._expire_info[key]\n    except KeyError:\n        return False\n    return True",
    ".django.core.cache.backends.dummy.py@@DummyCache.get": "def get(self, key, default=None, version=None):\n    key = self.make_key(key, version=version)\n    self.validate_key(key)\n    return default"
}