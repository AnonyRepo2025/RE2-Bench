{
    ".django.urls.resolvers.py@@RoutePattern.__init__": "def __init__(self, route, name=None, is_endpoint=False):\n    self._route = route\n    self._regex_dict = {}\n    self._is_endpoint = is_endpoint\n    self.name = name\n    self.converters = _route_to_regex(str(route), is_endpoint)[1]",
    ".django.urls.resolvers.py@@_route_to_regex": "def _route_to_regex(route, is_endpoint=False):\n    original_route = route\n    parts = ['^']\n    converters = {}\n    while True:\n        match = _PATH_PARAMETER_COMPONENT_RE.search(route)\n        if not match:\n            parts.append(re.escape(route))\n            break\n        elif not set(match.group()).isdisjoint(string.whitespace):\n            raise ImproperlyConfigured(\"URL route '%s' cannot contain whitespace in angle brackets <\u2026>.\" % original_route)\n        parts.append(re.escape(route[:match.start()]))\n        route = route[match.end():]\n        parameter = match['parameter']\n        if not parameter.isidentifier():\n            raise ImproperlyConfigured(\"URL route '%s' uses parameter name %r which isn't a valid Python identifier.\" % (original_route, parameter))\n        raw_converter = match['converter']\n        if raw_converter is None:\n            raw_converter = 'str'\n        try:\n            converter = get_converter(raw_converter)\n        except KeyError as e:\n            raise ImproperlyConfigured('URL route %r uses invalid converter %r.' % (original_route, raw_converter)) from e\n        converters[parameter] = converter\n        parts.append('(?P<' + parameter + '>' + converter.regex + ')')\n    if is_endpoint:\n        parts.append('\\\\Z')\n    return (''.join(parts), converters)",
    ".django.utils.functional.py@@inner": "def inner(self, *args):\n    if self._wrapped is empty:\n        self._setup()\n    return func(self._wrapped, *args)",
    ".django.utils.functional.py@@SimpleLazyObject._setup": "def _setup(self):\n    self._wrapped = self._setupfunc()",
    ".django.utils.regex_helper.py@@_compile": "def _compile():\n    if isinstance(regex, (str, bytes)):\n        return re.compile(regex, flags)\n    else:\n        assert not flags, 'flags must be empty if regex is passed pre-compiled'\n        return regex",
    ".django.utils.functional.py@@LazyObject.__setattr__": "def __setattr__(self, name, value):\n    if name == '_wrapped':\n        self.__dict__['_wrapped'] = value\n    else:\n        if self._wrapped is empty:\n            self._setup()\n        setattr(self._wrapped, name, value)",
    ".django.urls.converters.py@@get_converter": "def get_converter(raw_converter):\n    return get_converters()[raw_converter]",
    ".django.urls.converters.py@@get_converters": "def get_converters():\n    return {**DEFAULT_CONVERTERS, **REGISTERED_CONVERTERS}",
    ".django.urls.resolvers.py@@RegexPattern.__init__": "def __init__(self, regex, name=None, is_endpoint=False):\n    self._regex = regex\n    self._regex_dict = {}\n    self._is_endpoint = is_endpoint\n    self.name = name\n    self.converters = {}"
}