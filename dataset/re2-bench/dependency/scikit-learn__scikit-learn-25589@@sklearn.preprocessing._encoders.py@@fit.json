{
    ".sklearn.base.py@@BaseEstimator._validate_params": "def _validate_params(self):\n    validate_parameter_constraints(self._parameter_constraints, self.get_params(deep=False), caller_name=self.__class__.__name__)",
    ".sklearn.base.py@@BaseEstimator.get_params": "def get_params(self, deep=True):\n    out = dict()\n    for key in self._get_param_names():\n        value = getattr(self, key)\n        if deep and hasattr(value, 'get_params') and (not isinstance(value, type)):\n            deep_items = value.get_params().items()\n            out.update(((key + '__' + k, val) for k, val in deep_items))\n        out[key] = value\n    return out",
    ".sklearn.base.py@@BaseEstimator._get_param_names": "def _get_param_names(cls):\n    init = getattr(cls.__init__, 'deprecated_original', cls.__init__)\n    if init is object.__init__:\n        return []\n    init_signature = inspect.signature(init)\n    parameters = [p for p in init_signature.parameters.values() if p.name != 'self' and p.kind != p.VAR_KEYWORD]\n    for p in parameters:\n        if p.kind == p.VAR_POSITIONAL:\n            raise RuntimeError(\"scikit-learn estimators should always specify their parameters in the signature of their __init__ (no varargs). %s with constructor %s doesn't  follow this convention.\" % (cls, init_signature))\n    return sorted([p.name for p in parameters])",
    ".sklearn.utils._param_validation.py@@validate_parameter_constraints": "def validate_parameter_constraints(parameter_constraints, params, caller_name):\n    for param_name, param_val in params.items():\n        if param_name not in parameter_constraints:\n            continue\n        constraints = parameter_constraints[param_name]\n        if constraints == 'no_validation':\n            continue\n        constraints = [make_constraint(constraint) for constraint in constraints]\n        for constraint in constraints:\n            if constraint.is_satisfied_by(param_val):\n                break\n        else:\n            constraints = [constraint for constraint in constraints if not constraint.hidden]\n            if len(constraints) == 1:\n                constraints_str = f'{constraints[0]}'\n            else:\n                constraints_str = f'{', '.join([str(c) for c in constraints[:-1]])} or {constraints[-1]}'\n            raise InvalidParameterError(f'The {param_name!r} parameter of {caller_name} must be {constraints_str}. Got {param_val!r} instead.')",
    ".sklearn.utils._param_validation.py@@make_constraint": "def make_constraint(constraint):\n    if isinstance(constraint, str) and constraint == 'array-like':\n        return _ArrayLikes()\n    if isinstance(constraint, str) and constraint == 'sparse matrix':\n        return _SparseMatrices()\n    if isinstance(constraint, str) and constraint == 'random_state':\n        return _RandomStates()\n    if constraint is callable:\n        return _Callables()\n    if constraint is None:\n        return _NoneConstraint()\n    if isinstance(constraint, type):\n        return _InstancesOf(constraint)\n    if isinstance(constraint, (Interval, StrOptions, Options, HasMethods)):\n        return constraint\n    if isinstance(constraint, str) and constraint == 'boolean':\n        return _Booleans()\n    if isinstance(constraint, str) and constraint == 'verbose':\n        return _VerboseHelper()\n    if isinstance(constraint, str) and constraint == 'missing_values':\n        return _MissingValues()\n    if isinstance(constraint, str) and constraint == 'cv_object':\n        return _CVObjects()\n    if isinstance(constraint, Hidden):\n        constraint = make_constraint(constraint.constraint)\n        constraint.hidden = True\n        return constraint\n    raise ValueError(f'Unknown constraint type: {constraint}')",
    ".sklearn.utils._param_validation.py@@_InstancesOf.__init__": "def __init__(self, type):\n    super().__init__()\n    self.type = type",
    ".sklearn.utils._param_validation.py@@_Constraint.__init__": "def __init__(self):\n    self.hidden = False",
    ".sklearn.utils._param_validation.py@@Options.is_satisfied_by": "def is_satisfied_by(self, val):\n    return isinstance(val, self.type) and val in self.options",
    ".sklearn.utils._param_validation.py@@_InstancesOf.is_satisfied_by": "def is_satisfied_by(self, val):\n    return isinstance(val, self.type)",
    ".sklearn.utils._param_validation.py@@_NoneConstraint.is_satisfied_by": "def is_satisfied_by(self, val):\n    return val is None",
    ".sklearn.preprocessing._encoders.py@@_BaseEncoder._fit": "def _fit(self, X, handle_unknown='error', force_all_finite=True, return_counts=False):\n    self._check_n_features(X, reset=True)\n    self._check_feature_names(X, reset=True)\n    X_list, n_samples, n_features = self._check_X(X, force_all_finite=force_all_finite)\n    self.n_features_in_ = n_features\n    if self.categories != 'auto':\n        if len(self.categories) != n_features:\n            raise ValueError('Shape mismatch: if categories is an array, it has to be of shape (n_features,).')\n    self.categories_ = []\n    category_counts = []\n    for i in range(n_features):\n        Xi = X_list[i]\n        if self.categories == 'auto':\n            result = _unique(Xi, return_counts=return_counts)\n            if return_counts:\n                cats, counts = result\n                category_counts.append(counts)\n            else:\n                cats = result\n        else:\n            if np.issubdtype(Xi.dtype, np.str_):\n                Xi_dtype = object\n            else:\n                Xi_dtype = Xi.dtype\n            cats = np.array(self.categories[i], dtype=Xi_dtype)\n            if cats.dtype == object and isinstance(cats[0], bytes) and (Xi.dtype.kind != 'S'):\n                msg = f\"In column {i}, the predefined categories have type 'bytes' which is incompatible with values of type '{type(Xi[0]).__name__}'.\"\n                raise ValueError(msg)\n            if Xi.dtype.kind not in 'OUS':\n                sorted_cats = np.sort(cats)\n                error_msg = 'Unsorted categories are not supported for numerical categories'\n                stop_idx = -1 if np.isnan(sorted_cats[-1]) else None\n                if np.any(sorted_cats[:stop_idx] != cats[:stop_idx]) or (np.isnan(sorted_cats[-1]) and (not np.isnan(sorted_cats[-1]))):\n                    raise ValueError(error_msg)\n            if handle_unknown == 'error':\n                diff = _check_unknown(Xi, cats)\n                if diff:\n                    msg = 'Found unknown categories {0} in column {1} during fit'.format(diff, i)\n                    raise ValueError(msg)\n            if return_counts:\n                category_counts.append(_get_counts(Xi, cats))\n        self.categories_.append(cats)\n    output = {'n_samples': n_samples}\n    if return_counts:\n        output['category_counts'] = category_counts\n    return output",
    ".sklearn.base.py@@BaseEstimator._check_n_features": "def _check_n_features(self, X, reset):\n    try:\n        n_features = _num_features(X)\n    except TypeError as e:\n        if not reset and hasattr(self, 'n_features_in_'):\n            raise ValueError(f'X does not contain any features, but {self.__class__.__name__} is expecting {self.n_features_in_} features') from e\n        return\n    if reset:\n        self.n_features_in_ = n_features\n        return\n    if not hasattr(self, 'n_features_in_'):\n        return\n    if n_features != self.n_features_in_:\n        raise ValueError(f'X has {n_features} features, but {self.__class__.__name__} is expecting {self.n_features_in_} features as input.')",
    ".sklearn.utils.validation.py@@_num_features": "def _num_features(X):\n    type_ = type(X)\n    if type_.__module__ == 'builtins':\n        type_name = type_.__qualname__\n    else:\n        type_name = f'{type_.__module__}.{type_.__qualname__}'\n    message = f'Unable to find the number of features from X of type {type_name}'\n    if not hasattr(X, '__len__') and (not hasattr(X, 'shape')):\n        if not hasattr(X, '__array__'):\n            raise TypeError(message)\n        X = np.asarray(X)\n    if hasattr(X, 'shape'):\n        if not hasattr(X.shape, '__len__') or len(X.shape) <= 1:\n            message += f' with shape {X.shape}'\n            raise TypeError(message)\n        return X.shape[1]\n    first_sample = X[0]\n    if isinstance(first_sample, (str, bytes, dict)):\n        message += f' where the samples are of type {type(first_sample).__qualname__}'\n        raise TypeError(message)\n    try:\n        return len(first_sample)\n    except Exception as err:\n        raise TypeError(message) from err",
    ".sklearn.base.py@@BaseEstimator._check_feature_names": "def _check_feature_names(self, X, *, reset):\n    if reset:\n        feature_names_in = _get_feature_names(X)\n        if feature_names_in is not None:\n            self.feature_names_in_ = feature_names_in\n        elif hasattr(self, 'feature_names_in_'):\n            delattr(self, 'feature_names_in_')\n        return\n    fitted_feature_names = getattr(self, 'feature_names_in_', None)\n    X_feature_names = _get_feature_names(X)\n    if fitted_feature_names is None and X_feature_names is None:\n        return\n    if X_feature_names is not None and fitted_feature_names is None:\n        warnings.warn(f'X has feature names, but {self.__class__.__name__} was fitted without feature names')\n        return\n    if X_feature_names is None and fitted_feature_names is not None:\n        warnings.warn(f'X does not have valid feature names, but {self.__class__.__name__} was fitted with feature names')\n        return\n    if len(fitted_feature_names) != len(X_feature_names) or np.any(fitted_feature_names != X_feature_names):\n        message = 'The feature names should match those that were passed during fit.\\n'\n        fitted_feature_names_set = set(fitted_feature_names)\n        X_feature_names_set = set(X_feature_names)\n        unexpected_names = sorted(X_feature_names_set - fitted_feature_names_set)\n        missing_names = sorted(fitted_feature_names_set - X_feature_names_set)\n\n        def add_names(names):\n            output = ''\n            max_n_names = 5\n            for i, name in enumerate(names):\n                if i >= max_n_names:\n                    output += '- ...\\n'\n                    break\n                output += f'- {name}\\n'\n            return output\n        if unexpected_names:\n            message += 'Feature names unseen at fit time:\\n'\n            message += add_names(unexpected_names)\n        if missing_names:\n            message += 'Feature names seen at fit time, yet now missing:\\n'\n            message += add_names(missing_names)\n        if not missing_names and (not unexpected_names):\n            message += 'Feature names must be in the same order as they were in fit.\\n'\n        raise ValueError(message)",
    ".sklearn.utils.validation.py@@_get_feature_names": "def _get_feature_names(X):\n    feature_names = None\n    if hasattr(X, 'columns'):\n        feature_names = np.asarray(X.columns, dtype=object)\n    if feature_names is None or len(feature_names) == 0:\n        return\n    types = sorted((t.__qualname__ for t in set((type(v) for v in feature_names))))\n    if len(types) > 1 and 'str' in types:\n        raise TypeError(f'Feature names are only supported if all input features have string names, but your input has {types} as feature name / column name types. If you want feature names to be stored and validated, you must convert them all to strings, by using X.columns = X.columns.astype(str) for example. Otherwise you can remove feature / column names from your input data, or convert them all to a non-string data type.')\n    if len(types) == 1 and types[0] == 'str':\n        return feature_names",
    ".sklearn.preprocessing._encoders.py@@_BaseEncoder._check_X": "def _check_X(self, X, force_all_finite=True):\n    if not (hasattr(X, 'iloc') and getattr(X, 'ndim', 0) == 2):\n        X_temp = check_array(X, dtype=None, force_all_finite=force_all_finite)\n        if not hasattr(X, 'dtype') and np.issubdtype(X_temp.dtype, np.str_):\n            X = check_array(X, dtype=object, force_all_finite=force_all_finite)\n        else:\n            X = X_temp\n        needs_validation = False\n    else:\n        needs_validation = force_all_finite\n    n_samples, n_features = X.shape\n    X_columns = []\n    for i in range(n_features):\n        Xi = _safe_indexing(X, indices=i, axis=1)\n        Xi = check_array(Xi, ensure_2d=False, dtype=None, force_all_finite=needs_validation)\n        X_columns.append(Xi)\n    return (X_columns, n_samples, n_features)",
    ".sklearn.utils.validation.py@@check_array": "def check_array(array, accept_sparse=False, *, accept_large_sparse=True, dtype='numeric', order=None, copy=False, force_all_finite=True, ensure_2d=True, allow_nd=False, ensure_min_samples=1, ensure_min_features=1, estimator=None, input_name=''):\n    if isinstance(array, np.matrix):\n        raise TypeError('np.matrix is not supported. Please convert to a numpy array with np.asarray. For more information see: https://numpy.org/doc/stable/reference/generated/numpy.matrix.html')\n    xp, is_array_api = get_namespace(array)\n    array_orig = array\n    dtype_numeric = isinstance(dtype, str) and dtype == 'numeric'\n    dtype_orig = getattr(array, 'dtype', None)\n    if not hasattr(dtype_orig, 'kind'):\n        dtype_orig = None\n    dtypes_orig = None\n    pandas_requires_conversion = False\n    if hasattr(array, 'dtypes') and hasattr(array.dtypes, '__array__'):\n        with suppress(ImportError):\n            from pandas.api.types import is_sparse\n            if not hasattr(array, 'sparse') and array.dtypes.apply(is_sparse).any():\n                warnings.warn('pandas.DataFrame with sparse columns found.It will be converted to a dense numpy array.')\n        dtypes_orig = list(array.dtypes)\n        pandas_requires_conversion = any((_pandas_dtype_needs_early_conversion(i) for i in dtypes_orig))\n        if all((isinstance(dtype_iter, np.dtype) for dtype_iter in dtypes_orig)):\n            dtype_orig = np.result_type(*dtypes_orig)\n    elif hasattr(array, 'iloc') and hasattr(array, 'dtype'):\n        pandas_requires_conversion = _pandas_dtype_needs_early_conversion(array.dtype)\n        if isinstance(array.dtype, np.dtype):\n            dtype_orig = array.dtype\n        else:\n            dtype_orig = None\n    if dtype_numeric:\n        if dtype_orig is not None and dtype_orig.kind == 'O':\n            dtype = xp.float64\n        else:\n            dtype = None\n    if isinstance(dtype, (list, tuple)):\n        if dtype_orig is not None and dtype_orig in dtype:\n            dtype = None\n        else:\n            dtype = dtype[0]\n    if pandas_requires_conversion:\n        new_dtype = dtype_orig if dtype is None else dtype\n        array = array.astype(new_dtype)\n        dtype = None\n    if force_all_finite not in (True, False, 'allow-nan'):\n        raise ValueError('force_all_finite should be a bool or \"allow-nan\". Got {!r} instead'.format(force_all_finite))\n    estimator_name = _check_estimator_name(estimator)\n    context = ' by %s' % estimator_name if estimator is not None else ''\n    if hasattr(array, 'sparse') and array.ndim > 1:\n        with suppress(ImportError):\n            from pandas.api.types import is_sparse\n            if array.dtypes.apply(is_sparse).all():\n                array = array.sparse.to_coo()\n                if array.dtype == np.dtype('object'):\n                    unique_dtypes = set([dt.subtype.name for dt in array_orig.dtypes])\n                    if len(unique_dtypes) > 1:\n                        raise ValueError('Pandas DataFrame with mixed sparse extension arrays generated a sparse matrix with object dtype which can not be converted to a scipy sparse matrix.Sparse extension arrays should all have the same numeric type.')\n    if sp.issparse(array):\n        _ensure_no_complex_data(array)\n        array = _ensure_sparse_format(array, accept_sparse=accept_sparse, dtype=dtype, copy=copy, force_all_finite=force_all_finite, accept_large_sparse=accept_large_sparse, estimator_name=estimator_name, input_name=input_name)\n    else:\n        with warnings.catch_warnings():\n            try:\n                warnings.simplefilter('error', ComplexWarning)\n                if dtype is not None and np.dtype(dtype).kind in 'iu':\n                    array = _asarray_with_order(array, order=order, xp=xp)\n                    if array.dtype.kind == 'f':\n                        _assert_all_finite(array, allow_nan=False, msg_dtype=dtype, estimator_name=estimator_name, input_name=input_name)\n                    array = xp.astype(array, dtype, copy=False)\n                else:\n                    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n            except ComplexWarning as complex_warning:\n                raise ValueError('Complex data not supported\\n{}\\n'.format(array)) from complex_warning\n        _ensure_no_complex_data(array)\n        if ensure_2d:\n            if array.ndim == 0:\n                raise ValueError('Expected 2D array, got scalar array instead:\\narray={}.\\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.'.format(array))\n            if array.ndim == 1:\n                raise ValueError('Expected 2D array, got 1D array instead:\\narray={}.\\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.'.format(array))\n        if dtype_numeric and array.dtype.kind in 'USV':\n            raise ValueError(\"dtype='numeric' is not compatible with arrays of bytes/strings.Convert your data to numeric values explicitly instead.\")\n        if not allow_nd and array.ndim >= 3:\n            raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim, estimator_name))\n        if force_all_finite:\n            _assert_all_finite(array, input_name=input_name, estimator_name=estimator_name, allow_nan=force_all_finite == 'allow-nan')\n    if ensure_min_samples > 0:\n        n_samples = _num_samples(array)\n        if n_samples < ensure_min_samples:\n            raise ValueError('Found array with %d sample(s) (shape=%s) while a minimum of %d is required%s.' % (n_samples, array.shape, ensure_min_samples, context))\n    if ensure_min_features > 0 and array.ndim == 2:\n        n_features = array.shape[1]\n        if n_features < ensure_min_features:\n            raise ValueError('Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.' % (n_features, array.shape, ensure_min_features, context))\n    if copy:\n        if xp.__name__ in {'numpy', 'numpy.array_api'}:\n            if np.may_share_memory(array, array_orig):\n                array = _asarray_with_order(array, dtype=dtype, order=order, copy=True, xp=xp)\n        else:\n            array = _asarray_with_order(array, dtype=dtype, order=order, copy=True, xp=xp)\n    return array",
    ".sklearn.utils._array_api.py@@get_namespace": "def get_namespace(*arrays):\n    if not get_config()['array_api_dispatch']:\n        return (_NumPyApiWrapper(), False)\n    namespaces = {x.__array_namespace__() if hasattr(x, '__array_namespace__') else None for x in arrays if not isinstance(x, (bool, int, float, complex))}\n    if not namespaces:\n        raise ValueError('Unrecognized array input')\n    if len(namespaces) != 1:\n        raise ValueError(f'Multiple namespaces for array inputs: {namespaces}')\n    xp, = namespaces\n    if xp is None:\n        return (_NumPyApiWrapper(), False)\n    return (_ArrayAPIWrapper(xp), True)",
    ".sklearn._config.py@@get_config": "def get_config():\n    return _get_threadlocal_config().copy()",
    ".sklearn._config.py@@_get_threadlocal_config": "def _get_threadlocal_config():\n    if not hasattr(_threadlocal, 'global_config'):\n        _threadlocal.global_config = _global_config.copy()\n    return _threadlocal.global_config",
    ".sklearn.utils.validation.py@@_check_estimator_name": "def _check_estimator_name(estimator):\n    if estimator is not None:\n        if isinstance(estimator, str):\n            return estimator\n        else:\n            return estimator.__class__.__name__\n    return None",
    ".sklearn.utils._array_api.py@@_asarray_with_order": "def _asarray_with_order(array, dtype=None, order=None, copy=None, xp=None):\n    if xp is None:\n        xp, _ = get_namespace(array)\n    if xp.__name__ in {'numpy', 'numpy.array_api'}:\n        array = numpy.asarray(array, order=order, dtype=dtype)\n        return xp.asarray(array, copy=copy)\n    else:\n        return xp.asarray(array, dtype=dtype, copy=copy)",
    ".sklearn.utils._array_api.py@@_NumPyApiWrapper.__getattr__": "def __getattr__(self, name):\n    return getattr(numpy, name)",
    ".sklearn.utils._array_api.py@@_NumPyApiWrapper.asarray": "def asarray(self, x, *, dtype=None, device=None, copy=None):\n    if copy is True:\n        return numpy.array(x, copy=True, dtype=dtype)\n    else:\n        return numpy.asarray(x, dtype=dtype)",
    ".sklearn.utils.validation.py@@_ensure_no_complex_data": "def _ensure_no_complex_data(array):\n    if hasattr(array, 'dtype') and array.dtype is not None and hasattr(array.dtype, 'kind') and (array.dtype.kind == 'c'):\n        raise ValueError('Complex data not supported\\n{}\\n'.format(array))",
    ".sklearn.utils.validation.py@@_assert_all_finite": "def _assert_all_finite(X, allow_nan=False, msg_dtype=None, estimator_name=None, input_name=''):\n    xp, _ = get_namespace(X)\n    if _get_config()['assume_finite']:\n        return\n    X = xp.asarray(X)\n    if X.dtype == np.dtype('object') and (not allow_nan):\n        if _object_dtype_isnan(X).any():\n            raise ValueError('Input contains NaN')\n    if X.dtype.kind not in 'fc':\n        return\n    with np.errstate(over='ignore'):\n        first_pass_isfinite = xp.isfinite(xp.sum(X))\n    if first_pass_isfinite:\n        return\n    use_cython = xp is np and X.data.contiguous and (X.dtype.type in {np.float32, np.float64})\n    if use_cython:\n        out = cy_isfinite(X.reshape(-1), allow_nan=allow_nan)\n        has_nan_error = False if allow_nan else out == FiniteStatus.has_nan\n        has_inf = out == FiniteStatus.has_infinite\n    else:\n        has_inf = xp.any(xp.isinf(X))\n        has_nan_error = False if allow_nan else xp.any(xp.isnan(X))\n    if has_inf or has_nan_error:\n        if has_nan_error:\n            type_err = 'NaN'\n        else:\n            msg_dtype = msg_dtype if msg_dtype is not None else X.dtype\n            type_err = f'infinity or a value too large for {msg_dtype!r}'\n        padded_input_name = input_name + ' ' if input_name else ''\n        msg_err = f'Input {padded_input_name}contains {type_err}.'\n        if estimator_name and input_name == 'X' and has_nan_error:\n            msg_err += f'\\n{estimator_name} does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values'\n        raise ValueError(msg_err)",
    ".sklearn.utils.validation.py@@_num_samples": "def _num_samples(x):\n    message = 'Expected sequence or array-like, got %s' % type(x)\n    if hasattr(x, 'fit') and callable(x.fit):\n        raise TypeError(message)\n    if not hasattr(x, '__len__') and (not hasattr(x, 'shape')):\n        if hasattr(x, '__array__'):\n            x = np.asarray(x)\n        else:\n            raise TypeError(message)\n    if hasattr(x, 'shape') and x.shape is not None:\n        if len(x.shape) == 0:\n            raise TypeError('Singleton array %r cannot be considered a valid collection.' % x)\n        if isinstance(x.shape[0], numbers.Integral):\n            return x.shape[0]\n    try:\n        return len(x)\n    except TypeError as type_error:\n        raise TypeError(message) from type_error",
    ".sklearn.utils.__init__.py@@_safe_indexing": "def _safe_indexing(X, indices, *, axis=0):\n    if indices is None:\n        return X\n    if axis not in (0, 1):\n        raise ValueError(\"'axis' should be either 0 (to index rows) or 1 (to index  column). Got {} instead.\".format(axis))\n    indices_dtype = _determine_key_type(indices)\n    if axis == 0 and indices_dtype == 'str':\n        raise ValueError(\"String indexing is not supported with 'axis=0'\")\n    if axis == 1 and X.ndim != 2:\n        raise ValueError(\"'X' should be a 2D NumPy array, 2D sparse matrix or pandas dataframe when indexing the columns (i.e. 'axis=1'). Got {} instead with {} dimension(s).\".format(type(X), X.ndim))\n    if axis == 1 and indices_dtype == 'str' and (not hasattr(X, 'loc')):\n        raise ValueError('Specifying the columns using strings is only supported for pandas DataFrames')\n    if hasattr(X, 'iloc'):\n        return _pandas_indexing(X, indices, indices_dtype, axis=axis)\n    elif hasattr(X, 'shape'):\n        return _array_indexing(X, indices, indices_dtype, axis=axis)\n    else:\n        return _list_indexing(X, indices, indices_dtype)",
    ".sklearn.utils.__init__.py@@_determine_key_type": "def _determine_key_type(key, accept_slice=True):\n    err_msg = 'No valid specification of the columns. Only a scalar, list or slice of all integers or all strings, or boolean mask is allowed'\n    dtype_to_str = {int: 'int', str: 'str', bool: 'bool', np.bool_: 'bool'}\n    array_dtype_to_str = {'i': 'int', 'u': 'int', 'b': 'bool', 'O': 'str', 'U': 'str', 'S': 'str'}\n    if key is None:\n        return None\n    if isinstance(key, tuple(dtype_to_str.keys())):\n        try:\n            return dtype_to_str[type(key)]\n        except KeyError:\n            raise ValueError(err_msg)\n    if isinstance(key, slice):\n        if not accept_slice:\n            raise TypeError('Only array-like or scalar are supported. A Python slice was given.')\n        if key.start is None and key.stop is None:\n            return None\n        key_start_type = _determine_key_type(key.start)\n        key_stop_type = _determine_key_type(key.stop)\n        if key_start_type is not None and key_stop_type is not None:\n            if key_start_type != key_stop_type:\n                raise ValueError(err_msg)\n        if key_start_type is not None:\n            return key_start_type\n        return key_stop_type\n    if isinstance(key, (list, tuple)):\n        unique_key = set(key)\n        key_type = {_determine_key_type(elt) for elt in unique_key}\n        if not key_type:\n            return None\n        if len(key_type) != 1:\n            raise ValueError(err_msg)\n        return key_type.pop()\n    if hasattr(key, 'dtype'):\n        try:\n            return array_dtype_to_str[key.dtype.kind]\n        except KeyError:\n            raise ValueError(err_msg)\n    raise ValueError(err_msg)",
    ".sklearn.utils.__init__.py@@_array_indexing": "def _array_indexing(array, key, key_dtype, axis):\n    if issparse(array) and key_dtype == 'bool':\n        key = np.asarray(key)\n    if isinstance(key, tuple):\n        key = list(key)\n    return array[key] if axis == 0 else array[:, key]",
    ".sklearn.utils._encode.py@@_unique": "def _unique(values, *, return_inverse=False, return_counts=False):\n    if values.dtype == object:\n        return _unique_python(values, return_inverse=return_inverse, return_counts=return_counts)\n    return _unique_np(values, return_inverse=return_inverse, return_counts=return_counts)",
    ".sklearn.utils._encode.py@@_unique_python": "def _unique_python(values, *, return_inverse, return_counts):\n    try:\n        uniques_set = set(values)\n        uniques_set, missing_values = _extract_missing(uniques_set)\n        uniques = sorted(uniques_set)\n        uniques.extend(missing_values.to_list())\n        uniques = np.array(uniques, dtype=values.dtype)\n    except TypeError:\n        types = sorted((t.__qualname__ for t in set((type(v) for v in values))))\n        raise TypeError(f'Encoders require their input to be uniformly strings or numbers. Got {types}')\n    ret = (uniques,)\n    if return_inverse:\n        ret += (_map_to_integer(values, uniques),)\n    if return_counts:\n        ret += (_get_counts(values, uniques),)\n    return ret[0] if len(ret) == 1 else ret",
    ".sklearn.utils._encode.py@@_extract_missing": "def _extract_missing(values):\n    missing_values_set = {value for value in values if value is None or is_scalar_nan(value)}\n    if not missing_values_set:\n        return (values, MissingValues(nan=False, none=False))\n    if None in missing_values_set:\n        if len(missing_values_set) == 1:\n            output_missing_values = MissingValues(nan=False, none=True)\n        else:\n            output_missing_values = MissingValues(nan=True, none=True)\n    else:\n        output_missing_values = MissingValues(nan=True, none=False)\n    output = values - missing_values_set\n    return (output, output_missing_values)",
    ".sklearn.utils.__init__.py@@is_scalar_nan": "def is_scalar_nan(x):\n    return isinstance(x, numbers.Real) and math.isnan(x)",
    ".sklearn.utils._encode.py@@MissingValues.to_list": "def to_list(self):\n    output = []\n    if self.none:\n        output.append(None)\n    if self.nan:\n        output.append(np.nan)\n    return output",
    ".sklearn.utils._encode.py@@_unique_np": "def _unique_np(values, return_inverse=False, return_counts=False):\n    uniques = np.unique(values, return_inverse=return_inverse, return_counts=return_counts)\n    inverse, counts = (None, None)\n    if return_counts:\n        *uniques, counts = uniques\n    if return_inverse:\n        *uniques, inverse = uniques\n    if return_counts or return_inverse:\n        uniques = uniques[0]\n    if uniques.size and is_scalar_nan(uniques[-1]):\n        nan_idx = np.searchsorted(uniques, np.nan)\n        uniques = uniques[:nan_idx + 1]\n        if return_inverse:\n            inverse[inverse > nan_idx] = nan_idx\n        if return_counts:\n            counts[nan_idx] = np.sum(counts[nan_idx:])\n            counts = counts[:nan_idx + 1]\n    ret = (uniques,)\n    if return_inverse:\n        ret += (inverse,)\n    if return_counts:\n        ret += (counts,)\n    return ret[0] if len(ret) == 1 else ret",
    ".sklearn.utils._encode.py@@_check_unknown": "def _check_unknown(values, known_values, return_mask=False):\n    valid_mask = None\n    if values.dtype.kind in 'OUS':\n        values_set = set(values)\n        values_set, missing_in_values = _extract_missing(values_set)\n        uniques_set = set(known_values)\n        uniques_set, missing_in_uniques = _extract_missing(uniques_set)\n        diff = values_set - uniques_set\n        nan_in_diff = missing_in_values.nan and (not missing_in_uniques.nan)\n        none_in_diff = missing_in_values.none and (not missing_in_uniques.none)\n\n        def is_valid(value):\n            return value in uniques_set or (missing_in_uniques.none and value is None) or (missing_in_uniques.nan and is_scalar_nan(value))\n        if return_mask:\n            if diff or nan_in_diff or none_in_diff:\n                valid_mask = np.array([is_valid(value) for value in values])\n            else:\n                valid_mask = np.ones(len(values), dtype=bool)\n        diff = list(diff)\n        if none_in_diff:\n            diff.append(None)\n        if nan_in_diff:\n            diff.append(np.nan)\n    else:\n        unique_values = np.unique(values)\n        diff = np.setdiff1d(unique_values, known_values, assume_unique=True)\n        if return_mask:\n            if diff.size:\n                valid_mask = np.in1d(values, known_values)\n            else:\n                valid_mask = np.ones(len(values), dtype=bool)\n        if np.isnan(known_values).any():\n            diff_is_nan = np.isnan(diff)\n            if diff_is_nan.any():\n                if diff.size and return_mask:\n                    is_nan = np.isnan(values)\n                    valid_mask[is_nan] = 1\n                diff = diff[~diff_is_nan]\n        diff = list(diff)\n    if return_mask:\n        return (diff, valid_mask)\n    return diff",
    ".sklearn.conftest.py@@pytest_runtest_setup": "def pytest_runtest_setup(item):\n    xdist_worker_count = environ.get('PYTEST_XDIST_WORKER_COUNT')\n    if xdist_worker_count is None:\n        return\n    else:\n        xdist_worker_count = int(xdist_worker_count)\n    openmp_threads = _openmp_effective_n_threads()\n    threads_per_worker = max(openmp_threads // xdist_worker_count, 1)\n    threadpool_limits(threads_per_worker, user_api='openmp')",
    ".sklearn.utils._param_validation.py@@_ArrayLikes.is_satisfied_by": "def is_satisfied_by(self, val):\n    return _is_arraylike_not_scalar(val)",
    ".sklearn.utils.validation.py@@_is_arraylike_not_scalar": "def _is_arraylike_not_scalar(array):\n    return _is_arraylike(array) and (not np.isscalar(array))",
    ".sklearn.utils.validation.py@@_is_arraylike": "def _is_arraylike(x):\n    return hasattr(x, '__len__') or hasattr(x, 'shape') or hasattr(x, '__array__')",
    ".sklearn.utils._param_validation.py@@Interval.is_satisfied_by": "def is_satisfied_by(self, val):\n    if not self._has_valid_type(val):\n        return False\n    return val in self",
    ".sklearn.utils._param_validation.py@@Interval._has_valid_type": "def _has_valid_type(self, val):\n    if self.type == 'real_not_int':\n        return isinstance(val, Real) and (not isinstance(val, Integral))\n    return isinstance(val, self.type)",
    ".sklearn.utils._param_validation.py@@_Booleans.__init__": "def __init__(self):\n    super().__init__()\n    self._constraints = [_InstancesOf(bool), _InstancesOf(np.bool_), _InstancesOf(Integral)]",
    ".sklearn.utils._param_validation.py@@_Booleans.is_satisfied_by": "def is_satisfied_by(self, val):\n    if isinstance(val, Integral) and (not isinstance(val, bool)):\n        warnings.warn(\"Passing an int for a boolean parameter is deprecated in version 1.2 and won't be supported anymore in version 1.4.\", FutureWarning)\n    return any((c.is_satisfied_by(val) for c in self._constraints))",
    ".sklearn.utils.__init__.py@@_pandas_indexing": "def _pandas_indexing(X, key, key_dtype, axis):\n    if _is_arraylike_not_scalar(key):\n        key = np.asarray(key)\n    if key_dtype == 'int' and (not (isinstance(key, slice) or np.isscalar(key))):\n        return X.take(key, axis=axis)\n    else:\n        indexer = X.iloc if key_dtype == 'int' else X.loc\n        return indexer[:, key] if axis else indexer[key]",
    ".sklearn.utils.validation.py@@_pandas_dtype_needs_early_conversion": "def _pandas_dtype_needs_early_conversion(pd_dtype):\n    from pandas.api.types import is_bool_dtype, is_sparse, is_float_dtype, is_integer_dtype\n    if is_bool_dtype(pd_dtype):\n        return True\n    if is_sparse(pd_dtype):\n        return False\n    try:\n        from pandas.api.types import is_extension_array_dtype\n    except ImportError:\n        return False\n    if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):\n        return False\n    elif is_float_dtype(pd_dtype):\n        return True\n    elif is_integer_dtype(pd_dtype):\n        return True\n    return False"
}