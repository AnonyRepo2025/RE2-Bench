{
    ".sympy.core.cache.py@@__cacheit_nocache": "def __cacheit_nocache(func):\n    return func",
    ".sympy.core.basic.py@@Basic.free_symbols": "def free_symbols(self):\n    return set().union(*[a.free_symbols for a in self.args])",
    ".sympy.core.basic.py@@Basic.args": "def args(self):\n    return self._args",
    ".sympy.core.symbol.py@@Symbol.free_symbols": "def free_symbols(self):\n    return {self}",
    ".sympy.core.basic.py@@Basic.__hash__": "def __hash__(self):\n    h = self._mhash\n    if h is None:\n        h = hash((type(self).__name__,) + self._hashable_content())\n        self._mhash = h\n    return h",
    ".sympy.core.basic.py@@Basic.__eq__": "def __eq__(self, other):\n    from sympy import Pow\n    if self is other:\n        return True\n    if type(self) is not type(other):\n        try:\n            other = _sympify(other)\n        except SympifyError:\n            return NotImplemented\n        if type(self) != type(other):\n            return False\n    return self._hashable_content() == other._hashable_content()",
    ".sympy.core.sympify.py@@_sympify": "def _sympify(a):\n    return sympify(a, strict=True)",
    ".sympy.core.sympify.py@@sympify": "def sympify(a, locals=None, convert_xor=True, strict=False, rational=False, evaluate=None):\n    if evaluate is None:\n        if global_evaluate[0] is False:\n            evaluate = global_evaluate[0]\n        else:\n            evaluate = True\n    try:\n        if a in sympy_classes:\n            return a\n    except TypeError:\n        pass\n    try:\n        cls = a.__class__\n    except AttributeError:\n        cls = type(a)\n    if cls in sympy_classes:\n        return a\n    if cls is type(None):\n        if strict:\n            raise SympifyError(a)\n        else:\n            return a\n    if type(a).__module__ == 'numpy':\n        import numpy as np\n        if np.isscalar(a):\n            return _convert_numpy_types(a)\n    try:\n        return converter[cls](a)\n    except KeyError:\n        for superclass in getmro(cls):\n            try:\n                return converter[superclass](a)\n            except KeyError:\n                continue\n    if isinstance(a, CantSympify):\n        raise SympifyError(a)\n    try:\n        return a._sympy_()\n    except AttributeError:\n        pass\n    if not strict:\n        try:\n            from ..tensor.array import Array\n            return Array(a.flat, a.shape)\n        except AttributeError:\n            pass\n    if not isinstance(a, string_types):\n        for coerce in (float, int):\n            try:\n                return sympify(coerce(a))\n            except (TypeError, ValueError, AttributeError, SympifyError):\n                continue\n    if strict:\n        raise SympifyError(a)\n    if iterable(a):\n        try:\n            return type(a)([sympify(x, locals=locals, convert_xor=convert_xor, rational=rational) for x in a])\n        except TypeError:\n            pass\n    if isinstance(a, dict):\n        try:\n            return type(a)([sympify(x, locals=locals, convert_xor=convert_xor, rational=rational) for x in a.items()])\n        except TypeError:\n            pass\n    try:\n        from .compatibility import unicode\n        a = unicode(a)\n    except Exception as exc:\n        raise SympifyError(a, exc)\n    from sympy.parsing.sympy_parser import parse_expr, TokenError, standard_transformations\n    from sympy.parsing.sympy_parser import convert_xor as t_convert_xor\n    from sympy.parsing.sympy_parser import rationalize as t_rationalize\n    transformations = standard_transformations\n    if rational:\n        transformations += (t_rationalize,)\n    if convert_xor:\n        transformations += (t_convert_xor,)\n    try:\n        a = a.replace('\\n', '')\n        expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n    except (TokenError, SyntaxError) as exc:\n        raise SympifyError('could not parse %r' % a, exc)\n    return expr",
    ".sympy.core.basic.py@@Basic.has": "def has(self, *patterns):\n    return any((self._has(pattern) for pattern in patterns))",
    ".sympy.core.basic.py@@Basic._has": "def _has(self, pattern):\n    from sympy.core.function import UndefinedFunction, Function\n    if isinstance(pattern, UndefinedFunction):\n        return any((f.func == pattern or f == pattern for f in self.atoms(Function, UndefinedFunction)))\n    pattern = sympify(pattern)\n    if isinstance(pattern, BasicMeta):\n        return any((isinstance(arg, pattern) for arg in preorder_traversal(self)))\n    try:\n        match = pattern._has_matcher()\n        return any((match(arg) for arg in preorder_traversal(self)))\n    except AttributeError:\n        return any((arg == pattern for arg in preorder_traversal(self)))",
    ".sympy.core.basic.py@@preorder_traversal.__init__": "def __init__(self, node, keys=None):\n    self._skip_flag = False\n    self._pt = self._preorder_traversal(node, keys)",
    ".sympy.core.basic.py@@preorder_traversal.__iter__": "def __iter__(self):\n    return self",
    ".sympy.core.basic.py@@preorder_traversal.__next__": "def __next__(self):\n    return next(self._pt)",
    ".sympy.core.basic.py@@preorder_traversal._preorder_traversal": "def _preorder_traversal(self, node, keys):\n    yield node\n    if self._skip_flag:\n        self._skip_flag = False\n        return\n    if isinstance(node, Basic):\n        if not keys and hasattr(node, '_argset'):\n            args = node._argset\n        else:\n            args = node.args\n        if keys:\n            if keys != True:\n                args = ordered(args, keys, default=False)\n            else:\n                args = ordered(args)\n        for arg in args:\n            for subtree in self._preorder_traversal(arg, keys):\n                yield subtree\n    elif iterable(node):\n        for item in node:\n            for subtree in self._preorder_traversal(item, keys):\n                yield subtree",
    ".sympy.core.decorators.py@@__sympifyit_wrapper": "def __sympifyit_wrapper(a, b):\n    try:\n        if not hasattr(b, '_op_priority'):\n            b = sympify(b, strict=True)\n        return func(a, b)\n    except SympifyError:\n        return retval",
    ".sympy.core.decorators.py@@binary_op_wrapper": "def binary_op_wrapper(self, other):\n    if hasattr(other, '_op_priority'):\n        if other._op_priority > self._op_priority:\n            try:\n                f = getattr(other, method_name)\n            except AttributeError:\n                pass\n            else:\n                return f(self)\n    return func(self, other)",
    ".sympy.core.expr.py@@Expr.__sub__": "def __sub__(self, other):\n    return Add(self, -other)",
    ".sympy.core.expr.py@@Expr.__neg__": "def __neg__(self):\n    return Mul(S.NegativeOne, self)",
    ".sympy.core.operations.py@@AssocOp.__new__": "def __new__(cls, *args, **options):\n    from sympy import Order\n    args = list(map(_sympify, args))\n    args = [a for a in args if a is not cls.identity]\n    if not options.pop('evaluate', global_evaluate[0]):\n        return cls._from_args(args)\n    if len(args) == 0:\n        return cls.identity\n    if len(args) == 1:\n        return args[0]\n    c_part, nc_part, order_symbols = cls.flatten(args)\n    is_commutative = not nc_part\n    obj = cls._from_args(c_part + nc_part, is_commutative)\n    obj = cls._exec_constructor_postprocessors(obj)\n    if order_symbols is not None:\n        return Order(obj, *order_symbols)\n    return obj",
    ".sympy.core.numbers.py@@Integer.__hash__": "def __hash__(self):\n    return hash(self.p)",
    ".sympy.core.mul.py@@Mul.flatten": "def flatten(cls, seq):\n    from sympy.calculus.util import AccumBounds\n    from sympy.matrices.expressions import MatrixExpr\n    rv = None\n    if len(seq) == 2:\n        a, b = seq\n        if b.is_Rational:\n            a, b = (b, a)\n        assert not a is S.One\n        if not a.is_zero and a.is_Rational:\n            r, b = b.as_coeff_Mul()\n            if b.is_Add:\n                if r is not S.One:\n                    rv = ([cls(a * r, b, evaluate=False)], [], None)\n                elif global_distribute[0] and b.is_commutative:\n                    r, b = b.as_coeff_Add()\n                    bargs = [_keep_coeff(a, bi) for bi in Add.make_args(b)]\n                    _addsort(bargs)\n                    ar = a * r\n                    if ar:\n                        bargs.insert(0, ar)\n                    bargs = [Add._from_args(bargs)]\n                    rv = (bargs, [], None)\n        if rv:\n            return rv\n    c_part = []\n    nc_part = []\n    nc_seq = []\n    coeff = S.One\n    c_powers = []\n    num_exp = []\n    neg1e = S.Zero\n    pnum_rat = {}\n    order_symbols = None\n    for o in seq:\n        if o.is_Order:\n            o, order_symbols = o.as_expr_variables(order_symbols)\n        if o.is_Mul:\n            if o.is_commutative:\n                seq.extend(o.args)\n            else:\n                for q in o.args:\n                    if q.is_commutative:\n                        seq.append(q)\n                    else:\n                        nc_seq.append(q)\n                seq.append(NC_Marker)\n            continue\n        elif o.is_Number:\n            if o is S.NaN or (coeff is S.ComplexInfinity and o is S.Zero):\n                return ([S.NaN], [], None)\n            elif coeff.is_Number:\n                coeff *= o\n                if coeff is S.NaN:\n                    return ([S.NaN], [], None)\n            continue\n        elif isinstance(o, AccumBounds):\n            coeff = o.__mul__(coeff)\n            continue\n        elif isinstance(o, MatrixExpr):\n            coeff = o.__mul__(coeff)\n            continue\n        elif o is S.ComplexInfinity:\n            if not coeff:\n                return ([S.NaN], [], None)\n            if coeff is S.ComplexInfinity:\n                return ([S.ComplexInfinity], [], None)\n            coeff = S.ComplexInfinity\n            continue\n        elif o is S.ImaginaryUnit:\n            neg1e += S.Half\n            continue\n        elif o.is_commutative:\n            b, e = o.as_base_exp()\n            if o.is_Pow:\n                if b.is_Number:\n                    if e.is_Rational:\n                        if e.is_Integer:\n                            coeff *= Pow(b, e)\n                            continue\n                        elif e.is_negative:\n                            seq.append(Pow(b, e))\n                            continue\n                        elif b.is_negative:\n                            neg1e += e\n                            b = -b\n                        if b is not S.One:\n                            pnum_rat.setdefault(b, []).append(e)\n                        continue\n                    elif b.is_positive or e.is_integer:\n                        num_exp.append((b, e))\n                        continue\n                elif b is S.ImaginaryUnit and e.is_Rational:\n                    neg1e += e / 2\n                    continue\n            c_powers.append((b, e))\n        else:\n            if o is not NC_Marker:\n                nc_seq.append(o)\n            while nc_seq:\n                o = nc_seq.pop(0)\n                if not nc_part:\n                    nc_part.append(o)\n                    continue\n                o1 = nc_part.pop()\n                b1, e1 = o1.as_base_exp()\n                b2, e2 = o.as_base_exp()\n                new_exp = e1 + e2\n                if b1 == b2 and (not new_exp.is_Add):\n                    o12 = b1 ** new_exp\n                    if o12.is_commutative:\n                        seq.append(o12)\n                        continue\n                    else:\n                        nc_seq.insert(0, o12)\n                else:\n                    nc_part.append(o1)\n                    nc_part.append(o)\n\n    def _gather(c_powers):\n        common_b = {}\n        for b, e in c_powers:\n            co = e.as_coeff_Mul()\n            common_b.setdefault(b, {}).setdefault(co[1], []).append(co[0])\n        for b, d in common_b.items():\n            for di, li in d.items():\n                d[di] = Add(*li)\n        new_c_powers = []\n        for b, e in common_b.items():\n            new_c_powers.extend([(b, c * t) for t, c in e.items()])\n        return new_c_powers\n    c_powers = _gather(c_powers)\n    num_exp = _gather(num_exp)\n    for i in range(2):\n        new_c_powers = []\n        changed = False\n        for b, e in c_powers:\n            if e.is_zero:\n                if (b.is_Add or b.is_Mul) and any((infty in b.args for infty in (S.ComplexInfinity, S.Infinity, S.NegativeInfinity))):\n                    return ([S.NaN], [], None)\n                continue\n            if e is S.One:\n                if b.is_Number:\n                    coeff *= b\n                    continue\n                p = b\n            if e is not S.One:\n                p = Pow(b, e)\n                if p.is_Pow and (not b.is_Pow):\n                    bi = b\n                    b, e = p.as_base_exp()\n                    if b != bi:\n                        changed = True\n            c_part.append(p)\n            new_c_powers.append((b, e))\n        if changed and len(set((b for b, e in new_c_powers))) != len(new_c_powers):\n            c_part = []\n            c_powers = _gather(new_c_powers)\n        else:\n            break\n    inv_exp_dict = {}\n    for b, e in num_exp:\n        inv_exp_dict.setdefault(e, []).append(b)\n    for e, b in inv_exp_dict.items():\n        inv_exp_dict[e] = cls(*b)\n    c_part.extend([Pow(b, e) for e, b in inv_exp_dict.items() if e])\n    comb_e = {}\n    for b, e in pnum_rat.items():\n        comb_e.setdefault(Add(*e), []).append(b)\n    del pnum_rat\n    num_rat = []\n    for e, b in comb_e.items():\n        b = cls(*b)\n        if e.q == 1:\n            coeff *= Pow(b, e)\n            continue\n        if e.p > e.q:\n            e_i, ep = divmod(e.p, e.q)\n            coeff *= Pow(b, e_i)\n            e = Rational(ep, e.q)\n        num_rat.append((b, e))\n    del comb_e\n    pnew = defaultdict(list)\n    i = 0\n    while i < len(num_rat):\n        bi, ei = num_rat[i]\n        grow = []\n        for j in range(i + 1, len(num_rat)):\n            bj, ej = num_rat[j]\n            g = bi.gcd(bj)\n            if g is not S.One:\n                e = ei + ej\n                if e.q == 1:\n                    coeff *= Pow(g, e)\n                else:\n                    if e.p > e.q:\n                        e_i, ep = divmod(e.p, e.q)\n                        coeff *= Pow(g, e_i)\n                        e = Rational(ep, e.q)\n                    grow.append((g, e))\n                num_rat[j] = (bj / g, ej)\n                bi = bi / g\n                if bi is S.One:\n                    break\n        if bi is not S.One:\n            obj = Pow(bi, ei)\n            if obj.is_Number:\n                coeff *= obj\n            else:\n                for obj in Mul.make_args(obj):\n                    if obj.is_Number:\n                        coeff *= obj\n                    else:\n                        assert obj.is_Pow\n                        bi, ei = obj.args\n                        pnew[ei].append(bi)\n        num_rat.extend(grow)\n        i += 1\n    for e, b in pnew.items():\n        pnew[e] = cls(*b)\n    if neg1e:\n        p, q = neg1e.as_numer_denom()\n        n, p = divmod(p, q)\n        if n % 2:\n            coeff = -coeff\n        if q == 2:\n            c_part.append(S.ImaginaryUnit)\n        elif p:\n            neg1e = Rational(p, q)\n            for e, b in pnew.items():\n                if e == neg1e and b.is_positive:\n                    pnew[e] = -b\n                    break\n            else:\n                c_part.append(Pow(S.NegativeOne, neg1e, evaluate=False))\n    c_part.extend([Pow(b, e) for e, b in pnew.items()])\n    if coeff is S.Infinity or coeff is S.NegativeInfinity:\n\n        def _handle_for_oo(c_part, coeff_sign):\n            new_c_part = []\n            for t in c_part:\n                if t.is_positive:\n                    continue\n                if t.is_negative:\n                    coeff_sign *= -1\n                    continue\n                new_c_part.append(t)\n            return (new_c_part, coeff_sign)\n        c_part, coeff_sign = _handle_for_oo(c_part, 1)\n        nc_part, coeff_sign = _handle_for_oo(nc_part, coeff_sign)\n        coeff *= coeff_sign\n    if coeff is S.ComplexInfinity:\n        c_part = [c for c in c_part if not (fuzzy_not(c.is_zero) and c.is_real is not None)]\n        nc_part = [c for c in nc_part if not (fuzzy_not(c.is_zero) and c.is_real is not None)]\n    elif coeff is S.Zero:\n        if any((c.is_finite == False for c in c_part)):\n            return ([S.NaN], [], order_symbols)\n        return ([coeff], [], order_symbols)\n    _new = []\n    for i in c_part:\n        if i.is_Number:\n            coeff *= i\n        else:\n            _new.append(i)\n    c_part = _new\n    _mulsort(c_part)\n    if coeff is not S.One:\n        c_part.insert(0, coeff)\n    if global_distribute[0] and (not nc_part) and (len(c_part) == 2) and c_part[0].is_Number and c_part[1].is_Add:\n        coeff = c_part[0]\n        c_part = [Add(*[coeff * f for f in c_part[1].args])]\n    return (c_part, nc_part, order_symbols)",
    ".sympy.core.assumptions.py@@getit": "def getit(self):\n    try:\n        return self._assumptions[fact]\n    except KeyError:\n        if self._assumptions is self.default_assumptions:\n            self._assumptions = self.default_assumptions.copy()\n        return _ask(fact, self)",
    ".sympy.core.expr.py@@Expr.as_coeff_Mul": "def as_coeff_Mul(self, rational=False):\n    return (S.One, self)",
    ".sympy.core.numbers.py@@Integer.__mul__": "def __mul__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, integer_types):\n            return Integer(self.p * other)\n        elif isinstance(other, Integer):\n            return Integer(self.p * other.p)\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.p, other.q, igcd(self.p, other.q))\n        return Rational.__mul__(self, other)\n    return Rational.__mul__(self, other)",
    ".sympy.core.numbers.py@@Integer.__new__": "def __new__(cls, i):\n    if isinstance(i, string_types):\n        i = i.replace(' ', '')\n    try:\n        ival = int(i)\n    except TypeError:\n        raise TypeError('Integer can only work with integer expressions.')\n    try:\n        return _intcache[ival]\n    except KeyError:\n        obj = Expr.__new__(cls)\n        obj.p = ival\n        _intcache[ival] = obj\n        return obj",
    ".sympy.core.expr.py@@Expr.as_base_exp": "def as_base_exp(self):\n    return (self, S.One)",
    ".sympy.core.mul.py@@Mul._gather": "def _gather(c_powers):\n    common_b = {}\n    for b, e in c_powers:\n        co = e.as_coeff_Mul()\n        common_b.setdefault(b, {}).setdefault(co[1], []).append(co[0])\n    for b, d in common_b.items():\n        for di, li in d.items():\n            d[di] = Add(*li)\n    new_c_powers = []\n    for b, e in common_b.items():\n        new_c_powers.extend([(b, c * t) for t, c in e.items()])\n    return new_c_powers",
    ".sympy.core.numbers.py@@Rational.as_coeff_Mul": "def as_coeff_Mul(self, rational=False):\n    return (self, S.One)",
    ".sympy.core.numbers.py@@Zero.__nonzero__": "def __nonzero__(self):\n    return False",
    ".sympy.core.mul.py@@_mulsort": "def _mulsort(args):\n    args.sort(key=_args_sortkey)",
    ".sympy.core.operations.py@@AssocOp._from_args": "def _from_args(cls, args, is_commutative=None):\n    if len(args) == 0:\n        return cls.identity\n    elif len(args) == 1:\n        return args[0]\n    obj = super(AssocOp, cls).__new__(cls, *args)\n    if is_commutative is None:\n        is_commutative = fuzzy_and((a.is_commutative for a in args))\n    obj.is_commutative = is_commutative\n    return obj",
    ".sympy.core.basic.py@@Basic.__new__": "def __new__(cls, *args):\n    obj = object.__new__(cls)\n    obj._assumptions = cls.default_assumptions\n    obj._mhash = None\n    obj._args = args\n    return obj",
    ".sympy.core.basic.py@@Basic._exec_constructor_postprocessors": "def _exec_constructor_postprocessors(cls, obj):\n    clsname = obj.__class__.__name__\n    postprocessors = defaultdict(list)\n    for i in obj.args:\n        try:\n            if i in Basic._constructor_postprocessor_mapping:\n                for k, v in Basic._constructor_postprocessor_mapping[i].items():\n                    postprocessors[k].extend([j for j in v if j not in postprocessors[k]])\n            else:\n                postprocessor_mappings = (Basic._constructor_postprocessor_mapping[cls].items() for cls in type(i).mro() if cls in Basic._constructor_postprocessor_mapping)\n                for k, v in chain.from_iterable(postprocessor_mappings):\n                    postprocessors[k].extend([j for j in v if j not in postprocessors[k]])\n        except TypeError:\n            pass\n    for f in postprocessors.get(clsname, []):\n        obj = f(obj)\n    if len(postprocessors) > 0 and obj not in Basic._constructor_postprocessor_mapping:\n        Basic._constructor_postprocessor_mapping[obj] = postprocessors\n    return obj",
    ".sympy.core.basic.py@@Basic._hashable_content": "def _hashable_content(self):\n    return self._args",
    ".sympy.core.add.py@@Add.flatten": "def flatten(cls, seq):\n    from sympy.calculus.util import AccumBounds\n    from sympy.matrices.expressions import MatrixExpr\n    rv = None\n    if len(seq) == 2:\n        a, b = seq\n        if b.is_Rational:\n            a, b = (b, a)\n        if a.is_Rational:\n            if b.is_Mul:\n                rv = ([a, b], [], None)\n        if rv:\n            if all((s.is_commutative for s in rv[0])):\n                return rv\n            return ([], rv[0], None)\n    terms = {}\n    coeff = S.Zero\n    order_factors = []\n    for o in seq:\n        if o.is_Order:\n            for o1 in order_factors:\n                if o1.contains(o):\n                    o = None\n                    break\n            if o is None:\n                continue\n            order_factors = [o] + [o1 for o1 in order_factors if not o.contains(o1)]\n            continue\n        elif o.is_Number:\n            if o is S.NaN or (coeff is S.ComplexInfinity and o.is_finite is False):\n                return ([S.NaN], [], None)\n            if coeff.is_Number:\n                coeff += o\n                if coeff is S.NaN:\n                    return ([S.NaN], [], None)\n            continue\n        elif isinstance(o, AccumBounds):\n            coeff = o.__add__(coeff)\n            continue\n        elif isinstance(o, MatrixExpr):\n            coeff = o.__add__(coeff) if coeff else o\n            continue\n        elif o is S.ComplexInfinity:\n            if coeff.is_finite is False:\n                return ([S.NaN], [], None)\n            coeff = S.ComplexInfinity\n            continue\n        elif o.is_Add:\n            seq.extend(o.args)\n            continue\n        elif o.is_Mul:\n            c, s = o.as_coeff_Mul()\n        elif o.is_Pow:\n            b, e = o.as_base_exp()\n            if b.is_Number and (e.is_Integer or (e.is_Rational and e.is_negative)):\n                seq.append(b ** e)\n                continue\n            c, s = (S.One, o)\n        else:\n            c = S.One\n            s = o\n        if s in terms:\n            terms[s] += c\n            if terms[s] is S.NaN:\n                return ([S.NaN], [], None)\n        else:\n            terms[s] = c\n    newseq = []\n    noncommutative = False\n    for s, c in terms.items():\n        if c is S.Zero:\n            continue\n        elif c is S.One:\n            newseq.append(s)\n        elif s.is_Mul:\n            cs = s._new_rawargs(*(c,) + s.args)\n            newseq.append(cs)\n        elif s.is_Add:\n            newseq.append(Mul(c, s, evaluate=False))\n        else:\n            newseq.append(Mul(c, s))\n        noncommutative = noncommutative or not s.is_commutative\n    if coeff is S.Infinity:\n        newseq = [f for f in newseq if not (f.is_nonnegative or (f.is_real and f.is_finite))]\n    elif coeff is S.NegativeInfinity:\n        newseq = [f for f in newseq if not (f.is_nonpositive or (f.is_real and f.is_finite))]\n    if coeff is S.ComplexInfinity:\n        newseq = [c for c in newseq if not (c.is_finite and c.is_real is not None)]\n    if order_factors:\n        newseq2 = []\n        for t in newseq:\n            for o in order_factors:\n                if o.contains(t):\n                    t = None\n                    break\n            if t is not None:\n                newseq2.append(t)\n        newseq = newseq2 + order_factors\n        for o in order_factors:\n            if o.contains(coeff):\n                coeff = S.Zero\n                break\n    _addsort(newseq)\n    if coeff is not S.Zero:\n        newseq.insert(0, coeff)\n    if noncommutative:\n        return ([], newseq, None)\n    else:\n        return (newseq, [], None)",
    ".sympy.core.mul.py@@Mul.as_coeff_Mul": "def as_coeff_Mul(self, rational=False):\n    coeff, args = (self.args[0], self.args[1:])\n    if coeff.is_Number:\n        if not rational or coeff.is_Rational:\n            if len(args) == 1:\n                return (coeff, args[0])\n            else:\n                return (coeff, self._new_rawargs(*args))\n        elif coeff.is_negative:\n            return (S.NegativeOne, self._new_rawargs(*(-coeff,) + args))\n    return (S.One, self)",
    ".sympy.core.numbers.py@@Integer.__add__": "def __add__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, integer_types):\n            return Integer(self.p + other)\n        elif isinstance(other, Integer):\n            return Integer(self.p + other.p)\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.q + other.p, other.q, 1)\n        return Rational.__add__(self, other)\n    else:\n        return Add(self, other)",
    ".sympy.core.add.py@@_addsort": "def _addsort(args):\n    args.sort(key=_args_sortkey)",
    ".sympy.core.expr.py@@Expr.is_polynomial": "def is_polynomial(self, *syms):\n    if syms:\n        syms = set(map(sympify, syms))\n    else:\n        syms = self.free_symbols\n    if syms.intersection(self.free_symbols) == set([]):\n        return True\n    else:\n        return self._eval_is_polynomial(syms)",
    ".sympy.core.power.py@@Pow._eval_is_polynomial": "def _eval_is_polynomial(self, syms):\n    if self.exp.has(*syms):\n        return False\n    if self.base.has(*syms):\n        return bool(self.base._eval_is_polynomial(syms) and self.exp.is_Integer and (self.exp >= 0))\n    else:\n        return True",
    ".sympy.core.power.py@@Pow.exp": "def exp(self):\n    return self._args[1]",
    ".sympy.core.basic.py@@Basic._has_matcher": "def _has_matcher(self):\n    return lambda other: self == other",
    ".sympy.core.power.py@@Pow.base": "def base(self):\n    return self._args[0]",
    ".sympy.core.expr.py@@AtomicExpr._eval_is_polynomial": "def _eval_is_polynomial(self, syms):\n    return True",
    ".sympy.core.numbers.py@@Integer.__ge__": "def __ge__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s >= %s' % (self, other))\n    if other.is_Integer:\n        return _sympify(self.p >= other.p)\n    return Rational.__ge__(self, other)",
    ".sympy.logic.boolalg.py@@BooleanTrue.__nonzero__": "def __nonzero__(self):\n    return True",
    ".sympy.core.basic.py@@Basic.as_poly": "def as_poly(self, *gens, **args):\n    from sympy.polys import Poly, PolynomialError\n    try:\n        poly = Poly(self, *gens, **args)\n        if not poly.is_Poly:\n            return None\n        else:\n            return poly\n    except PolynomialError:\n        return None",
    ".sympy.polys.polytools.py@@Poly.__new__": "def __new__(cls, rep, *gens, **args):\n    opt = options.build_options(gens, args)\n    if 'order' in opt:\n        raise NotImplementedError(\"'order' keyword is not implemented yet\")\n    if iterable(rep, exclude=str):\n        if isinstance(rep, dict):\n            return cls._from_dict(rep, opt)\n        else:\n            return cls._from_list(list(rep), opt)\n    else:\n        rep = sympify(rep)\n        if rep.is_Poly:\n            return cls._from_poly(rep, opt)\n        else:\n            return cls._from_expr(rep, opt)",
    ".sympy.polys.polyoptions.py@@build_options": "def build_options(gens, args=None):\n    if args is None:\n        gens, args = ((), gens)\n    if len(args) != 1 or 'opt' not in args or gens:\n        return Options(gens, args)\n    else:\n        return args['opt']",
    ".sympy.polys.polyoptions.py@@Options.__init__": "def __init__(self, gens, args, flags=None, strict=False):\n    dict.__init__(self)\n    if gens and args.get('gens', ()):\n        raise OptionError(\"both '*gens' and keyword argument 'gens' supplied\")\n    elif gens:\n        args = dict(args)\n        args['gens'] = gens\n    defaults = args.pop('defaults', {})\n\n    def preprocess_options(args):\n        for option, value in args.items():\n            try:\n                cls = self.__options__[option]\n            except KeyError:\n                raise OptionError(\"'%s' is not a valid option\" % option)\n            if issubclass(cls, Flag):\n                if flags is None or option not in flags:\n                    if strict:\n                        raise OptionError(\"'%s' flag is not allowed in this context\" % option)\n            if value is not None:\n                self[option] = cls.preprocess(value)\n    preprocess_options(args)\n    for key, value in dict(defaults).items():\n        if key in self:\n            del defaults[key]\n        else:\n            for option in self.keys():\n                cls = self.__options__[option]\n                if key in cls.excludes:\n                    del defaults[key]\n                    break\n    preprocess_options(defaults)\n    for option in self.keys():\n        cls = self.__options__[option]\n        for require_option in cls.requires:\n            if self.get(require_option) is None:\n                raise OptionError(\"'%s' option is only allowed together with '%s'\" % (option, require_option))\n        for exclude_option in cls.excludes:\n            if self.get(exclude_option) is not None:\n                raise OptionError(\"'%s' option is not allowed together with '%s'\" % (option, exclude_option))\n    for option in self.__order__:\n        self.__options__[option].postprocess(self)",
    ".sympy.polys.polyoptions.py@@Options.preprocess_options": "def preprocess_options(args):\n    for option, value in args.items():\n        try:\n            cls = self.__options__[option]\n        except KeyError:\n            raise OptionError(\"'%s' is not a valid option\" % option)\n        if issubclass(cls, Flag):\n            if flags is None or option not in flags:\n                if strict:\n                    raise OptionError(\"'%s' flag is not allowed in this context\" % option)\n        if value is not None:\n            self[option] = cls.preprocess(value)",
    ".sympy.polys.polyoptions.py@@Gens.preprocess": "def preprocess(cls, gens):\n    if isinstance(gens, Basic):\n        gens = (gens,)\n    elif len(gens) == 1 and hasattr(gens[0], '__iter__'):\n        gens = gens[0]\n    if gens == (None,):\n        gens = ()\n    elif has_dups(gens):\n        raise GeneratorsError('duplicated generators: %s' % str(gens))\n    elif any((gen.is_commutative is False for gen in gens)):\n        raise GeneratorsError('non-commutative generators: %s' % str(gens))\n    return tuple(gens)",
    ".sympy.core.sympify.py@@SympifyError.__init__": "def __init__(self, expr, base_exc=None):\n    self.expr = expr\n    self.base_exc = base_exc",
    ".sympy.utilities.iterables.py@@has_dups": "def has_dups(seq):\n    from sympy.core.containers import Dict\n    from sympy.sets.sets import Set\n    if isinstance(seq, (dict, set, Dict, Set)):\n        return False\n    uniq = set()\n    return any((True for s in seq if s in uniq or uniq.add(s)))",
    ".sympy.polys.polyoptions.py@@Option.postprocess": "def postprocess(cls, options):\n    pass",
    ".sympy.polys.polyoptions.py@@Extension.postprocess": "def postprocess(cls, options):\n    if 'extension' in options and options['extension'] is not True:\n        options['domain'] = sympy.polys.domains.QQ.algebraic_field(*options['extension'])",
    ".sympy.polys.polyoptions.py@@Gaussian.postprocess": "def postprocess(cls, options):\n    if 'gaussian' in options and options['gaussian'] is True:\n        options['extension'] = set([S.ImaginaryUnit])\n        Extension.postprocess(options)",
    ".sympy.polys.polyoptions.py@@Domain.postprocess": "def postprocess(cls, options):\n    if 'gens' in options and 'domain' in options and options['domain'].is_Composite and set(options['domain'].symbols) & set(options['gens']):\n        raise GeneratorsError('ground domain and generators interfere together')\n    elif ('gens' not in options or not options['gens']) and 'domain' in options and (options['domain'] == sympy.polys.domains.EX):\n        raise GeneratorsError('you have to provide generators because EX domain was requested')",
    ".sympy.polys.polyoptions.py@@Auto.postprocess": "def postprocess(cls, options):\n    if ('domain' in options or 'field' in options) and 'auto' not in options:\n        options['auto'] = False",
    ".sympy.polys.polyoptions.py@@Modulus.postprocess": "def postprocess(cls, options):\n    if 'modulus' in options:\n        modulus = options['modulus']\n        symmetric = options.get('symmetric', True)\n        options['domain'] = sympy.polys.domains.FF(modulus, symmetric)",
    ".sympy.polys.polyoptions.py@@Split.postprocess": "def postprocess(cls, options):\n    if 'split' in options:\n        raise NotImplementedError(\"'split' option is not implemented yet\")",
    ".sympy.core.compatibility.py@@iterable": "def iterable(i, exclude=(string_types, dict, NotIterable)):\n    if hasattr(i, '_iterable'):\n        return i._iterable\n    try:\n        iter(i)\n    except TypeError:\n        return False\n    if exclude:\n        return not isinstance(i, exclude)\n    return True",
    ".sympy.polys.polytools.py@@Poly._from_expr": "def _from_expr(cls, rep, opt):\n    rep, opt = _dict_from_expr(rep, opt)\n    return cls._from_dict(rep, opt)",
    ".sympy.polys.polyutils.py@@_dict_from_expr": "def _dict_from_expr(expr, opt):\n    if expr.is_commutative is False:\n        raise PolynomialError('non-commutative expressions are not supported')\n\n    def _is_expandable_pow(expr):\n        return expr.is_Pow and expr.exp.is_positive and expr.exp.is_Integer and expr.base.is_Add\n    if opt.expand is not False:\n        if not isinstance(expr, Expr):\n            raise PolynomialError('expression must be of type Expr')\n        expr = expr.expand()\n        while any((_is_expandable_pow(i) or (i.is_Mul and any((_is_expandable_pow(j) for j in i.args))) for i in Add.make_args(expr))):\n            expr = expand_multinomial(expr)\n        while any((i.is_Mul and any((j.is_Add for j in i.args)) for i in Add.make_args(expr))):\n            expr = expand_mul(expr)\n    if opt.gens:\n        rep, gens = _dict_from_expr_if_gens(expr, opt)\n    else:\n        rep, gens = _dict_from_expr_no_gens(expr, opt)\n    return (rep, opt.clone({'gens': gens}))",
    ".sympy.polys.polyoptions.py@@OptionType.getter": "def getter(self):\n    try:\n        return self[cls.option]\n    except KeyError:\n        return cls.default()",
    ".sympy.polys.polyoptions.py@@Expand.default": "def default(cls):\n    return True",
    ".sympy.core.expr.py@@Expr.expand": "def expand(self, deep=True, modulus=None, power_base=True, power_exp=True, mul=True, log=True, multinomial=True, basic=True, **hints):\n    from sympy.simplify.radsimp import fraction\n    hints.update(power_base=power_base, power_exp=power_exp, mul=mul, log=log, multinomial=multinomial, basic=basic)\n    expr = self\n    if hints.pop('frac', False):\n        n, d = [a.expand(deep=deep, modulus=modulus, **hints) for a in fraction(self)]\n        return n / d\n    elif hints.pop('denom', False):\n        n, d = fraction(self)\n        return n / d.expand(deep=deep, modulus=modulus, **hints)\n    elif hints.pop('numer', False):\n        n, d = fraction(self)\n        return n.expand(deep=deep, modulus=modulus, **hints) / d\n\n    def _expand_hint_key(hint):\n        if hint == 'mul':\n            return 'mulz'\n        return hint\n    for hint in sorted(hints.keys(), key=_expand_hint_key):\n        use_hint = hints[hint]\n        if use_hint:\n            hint = '_eval_expand_' + hint\n            expr, hit = Expr._expand_hint(expr, hint, deep=deep, **hints)\n    while True:\n        was = expr\n        if hints.get('multinomial', False):\n            expr, _ = Expr._expand_hint(expr, '_eval_expand_multinomial', deep=deep, **hints)\n        if hints.get('mul', False):\n            expr, _ = Expr._expand_hint(expr, '_eval_expand_mul', deep=deep, **hints)\n        if hints.get('log', False):\n            expr, _ = Expr._expand_hint(expr, '_eval_expand_log', deep=deep, **hints)\n        if expr == was:\n            break\n    if modulus is not None:\n        modulus = sympify(modulus)\n        if not modulus.is_Integer or modulus <= 0:\n            raise ValueError('modulus must be a positive integer, got %s' % modulus)\n        terms = []\n        for term in Add.make_args(expr):\n            coeff, tail = term.as_coeff_Mul(rational=True)\n            coeff %= modulus\n            if coeff:\n                terms.append(coeff * tail)\n        expr = Add(*terms)\n    return expr",
    ".sympy.core.expr.py@@Expr._expand_hint_key": "def _expand_hint_key(hint):\n    if hint == 'mul':\n        return 'mulz'\n    return hint",
    ".sympy.core.expr.py@@Expr._expand_hint": "def _expand_hint(expr, hint, deep=True, **hints):\n    hit = False\n    if deep and getattr(expr, 'args', ()) and (not expr.is_Atom):\n        sargs = []\n        for arg in expr.args:\n            arg, arghit = Expr._expand_hint(arg, hint, **hints)\n            hit |= arghit\n            sargs.append(arg)\n        if hit:\n            expr = expr.func(*sargs)\n    if hasattr(expr, hint):\n        newexpr = getattr(expr, hint)(**hints)\n        if newexpr != expr:\n            return (newexpr, True)\n    return (expr, hit)",
    ".sympy.core.power.py@@Pow._eval_expand_multinomial": "def _eval_expand_multinomial(self, **hints):\n    base, exp = self.args\n    result = self\n    if exp.is_Rational and exp.p > 0 and base.is_Add:\n        if not exp.is_Integer:\n            n = Integer(exp.p // exp.q)\n            if not n:\n                return result\n            else:\n                radical, result = (self.func(base, exp - n), [])\n                expanded_base_n = self.func(base, n)\n                if expanded_base_n.is_Pow:\n                    expanded_base_n = expanded_base_n._eval_expand_multinomial()\n                for term in Add.make_args(expanded_base_n):\n                    result.append(term * radical)\n                return Add(*result)\n        n = int(exp)\n        if base.is_commutative:\n            order_terms, other_terms = ([], [])\n            for b in base.args:\n                if b.is_Order:\n                    order_terms.append(b)\n                else:\n                    other_terms.append(b)\n            if order_terms:\n                f = Add(*other_terms)\n                o = Add(*order_terms)\n                if n == 2:\n                    return expand_multinomial(f ** n, deep=False) + n * f * o\n                else:\n                    g = expand_multinomial(f ** (n - 1), deep=False)\n                    return expand_mul(f * g, deep=False) + n * g * o\n            if base.is_number:\n                a, b = base.as_real_imag()\n                if a.is_Rational and b.is_Rational:\n                    if not a.is_Integer:\n                        if not b.is_Integer:\n                            k = self.func(a.q * b.q, n)\n                            a, b = (a.p * b.q, a.q * b.p)\n                        else:\n                            k = self.func(a.q, n)\n                            a, b = (a.p, a.q * b)\n                    elif not b.is_Integer:\n                        k = self.func(b.q, n)\n                        a, b = (a * b.q, b.p)\n                    else:\n                        k = 1\n                    a, b, c, d = (int(a), int(b), 1, 0)\n                    while n:\n                        if n & 1:\n                            c, d = (a * c - b * d, b * c + a * d)\n                            n -= 1\n                        a, b = (a * a - b * b, 2 * a * b)\n                        n //= 2\n                    I = S.ImaginaryUnit\n                    if k == 1:\n                        return c + I * d\n                    else:\n                        return Integer(c) / k + I * d / k\n            p = other_terms\n            from sympy import multinomial_coefficients\n            from sympy.polys.polyutils import basic_from_dict\n            expansion_dict = multinomial_coefficients(len(p), n)\n            return basic_from_dict(expansion_dict, *p)\n        elif n == 2:\n            return Add(*[f * g for f in base.args for g in base.args])\n        else:\n            multi = (base ** (n - 1))._eval_expand_multinomial()\n            if multi.is_Add:\n                return Add(*[f * g for f in base.args for g in multi.args])\n            else:\n                return Add(*[f * multi for f in base.args])\n    elif exp.is_Rational and exp.p < 0 and base.is_Add and (abs(exp.p) > exp.q):\n        return 1 / self.func(base, -exp)._eval_expand_multinomial()\n    elif exp.is_Add and base.is_Number:\n        coeff, tail = (S.One, S.Zero)\n        for term in exp.args:\n            if term.is_Number:\n                coeff *= self.func(base, term)\n            else:\n                tail += term\n        return coeff * self.func(base, tail)\n    else:\n        return result",
    ".sympy.core.basic.py@@Basic.__ne__": "def __ne__(self, other):\n    return not self == other",
    ".sympy.core.power.py@@Pow._eval_expand_power_base": "def _eval_expand_power_base(self, **hints):\n    force = hints.get('force', False)\n    b = self.base\n    e = self.exp\n    if not b.is_Mul:\n        return self\n    cargs, nc = b.args_cnc(split_1=False)\n    if nc:\n        nc = [i._eval_expand_power_base(**hints) if hasattr(i, '_eval_expand_power_base') else i for i in nc]\n        if e.is_Integer:\n            if e.is_positive:\n                rv = Mul(*nc * e)\n            else:\n                rv = 1 / Mul(*nc * -e)\n            if cargs:\n                rv *= Mul(*cargs) ** e\n            return rv\n        if not cargs:\n            return self.func(Mul(*nc), e, evaluate=False)\n        nc = [Mul(*nc)]\n    other, maybe_real = sift(cargs, lambda x: x.is_real is False, binary=True)\n\n    def pred(x):\n        if x is S.ImaginaryUnit:\n            return S.ImaginaryUnit\n        polar = x.is_polar\n        if polar:\n            return True\n        if polar is None:\n            return fuzzy_bool(x.is_nonnegative)\n    sifted = sift(maybe_real, pred)\n    nonneg = sifted[True]\n    other += sifted[None]\n    neg = sifted[False]\n    imag = sifted[S.ImaginaryUnit]\n    if imag:\n        I = S.ImaginaryUnit\n        i = len(imag) % 4\n        if i == 0:\n            pass\n        elif i == 1:\n            other.append(I)\n        elif i == 2:\n            if neg:\n                nonn = -neg.pop()\n                if nonn is not S.One:\n                    nonneg.append(nonn)\n            else:\n                neg.append(S.NegativeOne)\n        else:\n            if neg:\n                nonn = -neg.pop()\n                if nonn is not S.One:\n                    nonneg.append(nonn)\n            else:\n                neg.append(S.NegativeOne)\n            other.append(I)\n        del imag\n    if force or e.is_integer:\n        cargs = nonneg + neg + other\n        other = nc\n    else:\n        assert not e.is_Integer\n        if len(neg) > 1:\n            o = S.One\n            if not other and neg[0].is_Number:\n                o *= neg.pop(0)\n            if len(neg) % 2:\n                o = -o\n            for n in neg:\n                nonneg.append(-n)\n            if o is not S.One:\n                other.append(o)\n        elif neg and other:\n            if neg[0].is_Number and neg[0] is not S.NegativeOne:\n                other.append(S.NegativeOne)\n                nonneg.append(-neg[0])\n            else:\n                other.extend(neg)\n        else:\n            other.extend(neg)\n        del neg\n        cargs = nonneg\n        other += nc\n    rv = S.One\n    if cargs:\n        rv *= Mul(*[self.func(b, e, evaluate=False) for b in cargs])\n    if other:\n        rv *= self.func(Mul(*other), e, evaluate=False)\n    return rv",
    ".sympy.core.power.py@@Pow._eval_expand_power_exp": "def _eval_expand_power_exp(self, **hints):\n    b = self.base\n    e = self.exp\n    if e.is_Add and e.is_commutative:\n        expr = []\n        for x in e.args:\n            expr.append(self.func(self.base, x))\n        return Mul(*expr)\n    return self.func(b, e)",
    ".sympy.core.basic.py@@Basic.func": "def func(self):\n    return self.__class__",
    ".sympy.core.power.py@@Pow.__new__": "def __new__(cls, b, e, evaluate=None):\n    if evaluate is None:\n        evaluate = global_evaluate[0]\n    from sympy.functions.elementary.exponential import exp_polar\n    b = _sympify(b)\n    e = _sympify(e)\n    if evaluate:\n        if e is S.ComplexInfinity:\n            return S.NaN\n        if e is S.Zero:\n            return S.One\n        elif e is S.One:\n            return b\n        elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and e.is_integer and _coeff_isneg(b):\n            if e.is_even:\n                b = -b\n            elif e.is_odd:\n                return -Pow(-b, e)\n        if S.NaN in (b, e):\n            return S.NaN\n        elif b is S.One:\n            if abs(e).is_infinite:\n                return S.NaN\n            return S.One\n        else:\n            if not e.is_Atom and b is not S.Exp1 and (not isinstance(b, exp_polar)):\n                from sympy import numer, denom, log, sign, im, factor_terms\n                c, ex = factor_terms(e, sign=False).as_coeff_Mul()\n                den = denom(ex)\n                if isinstance(den, log) and den.args[0] == b:\n                    return S.Exp1 ** (c * numer(ex))\n                elif den.is_Add:\n                    s = sign(im(b))\n                    if s.is_Number and s and (den == log(-factor_terms(b, sign=False)) + s * S.ImaginaryUnit * S.Pi):\n                        return S.Exp1 ** (c * numer(ex))\n            obj = b._eval_power(e)\n            if obj is not None:\n                return obj\n    obj = Expr.__new__(cls, b, e)\n    obj = cls._exec_constructor_postprocessors(obj)\n    if not isinstance(obj, Pow):\n        return obj\n    obj.is_commutative = b.is_commutative and e.is_commutative\n    return obj",
    ".sympy.core.function.py@@_coeff_isneg": "def _coeff_isneg(a):\n    if a.is_Mul:\n        a = a.args[0]\n    return a.is_Number and a.is_negative",
    ".sympy.core.numbers.py@@NaN.__hash__": "def __hash__(self):\n    return super(NaN, self).__hash__()",
    ".sympy.core.numbers.py@@Number.__hash__": "def __hash__(self):\n    return super(Number, self).__hash__()",
    ".sympy.core.numbers.py@@Integer.__eq__": "def __eq__(self, other):\n    if isinstance(other, integer_types):\n        return self.p == other\n    elif isinstance(other, Integer):\n        return self.p == other.p\n    return Rational.__eq__(self, other)",
    ".sympy.core.numbers.py@@Rational.__eq__": "def __eq__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if other.is_NumberSymbol:\n        if other.is_irrational:\n            return False\n        return other.__eq__(self)\n    if other.is_Number:\n        if other.is_Rational:\n            return self.p == other.p and self.q == other.q\n        if other.is_Float:\n            return mlib.mpf_eq(self._as_mpf_val(other._prec), other._mpf_)\n    return False",
    ".sympy.core.expr.py@@Expr._eval_power": "def _eval_power(self, other):\n    return None",
    ".sympy.core.operations.py@@AssocOp.make_args": "def make_args(cls, expr):\n    if isinstance(expr, cls):\n        return expr.args\n    else:\n        return (sympify(expr),)",
    ".sympy.polys.polyutils.py@@_is_expandable_pow": "def _is_expandable_pow(expr):\n    return expr.is_Pow and expr.exp.is_positive and expr.exp.is_Integer and expr.base.is_Add",
    ".sympy.core.assumptions.py@@StdFactKB.copy": "def copy(self):\n    return self.__class__(self)",
    ".sympy.core.assumptions.py@@StdFactKB.__init__": "def __init__(self, facts=None):\n    if not facts:\n        self._generator = {}\n    elif not isinstance(facts, FactKB):\n        self._generator = facts.copy()\n    else:\n        self._generator = facts.generator\n    if facts:\n        self.deduce_all_facts(facts)",
    ".sympy.core.assumptions.py@@StdFactKB.generator": "def generator(self):\n    return self._generator.copy()",
    ".sympy.core.facts.py@@FactKB.deduce_all_facts": "def deduce_all_facts(self, facts):\n    full_implications = self.rules.full_implications\n    beta_triggers = self.rules.beta_triggers\n    beta_rules = self.rules.beta_rules\n    if isinstance(facts, dict):\n        facts = facts.items()\n    while facts:\n        beta_maytrigger = set()\n        for k, v in facts:\n            if not self._tell(k, v) or v is None:\n                continue\n            for key, value in full_implications[k, v]:\n                self._tell(key, value)\n            beta_maytrigger.update(beta_triggers[k, v])\n        facts = []\n        for bidx in beta_maytrigger:\n            bcond, bimpl = beta_rules[bidx]\n            if all((self.get(k) is v for k, v in bcond)):\n                facts.append(bimpl)",
    ".sympy.core.facts.py@@FactKB._tell": "def _tell(self, k, v):\n    if k in self and self[k] is not None:\n        if self[k] == v:\n            return False\n        else:\n            raise InconsistentAssumptions(self, k, v)\n    else:\n        self[k] = v\n        return True",
    ".sympy.core.assumptions.py@@_ask": "def _ask(fact, obj):\n    assumptions = obj._assumptions\n    handler_map = obj._prop_handler\n    assumptions._tell(fact, None)\n    try:\n        evaluate = handler_map[fact]\n    except KeyError:\n        pass\n    else:\n        a = evaluate(obj)\n        if a is not None:\n            assumptions.deduce_all_facts(((fact, a),))\n            return a\n    prereq = list(_assume_rules.prereq[fact])\n    shuffle(prereq)\n    for pk in prereq:\n        if pk in assumptions:\n            continue\n        if pk in handler_map:\n            _ask(pk, obj)\n            ret_val = assumptions.get(fact)\n            if ret_val is not None:\n                return ret_val\n    return None",
    ".sympy.core.numbers.py@@Rational._eval_is_positive": "def _eval_is_positive(self):\n    return self.p > 0",
    ".sympy.polys.polyutils.py@@_dict_from_expr_if_gens": "def _dict_from_expr_if_gens(expr, opt):\n    (poly,), gens = _parallel_dict_from_expr_if_gens((expr,), opt)\n    return (poly, gens)",
    ".sympy.polys.polyutils.py@@_parallel_dict_from_expr_if_gens": "def _parallel_dict_from_expr_if_gens(exprs, opt):\n    k, indices = (len(opt.gens), {})\n    for i, g in enumerate(opt.gens):\n        indices[g] = i\n    polys = []\n    for expr in exprs:\n        poly = {}\n        if expr.is_Equality:\n            expr = expr.lhs - expr.rhs\n        for term in Add.make_args(expr):\n            coeff, monom = ([], [0] * k)\n            for factor in Mul.make_args(term):\n                if not _not_a_coeff(factor) and factor.is_Number:\n                    coeff.append(factor)\n                else:\n                    try:\n                        if opt.series is False:\n                            base, exp = decompose_power(factor)\n                            if exp < 0:\n                                exp, base = (-exp, Pow(base, -S.One))\n                        else:\n                            base, exp = decompose_power_rat(factor)\n                        monom[indices[base]] = exp\n                    except KeyError:\n                        if not factor.free_symbols.intersection(opt.gens):\n                            coeff.append(factor)\n                        else:\n                            raise PolynomialError('%s contains an element of the generators set' % factor)\n            monom = tuple(monom)\n            if monom in poly:\n                poly[monom] += Mul(*coeff)\n            else:\n                poly[monom] = Mul(*coeff)\n        polys.append(poly)\n    return (polys, opt.gens)",
    ".sympy.polys.polyutils.py@@_not_a_coeff": "def _not_a_coeff(expr):\n    return expr in [S.NaN, S.Infinity, S.NegativeInfinity, S.ComplexInfinity]",
    ".sympy.core.numbers.py@@NaN.__eq__": "def __eq__(self, other):\n    return other is S.NaN",
    ".sympy.core.numbers.py@@Infinity.__eq__": "def __eq__(self, other):\n    return other is S.Infinity",
    ".sympy.core.numbers.py@@NegativeInfinity.__eq__": "def __eq__(self, other):\n    return other is S.NegativeInfinity",
    ".sympy.polys.polyoptions.py@@Series.default": "def default(cls):\n    return False",
    ".sympy.core.exprtools.py@@decompose_power": "def decompose_power(expr):\n    base, exp = expr.as_base_exp()\n    if exp.is_Number:\n        if exp.is_Rational:\n            if not exp.is_Integer:\n                base = Pow(base, Rational(1, exp.q))\n            exp = exp.p\n        else:\n            base, exp = (expr, 1)\n    else:\n        exp, tail = exp.as_coeff_Mul(rational=True)\n        if exp is S.NegativeOne:\n            base, exp = (Pow(base, tail), -1)\n        elif exp is not S.One:\n            tail = _keep_coeff(Rational(1, exp.q), tail)\n            base, exp = (Pow(base, tail), exp.p)\n        else:\n            base, exp = (expr, 1)\n    return (base, exp)",
    ".sympy.core.power.py@@Pow.as_base_exp": "def as_base_exp(self):\n    b, e = self.args\n    if b.is_Rational and b.p == 1 and (b.q != 1):\n        return (Integer(b.q), -e)\n    return (b, e)",
    ".sympy.polys.polyoptions.py@@Options.clone": "def clone(self, updates={}):\n    obj = dict.__new__(self.__class__)\n    for option, value in self.items():\n        obj[option] = value\n    for option, value in updates.items():\n        obj[option] = value\n    return obj",
    ".sympy.polys.polytools.py@@Poly._from_dict": "def _from_dict(cls, rep, opt):\n    gens = opt.gens\n    if not gens:\n        raise GeneratorsNeeded(\"can't initialize from 'dict' without generators\")\n    level = len(gens) - 1\n    domain = opt.domain\n    if domain is None:\n        domain, rep = construct_domain(rep, opt=opt)\n    else:\n        for monom, coeff in rep.items():\n            rep[monom] = domain.convert(coeff)\n    return cls.new(DMP.from_dict(rep, level, domain), *gens)",
    ".sympy.polys.polyoptions.py@@Option.default": "def default(cls):\n    return None",
    ".sympy.polys.constructor.py@@construct_domain": "def construct_domain(obj, **args):\n    opt = build_options(args)\n    if hasattr(obj, '__iter__'):\n        if isinstance(obj, dict):\n            if not obj:\n                monoms, coeffs = ([], [])\n            else:\n                monoms, coeffs = list(zip(*list(obj.items())))\n        else:\n            coeffs = obj\n    else:\n        coeffs = [obj]\n    coeffs = list(map(sympify, coeffs))\n    result = _construct_simple(coeffs, opt)\n    if result is not None:\n        if result is not False:\n            domain, coeffs = result\n        else:\n            domain, coeffs = _construct_expression(coeffs, opt)\n    else:\n        if opt.composite is False:\n            result = None\n        else:\n            result = _construct_composite(coeffs, opt)\n        if result is not None:\n            domain, coeffs = result\n        else:\n            domain, coeffs = _construct_expression(coeffs, opt)\n    if hasattr(obj, '__iter__'):\n        if isinstance(obj, dict):\n            return (domain, dict(list(zip(monoms, coeffs))))\n        else:\n            return (domain, coeffs)\n    else:\n        return (domain, coeffs[0])",
    ".sympy.polys.constructor.py@@_construct_simple": "def _construct_simple(coeffs, opt):\n    result, rationals, reals, algebraics = ({}, False, False, False)\n    if opt.extension is True:\n        is_algebraic = lambda coeff: coeff.is_number and coeff.is_algebraic\n    else:\n        is_algebraic = lambda coeff: False\n    for coeff in coeffs:\n        if coeff.is_Rational:\n            if not coeff.is_Integer:\n                rationals = True\n        elif coeff.is_Float:\n            if not algebraics:\n                reals = True\n            else:\n                return False\n        elif is_algebraic(coeff):\n            if not reals:\n                algebraics = True\n            else:\n                return False\n        else:\n            return None\n    if algebraics:\n        domain, result = _construct_algebraic(coeffs, opt)\n    else:\n        if reals:\n            max_prec = max([c._prec for c in coeffs])\n            domain = RealField(prec=max_prec)\n        elif opt.field or rationals:\n            domain = QQ\n        else:\n            domain = ZZ\n        result = []\n        for coeff in coeffs:\n            result.append(domain.from_sympy(coeff))\n    return (domain, result)",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.from_sympy": "def from_sympy(self, a):\n    if a.is_Integer:\n        return PythonInteger(a.p)\n    elif a.is_Float and int(a) == a:\n        return PythonInteger(int(a))\n    else:\n        raise CoercionFailed('expected an integer, got %s' % a)",
    ".sympy.polys.polyclasses.py@@DMP.from_dict": "def from_dict(cls, rep, lev, dom):\n    return cls(dmp_from_dict(rep, lev, dom), dom, lev)",
    ".sympy.polys.densebasic.py@@dmp_from_dict": "def dmp_from_dict(f, u, K):\n    if not u:\n        return dup_from_dict(f, K)\n    if not f:\n        return dmp_zero(u)\n    coeffs = {}\n    for monom, coeff in f.items():\n        head, tail = (monom[0], monom[1:])\n        if head in coeffs:\n            coeffs[head][tail] = coeff\n        else:\n            coeffs[head] = {tail: coeff}\n    n, v, h = (max(coeffs.keys()), u - 1, [])\n    for k in range(n, -1, -1):\n        coeff = coeffs.get(k)\n        if coeff is not None:\n            h.append(dmp_from_dict(coeff, v, K))\n        else:\n            h.append(dmp_zero(v))\n    return dmp_strip(h, u)",
    ".sympy.polys.densebasic.py@@dup_from_dict": "def dup_from_dict(f, K):\n    if not f:\n        return []\n    n, h = (max(f.keys()), [])\n    if type(n) is int:\n        for k in range(n, -1, -1):\n            h.append(f.get(k, K.zero))\n    else:\n        n, = n\n        for k in range(n, -1, -1):\n            h.append(f.get((k,), K.zero))\n    return dup_strip(h)",
    ".sympy.polys.densebasic.py@@dup_strip": "def dup_strip(f):\n    if not f or f[0]:\n        return f\n    i = 0\n    for cf in f:\n        if cf:\n            break\n        else:\n            i += 1\n    return f[i:]",
    ".sympy.polys.polyclasses.py@@DMP.__init__": "def __init__(self, rep, dom, lev=None, ring=None):\n    if lev is not None:\n        if type(rep) is dict:\n            rep = dmp_from_dict(rep, lev, dom)\n        elif type(rep) is not list:\n            rep = dmp_ground(dom.convert(rep), lev)\n    else:\n        rep, lev = dmp_validate(rep)\n    self.rep = rep\n    self.lev = lev\n    self.dom = dom\n    self.ring = ring",
    ".sympy.polys.polytools.py@@Poly.new": "def new(cls, rep, *gens):\n    if not isinstance(rep, DMP):\n        raise PolynomialError('invalid polynomial representation: %s' % rep)\n    elif rep.lev != len(gens) - 1:\n        raise PolynomialError('invalid arguments: %s, %s' % (rep, gens))\n    obj = Basic.__new__(cls)\n    obj.rep = rep\n    obj.gens = gens\n    return obj",
    ".sympy.polys.polyroots.py@@roots": "def roots(f, *gens, **flags):\n    from sympy.polys.polytools import to_rational_coeffs\n    flags = dict(flags)\n    auto = flags.pop('auto', True)\n    cubics = flags.pop('cubics', True)\n    trig = flags.pop('trig', False)\n    quartics = flags.pop('quartics', True)\n    quintics = flags.pop('quintics', False)\n    multiple = flags.pop('multiple', False)\n    filter = flags.pop('filter', None)\n    predicate = flags.pop('predicate', None)\n    if isinstance(f, list):\n        if gens:\n            raise ValueError('redundant generators given')\n        x = Dummy('x')\n        poly, i = ({}, len(f) - 1)\n        for coeff in f:\n            poly[i], i = (sympify(coeff), i - 1)\n        f = Poly(poly, x, field=True)\n    else:\n        try:\n            f = Poly(f, *gens, **flags)\n            if f.length == 2 and f.degree() != 1:\n                n = f.degree()\n                npow_bases = []\n                expr = f.as_expr()\n                con = expr.as_independent(*gens)[0]\n                for p in Mul.make_args(con):\n                    if p.is_Pow and (not p.exp % n):\n                        npow_bases.append(p.base ** (p.exp / n))\n                    else:\n                        other.append(p)\n                    if npow_bases:\n                        b = Mul(*npow_bases)\n                        B = Dummy()\n                        d = roots(Poly(expr - con + B ** n * Mul(*others), *gens, **flags), *gens, **flags)\n                        rv = {}\n                        for k, v in d.items():\n                            rv[k.subs(B, b)] = v\n                        return rv\n        except GeneratorsNeeded:\n            if multiple:\n                return []\n            else:\n                return {}\n        if f.is_multivariate:\n            raise PolynomialError('multivariate polynomials are not supported')\n\n    def _update_dict(result, root, k):\n        if root in result:\n            result[root] += k\n        else:\n            result[root] = k\n\n    def _try_decompose(f):\n        factors, roots = (f.decompose(), [])\n        for root in _try_heuristics(factors[0]):\n            roots.append(root)\n        for factor in factors[1:]:\n            previous, roots = (list(roots), [])\n            for root in previous:\n                g = factor - Poly(root, f.gen)\n                for root in _try_heuristics(g):\n                    roots.append(root)\n        return roots\n\n    def _try_heuristics(f):\n        if f.is_ground:\n            return []\n        if f.is_monomial:\n            return [S(0)] * f.degree()\n        if f.length() == 2:\n            if f.degree() == 1:\n                return list(map(cancel, roots_linear(f)))\n            else:\n                return roots_binomial(f)\n        result = []\n        for i in [-1, 1]:\n            if not f.eval(i):\n                f = f.quo(Poly(f.gen - i, f.gen))\n                result.append(i)\n                break\n        n = f.degree()\n        if n == 1:\n            result += list(map(cancel, roots_linear(f)))\n        elif n == 2:\n            result += list(map(cancel, roots_quadratic(f)))\n        elif f.is_cyclotomic:\n            result += roots_cyclotomic(f)\n        elif n == 3 and cubics:\n            result += roots_cubic(f, trig=trig)\n        elif n == 4 and quartics:\n            result += roots_quartic(f)\n        elif n == 5 and quintics:\n            result += roots_quintic(f)\n        return result\n    (k,), f = f.terms_gcd()\n    if not k:\n        zeros = {}\n    else:\n        zeros = {S(0): k}\n    coeff, f = preprocess_roots(f)\n    if auto and f.get_domain().is_Ring:\n        f = f.to_field()\n    rescale_x = None\n    translate_x = None\n    result = {}\n    if not f.is_ground:\n        if not f.get_domain().is_Exact:\n            for r in f.nroots():\n                _update_dict(result, r, 1)\n        elif f.degree() == 1:\n            result[roots_linear(f)[0]] = 1\n        elif f.length() == 2:\n            roots_fun = roots_quadratic if f.degree() == 2 else roots_binomial\n            for r in roots_fun(f):\n                _update_dict(result, r, 1)\n        else:\n            _, factors = Poly(f.as_expr()).factor_list()\n            if len(factors) == 1 and f.degree() == 2:\n                for r in roots_quadratic(f):\n                    _update_dict(result, r, 1)\n            elif len(factors) == 1 and factors[0][1] == 1:\n                if f.get_domain().is_EX:\n                    res = to_rational_coeffs(f)\n                    if res:\n                        if res[0] is None:\n                            translate_x, f = res[2:]\n                        else:\n                            rescale_x, f = (res[1], res[-1])\n                        result = roots(f)\n                        if not result:\n                            for root in _try_decompose(f):\n                                _update_dict(result, root, 1)\n                    else:\n                        for r in _try_heuristics(f):\n                            _update_dict(result, r, 1)\n                else:\n                    for root in _try_decompose(f):\n                        _update_dict(result, root, 1)\n            else:\n                for factor, k in factors:\n                    for r in _try_heuristics(Poly(factor, f.gen, field=True)):\n                        _update_dict(result, r, k)\n    if coeff is not S.One:\n        _result, result = (result, {})\n        for root, k in _result.items():\n            result[coeff * root] = k\n    result.update(zeros)\n    if filter not in [None, 'C']:\n        handlers = {'Z': lambda r: r.is_Integer, 'Q': lambda r: r.is_Rational, 'R': lambda r: r.is_real, 'I': lambda r: r.is_imaginary}\n        try:\n            query = handlers[filter]\n        except KeyError:\n            raise ValueError('Invalid filter: %s' % filter)\n        for zero in dict(result).keys():\n            if not query(zero):\n                del result[zero]\n    if predicate is not None:\n        for zero in dict(result).keys():\n            if not predicate(zero):\n                del result[zero]\n    if rescale_x:\n        result1 = {}\n        for k, v in result.items():\n            result1[k * rescale_x] = v\n        result = result1\n    if translate_x:\n        result1 = {}\n        for k, v in result.items():\n            result1[k + translate_x] = v\n        result = result1\n    if not multiple:\n        return result\n    else:\n        zeros = []\n        for zero in ordered(result):\n            zeros.extend([zero] * result[zero])\n        return zeros",
    ".sympy.polys.polytools.py@@Poly.__hash__": "def __hash__(self):\n    return super(Poly, self).__hash__()",
    ".sympy.polys.polytools.py@@Poly._hashable_content": "def _hashable_content(self):\n    return (self.rep, self.gens)",
    ".sympy.polys.polyclasses.py@@DMP.__hash__": "def __hash__(f):\n    return hash((f.__class__.__name__, f.to_tuple(), f.lev, f.dom, f.ring))",
    ".sympy.polys.polyclasses.py@@DMP.to_tuple": "def to_tuple(f):\n    return dmp_to_tuple(f.rep, f.lev)",
    ".sympy.polys.densebasic.py@@dmp_to_tuple": "def dmp_to_tuple(f, u):\n    if not u:\n        return tuple(f)\n    v = u - 1\n    return tuple((dmp_to_tuple(c, v) for c in f))",
    ".sympy.polys.domains.domain.py@@Domain.__hash__": "def __hash__(self):\n    return hash((self.__class__.__name__, self.dtype))",
    ".sympy.polys.polytools.py@@Poly._from_poly": "def _from_poly(cls, rep, opt):\n    if cls != rep.__class__:\n        rep = cls.new(rep.rep, *rep.gens)\n    gens = opt.gens\n    field = opt.field\n    domain = opt.domain\n    if gens and rep.gens != gens:\n        if set(rep.gens) != set(gens):\n            return cls._from_expr(rep.as_expr(), opt)\n        else:\n            rep = rep.reorder(*gens)\n    if 'domain' in opt and domain:\n        rep = rep.set_domain(domain)\n    elif field is True:\n        rep = rep.to_field()\n    return rep",
    ".sympy.polys.polyoptions.py@@Gens.default": "def default(cls):\n    return ()",
    ".sympy.polys.polytools.py@@Poly.is_multivariate": "def is_multivariate(f):\n    return len(f.gens) != 1",
    ".sympy.polys.polytools.py@@Poly.terms_gcd": "def terms_gcd(f):\n    if hasattr(f.rep, 'terms_gcd'):\n        J, result = f.rep.terms_gcd()\n    else:\n        raise OperationNotSupported(f, 'terms_gcd')\n    return (J, f.per(result))",
    ".sympy.polys.polyclasses.py@@DMP.terms_gcd": "def terms_gcd(f):\n    J, F = dmp_terms_gcd(f.rep, f.lev, f.dom)\n    return (J, f.per(F))",
    ".sympy.polys.densebasic.py@@dmp_terms_gcd": "def dmp_terms_gcd(f, u, K):\n    if dmp_ground_TC(f, u, K) or dmp_zero_p(f, u):\n        return ((0,) * (u + 1), f)\n    F = dmp_to_dict(f, u)\n    G = monomial_min(*list(F.keys()))\n    if all((g == 0 for g in G)):\n        return (G, f)\n    f = {}\n    for monom, coeff in F.items():\n        f[monomial_div(monom, G)] = coeff\n    return (G, dmp_from_dict(f, u, K))",
    ".sympy.polys.densebasic.py@@dmp_ground_TC": "def dmp_ground_TC(f, u, K):\n    while u:\n        f = dmp_TC(f, K)\n        u -= 1\n    return dup_TC(f, K)",
    ".sympy.polys.densebasic.py@@poly_TC": "def poly_TC(f, K):\n    if not f:\n        return K.zero\n    else:\n        return f[-1]",
    ".sympy.polys.densebasic.py@@dmp_zero_p": "def dmp_zero_p(f, u):\n    while u:\n        if len(f) != 1:\n            return False\n        f = f[0]\n        u -= 1\n    return not f",
    ".sympy.polys.densebasic.py@@dmp_to_dict": "def dmp_to_dict(f, u, K=None, zero=False):\n    if not u:\n        return dup_to_dict(f, K, zero=zero)\n    if dmp_zero_p(f, u) and zero:\n        return {(0,) * (u + 1): K.zero}\n    n, v, result = (dmp_degree(f, u), u - 1, {})\n    if n == -oo:\n        n = -1\n    for k in range(0, n + 1):\n        h = dmp_to_dict(f[n - k], v)\n        for exp, coeff in h.items():\n            result[(k,) + exp] = coeff\n    return result",
    ".sympy.polys.densebasic.py@@dup_to_dict": "def dup_to_dict(f, K=None, zero=False):\n    if not f and zero:\n        return {(0,): K.zero}\n    n, result = (len(f) - 1, {})\n    for k in range(0, n + 1):\n        if f[n - k]:\n            result[k,] = f[n - k]\n    return result",
    ".sympy.polys.monomials.py@@monomial_min": "def monomial_min(*monoms):\n    M = list(monoms[0])\n    for N in monoms[1:]:\n        for i, n in enumerate(N):\n            M[i] = min(M[i], n)\n    return tuple(M)",
    ".sympy.polys.monomials.py@@monomial_div": "def monomial_div(A, B):\n    C = monomial_ldiv(A, B)\n    if all((c >= 0 for c in C)):\n        return tuple(C)\n    else:\n        return None",
    ".sympy.polys.monomials.py@@monomial_ldiv": "def monomial_ldiv(A, B):\n    return tuple([a - b for a, b in zip(A, B)])",
    ".sympy.polys.polyclasses.py@@DMP.per": "def per(f, rep, dom=None, kill=False, ring=None):\n    lev = f.lev\n    if kill:\n        if not lev:\n            return rep\n        else:\n            lev -= 1\n    if dom is None:\n        dom = f.dom\n    if ring is None:\n        ring = f.ring\n    return DMP(rep, dom, lev, ring)",
    ".sympy.polys.polytools.py@@Poly.per": "def per(f, rep, gens=None, remove=None):\n    if gens is None:\n        gens = f.gens\n    if remove is not None:\n        gens = gens[:remove] + gens[remove + 1:]\n        if not gens:\n            return f.rep.dom.to_sympy(rep)\n    return f.__class__.new(rep, *gens)",
    ".sympy.polys.polyroots.py@@preprocess_roots": "def preprocess_roots(poly):\n    coeff = S.One\n    try:\n        _, poly = poly.clear_denoms(convert=True)\n    except DomainError:\n        return (coeff, poly)\n    poly = poly.primitive()[1]\n    poly = poly.retract()\n    if poly.get_domain().is_Poly and all((c.is_term for c in poly.rep.coeffs())):\n        poly = poly.inject()\n        strips = list(zip(*poly.monoms()))\n        gens = list(poly.gens[1:])\n        base, strips = (strips[0], strips[1:])\n        for gen, strip in zip(list(gens), strips):\n            reverse = False\n            if strip[0] < strip[-1]:\n                strip = reversed(strip)\n                reverse = True\n            ratio = None\n            for a, b in zip(base, strip):\n                if not a and (not b):\n                    continue\n                elif not a or not b:\n                    break\n                elif b % a != 0:\n                    break\n                else:\n                    _ratio = b // a\n                    if ratio is None:\n                        ratio = _ratio\n                    elif ratio != _ratio:\n                        break\n            else:\n                if reverse:\n                    ratio = -ratio\n                poly = poly.eval(gen, 1)\n                coeff *= gen ** (-ratio)\n                gens.remove(gen)\n        if gens:\n            poly = poly.eject(*gens)\n    if poly.is_univariate and poly.get_domain().is_ZZ:\n        basis = _integer_basis(poly)\n        if basis is not None:\n            n = poly.degree()\n\n            def func(k, coeff):\n                return coeff // basis ** (n - k[0])\n            poly = poly.termwise(func)\n            coeff *= basis\n    return (coeff, poly)",
    ".sympy.polys.polytools.py@@Poly.clear_denoms": "def clear_denoms(self, convert=False):\n    f = self\n    if not f.rep.dom.is_Field:\n        return (S.One, f)\n    dom = f.get_domain()\n    if dom.has_assoc_Ring:\n        dom = f.rep.dom.get_ring()\n    if hasattr(f.rep, 'clear_denoms'):\n        coeff, result = f.rep.clear_denoms()\n    else:\n        raise OperationNotSupported(f, 'clear_denoms')\n    coeff, f = (dom.to_sympy(coeff), f.per(result))\n    if not convert or not dom.has_assoc_Ring:\n        return (coeff, f)\n    else:\n        return (coeff, f.to_ring())",
    ".sympy.polys.polytools.py@@Poly.primitive": "def primitive(f):\n    if hasattr(f.rep, 'primitive'):\n        cont, result = f.rep.primitive()\n    else:\n        raise OperationNotSupported(f, 'primitive')\n    return (f.rep.dom.to_sympy(cont), f.per(result))",
    ".sympy.polys.polyclasses.py@@DMP.primitive": "def primitive(f):\n    cont, F = dmp_ground_primitive(f.rep, f.lev, f.dom)\n    return (cont, f.per(F))",
    ".sympy.polys.densetools.py@@dmp_ground_primitive": "def dmp_ground_primitive(f, u, K):\n    if not u:\n        return dup_primitive(f, K)\n    if dmp_zero_p(f, u):\n        return (K.zero, f)\n    cont = dmp_ground_content(f, u, K)\n    if K.is_one(cont):\n        return (cont, f)\n    else:\n        return (cont, dmp_quo_ground(f, cont, u, K))",
    ".sympy.polys.densetools.py@@dup_primitive": "def dup_primitive(f, K):\n    if not f:\n        return (K.zero, f)\n    cont = dup_content(f, K)\n    if K.is_one(cont):\n        return (cont, f)\n    else:\n        return (cont, dup_quo_ground(f, cont, K))",
    ".sympy.polys.densetools.py@@dup_content": "def dup_content(f, K):\n    from sympy.polys.domains import QQ\n    if not f:\n        return K.zero\n    cont = K.zero\n    if K == QQ:\n        for c in f:\n            cont = K.gcd(cont, c)\n    else:\n        for c in f:\n            cont = K.gcd(cont, c)\n            if K.is_one(cont):\n                break\n    return cont",
    ".sympy.polys.domains.domain.py@@Domain.__eq__": "def __eq__(self, other):\n    return isinstance(other, Domain) and self.dtype == other.dtype",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.gcd": "def gcd(self, a, b):\n    return python_gcd(a, b)",
    ".sympy.polys.domains.domain.py@@Domain.is_one": "def is_one(self, a):\n    return a == self.one",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.to_sympy": "def to_sympy(self, a):\n    return SymPyInteger(a)",
    ".sympy.polys.polytools.py@@Poly.retract": "def retract(f, field=None):\n    dom, rep = construct_domain(f.as_dict(zero=True), field=field, composite=f.domain.is_Composite or None)\n    return f.from_dict(rep, f.gens, domain=dom)",
    ".sympy.polys.polytools.py@@Poly.as_dict": "def as_dict(f, native=False, zero=False):\n    if native:\n        return f.rep.to_dict(zero=zero)\n    else:\n        return f.rep.to_sympy_dict(zero=zero)",
    ".sympy.polys.polyclasses.py@@DMP.to_sympy_dict": "def to_sympy_dict(f, zero=False):\n    rep = dmp_to_dict(f.rep, f.lev, f.dom, zero=zero)\n    for k, v in rep.items():\n        rep[k] = f.dom.to_sympy(v)\n    return rep",
    ".sympy.polys.polytools.py@@Poly.domain": "def domain(self):\n    return self.get_domain()",
    ".sympy.polys.polytools.py@@Poly.get_domain": "def get_domain(f):\n    return f.rep.dom",
    ".sympy.polys.polytools.py@@Poly.from_dict": "def from_dict(cls, rep, *gens, **args):\n    opt = options.build_options(gens, args)\n    return cls._from_dict(rep, opt)",
    ".sympy.polys.polyoptions.py@@Domain.preprocess": "def preprocess(cls, domain):\n    if isinstance(domain, sympy.polys.domains.Domain):\n        return domain\n    elif hasattr(domain, 'to_domain'):\n        return domain.to_domain()\n    elif isinstance(domain, string_types):\n        if domain in ['Z', 'ZZ']:\n            return sympy.polys.domains.ZZ\n        if domain in ['Q', 'QQ']:\n            return sympy.polys.domains.QQ\n        if domain == 'EX':\n            return sympy.polys.domains.EX\n        r = cls._re_realfield.match(domain)\n        if r is not None:\n            _, _, prec = r.groups()\n            if prec is None:\n                return sympy.polys.domains.RR\n            else:\n                return sympy.polys.domains.RealField(int(prec))\n        r = cls._re_complexfield.match(domain)\n        if r is not None:\n            _, _, prec = r.groups()\n            if prec is None:\n                return sympy.polys.domains.CC\n            else:\n                return sympy.polys.domains.ComplexField(int(prec))\n        r = cls._re_finitefield.match(domain)\n        if r is not None:\n            return sympy.polys.domains.FF(int(r.groups()[1]))\n        r = cls._re_polynomial.match(domain)\n        if r is not None:\n            ground, gens = r.groups()\n            gens = list(map(sympify, gens.split(',')))\n            if ground in ['Z', 'ZZ']:\n                return sympy.polys.domains.ZZ.poly_ring(*gens)\n            else:\n                return sympy.polys.domains.QQ.poly_ring(*gens)\n        r = cls._re_fraction.match(domain)\n        if r is not None:\n            ground, gens = r.groups()\n            gens = list(map(sympify, gens.split(',')))\n            if ground in ['Z', 'ZZ']:\n                return sympy.polys.domains.ZZ.frac_field(*gens)\n            else:\n                return sympy.polys.domains.QQ.frac_field(*gens)\n        r = cls._re_algebraic.match(domain)\n        if r is not None:\n            gens = list(map(sympify, r.groups()[1].split(',')))\n            return sympy.polys.domains.QQ.algebraic_field(*gens)\n    raise OptionError('expected a valid domain specification, got %s' % domain)",
    ".sympy.polys.domains.domain.py@@Domain.convert": "def convert(self, element, base=None):\n    if base is not None:\n        return self.convert_from(element, base)\n    if self.of_type(element):\n        return element\n    from sympy.polys.domains import PythonIntegerRing, GMPYIntegerRing, GMPYRationalField, RealField, ComplexField\n    if isinstance(element, integer_types):\n        return self.convert_from(element, PythonIntegerRing())\n    if HAS_GMPY:\n        integers = GMPYIntegerRing()\n        if isinstance(element, integers.tp):\n            return self.convert_from(element, integers)\n        rationals = GMPYRationalField()\n        if isinstance(element, rationals.tp):\n            return self.convert_from(element, rationals)\n    if isinstance(element, float):\n        parent = RealField(tol=False)\n        return self.convert_from(parent(element), parent)\n    if isinstance(element, complex):\n        parent = ComplexField(tol=False)\n        return self.convert_from(parent(element), parent)\n    if isinstance(element, DomainElement):\n        return self.convert_from(element, element.parent())\n    if self.is_Numerical and getattr(element, 'is_ground', False):\n        return self.convert(element.LC())\n    if isinstance(element, Basic):\n        try:\n            return self.from_sympy(element)\n        except (TypeError, ValueError):\n            pass\n    elif not is_sequence(element):\n        try:\n            element = sympify(element)\n            if isinstance(element, Basic):\n                return self.from_sympy(element)\n        except (TypeError, ValueError):\n            pass\n    raise CoercionFailed(\"can't convert %s of type %s to %s\" % (element, type(element), self))",
    ".sympy.polys.domains.domain.py@@Domain.of_type": "def of_type(self, element):\n    return isinstance(element, self.tp)",
    ".sympy.polys.domains.domain.py@@Domain.tp": "def tp(self):\n    return self.dtype",
    ".sympy.polys.polytools.py@@Poly.is_univariate": "def is_univariate(f):\n    return len(f.gens) == 1",
    ".sympy.polys.polyroots.py@@_integer_basis": "def _integer_basis(poly):\n    monoms, coeffs = list(zip(*poly.terms()))\n    monoms, = list(zip(*monoms))\n    coeffs = list(map(abs, coeffs))\n    if coeffs[0] < coeffs[-1]:\n        coeffs = list(reversed(coeffs))\n        n = monoms[0]\n        monoms = [n - i for i in reversed(monoms)]\n    else:\n        return None\n    monoms = monoms[:-1]\n    coeffs = coeffs[:-1]\n    divs = reversed(divisors(gcd_list(coeffs))[1:])\n    try:\n        div = next(divs)\n    except StopIteration:\n        return None\n    while True:\n        for monom, coeff in zip(monoms, coeffs):\n            if coeff % div ** monom != 0:\n                try:\n                    div = next(divs)\n                except StopIteration:\n                    return None\n                else:\n                    break\n        else:\n            return div",
    ".sympy.polys.polytools.py@@Poly.terms": "def terms(f, order=None):\n    return [(m, f.rep.dom.to_sympy(c)) for m, c in f.rep.terms(order=order)]",
    ".sympy.polys.polyclasses.py@@DMP.terms": "def terms(f, order=None):\n    return dmp_list_terms(f.rep, f.lev, f.dom, order=order)",
    ".sympy.polys.densebasic.py@@dmp_list_terms": "def dmp_list_terms(f, u, K, order=None):\n\n    def sort(terms, O):\n        return sorted(terms, key=lambda term: O(term[0]), reverse=True)\n    terms = _rec_list_terms(f, u, ())\n    if not terms:\n        return [((0,) * (u + 1), K.zero)]\n    if order is None:\n        return terms\n    else:\n        return sort(terms, monomial_key(order))",
    ".sympy.polys.densebasic.py@@_rec_list_terms": "def _rec_list_terms(g, v, monom):\n    d, terms = (dmp_degree(g, v), [])\n    if not v:\n        for i, c in enumerate(g):\n            if not c:\n                continue\n            terms.append((monom + (d - i,), c))\n    else:\n        w = v - 1\n        for i, c in enumerate(g):\n            terms.extend(_rec_list_terms(c, w, monom + (d - i,)))\n    return terms",
    ".sympy.polys.densebasic.py@@dmp_degree": "def dmp_degree(f, u):\n    if dmp_zero_p(f, u):\n        return -oo\n    else:\n        return len(f) - 1",
    ".sympy.core.numbers.py@@One.__abs__": "def __abs__():\n    return S.One",
    ".sympy.core.numbers.py@@Integer.__lt__": "def __lt__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s < %s' % (self, other))\n    if other.is_Integer:\n        return _sympify(self.p < other.p)\n    return Rational.__lt__(self, other)",
    ".sympy.logic.boolalg.py@@BooleanFalse.__nonzero__": "def __nonzero__(self):\n    return False",
    ".sympy.polys.polytools.py@@Poly.to_field": "def to_field(f):\n    if hasattr(f.rep, 'to_field'):\n        result = f.rep.to_field()\n    else:\n        raise OperationNotSupported(f, 'to_field')\n    return f.per(result)",
    ".sympy.polys.polyclasses.py@@DMP.to_field": "def to_field(f):\n    return f.convert(f.dom.get_field())",
    ".sympy.polys.domains.integerring.py@@IntegerRing.get_field": "def get_field(self):\n    from sympy.polys.domains import QQ\n    return QQ",
    ".sympy.polys.polyclasses.py@@DMP.convert": "def convert(f, dom):\n    if f.dom == dom:\n        return f\n    else:\n        return DMP(dmp_convert(f.rep, f.lev, f.dom, dom), dom, f.lev)",
    ".sympy.polys.densebasic.py@@dmp_convert": "def dmp_convert(f, u, K0, K1):\n    if not u:\n        return dup_convert(f, K0, K1)\n    if K0 is not None and K0 == K1:\n        return f\n    v = u - 1\n    return dmp_strip([dmp_convert(c, v, K0, K1) for c in f], u)",
    ".sympy.polys.densebasic.py@@dup_convert": "def dup_convert(f, K0, K1):\n    if K0 is not None and K0 == K1:\n        return f\n    else:\n        return dup_strip([K1.convert(c, K0) for c in f])",
    ".sympy.polys.domains.domain.py@@Domain.convert_from": "def convert_from(self, element, base):\n    if base.alias is not None:\n        method = 'from_' + base.alias\n    else:\n        method = 'from_' + base.__class__.__name__\n    _convert = getattr(self, method)\n    if _convert is not None:\n        result = _convert(element, base)\n        if result is not None:\n            return result\n    raise CoercionFailed(\"can't convert %s of type %s from %s to %s\" % (element, type(element), base, self))",
    ".sympy.polys.domains.pythonrationalfield.py@@PythonRationalField.from_ZZ_python": "def from_ZZ_python(K1, a, K0):\n    return PythonRational(a)",
    ".sympy.polys.domains.pythonrational.py@@PythonRational.__init__": "def __init__(self, p, q=1, _gcd=True):\n    from sympy.polys.domains.groundtypes import python_gcd as gcd\n    if isinstance(p, Integer):\n        p = p.p\n    elif isinstance(p, Rational):\n        p, q = (p.p, p.q)\n    if not q:\n        raise ZeroDivisionError('rational number')\n    elif q < 0:\n        p, q = (-p, -q)\n    if not p:\n        self.p = 0\n        self.q = 1\n    elif p == 1 or q == 1:\n        self.p = p\n        self.q = q\n    else:\n        if _gcd:\n            x = gcd(p, q)\n            if x != 1:\n                p //= x\n                q //= x\n        self.p = p\n        self.q = q",
    ".sympy.polys.domains.pythonrational.py@@PythonRational.__nonzero__": "def __nonzero__(self):\n    return self.p != 0",
    ".sympy.polys.polytools.py@@Poly.is_ground": "def is_ground(f):\n    return f.rep.is_ground",
    ".sympy.polys.polyclasses.py@@DMP.is_ground": "def is_ground(f):\n    return dmp_ground_p(f.rep, None, f.lev)",
    ".sympy.polys.densebasic.py@@dmp_ground_p": "def dmp_ground_p(f, c, u):\n    if c is not None and (not c):\n        return dmp_zero_p(f, u)\n    while u:\n        if len(f) != 1:\n            return False\n        f = f[0]\n        u -= 1\n    if c is None:\n        return len(f) <= 1\n    else:\n        return f == [c]",
    ".sympy.core.numbers.py@@Zero.__neg__": "def __neg__():\n    return S.Zero",
    ".sympy.core.expr.py@@Expr.__add__": "def __add__(self, other):\n    return Add(self, other)",
    ".sympy.core.function.py@@Function.__new__": "def __new__(cls, *args, **options):\n    if cls is Function:\n        return UndefinedFunction(*args, **options)\n    n = len(args)\n    if n not in cls.nargs:\n        temp = '%(name)s takes %(qual)s %(args)s argument%(plural)s (%(given)s given)'\n        raise TypeError(temp % {'name': cls, 'qual': 'exactly' if len(cls.nargs) == 1 else 'at least', 'args': min(cls.nargs), 'plural': 's' * (min(cls.nargs) != 1), 'given': n})\n    evaluate = options.get('evaluate', global_evaluate[0])\n    result = super(Function, cls).__new__(cls, *args, **options)\n    if evaluate and isinstance(result, cls) and result.args:\n        pr2 = min((cls._should_evalf(a) for a in result.args))\n        if pr2 > 0:\n            pr = max((cls._should_evalf(a) for a in result.args))\n            result = result.evalf(mlib.libmpf.prec_to_dps(pr))\n    return result",
    ".sympy.core.function.py@@FunctionClass.nargs": "def nargs(self):\n    from sympy.sets.sets import FiniteSet\n    return FiniteSet(*self._nargs) if self._nargs else S.Naturals0",
    ".sympy.sets.sets.py@@FiniteSet.__new__": "def __new__(cls, *args, **kwargs):\n    evaluate = kwargs.get('evaluate', global_evaluate[0])\n    if evaluate:\n        args = list(map(sympify, args))\n        if len(args) == 0:\n            return EmptySet()\n    else:\n        args = list(map(sympify, args))\n    args = list(ordered(frozenset(tuple(args)), Set._infimum_key))\n    obj = Basic.__new__(cls, *args)\n    obj._elements = frozenset(args)\n    return obj",
    ".sympy.core.compatibility.py@@ordered": "def ordered(seq, keys=None, default=True, warn=False):\n    d = defaultdict(list)\n    if keys:\n        if not isinstance(keys, (list, tuple)):\n            keys = [keys]\n        keys = list(keys)\n        f = keys.pop(0)\n        for a in seq:\n            d[f(a)].append(a)\n    else:\n        if not default:\n            raise ValueError('if default=False then keys must be provided')\n        d[None].extend(seq)\n    for k in sorted(d.keys()):\n        if len(d[k]) > 1:\n            if keys:\n                d[k] = ordered(d[k], keys, default, warn)\n            elif default:\n                d[k] = ordered(d[k], (_nodes, default_sort_key), default=False, warn=warn)\n            elif warn:\n                from sympy.utilities.iterables import uniq\n                u = list(uniq(d[k]))\n                if len(u) > 1:\n                    raise ValueError('not enough keys to break ties: %s' % u)\n        for v in d[k]:\n            yield v\n        d.pop(k)",
    ".sympy.sets.sets.py@@Set._infimum_key": "def _infimum_key(expr):\n    try:\n        infimum = expr.inf\n        assert infimum.is_comparable\n    except (NotImplementedError, AttributeError, AssertionError, ValueError):\n        infimum = S.Infinity\n    return infimum",
    ".sympy.core.numbers.py@@Infinity.__hash__": "def __hash__(self):\n    return super(Infinity, self).__hash__()",
    ".sympy.sets.sets.py@@Set.__contains__": "def __contains__(self, other):\n    symb = sympify(self.contains(other))\n    if not (symb is S.true or symb is S.false):\n        raise TypeError('contains did not evaluate to a bool: %r' % symb)\n    return bool(symb)",
    ".sympy.sets.sets.py@@Set.contains": "def contains(self, other):\n    other = sympify(other, strict=True)\n    ret = sympify(self._contains(other))\n    if ret is None:\n        ret = Contains(other, self, evaluate=False)\n    return ret",
    ".sympy.sets.sets.py@@FiniteSet._contains": "def _contains(self, other):\n    r = false\n    for e in self._elements:\n        t = Eq(e, other, evaluate=True)\n        if t is true:\n            return t\n        elif t is not false:\n            r = None\n    return r",
    ".sympy.core.relational.py@@Equality.__new__": "def __new__(cls, lhs, rhs=0, **options):\n    from sympy.core.add import Add\n    from sympy.core.logic import fuzzy_bool\n    from sympy.core.expr import _n2\n    from sympy.simplify.simplify import clear_coefficients\n    lhs = _sympify(lhs)\n    rhs = _sympify(rhs)\n    evaluate = options.pop('evaluate', global_evaluate[0])\n    if evaluate:\n        if hasattr(lhs, '_eval_Eq'):\n            r = lhs._eval_Eq(rhs)\n            if r is not None:\n                return r\n        if hasattr(rhs, '_eval_Eq'):\n            r = rhs._eval_Eq(lhs)\n            if r is not None:\n                return r\n        if lhs == rhs:\n            return S.true\n        elif all((isinstance(i, BooleanAtom) for i in (rhs, lhs))):\n            return S.false\n        elif not (lhs.is_Symbol or rhs.is_Symbol) and isinstance(lhs, Boolean) != isinstance(rhs, Boolean):\n            return S.false\n        fin = L, R = [i.is_finite for i in (lhs, rhs)]\n        if None not in fin:\n            if L != R:\n                return S.false\n            if L is False:\n                if lhs == -rhs:\n                    return S.false\n                return S.true\n        elif None in fin and False in fin:\n            return Relational.__new__(cls, lhs, rhs, **options)\n        if all((isinstance(i, Expr) for i in (lhs, rhs))):\n            dif = lhs - rhs\n            z = dif.is_zero\n            if z is not None:\n                if z is False and dif.is_commutative:\n                    return S.false\n                if z:\n                    return S.true\n            n2 = _n2(lhs, rhs)\n            if n2 is not None:\n                return _sympify(n2 == 0)\n            n, d = dif.as_numer_denom()\n            rv = None\n            if n.is_zero:\n                rv = d.is_nonzero\n            elif n.is_finite:\n                if d.is_infinite:\n                    rv = S.true\n                elif n.is_zero is False:\n                    rv = d.is_infinite\n                    if rv is None:\n                        l, r = clear_coefficients(d, S.Infinity)\n                        args = [_.subs(l, r) for _ in (lhs, rhs)]\n                        if args != [lhs, rhs]:\n                            rv = fuzzy_bool(Eq(*args))\n                            if rv is True:\n                                rv = None\n            elif any((a.is_infinite for a in Add.make_args(n))):\n                rv = S.false\n            if rv is not None:\n                return _sympify(rv)\n    return Relational.__new__(cls, lhs, rhs, **options)",
    ".sympy.logic.boolalg.py@@BooleanTrue.__hash__": "def __hash__(self):\n    return hash(True)",
    ".sympy.core.function.py@@Application.__new__": "def __new__(cls, *args, **options):\n    from sympy.sets.fancysets import Naturals0\n    from sympy.sets.sets import FiniteSet\n    args = list(map(sympify, args))\n    evaluate = options.pop('evaluate', global_evaluate[0])\n    options.pop('nargs', None)\n    if options:\n        raise ValueError('Unknown options: %s' % options)\n    if evaluate:\n        evaluated = cls.eval(*args)\n        if evaluated is not None:\n            return evaluated\n    obj = super(Application, cls).__new__(cls, *args, **options)\n    try:\n        if is_sequence(obj.nargs):\n            nargs = tuple(ordered(set(obj.nargs)))\n        elif obj.nargs is not None:\n            nargs = (as_int(obj.nargs),)\n        else:\n            nargs = None\n    except AttributeError:\n        nargs = obj._nargs\n    obj.nargs = FiniteSet(*nargs) if nargs else Naturals0()\n    return obj",
    ".sympy.functions.combinatorial.factorials.py@@RisingFactorial.eval": "def eval(cls, x, k):\n    x = sympify(x)\n    k = sympify(k)\n    if x is S.NaN or k is S.NaN:\n        return S.NaN\n    elif x is S.One:\n        return factorial(k)\n    elif k.is_Integer:\n        if k is S.Zero:\n            return S.One\n        elif k.is_positive:\n            if x is S.Infinity:\n                return S.Infinity\n            elif x is S.NegativeInfinity:\n                if k.is_odd:\n                    return S.NegativeInfinity\n                else:\n                    return S.Infinity\n            elif isinstance(x, Poly):\n                gens = x.gens\n                if len(gens) != 1:\n                    raise ValueError('rf only defined for polynomials on one generator')\n                else:\n                    return reduce(lambda r, i: r * x.shift(i).expand(), range(0, int(k)), 1)\n            else:\n                return reduce(lambda r, i: r * (x + i), range(0, int(k)), 1)\n        elif x is S.Infinity:\n            return S.Infinity\n        elif x is S.NegativeInfinity:\n            return S.Infinity\n        elif isinstance(x, Poly):\n            gens = x.gens\n            if len(gens) != 1:\n                raise ValueError('rf only defined for polynomials on one generator')\n            else:\n                return 1 / reduce(lambda r, i: r * x.shift(-i).expand(), range(1, abs(int(k)) + 1), 1)\n        else:\n            return 1 / reduce(lambda r, i: r * (x - i), range(1, abs(int(k)) + 1), 1)",
    ".sympy.core.function.py@@Function._should_evalf": "def _should_evalf(cls, arg):\n    from sympy.core.evalf import pure_complex\n    if arg.is_Float:\n        return arg._prec\n    if not arg.is_Add:\n        return -1\n    m = pure_complex(arg)\n    if m is None or not (m[0].is_Float or m[1].is_Float):\n        return -1\n    l = [i._prec for i in m if i.is_Float]\n    l.append(-1)\n    return max(l)",
    ".sympy.core.expr.py@@Expr.__pow__": "def __pow__(self, other, mod=None):\n    if mod is None:\n        return self._pow(other)\n    try:\n        _self, other, mod = (as_int(self), as_int(other), as_int(mod))\n        if other >= 0:\n            return pow(_self, other, mod)\n        else:\n            from sympy.core.numbers import mod_inverse\n            return mod_inverse(pow(_self, -other, mod), mod)\n    except ValueError:\n        power = self._pow(other)\n        try:\n            return power % mod\n        except TypeError:\n            return NotImplemented",
    ".sympy.core.expr.py@@Expr._pow": "def _pow(self, other):\n    return Pow(self, other)",
    ".sympy.core.expr.py@@Expr.is_number": "def is_number(self):\n    return all((obj.is_number for obj in self.args))",
    ".sympy.core.function.py@@Function.is_commutative": "def is_commutative(self):\n    if all((getattr(t, 'is_commutative') for t in self.args)):\n        return True\n    else:\n        return False",
    ".sympy.core.numbers.py@@Rational.__mul__": "def __mul__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, Integer):\n            return Rational(self.p * other.p, self.q, igcd(other.p, self.q))\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.p, self.q * other.q, igcd(self.p, other.q) * igcd(self.q, other.p))\n        elif isinstance(other, Float):\n            return other * self\n        else:\n            return Number.__mul__(self, other)\n    return Number.__mul__(self, other)",
    ".sympy.core.numbers.py@@Number.__mul__": "def __mul__(self, other):\n    if isinstance(other, Number) and global_evaluate[0]:\n        if other is S.NaN:\n            return S.NaN\n        elif other is S.Infinity:\n            if self.is_zero:\n                return S.NaN\n            elif self.is_positive:\n                return S.Infinity\n            else:\n                return S.NegativeInfinity\n        elif other is S.NegativeInfinity:\n            if self.is_zero:\n                return S.NaN\n            elif self.is_positive:\n                return S.NegativeInfinity\n            else:\n                return S.Infinity\n    elif isinstance(other, Tuple):\n        return NotImplemented\n    return AtomicExpr.__mul__(self, other)",
    ".sympy.core.expr.py@@Expr.__mul__": "def __mul__(self, other):\n    return Mul(self, other)",
    ".sympy.core.add.py@@Add._eval_power": "def _eval_power(self, e):\n    if e.is_Rational and self.is_number:\n        from sympy.core.evalf import pure_complex\n        from sympy.core.mul import _unevaluated_Mul\n        from sympy.core.exprtools import factor_terms\n        from sympy.core.function import expand_multinomial\n        from sympy.functions.elementary.complexes import sign\n        from sympy.functions.elementary.miscellaneous import sqrt\n        ri = pure_complex(self)\n        if ri:\n            r, i = ri\n            if e.q == 2:\n                D = sqrt(r ** 2 + i ** 2)\n                if D.is_Rational:\n                    root = sqrt(factor_terms((D - r) / 2)) ** e.p\n                    return root * expand_multinomial(((D + r) / abs(i) + sign(i) * S.ImaginaryUnit) ** e.p)\n            elif e == -1:\n                return _unevaluated_Mul(r - i * S.ImaginaryUnit, 1 / (r ** 2 + i ** 2))",
    ".sympy.polys.polytools.py@@Poly.degree": "def degree(f, gen=0):\n    j = f._gen_to_level(gen)\n    if hasattr(f.rep, 'degree'):\n        return f.rep.degree(j)\n    else:\n        raise OperationNotSupported(f, 'degree')",
    ".sympy.polys.polytools.py@@Poly._gen_to_level": "def _gen_to_level(f, gen):\n    if isinstance(gen, int):\n        length = len(f.gens)\n        if -length <= gen < length:\n            if gen < 0:\n                return length + gen\n            else:\n                return gen\n        else:\n            raise PolynomialError('-%s <= gen < %s expected, got %s' % (length, length, gen))\n    else:\n        try:\n            return f.gens.index(sympify(gen))\n        except ValueError:\n            raise PolynomialError('a valid generator expected, got %s' % gen)",
    ".sympy.polys.polyclasses.py@@DMP.degree": "def degree(f, j=0):\n    if isinstance(j, int):\n        return dmp_degree_in(f.rep, j, f.lev)\n    else:\n        raise TypeError('``int`` expected, got %s' % type(j))",
    ".sympy.polys.densebasic.py@@dmp_degree_in": "def dmp_degree_in(f, j, u):\n    if not j:\n        return dmp_degree(f, u)\n    if j < 0 or j > u:\n        raise IndexError('0 <= j <= %s expected, got %s' % (u, j))\n    return _rec_degree_in(f, u, 0, j)",
    ".sympy.core.add.py@@Add.__neg__": "def __neg__(self):\n    return self * -1",
    ".sympy.core.add.py@@Add.as_coeff_Add": "def as_coeff_Add(self, rational=False):\n    coeff, args = (self.args[0], self.args[1:])\n    if coeff.is_Number and (not rational) or coeff.is_Rational:\n        return (coeff, self._new_rawargs(*args))\n    return (S.Zero, self)",
    ".sympy.core.mul.py@@_keep_coeff": "def _keep_coeff(coeff, factors, clear=True, sign=False):\n    if not coeff.is_Number:\n        if factors.is_Number:\n            factors, coeff = (coeff, factors)\n        else:\n            return coeff * factors\n    if coeff is S.One:\n        return factors\n    elif coeff is S.NegativeOne and (not sign):\n        return -factors\n    elif factors.is_Add:\n        if not clear and coeff.is_Rational and (coeff.q != 1):\n            q = S(coeff.q)\n            for i in factors.args:\n                c, t = i.as_coeff_Mul()\n                r = c / q\n                if r == int(r):\n                    return coeff * factors\n        return Mul._from_args((coeff, factors))\n    elif factors.is_Mul:\n        margs = list(factors.args)\n        if margs[0].is_Number:\n            margs[0] *= coeff\n            if margs[0] == 1:\n                margs.pop(0)\n        else:\n            margs.insert(0, coeff)\n        return Mul._from_args(margs)\n    else:\n        return coeff * factors",
    ".sympy.core.basic.py@@Basic.compare": "def compare(self, other):\n    if self is other:\n        return 0\n    n1 = self.__class__\n    n2 = other.__class__\n    c = (n1 > n2) - (n1 < n2)\n    if c:\n        return c\n    st = self._hashable_content()\n    ot = other._hashable_content()\n    c = (len(st) > len(ot)) - (len(st) < len(ot))\n    if c:\n        return c\n    for l, r in zip(st, ot):\n        l = Basic(*l) if isinstance(l, frozenset) else l\n        r = Basic(*r) if isinstance(r, frozenset) else r\n        if isinstance(l, Basic):\n            c = l.compare(r)\n        else:\n            c = (l > r) - (l < r)\n        if c:\n            return c\n    return 0",
    ".sympy.core.core.py@@BasicMeta.__gt__": "def __gt__(cls, other):\n    if cls.__cmp__(other) == 1:\n        return True\n    return False",
    ".sympy.core.core.py@@BasicMeta.__cmp__": "def __cmp__(cls, other):\n    if not isinstance(other, BasicMeta):\n        return -1\n    n1 = cls.__name__\n    n2 = other.__name__\n    if n1 == n2:\n        return 0\n    UNKNOWN = len(ordering_of_classes) + 1\n    try:\n        i1 = ordering_of_classes.index(n1)\n    except ValueError:\n        i1 = UNKNOWN\n    try:\n        i2 = ordering_of_classes.index(n2)\n    except ValueError:\n        i2 = UNKNOWN\n    if i1 == UNKNOWN and i2 == UNKNOWN:\n        return (n1 > n2) - (n1 < n2)\n    return (i1 > i2) - (i1 < i2)",
    ".sympy.core.core.py@@BasicMeta.__lt__": "def __lt__(cls, other):\n    if cls.__cmp__(other) == -1:\n        return True\n    return False",
    ".sympy.core.symbol.py@@Symbol._hashable_content": "def _hashable_content(self):\n    return (self.name,) + tuple(sorted(self.assumptions0.items()))",
    ".sympy.core.symbol.py@@Symbol.assumptions0": "def assumptions0(self):\n    return dict(((key, value) for key, value in self._assumptions.items() if value is not None))",
    ".sympy.core.logic.py@@fuzzy_and": "def fuzzy_and(args):\n    rv = True\n    for ai in args:\n        ai = fuzzy_bool(ai)\n        if ai is False:\n            return False\n        if rv:\n            rv = ai\n    return rv",
    ".sympy.core.logic.py@@fuzzy_bool": "def fuzzy_bool(x):\n    if x is None:\n        return None\n    if x in (True, False):\n        return bool(x)",
    ".sympy.core.evalf.py@@pure_complex": "def pure_complex(v, or_real=False):\n    h, t = v.as_coeff_Add()\n    if not t:\n        if or_real:\n            return (h, t)\n        return\n    c, i = t.as_coeff_Mul()\n    if i is S.ImaginaryUnit:\n        return (h, c)",
    ".sympy.core.numbers.py@@Integer.__sub__": "def __sub__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, integer_types):\n            return Integer(self.p - other)\n        elif isinstance(other, Integer):\n            return Integer(self.p - other.p)\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.q - other.p, other.q, 1)\n        return Rational.__sub__(self, other)\n    return Rational.__sub__(self, other)",
    ".sympy.core.add.py@@Add._eval_is_polynomial": "def _eval_is_polynomial(self, syms):\n    return all((term._eval_is_polynomial(syms) for term in self.args))",
    ".sympy.core.mul.py@@Mul._eval_is_polynomial": "def _eval_is_polynomial(self, syms):\n    return all((term._eval_is_polynomial(syms) for term in self.args))",
    ".sympy.core.mul.py@@Mul._eval_expand_mul": "def _eval_expand_mul(self, **hints):\n    from sympy import fraction\n    expr = self\n    n, d = fraction(expr)\n    if d.is_Mul:\n        n, d = [i._eval_expand_mul(**hints) if i.is_Mul else i for i in (n, d)]\n        expr = n / d\n        if not expr.is_Mul:\n            return expr\n    plain, sums, rewrite = ([], [], False)\n    for factor in expr.args:\n        if factor.is_Add:\n            sums.append(factor)\n            rewrite = True\n        elif factor.is_commutative:\n            plain.append(factor)\n        else:\n            sums.append(Basic(factor))\n    if not rewrite:\n        return expr\n    else:\n        plain = self.func(*plain)\n        if sums:\n            deep = hints.get('deep', False)\n            terms = self.func._expandsums(sums)\n            args = []\n            for term in terms:\n                t = self.func(plain, term)\n                if t.is_Mul and any((a.is_Add for a in t.args)) and deep:\n                    t = t._eval_expand_mul()\n                args.append(t)\n            return Add(*args)\n        else:\n            return plain",
    ".sympy.simplify.radsimp.py@@fraction": "def fraction(expr, exact=False):\n    expr = sympify(expr)\n    numer, denom = ([], [])\n    for term in Mul.make_args(expr):\n        if term.is_commutative and (term.is_Pow or isinstance(term, exp)):\n            b, ex = term.as_base_exp()\n            if ex.is_negative:\n                if ex is S.NegativeOne:\n                    denom.append(b)\n                elif exact:\n                    if ex.is_constant():\n                        denom.append(Pow(b, -ex))\n                    else:\n                        numer.append(term)\n                else:\n                    denom.append(Pow(b, -ex))\n            elif ex.is_positive:\n                numer.append(term)\n            elif not exact and ex.is_Mul:\n                n, d = term.as_numer_denom()\n                numer.append(n)\n                denom.append(d)\n            else:\n                numer.append(term)\n        elif term.is_Rational:\n            n, d = term.as_numer_denom()\n            numer.append(n)\n            denom.append(d)\n        else:\n            numer.append(term)\n    if exact:\n        return (Mul(*numer, evaluate=False), Mul(*denom, evaluate=False))\n    else:\n        return (Mul(*numer), Mul(*denom))",
    ".sympy.core.numbers.py@@Integer.as_numer_denom": "def as_numer_denom(self):\n    return (self, S.One)",
    ".sympy.core.numbers.py@@Integer.__abs__": "def __abs__(self):\n    if self.p >= 0:\n        return self\n    else:\n        return Integer(-self.p)",
    ".sympy.polys.polytools.py@@gcd_list": "def gcd_list(seq, *gens, **args):\n    seq = sympify(seq)\n\n    def try_non_polynomial_gcd(seq):\n        if not gens and (not args):\n            domain, numbers = construct_domain(seq)\n            if not numbers:\n                return domain.zero\n            elif domain.is_Numerical:\n                result, numbers = (numbers[0], numbers[1:])\n                for number in numbers:\n                    result = domain.gcd(result, number)\n                    if domain.is_one(result):\n                        break\n                return domain.to_sympy(result)\n        return None\n    result = try_non_polynomial_gcd(seq)\n    if result is not None:\n        return result\n    options.allowed_flags(args, ['polys'])\n    try:\n        polys, opt = parallel_poly_from_expr(seq, *gens, **args)\n    except PolificationFailed as exc:\n        result = try_non_polynomial_gcd(exc.exprs)\n        if result is not None:\n            return result\n        else:\n            raise ComputationFailed('gcd_list', len(seq), exc)\n    if not polys:\n        if not opt.polys:\n            return S.Zero\n        else:\n            return Poly(0, opt=opt)\n    result, polys = (polys[0], polys[1:])\n    for poly in polys:\n        result = result.gcd(poly)\n        if result.is_one:\n            break\n    if not opt.polys:\n        return result.as_expr()\n    else:\n        return result",
    ".sympy.polys.polytools.py@@try_non_polynomial_gcd": "def try_non_polynomial_gcd(seq):\n    if not gens and (not args):\n        domain, numbers = construct_domain(seq)\n        if not numbers:\n            return domain.zero\n        elif domain.is_Numerical:\n            result, numbers = (numbers[0], numbers[1:])\n            for number in numbers:\n                result = domain.gcd(result, number)\n                if domain.is_one(result):\n                    break\n            return domain.to_sympy(result)\n    return None",
    ".sympy.ntheory.factor_.py@@divisors": "def divisors(n, generator=False):\n    n = as_int(abs(n))\n    if isprime(n):\n        return [1, n]\n    if n == 1:\n        return [1]\n    if n == 0:\n        return []\n    rv = _divisors(n)\n    if not generator:\n        return sorted(rv)\n    return rv",
    ".sympy.core.compatibility.py@@as_int": "def as_int(n):\n    try:\n        result = int(n)\n        if result != n:\n            raise TypeError\n    except TypeError:\n        raise ValueError('%s is not an integer' % (n,))\n    return result",
    ".sympy.core.numbers.py@@Integer.__int__": "def __int__(self):\n    return self.p",
    ".sympy.core.numbers.py@@Integer.__ne__": "def __ne__(self, other):\n    return not self == other",
    ".sympy.ntheory.primetest.py@@isprime": "def isprime(n):\n    if isinstance(n, (Float, float)):\n        return False\n    n = int(n)\n    if n in [2, 3, 5]:\n        return True\n    if n < 2 or n % 2 == 0 or n % 3 == 0 or (n % 5 == 0):\n        return False\n    if n < 49:\n        return True\n    if n % 7 == 0 or n % 11 == 0 or n % 13 == 0 or (n % 17 == 0) or (n % 19 == 0) or (n % 23 == 0) or (n % 29 == 0) or (n % 31 == 0) or (n % 37 == 0) or (n % 41 == 0) or (n % 43 == 0) or (n % 47 == 0):\n        return False\n    if n < 2809:\n        return True\n    if n <= 23001:\n        return pow(2, n, n) == 2 and n not in [7957, 8321, 13747, 18721, 19951]\n    from sympy.ntheory.generate import sieve as s\n    if n <= s._list[-1]:\n        l, u = s.search(n)\n        return l == u\n    from sympy.core.compatibility import HAS_GMPY\n    if HAS_GMPY == 2:\n        from gmpy2 import is_strong_prp, is_strong_selfridge_prp\n        return is_strong_prp(n, 2) and is_strong_selfridge_prp(n)\n    if n < 341531:\n        return mr(n, [9345883071009581737])\n    if n < 885594169:\n        return mr(n, [725270293939359937, 3569819667048198375])\n    if n < 350269456337:\n        return mr(n, [4230279247111683200, 14694767155120705706, 16641139526367750375])\n    if n < 55245642489451:\n        return mr(n, [2, 141889084524735, 1199124725622454117, 11096072698276303650])\n    if n < 7999252175582851:\n        return mr(n, [2, 4130806001517, 149795463772692060, 186635894390467037, 3967304179347715805])\n    if n < 585226005592931977:\n        return mr(n, [2, 123635709730000, 9233062284813009, 43835965440333360, 761179012939631437, 1263739024124850375])\n    if n < 18446744073709551616:\n        return mr(n, [2, 325, 9375, 28178, 450775, 9780504, 1795265022])\n    return mr(n, [2]) and is_strong_lucas_prp(n)",
    ".sympy.polys.polytools.py@@Poly.length": "def length(f):\n    return len(f.as_dict())",
    ".sympy.polys.domains.pythonrationalfield.py@@PythonRationalField.to_sympy": "def to_sympy(self, a):\n    return SymPyRational(a.numerator, a.denominator)",
    ".sympy.polys.domains.pythonrational.py@@PythonRational.numer": "def numer(self):\n    return self.p",
    ".sympy.polys.domains.pythonrational.py@@PythonRational.denom": "def denom(self):\n    return self.q",
    ".sympy.core.numbers.py@@Rational.__new__": "def __new__(cls, p, q=None, gcd=None):\n    if q is None:\n        if isinstance(p, Rational):\n            return p\n        if isinstance(p, string_types):\n            if p.count('/') > 1:\n                raise TypeError('invalid input: %s' % p)\n            pq = p.rsplit('/', 1)\n            if len(pq) == 2:\n                p, q = pq\n                fp = fractions.Fraction(p)\n                fq = fractions.Fraction(q)\n                f = fp / fq\n                return Rational(f.numerator, f.denominator, 1)\n            p = p.replace(' ', '')\n            try:\n                p = fractions.Fraction(p)\n            except ValueError:\n                pass\n        if not isinstance(p, string_types):\n            try:\n                if isinstance(p, fractions.Fraction):\n                    return Rational(p.numerator, p.denominator, 1)\n            except NameError:\n                pass\n            if isinstance(p, (float, Float)):\n                return Rational(*_as_integer_ratio(p))\n        if not isinstance(p, SYMPY_INTS + (Rational,)):\n            raise TypeError('invalid input: %s' % p)\n        q = q or S.One\n        gcd = 1\n    else:\n        p = Rational(p)\n        q = Rational(q)\n    if isinstance(q, Rational):\n        p *= q.q\n        q = q.p\n    if isinstance(p, Rational):\n        q *= p.q\n        p = p.p\n    if q == 0:\n        if p == 0:\n            if _errdict['divide']:\n                raise ValueError('Indeterminate 0/0')\n            else:\n                return S.NaN\n        return S.ComplexInfinity\n    if q < 0:\n        q = -q\n        p = -p\n    if not gcd:\n        gcd = igcd(abs(p), q)\n    if gcd > 1:\n        p //= gcd\n        q //= gcd\n    if q == 1:\n        return Integer(p)\n    if p == 1 and q == 2:\n        return S.Half\n    obj = Expr.__new__(cls)\n    obj.p = p\n    obj.q = q\n    return obj",
    ".sympy.core.numbers.py@@igcd": "def igcd(*args):\n    if len(args) < 2:\n        raise TypeError('igcd() takes at least 2 arguments (%s given)' % len(args))\n    if 1 in args:\n        a = 1\n        k = 0\n    else:\n        a = abs(as_int(args[0]))\n        k = 1\n    if a != 1:\n        while k < len(args):\n            b = args[k]\n            k += 1\n            try:\n                a = _gcdcache[a, b]\n            except KeyError:\n                b = as_int(b)\n                if not b:\n                    continue\n                if b == 1:\n                    a = 1\n                    break\n                if b < 0:\n                    b = -b\n                t = (a, b)\n                a = igcd2(a, b)\n                _gcdcache[t] = _gcdcache[t[1], t[0]] = a\n    while k < len(args):\n        ok = as_int(args[k])\n        k += 1\n    return a",
    ".sympy.polys.polytools.py@@Poly.as_expr": "def as_expr(f, *gens):\n    if not gens:\n        gens = f.gens\n    elif len(gens) == 1 and isinstance(gens[0], dict):\n        mapping = gens[0]\n        gens = list(f.gens)\n        for gen, value in mapping.items():\n            try:\n                index = gens.index(gen)\n            except ValueError:\n                raise GeneratorsError(\"%s doesn't have %s as generator\" % (f, gen))\n            else:\n                gens[index] = value\n    return basic_from_dict(f.rep.to_sympy_dict(), *gens)",
    ".sympy.polys.polyutils.py@@expr_from_dict": "def expr_from_dict(rep, *gens):\n    result = []\n    for monom, coeff in rep.items():\n        term = [coeff]\n        for g, m in zip(gens, monom):\n            if m:\n                term.append(Pow(g, m))\n        result.append(Mul(*term))\n    return Add(*result)",
    ".sympy.polys.polyutils.py@@_dict_from_expr_no_gens": "def _dict_from_expr_no_gens(expr, opt):\n    (poly,), gens = _parallel_dict_from_expr_no_gens((expr,), opt)\n    return (poly, gens)",
    ".sympy.polys.polyutils.py@@_parallel_dict_from_expr_no_gens": "def _parallel_dict_from_expr_no_gens(exprs, opt):\n    if opt.domain is not None:\n\n        def _is_coeff(factor):\n            return factor in opt.domain\n    elif opt.extension is True:\n\n        def _is_coeff(factor):\n            return factor.is_algebraic\n    elif opt.greedy is not False:\n\n        def _is_coeff(factor):\n            return False\n    else:\n\n        def _is_coeff(factor):\n            return factor.is_number\n    gens, reprs = (set([]), [])\n    for expr in exprs:\n        terms = []\n        if expr.is_Equality:\n            expr = expr.lhs - expr.rhs\n        for term in Add.make_args(expr):\n            coeff, elements = ([], {})\n            for factor in Mul.make_args(term):\n                if not _not_a_coeff(factor) and (factor.is_Number or _is_coeff(factor)):\n                    coeff.append(factor)\n                else:\n                    if opt.series is False:\n                        base, exp = decompose_power(factor)\n                        if exp < 0:\n                            exp, base = (-exp, Pow(base, -S.One))\n                    else:\n                        base, exp = decompose_power_rat(factor)\n                    elements[base] = elements.setdefault(base, 0) + exp\n                    gens.add(base)\n            terms.append((coeff, elements))\n        reprs.append(terms)\n    gens = _sort_gens(gens, opt=opt)\n    k, indices = (len(gens), {})\n    for i, g in enumerate(gens):\n        indices[g] = i\n    polys = []\n    for terms in reprs:\n        poly = {}\n        for coeff, term in terms:\n            monom = [0] * k\n            for base, exp in term.items():\n                monom[indices[base]] = exp\n            monom = tuple(monom)\n            if monom in poly:\n                poly[monom] += Mul(*coeff)\n            else:\n                poly[monom] = Mul(*coeff)\n        polys.append(poly)\n    return (polys, tuple(gens))",
    ".sympy.polys.polyutils.py@@_is_coeff": "def _is_coeff(factor):\n    return factor.is_number",
    ".sympy.polys.polyutils.py@@_sort_gens": "def _sort_gens(gens, **args):\n    opt = build_options(args)\n    gens_order, wrt = ({}, None)\n    if opt is not None:\n        gens_order, wrt = ({}, opt.wrt)\n        for i, gen in enumerate(opt.sort):\n            gens_order[gen] = i + 1\n\n    def order_key(gen):\n        gen = str(gen)\n        if wrt is not None:\n            try:\n                return (-len(wrt) + wrt.index(gen), gen, 0)\n            except ValueError:\n                pass\n        name, index = _re_gen.match(gen).groups()\n        if index:\n            index = int(index)\n        else:\n            index = 0\n        try:\n            return (gens_order[name], name, index)\n        except KeyError:\n            pass\n        try:\n            return (_gens_order[name], name, index)\n        except KeyError:\n            pass\n        return (_max_order, name, index)\n    try:\n        gens = sorted(gens, key=order_key)\n    except TypeError:\n        pass\n    return tuple(gens)",
    ".sympy.polys.polyoptions.py@@Sort.default": "def default(cls):\n    return []",
    ".sympy.polys.polyutils.py@@order_key": "def order_key(gen):\n    gen = str(gen)\n    if wrt is not None:\n        try:\n            return (-len(wrt) + wrt.index(gen), gen, 0)\n        except ValueError:\n            pass\n    name, index = _re_gen.match(gen).groups()\n    if index:\n        index = int(index)\n    else:\n        index = 0\n    try:\n        return (gens_order[name], name, index)\n    except KeyError:\n        pass\n    try:\n        return (_gens_order[name], name, index)\n    except KeyError:\n        pass\n    return (_max_order, name, index)",
    ".sympy.core.basic.py@@Basic.__str__": "def __str__(self):\n    from sympy.printing import sstr\n    return sstr(self, order=None)",
    ".sympy.printing.str.py@@sstr": "def sstr(expr, **settings):\n    p = StrPrinter(settings)\n    s = p.doprint(expr)\n    return s",
    ".sympy.printing.printer.py@@Printer.__init__": "def __init__(self, settings=None):\n    self._str = str\n    self._settings = self._default_settings.copy()\n    for key, val in self._global_settings.items():\n        if key in self._default_settings:\n            self._settings[key] = val\n    if settings is not None:\n        self._settings.update(settings)\n        if len(self._settings) > len(self._default_settings):\n            for key in self._settings:\n                if key not in self._default_settings:\n                    raise TypeError(\"Unknown setting '%s'.\" % key)\n    self._print_level = 0",
    ".sympy.printing.printer.py@@Printer.doprint": "def doprint(self, expr):\n    return self._str(self._print(expr))",
    ".sympy.printing.printer.py@@Printer._print": "def _print(self, expr, *args, **kwargs):\n    self._print_level += 1\n    try:\n        if self.printmethod and hasattr(expr, self.printmethod) and (not isinstance(expr, BasicMeta)):\n            return getattr(expr, self.printmethod)(self, *args, **kwargs)\n        classes = type(expr).__mro__\n        if AppliedUndef in classes:\n            classes = classes[classes.index(AppliedUndef):]\n        if UndefinedFunction in classes:\n            classes = classes[classes.index(UndefinedFunction):]\n        if Function in classes:\n            i = classes.index(Function)\n            classes = tuple((c for c in classes[:i] if c.__name__ == classes[0].__name__ or c.__name__.endswith('Base'))) + classes[i:]\n        for cls in classes:\n            printmethod = '_print_' + cls.__name__\n            if hasattr(self, printmethod):\n                return getattr(self, printmethod)(expr, *args, **kwargs)\n        return self.emptyPrinter(expr)\n    finally:\n        self._print_level -= 1",
    ".sympy.printing.str.py@@StrPrinter._print_Symbol": "def _print_Symbol(self, expr):\n    return expr.name",
    ".sympy.polys.polytools.py@@Poly.factor_list": "def factor_list(f):\n    if hasattr(f.rep, 'factor_list'):\n        try:\n            coeff, factors = f.rep.factor_list()\n        except DomainError:\n            return (S.One, [(f, 1)])\n    else:\n        raise OperationNotSupported(f, 'factor_list')\n    return (f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors])",
    ".sympy.polys.polyclasses.py@@DMP.factor_list": "def factor_list(f):\n    coeff, factors = dmp_factor_list(f.rep, f.lev, f.dom)\n    return (coeff, [(f.per(g), k) for g, k in factors])",
    ".sympy.polys.factortools.py@@dmp_factor_list": "def dmp_factor_list(f, u, K0):\n    if not u:\n        return dup_factor_list(f, K0)\n    J, f = dmp_terms_gcd(f, u, K0)\n    cont, f = dmp_ground_primitive(f, u, K0)\n    if K0.is_FiniteField:\n        coeff, factors = dmp_gf_factor(f, u, K0)\n    elif K0.is_Algebraic:\n        coeff, factors = dmp_ext_factor(f, u, K0)\n    else:\n        if not K0.is_Exact:\n            K0_inexact, K0 = (K0, K0.get_exact())\n            f = dmp_convert(f, u, K0_inexact, K0)\n        else:\n            K0_inexact = None\n        if K0.is_Field:\n            K = K0.get_ring()\n            denom, f = dmp_clear_denoms(f, u, K0, K)\n            f = dmp_convert(f, u, K0, K)\n        else:\n            K = K0\n        if K.is_ZZ:\n            levels, f, v = dmp_exclude(f, u, K)\n            coeff, factors = dmp_zz_factor(f, v, K)\n            for i, (f, k) in enumerate(factors):\n                factors[i] = (dmp_include(f, levels, v, K), k)\n        elif K.is_Poly:\n            f, v = dmp_inject(f, u, K)\n            coeff, factors = dmp_factor_list(f, v, K.dom)\n            for i, (f, k) in enumerate(factors):\n                factors[i] = (dmp_eject(f, v, K), k)\n            coeff = K.convert(coeff, K.dom)\n        else:\n            raise DomainError('factorization not supported over %s' % K0)\n        if K0.is_Field:\n            for i, (f, k) in enumerate(factors):\n                factors[i] = (dmp_convert(f, u, K, K0), k)\n            coeff = K0.convert(coeff, K)\n            coeff = K0.quo(coeff, denom)\n            if K0_inexact:\n                for i, (f, k) in enumerate(factors):\n                    max_norm = dmp_max_norm(f, u, K0)\n                    f = dmp_quo_ground(f, max_norm, u, K0)\n                    f = dmp_convert(f, u, K0, K0_inexact)\n                    factors[i] = (f, k)\n                    coeff = K0.mul(coeff, K0.pow(max_norm, k))\n                coeff = K0_inexact.convert(coeff, K0)\n                K0 = K0_inexact\n    for i, j in enumerate(reversed(J)):\n        if not j:\n            continue\n        term = {(0,) * (u - i) + (1,) + (0,) * i: K0.one}\n        factors.insert(0, (dmp_from_dict(term, u, K0), j))\n    return (coeff * cont, _sort_factors(factors))",
    ".sympy.polys.factortools.py@@dup_factor_list": "def dup_factor_list(f, K0):\n    j, f = dup_terms_gcd(f, K0)\n    cont, f = dup_primitive(f, K0)\n    if K0.is_FiniteField:\n        coeff, factors = dup_gf_factor(f, K0)\n    elif K0.is_Algebraic:\n        coeff, factors = dup_ext_factor(f, K0)\n    else:\n        if not K0.is_Exact:\n            K0_inexact, K0 = (K0, K0.get_exact())\n            f = dup_convert(f, K0_inexact, K0)\n        else:\n            K0_inexact = None\n        if K0.is_Field:\n            K = K0.get_ring()\n            denom, f = dup_clear_denoms(f, K0, K)\n            f = dup_convert(f, K0, K)\n        else:\n            K = K0\n        if K.is_ZZ:\n            coeff, factors = dup_zz_factor(f, K)\n        elif K.is_Poly:\n            f, u = dmp_inject(f, 0, K)\n            coeff, factors = dmp_factor_list(f, u, K.dom)\n            for i, (f, k) in enumerate(factors):\n                factors[i] = (dmp_eject(f, u, K), k)\n            coeff = K.convert(coeff, K.dom)\n        else:\n            raise DomainError('factorization not supported over %s' % K0)\n        if K0.is_Field:\n            for i, (f, k) in enumerate(factors):\n                factors[i] = (dup_convert(f, K, K0), k)\n            coeff = K0.convert(coeff, K)\n            coeff = K0.quo(coeff, denom)\n            if K0_inexact:\n                for i, (f, k) in enumerate(factors):\n                    max_norm = dup_max_norm(f, K0)\n                    f = dup_quo_ground(f, max_norm, K0)\n                    f = dup_convert(f, K0, K0_inexact)\n                    factors[i] = (f, k)\n                    coeff = K0.mul(coeff, K0.pow(max_norm, k))\n                coeff = K0_inexact.convert(coeff, K0)\n                K0 = K0_inexact\n    if j:\n        factors.insert(0, ([K0.one, K0.zero], j))\n    return (coeff * cont, _sort_factors(factors))",
    ".sympy.polys.densebasic.py@@dup_terms_gcd": "def dup_terms_gcd(f, K):\n    if dup_TC(f, K) or not f:\n        return (0, f)\n    i = 0\n    for c in reversed(f):\n        if not c:\n            i += 1\n        else:\n            break\n    return (i, f[:-i])",
    ".sympy.polys.factortools.py@@dup_zz_factor": "def dup_zz_factor(f, K):\n    cont, g = dup_primitive(f, K)\n    n = dup_degree(g)\n    if dup_LC(g, K) < 0:\n        cont, g = (-cont, dup_neg(g, K))\n    if n <= 0:\n        return (cont, [])\n    elif n == 1:\n        return (cont, [(g, 1)])\n    if query('USE_IRREDUCIBLE_IN_FACTOR'):\n        if dup_zz_irreducible_p(g, K):\n            return (cont, [(g, 1)])\n    g = dup_sqf_part(g, K)\n    H = None\n    if query('USE_CYCLOTOMIC_FACTOR'):\n        H = dup_zz_cyclotomic_factor(g, K)\n    if H is None:\n        H = dup_zz_zassenhaus(g, K)\n    factors = dup_trial_division(f, H, K)\n    return (cont, factors)",
    ".sympy.polys.densebasic.py@@dup_degree": "def dup_degree(f):\n    if not f:\n        return -oo\n    return len(f) - 1",
    ".sympy.polys.densebasic.py@@poly_LC": "def poly_LC(f, K):\n    if not f:\n        return K.zero\n    else:\n        return f[0]",
    ".sympy.polys.polyconfig.py@@query": "def query(key):\n    return _current_config.get(key.upper(), None)",
    ".sympy.polys.sqfreetools.py@@dup_sqf_part": "def dup_sqf_part(f, K):\n    if K.is_FiniteField:\n        return dup_gf_sqf_part(f, K)\n    if not f:\n        return f\n    if K.is_negative(dup_LC(f, K)):\n        f = dup_neg(f, K)\n    gcd = dup_gcd(f, dup_diff(f, 1, K), K)\n    sqf = dup_quo(f, gcd, K)\n    if K.is_Field:\n        return dup_monic(sqf, K)\n    else:\n        return dup_primitive(sqf, K)[1]",
    ".sympy.polys.domains.domain.py@@Domain.is_negative": "def is_negative(self, a):\n    return a < 0",
    ".sympy.polys.densetools.py@@dup_diff": "def dup_diff(f, m, K):\n    if m <= 0:\n        return f\n    n = dup_degree(f)\n    if n < m:\n        return []\n    deriv = []\n    if m == 1:\n        for coeff in f[:-m]:\n            deriv.append(K(n) * coeff)\n            n -= 1\n    else:\n        for coeff in f[:-m]:\n            k = n\n            for i in range(n - 1, n - m, -1):\n                k *= i\n            deriv.append(K(k) * coeff)\n            n -= 1\n    return dup_strip(deriv)",
    ".sympy.polys.domains.domain.py@@Domain.__call__": "def __call__(self, *args):\n    return self.new(*args)",
    ".sympy.polys.domains.domain.py@@Domain.new": "def new(self, *args):\n    return self.dtype(*args)",
    ".sympy.polys.euclidtools.py@@dup_gcd": "def dup_gcd(f, g, K):\n    return dup_inner_gcd(f, g, K)[0]",
    ".sympy.polys.euclidtools.py@@dup_inner_gcd": "def dup_inner_gcd(f, g, K):\n    if not K.is_Exact:\n        try:\n            exact = K.get_exact()\n        except DomainError:\n            return ([K.one], f, g)\n        f = dup_convert(f, K, exact)\n        g = dup_convert(g, K, exact)\n        h, cff, cfg = dup_inner_gcd(f, g, exact)\n        h = dup_convert(h, exact, K)\n        cff = dup_convert(cff, exact, K)\n        cfg = dup_convert(cfg, exact, K)\n        return (h, cff, cfg)\n    elif K.is_Field:\n        if K.is_QQ and query('USE_HEU_GCD'):\n            try:\n                return dup_qq_heu_gcd(f, g, K)\n            except HeuristicGCDFailed:\n                pass\n        return dup_ff_prs_gcd(f, g, K)\n    else:\n        if K.is_ZZ and query('USE_HEU_GCD'):\n            try:\n                return dup_zz_heu_gcd(f, g, K)\n            except HeuristicGCDFailed:\n                pass\n        return dup_rr_prs_gcd(f, g, K)",
    ".sympy.polys.euclidtools.py@@dup_zz_heu_gcd": "def dup_zz_heu_gcd(f, g, K):\n    result = _dup_rr_trivial_gcd(f, g, K)\n    if result is not None:\n        return result\n    df = dup_degree(f)\n    dg = dup_degree(g)\n    gcd, f, g = dup_extract(f, g, K)\n    if df == 0 or dg == 0:\n        return ([gcd], f, g)\n    f_norm = dup_max_norm(f, K)\n    g_norm = dup_max_norm(g, K)\n    B = K(2 * min(f_norm, g_norm) + 29)\n    x = max(min(B, 99 * K.sqrt(B)), 2 * min(f_norm // abs(dup_LC(f, K)), g_norm // abs(dup_LC(g, K))) + 2)\n    for i in range(0, HEU_GCD_MAX):\n        ff = dup_eval(f, x, K)\n        gg = dup_eval(g, x, K)\n        if ff and gg:\n            h = K.gcd(ff, gg)\n            cff = ff // h\n            cfg = gg // h\n            h = _dup_zz_gcd_interpolate(h, x, K)\n            h = dup_primitive(h, K)[1]\n            cff_, r = dup_div(f, h, K)\n            if not r:\n                cfg_, r = dup_div(g, h, K)\n                if not r:\n                    h = dup_mul_ground(h, gcd, K)\n                    return (h, cff_, cfg_)\n            cff = _dup_zz_gcd_interpolate(cff, x, K)\n            h, r = dup_div(f, cff, K)\n            if not r:\n                cfg_, r = dup_div(g, h, K)\n                if not r:\n                    h = dup_mul_ground(h, gcd, K)\n                    return (h, cff, cfg_)\n            cfg = _dup_zz_gcd_interpolate(cfg, x, K)\n            h, r = dup_div(g, cfg, K)\n            if not r:\n                cff_, r = dup_div(f, h, K)\n                if not r:\n                    h = dup_mul_ground(h, gcd, K)\n                    return (h, cff_, cfg)\n        x = 73794 * x * K.sqrt(K.sqrt(x)) // 27011\n    raise HeuristicGCDFailed('no luck')",
    ".sympy.polys.euclidtools.py@@_dup_rr_trivial_gcd": "def _dup_rr_trivial_gcd(f, g, K):\n    if not (f or g):\n        return ([], [], [])\n    elif not f:\n        if K.is_nonnegative(dup_LC(g, K)):\n            return (g, [], [K.one])\n        else:\n            return (dup_neg(g, K), [], [-K.one])\n    elif not g:\n        if K.is_nonnegative(dup_LC(f, K)):\n            return (f, [K.one], [])\n        else:\n            return (dup_neg(f, K), [-K.one], [])\n    return None",
    ".sympy.polys.densetools.py@@dup_extract": "def dup_extract(f, g, K):\n    fc = dup_content(f, K)\n    gc = dup_content(g, K)\n    gcd = K.gcd(fc, gc)\n    if not K.is_one(gcd):\n        f = dup_quo_ground(f, gcd, K)\n        g = dup_quo_ground(g, gcd, K)\n    return (gcd, f, g)",
    ".sympy.polys.densearith.py@@dup_max_norm": "def dup_max_norm(f, K):\n    if not f:\n        return K.zero\n    else:\n        return max(dup_abs(f, K))",
    ".sympy.polys.densearith.py@@dup_abs": "def dup_abs(f, K):\n    return [K.abs(coeff) for coeff in f]",
    ".sympy.polys.domains.domain.py@@Domain.abs": "def abs(self, a):\n    return abs(a)",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.sqrt": "def sqrt(self, a):\n    return python_sqrt(a)",
    ".sympy.polys.domains.groundtypes.py@@python_sqrt": "def python_sqrt(n):\n    return int(mlib.isqrt(n))",
    ".sympy.polys.densetools.py@@dup_eval": "def dup_eval(f, a, K):\n    if not a:\n        return dup_TC(f, K)\n    result = K.zero\n    for c in f:\n        result *= a\n        result += c\n    return result",
    ".sympy.polys.euclidtools.py@@_dup_zz_gcd_interpolate": "def _dup_zz_gcd_interpolate(h, x, K):\n    f = []\n    while h:\n        g = h % x\n        if g > x // 2:\n            g -= x\n        f.insert(0, g)\n        h = (h - g) // x\n    return f",
    ".sympy.polys.densearith.py@@dup_quo_ground": "def dup_quo_ground(f, c, K):\n    if not c:\n        raise ZeroDivisionError('polynomial division')\n    if not f:\n        return f\n    if K.is_Field:\n        return [K.quo(cf, c) for cf in f]\n    else:\n        return [cf // c for cf in f]",
    ".sympy.polys.densearith.py@@dup_div": "def dup_div(f, g, K):\n    if K.is_Field:\n        return dup_ff_div(f, g, K)\n    else:\n        return dup_rr_div(f, g, K)",
    ".sympy.polys.densearith.py@@dup_rr_div": "def dup_rr_div(f, g, K):\n    df = dup_degree(f)\n    dg = dup_degree(g)\n    q, r, dr = ([], f, df)\n    if not g:\n        raise ZeroDivisionError('polynomial division')\n    elif df < dg:\n        return (q, r)\n    lc_g = dup_LC(g, K)\n    while True:\n        lc_r = dup_LC(r, K)\n        if lc_r % lc_g:\n            break\n        c = K.exquo(lc_r, lc_g)\n        j = dr - dg\n        q = dup_add_term(q, c, j, K)\n        h = dup_mul_term(g, c, j, K)\n        r = dup_sub(r, h, K)\n        _dr, dr = (dr, dup_degree(r))\n        if dr < dg:\n            break\n        elif not dr < _dr:\n            raise PolynomialDivisionFailed(f, g, K)\n    return (q, r)",
    ".sympy.polys.domains.ring.py@@Ring.exquo": "def exquo(self, a, b):\n    if a % b:\n        raise ExactQuotientFailed(a, b, self)\n    else:\n        return a // b",
    ".sympy.polys.densearith.py@@dup_add_term": "def dup_add_term(f, c, i, K):\n    if not c:\n        return f\n    n = len(f)\n    m = n - i - 1\n    if i == n - 1:\n        return dup_strip([f[0] + c] + f[1:])\n    elif i >= n:\n        return [c] + [K.zero] * (i - n) + f\n    else:\n        return f[:m] + [f[m] + c] + f[m + 1:]",
    ".sympy.polys.densearith.py@@dup_mul_term": "def dup_mul_term(f, c, i, K):\n    if not c or not f:\n        return []\n    else:\n        return [cf * c for cf in f] + [K.zero] * i",
    ".sympy.polys.densearith.py@@dup_sub": "def dup_sub(f, g, K):\n    if not f:\n        return dup_neg(g, K)\n    if not g:\n        return f\n    df = dup_degree(f)\n    dg = dup_degree(g)\n    if df == dg:\n        return dup_strip([a - b for a, b in zip(f, g)])\n    else:\n        k = abs(df - dg)\n        if df > dg:\n            h, f = (f[:k], f[k:])\n        else:\n            h, g = (dup_neg(g[:k], K), g[k:])\n        return h + [a - b for a, b in zip(f, g)]",
    ".sympy.core.numbers.py@@Infinity.__neg__": "def __neg__(self):\n    return S.NegativeInfinity",
    ".sympy.core.numbers.py@@NegativeInfinity.__lt__": "def __lt__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s < %s' % (self, other))\n    if other.is_real:\n        if other.is_finite or other is S.Infinity:\n            return S.true\n        elif other.is_nonnegative:\n            return S.true\n        elif other.is_infinite and other.is_negative:\n            return S.false\n    return Expr.__lt__(self, other)",
    ".sympy.polys.densearith.py@@dup_mul_ground": "def dup_mul_ground(f, c, K):\n    if not c or not f:\n        return []\n    else:\n        return [cf * c for cf in f]",
    ".sympy.polys.densearith.py@@dup_quo": "def dup_quo(f, g, K):\n    return dup_div(f, g, K)[0]",
    ".sympy.polys.factortools.py@@dup_zz_cyclotomic_factor": "def dup_zz_cyclotomic_factor(f, K):\n    lc_f, tc_f = (dup_LC(f, K), dup_TC(f, K))\n    if dup_degree(f) <= 0:\n        return None\n    if lc_f != 1 or tc_f not in [-1, 1]:\n        return None\n    if any((bool(cf) for cf in f[1:-1])):\n        return None\n    n = dup_degree(f)\n    F = _dup_cyclotomic_decompose(n, K)\n    if not K.is_one(tc_f):\n        return F\n    else:\n        H = []\n        for h in _dup_cyclotomic_decompose(2 * n, K):\n            if h not in F:\n                H.append(h)\n        return H",
    ".sympy.polys.factortools.py@@dup_zz_zassenhaus": "def dup_zz_zassenhaus(f, K):\n    n = dup_degree(f)\n    if n == 1:\n        return [f]\n    fc = f[-1]\n    A = dup_max_norm(f, K)\n    b = dup_LC(f, K)\n    B = int(abs(K.sqrt(K(n + 1)) * 2 ** n * A * b))\n    C = int((n + 1) ** (2 * n) * A ** (2 * n - 1))\n    gamma = int(_ceil(2 * _log(C, 2)))\n    bound = int(2 * gamma * _log(gamma))\n    a = []\n    for px in range(3, bound + 1):\n        if not isprime(px) or b % px == 0:\n            continue\n        px = K.convert(px)\n        F = gf_from_int_poly(f, px)\n        if not gf_sqf_p(F, px, K):\n            continue\n        fsqfx = gf_factor_sqf(F, px, K)[1]\n        a.append((px, fsqfx))\n        if len(fsqfx) < 15 or len(a) > 4:\n            break\n    p, fsqf = min(a, key=lambda x: len(x[1]))\n    l = int(_ceil(_log(2 * B + 1, p)))\n    modular = [gf_to_int_poly(ff, p) for ff in fsqf]\n    g = dup_zz_hensel_lift(p, f, modular, l, K)\n    sorted_T = range(len(g))\n    T = set(sorted_T)\n    factors, s = ([], 1)\n    pl = p ** l\n    while 2 * s <= len(T):\n        for S in subsets(sorted_T, s):\n            if b == 1:\n                q = 1\n                for i in S:\n                    q = q * g[i][-1]\n                q = q % pl\n                if not _test_pl(fc, q, pl):\n                    continue\n            else:\n                G = [b]\n                for i in S:\n                    G = dup_mul(G, g[i], K)\n                G = dup_trunc(G, pl, K)\n                G = dup_primitive(G, K)[1]\n                q = G[-1]\n                if q and fc % q != 0:\n                    continue\n            H = [b]\n            S = set(S)\n            T_S = T - S\n            if b == 1:\n                G = [b]\n                for i in S:\n                    G = dup_mul(G, g[i], K)\n                G = dup_trunc(G, pl, K)\n            for i in T_S:\n                H = dup_mul(H, g[i], K)\n            H = dup_trunc(H, pl, K)\n            G_norm = dup_l1_norm(G, K)\n            H_norm = dup_l1_norm(H, K)\n            if G_norm * H_norm <= B:\n                T = T_S\n                sorted_T = [i for i in sorted_T if i not in S]\n                G = dup_primitive(G, K)[1]\n                f = dup_primitive(H, K)[1]\n                factors.append(G)\n                b = dup_LC(f, K)\n                break\n        else:\n            s += 1\n    return factors + [f]",
    ".sympy.polys.galoistools.py@@gf_from_int_poly": "def gf_from_int_poly(f, p):\n    return gf_trunc(f, p)",
    ".sympy.polys.galoistools.py@@gf_trunc": "def gf_trunc(f, p):\n    return gf_strip([a % p for a in f])",
    ".sympy.polys.galoistools.py@@gf_strip": "def gf_strip(f):\n    if not f or f[0]:\n        return f\n    k = 0\n    for coeff in f:\n        if coeff:\n            break\n        else:\n            k += 1\n    return f[k:]",
    ".sympy.polys.galoistools.py@@gf_sqf_p": "def gf_sqf_p(f, p, K):\n    _, f = gf_monic(f, p, K)\n    if not f:\n        return True\n    else:\n        return gf_gcd(f, gf_diff(f, p, K), p, K) == [K.one]",
    ".sympy.polys.galoistools.py@@gf_monic": "def gf_monic(f, p, K):\n    if not f:\n        return (K.zero, [])\n    else:\n        lc = f[0]\n        if K.is_one(lc):\n            return (lc, list(f))\n        else:\n            return (lc, gf_quo_ground(f, lc, p, K))",
    ".sympy.polys.galoistools.py@@gf_diff": "def gf_diff(f, p, K):\n    df = gf_degree(f)\n    h, n = ([K.zero] * df, df)\n    for coeff in f[:-1]:\n        coeff *= K(n)\n        coeff %= p\n        if coeff:\n            h[df - n] = coeff\n        n -= 1\n    return gf_strip(h)",
    ".sympy.polys.galoistools.py@@gf_degree": "def gf_degree(f):\n    return len(f) - 1",
    ".sympy.polys.galoistools.py@@gf_gcd": "def gf_gcd(f, g, p, K):\n    while g:\n        f, g = (g, gf_rem(f, g, p, K))\n    return gf_monic(f, p, K)[1]",
    ".sympy.polys.galoistools.py@@gf_rem": "def gf_rem(f, g, p, K):\n    return gf_div(f, g, p, K)[1]",
    ".sympy.polys.galoistools.py@@gf_div": "def gf_div(f, g, p, K):\n    df = gf_degree(f)\n    dg = gf_degree(g)\n    if not g:\n        raise ZeroDivisionError('polynomial division')\n    elif df < dg:\n        return ([], f)\n    inv = K.invert(g[0], p)\n    h, dq, dr = (list(f), df - dg, dg - 1)\n    for i in range(0, df + 1):\n        coeff = h[i]\n        for j in range(max(0, dg - i), min(df - i, dr) + 1):\n            coeff -= h[i + j - dg] * g[dg - j]\n        if i <= dq:\n            coeff *= inv\n        h[i] = coeff % p\n    return (h[:dq + 1], gf_strip(h[dq + 1:]))",
    ".sympy.polys.domains.ring.py@@Ring.invert": "def invert(self, a, b):\n    s, t, h = self.gcdex(a, b)\n    if self.is_one(h):\n        return s % b\n    else:\n        raise NotInvertible('zero divisor')",
    ".sympy.polys.domains.pythonintegerring.py@@PythonIntegerRing.gcdex": "def gcdex(self, a, b):\n    return python_gcdex(a, b)",
    ".sympy.core.numbers.py@@igcdex": "def igcdex(a, b):\n    if not a and (not b):\n        return (0, 1, 0)\n    if not a:\n        return (0, b // abs(b), abs(b))\n    if not b:\n        return (a // abs(a), 0, abs(a))\n    if a < 0:\n        a, x_sign = (-a, -1)\n    else:\n        x_sign = 1\n    if b < 0:\n        b, y_sign = (-b, -1)\n    else:\n        y_sign = 1\n    x, y, r, s = (1, 0, 0, 1)\n    while b:\n        c, q = (a % b, a // b)\n        a, b, r, s, x, y = (b, c, x - q * r, y - q * s, r, s)\n    return (x * x_sign, y * y_sign, a)",
    ".sympy.polys.galoistools.py@@gf_quo_ground": "def gf_quo_ground(f, a, p, K):\n    return gf_mul_ground(f, K.invert(a, p), p, K)",
    ".sympy.polys.galoistools.py@@gf_mul_ground": "def gf_mul_ground(f, a, p, K):\n    if not a:\n        return []\n    else:\n        return [a * b % p for b in f]",
    ".sympy.polys.galoistools.py@@gf_factor_sqf": "def gf_factor_sqf(f, p, K, method=None):\n    lc, f = gf_monic(f, p, K)\n    if gf_degree(f) < 1:\n        return (lc, [])\n    method = method or query('GF_FACTOR_METHOD')\n    if method is not None:\n        factors = _factor_methods[method](f, p, K)\n    else:\n        factors = gf_zassenhaus(f, p, K)\n    return (lc, factors)",
    ".sympy.polys.galoistools.py@@gf_zassenhaus": "def gf_zassenhaus(f, p, K):\n    factors = []\n    for factor, n in gf_ddf_zassenhaus(f, p, K):\n        factors += gf_edf_zassenhaus(factor, n, p, K)\n    return _sort_factors(factors, multiple=False)",
    ".sympy.polys.galoistools.py@@gf_ddf_zassenhaus": "def gf_ddf_zassenhaus(f, p, K):\n    i, g, factors = (1, [K.one, K.zero], [])\n    b = gf_frobenius_monomial_base(f, p, K)\n    while 2 * i <= gf_degree(f):\n        g = gf_frobenius_map(g, f, b, p, K)\n        h = gf_gcd(f, gf_sub(g, [K.one, K.zero], p, K), p, K)\n        if h != [K.one]:\n            factors.append((h, i))\n            f = gf_quo(f, h, p, K)\n            g = gf_rem(g, f, p, K)\n            b = gf_frobenius_monomial_base(f, p, K)\n        i += 1\n    if f != [K.one]:\n        return factors + [(f, gf_degree(f))]\n    else:\n        return factors",
    ".sympy.polys.galoistools.py@@gf_frobenius_monomial_base": "def gf_frobenius_monomial_base(g, p, K):\n    n = gf_degree(g)\n    if n == 0:\n        return []\n    b = [0] * n\n    b[0] = [1]\n    if p < n:\n        for i in range(1, n):\n            mon = gf_lshift(b[i - 1], p, K)\n            b[i] = gf_rem(mon, g, p, K)\n    elif n > 1:\n        b[1] = gf_pow_mod([K.one, K.zero], p, g, p, K)\n        for i in range(2, n):\n            b[i] = gf_mul(b[i - 1], b[1], p, K)\n            b[i] = gf_rem(b[i], g, p, K)\n    return b",
    ".sympy.polys.galoistools.py@@gf_pow_mod": "def gf_pow_mod(f, n, g, p, K):\n    if not n:\n        return [K.one]\n    elif n == 1:\n        return gf_rem(f, g, p, K)\n    elif n == 2:\n        return gf_rem(gf_sqr(f, p, K), g, p, K)\n    h = [K.one]\n    while True:\n        if n & 1:\n            h = gf_mul(h, f, p, K)\n            h = gf_rem(h, g, p, K)\n            n -= 1\n        n >>= 1\n        if not n:\n            break\n        f = gf_sqr(f, p, K)\n        f = gf_rem(f, g, p, K)\n    return h",
    ".sympy.polys.galoistools.py@@gf_mul": "def gf_mul(f, g, p, K):\n    df = gf_degree(f)\n    dg = gf_degree(g)\n    dh = df + dg\n    h = [0] * (dh + 1)\n    for i in range(0, dh + 1):\n        coeff = K.zero\n        for j in range(max(0, i - dg), min(i, df) + 1):\n            coeff += f[j] * g[i - j]\n        h[i] = coeff % p\n    return gf_strip(h)",
    ".sympy.polys.galoistools.py@@gf_sqr": "def gf_sqr(f, p, K):\n    df = gf_degree(f)\n    dh = 2 * df\n    h = [0] * (dh + 1)\n    for i in range(0, dh + 1):\n        coeff = K.zero\n        jmin = max(0, i - df)\n        jmax = min(i, df)\n        n = jmax - jmin + 1\n        jmax = jmin + n // 2 - 1\n        for j in range(jmin, jmax + 1):\n            coeff += f[j] * f[i - j]\n        coeff += coeff\n        if n & 1:\n            elem = f[jmax + 1]\n            coeff += elem ** 2\n        h[i] = coeff % p\n    return gf_strip(h)",
    ".sympy.polys.galoistools.py@@gf_frobenius_map": "def gf_frobenius_map(f, g, b, p, K):\n    m = gf_degree(g)\n    if gf_degree(f) >= m:\n        f = gf_rem(f, g, p, K)\n    if not f:\n        return []\n    n = gf_degree(f)\n    sf = [f[-1]]\n    for i in range(1, n + 1):\n        v = gf_mul_ground(b[i], f[n - i], p, K)\n        sf = gf_add(sf, v, p, K)\n    return sf",
    ".sympy.polys.galoistools.py@@gf_add": "def gf_add(f, g, p, K):\n    if not f:\n        return g\n    if not g:\n        return f\n    df = gf_degree(f)\n    dg = gf_degree(g)\n    if df == dg:\n        return gf_strip([(a + b) % p for a, b in zip(f, g)])\n    else:\n        k = abs(df - dg)\n        if df > dg:\n            h, f = (f[:k], f[k:])\n        else:\n            h, g = (g[:k], g[k:])\n        return h + [(a + b) % p for a, b in zip(f, g)]",
    ".sympy.polys.galoistools.py@@gf_sub": "def gf_sub(f, g, p, K):\n    if not g:\n        return f\n    if not f:\n        return gf_neg(g, p, K)\n    df = gf_degree(f)\n    dg = gf_degree(g)\n    if df == dg:\n        return gf_strip([(a - b) % p for a, b in zip(f, g)])\n    else:\n        k = abs(df - dg)\n        if df > dg:\n            h, f = (f[:k], f[k:])\n        else:\n            h, g = (gf_neg(g[:k], p, K), g[k:])\n        return h + [(a - b) % p for a, b in zip(f, g)]",
    ".sympy.polys.galoistools.py@@gf_quo": "def gf_quo(f, g, p, K):\n    df = gf_degree(f)\n    dg = gf_degree(g)\n    if not g:\n        raise ZeroDivisionError('polynomial division')\n    elif df < dg:\n        return []\n    inv = K.invert(g[0], p)\n    h, dq, dr = (f[:], df - dg, dg - 1)\n    for i in range(0, dq + 1):\n        coeff = h[i]\n        for j in range(max(0, dg - i), min(df - i, dr) + 1):\n            coeff -= h[i + j - dg] * g[dg - j]\n        h[i] = coeff * inv % p\n    return h[:dq + 1]",
    ".sympy.polys.galoistools.py@@gf_edf_zassenhaus": "def gf_edf_zassenhaus(f, n, p, K):\n    factors, q = ([f], int(p))\n    if gf_degree(f) <= n:\n        return factors\n    N = gf_degree(f) // n\n    if p != 2:\n        b = gf_frobenius_monomial_base(f, p, K)\n    while len(factors) < N:\n        r = gf_random(2 * n - 1, p, K)\n        if p == 2:\n            h = r\n            for i in range(0, 2 ** (n * N - 1)):\n                r = gf_pow_mod(r, 2, f, p, K)\n                h = gf_add(h, r, p, K)\n            g = gf_gcd(f, h, p, K)\n        else:\n            h = _gf_pow_pnm1d2(r, n, f, b, p, K)\n            g = gf_gcd(f, gf_sub_ground(h, K.one, p, K), p, K)\n        if g != [K.one] and g != f:\n            factors = gf_edf_zassenhaus(g, n, p, K) + gf_edf_zassenhaus(gf_quo(f, g, p, K), n, p, K)\n    return _sort_factors(factors, multiple=False)",
    ".sympy.polys.galoistools.py@@gf_random": "def gf_random(n, p, K):\n    return [K.one] + [K(int(uniform(0, p))) for i in range(0, n)]",
    ".sympy.polys.galoistools.py@@_gf_pow_pnm1d2": "def _gf_pow_pnm1d2(f, n, g, b, p, K):\n    f = gf_rem(f, g, p, K)\n    h = f\n    r = f\n    for i in range(1, n):\n        h = gf_frobenius_map(h, g, b, p, K)\n        r = gf_mul(r, h, p, K)\n        r = gf_rem(r, g, p, K)\n    res = gf_pow_mod(r, (p - 1) // 2, g, p, K)\n    return res",
    ".sympy.polys.galoistools.py@@gf_sub_ground": "def gf_sub_ground(f, a, p, K):\n    if not f:\n        a = -a % p\n    else:\n        a = (f[-1] - a) % p\n        if len(f) > 1:\n            return f[:-1] + [a]\n    if not a:\n        return []\n    else:\n        return [a]",
    ".sympy.polys.polyutils.py@@_sort_factors": "def _sort_factors(factors, **args):\n\n    def order_if_multiple_key(factor):\n        f, n = factor\n        return (len(f), n, f)\n\n    def order_no_multiple_key(f):\n        return (len(f), f)\n    if args.get('multiple', True):\n        return sorted(factors, key=order_if_multiple_key)\n    else:\n        return sorted(factors, key=order_no_multiple_key)",
    ".sympy.polys.polyutils.py@@order_no_multiple_key": "def order_no_multiple_key(f):\n    return (len(f), f)",
    ".sympy.polys.galoistools.py@@gf_to_int_poly": "def gf_to_int_poly(f, p, symmetric=True):\n    if symmetric:\n        return [gf_int(c, p) for c in f]\n    else:\n        return f",
    ".sympy.polys.galoistools.py@@gf_int": "def gf_int(a, p):\n    if a <= p // 2:\n        return a\n    else:\n        return a - p",
    ".sympy.polys.factortools.py@@dup_zz_hensel_lift": "def dup_zz_hensel_lift(p, f, f_list, l, K):\n    r = len(f_list)\n    lc = dup_LC(f, K)\n    if r == 1:\n        F = dup_mul_ground(f, K.gcdex(lc, p ** l)[0], K)\n        return [dup_trunc(F, p ** l, K)]\n    m = p\n    k = r // 2\n    d = int(_ceil(_log(l, 2)))\n    g = gf_from_int_poly([lc], p)\n    for f_i in f_list[:k]:\n        g = gf_mul(g, gf_from_int_poly(f_i, p), p, K)\n    h = gf_from_int_poly(f_list[k], p)\n    for f_i in f_list[k + 1:]:\n        h = gf_mul(h, gf_from_int_poly(f_i, p), p, K)\n    s, t, _ = gf_gcdex(g, h, p, K)\n    g = gf_to_int_poly(g, p)\n    h = gf_to_int_poly(h, p)\n    s = gf_to_int_poly(s, p)\n    t = gf_to_int_poly(t, p)\n    for _ in range(1, d + 1):\n        (g, h, s, t), m = (dup_zz_hensel_step(m, f, g, h, s, t, K), m ** 2)\n    return dup_zz_hensel_lift(p, g, f_list[:k], l, K) + dup_zz_hensel_lift(p, h, f_list[k:], l, K)",
    ".sympy.polys.galoistools.py@@gf_gcdex": "def gf_gcdex(f, g, p, K):\n    if not (f or g):\n        return ([K.one], [], [])\n    p0, r0 = gf_monic(f, p, K)\n    p1, r1 = gf_monic(g, p, K)\n    if not f:\n        return ([], [K.invert(p1, p)], r1)\n    if not g:\n        return ([K.invert(p0, p)], [], r0)\n    s0, s1 = ([K.invert(p0, p)], [])\n    t0, t1 = ([], [K.invert(p1, p)])\n    while True:\n        Q, R = gf_div(r0, r1, p, K)\n        if not R:\n            break\n        (lc, r1), r0 = (gf_monic(R, p, K), r1)\n        inv = K.invert(lc, p)\n        s = gf_sub_mul(s0, s1, Q, p, K)\n        t = gf_sub_mul(t0, t1, Q, p, K)\n        s1, s0 = (gf_mul_ground(s, inv, p, K), s1)\n        t1, t0 = (gf_mul_ground(t, inv, p, K), t1)\n    return (s1, t1, r1)",
    ".sympy.polys.galoistools.py@@gf_sub_mul": "def gf_sub_mul(f, g, h, p, K):\n    return gf_sub(f, gf_mul(g, h, p, K), p, K)",
    ".sympy.polys.galoistools.py@@gf_neg": "def gf_neg(f, p, K):\n    return [-coeff % p for coeff in f]",
    ".sympy.polys.factortools.py@@dup_zz_hensel_step": "def dup_zz_hensel_step(m, f, g, h, s, t, K):\n    M = m ** 2\n    e = dup_sub_mul(f, g, h, K)\n    e = dup_trunc(e, M, K)\n    q, r = dup_div(dup_mul(s, e, K), h, K)\n    q = dup_trunc(q, M, K)\n    r = dup_trunc(r, M, K)\n    u = dup_add(dup_mul(t, e, K), dup_mul(q, g, K), K)\n    G = dup_trunc(dup_add(g, u, K), M, K)\n    H = dup_trunc(dup_add(h, r, K), M, K)\n    u = dup_add(dup_mul(s, G, K), dup_mul(t, H, K), K)\n    b = dup_trunc(dup_sub(u, [K.one], K), M, K)\n    c, d = dup_div(dup_mul(s, b, K), H, K)\n    c = dup_trunc(c, M, K)\n    d = dup_trunc(d, M, K)\n    u = dup_add(dup_mul(t, b, K), dup_mul(c, G, K), K)\n    S = dup_trunc(dup_sub(s, d, K), M, K)\n    T = dup_trunc(dup_sub(t, u, K), M, K)\n    return (G, H, S, T)",
    ".sympy.polys.densearith.py@@dup_sub_mul": "def dup_sub_mul(f, g, h, K):\n    return dup_sub(f, dup_mul(g, h, K), K)",
    ".sympy.polys.densearith.py@@dup_mul": "def dup_mul(f, g, K):\n    if f == g:\n        return dup_sqr(f, K)\n    if not (f and g):\n        return []\n    df = dup_degree(f)\n    dg = dup_degree(g)\n    n = max(df, dg) + 1\n    if n < 100:\n        h = []\n        for i in range(0, df + dg + 1):\n            coeff = K.zero\n            for j in range(max(0, i - dg), min(df, i) + 1):\n                coeff += f[j] * g[i - j]\n            h.append(coeff)\n        return dup_strip(h)\n    else:\n        n2 = n // 2\n        fl, gl = (dup_slice(f, 0, n2, K), dup_slice(g, 0, n2, K))\n        fh = dup_rshift(dup_slice(f, n2, n, K), n2, K)\n        gh = dup_rshift(dup_slice(g, n2, n, K), n2, K)\n        lo, hi = (dup_mul(fl, gl, K), dup_mul(fh, gh, K))\n        mid = dup_mul(dup_add(fl, fh, K), dup_add(gl, gh, K), K)\n        mid = dup_sub(mid, dup_add(lo, hi, K), K)\n        return dup_add(dup_add(lo, dup_lshift(mid, n2, K), K), dup_lshift(hi, 2 * n2, K), K)",
    ".sympy.polys.densetools.py@@dup_trunc": "def dup_trunc(f, p, K):\n    if K.is_ZZ:\n        g = []\n        for c in f:\n            c = c % p\n            if c > p // 2:\n                g.append(c - p)\n            else:\n                g.append(c)\n    else:\n        g = [c % p for c in f]\n    return dup_strip(g)",
    ".sympy.polys.densearith.py@@dup_add": "def dup_add(f, g, K):\n    if not f:\n        return g\n    if not g:\n        return f\n    df = dup_degree(f)\n    dg = dup_degree(g)\n    if df == dg:\n        return dup_strip([a + b for a, b in zip(f, g)])\n    else:\n        k = abs(df - dg)\n        if df > dg:\n            h, f = (f[:k], f[k:])\n        else:\n            h, g = (g[:k], g[k:])\n        return h + [a + b for a, b in zip(f, g)]",
    ".sympy.utilities.iterables.py@@subsets": "def subsets(seq, k=None, repetition=False):\n    if k is None:\n        for k in range(len(seq) + 1):\n            for i in subsets(seq, k, repetition):\n                yield i\n    elif not repetition:\n        for i in combinations(seq, k):\n            yield i\n    else:\n        for i in combinations_with_replacement(seq, k):\n            yield i",
    ".sympy.polys.factortools.py@@_test_pl": "def _test_pl(fc, q, pl):\n    if q > pl // 2:\n        q = q - pl\n    if not q:\n        return True\n    return fc % q == 0",
    ".sympy.polys.densearith.py@@dup_l1_norm": "def dup_l1_norm(f, K):\n    if not f:\n        return K.zero\n    else:\n        return sum(dup_abs(f, K))",
    ".sympy.polys.factortools.py@@dup_trial_division": "def dup_trial_division(f, factors, K):\n    result = []\n    for factor in factors:\n        k = 0\n        while True:\n            q, r = dup_div(f, factor, K)\n            if not r:\n                f, k = (q, k + 1)\n            else:\n                break\n        result.append((factor, k))\n    return _sort_factors(result)",
    ".sympy.polys.polyutils.py@@order_if_multiple_key": "def order_if_multiple_key(factor):\n    f, n = factor\n    return (len(f), n, f)",
    ".sympy.polys.polytools.py@@Poly.gen": "def gen(self):\n    return self.gens[0]",
    ".sympy.polys.polyoptions.py@@BooleanOption.preprocess": "def preprocess(cls, value):\n    if value in [True, False]:\n        return bool(value)\n    else:\n        raise OptionError(\"'%s' must have a boolean value assigned, got %s\" % (cls.option, value))",
    ".sympy.polys.polyroots.py@@_try_heuristics": "def _try_heuristics(f):\n    if f.is_ground:\n        return []\n    if f.is_monomial:\n        return [S(0)] * f.degree()\n    if f.length() == 2:\n        if f.degree() == 1:\n            return list(map(cancel, roots_linear(f)))\n        else:\n            return roots_binomial(f)\n    result = []\n    for i in [-1, 1]:\n        if not f.eval(i):\n            f = f.quo(Poly(f.gen - i, f.gen))\n            result.append(i)\n            break\n    n = f.degree()\n    if n == 1:\n        result += list(map(cancel, roots_linear(f)))\n    elif n == 2:\n        result += list(map(cancel, roots_quadratic(f)))\n    elif f.is_cyclotomic:\n        result += roots_cyclotomic(f)\n    elif n == 3 and cubics:\n        result += roots_cubic(f, trig=trig)\n    elif n == 4 and quartics:\n        result += roots_quartic(f)\n    elif n == 5 and quintics:\n        result += roots_quintic(f)\n    return result",
    ".sympy.polys.polytools.py@@Poly.is_monomial": "def is_monomial(f):\n    return f.rep.is_monomial",
    ".sympy.polys.polyclasses.py@@DMP.is_monomial": "def is_monomial(f):\n    return len(f.to_dict()) <= 1",
    ".sympy.polys.polyclasses.py@@DMP.to_dict": "def to_dict(f, zero=False):\n    return dmp_to_dict(f.rep, f.lev, f.dom, zero=zero)",
    ".sympy.polys.polyroots.py@@roots_linear": "def roots_linear(f):\n    r = -f.nth(0) / f.nth(1)\n    dom = f.get_domain()\n    if not dom.is_Numerical:\n        if dom.is_Composite:\n            r = factor(r)\n        else:\n            r = simplify(r)\n    return [r]",
    ".sympy.polys.polytools.py@@Poly.nth": "def nth(f, *N):\n    if hasattr(f.rep, 'nth'):\n        if len(N) != len(f.gens):\n            raise ValueError('exponent of each generator must be specified')\n        result = f.rep.nth(*list(map(int, N)))\n    else:\n        raise OperationNotSupported(f, 'nth')\n    return f.rep.dom.to_sympy(result)",
    ".sympy.polys.polyclasses.py@@DMP.nth": "def nth(f, *N):\n    if all((isinstance(n, int) for n in N)):\n        return dmp_ground_nth(f.rep, N, f.lev, f.dom)\n    else:\n        raise TypeError('a sequence of integers expected')",
    ".sympy.polys.densebasic.py@@dmp_ground_nth": "def dmp_ground_nth(f, N, u, K):\n    v = u\n    for n in N:\n        if n < 0:\n            raise IndexError('`n` must be non-negative, got %i' % n)\n        elif n >= len(f):\n            return K.zero\n        else:\n            d = dmp_degree(f, v)\n            if d == -oo:\n                d = -1\n            f, v = (f[d - n], v - 1)\n    return f",
    ".sympy.core.numbers.py@@NegativeOne.__neg__": "def __neg__():\n    return S.One",
    ".sympy.core.numbers.py@@Rational.__div__": "def __div__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, Integer):\n            if self.p and other.p == S.Zero:\n                return S.ComplexInfinity\n            else:\n                return Rational(self.p, self.q * other.p, igcd(self.p, other.p))\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.q, self.q * other.p, igcd(self.p, other.p) * igcd(self.q, other.q))\n        elif isinstance(other, Float):\n            return self * (1 / other)\n        else:\n            return Number.__div__(self, other)\n    return Number.__div__(self, other)",
    ".sympy.polys.polytools.py@@cancel": "def cancel(f, *gens, **args):\n    from sympy.core.exprtools import factor_terms\n    from sympy.functions.elementary.piecewise import Piecewise\n    options.allowed_flags(args, ['polys'])\n    f = sympify(f)\n    if not isinstance(f, (tuple, Tuple)):\n        if f.is_Number or isinstance(f, Relational) or (not isinstance(f, Expr)):\n            return f\n        f = factor_terms(f, radical=True)\n        p, q = f.as_numer_denom()\n    elif len(f) == 2:\n        p, q = f\n    elif isinstance(f, Tuple):\n        return factor_terms(f)\n    else:\n        raise ValueError('unexpected argument: %s' % f)\n    try:\n        (F, G), opt = parallel_poly_from_expr((p, q), *gens, **args)\n    except PolificationFailed:\n        if not isinstance(f, (tuple, Tuple)):\n            return f\n        else:\n            return (S.One, p, q)\n    except PolynomialError as msg:\n        if f.is_commutative and (not f.has(Piecewise)):\n            raise PolynomialError(msg)\n        if f.is_Add or f.is_Mul:\n            c, nc = sift(f.args, lambda x: x.is_commutative is True and (not x.has(Piecewise)), binary=True)\n            nc = [cancel(i) for i in nc]\n            return f.func(cancel(f.func._from_args(c)), *nc)\n        else:\n            reps = []\n            pot = preorder_traversal(f)\n            next(pot)\n            for e in pot:\n                if isinstance(e, (tuple, Tuple, BooleanAtom)):\n                    continue\n                try:\n                    reps.append((e, cancel(e)))\n                    pot.skip()\n                except NotImplementedError:\n                    pass\n            return f.xreplace(dict(reps))\n    c, P, Q = F.cancel(G)\n    if not isinstance(f, (tuple, Tuple)):\n        return c * (P.as_expr() / Q.as_expr())\n    elif not opt.polys:\n        return (c, P.as_expr(), Q.as_expr())\n    else:\n        return (c, P, Q)",
    ".sympy.polys.polyoptions.py@@allowed_flags": "def allowed_flags(args, flags):\n    flags = set(flags)\n    for arg in args.keys():\n        try:\n            if Options.__options__[arg].is_Flag and (not arg in flags):\n                raise FlagError(\"'%s' flag is not allowed in this context\" % arg)\n        except KeyError:\n            raise OptionError(\"'%s' is not a valid option\" % arg)",
    ".sympy.polys.polyroots.py@@_update_dict": "def _update_dict(result, root, k):\n    if root in result:\n        result[root] += k\n    else:\n        result[root] = k",
    ".sympy.core.numbers.py@@Integer.__neg__": "def __neg__(self):\n    return Integer(-self.p)",
    ".sympy.core.numbers.py@@One.__neg__": "def __neg__():\n    return S.NegativeOne",
    ".sympy.core.operations.py@@AssocOp._new_rawargs": "def _new_rawargs(self, *args, **kwargs):\n    if kwargs.pop('reeval', True) and self.is_commutative is False:\n        is_commutative = None\n    else:\n        is_commutative = self.is_commutative\n    return self._from_args(args, is_commutative)",
    ".sympy.functions.combinatorial.factorials.py@@RisingFactorial._eval_is_integer": "def _eval_is_integer(self):\n    return fuzzy_and((self.args[0].is_integer, self.args[1].is_integer, self.args[1].is_nonnegative))",
    ".sympy.core.logic.py@@_fuzzy_group": "def _fuzzy_group(args, quick_exit=False):\n    saw_other = False\n    for a in args:\n        if a is True:\n            continue\n        if a is None:\n            return\n        if quick_exit and saw_other:\n            return\n        saw_other = True\n    return not saw_other",
    ".sympy.core.expr.py@@Expr._eval_is_negative": "def _eval_is_negative(self):\n    from sympy.polys.numberfields import minimal_polynomial\n    from sympy.polys.polyerrors import NotAlgebraic\n    if self.is_number:\n        if self.is_real is False:\n            return False\n        try:\n            n2 = self._eval_evalf(2)\n            if n2 is None:\n                raise AttributeError\n            if n2._prec == 1:\n                raise AttributeError\n            if n2 == S.NaN:\n                raise AttributeError\n        except (AttributeError, ValueError):\n            return None\n        n, i = self.evalf(2).as_real_imag()\n        if not i.is_Number or not n.is_Number:\n            return False\n        if n._prec != 1 and i._prec != 1:\n            return bool(not i and n < 0)\n        elif n._prec == 1 and (not i or i._prec == 1) and self.is_algebraic and (not self.has(Function)):\n            try:\n                if minimal_polynomial(self).is_Symbol:\n                    return False\n            except (NotAlgebraic, NotImplementedError):\n                pass",
    ".sympy.core.expr.py@@Expr._eval_is_positive": "def _eval_is_positive(self):\n    from sympy.polys.numberfields import minimal_polynomial\n    from sympy.polys.polyerrors import NotAlgebraic\n    if self.is_number:\n        if self.is_real is False:\n            return False\n        try:\n            n2 = self._eval_evalf(2)\n            if n2 is None:\n                raise AttributeError\n            if n2._prec == 1:\n                raise AttributeError\n            if n2 == S.NaN:\n                raise AttributeError\n        except (AttributeError, ValueError):\n            return None\n        n, i = self.evalf(2).as_real_imag()\n        if not i.is_Number or not n.is_Number:\n            return False\n        if n._prec != 1 and i._prec != 1:\n            return bool(not i and n > 0)\n        elif n._prec == 1 and (not i or i._prec == 1) and self.is_algebraic and (not self.has(Function)):\n            try:\n                if minimal_polynomial(self).is_Symbol:\n                    return False\n            except (NotAlgebraic, NotImplementedError):\n                pass",
    ".sympy.core.function.py@@Function._eval_is_complex": "def _eval_is_complex(self):\n    return fuzzy_and((a.is_complex for a in self.args))",
    ".sympy.core.function.py@@Function.as_base_exp": "def as_base_exp(self):\n    return (self, S.One)",
    ".sympy.core.add.py@@Add._eval_is_zero": "def _eval_is_zero(self):\n    if self.is_commutative is False:\n        return\n    nz = []\n    z = 0\n    im_or_z = False\n    im = False\n    for a in self.args:\n        if a.is_real:\n            if a.is_zero:\n                z += 1\n            elif a.is_zero is False:\n                nz.append(a)\n            else:\n                return\n        elif a.is_imaginary:\n            im = True\n        elif (S.ImaginaryUnit * a).is_real:\n            im_or_z = True\n        else:\n            return\n    if z == len(self.args):\n        return True\n    if len(nz) == len(self.args):\n        return None\n    b = self.func(*nz)\n    if b.is_zero:\n        if not im_or_z and (not im):\n            return True\n        if im and (not im_or_z):\n            return False\n    if b.is_zero is False:\n        return False",
    ".sympy.core.add.py@@Add._eval_is_irrational": "def _eval_is_irrational(self):\n    for t in self.args:\n        a = t.is_irrational\n        if a:\n            others = list(self.args)\n            others.remove(t)\n            if all((x.is_rational is True for x in others)):\n                return True\n            return None\n        if a is None:\n            return\n    return False",
    ".sympy.core.add.py@@Add._eval_is_positive": "def _eval_is_positive(self):\n    from sympy.core.exprtools import _monotonic_sign\n    if self.is_number:\n        return super(Add, self)._eval_is_positive()\n    c, a = self.as_coeff_Add()\n    if not c.is_zero:\n        v = _monotonic_sign(a)\n        if v is not None:\n            s = v + c\n            if s != self and s.is_positive and a.is_nonnegative:\n                return True\n            if len(self.free_symbols) == 1:\n                v = _monotonic_sign(self)\n                if v is not None and v != self and v.is_positive:\n                    return True\n    pos = nonneg = nonpos = unknown_sign = False\n    saw_INF = set()\n    args = [a for a in self.args if not a.is_zero]\n    if not args:\n        return False\n    for a in args:\n        ispos = a.is_positive\n        infinite = a.is_infinite\n        if infinite:\n            saw_INF.add(fuzzy_or((ispos, a.is_nonnegative)))\n            if True in saw_INF and False in saw_INF:\n                return\n        if ispos:\n            pos = True\n            continue\n        elif a.is_nonnegative:\n            nonneg = True\n            continue\n        elif a.is_nonpositive:\n            nonpos = True\n            continue\n        if infinite is None:\n            return\n        unknown_sign = True\n    if saw_INF:\n        if len(saw_INF) > 1:\n            return\n        return saw_INF.pop()\n    elif unknown_sign:\n        return\n    elif not nonpos and (not nonneg) and pos:\n        return True\n    elif not nonpos and pos:\n        return True\n    elif not pos and (not nonneg):\n        return False",
    ".sympy.core.exprtools.py@@_monotonic_sign": "def _monotonic_sign(self):\n    if not self.is_real:\n        return\n    if (-self).is_Symbol:\n        rv = _monotonic_sign(-self)\n        return rv if rv is None else -rv\n    if not self.is_Add and self.as_numer_denom()[1].is_number:\n        s = self\n        if s.is_prime:\n            if s.is_odd:\n                return S(3)\n            else:\n                return S(2)\n        elif s.is_composite:\n            if s.is_odd:\n                return S(9)\n            else:\n                return S(4)\n        elif s.is_positive:\n            if s.is_even:\n                if s.is_prime is False:\n                    return S(4)\n                else:\n                    return S(2)\n            elif s.is_integer:\n                return S.One\n            else:\n                return _eps\n        elif s.is_negative:\n            if s.is_even:\n                return S(-2)\n            elif s.is_integer:\n                return S.NegativeOne\n            else:\n                return -_eps\n        if s.is_zero or s.is_nonpositive or s.is_nonnegative:\n            return S.Zero\n        return None\n    free = self.free_symbols\n    if len(free) == 1:\n        if self.is_polynomial():\n            from sympy.polys.polytools import real_roots\n            from sympy.polys.polyroots import roots\n            from sympy.polys.polyerrors import PolynomialError\n            x = free.pop()\n            x0 = _monotonic_sign(x)\n            if x0 == _eps or x0 == -_eps:\n                x0 = S.Zero\n            if x0 is not None:\n                d = self.diff(x)\n                if d.is_number:\n                    roots = []\n                else:\n                    try:\n                        roots = real_roots(d)\n                    except (PolynomialError, NotImplementedError):\n                        roots = [r for r in roots(d, x) if r.is_real]\n                y = self.subs(x, x0)\n                if x.is_nonnegative and all((r <= x0 for r in roots)):\n                    if y.is_nonnegative and d.is_positive:\n                        if y:\n                            return y if y.is_positive else Dummy('pos', positive=True)\n                        else:\n                            return Dummy('nneg', nonnegative=True)\n                    if y.is_nonpositive and d.is_negative:\n                        if y:\n                            return y if y.is_negative else Dummy('neg', negative=True)\n                        else:\n                            return Dummy('npos', nonpositive=True)\n                elif x.is_nonpositive and all((r >= x0 for r in roots)):\n                    if y.is_nonnegative and d.is_negative:\n                        if y:\n                            return Dummy('pos', positive=True)\n                        else:\n                            return Dummy('nneg', nonnegative=True)\n                    if y.is_nonpositive and d.is_positive:\n                        if y:\n                            return Dummy('neg', negative=True)\n                        else:\n                            return Dummy('npos', nonpositive=True)\n        else:\n            n, d = self.as_numer_denom()\n            den = None\n            if n.is_number:\n                den = _monotonic_sign(d)\n            elif not d.is_number:\n                if _monotonic_sign(n) is not None:\n                    den = _monotonic_sign(d)\n            if den is not None and (den.is_positive or den.is_negative):\n                v = n * den\n                if v.is_positive:\n                    return Dummy('pos', positive=True)\n                elif v.is_nonnegative:\n                    return Dummy('nneg', nonnegative=True)\n                elif v.is_negative:\n                    return Dummy('neg', negative=True)\n                elif v.is_nonpositive:\n                    return Dummy('npos', nonpositive=True)\n        return None\n    c, a = self.as_coeff_Add()\n    v = None\n    if not a.is_polynomial():\n        n, d = a.as_numer_denom()\n        if not (n.is_number or d.is_number):\n            return\n        if (a.is_Mul or a.is_Pow) and a.is_rational and all((p.exp.is_Integer for p in a.atoms(Pow) if p.is_Pow)) and (a.is_positive or a.is_negative):\n            v = S(1)\n            for ai in Mul.make_args(a):\n                if ai.is_number:\n                    v *= ai\n                    continue\n                reps = {}\n                for x in ai.free_symbols:\n                    reps[x] = _monotonic_sign(x)\n                    if reps[x] is None:\n                        return\n                v *= ai.subs(reps)\n    elif c:\n        if not any((p for p in a.atoms(Pow) if not p.is_number)) and (a.is_nonpositive or a.is_nonnegative):\n            free = list(a.free_symbols)\n            p = {}\n            for i in free:\n                v = _monotonic_sign(i)\n                if v is None:\n                    return\n                p[i] = v or (_eps if i.is_nonnegative else -_eps)\n            v = a.xreplace(p)\n    if v is not None:\n        rv = v + c\n        if v.is_nonnegative and rv.is_positive:\n            return rv.subs(_eps, 0)\n        if v.is_nonpositive and rv.is_negative:\n            return rv.subs(_eps, 0)",
    ".sympy.core.add.py@@Add._eval_is_negative": "def _eval_is_negative(self):\n    from sympy.core.exprtools import _monotonic_sign\n    if self.is_number:\n        return super(Add, self)._eval_is_negative()\n    c, a = self.as_coeff_Add()\n    if not c.is_zero:\n        v = _monotonic_sign(a)\n        if v is not None:\n            s = v + c\n            if s != self and s.is_negative and a.is_nonpositive:\n                return True\n            if len(self.free_symbols) == 1:\n                v = _monotonic_sign(self)\n                if v is not None and v != self and v.is_negative:\n                    return True\n    neg = nonpos = nonneg = unknown_sign = False\n    saw_INF = set()\n    args = [a for a in self.args if not a.is_zero]\n    if not args:\n        return False\n    for a in args:\n        isneg = a.is_negative\n        infinite = a.is_infinite\n        if infinite:\n            saw_INF.add(fuzzy_or((isneg, a.is_nonpositive)))\n            if True in saw_INF and False in saw_INF:\n                return\n        if isneg:\n            neg = True\n            continue\n        elif a.is_nonpositive:\n            nonpos = True\n            continue\n        elif a.is_nonnegative:\n            nonneg = True\n            continue\n        if infinite is None:\n            return\n        unknown_sign = True\n    if saw_INF:\n        if len(saw_INF) > 1:\n            return\n        return saw_INF.pop()\n    elif unknown_sign:\n        return\n    elif not nonneg and (not nonpos) and neg:\n        return True\n    elif not nonneg and neg:\n        return True\n    elif not neg and (not nonpos):\n        return False",
    ".sympy.core.add.py@@Add._eval_is_nonpositive": "def _eval_is_nonpositive(self):\n    from sympy.core.exprtools import _monotonic_sign\n    if not self.is_number:\n        c, a = self.as_coeff_Add()\n        if not c.is_zero and a.is_nonpositive:\n            v = _monotonic_sign(a)\n            if v is not None:\n                s = v + c\n                if s != self and s.is_nonpositive:\n                    return True\n                if len(self.free_symbols) == 1:\n                    v = _monotonic_sign(self)\n                    if v is not None and v != self and v.is_nonpositive:\n                        return True",
    ".sympy.core.add.py@@Add._eval_is_odd": "def _eval_is_odd(self):\n    l = [f for f in self.args if not f.is_even is True]\n    if not l:\n        return False\n    if l[0].is_odd:\n        return self._new_rawargs(*l[1:]).is_even",
    ".sympy.core.add.py@@Add._eval_is_nonnegative": "def _eval_is_nonnegative(self):\n    from sympy.core.exprtools import _monotonic_sign\n    if not self.is_number:\n        c, a = self.as_coeff_Add()\n        if not c.is_zero and a.is_nonnegative:\n            v = _monotonic_sign(a)\n            if v is not None:\n                s = v + c\n                if s != self and s.is_nonnegative:\n                    return True\n                if len(self.free_symbols) == 1:\n                    v = _monotonic_sign(self)\n                    if v is not None and v != self and v.is_nonnegative:\n                        return True",
    ".sympy.core.add.py@@Add._eval_is_imaginary": "def _eval_is_imaginary(self):\n    nz = []\n    im_I = []\n    for a in self.args:\n        if a.is_real:\n            if a.is_zero:\n                pass\n            elif a.is_zero is False:\n                nz.append(a)\n            else:\n                return\n        elif a.is_imaginary:\n            im_I.append(a * S.ImaginaryUnit)\n        elif (S.ImaginaryUnit * a).is_real:\n            im_I.append(a * S.ImaginaryUnit)\n        else:\n            return\n    b = self.func(*nz)\n    if b.is_zero:\n        return fuzzy_not(self.func(*im_I).is_zero)\n    elif b.is_zero is False:\n        return False",
    ".sympy.core.numbers.py@@Rational._hashable_content": "def _hashable_content(self):\n    return (self.p, self.q)",
    ".sympy.core.function.py@@Function._eval_is_commutative": "def _eval_is_commutative(self):\n    return fuzzy_and((a.is_commutative for a in self.args))"
}