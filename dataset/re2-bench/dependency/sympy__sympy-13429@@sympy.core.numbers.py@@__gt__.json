{
    ".sympy.core.sympify.py@@_sympify": "def _sympify(a):\n    return sympify(a, strict=True)",
    ".sympy.core.sympify.py@@sympify": "def sympify(a, locals=None, convert_xor=True, strict=False, rational=False, evaluate=None):\n    if evaluate is None:\n        if global_evaluate[0] is False:\n            evaluate = global_evaluate[0]\n        else:\n            evaluate = True\n    try:\n        if a in sympy_classes:\n            return a\n    except TypeError:\n        pass\n    try:\n        cls = a.__class__\n    except AttributeError:\n        cls = type(a)\n    if cls in sympy_classes:\n        return a\n    if cls is type(None):\n        if strict:\n            raise SympifyError(a)\n        else:\n            return a\n    if type(a).__module__ == 'numpy':\n        import numpy as np\n        if np.isscalar(a):\n            return _convert_numpy_types(a)\n    try:\n        return converter[cls](a)\n    except KeyError:\n        for superclass in getmro(cls):\n            try:\n                return converter[superclass](a)\n            except KeyError:\n                continue\n    if isinstance(a, CantSympify):\n        raise SympifyError(a)\n    try:\n        return a._sympy_()\n    except AttributeError:\n        pass\n    if not isinstance(a, string_types):\n        for coerce in (float, int):\n            try:\n                return sympify(coerce(a))\n            except (TypeError, ValueError, AttributeError, SympifyError):\n                continue\n    if strict:\n        raise SympifyError(a)\n    try:\n        from ..tensor.array import Array\n        return Array(a.flat, a.shape)\n    except AttributeError:\n        pass\n    if iterable(a):\n        try:\n            return type(a)([sympify(x, locals=locals, convert_xor=convert_xor, rational=rational) for x in a])\n        except TypeError:\n            pass\n    if isinstance(a, dict):\n        try:\n            return type(a)([sympify(x, locals=locals, convert_xor=convert_xor, rational=rational) for x in a.items()])\n        except TypeError:\n            pass\n    try:\n        from .compatibility import unicode\n        a = unicode(a)\n    except Exception as exc:\n        raise SympifyError(a, exc)\n    from sympy.parsing.sympy_parser import parse_expr, TokenError, standard_transformations\n    from sympy.parsing.sympy_parser import convert_xor as t_convert_xor\n    from sympy.parsing.sympy_parser import rationalize as t_rationalize\n    transformations = standard_transformations\n    if rational:\n        transformations += (t_rationalize,)\n    if convert_xor:\n        transformations += (t_convert_xor,)\n    try:\n        a = a.replace('\\n', '')\n        expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n    except (TokenError, SyntaxError) as exc:\n        raise SympifyError('could not parse %r' % a, exc)\n    return expr",
    ".sympy.core.numbers.py@@Infinity.__hash__": "def __hash__(self):\n    return super(Infinity, self).__hash__()",
    ".sympy.core.numbers.py@@Number.__hash__": "def __hash__(self):\n    return super(Number, self).__hash__()",
    ".sympy.core.basic.py@@Basic.__hash__": "def __hash__(self):\n    h = self._mhash\n    if h is None:\n        h = hash((type(self).__name__,) + self._hashable_content())\n        self._mhash = h\n    return h",
    ".sympy.core.numbers.py@@NegativeInfinity.__hash__": "def __hash__(self):\n    return super(NegativeInfinity, self).__hash__()",
    ".sympy.core.assumptions.py@@getit": "def getit(self):\n    try:\n        return self._assumptions[fact]\n    except KeyError:\n        if self._assumptions is self.default_assumptions:\n            self._assumptions = self.default_assumptions.copy()\n        return _ask(fact, self)",
    ".sympy.core.numbers.py@@NaN.__hash__": "def __hash__(self):\n    return super(NaN, self).__hash__()",
    ".sympy.core.numbers.py@@Rational.__hash__": "def __hash__(self):\n    return super(Rational, self).__hash__()",
    ".sympy.core.numbers.py@@NumberSymbol.__hash__": "def __hash__(self):\n    return super(NumberSymbol, self).__hash__()",
    ".sympy.core.sympify.py@@SympifyError.__init__": "def __init__(self, expr, base_exc=None):\n    self.expr = expr\n    self.base_exc = base_exc",
    ".sympy.core.basic.py@@Basic.__str__": "def __str__(self):\n    from sympy.printing import sstr\n    return sstr(self, order=None)",
    ".sympy.printing.str.py@@sstr": "def sstr(expr, **settings):\n    p = StrPrinter(settings)\n    s = p.doprint(expr)\n    return s",
    ".sympy.printing.printer.py@@Printer.__init__": "def __init__(self, settings=None):\n    self._str = str\n    self._settings = self._default_settings.copy()\n    for key, val in self._global_settings.items():\n        if key in self._default_settings:\n            self._settings[key] = val\n    if settings is not None:\n        self._settings.update(settings)\n        if len(self._settings) > len(self._default_settings):\n            for key in self._settings:\n                if key not in self._default_settings:\n                    raise TypeError(\"Unknown setting '%s'.\" % key)\n    self._print_level = 0",
    ".sympy.printing.printer.py@@Printer.doprint": "def doprint(self, expr):\n    return self._str(self._print(expr))",
    ".sympy.printing.printer.py@@Printer._print": "def _print(self, expr, *args, **kwargs):\n    self._print_level += 1\n    try:\n        if self.printmethod and hasattr(expr, self.printmethod) and (not isinstance(expr, BasicMeta)):\n            return getattr(expr, self.printmethod)(self, *args, **kwargs)\n        for cls in type(expr).__mro__:\n            printmethod = '_print_' + cls.__name__\n            if hasattr(self, printmethod):\n                return getattr(self, printmethod)(expr, *args, **kwargs)\n        return self.emptyPrinter(expr)\n    finally:\n        self._print_level -= 1",
    ".sympy.printing.str.py@@StrPrinter._print_NegativeInfinity": "def _print_NegativeInfinity(self, expr):\n    return '-oo'",
    ".sympy.utilities.pytest.py@@raises": "def raises(expectedException, code=None):\n    if code is None:\n        return RaisesContext(expectedException)\n    elif callable(code):\n        try:\n            code()\n        except expectedException:\n            return\n        raise AssertionError('DID NOT RAISE')\n    elif isinstance(code, str):\n        raise TypeError('\\'raises(xxx, \"code\")\\' has been phased out; change \\'raises(xxx, \"expression\")\\' to \\'raises(xxx, lambda: expression)\\', \\'raises(xxx, \"statement\")\\' to \\'with raises(xxx): statement\\'')\n    else:\n        raise TypeError('raises() expects a callable for the 2nd argument.')",
    ".sympy.core.numbers.py@@NegativeInfinity.__le__": "def __le__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s <= %s' % (self, other))\n    if other.is_real:\n        return S.true\n    return Expr.__le__(self, other)",
    ".sympy.core.numbers.py@@NegativeInfinity.__ge__": "def __ge__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s >= %s' % (self, other))\n    if other.is_real:\n        if other.is_finite or other is S.Infinity:\n            return S.false\n        elif other.is_nonnegative:\n            return S.false\n        elif other.is_infinite and other.is_negative:\n            return S.true\n    return Expr.__ge__(self, other)",
    ".sympy.core.expr.py@@Expr.__lt__": "def __lt__(self, other):\n    from sympy import StrictLessThan\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s < %s' % (self, other))\n    for me in (self, other):\n        if me.is_complex and me.is_real is False:\n            raise TypeError('Invalid comparison of complex %s' % me)\n        if me is S.NaN:\n            raise TypeError('Invalid NaN comparison')\n    n2 = _n2(self, other)\n    if n2 is not None:\n        return _sympify(n2 < 0)\n    if self.is_real or other.is_real:\n        dif = self - other\n        if dif.is_negative is not None and dif.is_negative is not dif.is_nonnegative:\n            return sympify(dif.is_negative)\n    return StrictLessThan(self, other, evaluate=False)",
    ".sympy.printing.str.py@@StrPrinter._print_NaN": "def _print_NaN(self, expr):\n    return 'nan'",
    ".sympy.core.expr.py@@Expr.__gt__": "def __gt__(self, other):\n    from sympy import StrictGreaterThan\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s > %s' % (self, other))\n    for me in (self, other):\n        if me.is_complex and me.is_real is False:\n            raise TypeError('Invalid comparison of complex %s' % me)\n        if me is S.NaN:\n            raise TypeError('Invalid NaN comparison')\n    n2 = _n2(self, other)\n    if n2 is not None:\n        return _sympify(n2 > 0)\n    if self.is_real or other.is_real:\n        dif = self - other\n        if dif.is_positive is not None and dif.is_positive is not dif.is_nonpositive:\n            return sympify(dif.is_positive)\n    return StrictGreaterThan(self, other, evaluate=False)",
    ".sympy.core.expr.py@@Expr.__le__": "def __le__(self, other):\n    from sympy import LessThan\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s <= %s' % (self, other))\n    for me in (self, other):\n        if me.is_complex and me.is_real is False:\n            raise TypeError('Invalid comparison of complex %s' % me)\n        if me is S.NaN:\n            raise TypeError('Invalid NaN comparison')\n    n2 = _n2(self, other)\n    if n2 is not None:\n        return _sympify(n2 <= 0)\n    if self.is_real or other.is_real:\n        dif = self - other\n        if dif.is_nonpositive is not None and dif.is_nonpositive is not dif.is_positive:\n            return sympify(dif.is_nonpositive)\n    return LessThan(self, other, evaluate=False)",
    ".sympy.core.expr.py@@Expr.__ge__": "def __ge__(self, other):\n    from sympy import GreaterThan\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s >= %s' % (self, other))\n    for me in (self, other):\n        if me.is_complex and me.is_real is False:\n            raise TypeError('Invalid comparison of complex %s' % me)\n        if me is S.NaN:\n            raise TypeError('Invalid NaN comparison')\n    n2 = _n2(self, other)\n    if n2 is not None:\n        return _sympify(n2 >= 0)\n    if self.is_real or other.is_real:\n        dif = self - other\n        if dif.is_nonnegative is not None and dif.is_nonnegative is not dif.is_negative:\n            return sympify(dif.is_nonnegative)\n    return GreaterThan(self, other, evaluate=False)",
    ".sympy.core.symbol.py@@symbols": "def symbols(names, **args):\n    result = []\n    if isinstance(names, string_types):\n        marker = 0\n        literals = ['\\\\,', '\\\\:', '\\\\ ']\n        for i in range(len(literals)):\n            lit = literals.pop(0)\n            if lit in names:\n                while chr(marker) in names:\n                    marker += 1\n                lit_char = chr(marker)\n                marker += 1\n                names = names.replace(lit, lit_char)\n                literals.append((lit_char, lit[1:]))\n\n        def literal(s):\n            if literals:\n                for c, l in literals:\n                    s = s.replace(c, l)\n            return s\n        names = names.strip()\n        as_seq = names.endswith(',')\n        if as_seq:\n            names = names[:-1].rstrip()\n        if not names:\n            raise ValueError('no symbols given')\n        names = [n.strip() for n in names.split(',')]\n        if not all((n for n in names)):\n            raise ValueError('missing symbol between commas')\n        for i in range(len(names) - 1, -1, -1):\n            names[i:i + 1] = names[i].split()\n        cls = args.pop('cls', Symbol)\n        seq = args.pop('seq', as_seq)\n        for name in names:\n            if not name:\n                raise ValueError('missing symbol')\n            if ':' not in name:\n                symbol = cls(literal(name), **args)\n                result.append(symbol)\n                continue\n            split = _range.split(name)\n            for i in range(len(split) - 1):\n                if i and ':' in split[i] and (split[i] != ':') and split[i - 1].endswith('(') and split[i + 1].startswith(')'):\n                    split[i - 1] = split[i - 1][:-1]\n                    split[i + 1] = split[i + 1][1:]\n            for i, s in enumerate(split):\n                if ':' in s:\n                    if s[-1].endswith(':'):\n                        raise ValueError('missing end range')\n                    a, b = s.split(':')\n                    if b[-1] in string.digits:\n                        a = 0 if not a else int(a)\n                        b = int(b)\n                        split[i] = [str(c) for c in range(a, b)]\n                    else:\n                        a = a or 'a'\n                        split[i] = [string.ascii_letters[c] for c in range(string.ascii_letters.index(a), string.ascii_letters.index(b) + 1)]\n                    if not split[i]:\n                        break\n                else:\n                    split[i] = [s]\n            else:\n                seq = True\n                if len(split) == 1:\n                    names = split[0]\n                else:\n                    names = [''.join(s) for s in cartes(*split)]\n                if literals:\n                    result.extend([cls(literal(s), **args) for s in names])\n                else:\n                    result.extend([cls(s, **args) for s in names])\n        if not seq and len(result) <= 1:\n            if not result:\n                return ()\n            return result[0]\n        return tuple(result)\n    else:\n        for name in names:\n            result.append(symbols(name, **args))\n        return type(names)(result)",
    ".sympy.core.symbol.py@@literal": "def literal(s):\n    if literals:\n        for c, l in literals:\n            s = s.replace(c, l)\n    return s",
    ".sympy.core.symbol.py@@Wild.__new__": "def __new__(cls, name, exclude=(), properties=(), **assumptions):\n    exclude = tuple([sympify(x) for x in exclude])\n    properties = tuple(properties)\n    cls._sanitize(assumptions, cls)\n    return Wild.__xnew__(cls, name, exclude, properties, **assumptions)",
    ".sympy.core.symbol.py@@Symbol._sanitize": "def _sanitize(assumptions, obj=None):\n    is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n    if is_commutative is None:\n        whose = '%s ' % obj.__name__ if obj else ''\n        raise ValueError('%scommutativity must be True or False.' % whose)\n    for key in list(assumptions.keys()):\n        from collections import defaultdict\n        from sympy.utilities.exceptions import SymPyDeprecationWarning\n        keymap = defaultdict(lambda: None)\n        keymap.update({'bounded': 'finite', 'unbounded': 'infinite', 'infinitesimal': 'zero'})\n        if keymap[key]:\n            SymPyDeprecationWarning(feature='%s assumption' % key, useinstead='%s' % keymap[key], issue=8071, deprecated_since_version='0.7.6').warn()\n            assumptions[keymap[key]] = assumptions[key]\n            assumptions.pop(key)\n            key = keymap[key]\n        v = assumptions[key]\n        if v is None:\n            assumptions.pop(key)\n            continue\n        assumptions[key] = bool(v)",
    ".sympy.core.logic.py@@fuzzy_bool": "def fuzzy_bool(x):\n    if x is None:\n        return None\n    if x in (True, False):\n        return bool(x)",
    ".sympy.core.symbol.py@@Wild.__xnew__": "def __xnew__(cls, name, exclude, properties, **assumptions):\n    obj = Symbol.__xnew__(cls, name, **assumptions)\n    obj.exclude = exclude\n    obj.properties = properties\n    return obj",
    ".sympy.core.symbol.py@@Symbol.__new_stage2__": "def __new_stage2__(cls, name, **assumptions):\n    if not isinstance(name, string_types):\n        raise TypeError('name should be a string, not %s' % repr(type(name)))\n    obj = Expr.__new__(cls)\n    obj.name = name\n    tmp_asm_copy = assumptions.copy()\n    is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n    assumptions['commutative'] = is_commutative\n    obj._assumptions = StdFactKB(assumptions)\n    obj._assumptions._generator = tmp_asm_copy\n    return obj",
    ".sympy.core.basic.py@@Basic.__new__": "def __new__(cls, *args):\n    obj = object.__new__(cls)\n    obj._assumptions = cls.default_assumptions\n    obj._mhash = None\n    obj._args = args\n    return obj",
    ".sympy.core.assumptions.py@@StdFactKB.__init__": "def __init__(self, facts=None):\n    if not facts:\n        self._generator = {}\n    elif not isinstance(facts, FactKB):\n        self._generator = facts.copy()\n    else:\n        self._generator = facts.generator\n    if facts:\n        self.deduce_all_facts(facts)",
    ".sympy.core.facts.py@@FactKB.deduce_all_facts": "def deduce_all_facts(self, facts):\n    full_implications = self.rules.full_implications\n    beta_triggers = self.rules.beta_triggers\n    beta_rules = self.rules.beta_rules\n    if isinstance(facts, dict):\n        facts = facts.items()\n    while facts:\n        beta_maytrigger = set()\n        for k, v in facts:\n            if not self._tell(k, v) or v is None:\n                continue\n            for key, value in full_implications[k, v]:\n                self._tell(key, value)\n            beta_maytrigger.update(beta_triggers[k, v])\n        facts = []\n        for bidx in beta_maytrigger:\n            bcond, bimpl = beta_rules[bidx]\n            if all((self.get(k) is v for k, v in bcond)):\n                facts.append(bimpl)",
    ".sympy.core.facts.py@@FactKB._tell": "def _tell(self, k, v):\n    if k in self and self[k] is not None:\n        if self[k] == v:\n            return False\n        else:\n            raise InconsistentAssumptions(self, k, v)\n    else:\n        self[k] = v\n        return True",
    ".sympy.core.relational.py@@_Inequality.__new__": "def __new__(cls, lhs, rhs, **options):\n    lhs = _sympify(lhs)\n    rhs = _sympify(rhs)\n    evaluate = options.pop('evaluate', global_evaluate[0])\n    if evaluate:\n        r = cls._eval_relation(lhs, rhs)\n        if r is not None:\n            return r\n    return Relational.__new__(cls, lhs, rhs, **options)",
    ".sympy.core.symbol.py@@Wild._hashable_content": "def _hashable_content(self):\n    return super(Wild, self)._hashable_content() + (self.exclude, self.properties)",
    ".sympy.core.symbol.py@@Symbol._hashable_content": "def _hashable_content(self):\n    return (self.name,) + tuple(sorted(self.assumptions0.items()))",
    ".sympy.core.symbol.py@@Symbol.assumptions0": "def assumptions0(self):\n    return dict(((key, value) for key, value in self._assumptions.items() if value is not None))",
    ".sympy.core.relational.py@@StrictGreaterThan._eval_relation": "def _eval_relation(cls, lhs, rhs):\n    return _sympify(lhs.__gt__(rhs))",
    ".sympy.core.assumptions.py@@_ask": "def _ask(fact, obj):\n    assumptions = obj._assumptions\n    handler_map = obj._prop_handler\n    assumptions._tell(fact, None)\n    try:\n        evaluate = handler_map[fact]\n    except KeyError:\n        pass\n    else:\n        a = evaluate(obj)\n        if a is not None:\n            assumptions.deduce_all_facts(((fact, a),))\n            return a\n    prereq = list(_assume_rules.prereq[fact])\n    shuffle(prereq)\n    for pk in prereq:\n        if pk in assumptions:\n            continue\n        if pk in handler_map:\n            _ask(pk, obj)\n            ret_val = assumptions.get(fact)\n            if ret_val is not None:\n                return ret_val\n    return None",
    ".sympy.core.expr.py@@Expr._eval_is_positive": "def _eval_is_positive(self):\n    from sympy.polys.numberfields import minimal_polynomial\n    from sympy.polys.polyerrors import NotAlgebraic\n    if self.is_number:\n        if self.is_real is False:\n            return False\n        try:\n            n2 = self._eval_evalf(2)\n            if n2 is None:\n                raise AttributeError\n            if n2._prec == 1:\n                raise AttributeError\n            if n2 == S.NaN:\n                raise AttributeError\n        except (AttributeError, ValueError):\n            return None\n        n, i = self.evalf(2).as_real_imag()\n        if not i.is_Number or not n.is_Number:\n            return False\n        if n._prec != 1 and i._prec != 1:\n            return bool(not i and n > 0)\n        elif n._prec == 1 and (not i or i._prec == 1) and self.is_algebraic and (not self.has(Function)):\n            try:\n                if minimal_polynomial(self).is_Symbol:\n                    return False\n            except (NotAlgebraic, NotImplementedError):\n                pass",
    ".sympy.core.expr.py@@Expr._eval_is_negative": "def _eval_is_negative(self):\n    from sympy.polys.numberfields import minimal_polynomial\n    from sympy.polys.polyerrors import NotAlgebraic\n    if self.is_number:\n        if self.is_real is False:\n            return False\n        try:\n            n2 = self._eval_evalf(2)\n            if n2 is None:\n                raise AttributeError\n            if n2._prec == 1:\n                raise AttributeError\n            if n2 == S.NaN:\n                raise AttributeError\n        except (AttributeError, ValueError):\n            return None\n        n, i = self.evalf(2).as_real_imag()\n        if not i.is_Number or not n.is_Number:\n            return False\n        if n._prec != 1 and i._prec != 1:\n            return bool(not i and n < 0)\n        elif n._prec == 1 and (not i or i._prec == 1) and self.is_algebraic and (not self.has(Function)):\n            try:\n                if minimal_polynomial(self).is_Symbol:\n                    return False\n            except (NotAlgebraic, NotImplementedError):\n                pass",
    ".sympy.core.expr.py@@_n2": "def _n2(a, b):\n    if not all((i.is_number for i in (a, b))):\n        return\n    if a.is_comparable and b.is_comparable:\n        dif = (a - b).evalf(2)\n        if dif.is_comparable:\n            return dif",
    ".sympy.core.relational.py@@Relational.__new__": "def __new__(cls, lhs, rhs, rop=None, **assumptions):\n    if cls is not Relational:\n        return Expr.__new__(cls, lhs, rhs, **assumptions)\n    try:\n        cls = cls.ValidRelationOperator[rop]\n        rv = cls(lhs, rhs, **assumptions)\n        if isinstance(rv, (Eq, Ne)):\n            pass\n        elif isinstance(rv, Relational):\n            from sympy.core.symbol import Symbol\n            from sympy.logic.boolalg import Boolean\n            from sympy.utilities.misc import filldedent\n            for a in rv.args:\n                if isinstance(a, Symbol):\n                    continue\n                if isinstance(a, Boolean):\n                    from sympy.utilities.misc import filldedent\n                    raise TypeError(filldedent('\\n                        A Boolean argument can only be used in\\n                        Eq and Ne; all other relationals expect\\n                        real expressions.\\n                    '))\n        return rv\n    except KeyError:\n        raise ValueError('Invalid relational operator symbol: %r' % rop)",
    ".sympy.core.basic.py@@Basic._hashable_content": "def _hashable_content(self):\n    return self._args",
    ".sympy.core.basic.py@@Basic.__eq__": "def __eq__(self, other):\n    from sympy import Pow\n    if self is other:\n        return True\n    if type(self) is not type(other):\n        if isinstance(self, Pow) and self.exp == 1:\n            return self.base == other\n        if isinstance(other, Pow) and other.exp == 1:\n            return self == other.base\n        try:\n            other = _sympify(other)\n        except SympifyError:\n            return NotImplemented\n        if type(self) != type(other):\n            return False\n    return self._hashable_content() == other._hashable_content()",
    ".sympy.core.relational.py@@StrictLessThan._eval_relation": "def _eval_relation(cls, lhs, rhs):\n    return _sympify(lhs.__lt__(rhs))",
    ".sympy.core.basic.py@@Basic.subs": "def subs(self, *args, **kwargs):\n    from sympy.core.containers import Dict\n    from sympy.utilities import default_sort_key\n    from sympy import Dummy, Symbol\n    unordered = False\n    if len(args) == 1:\n        sequence = args[0]\n        if isinstance(sequence, set):\n            unordered = True\n        elif isinstance(sequence, (Dict, Mapping)):\n            unordered = True\n            sequence = sequence.items()\n        elif not iterable(sequence):\n            from sympy.utilities.misc import filldedent\n            raise ValueError(filldedent('\\n               When a single argument is passed to subs\\n               it should be a dictionary of old: new pairs or an iterable\\n               of (old, new) tuples.'))\n    elif len(args) == 2:\n        sequence = [args]\n    else:\n        raise ValueError('subs accepts either 1 or 2 arguments')\n    sequence = list(sequence)\n    for i in range(len(sequence)):\n        s = list(sequence[i])\n        for j, si in enumerate(s):\n            try:\n                si = sympify(si, strict=True)\n            except SympifyError:\n                if type(si) is str:\n                    si = Symbol(si)\n                else:\n                    sequence[i] = None\n                    break\n            s[j] = si\n        else:\n            sequence[i] = None if _aresame(*s) else tuple(s)\n    sequence = list(filter(None, sequence))\n    if unordered:\n        sequence = dict(sequence)\n        if not all((k.is_Atom for k in sequence)):\n            d = {}\n            for o, n in sequence.items():\n                try:\n                    ops = (o.count_ops(), len(o.args))\n                except TypeError:\n                    ops = (0, 0)\n                d.setdefault(ops, []).append((o, n))\n            newseq = []\n            for k in sorted(d.keys(), reverse=True):\n                newseq.extend(sorted([v[0] for v in d[k]], key=default_sort_key))\n            sequence = [(k, sequence[k]) for k in newseq]\n            del newseq, d\n        else:\n            sequence = sorted([(k, v) for k, v in sequence.items()], key=default_sort_key)\n    if kwargs.pop('simultaneous', False):\n        reps = {}\n        rv = self\n        kwargs['hack2'] = True\n        m = Dummy()\n        for old, new in sequence:\n            d = Dummy(commutative=new.is_commutative)\n            rv = rv._subs(old, d * m, **kwargs)\n            if not isinstance(rv, Basic):\n                break\n            reps[d] = new\n        reps[m] = S.One\n        return rv.xreplace(reps)\n    else:\n        rv = self\n        for old, new in sequence:\n            rv = rv._subs(old, new, **kwargs)\n            if not isinstance(rv, Basic):\n                break\n        return rv",
    ".sympy.core.basic.py@@_aresame": "def _aresame(a, b):\n    from .function import AppliedUndef, UndefinedFunction as UndefFunc\n    for i, j in zip_longest(preorder_traversal(a), preorder_traversal(b)):\n        if i != j or type(i) != type(j):\n            if isinstance(i, UndefFunc) and isinstance(j, UndefFunc) or (isinstance(i, AppliedUndef) and isinstance(j, AppliedUndef)):\n                if i.class_key() != j.class_key():\n                    return False\n            else:\n                return False\n    else:\n        return True",
    ".sympy.core.basic.py@@preorder_traversal.__init__": "def __init__(self, node, keys=None):\n    self._skip_flag = False\n    self._pt = self._preorder_traversal(node, keys)",
    ".sympy.core.basic.py@@preorder_traversal.__iter__": "def __iter__(self):\n    return self",
    ".sympy.core.basic.py@@preorder_traversal.__next__": "def __next__(self):\n    return next(self._pt)",
    ".sympy.core.basic.py@@preorder_traversal._preorder_traversal": "def _preorder_traversal(self, node, keys):\n    yield node\n    if self._skip_flag:\n        self._skip_flag = False\n        return\n    if isinstance(node, Basic):\n        if not keys and hasattr(node, '_argset'):\n            args = node._argset\n        else:\n            args = node.args\n        if keys:\n            if keys != True:\n                args = ordered(args, keys, default=False)\n            else:\n                args = ordered(args)\n        for arg in args:\n            for subtree in self._preorder_traversal(arg, keys):\n                yield subtree\n    elif iterable(node):\n        for item in node:\n            for subtree in self._preorder_traversal(item, keys):\n                yield subtree",
    ".sympy.core.basic.py@@Basic.__ne__": "def __ne__(self, other):\n    return not self == other",
    ".sympy.core.compatibility.py@@default_sort_key": "def default_sort_key(item, order=None):\n    from .singleton import S\n    from .basic import Basic\n    from .sympify import sympify, SympifyError\n    from .compatibility import iterable\n    if isinstance(item, Basic):\n        return item.sort_key(order=order)\n    if iterable(item, exclude=string_types):\n        if isinstance(item, dict):\n            args = item.items()\n            unordered = True\n        elif isinstance(item, set):\n            args = item\n            unordered = True\n        else:\n            args = list(item)\n            unordered = False\n        args = [default_sort_key(arg, order=order) for arg in args]\n        if unordered:\n            args = sorted(args)\n        cls_index, args = (10, (len(args), tuple(args)))\n    else:\n        if not isinstance(item, string_types):\n            try:\n                item = sympify(item)\n            except SympifyError:\n                pass\n            else:\n                if isinstance(item, Basic):\n                    return default_sort_key(item)\n        cls_index, args = (0, (1, (str(item),)))\n    return ((cls_index, 0, item.__class__.__name__), args, S.One.sort_key(), S.One)",
    ".sympy.core.compatibility.py@@iterable": "def iterable(i, exclude=(string_types, dict, NotIterable)):\n    if hasattr(i, '_iterable'):\n        return i._iterable\n    try:\n        iter(i)\n    except TypeError:\n        return False\n    if exclude:\n        return not isinstance(i, exclude)\n    return True",
    ".sympy.core.symbol.py@@Symbol.sort_key": "def sort_key(self, order=None):\n    return (self.class_key(), (1, (str(self),)), S.One.sort_key(), S.One)",
    ".sympy.core.basic.py@@Atom.class_key": "def class_key(cls):\n    return (2, 0, cls.__name__)",
    ".sympy.printing.str.py@@StrPrinter._print_Symbol": "def _print_Symbol(self, expr):\n    return expr.name",
    ".sympy.core.numbers.py@@Number.sort_key": "def sort_key(self, order=None):\n    return (self.class_key(), (0, ()), (), self)",
    ".sympy.core.numbers.py@@Number.class_key": "def class_key(cls):\n    return (1, 0, 'Number')",
    ".sympy.printing.str.py@@StrPrinter._print_Wild": "def _print_Wild(self, expr):\n    return expr.name + '_'",
    ".sympy.core.basic.py@@Basic._subs": "def _subs(self, old, new, **hints):\n\n    def fallback(self, old, new):\n        hit = False\n        args = list(self.args)\n        for i, arg in enumerate(args):\n            if not hasattr(arg, '_eval_subs'):\n                continue\n            arg = arg._subs(old, new, **hints)\n            if not _aresame(arg, args[i]):\n                hit = True\n                args[i] = arg\n        if hit:\n            rv = self.func(*args)\n            hack2 = hints.get('hack2', False)\n            if hack2 and self.is_Mul and (not rv.is_Mul):\n                coeff = S.One\n                nonnumber = []\n                for i in args:\n                    if i.is_Number:\n                        coeff *= i\n                    else:\n                        nonnumber.append(i)\n                nonnumber = self.func(*nonnumber)\n                if coeff is S.One:\n                    return nonnumber\n                else:\n                    return self.func(coeff, nonnumber, evaluate=False)\n            return rv\n        return self\n    if _aresame(self, old):\n        return new\n    rv = self._eval_subs(old, new)\n    if rv is None:\n        rv = fallback(self, old, new)\n    return rv",
    ".sympy.core.basic.py@@Basic._eval_subs": "def _eval_subs(self, old, new):\n    return None",
    ".sympy.core.basic.py@@Basic.fallback": "def fallback(self, old, new):\n    hit = False\n    args = list(self.args)\n    for i, arg in enumerate(args):\n        if not hasattr(arg, '_eval_subs'):\n            continue\n        arg = arg._subs(old, new, **hints)\n        if not _aresame(arg, args[i]):\n            hit = True\n            args[i] = arg\n    if hit:\n        rv = self.func(*args)\n        hack2 = hints.get('hack2', False)\n        if hack2 and self.is_Mul and (not rv.is_Mul):\n            coeff = S.One\n            nonnumber = []\n            for i in args:\n                if i.is_Number:\n                    coeff *= i\n                else:\n                    nonnumber.append(i)\n            nonnumber = self.func(*nonnumber)\n            if coeff is S.One:\n                return nonnumber\n            else:\n                return self.func(coeff, nonnumber, evaluate=False)\n        return rv\n    return self",
    ".sympy.core.basic.py@@Basic.args": "def args(self):\n    return self._args",
    ".sympy.core.basic.py@@Basic.func": "def func(self):\n    return self.__class__",
    ".sympy.core.relational.py@@GreaterThan._eval_relation": "def _eval_relation(cls, lhs, rhs):\n    return _sympify(lhs.__ge__(rhs))",
    ".sympy.core.basic.py@@Basic.doit": "def doit(self, **hints):\n    if hints.get('deep', True):\n        terms = [term.doit(**hints) if isinstance(term, Basic) else term for term in self.args]\n        return self.func(*terms)\n    else:\n        return self",
    ".sympy.core.basic.py@@Atom.doit": "def doit(self, **hints):\n    return self",
    ".sympy.parsing.sympy_parser.py@@parse_expr": "def parse_expr(s, local_dict=None, transformations=standard_transformations, global_dict=None, evaluate=True):\n    if local_dict is None:\n        local_dict = {}\n    if global_dict is None:\n        global_dict = {}\n        exec_('from sympy import *', global_dict)\n    code = stringify_expr(s, local_dict, global_dict, transformations)\n    if not evaluate:\n        code = compile(evaluateFalse(code), '<string>', 'eval')\n    return eval_expr(code, local_dict, global_dict)",
    ".sympy.parsing.sympy_parser.py@@stringify_expr": "def stringify_expr(s, local_dict, global_dict, transformations):\n    tokens = []\n    input_code = StringIO(s.strip())\n    for toknum, tokval, _, _, _ in generate_tokens(input_code.readline):\n        tokens.append((toknum, tokval))\n    for transform in transformations:\n        tokens = transform(tokens, local_dict, global_dict)\n    return untokenize(tokens)",
    ".sympy.parsing.sympy_tokenize.py@@generate_tokens": "def generate_tokens(readline):\n    lnum = parenlev = continued = 0\n    namechars, numchars = (string.ascii_letters + '_', '0123456789')\n    contstr, needcont = ('', 0)\n    contline = None\n    indents = [0]\n    while 1:\n        try:\n            line = readline()\n        except StopIteration:\n            line = ''\n        lnum = lnum + 1\n        pos, max = (0, len(line))\n        if contstr:\n            if not line:\n                raise TokenError('EOF in multi-line string', strstart)\n            endmatch = endprog.match(line)\n            if endmatch:\n                pos = end = endmatch.end(0)\n                yield (STRING, contstr + line[:end], strstart, (lnum, end), contline + line)\n                contstr, needcont = ('', 0)\n                contline = None\n            elif needcont and line[-2:] != '\\\\\\n' and (line[-3:] != '\\\\\\r\\n'):\n                yield (ERRORTOKEN, contstr + line, strstart, (lnum, len(line)), contline)\n                contstr = ''\n                contline = None\n                continue\n            else:\n                contstr = contstr + line\n                contline = contline + line\n                continue\n        elif parenlev == 0 and (not continued):\n            if not line:\n                break\n            column = 0\n            while pos < max:\n                if line[pos] == ' ':\n                    column = column + 1\n                elif line[pos] == '\\t':\n                    column = (column / tabsize + 1) * tabsize\n                elif line[pos] == '\\x0c':\n                    column = 0\n                else:\n                    break\n                pos = pos + 1\n            if pos == max:\n                break\n            if line[pos] in '#\\r\\n':\n                if line[pos] == '#':\n                    comment_token = line[pos:].rstrip('\\r\\n')\n                    nl_pos = pos + len(comment_token)\n                    yield (COMMENT, comment_token, (lnum, pos), (lnum, pos + len(comment_token)), line)\n                    yield (NL, line[nl_pos:], (lnum, nl_pos), (lnum, len(line)), line)\n                else:\n                    yield ((NL, COMMENT)[line[pos] == '#'], line[pos:], (lnum, pos), (lnum, len(line)), line)\n                continue\n            if column > indents[-1]:\n                indents.append(column)\n                yield (INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n            while column < indents[-1]:\n                if column not in indents:\n                    raise IndentationError('unindent does not match any outer indentation level', ('<tokenize>', lnum, pos, line))\n                indents = indents[:-1]\n                yield (DEDENT, '', (lnum, pos), (lnum, pos), line)\n        else:\n            if not line:\n                raise TokenError('EOF in multi-line statement', (lnum, 0))\n            continued = 0\n        while pos < max:\n            pseudomatch = pseudoprog.match(line, pos)\n            if pseudomatch:\n                start, end = pseudomatch.span(1)\n                spos, epos, pos = ((lnum, start), (lnum, end), end)\n                token, initial = (line[start:end], line[start])\n                if initial in numchars or (initial == '.' and token != '.'):\n                    yield (NUMBER, token, spos, epos, line)\n                elif initial in '\\r\\n':\n                    yield (NL if parenlev > 0 else NEWLINE, token, spos, epos, line)\n                elif initial == '#':\n                    if token.endswith('\\n'):\n                        raise ValueError('Token should not end with \\n')\n                    yield (COMMENT, token, spos, epos, line)\n                elif token in triple_quoted:\n                    endprog = endprogs[token]\n                    endmatch = endprog.match(line, pos)\n                    if endmatch:\n                        pos = endmatch.end(0)\n                        token = line[start:pos]\n                        yield (STRING, token, spos, (lnum, pos), line)\n                    else:\n                        strstart = (lnum, start)\n                        contstr = line[start:]\n                        contline = line\n                        break\n                elif initial in single_quoted or token[:2] in single_quoted or token[:3] in single_quoted:\n                    if token[-1] == '\\n':\n                        strstart = (lnum, start)\n                        endprog = endprogs[initial] or endprogs[token[1]] or endprogs[token[2]]\n                        contstr, needcont = (line[start:], 1)\n                        contline = line\n                        break\n                    else:\n                        yield (STRING, token, spos, epos, line)\n                elif initial in namechars:\n                    yield (NAME, token, spos, epos, line)\n                elif initial == '\\\\':\n                    continued = 1\n                else:\n                    if initial in '([{':\n                        parenlev = parenlev + 1\n                    elif initial in ')]}':\n                        parenlev = parenlev - 1\n                    yield (OP, token, spos, epos, line)\n            else:\n                yield (ERRORTOKEN, line[pos], (lnum, pos), (lnum, pos + 1), line)\n                pos = pos + 1\n    for indent in indents[1:]:\n        yield (DEDENT, '', (lnum, 0), (lnum, 0), '')\n    yield (ENDMARKER, '', (lnum, 0), (lnum, 0), '')",
    ".sympy.parsing.sympy_parser.py@@lambda_notation": "def lambda_notation(tokens, local_dict, global_dict):\n    result = []\n    flag = False\n    toknum, tokval = tokens[0]\n    tokLen = len(tokens)\n    if toknum == NAME and tokval == 'lambda':\n        if tokLen == 2:\n            result.extend(tokens)\n        elif tokLen > 2:\n            result.extend([(NAME, 'Lambda'), (OP, '('), (OP, '('), (OP, ')'), (OP, ')')])\n            for tokNum, tokVal in tokens[1:]:\n                if tokNum == OP and tokVal == ':':\n                    tokVal = ','\n                    flag = True\n                if not flag and tokNum == OP and (tokVal in ['*', '**']):\n                    raise TokenError('Starred arguments in lambda not supported')\n                if flag:\n                    result.insert(-1, (tokNum, tokVal))\n                else:\n                    result.insert(-2, (tokNum, tokVal))\n    else:\n        result.extend(tokens)\n    return result",
    ".sympy.parsing.sympy_parser.py@@auto_symbol": "def auto_symbol(tokens, local_dict, global_dict):\n    result = []\n    prevTok = (None, None)\n    tokens.append((None, None))\n    for tok, nextTok in zip(tokens, tokens[1:]):\n        tokNum, tokVal = tok\n        nextTokNum, nextTokVal = nextTok\n        if tokNum == NAME:\n            name = tokVal\n            if name in ['True', 'False', 'None'] or iskeyword(name) or name in local_dict or (prevTok[0] == OP and prevTok[1] == '.') or (prevTok[0] == OP and prevTok[1] in ('(', ',') and (nextTokNum == OP) and (nextTokVal == '=')):\n                result.append((NAME, name))\n                continue\n            elif name in global_dict:\n                obj = global_dict[name]\n                if isinstance(obj, (Basic, type)) or callable(obj):\n                    result.append((NAME, name))\n                    continue\n            result.extend([(NAME, 'Symbol'), (OP, '('), (NAME, repr(str(name))), (OP, ')')])\n        else:\n            result.append((tokNum, tokVal))\n        prevTok = (tokNum, tokVal)\n    return result",
    ".sympy.parsing.sympy_parser.py@@auto_number": "def auto_number(tokens, local_dict, global_dict):\n    result = []\n    prevtoken = ''\n    for toknum, tokval in tokens:\n        if toknum == NUMBER:\n            number = tokval\n            postfix = []\n            if number.endswith('j') or number.endswith('J'):\n                number = number[:-1]\n                postfix = [(OP, '*'), (NAME, 'I')]\n            if '.' in number or (('e' in number or 'E' in number) and (not (number.startswith('0x') or number.startswith('0X')))):\n                match = _re_repeated.match(number)\n                if match is not None:\n                    pre, post, repetend = match.groups()\n                    zeros = '0' * len(post)\n                    post, repetends = [w.lstrip('0') for w in [post, repetend]]\n                    a = pre or '0'\n                    b, c = (post or '0', '1' + zeros)\n                    d, e = (repetends, '9' * len(repetend) + zeros)\n                    seq = [(OP, '('), (NAME, 'Integer'), (OP, '('), (NUMBER, a), (OP, ')'), (OP, '+'), (NAME, 'Rational'), (OP, '('), (NUMBER, b), (OP, ','), (NUMBER, c), (OP, ')'), (OP, '+'), (NAME, 'Rational'), (OP, '('), (NUMBER, d), (OP, ','), (NUMBER, e), (OP, ')'), (OP, ')')]\n                else:\n                    seq = [(NAME, 'Float'), (OP, '('), (NUMBER, repr(str(number))), (OP, ')')]\n            else:\n                seq = [(NAME, 'Integer'), (OP, '('), (NUMBER, number), (OP, ')')]\n            result.extend(seq + postfix)\n        else:\n            result.append((toknum, tokval))\n    return result",
    ".sympy.parsing.sympy_parser.py@@factorial_notation": "def factorial_notation(tokens, local_dict, global_dict):\n    result = []\n    prevtoken = ''\n    for toknum, tokval in tokens:\n        if toknum == OP:\n            op = tokval\n            if op == '!!':\n                if prevtoken == '!' or prevtoken == '!!':\n                    raise TokenError\n                result = _add_factorial_tokens('factorial2', result)\n            elif op == '!':\n                if prevtoken == '!' or prevtoken == '!!':\n                    raise TokenError\n                result = _add_factorial_tokens('factorial', result)\n            else:\n                result.append((OP, op))\n        else:\n            result.append((toknum, tokval))\n        prevtoken = tokval\n    return result",
    ".sympy.parsing.sympy_parser.py@@convert_xor": "def convert_xor(tokens, local_dict, global_dict):\n    result = []\n    for toknum, tokval in tokens:\n        if toknum == OP:\n            if tokval == '^':\n                result.append((OP, '**'))\n            else:\n                result.append((toknum, tokval))\n        else:\n            result.append((toknum, tokval))\n    return result",
    ".sympy.parsing.sympy_tokenize.py@@untokenize": "def untokenize(iterable):\n    ut = Untokenizer()\n    return ut.untokenize(iterable)",
    ".sympy.parsing.sympy_tokenize.py@@Untokenizer.__init__": "def __init__(self):\n    self.tokens = []\n    self.prev_row = 1\n    self.prev_col = 0",
    ".sympy.parsing.sympy_tokenize.py@@Untokenizer.untokenize": "def untokenize(self, iterable):\n    for t in iterable:\n        if len(t) == 2:\n            self.compat(t, iterable)\n            break\n        tok_type, token, start, end, line = t\n        self.add_whitespace(start)\n        self.tokens.append(token)\n        self.prev_row, self.prev_col = end\n        if tok_type in (NEWLINE, NL):\n            self.prev_row += 1\n            self.prev_col = 0\n    return ''.join(self.tokens)",
    ".sympy.parsing.sympy_tokenize.py@@Untokenizer.compat": "def compat(self, token, iterable):\n    startline = False\n    indents = []\n    toks_append = self.tokens.append\n    toknum, tokval = token\n    if toknum in (NAME, NUMBER):\n        tokval += ' '\n    if toknum in (NEWLINE, NL):\n        startline = True\n    prevstring = False\n    for tok in iterable:\n        toknum, tokval = tok[:2]\n        if toknum in (NAME, NUMBER):\n            tokval += ' '\n        if toknum == STRING:\n            if prevstring:\n                tokval = ' ' + tokval\n            prevstring = True\n        else:\n            prevstring = False\n        if toknum == INDENT:\n            indents.append(tokval)\n            continue\n        elif toknum == DEDENT:\n            indents.pop()\n            continue\n        elif toknum in (NEWLINE, NL):\n            startline = True\n        elif startline and indents:\n            toks_append(indents[-1])\n            startline = False\n        toks_append(tokval)",
    ".sympy.parsing.sympy_parser.py@@eval_expr": "def eval_expr(code, local_dict, global_dict):\n    expr = eval(code, global_dict, local_dict)\n    return expr",
    ".sympy.core.decorators.py@@__sympifyit_wrapper": "def __sympifyit_wrapper(a, b):\n    try:\n        if not hasattr(b, '_op_priority'):\n            b = sympify(b, strict=True)\n        return func(a, b)\n    except SympifyError:\n        return retval",
    ".sympy.core.numbers.py@@Rational.__div__": "def __div__(self, other):\n    if global_evaluate[0]:\n        if isinstance(other, Integer):\n            if self.p and other.p == S.Zero:\n                return S.ComplexInfinity\n            else:\n                return Rational(self.p, self.q * other.p, igcd(self.p, other.p))\n        elif isinstance(other, Rational):\n            return Rational(self.p * other.q, self.q * other.p, igcd(self.p, other.p) * igcd(self.q, other.q))\n        elif isinstance(other, Float):\n            return self * (1 / other)\n        else:\n            return Number.__div__(self, other)\n    return Number.__div__(self, other)",
    ".sympy.core.numbers.py@@igcd": "def igcd(*args):\n    if len(args) < 2:\n        raise TypeError('igcd() takes at least 2 arguments (%s given)' % len(args))\n    if 1 in args:\n        a = 1\n        k = 0\n    else:\n        a = abs(as_int(args[0]))\n        k = 1\n    if a != 1:\n        while k < len(args):\n            b = args[k]\n            k += 1\n            try:\n                a = _gcdcache[a, b]\n            except KeyError:\n                b = as_int(b)\n                if not b:\n                    continue\n                if b == 1:\n                    a = 1\n                    break\n                if b < 0:\n                    b = -b\n                t = (a, b)\n                a = igcd2(a, b)\n                _gcdcache[t] = _gcdcache[t[1], t[0]] = a\n    while k < len(args):\n        ok = as_int(args[k])\n        k += 1\n    return a",
    ".sympy.core.compatibility.py@@as_int": "def as_int(n):\n    try:\n        result = int(n)\n        if result != n:\n            raise TypeError\n    except TypeError:\n        raise ValueError('%s is not an integer' % (n,))\n    return result",
    ".sympy.core.numbers.py@@Rational.__new__": "def __new__(cls, p, q=None, gcd=None):\n    if q is None:\n        if isinstance(p, Rational):\n            return p\n        if isinstance(p, string_types):\n            if p.count('/') > 1:\n                raise TypeError('invalid input: %s' % p)\n            pq = p.rsplit('/', 1)\n            if len(pq) == 2:\n                p, q = pq\n                fp = fractions.Fraction(p)\n                fq = fractions.Fraction(q)\n                f = fp / fq\n                return Rational(f.numerator, f.denominator, 1)\n            p = p.replace(' ', '')\n            try:\n                p = fractions.Fraction(p)\n            except ValueError:\n                pass\n        if not isinstance(p, string_types):\n            try:\n                if isinstance(p, fractions.Fraction):\n                    return Rational(p.numerator, p.denominator, 1)\n            except NameError:\n                pass\n            if isinstance(p, (float, Float)):\n                return Rational(*_as_integer_ratio(p))\n        if not isinstance(p, SYMPY_INTS + (Rational,)):\n            raise TypeError('invalid input: %s' % p)\n        q = q or S.One\n        gcd = 1\n    else:\n        p = Rational(p)\n        q = Rational(q)\n    if isinstance(q, Rational):\n        p *= q.q\n        q = q.p\n    if isinstance(p, Rational):\n        q *= p.q\n        p = p.p\n    if q == 0:\n        if p == 0:\n            if _errdict['divide']:\n                raise ValueError('Indeterminate 0/0')\n            else:\n                return S.NaN\n        return S.ComplexInfinity\n    if q < 0:\n        q = -q\n        p = -p\n    if not gcd:\n        gcd = igcd(abs(p), q)\n    if gcd > 1:\n        p //= gcd\n        q //= gcd\n    if q == 1:\n        return Integer(p)\n    if p == 1 and q == 2:\n        return S.Half\n    obj = Expr.__new__(cls)\n    obj.p = p\n    obj.q = q\n    return obj",
    ".sympy.core.evalf.py@@EvalfMixin.evalf": "def evalf(self, n=15, subs=None, maxn=100, chop=False, strict=False, quad=None, verbose=False):\n    from sympy import Float, Number\n    n = n if n is not None else 15\n    if subs and is_sequence(subs):\n        raise TypeError('subs must be given as a dictionary')\n    if n == 1 and isinstance(self, Number):\n        from sympy.core.expr import _mag\n        rv = self.evalf(2, subs, maxn, chop, strict, quad, verbose)\n        m = _mag(rv)\n        rv = rv.round(1 - m)\n        return rv\n    if not evalf_table:\n        _create_evalf_table()\n    prec = dps_to_prec(n)\n    options = {'maxprec': max(prec, int(maxn * LG10)), 'chop': chop, 'strict': strict, 'verbose': verbose}\n    if subs is not None:\n        options['subs'] = subs\n    if quad is not None:\n        options['quad'] = quad\n    try:\n        result = evalf(self, prec + 4, options)\n    except NotImplementedError:\n        v = self._eval_evalf(prec)\n        if v is None:\n            return self\n        try:\n            result = evalf(v, prec, options)\n        except NotImplementedError:\n            return v\n    re, im, re_acc, im_acc = result\n    if re:\n        p = max(min(prec, re_acc), 1)\n        re = Float._new(re, p)\n    else:\n        re = S.Zero\n    if im:\n        p = max(min(prec, im_acc), 1)\n        im = Float._new(im, p)\n        return re + im * S.ImaginaryUnit\n    else:\n        return re",
    ".sympy.core.evalf.py@@evalf": "def evalf(x, prec, options):\n    from sympy import re as re_, im as im_\n    try:\n        rf = evalf_table[x.func]\n        r = rf(x, prec, options)\n    except KeyError:\n        try:\n            if 'subs' in options:\n                x = x.subs(evalf_subs(prec, options['subs']))\n            xe = x._eval_evalf(prec)\n            re, im = xe.as_real_imag()\n            if re.has(re_) or im.has(im_):\n                raise NotImplementedError\n            if re == 0:\n                re = None\n                reprec = None\n            elif re.is_number:\n                re = re._to_mpmath(prec, allow_ints=False)._mpf_\n                reprec = prec\n            else:\n                raise NotImplementedError\n            if im == 0:\n                im = None\n                imprec = None\n            elif im.is_number:\n                im = im._to_mpmath(prec, allow_ints=False)._mpf_\n                imprec = prec\n            else:\n                raise NotImplementedError\n            r = (re, im, reprec, imprec)\n        except AttributeError:\n            raise NotImplementedError\n    if options.get('verbose'):\n        print('### input', x)\n        print('### output', to_str(r[0] or fzero, 50))\n        print('### raw', r)\n        print()\n    chop = options.get('chop', False)\n    if chop:\n        if chop is True:\n            chop_prec = prec\n        else:\n            chop_prec = int(round(-3.321 * math.log10(chop) + 2.5))\n            if chop_prec == 3:\n                chop_prec -= 1\n        r = chop_parts(r, chop_prec)\n    if options.get('strict'):\n        check_target(x, r, prec)\n    return r",
    ".sympy.core.numbers.py@@Float._new": "def _new(cls, _mpf_, _prec):\n    if _mpf_ == _mpf_zero:\n        return S.Zero\n    elif _mpf_ == _mpf_nan:\n        return S.NaN\n    obj = Expr.__new__(cls)\n    obj._mpf_ = mpf_norm(_mpf_, _prec)\n    obj._prec = _prec\n    return obj",
    ".sympy.core.numbers.py@@mpf_norm": "def mpf_norm(mpf, prec):\n    sign, man, expt, bc = mpf\n    if not man:\n        if not bc:\n            return _mpf_zero\n        else:\n            return mpf\n    from mpmath.libmp.backend import MPZ\n    rv = mpf_normalize(sign, MPZ(man), expt, bc, prec, rnd)\n    return rv",
    ".sympy.core.numbers.py@@Rational.__eq__": "def __eq__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if other.is_NumberSymbol:\n        if other.is_irrational:\n            return False\n        return other.__eq__(self)\n    if other.is_Number:\n        if other.is_Rational:\n            return self.p == other.p and self.q == other.q\n        if other.is_Float:\n            return mlib.mpf_eq(self._as_mpf_val(other._prec), other._mpf_)\n    return False",
    ".sympy.core.numbers.py@@Float.__hash__": "def __hash__(self):\n    return super(Float, self).__hash__()",
    ".sympy.core.numbers.py@@Float._hashable_content": "def _hashable_content(self):\n    return (self._mpf_, self._prec)",
    ".sympy.core.numbers.py@@Rational._as_mpf_val": "def _as_mpf_val(self, prec):\n    return mlib.from_rational(self.p, self.q, prec, rnd)",
    ".sympy.core.numbers.py@@Rational.__ne__": "def __ne__(self, other):\n    return not self == other",
    ".sympy.core.numbers.py@@Rational.__gt__": "def __gt__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        raise TypeError('Invalid comparison %s > %s' % (self, other))\n    if other.is_NumberSymbol:\n        return other.__lt__(self)\n    expr = self\n    if other.is_Number:\n        if other.is_Rational:\n            return _sympify(bool(self.p * other.q > self.q * other.p))\n        if other.is_Float:\n            return _sympify(bool(mlib.mpf_gt(self._as_mpf_val(other._prec), other._mpf_)))\n    elif other.is_number and other.is_real:\n        expr, other = (Integer(self.p), self.q * other)\n    return Expr.__gt__(expr, other)"
}