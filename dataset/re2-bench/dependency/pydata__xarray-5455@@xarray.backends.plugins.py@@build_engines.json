{
    ".xarray.backends.plugins.py@@remove_duplicates": "def remove_duplicates(pkg_entrypoints):\n    pkg_entrypoints = sorted(pkg_entrypoints, key=lambda ep: ep.name)\n    pkg_entrypoints_grouped = itertools.groupby(pkg_entrypoints, key=lambda ep: ep.name)\n    unique_pkg_entrypoints = []\n    for name, matches in pkg_entrypoints_grouped:\n        matches = list(matches)\n        unique_pkg_entrypoints.append(matches[0])\n        matches_len = len(matches)\n        if matches_len > 1:\n            selected_module_name = matches[0].module_name\n            all_module_names = [e.module_name for e in matches]\n            warnings.warn(f'Found {matches_len} entrypoints for the engine name {name}:\\n {all_module_names}.\\n It will be used: {selected_module_name}.', RuntimeWarning)\n    return unique_pkg_entrypoints",
    ".xarray.backends.plugins.py@@backends_dict_from_pkg": "def backends_dict_from_pkg(pkg_entrypoints):\n    backend_entrypoints = {}\n    for pkg_ep in pkg_entrypoints:\n        name = pkg_ep.name\n        try:\n            backend = pkg_ep.load()\n            backend_entrypoints[name] = backend\n        except Exception as ex:\n            warnings.warn(f'Engine {name!r} loading failed:\\n{ex}', RuntimeWarning)\n    return backend_entrypoints",
    ".xarray.backends.plugins.py@@sort_backends": "def sort_backends(backend_entrypoints):\n    ordered_backends_entrypoints = {}\n    for be_name in STANDARD_BACKENDS_ORDER:\n        if backend_entrypoints.get(be_name, None) is not None:\n            ordered_backends_entrypoints[be_name] = backend_entrypoints.pop(be_name)\n    ordered_backends_entrypoints.update({name: backend_entrypoints[name] for name in sorted(backend_entrypoints)})\n    return ordered_backends_entrypoints",
    ".xarray.backends.plugins.py@@set_missing_parameters": "def set_missing_parameters(backend_entrypoints):\n    for name, backend in backend_entrypoints.items():\n        if backend.open_dataset_parameters is None:\n            open_dataset = backend.open_dataset\n            backend.open_dataset_parameters = detect_parameters(open_dataset)",
    ".xarray.backends.plugins.py@@detect_parameters": "def detect_parameters(open_dataset):\n    signature = inspect.signature(open_dataset)\n    parameters = signature.parameters\n    parameters_list = []\n    for name, param in parameters.items():\n        if param.kind in (inspect.Parameter.VAR_KEYWORD, inspect.Parameter.VAR_POSITIONAL):\n            raise TypeError(f'All the parameters in {open_dataset!r} signature should be explicit. *args and **kwargs is not supported')\n        if name != 'self':\n            parameters_list.append(name)\n    return tuple(parameters_list)"
}