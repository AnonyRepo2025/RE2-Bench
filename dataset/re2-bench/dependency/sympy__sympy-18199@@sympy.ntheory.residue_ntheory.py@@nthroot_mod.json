{
    ".sympy.core.compatibility.py@@as_int": "def as_int(n, strict=True):\n    from sympy.core.numbers import Integer\n    try:\n        if strict and (not isinstance(n, SYMPY_INTS + (Integer,))):\n            raise TypeError\n        result = int(n)\n        if result != n:\n            raise TypeError\n        return result\n    except TypeError:\n        raise ValueError('%s is not an integer' % (n,))",
    ".sympy.ntheory.primetest.py@@isprime": "def isprime(n):\n    try:\n        n = as_int(n)\n    except ValueError:\n        return False\n    if n in [2, 3, 5]:\n        return True\n    if n < 2 or n % 2 == 0 or n % 3 == 0 or (n % 5 == 0):\n        return False\n    if n < 49:\n        return True\n    if n % 7 == 0 or n % 11 == 0 or n % 13 == 0 or (n % 17 == 0) or (n % 19 == 0) or (n % 23 == 0) or (n % 29 == 0) or (n % 31 == 0) or (n % 37 == 0) or (n % 41 == 0) or (n % 43 == 0) or (n % 47 == 0):\n        return False\n    if n < 2809:\n        return True\n    if n <= 23001:\n        return pow(2, n, n) == 2 and n not in [7957, 8321, 13747, 18721, 19951]\n    from sympy.ntheory.generate import sieve as s\n    if n <= s._list[-1]:\n        l, u = s.search(n)\n        return l == u\n    from sympy.core.compatibility import HAS_GMPY\n    if HAS_GMPY == 2:\n        from gmpy2 import is_strong_prp, is_strong_selfridge_prp\n        return is_strong_prp(n, 2) and is_strong_selfridge_prp(n)\n    if n < 341531:\n        return mr(n, [9345883071009581737])\n    if n < 885594169:\n        return mr(n, [725270293939359937, 3569819667048198375])\n    if n < 350269456337:\n        return mr(n, [4230279247111683200, 14694767155120705706, 16641139526367750375])\n    if n < 55245642489451:\n        return mr(n, [2, 141889084524735, 1199124725622454117, 11096072698276303650])\n    if n < 7999252175582851:\n        return mr(n, [2, 4130806001517, 149795463772692060, 186635894390467037, 3967304179347715805])\n    if n < 585226005592931977:\n        return mr(n, [2, 123635709730000, 9233062284813009, 43835965440333360, 761179012939631437, 1263739024124850375])\n    if n < 18446744073709551616:\n        return mr(n, [2, 325, 9375, 28178, 450775, 9780504, 1795265022])\n    return mr(n, [2]) and is_strong_lucas_prp(n)",
    ".sympy.ntheory.residue_ntheory.py@@is_nthpow_residue": "def is_nthpow_residue(a, n, m):\n    a, n, m = (as_int(a), as_int(n), as_int(m))\n    if m <= 0:\n        raise ValueError('m must be > 0')\n    if n < 0:\n        raise ValueError('n must be >= 0')\n    if a < 0:\n        raise ValueError('a must be >= 0')\n    if n == 0:\n        if m == 1:\n            return False\n        return a == 1\n    if a % m == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return is_quad_residue(a, m)\n    return _is_nthpow_residue_bign(a, n, m)",
    ".sympy.ntheory.residue_ntheory.py@@_is_nthpow_residue_bign": "def _is_nthpow_residue_bign(a, n, m):\n    if primitive_root(m) is None:\n        for prime, power in factorint(m).items():\n            if not _is_nthpow_residue_bign_prime_power(a, n, prime, power):\n                return False\n        return True\n    f = totient(m)\n    k = f // igcd(f, n)\n    return pow(a, k, m) == 1",
    ".sympy.ntheory.residue_ntheory.py@@primitive_root": "def primitive_root(p):\n    p = as_int(p)\n    if p < 1:\n        raise ValueError('p is required to be positive')\n    if p <= 2:\n        return 1\n    f = factorint(p)\n    if len(f) > 2:\n        return None\n    if len(f) == 2:\n        if 2 not in f or f[2] > 1:\n            return None\n        for p1, e1 in f.items():\n            if p1 != 2:\n                break\n        i = 1\n        while i < p:\n            i += 2\n            if i % p1 == 0:\n                continue\n            if is_primitive_root(i, p):\n                return i\n    else:\n        if 2 in f:\n            if p == 4:\n                return 3\n            return None\n        p1, n = list(f.items())[0]\n        if n > 1:\n            g = primitive_root(p1)\n            if is_primitive_root(g, p1 ** 2):\n                return g\n            else:\n                for i in range(2, g + p1 + 1):\n                    if igcd(i, p) == 1 and is_primitive_root(i, p):\n                        return i\n    return next(_primitive_root_prime_iter(p))",
    ".sympy.core.function.py@@Function.__new__": "def __new__(cls, *args, **options):\n    if cls is Function:\n        return UndefinedFunction(*args, **options)\n    n = len(args)\n    if n not in cls.nargs:\n        temp = '%(name)s takes %(qual)s %(args)s argument%(plural)s (%(given)s given)'\n        raise TypeError(temp % {'name': cls, 'qual': 'exactly' if len(cls.nargs) == 1 else 'at least', 'args': min(cls.nargs), 'plural': 's' * (min(cls.nargs) != 1), 'given': n})\n    evaluate = options.get('evaluate', global_parameters.evaluate)\n    result = super(Function, cls).__new__(cls, *args, **options)\n    if evaluate and isinstance(result, cls) and result.args:\n        pr2 = min((cls._should_evalf(a) for a in result.args))\n        if pr2 > 0:\n            pr = max((cls._should_evalf(a) for a in result.args))\n            result = result.evalf(mlib.libmpf.prec_to_dps(pr))\n    return result",
    ".sympy.core.function.py@@FunctionClass.nargs": "def nargs(self):\n    from sympy.sets.sets import FiniteSet\n    return FiniteSet(*self._nargs) if self._nargs else S.Naturals0",
    ".sympy.sets.sets.py@@FiniteSet.__new__": "def __new__(cls, *args, **kwargs):\n    evaluate = kwargs.get('evaluate', global_parameters.evaluate)\n    if evaluate:\n        args = list(map(sympify, args))\n        if len(args) == 0:\n            return S.EmptySet\n    else:\n        args = list(map(sympify, args))\n    _args_set = set(args)\n    args = list(ordered(_args_set, Set._infimum_key))\n    obj = Basic.__new__(cls, *args)\n    obj._args_set = _args_set\n    return obj",
    ".sympy.core.sympify.py@@sympify": "def sympify(a, locals=None, convert_xor=True, strict=False, rational=False, evaluate=None):\n    is_sympy = getattr(a, '__sympy__', None)\n    if is_sympy is not None:\n        return a\n    if isinstance(a, CantSympify):\n        raise SympifyError(a)\n    cls = getattr(a, '__class__', None)\n    if cls is None:\n        cls = type(a)\n    conv = converter.get(cls, None)\n    if conv is not None:\n        return conv(a)\n    for superclass in getmro(cls):\n        try:\n            return converter[superclass](a)\n        except KeyError:\n            continue\n    if cls is type(None):\n        if strict:\n            raise SympifyError(a)\n        else:\n            return a\n    if evaluate is None:\n        evaluate = global_parameters.evaluate\n    if type(a).__module__ == 'numpy':\n        import numpy as np\n        if np.isscalar(a):\n            return _convert_numpy_types(a, locals=locals, convert_xor=convert_xor, strict=strict, rational=rational, evaluate=evaluate)\n    _sympy_ = getattr(a, '_sympy_', None)\n    if _sympy_ is not None:\n        try:\n            return a._sympy_()\n        except AttributeError:\n            pass\n    if not strict:\n        flat = getattr(a, 'flat', None)\n        if flat is not None:\n            shape = getattr(a, 'shape', None)\n            if shape is not None:\n                from ..tensor.array import Array\n                return Array(a.flat, a.shape)\n    if not isinstance(a, string_types):\n        for coerce in (float, int):\n            try:\n                coerced = coerce(a)\n            except (TypeError, ValueError):\n                continue\n            except AttributeError:\n                continue\n            try:\n                return sympify(coerced)\n            except SympifyError:\n                continue\n    if strict:\n        raise SympifyError(a)\n    if iterable(a):\n        try:\n            return type(a)([sympify(x, locals=locals, convert_xor=convert_xor, rational=rational) for x in a])\n        except TypeError:\n            pass\n    if isinstance(a, dict):\n        try:\n            return type(a)([sympify(x, locals=locals, convert_xor=convert_xor, rational=rational) for x in a.items()])\n        except TypeError:\n            pass\n    try:\n        from .compatibility import unicode\n        a = unicode(a)\n    except Exception as exc:\n        raise SympifyError(a, exc)\n    from sympy.parsing.sympy_parser import parse_expr, TokenError, standard_transformations\n    from sympy.parsing.sympy_parser import convert_xor as t_convert_xor\n    from sympy.parsing.sympy_parser import rationalize as t_rationalize\n    transformations = standard_transformations\n    if rational:\n        transformations += (t_rationalize,)\n    if convert_xor:\n        transformations += (t_convert_xor,)\n    try:\n        a = a.replace('\\n', '')\n        expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n    except (TokenError, SyntaxError) as exc:\n        raise SympifyError('could not parse %r' % a, exc)\n    return expr",
    ".sympy.core.numbers.py@@Integer.__new__": "def __new__(cls, i):\n    if isinstance(i, string_types):\n        i = i.replace(' ', '')\n    try:\n        ival = int(i)\n    except TypeError:\n        raise TypeError('Argument of Integer should be of numeric type, got %s.' % i)\n    if ival == 1:\n        return S.One\n    if ival == -1:\n        return S.NegativeOne\n    if ival == 0:\n        return S.Zero\n    obj = Expr.__new__(cls)\n    obj.p = ival\n    return obj",
    ".sympy.core.numbers.py@@Integer.__hash__": "def __hash__(self):\n    return hash(self.p)",
    ".sympy.core.compatibility.py@@ordered": "def ordered(seq, keys=None, default=True, warn=False):\n    d = defaultdict(list)\n    if keys:\n        if not isinstance(keys, (list, tuple)):\n            keys = [keys]\n        keys = list(keys)\n        f = keys.pop(0)\n        for a in seq:\n            d[f(a)].append(a)\n    else:\n        if not default:\n            raise ValueError('if default=False then keys must be provided')\n        d[None].extend(seq)\n    for k in sorted(d.keys()):\n        if len(d[k]) > 1:\n            if keys:\n                d[k] = ordered(d[k], keys, default, warn)\n            elif default:\n                d[k] = ordered(d[k], (_nodes, default_sort_key), default=False, warn=warn)\n            elif warn:\n                from sympy.utilities.iterables import uniq\n                u = list(uniq(d[k]))\n                if len(u) > 1:\n                    raise ValueError('not enough keys to break ties: %s' % u)\n        for v in d[k]:\n            yield v\n        d.pop(k)",
    ".sympy.sets.sets.py@@Set._infimum_key": "def _infimum_key(expr):\n    try:\n        infimum = expr.inf\n        assert infimum.is_comparable\n    except (NotImplementedError, AttributeError, AssertionError, ValueError):\n        infimum = S.Infinity\n    return infimum",
    ".sympy.core.numbers.py@@Infinity.__hash__": "def __hash__(self):\n    return super(Infinity, self).__hash__()",
    ".sympy.core.numbers.py@@Number.__hash__": "def __hash__(self):\n    return super(Number, self).__hash__()",
    ".sympy.core.expr.py@@Expr.__hash__": "def __hash__(self):\n    h = self._mhash\n    if h is None:\n        h = hash((type(self).__name__,) + self._hashable_content())\n        self._mhash = h\n    return h",
    ".sympy.core.basic.py@@Basic.__new__": "def __new__(cls, *args):\n    obj = object.__new__(cls)\n    obj._assumptions = cls.default_assumptions\n    obj._mhash = None\n    obj._args = args\n    return obj",
    ".sympy.sets.sets.py@@Set.__contains__": "def __contains__(self, other):\n    other = _sympify(other)\n    c = self._contains(other)\n    b = tfn[c]\n    if b is None:\n        raise TypeError('did not evaluate to a bool: %r' % c)\n    return b",
    ".sympy.core.sympify.py@@_sympify": "def _sympify(a):\n    return sympify(a, strict=True)",
    ".sympy.sets.sets.py@@FiniteSet._contains": "def _contains(self, other):\n    if other in self._args_set:\n        return True\n    else:\n        return fuzzy_or((fuzzy_bool(Eq(e, other, evaluate=True)) for e in self.args))",
    ".sympy.logic.boolalg.py@@BooleanTrue.__nonzero__": "def __nonzero__(self):\n    return True",
    ".sympy.core.function.py@@Application.__new__": "def __new__(cls, *args, **options):\n    from sympy.sets.fancysets import Naturals0\n    from sympy.sets.sets import FiniteSet\n    args = list(map(sympify, args))\n    evaluate = options.pop('evaluate', global_parameters.evaluate)\n    options.pop('nargs', None)\n    if options:\n        raise ValueError('Unknown options: %s' % options)\n    if evaluate:\n        evaluated = cls.eval(*args)\n        if evaluated is not None:\n            return evaluated\n    obj = super(Application, cls).__new__(cls, *args, **options)\n    sentinel = object()\n    objnargs = getattr(obj, 'nargs', sentinel)\n    if objnargs is not sentinel:\n        if is_sequence(objnargs):\n            nargs = tuple(ordered(set(objnargs)))\n        elif objnargs is not None:\n            nargs = (as_int(objnargs),)\n        else:\n            nargs = None\n    else:\n        nargs = obj._nargs\n    obj.nargs = FiniteSet(*nargs) if nargs else Naturals0()\n    return obj",
    ".sympy.ntheory.factor_.py@@totient.eval": "def eval(cls, n):\n    n = sympify(n)\n    if n.is_Integer:\n        if n < 1:\n            raise ValueError('n must be a positive integer')\n        factors = factorint(n)\n        return cls._from_factors(factors)\n    elif not isinstance(n, Expr) or n.is_integer is False or n.is_positive is False:\n        raise ValueError('n must be a positive integer')",
    ".sympy.core.numbers.py@@Integer.__lt__": "def __lt__(self, other):\n    try:\n        other = _sympify(other)\n    except SympifyError:\n        return NotImplemented\n    if other.is_Integer:\n        return _sympify(self.p < other.p)\n    return Rational.__lt__(self, other)",
    ".sympy.logic.boolalg.py@@BooleanFalse.__nonzero__": "def __nonzero__(self):\n    return False",
    ".sympy.ntheory.factor_.py@@factorint": "def factorint(n, limit=None, use_trial=True, use_rho=True, use_pm1=True, verbose=False, visual=None, multiple=False):\n    if isinstance(n, Dict):\n        n = dict(n)\n    if multiple:\n        fac = factorint(n, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose, visual=False, multiple=False)\n        factorlist = sum(([p] * fac[p] if fac[p] > 0 else [S.One / p] * -fac[p] for p in sorted(fac)), [])\n        return factorlist\n    factordict = {}\n    if visual and (not isinstance(n, Mul)) and (not isinstance(n, dict)):\n        factordict = factorint(n, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose, visual=False)\n    elif isinstance(n, Mul):\n        factordict = {int(k): int(v) for k, v in n.as_powers_dict().items()}\n    elif isinstance(n, dict):\n        factordict = n\n    if factordict and (isinstance(n, Mul) or isinstance(n, dict)):\n        for key in list(factordict.keys()):\n            if isprime(key):\n                continue\n            e = factordict.pop(key)\n            d = factorint(key, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose, visual=False)\n            for k, v in d.items():\n                if k in factordict:\n                    factordict[k] += v * e\n                else:\n                    factordict[k] = v * e\n    if visual or (type(n) is dict and visual is not True and (visual is not False)):\n        if factordict == {}:\n            return S.One\n        if -1 in factordict:\n            factordict.pop(-1)\n            args = [S.NegativeOne]\n        else:\n            args = []\n        args.extend([Pow(*i, evaluate=False) for i in sorted(factordict.items())])\n        return Mul(*args, evaluate=False)\n    elif isinstance(n, dict) or isinstance(n, Mul):\n        return factordict\n    assert use_trial or use_rho or use_pm1\n    from sympy.functions.combinatorial.factorials import factorial\n    if isinstance(n, factorial):\n        x = as_int(n.args[0])\n        if x >= 20:\n            factors = {}\n            m = 2\n            for p in sieve.primerange(2, x + 1):\n                if m > 1:\n                    m, q = (0, x // p)\n                    while q != 0:\n                        m += q\n                        q //= p\n                factors[p] = m\n            if factors and verbose:\n                for k in sorted(factors):\n                    print(factor_msg % (k, factors[k]))\n            if verbose:\n                print(complete_msg)\n            return factors\n        else:\n            n = n.func(x)\n    n = as_int(n)\n    if limit:\n        limit = int(limit)\n    if n < 0:\n        factors = factorint(-n, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose, visual=False)\n        factors[-1] = 1\n        return factors\n    if limit and limit < 2:\n        if n == 1:\n            return {}\n        return {n: 1}\n    elif n < 10:\n        return [{0: 1}, {}, {2: 1}, {3: 1}, {2: 2}, {5: 1}, {2: 1, 3: 1}, {7: 1}, {2: 3}, {3: 2}][n]\n    factors = {}\n    if verbose:\n        sn = str(n)\n        if len(sn) > 50:\n            print('Factoring %s' % sn[:5] + '..(%i other digits)..' % (len(sn) - 10) + sn[-5:])\n        else:\n            print('Factoring', n)\n    if use_trial:\n        small = 2 ** 15\n        fail_max = 600\n        small = min(small, limit or small)\n        if verbose:\n            print(trial_int_msg % (2, small, fail_max))\n        n, next_p = _factorint_small(factors, n, small, fail_max)\n    else:\n        next_p = 2\n    if factors and verbose:\n        for k in sorted(factors):\n            print(factor_msg % (k, factors[k]))\n    if next_p == 0:\n        if n > 1:\n            factors[int(n)] = 1\n        if verbose:\n            print(complete_msg)\n        return factors\n    try:\n        if limit and next_p > limit:\n            if verbose:\n                print('Exceeded limit:', limit)\n            _check_termination(factors, n, limit, use_trial, use_rho, use_pm1, verbose)\n            if n > 1:\n                factors[int(n)] = 1\n            return factors\n        else:\n            sqrt_n = integer_nthroot(n, 2)[0]\n            a = sqrt_n + 1\n            a2 = a ** 2\n            b2 = a2 - n\n            for i in range(3):\n                b, fermat = integer_nthroot(b2, 2)\n                if fermat:\n                    break\n                b2 += 2 * a + 1\n                a += 1\n            if fermat:\n                if verbose:\n                    print(fermat_msg)\n                if limit:\n                    limit -= 1\n                for r in [a - b, a + b]:\n                    facs = factorint(r, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose)\n                    for k, v in facs.items():\n                        factors[k] = factors.get(k, 0) + v\n                raise StopIteration\n            _check_termination(factors, n, limit, use_trial, use_rho, use_pm1, verbose)\n    except StopIteration:\n        if verbose:\n            print(complete_msg)\n        return factors\n    low, high = (next_p, 2 * next_p)\n    limit = limit or sqrt_n\n    limit += 1\n    while 1:\n        try:\n            high_ = high\n            if limit < high_:\n                high_ = limit\n            if use_trial:\n                if verbose:\n                    print(trial_msg % (low, high_))\n                ps = sieve.primerange(low, high_)\n                n, found_trial = _trial(factors, n, ps, verbose)\n                if found_trial:\n                    _check_termination(factors, n, limit, use_trial, use_rho, use_pm1, verbose)\n            else:\n                found_trial = False\n            if high > limit:\n                if verbose:\n                    print('Exceeded limit:', limit)\n                if n > 1:\n                    factors[int(n)] = 1\n                raise StopIteration\n            if not found_trial:\n                if use_pm1 or use_rho:\n                    high_root = max(int(math.log(high_ ** 0.7)), low, 3)\n                    if use_pm1:\n                        if verbose:\n                            print(pm1_msg % (high_root, high_))\n                        c = pollard_pm1(n, B=high_root, seed=high_)\n                        if c:\n                            ps = factorint(c, limit=limit - 1, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose)\n                            n, _ = _trial(factors, n, ps, verbose=False)\n                            _check_termination(factors, n, limit, use_trial, use_rho, use_pm1, verbose)\n                    if use_rho:\n                        max_steps = high_root\n                        if verbose:\n                            print(rho_msg % (1, max_steps, high_))\n                        c = pollard_rho(n, retries=1, max_steps=max_steps, seed=high_)\n                        if c:\n                            ps = factorint(c, limit=limit - 1, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose)\n                            n, _ = _trial(factors, n, ps, verbose=False)\n                            _check_termination(factors, n, limit, use_trial, use_rho, use_pm1, verbose)\n        except StopIteration:\n            if verbose:\n                print(complete_msg)\n            return factors\n        low, high = (high, high * 2)",
    ".sympy.core.numbers.py@@Integer.__int__": "def __int__(self):\n    return self.p",
    ".sympy.core.numbers.py@@Integer.__ne__": "def __ne__(self, other):\n    return not self == other",
    ".sympy.core.numbers.py@@Integer.__eq__": "def __eq__(self, other):\n    if isinstance(other, integer_types):\n        return self.p == other\n    elif isinstance(other, Integer):\n        return self.p == other.p\n    return Rational.__eq__(self, other)",
    ".sympy.ntheory.factor_.py@@totient._from_factors": "def _from_factors(self, factors):\n    t = 1\n    for p, k in factors.items():\n        t *= (p - 1) * p ** (k - 1)\n    return t",
    ".sympy.core.numbers.py@@igcd": "def igcd(*args):\n    if len(args) < 2:\n        raise TypeError('igcd() takes at least 2 arguments (%s given)' % len(args))\n    args_temp = [abs(as_int(i)) for i in args]\n    if 1 in args_temp:\n        return 1\n    a = args_temp.pop()\n    for b in args_temp:\n        a = igcd2(a, b) if b else a\n    return a",
    ".sympy.core.numbers.py@@igcdex": "def igcdex(a, b):\n    if not a and (not b):\n        return (0, 1, 0)\n    if not a:\n        return (0, b // abs(b), abs(b))\n    if not b:\n        return (a // abs(a), 0, abs(a))\n    if a < 0:\n        a, x_sign = (-a, -1)\n    else:\n        x_sign = 1\n    if b < 0:\n        b, y_sign = (-b, -1)\n    else:\n        y_sign = 1\n    x, y, r, s = (1, 0, 0, 1)\n    while b:\n        c, q = (a % b, a // b)\n        a, b, r, s, x, y = (b, c, x - q * r, y - q * s, r, s)\n    return (x * x_sign, y * y_sign, a)",
    ".sympy.ntheory.factor_.py@@_factorint_small": "def _factorint_small(factors, n, limit, fail_max):\n\n    def done(n, d):\n        if d * d <= n:\n            return (n, d)\n        return (n, 0)\n    d = 2\n    m = trailing(n)\n    if m:\n        factors[d] = m\n        n >>= m\n    d = 3\n    if limit < d:\n        if n > 1:\n            factors[n] = 1\n        return done(n, d)\n    m = 0\n    while n % d == 0:\n        n //= d\n        m += 1\n        if m == 20:\n            mm = multiplicity(d, n)\n            m += mm\n            n //= d ** mm\n            break\n    if m:\n        factors[d] = m\n    if limit * limit > n:\n        maxx = 0\n    else:\n        maxx = limit * limit\n    dd = maxx or n\n    d = 5\n    fails = 0\n    while fails < fail_max:\n        if d * d > dd:\n            break\n        m = 0\n        while n % d == 0:\n            n //= d\n            m += 1\n            if m == 20:\n                mm = multiplicity(d, n)\n                m += mm\n                n //= d ** mm\n                break\n        if m:\n            factors[d] = m\n            dd = maxx or n\n            fails = 0\n        else:\n            fails += 1\n        d += 2\n        if d * d > dd:\n            break\n        m = 0\n        while n % d == 0:\n            n //= d\n            m += 1\n            if m == 20:\n                mm = multiplicity(d, n)\n                m += mm\n                n //= d ** mm\n                break\n        if m:\n            factors[d] = m\n            dd = maxx or n\n            fails = 0\n        else:\n            fails += 1\n        d += 4\n    return done(n, d)",
    ".sympy.ntheory.factor_.py@@trailing": "def trailing(n):\n    n = abs(int(n))\n    if not n:\n        return 0\n    low_byte = n & 255\n    if low_byte:\n        return small_trailing[low_byte]\n    z = bitcount(n) - 1\n    if isinstance(z, SYMPY_INTS):\n        if n == 1 << z:\n            return z\n    if z < 300:\n        t = 8\n        n >>= 8\n        while not n & 255:\n            n >>= 8\n            t += 8\n        return t + small_trailing[n & 255]\n    t = 0\n    p = 8\n    while not n & 1:\n        while not n & (1 << p) - 1:\n            n >>= p\n            t += p\n            p *= 2\n        p //= 2\n    return t",
    ".sympy.ntheory.factor_.py@@done": "def done(n, d):\n    if d * d <= n:\n        return (n, d)\n    return (n, 0)",
    ".sympy.ntheory.residue_ntheory.py@@_primitive_root_prime_iter": "def _primitive_root_prime_iter(p):\n    v = [(p - 1) // i for i in factorint(p - 1).keys()]\n    a = 2\n    while a < p:\n        for pw in v:\n            if pow(a, pw, p) == 1:\n                break\n        else:\n            yield a\n        a += 1",
    ".sympy.ntheory.primetest.py@@mr": "def mr(n, bases):\n    from sympy.ntheory.factor_ import trailing\n    from sympy.polys.domains import ZZ\n    n = as_int(n)\n    if n < 2:\n        return False\n    s = trailing(n - 1)\n    t = n >> s\n    for base in bases:\n        if base >= n:\n            base %= n\n        if base >= 2:\n            base = ZZ(base)\n            if not _test(n, base, s, t):\n                return False\n    return True",
    ".sympy.polys.domains.domain.py@@Domain.__call__": "def __call__(self, *args):\n    return self.new(*args)",
    ".sympy.polys.domains.domain.py@@Domain.new": "def new(self, *args):\n    return self.dtype(*args)",
    ".sympy.ntheory.primetest.py@@_test": "def _test(n, base, s, t):\n    b = pow(base, t, n)\n    if b == 1 or b == n - 1:\n        return True\n    else:\n        for j in range(1, s):\n            b = pow(b, 2, n)\n            if b == n - 1:\n                return True\n            if b == 1:\n                return False\n    return False",
    ".sympy.core.power.py@@integer_nthroot": "def integer_nthroot(y, n):\n    y, n = (as_int(y), as_int(n))\n    if y < 0:\n        raise ValueError('y must be nonnegative')\n    if n < 1:\n        raise ValueError('n must be positive')\n    if y in (0, 1):\n        return (y, True)\n    if n == 1:\n        return (y, True)\n    if n == 2:\n        x, rem = mpmath_sqrtrem(y)\n        return (int(x), not rem)\n    if n > y:\n        return (1, False)\n    try:\n        guess = int(y ** (1.0 / n) + 0.5)\n    except OverflowError:\n        exp = _log(y, 2) / n\n        if exp > 53:\n            shift = int(exp - 53)\n            guess = int(2.0 ** (exp - shift) + 1) << shift\n        else:\n            guess = int(2.0 ** exp)\n    if guess > 2 ** 50:\n        xprev, x = (-1, guess)\n        while 1:\n            t = x ** (n - 1)\n            xprev, x = (x, ((n - 1) * x + y // t) // n)\n            if abs(x - xprev) < 2:\n                break\n    else:\n        x = guess\n    t = x ** n\n    while t < y:\n        x += 1\n        t = x ** n\n    while t > y:\n        x -= 1\n        t = x ** n\n    return (int(x), t == y)",
    ".sympy.ntheory.factor_.py@@_check_termination": "def _check_termination(factors, n, limitp1, use_trial, use_rho, use_pm1, verbose):\n    if verbose:\n        print('Check for termination')\n    p = perfect_power(n, factor=False)\n    if p is not False:\n        base, exp = p\n        if limitp1:\n            limit = limitp1 - 1\n        else:\n            limit = limitp1\n        facs = factorint(base, limit, use_trial, use_rho, use_pm1, verbose=False)\n        for b, e in facs.items():\n            if verbose:\n                print(factor_msg % (b, e))\n            factors[b] = exp * e\n        raise StopIteration\n    if isprime(n):\n        factors[int(n)] = 1\n        raise StopIteration\n    if n == 1:\n        raise StopIteration",
    ".sympy.ntheory.factor_.py@@perfect_power": "def perfect_power(n, candidates=None, big=True, factor=True):\n    from sympy.core.power import integer_nthroot\n    n = as_int(n)\n    if n < 3:\n        if n < 1:\n            raise ValueError('expecting positive n')\n        return False\n    logn = math.log(n, 2)\n    max_possible = int(logn) + 2\n    not_square = n % 10 in [2, 3, 7, 8]\n    min_possible = 2 + not_square\n    if not candidates:\n        candidates = primerange(min_possible, max_possible)\n    else:\n        candidates = sorted([i for i in candidates if min_possible <= i < max_possible])\n        if n % 2 == 0:\n            e = trailing(n)\n            candidates = [i for i in candidates if e % i == 0]\n        if big:\n            candidates = reversed(candidates)\n        for e in candidates:\n            r, ok = integer_nthroot(n, e)\n            if ok:\n                return (r, e)\n        return False\n\n    def _factors():\n        rv = 2 + n % 2\n        while True:\n            yield rv\n            rv = nextprime(rv)\n    for fac, e in zip(_factors(), candidates):\n        if factor and n % fac == 0:\n            if fac == 2:\n                e = trailing(n)\n            else:\n                e = multiplicity(fac, n)\n            if e == 1:\n                return False\n            r, exact = integer_nthroot(n, e)\n            if not exact:\n                m = n // fac ** e\n                rE = perfect_power(m, candidates=divisors(e, generator=True))\n                if not rE:\n                    return False\n                else:\n                    r, E = rE\n                    r, e = (fac ** (e // E) * r, E)\n            if not big:\n                e0 = primefactors(e)\n                if e0[0] != e:\n                    r, e = (r ** (e // e0[0]), e0[0])\n            return (r, e)\n        if logn / e < 40:\n            b = 2.0 ** (logn / e)\n            if abs(int(b + 0.5) - b) > 0.01:\n                continue\n        r, exact = integer_nthroot(n, e)\n        if exact:\n            if big:\n                m = perfect_power(r, big=big, factor=factor)\n                if m:\n                    r, e = (m[0], e * m[1])\n            return (int(r), e)\n    return False",
    ".sympy.ntheory.factor_.py@@_factors": "def _factors():\n    rv = 2 + n % 2\n    while True:\n        yield rv\n        rv = nextprime(rv)",
    ".sympy.ntheory.generate.py@@primerange": "def primerange(a, b):\n    from sympy.functions.elementary.integers import ceiling\n    if a >= b:\n        return\n    if b <= sieve._list[-1]:\n        for i in sieve.primerange(a, b):\n            yield i\n        return\n    a = as_int(ceiling(a)) - 1\n    b = as_int(ceiling(b))\n    while 1:\n        a = nextprime(a)\n        if a < b:\n            yield a\n        else:\n            return",
    ".sympy.ntheory.generate.py@@Sieve.primerange": "def primerange(self, a, b):\n    from sympy.functions.elementary.integers import ceiling\n    a = max(2, as_int(ceiling(a)))\n    b = as_int(ceiling(b))\n    if a >= b:\n        return\n    self.extend(b)\n    i = self.search(a)[1]\n    maxi = len(self._list) + 1\n    while i < maxi:\n        p = self._list[i - 1]\n        if p < b:\n            yield p\n            i += 1\n        else:\n            return",
    ".sympy.functions.elementary.integers.py@@RoundFunction.eval": "def eval(cls, arg):\n    from sympy import im\n    if arg.is_integer or arg.is_finite is False:\n        return arg\n    if arg.is_imaginary or (S.ImaginaryUnit * arg).is_real:\n        i = im(arg)\n        if not i.has(S.ImaginaryUnit):\n            return cls(i) * S.ImaginaryUnit\n        return cls(arg, evaluate=False)\n    v = cls._eval_number(arg)\n    if v is not None:\n        return v\n    ipart = npart = spart = S.Zero\n    terms = Add.make_args(arg)\n    for t in terms:\n        if t.is_integer or (t.is_imaginary and im(t).is_integer):\n            ipart += t\n        elif t.has(Symbol):\n            spart += t\n        else:\n            npart += t\n    if not (npart or spart):\n        return ipart\n    if npart and (not spart or (npart.is_real and (spart.is_imaginary or (S.ImaginaryUnit * spart).is_real)) or (npart.is_imaginary and spart.is_real)):\n        try:\n            r, i = get_integer_part(npart, cls._dir, {}, return_ints=True)\n            ipart += Integer(r) + Integer(i) * S.ImaginaryUnit\n            npart = S.Zero\n        except (PrecisionExhausted, NotImplementedError):\n            pass\n    spart += npart\n    if not spart:\n        return ipart\n    elif spart.is_imaginary or (S.ImaginaryUnit * spart).is_real:\n        return ipart + cls(im(spart), evaluate=False) * S.ImaginaryUnit\n    else:\n        return ipart + cls(spart, evaluate=False)",
    ".sympy.ntheory.generate.py@@Sieve.extend": "def extend(self, n):\n    n = int(n)\n    if n <= self._list[-1]:\n        return\n    maxbase = int(n ** 0.5) + 1\n    self.extend(maxbase)\n    begin = self._list[-1] + 1\n    newsieve = _arange(begin, n + 1)\n    for p in self.primerange(2, maxbase):\n        startindex = -begin % p\n        for i in range(startindex, len(newsieve), p):\n            newsieve[i] = 0\n    self._list += _array('l', [x for x in newsieve if x])",
    ".sympy.ntheory.generate.py@@Sieve.search": "def search(self, n):\n    from sympy.functions.elementary.integers import ceiling\n    test = as_int(ceiling(n))\n    n = as_int(n)\n    if n < 2:\n        raise ValueError('n should be >= 2 but got: %s' % n)\n    if n > self._list[-1]:\n        self.extend(n)\n    b = bisect(self._list, n)\n    if self._list[b - 1] == test:\n        return (b, b)\n    else:\n        return (b, b + 1)",
    ".sympy.ntheory.generate.py@@nextprime": "def nextprime(n, ith=1):\n    n = int(n)\n    i = as_int(ith)\n    if i > 1:\n        pr = n\n        j = 1\n        while 1:\n            pr = nextprime(pr)\n            j += 1\n            if j > i:\n                break\n        return pr\n    if n < 2:\n        return 2\n    if n < 7:\n        return {2: 3, 3: 5, 4: 5, 5: 7, 6: 7}[n]\n    if n <= sieve._list[-2]:\n        l, u = sieve.search(n)\n        if l == u:\n            return sieve[u + 1]\n        else:\n            return sieve[u]\n    nn = 6 * (n // 6)\n    if nn == n:\n        n += 1\n        if isprime(n):\n            return n\n        n += 4\n    elif n - nn == 5:\n        n += 2\n        if isprime(n):\n            return n\n        n += 4\n    else:\n        n = nn + 5\n    while 1:\n        if isprime(n):\n            return n\n        n += 2\n        if isprime(n):\n            return n\n        n += 4",
    ".sympy.ntheory.generate.py@@Sieve.__getitem__": "def __getitem__(self, n):\n    if isinstance(n, slice):\n        self.extend_to_no(n.stop)\n        start = n.start if n.start is not None else 0\n        if start < 1:\n            raise IndexError('Sieve indices start at 1.')\n        return self._list[start - 1:n.stop - 1:n.step]\n    else:\n        if n < 1:\n            raise IndexError('Sieve indices start at 1.')\n        n = as_int(n)\n        self.extend_to_no(n)\n        return self._list[n - 1]",
    ".sympy.ntheory.generate.py@@Sieve.extend_to_no": "def extend_to_no(self, i):\n    i = as_int(i)\n    while len(self._list) < i:\n        self.extend(int(self._list[-1] * 1.5))",
    ".sympy.ntheory.residue_ntheory.py@@_nthroot_mod1": "def _nthroot_mod1(s, q, p, all_roots):\n    g = primitive_root(p)\n    if not isprime(q):\n        r = _nthroot_mod2(s, q, p)\n    else:\n        f = p - 1\n        assert (p - 1) % q == 0\n        k = 0\n        while f % q == 0:\n            k += 1\n            f = f // q\n        f1 = igcdex(-f, q)[0] % q\n        z = f * f1\n        x = (1 + z) // q\n        r1 = pow(s, x, p)\n        s1 = pow(s, f, p)\n        h = pow(g, f * q, p)\n        t = discrete_log(p, s1, h)\n        g2 = pow(g, z * t, p)\n        g3 = igcdex(g2, p)[0]\n        r = r1 * g3 % p\n    res = [r]\n    h = pow(g, (p - 1) // q, p)\n    hx = r\n    for i in range(q - 1):\n        hx = hx * h % p\n        res.append(hx)\n    if all_roots:\n        res.sort()\n        return res\n    return min(res)",
    ".sympy.ntheory.residue_ntheory.py@@discrete_log": "def discrete_log(n, a, b, order=None, prime_order=None):\n    n, a, b = (as_int(n), as_int(a), as_int(b))\n    if order is None:\n        order = n_order(b, n)\n    if prime_order is None:\n        prime_order = isprime(order)\n    if order < 1000:\n        return _discrete_log_trial_mul(n, a, b, order)\n    elif prime_order:\n        if order < 1000000000000:\n            return _discrete_log_shanks_steps(n, a, b, order)\n        return _discrete_log_pollard_rho(n, a, b, order)\n    return _discrete_log_pohlig_hellman(n, a, b, order)",
    ".sympy.ntheory.residue_ntheory.py@@n_order": "def n_order(a, n):\n    from collections import defaultdict\n    a, n = (as_int(a), as_int(n))\n    if igcd(a, n) != 1:\n        raise ValueError('The two numbers should be relatively prime')\n    factors = defaultdict(int)\n    f = factorint(n)\n    for px, kx in f.items():\n        if kx > 1:\n            factors[px] += kx - 1\n        fpx = factorint(px - 1)\n        for py, ky in fpx.items():\n            factors[py] += ky\n    group_order = 1\n    for px, kx in factors.items():\n        group_order *= px ** kx\n    order = 1\n    if a > n:\n        a = a % n\n    for p, e in factors.items():\n        exponent = group_order\n        for f in range(e + 1):\n            if pow(a, exponent, n) != 1:\n                order *= p ** (e - f + 1)\n                break\n            exponent = exponent // p\n    return order",
    ".sympy.ntheory.residue_ntheory.py@@_discrete_log_trial_mul": "def _discrete_log_trial_mul(n, a, b, order=None):\n    a %= n\n    b %= n\n    if order is None:\n        order = n\n    x = 1\n    for i in range(order):\n        if x == a:\n            return i\n        x = x * b % n\n    raise ValueError('Log does not exist')",
    ".sympy.ntheory.residue_ntheory.py@@_nthroot_mod2": "def _nthroot_mod2(s, q, p):\n    f = factorint(q)\n    v = []\n    for b, e in f.items():\n        v.extend([b] * e)\n    for qx in v:\n        s = _nthroot_mod1(s, qx, p, False)\n    return s"
}