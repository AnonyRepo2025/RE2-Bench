{
    ".lib.matplotlib.__init__.py@@RcParams.__getitem__": "def __getitem__(self, key):\n    if key in _deprecated_map:\n        version, alt_key, alt_val, inverse_alt = _deprecated_map[key]\n        _api.warn_deprecated(version, name=key, obj_type='rcparam', alternative=alt_key)\n        return inverse_alt(dict.__getitem__(self, alt_key))\n    elif key in _deprecated_ignore_map:\n        version, alt_key = _deprecated_ignore_map[key]\n        _api.warn_deprecated(version, name=key, obj_type='rcparam', alternative=alt_key)\n        return dict.__getitem__(self, alt_key) if alt_key else None\n    elif key == 'backend' and self is globals().get('rcParams'):\n        val = dict.__getitem__(self, key)\n        if val is rcsetup._auto_backend_sentinel:\n            from matplotlib import pyplot as plt\n            plt.switch_backend(rcsetup._auto_backend_sentinel)\n    return dict.__getitem__(self, key)",
    ".lib.matplotlib.cbook.__init__.py@@_safe_first_finite": "def _safe_first_finite(obj, *, skip_nonfinite=True):\n\n    def safe_isfinite(val):\n        if val is None:\n            return False\n        try:\n            return np.isfinite(val) if np.isscalar(val) else True\n        except TypeError:\n            return True\n    if skip_nonfinite is False:\n        if isinstance(obj, collections.abc.Iterator):\n            try:\n                return obj[0]\n            except TypeError:\n                pass\n            raise RuntimeError('matplotlib does not support generators as input')\n        return next(iter(obj))\n    elif isinstance(obj, np.flatiter):\n        return obj[0]\n    elif isinstance(obj, collections.abc.Iterator):\n        raise RuntimeError('matplotlib does not support generators as input')\n    else:\n        return next((val for val in obj if safe_isfinite(val)))",
    ".lib.matplotlib.cbook.__init__.py@@safe_isfinite": "def safe_isfinite(val):\n    if val is None:\n        return False\n    try:\n        return np.isfinite(val) if np.isscalar(val) else True\n    except TypeError:\n        return True"
}