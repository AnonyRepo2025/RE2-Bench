{
    ".sympy.core.compatibility.py@@ordered": "def ordered(seq, keys=None, default=True, warn=False):\n    d = defaultdict(list)\n    if keys:\n        if not isinstance(keys, (list, tuple)):\n            keys = [keys]\n        keys = list(keys)\n        f = keys.pop(0)\n        for a in seq:\n            d[f(a)].append(a)\n    else:\n        if not default:\n            raise ValueError('if default=False then keys must be provided')\n        d[None].extend(seq)\n    for k in sorted(d.keys()):\n        if len(d[k]) > 1:\n            if keys:\n                d[k] = ordered(d[k], keys, default, warn)\n            elif default:\n                d[k] = ordered(d[k], (_nodes, default_sort_key), default=False, warn=warn)\n            elif warn:\n                from sympy.utilities.iterables import uniq\n                u = list(uniq(d[k]))\n                if len(u) > 1:\n                    raise ValueError('not enough keys to break ties: %s' % u)\n        yield from d[k]\n        d.pop(k)",
    ".sympy.utilities.iterables.py@@group": "def group(seq, multiple=True):\n    if not seq:\n        return []\n    current, groups = ([seq[0]], [])\n    for elem in seq[1:]:\n        if elem == current[-1]:\n            current.append(elem)\n        else:\n            groups.append(current)\n            current = [elem]\n    groups.append(current)\n    if multiple:\n        return groups\n    for i, current in enumerate(groups):\n        groups[i] = (current[0], len(current))\n    return groups"
}