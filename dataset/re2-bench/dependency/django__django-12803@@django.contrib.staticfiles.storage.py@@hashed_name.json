{
    ".django.core.files.base.py@@File.chunks": "def chunks(self, chunk_size=None):\n    chunk_size = chunk_size or self.DEFAULT_CHUNK_SIZE\n    try:\n        self.seek(0)\n    except (AttributeError, UnsupportedOperation):\n        pass\n    while True:\n        data = self.read(chunk_size)\n        if not data:\n            break\n        yield data",
    ".django.core.files.storage.py@@FileSystemStorage.exists": "def exists(self, name):\n    return os.path.exists(self.path(name))",
    ".django.contrib.staticfiles.storage.py@@StaticFilesStorage.path": "def path(self, name):\n    if not self.location:\n        raise ImproperlyConfigured(\"You're using the staticfiles app without having set the STATIC_ROOT setting to a filesystem path.\")\n    return super().path(name)",
    ".django.core.files.storage.py@@FileSystemStorage.path": "def path(self, name):\n    return safe_join(self.location, name)",
    ".django.utils._os.py@@safe_join": "def safe_join(base, *paths):\n    final_path = abspath(join(base, *paths))\n    base_path = abspath(base)\n    if not normcase(final_path).startswith(normcase(base_path + sep)) and normcase(final_path) != normcase(base_path) and (dirname(normcase(base_path)) != normcase(base_path)):\n        raise SuspiciousFileOperation('The joined path ({}) is located outside of the base path component ({})'.format(final_path, base_path))\n    return final_path",
    ".django.core.files.storage.py@@Storage.open": "def open(self, name, mode='rb'):\n    return self._open(name, mode)",
    ".django.core.files.storage.py@@FileSystemStorage._open": "def _open(self, name, mode='rb'):\n    return File(open(self.path(name), mode))",
    ".django.core.files.base.py@@File.__init__": "def __init__(self, file, name=None):\n    self.file = file\n    if name is None:\n        name = getattr(file, 'name', None)\n    self.name = name\n    if hasattr(file, 'mode'):\n        self.mode = file.mode",
    ".django.core.files.base.py@@File.close": "def close(self):\n    self.file.close()",
    ".django.dispatch.dispatcher.py@@Signal._remove_receiver": "def _remove_receiver(self, receiver=None):\n    self._dead_receivers = True"
}