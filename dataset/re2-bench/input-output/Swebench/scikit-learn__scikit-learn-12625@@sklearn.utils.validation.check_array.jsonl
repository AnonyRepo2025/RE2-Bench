{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "null value in the ground truth"}, "kwargs": {"ensure_2d": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": null}, "kwargs": {"ensure_2d": false}}, "return": "[0 1 2]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"allow_nd": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[[0 1]\n  [2 3]]\n\n [[4 5]\n  [6 7]]]"}, "kwargs": {"allow_nd": true}}, "return": "[[[0 1]\n  [2 3]]\n\n [[4 5]\n  [6 7]]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "C", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "C", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "F", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "F", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": null, "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": null, "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": "C", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": "C", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": "F", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": "F", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": null, "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": null, "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1. 2. 3.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1. 2. 3.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[bool_]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[ True  True  True]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[bool_]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[ True  True  True]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[float64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2. 1. 3.]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[float64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2. 1. 3.]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[bool_]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[ True  True  True]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[bool_]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[ True  True  True]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "dtype": "str"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "dtype": "int64"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "dtype": "str"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "dtype": "int64"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_getitem": "bool"}, "accept_sparse": "null value in the ground truth"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"_getitem": false}, "accept_sparse": null}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "copy": true, "force_all_finite": true, "ensure_2d": false}}, "return": "[[0. 1. 2. 3. 4.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "C", "copy": true}}, "return": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "F", "copy": true}}, "return": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "C", "copy": false}}, "return": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "F", "copy": false}}, "return": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "C", "copy": true}}, "return": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "F", "copy": true}}, "return": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "C", "copy": false}}, "return": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "F", "copy": false}}, "return": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "str"}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"array": "[[inf  1.]\n [ 2.  3.]]"}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": "[[inf  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float]"}, "kwargs": {"force_all_finite": "str", "accept_sparse": "bool"}}, "return": "np.ndarray[float]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[nan  1.]\n [ 2.  3.]]"}, "kwargs": {"force_all_finite": "allow-nan", "accept_sparse": true}}, "return": "[[nan  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float]"}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": "np.ndarray[float]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[nan  1.]\n [ 2.  3.]]"}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": "[[nan  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "str", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "str", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[inf  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[inf  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "kwargs": {"force_all_finite": "str", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[nan  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "kwargs": {"force_all_finite": "allow-nan", "accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[nan  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[nan  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[nan  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[int64]", "values": "np.ndarray[int64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[int64]"}}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "values": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "shape": [3, 3], "ndim": 2, "iloc": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}}}, "kwargs": {}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[int64]", "values": "np.ndarray[int64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[int64]"}}}, "kwargs": {"ensure_2d": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "values": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "shape": [3, 3], "ndim": 2, "iloc": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}}}, "kwargs": {"ensure_2d": false}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[int64]", "values": "np.ndarray[int64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[int64]"}, "dtype": "str"}}, "kwargs": {"ensure_2d": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "values": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "shape": [3, 3], "ndim": 2, "iloc": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "dtype": "Hans"}}, "kwargs": {"ensure_2d": false}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[float64]", "values": "np.ndarray[float64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[float64]"}}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]", "values": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]", "shape": [4, 2], "ndim": 2, "iloc": {"array": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]"}}}, "kwargs": {}}, "return": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[float64]", "values": "np.ndarray[float64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[float64]"}}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]", "values": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]", "shape": [4, 2], "ndim": 2, "iloc": {"array": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]"}}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}}}, "return": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "null value in the ground truth"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": null}, "kwargs": {}}, "return": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool", "warn_on_dtype": "bool", "estimator": "str"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "kwargs": {"dtype": null, "accept_sparse": true, "warn_on_dtype": true, "estimator": "SomeEstimator"}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"accept_sparse": "bool", "accept_large_sparse": "bool", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": {"n_neighbors": "int", "radius": "null value in the ground truth", "algorithm": "str", "leaf_size": "int", "metric": "str", "metric_params": "null value in the ground truth", "p": "int", "n_jobs": "null value in the ground truth", "weights": "str"}}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "kwargs": {"accept_sparse": true, "accept_large_sparse": true, "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": true, "estimator": {"n_neighbors": 5, "radius": null, "algorithm": "auto", "leaf_size": 30, "metric": "minkowski", "metric_params": null, "p": 2, "n_jobs": null, "weights": "uniform"}}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool", "warn_on_dtype": "bool", "estimator": "str"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": null, "accept_sparse": true, "warn_on_dtype": true, "estimator": "SomeEstimator"}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"accept_sparse": "bool", "accept_large_sparse": "bool", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": {"n_neighbors": "int", "radius": "null value in the ground truth", "algorithm": "str", "leaf_size": "int", "metric": "str", "metric_params": "null value in the ground truth", "p": "int", "n_jobs": "null value in the ground truth", "weights": "str"}}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"accept_sparse": true, "accept_large_sparse": true, "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": true, "estimator": {"n_neighbors": 5, "radius": null, "algorithm": "auto", "leaf_size": 30, "metric": "minkowski", "metric_params": null, "p": 2, "n_jobs": null, "weights": "uniform"}}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": false}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": false}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "kwargs": {"dtype": null, "accept_sparse": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": false}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "null value in the ground truth"}, "kwargs": {"accept_sparse": "null value in the ground truth"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": null}, "kwargs": {"accept_sparse": null}}, "return": "[[1 2]\n [3 4]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "str"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": "csr"}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "null value in the ground truth"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": null}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "list of 1 str"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": ["csr"]}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"accept_large_sparse": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [20, 10], "maxprint": 50, "indices": "[3 2]", "indptr": "[0 0 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]", "data": "[0.32176116 0.41733891]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"accept_large_sparse": true, "accept_sparse": true}}, "return": {"_shape": [20, 10], "maxprint": 50, "indices": "[3 2]", "indptr": "[0 0 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]", "data": "[0.32176116 0.41733891]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"accept_large_sparse": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [20, 10], "maxprint": 50, "indices": "[10 17]", "indptr": "[0 0 1 1 2 2 2 2 2 2 2]", "data": "[0.36909929 0.31651872]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"accept_large_sparse": true, "accept_sparse": true}}, "return": {"_shape": [20, 10], "maxprint": 50, "indices": "[10 17]", "indptr": "[0 0 1 1 2 2 2 2 2 2 2]", "data": "[0.36909929 0.31651872]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[float64]", "has_canonical_format": "bool"}}, "kwargs": {"accept_large_sparse": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[float64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [20, 10], "maxprint": 50, "row": "[0 4]", "col": "[8 2]", "data": "[0.08601563 0.63040488]", "has_canonical_format": false}}, "kwargs": {"accept_large_sparse": true, "accept_sparse": true}}, "return": {"_shape": [20, 10], "maxprint": 50, "row": "[0 4]", "col": "[8 2]", "data": "[0.08601563 0.63040488]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "kwargs": {"accept_large_sparse": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [20, 10], "maxprint": 50, "indices": "[7 7]", "indptr": "[0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 2 2]", "data": "[[[0.06503287]]\n\n [[0.14377034]]]"}}, "kwargs": {"accept_large_sparse": true, "accept_sparse": true}}, "return": {"_shape": [20, 10], "maxprint": 50, "indices": "[7 7]", "indptr": "[0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 2 2]", "data": "[[[0.06503287]]\n\n [[0.14377034]]]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "in ground truth values, it is an empty list"}, "kwargs": {"accept_sparse": "bool", "accept_large_sparse": "bool", "dtype": "str", "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": "null value in the ground truth"}}, "return": "in ground truth values, it is an empty list"}, "values": {"inputs": {"self": {}, "args": {"array": "[]"}, "kwargs": {"accept_sparse": false, "accept_large_sparse": true, "dtype": "numeric", "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": true, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": false, "estimator": null}}, "return": "[]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"accept_sparse": "bool", "accept_large_sparse": "bool", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[  4.12710695   5.95815032]\n [ -7.76419309   3.40713999]\n [ -6.81384041   1.72898666]\n [ -8.41513739   5.37618988]\n [  3.32010421   9.1380369 ]\n [ -7.62651008   4.12822916]\n [ -7.93627782   6.13744988]\n [  3.41205122   7.75842525]\n [  3.72627978   5.62735732]\n [ -8.4684734    3.89734797]\n [  3.71878269   6.60064557]\n [ -8.74920568   4.1638959 ]\n [ -6.01627565   5.84763147]\n [-10.43162224   2.54993314]\n [ -7.43370941   4.92941842]\n [  4.42520889   8.11687449]\n [ -6.52842542   4.89112641]\n [  3.32333017   7.61432729]\n [  2.21864346   6.73671439]\n [  3.53162169   8.04913498]\n [ -4.53144872   6.42977505]\n [ -8.53814529   6.04205823]\n [ -6.96889509   5.02633142]\n [ -7.35556846   3.53218649]\n [ -7.61572162   4.5572579 ]\n [ -6.88736957   5.11439817]\n [ -7.98260282   4.10521312]\n [ -7.97533272   3.26818999]\n [  4.78541351   7.08571991]\n [ -9.54268396   3.89422566]\n [  5.31639851   7.87602269]\n [ -7.30802281   3.95396885]\n [ -7.8909269    5.03826263]\n [ -6.32760026   5.16846185]\n [ -7.67497326   3.43725145]\n [  2.38264209   7.10828703]\n [  6.52307752   6.76348513]\n [  3.7915318    5.76013553]\n [  3.53545325   6.81093411]\n [  3.82820559   6.74484698]\n [ -8.03283623   5.3957547 ]\n [  4.18409773   8.21628637]\n [  3.69090647   5.7335096 ]\n [ -8.98026361   4.0915729 ]\n [ -7.64333285   5.41436764]\n [  5.23260098   7.40487799]\n [ -8.04602597   3.95165514]\n [ -8.4296565    3.66177594]\n [ -7.68316086   3.84332339]\n [  4.21662055   6.89887896]\n [ -4.97255453   4.07539073]\n [ -9.69285762   4.43364338]\n [ -5.19486387   7.76466739]\n [ -7.87606433   5.53244097]\n [ -9.00838655   4.64588013]\n [ -5.16862354   2.25434679]\n [ -7.10486818   3.9432129 ]\n [ -8.01858543   3.48997381]\n [ -5.29127339   3.8124134 ]\n [  2.20239891   8.00311564]\n [ -5.35154733   5.5259928 ]\n [ -4.26809183   4.64548103]\n [ -7.81981842   4.54560753]\n [  3.29792925   6.21785855]\n [ -8.48172324   4.78882406]\n [  2.97881558   6.61400054]\n [ -7.37112933   4.07461675]\n [  4.37206778   5.23612182]\n [  2.87641595   7.2990822 ]\n [ -5.66993277   5.50899725]\n [ -6.74329196   4.78843394]\n [ -7.58547573   4.88849177]\n [ -7.57485616   4.77494034]\n [ -7.34864695   4.91757053]\n [  3.86758677   6.10409277]\n [  4.52118756   4.65476358]\n [-10.04856202   4.27938319]\n [ -4.9618141    3.36954263]\n [  4.11772101   6.71692943]\n [  3.4115319    6.91601596]\n [ -9.67901567   4.42782062]\n [ -8.66122032   2.71275613]\n [ -7.28403476   4.80637392]\n [ -6.80825499   5.02815035]\n [ -6.548838     4.47733208]\n [ -7.16956807   4.47184524]\n [ -6.43785607   4.45944506]\n [-10.17013436   5.77370262]\n [ -6.8248668    4.3919147 ]\n [ -8.5381693    3.61460286]\n [  4.09165807   7.95826146]\n [ -7.66599145   4.15321896]\n [ -8.59962597   4.80950045]\n [ -5.24594331   6.23609468]\n [  3.80290603   6.52037117]\n [ -8.34123166   5.86762454]\n [ -7.8217531    2.37329269]\n [  4.81534463   7.2964353 ]\n [  4.59260145   5.45117625]\n [  7.12015825   8.94082297]]"}, "kwargs": {"accept_sparse": false, "accept_large_sparse": true, "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 2, "ensure_min_features": 1, "warn_on_dtype": false, "estimator": null}}, "return": "[[  4.12710695   5.95815032]\n [ -7.76419309   3.40713999]\n [ -6.81384041   1.72898666]\n [ -8.41513739   5.37618988]\n [  3.32010421   9.1380369 ]\n [ -7.62651008   4.12822916]\n [ -7.93627782   6.13744988]\n [  3.41205122   7.75842525]\n [  3.72627978   5.62735732]\n [ -8.4684734    3.89734797]\n [  3.71878269   6.60064557]\n [ -8.74920568   4.1638959 ]\n [ -6.01627565   5.84763147]\n [-10.43162224   2.54993314]\n [ -7.43370941   4.92941842]\n [  4.42520889   8.11687449]\n [ -6.52842542   4.89112641]\n [  3.32333017   7.61432729]\n [  2.21864346   6.73671439]\n [  3.53162169   8.04913498]\n [ -4.53144872   6.42977505]\n [ -8.53814529   6.04205823]\n [ -6.96889509   5.02633142]\n [ -7.35556846   3.53218649]\n [ -7.61572162   4.5572579 ]\n [ -6.88736957   5.11439817]\n [ -7.98260282   4.10521312]\n [ -7.97533272   3.26818999]\n [  4.78541351   7.08571991]\n [ -9.54268396   3.89422566]\n [  5.31639851   7.87602269]\n [ -7.30802281   3.95396885]\n [ -7.8909269    5.03826263]\n [ -6.32760026   5.16846185]\n [ -7.67497326   3.43725145]\n [  2.38264209   7.10828703]\n [  6.52307752   6.76348513]\n [  3.7915318    5.76013553]\n [  3.53545325   6.81093411]\n [  3.82820559   6.74484698]\n [ -8.03283623   5.3957547 ]\n [  4.18409773   8.21628637]\n [  3.69090647   5.7335096 ]\n [ -8.98026361   4.0915729 ]\n [ -7.64333285   5.41436764]\n [  5.23260098   7.40487799]\n [ -8.04602597   3.95165514]\n [ -8.4296565    3.66177594]\n [ -7.68316086   3.84332339]\n [  4.21662055   6.89887896]\n [ -4.97255453   4.07539073]\n [ -9.69285762   4.43364338]\n [ -5.19486387   7.76466739]\n [ -7.87606433   5.53244097]\n [ -9.00838655   4.64588013]\n [ -5.16862354   2.25434679]\n [ -7.10486818   3.9432129 ]\n [ -8.01858543   3.48997381]\n [ -5.29127339   3.8124134 ]\n [  2.20239891   8.00311564]\n [ -5.35154733   5.5259928 ]\n [ -4.26809183   4.64548103]\n [ -7.81981842   4.54560753]\n [  3.29792925   6.21785855]\n [ -8.48172324   4.78882406]\n [  2.97881558   6.61400054]\n [ -7.37112933   4.07461675]\n [  4.37206778   5.23612182]\n [  2.87641595   7.2990822 ]\n [ -5.66993277   5.50899725]\n [ -6.74329196   4.78843394]\n [ -7.58547573   4.88849177]\n [ -7.57485616   4.77494034]\n [ -7.34864695   4.91757053]\n [  3.86758677   6.10409277]\n [  4.52118756   4.65476358]\n [-10.04856202   4.27938319]\n [ -4.9618141    3.36954263]\n [  4.11772101   6.71692943]\n [  3.4115319    6.91601596]\n [ -9.67901567   4.42782062]\n [ -8.66122032   2.71275613]\n [ -7.28403476   4.80637392]\n [ -6.80825499   5.02815035]\n [ -6.548838     4.47733208]\n [ -7.16956807   4.47184524]\n [ -6.43785607   4.45944506]\n [-10.17013436   5.77370262]\n [ -6.8248668    4.3919147 ]\n [ -8.5381693    3.61460286]\n [  4.09165807   7.95826146]\n [ -7.66599145   4.15321896]\n [ -8.59962597   4.80950045]\n [ -5.24594331   6.23609468]\n [  3.80290603   6.52037117]\n [ -8.34123166   5.86762454]\n [ -7.8217531    2.37329269]\n [  4.81534463   7.2964353 ]\n [  4.59260145   5.45117625]\n [  7.12015825   8.94082297]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"copy": "bool", "accept_sparse": "null value in the ground truth", "dtype": "list of 3 {'__repr__': 'str', '__hash__': 'str', '__str__': 'str', '__lt__': 'str', '__le__': 'str', '__eq__': 'str', '__ne__': 'str', '__gt__': 'str', '__ge__': 'str', '__add__': 'str', '__radd__': 'str', '__sub__': 'str', '__rsub__': 'str', '__mul__': 'str', '__rmul__': 'str', '__mod__': 'str', '__rmod__': 'str', '__divmod__': 'str', '__rdivmod__': 'str', '__pow__': 'str', '__rpow__': 'str', '__neg__': 'str', '__pos__': 'str', '__abs__': 'str', '__bool__': 'str', '__int__': 'str', '__float__': 'str', '__floordiv__': 'str', '__rfloordiv__': 'str', '__truediv__': 'str', '__rtruediv__': 'str', '__new__': 'str', 'as_integer_ratio': 'str', '__doc__': 'null value in the ground truth'}"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[  4.12710695   5.95815032]\n [ -7.76419309   3.40713999]\n [ -6.81384041   1.72898666]\n [ -8.41513739   5.37618988]\n [  3.32010421   9.1380369 ]\n [ -7.62651008   4.12822916]\n [ -7.93627782   6.13744988]\n [  3.41205122   7.75842525]\n [  3.72627978   5.62735732]\n [ -8.4684734    3.89734797]\n [  3.71878269   6.60064557]\n [ -8.74920568   4.1638959 ]\n [ -6.01627565   5.84763147]\n [-10.43162224   2.54993314]\n [ -7.43370941   4.92941842]\n [  4.42520889   8.11687449]\n [ -6.52842542   4.89112641]\n [  3.32333017   7.61432729]\n [  2.21864346   6.73671439]\n [  3.53162169   8.04913498]\n [ -4.53144872   6.42977505]\n [ -8.53814529   6.04205823]\n [ -6.96889509   5.02633142]\n [ -7.35556846   3.53218649]\n [ -7.61572162   4.5572579 ]\n [ -6.88736957   5.11439817]\n [ -7.98260282   4.10521312]\n [ -7.97533272   3.26818999]\n [  4.78541351   7.08571991]\n [ -9.54268396   3.89422566]\n [  5.31639851   7.87602269]\n [ -7.30802281   3.95396885]\n [ -7.8909269    5.03826263]\n [ -6.32760026   5.16846185]\n [ -7.67497326   3.43725145]\n [  2.38264209   7.10828703]\n [  6.52307752   6.76348513]\n [  3.7915318    5.76013553]\n [  3.53545325   6.81093411]\n [  3.82820559   6.74484698]\n [ -8.03283623   5.3957547 ]\n [  4.18409773   8.21628637]\n [  3.69090647   5.7335096 ]\n [ -8.98026361   4.0915729 ]\n [ -7.64333285   5.41436764]\n [  5.23260098   7.40487799]\n [ -8.04602597   3.95165514]\n [ -8.4296565    3.66177594]\n [ -7.68316086   3.84332339]\n [  4.21662055   6.89887896]\n [ -4.97255453   4.07539073]\n [ -9.69285762   4.43364338]\n [ -5.19486387   7.76466739]\n [ -7.87606433   5.53244097]\n [ -9.00838655   4.64588013]\n [ -5.16862354   2.25434679]\n [ -7.10486818   3.9432129 ]\n [ -8.01858543   3.48997381]\n [ -5.29127339   3.8124134 ]\n [  2.20239891   8.00311564]\n [ -5.35154733   5.5259928 ]\n [ -4.26809183   4.64548103]\n [ -7.81981842   4.54560753]\n [  3.29792925   6.21785855]\n [ -8.48172324   4.78882406]\n [  2.97881558   6.61400054]\n [ -7.37112933   4.07461675]\n [  4.37206778   5.23612182]\n [  2.87641595   7.2990822 ]\n [ -5.66993277   5.50899725]\n [ -6.74329196   4.78843394]\n [ -7.58547573   4.88849177]\n [ -7.57485616   4.77494034]\n [ -7.34864695   4.91757053]\n [  3.86758677   6.10409277]\n [  4.52118756   4.65476358]\n [-10.04856202   4.27938319]\n [ -4.9618141    3.36954263]\n [  4.11772101   6.71692943]\n [  3.4115319    6.91601596]\n [ -9.67901567   4.42782062]\n [ -8.66122032   2.71275613]\n [ -7.28403476   4.80637392]\n [ -6.80825499   5.02815035]\n [ -6.548838     4.47733208]\n [ -7.16956807   4.47184524]\n [ -6.43785607   4.45944506]\n [-10.17013436   5.77370262]\n [ -6.8248668    4.3919147 ]\n [ -8.5381693    3.61460286]\n [  4.09165807   7.95826146]\n [ -7.66599145   4.15321896]\n [ -8.59962597   4.80950045]\n [ -5.24594331   6.23609468]\n [  3.80290603   6.52037117]\n [ -8.34123166   5.86762454]\n [ -7.8217531    2.37329269]\n [  4.81534463   7.2964353 ]\n [  4.59260145   5.45117625]\n [  7.12015825   8.94082297]]"}, "kwargs": {"copy": true, "accept_sparse": null, "dtype": [{"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}]}}, "return": "[[  4.12710695   5.95815032]\n [ -7.76419309   3.40713999]\n [ -6.81384041   1.72898666]\n [ -8.41513739   5.37618988]\n [  3.32010421   9.1380369 ]\n [ -7.62651008   4.12822916]\n [ -7.93627782   6.13744988]\n [  3.41205122   7.75842525]\n [  3.72627978   5.62735732]\n [ -8.4684734    3.89734797]\n [  3.71878269   6.60064557]\n [ -8.74920568   4.1638959 ]\n [ -6.01627565   5.84763147]\n [-10.43162224   2.54993314]\n [ -7.43370941   4.92941842]\n [  4.42520889   8.11687449]\n [ -6.52842542   4.89112641]\n [  3.32333017   7.61432729]\n [  2.21864346   6.73671439]\n [  3.53162169   8.04913498]\n [ -4.53144872   6.42977505]\n [ -8.53814529   6.04205823]\n [ -6.96889509   5.02633142]\n [ -7.35556846   3.53218649]\n [ -7.61572162   4.5572579 ]\n [ -6.88736957   5.11439817]\n [ -7.98260282   4.10521312]\n [ -7.97533272   3.26818999]\n [  4.78541351   7.08571991]\n [ -9.54268396   3.89422566]\n [  5.31639851   7.87602269]\n [ -7.30802281   3.95396885]\n [ -7.8909269    5.03826263]\n [ -6.32760026   5.16846185]\n [ -7.67497326   3.43725145]\n [  2.38264209   7.10828703]\n [  6.52307752   6.76348513]\n [  3.7915318    5.76013553]\n [  3.53545325   6.81093411]\n [  3.82820559   6.74484698]\n [ -8.03283623   5.3957547 ]\n [  4.18409773   8.21628637]\n [  3.69090647   5.7335096 ]\n [ -8.98026361   4.0915729 ]\n [ -7.64333285   5.41436764]\n [  5.23260098   7.40487799]\n [ -8.04602597   3.95165514]\n [ -8.4296565    3.66177594]\n [ -7.68316086   3.84332339]\n [  4.21662055   6.89887896]\n [ -4.97255453   4.07539073]\n [ -9.69285762   4.43364338]\n [ -5.19486387   7.76466739]\n [ -7.87606433   5.53244097]\n [ -9.00838655   4.64588013]\n [ -5.16862354   2.25434679]\n [ -7.10486818   3.9432129 ]\n [ -8.01858543   3.48997381]\n [ -5.29127339   3.8124134 ]\n [  2.20239891   8.00311564]\n [ -5.35154733   5.5259928 ]\n [ -4.26809183   4.64548103]\n [ -7.81981842   4.54560753]\n [  3.29792925   6.21785855]\n [ -8.48172324   4.78882406]\n [  2.97881558   6.61400054]\n [ -7.37112933   4.07461675]\n [  4.37206778   5.23612182]\n [  2.87641595   7.2990822 ]\n [ -5.66993277   5.50899725]\n [ -6.74329196   4.78843394]\n [ -7.58547573   4.88849177]\n [ -7.57485616   4.77494034]\n [ -7.34864695   4.91757053]\n [  3.86758677   6.10409277]\n [  4.52118756   4.65476358]\n [-10.04856202   4.27938319]\n [ -4.9618141    3.36954263]\n [  4.11772101   6.71692943]\n [  3.4115319    6.91601596]\n [ -9.67901567   4.42782062]\n [ -8.66122032   2.71275613]\n [ -7.28403476   4.80637392]\n [ -6.80825499   5.02815035]\n [ -6.548838     4.47733208]\n [ -7.16956807   4.47184524]\n [ -6.43785607   4.45944506]\n [-10.17013436   5.77370262]\n [ -6.8248668    4.3919147 ]\n [ -8.5381693    3.61460286]\n [  4.09165807   7.95826146]\n [ -7.66599145   4.15321896]\n [ -8.59962597   4.80950045]\n [ -5.24594331   6.23609468]\n [  3.80290603   6.52037117]\n [ -8.34123166   5.86762454]\n [ -7.8217531    2.37329269]\n [  4.81534463   7.2964353 ]\n [  4.59260145   5.45117625]\n [  7.12015825   8.94082297]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"accept_sparse": "str", "accept_large_sparse": "bool", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ -6.57141417  -1.66691104]\n [ -6.08789679  -3.42362391]\n [ 10.63904968   7.74199671]\n [  6.15303783  -7.73035231]\n [ -6.50717857  -1.1740927 ]\n [ 10.52473895   9.46688657]\n [  7.08317854  -7.39200352]\n [  7.63579921   8.50836841]\n [  7.66813454   9.38464113]\n [ -5.17310579  -1.61315563]\n [  8.4015515    8.59980459]\n [  6.97898101  -7.81681964]\n [  7.7665315   -9.81329095]\n [  6.99505526  -6.35135344]\n [ -5.9056774   -2.41415708]\n [  9.35745937  10.41345426]\n [ -7.20624438  -2.46683648]\n [  7.45090969  -8.4751183 ]\n [  8.66533498  -6.26577703]\n [  6.97592224 -10.03871299]\n [ -6.39406869  -1.26952804]\n [  8.18858341   8.00622701]\n [  8.32060557  -8.53852249]\n [ -7.23587813  -2.61018071]\n [  6.3286388   -6.82779598]\n [  7.462032    -9.69206203]\n [ -6.05285109  -3.12775495]\n [  7.03001037  -9.77053387]\n [  6.7641362    9.74997817]\n [  5.97126709  -6.63006218]\n [  7.36676558  -8.07433919]\n [ -5.1977541   -2.68392169]\n [  7.26068514   9.46079178]\n [  9.49495313   9.23057488]\n [  8.81106424   7.8060025 ]\n [ -6.43453115  -2.517626  ]\n [  4.43565039  -7.55958305]\n [  9.42460164   8.57336324]\n [  6.15586402  -7.67031946]\n [  9.85365721   7.41271778]\n [  6.9612842   -6.68712553]\n [  6.37102679   8.89600949]\n [  8.64922543  10.24991791]\n [ -7.30390204  -2.20728651]\n [ -4.23126438  -1.47867283]\n [  6.27940023  -9.64459124]\n [ -6.57518252  -4.62147348]\n [  6.58984098  -7.35998603]\n [ -6.97693017  -2.82455284]\n [  7.2101192   -7.2396478 ]\n [  5.89864638  -9.69425106]\n [ -6.55099085  -2.62747227]\n [  6.76390784  -8.99560329]\n [  6.93558362  -7.389902  ]\n [ -6.30289064  -4.283738  ]\n [  6.7932973   -9.13501263]\n [ -6.51895701  -2.30156269]\n [  7.33176673   7.74977195]\n [ -5.04281458  -1.82221819]\n [ 10.09551716   8.40060223]\n [  8.8206116    8.92200729]\n [  5.79897056  -7.25054101]\n [  7.18613657  11.05746894]\n [  5.16563862  -8.55825619]\n [  8.56140868   9.97293922]\n [  9.04609351  -7.2845927 ]\n [  7.10219951  -6.94816461]\n [  7.38144039  -8.3167748 ]\n [  7.94959139   8.52837627]\n [  6.24979744  -7.74808547]\n [  9.57937511   8.87861775]\n [ 10.2465581    6.75476677]\n [ -6.0136644   -3.57609352]\n [ -7.52181279  -2.98092033]\n [  7.38448376  10.16123228]\n [ -5.4993025   -2.96725836]\n [  9.51170497   9.11371674]\n [  7.2989127   10.99607621]\n [ -6.80939483  -3.32222917]\n [ -6.7735772   -1.93154026]\n [  7.40966669  -8.22891002]\n [ -5.7745236   -2.28886331]\n [ -7.15437704  -1.26170873]\n [  6.43512104  -9.7792111 ]\n [  6.89660673   9.08336219]\n [  8.23626469   8.3386665 ]\n [ -6.79361703  -3.57323555]\n [ -5.89761743  -3.28348096]\n [ -6.36170484  -2.44039498]\n [ -7.44214005  -1.05471451]\n [ 10.26297059   9.13344018]\n [  8.42991459   9.07115877]\n [  9.56847687  11.40866052]\n [ -6.74862288  -2.8772734 ]\n [  7.10744128  -7.43333703]\n [ -6.29379268  -2.89926705]\n [  8.58095826   9.98465866]\n [  8.16899779   8.98943491]\n [  9.48014708  -8.90556841]\n [ -7.01223964  -4.46460543]]"}, "kwargs": {"accept_sparse": "csr", "accept_large_sparse": false, "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": false, "estimator": null}}, "return": "[[ -6.57141417  -1.66691104]\n [ -6.08789679  -3.42362391]\n [ 10.63904968   7.74199671]\n [  6.15303783  -7.73035231]\n [ -6.50717857  -1.1740927 ]\n [ 10.52473895   9.46688657]\n [  7.08317854  -7.39200352]\n [  7.63579921   8.50836841]\n [  7.66813454   9.38464113]\n [ -5.17310579  -1.61315563]\n [  8.4015515    8.59980459]\n [  6.97898101  -7.81681964]\n [  7.7665315   -9.81329095]\n [  6.99505526  -6.35135344]\n [ -5.9056774   -2.41415708]\n [  9.35745937  10.41345426]\n [ -7.20624438  -2.46683648]\n [  7.45090969  -8.4751183 ]\n [  8.66533498  -6.26577703]\n [  6.97592224 -10.03871299]\n [ -6.39406869  -1.26952804]\n [  8.18858341   8.00622701]\n [  8.32060557  -8.53852249]\n [ -7.23587813  -2.61018071]\n [  6.3286388   -6.82779598]\n [  7.462032    -9.69206203]\n [ -6.05285109  -3.12775495]\n [  7.03001037  -9.77053387]\n [  6.7641362    9.74997817]\n [  5.97126709  -6.63006218]\n [  7.36676558  -8.07433919]\n [ -5.1977541   -2.68392169]\n [  7.26068514   9.46079178]\n [  9.49495313   9.23057488]\n [  8.81106424   7.8060025 ]\n [ -6.43453115  -2.517626  ]\n [  4.43565039  -7.55958305]\n [  9.42460164   8.57336324]\n [  6.15586402  -7.67031946]\n [  9.85365721   7.41271778]\n [  6.9612842   -6.68712553]\n [  6.37102679   8.89600949]\n [  8.64922543  10.24991791]\n [ -7.30390204  -2.20728651]\n [ -4.23126438  -1.47867283]\n [  6.27940023  -9.64459124]\n [ -6.57518252  -4.62147348]\n [  6.58984098  -7.35998603]\n [ -6.97693017  -2.82455284]\n [  7.2101192   -7.2396478 ]\n [  5.89864638  -9.69425106]\n [ -6.55099085  -2.62747227]\n [  6.76390784  -8.99560329]\n [  6.93558362  -7.389902  ]\n [ -6.30289064  -4.283738  ]\n [  6.7932973   -9.13501263]\n [ -6.51895701  -2.30156269]\n [  7.33176673   7.74977195]\n [ -5.04281458  -1.82221819]\n [ 10.09551716   8.40060223]\n [  8.8206116    8.92200729]\n [  5.79897056  -7.25054101]\n [  7.18613657  11.05746894]\n [  5.16563862  -8.55825619]\n [  8.56140868   9.97293922]\n [  9.04609351  -7.2845927 ]\n [  7.10219951  -6.94816461]\n [  7.38144039  -8.3167748 ]\n [  7.94959139   8.52837627]\n [  6.24979744  -7.74808547]\n [  9.57937511   8.87861775]\n [ 10.2465581    6.75476677]\n [ -6.0136644   -3.57609352]\n [ -7.52181279  -2.98092033]\n [  7.38448376  10.16123228]\n [ -5.4993025   -2.96725836]\n [  9.51170497   9.11371674]\n [  7.2989127   10.99607621]\n [ -6.80939483  -3.32222917]\n [ -6.7735772   -1.93154026]\n [  7.40966669  -8.22891002]\n [ -5.7745236   -2.28886331]\n [ -7.15437704  -1.26170873]\n [  6.43512104  -9.7792111 ]\n [  6.89660673   9.08336219]\n [  8.23626469   8.3386665 ]\n [ -6.79361703  -3.57323555]\n [ -5.89761743  -3.28348096]\n [ -6.36170484  -2.44039498]\n [ -7.44214005  -1.05471451]\n [ 10.26297059   9.13344018]\n [  8.42991459   9.07115877]\n [  9.56847687  11.40866052]\n [ -6.74862288  -2.8772734 ]\n [  7.10744128  -7.43333703]\n [ -6.29379268  -2.89926705]\n [  8.58095826   9.98465866]\n [  8.16899779   8.98943491]\n [  9.48014708  -8.90556841]\n [ -7.01223964  -4.46460543]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_is_copy": "null value in the ground truth", "_mgr": "in ground truth values, it is an empty dict", "_item_cache": "in ground truth values, it is an empty dict", "_attrs": "in ground truth values, it is an empty dict"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"_is_copy": null, "_mgr": {}, "_item_cache": {}, "_attrs": {}}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "warn_on_dtype": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_is_copy": "null value in the ground truth", "_mgr": "in ground truth values, it is an empty dict", "_item_cache": "in ground truth values, it is an empty dict", "_attrs": "in ground truth values, it is an empty dict"}}, "kwargs": {"dtype": "str", "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"_is_copy": null, "_mgr": {}, "_item_cache": {}, "_attrs": {}}}, "kwargs": {"dtype": "numeric", "warn_on_dtype": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_is_copy": "null value in the ground truth", "_mgr": "in ground truth values, it is an empty dict", "_item_cache": "in ground truth values, it is an empty dict", "_attrs": "in ground truth values, it is an empty dict"}}, "kwargs": {"dtype": "np.ndarray[type]", "warn_on_dtype": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"_is_copy": null, "_mgr": {}, "_item_cache": {}, "_attrs": {}}}, "kwargs": {"dtype": "object", "warn_on_dtype": true}}, "return": "[[1 2 3]\n [4 5 6]]"}, "name": "check_array"}
