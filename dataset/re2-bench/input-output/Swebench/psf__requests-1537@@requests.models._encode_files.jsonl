{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"files": {"file1": "list of different types containing 2 elements ['str', 'in ground truth values, it is an empty dict']", "file2": "list of different types containing 3 elements ['str', 'in ground truth values, it is an empty dict']"}, "data": {"stuff": "str"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "list of 2 str"}, "values": {"inputs": {"self": {}, "args": {"files": {"file1": ["test_requests.py", {}], "file2": ["test_requests", {}, "text/py-content-type"]}, "data": {"stuff": "{\"a\": 123}"}}, "kwargs": {}}, "return": ["b'--e103254b78f44c34821a3e68148b0ee0\\r\\nContent-Disposition: form-data; name=\"stuff\"\\r\\n\\r\\n{\"a\": 123}\\r\\n--e103254b78f44c34821a3e68148b0ee0\\r\\nContent-Disposition: form-data; name=\"file1\"; filename=\"test_requests.py\"\\r\\nContent-Type: text/x-python\\r\\n\\r\\n#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\n\"\"\"Tests for Requests.\"\"\"\\n\\nfrom __future__ import division\\nimport json\\nimport os\\nimport unittest\\nimport pickle\\n\\nimport requests\\nfrom requests.auth import HTTPDigestAuth\\nfrom requests.adapters import HTTPAdapter\\nfrom requests.compat import str, cookielib, getproxies, urljoin, urlparse\\nfrom requests.cookies import cookiejar_from_dict\\nfrom requests.exceptions import InvalidURL, MissingSchema\\nfrom requests.structures import CaseInsensitiveDict\\n\\ntry:\\n    import StringIO\\nexcept ImportError:\\n    import io as StringIO\\n\\nHTTPBIN = \"os.environ.get(\\'HTTPBIN_URL\\', \\'http://httpbin.org/\\')\"\\n# Issue #1483: Make sure the URL always has a trailing slash\\nHTTPBIN = \"HTTPBIN.rstrip(\\'/\\')\" + \\'/\\'\\n\\n\\ndef \"httpbin(*suffix)\":\\n    \"\"\"Returns url for HTTPBIN resource.\"\"\"\\n    return \"urljoin(HTTPBIN, \\'/\\'.join(suffix)\")\\n\\n\\nclass \"RequestsTestCase(unittest.TestCase)\":\\n\\n    _multiprocess_can_split_ = True\\n\\n    def \"setUp(self)\":\\n        \"\"\"Create simple data set with headers.\"\"\"\\n        pass\\n\\n    def \"tearDown(self)\":\\n        \"\"\"Teardown.\"\"\"\\n        pass\\n\\n    def \"test_entry_points(self)\":\\n\\n        requests.session\\n        \"requests.session()\".get\\n        \"requests.session()\".head\\n        requests.get\\n        requests.head\\n        requests.put\\n        requests.patch\\n        requests.post\\n\\n    def \"test_invalid_url(self)\":\\n        \"self.assertRaises(MissingSchema, requests.get, \\'hiwpefhipowhefopw\\')\"\\n        \"self.assertRaises(InvalidURL, requests.get, \\'http://\\')\"\\n\\n    def \"test_basic_building(self)\":\\n        req = \"requests.Request()\"\\n        req.url = \\'http://kennethreitz.org/\\'\\n        req.data = {\\'life\\': \\'42\\'}\\n\\n        pr = \"req.prepare()\"\\n        assert pr.url == req.url\\n        assert pr.body == \\'life=42\\'\\n\\n    def \"test_no_content_length(self)\":\\n        get_req = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\").\"prepare()\"\\n        \"self.assertTrue(\\'Content-Length\\' not in get_req.headers)\"\\n        head_req = \"requests.Request(\\'HEAD\\', httpbin(\\'head\\')\").\"prepare()\"\\n        \"self.assertTrue(\\'Content-Length\\' not in head_req.headers)\"\\n\\n    def \"test_path_is_not_double_encoded(self)\":\\n        request = \"requests.Request(\\'GET\\', \"http://0.0.0.0/get/test case\")\".\"prepare()\"\\n\\n        \"self.assertEqual(request.path_url, \"/get/test%20case\")\"\\n\\n    def \"test_params_are_added_before_fragment(self)\":\\n        request = requests.Request(\\'GET\\',\\n            \"http://example.com/path#fragment\", params={\"a\": \"b\"}).\"prepare()\"\\n        \"self.assertEqual(request.url,\\n            \"http://example.com/path?a=b#fragment\")\"\\n        request = requests.Request(\\'GET\\',\\n            \"http://example.com/path?key=value#fragment\", params={\"a\": \"b\"}).\"prepare()\"\\n        \"self.assertEqual(request.url,\\n            \"http://example.com/path?key=value&a=b#fragment\")\"\\n\\n    def \"test_mixed_case_scheme_acceptable(self)\":\\n        s = \"requests.Session()\"\\n        s.proxies = \"getproxies()\"\\n        parts = \"urlparse(httpbin(\\'get\\')\")\\n        schemes = [\\'http://\\', \\'HTTP://\\', \\'hTTp://\\', \\'HttP://\\',\\n                   \\'https://\\', \\'HTTPS://\\', \\'hTTps://\\', \\'HttPs://\\']\\n        for scheme in schemes:\\n            url = scheme + parts.netloc + parts.path\\n            r = \"requests.Request(\\'GET\\', url)\"\\n            r = \"s.send(r.prepare()\")\\n            \"self.assertEqual(r.status_code, 200,\\n                             \"failed for scheme %s\" % scheme)\"\\n\\n    def \"test_HTTP_200_OK_GET_ALTERNATIVE(self)\":\\n        r = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\")\\n        s = \"requests.Session()\"\\n        s.proxies = \"getproxies()\"\\n\\n        r = \"s.send(r.prepare()\")\\n\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_302_ALLOW_REDIRECT_GET(self)\":\\n        r = \"requests.get(httpbin(\\'redirect\\', \\'1\\')\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    # def \"test_HTTP_302_ALLOW_REDIRECT_POST(self)\":\\n    #     r = \"requests.post(httpbin(\\'status\\', \\'302\\')\", data={\\'some\\': \\'data\\'})\\n    #     \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_200_OK_GET_WITH_PARAMS(self)\":\\n        heads = {\\'User-agent\\': \\'Mozilla/5.0\\'}\\n\\n        r = \"requests.get(httpbin(\\'user-agent\\')\", headers=heads)\\n\\n        \"self.assertTrue(heads[\\'User-agent\\'] in r.text)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self)\":\\n        heads = {\\'User-agent\\': \\'Mozilla/5.0\\'}\\n\\n        r = \"requests.get(httpbin(\\'get\\')\" + \\'?test=true\\', params={\\'q\\': \\'test\\'}, headers=heads)\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_set_cookie_on_301(self)\":\\n        s = \"requests.session()\"\\n        url = \"httpbin(\\'cookies/set?foo=bar\\')\"\\n        r = \"s.get(url)\"\\n        \"self.assertTrue(s.cookies[\\'foo\\'] == \\'bar\\')\"\\n\\n    def \"test_cookie_sent_on_redirect(self)\":\\n        s = \"requests.session()\"\\n        \"s.get(httpbin(\\'cookies/set?foo=bar\\')\")\\n        r = \"s.get(httpbin(\\'redirect/1\\')\")  # redirects to \"httpbin(\\'get\\')\"\\n        \"self.assertTrue(\"Cookie\" in r.json()\"[\"headers\"])\\n\\n    def \"test_cookie_removed_on_expire(self)\":\\n        s = \"requests.session()\"\\n        \"s.get(httpbin(\\'cookies/set?foo=bar\\')\")\\n        \"self.assertTrue(s.cookies[\\'foo\\'] == \\'bar\\')\"\\n        \"s.get(\\n            httpbin(\\'response-headers\\')\",\\n            params={\\n                \\'Set-Cookie\\':\\n                    \\'foo=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT\\'\\n            }\\n        )\\n        assert \\'foo\\' not in s.cookies\\n\\n    def \"test_cookie_quote_wrapped(self)\":\\n        s = \"requests.session()\"\\n        \"s.get(httpbin(\\'cookies/set?foo=\"bar:baz\"\\')\")\\n        \"self.assertTrue(s.cookies[\\'foo\\'] == \\'\"bar:baz\"\\')\"\\n\\n    def \"test_request_cookie_overrides_session_cookie(self)\":\\n        s = \"requests.session()\"\\n        s.cookies[\\'foo\\'] = \\'bar\\'\\n        r = \"s.get(httpbin(\\'cookies\\')\", cookies={\\'foo\\': \\'baz\\'})\\n        assert \"r.json()\"[\\'cookies\\'][\\'foo\\'] == \\'baz\\'\\n        # Session cookie should not be modified\\n        assert s.cookies[\\'foo\\'] == \\'bar\\'\\n\\n    def \"test_generic_cookiejar_works(self)\":\\n        cj = \"cookielib.CookieJar()\"\\n        cookiejar_from_dict({\\'foo\\': \\'bar\\'}, cj)\\n        s = \"requests.session()\"\\n        s.cookies = cj\\n        r = \"s.get(httpbin(\\'cookies\\')\")\\n        # Make sure the cookie was sent\\n        assert \"r.json()\"[\\'cookies\\'][\\'foo\\'] == \\'bar\\'\\n        # Make sure the session cj is still the custom one\\n        assert s.cookies is cj\\n\\n    def \"test_requests_in_history_are_not_overridden(self)\":\\n        resp = \"requests.get(httpbin(\\'redirect/3\\')\")\\n        urls = [r.url for r in resp.history]\\n        req_urls = [r.request.url for r in resp.history]\\n        \"self.assertEquals(urls, req_urls)\"\\n\\n    def \"test_user_agent_transfers(self)\":\\n\\n        heads = {\\n            \\'User-agent\\': \\'Mozilla/\"5.0 (github.com/kennethreitz/requests)\"\\'\\n        }\\n\\n        r = \"requests.get(httpbin(\\'user-agent\\')\", headers=heads)\\n        \"self.assertTrue(heads[\\'User-agent\\'] in r.text)\"\\n\\n        heads = {\\n            \\'user-agent\\': \\'Mozilla/\"5.0 (github.com/kennethreitz/requests)\"\\'\\n        }\\n\\n        r = \"requests.get(httpbin(\\'user-agent\\')\", headers=heads)\\n        \"self.assertTrue(heads[\\'user-agent\\'] in r.text)\"\\n\\n    def \"test_HTTP_200_OK_HEAD(self)\":\\n        r = \"requests.head(httpbin(\\'get\\')\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_200_OK_PUT(self)\":\\n        r = \"requests.put(httpbin(\\'put\\')\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self)\":\\n        auth = (\\'user\\', \\'pass\\')\\n        url = \"httpbin(\\'basic-auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n        s.auth = auth\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_basicauth_with_netrc(self)\":\\n        auth = (\\'user\\', \\'pass\\')\\n        wrong_auth = (\\'wronguser\\', \\'wrongpass\\')\\n        url = \"httpbin(\\'basic-auth\\', \\'user\\', \\'pass\\')\"\\n\\n        def \"get_netrc_auth_mock(url)\":\\n            return auth\\n        requests.sessions.get_netrc_auth = get_netrc_auth_mock\\n\\n        # Should use netrc and work.\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        # Given auth should override and fail.\\n        r = \"requests.get(url, auth=wrong_auth)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n\\n        # Should use netrc and work.\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        # Given auth should override and fail.\\n        s.auth = wrong_auth\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n    def \"test_DIGEST_HTTP_200_OK_GET(self)\":\\n\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n        s.auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_DIGEST_AUTH_RETURNS_COOKIE(self)\":\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        r = \"requests.get(url)\"\\n        assert r.cookies[\\'fake\\'] == \\'fake_value\\'\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        assert r.status_code == 200\\n\\n    def \"test_DIGEST_AUTH_SETS_SESSION_COOKIES(self)\":\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        s = \"requests.Session()\"\\n        \"s.get(url, auth=auth)\"\\n        assert s.cookies[\\'fake\\'] == \\'fake_value\\'\\n\\n    def \"test_DIGEST_STREAM(self)\":\\n\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth, stream=True)\"\\n        \"self.assertNotEqual(r.raw.read()\", b\\'\\')\\n\\n        r = \"requests.get(url, auth=auth, stream=False)\"\\n        \"self.assertEqual(r.raw.read()\", b\\'\\')\\n\\n\\n    def \"test_DIGESTAUTH_WRONG_HTTP_401_GET(self)\":\\n\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'wrongpass\\')\"\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n        s.auth = auth\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n    def \"test_POSTBIN_GET_POST_FILES(self)\":\\n\\n        url = \"httpbin(\\'post\\')\"\\n        post1 = \"requests.post(url)\".\"raise_for_status()\"\\n\\n        post1 = requests.post(url, data={\\'some\\': \\'data\\'})\\n        \"self.assertEqual(post1.status_code, 200)\"\\n\\n        with \"open(\\'requirements.txt\\')\" as f:\\n            post2 = requests.post(url, files={\\'some\\': f})\\n        \"self.assertEqual(post2.status_code, 200)\"\\n\\n        post4 = requests.post(url, data=\\'[{\"some\": \"json\"}]\\')\\n        \"self.assertEqual(post4.status_code, 200)\"\\n\\n        try:\\n            \"requests.post(url, files=[\\'bad file data\\'])\"\\n        except ValueError:\\n            pass\\n\\n    def \"test_POSTBIN_GET_POST_FILES_WITH_DATA(self)\":\\n\\n        url = \"httpbin(\\'post\\')\"\\n        post1 = \"requests.post(url)\".\"raise_for_status()\"\\n\\n        post1 = requests.post(url, data={\\'some\\': \\'data\\'})\\n        \"self.assertEqual(post1.status_code, 200)\"\\n\\n        with \"open(\\'requirements.txt\\')\" as f:\\n            post2 = requests.post(url, data={\\'some\\': \\'data\\'}, files={\\'some\\': f})\\n        \"self.assertEqual(post2.status_code, 200)\"\\n\\n        post4 = requests.post(url, data=\\'[{\"some\": \"json\"}]\\')\\n        \"self.assertEqual(post4.status_code, 200)\"\\n\\n        try:\\n            \"requests.post(url, files=[\\'bad file data\\'])\"\\n        except ValueError:\\n            pass\\n\\n    def \"test_request_ok_set(self)\":\\n        r = \"requests.get(httpbin(\\'status\\', \\'404\\')\")\\n        \"self.assertEqual(r.ok, False)\"\\n\\n    def \"test_status_raising(self)\":\\n        r = \"requests.get(httpbin(\\'status\\', \\'404\\')\")\\n        \"self.assertRaises(requests.exceptions.HTTPError, r.raise_for_status)\"\\n\\n        r = \"requests.get(httpbin(\\'status\\', \\'500\\')\")\\n        \"self.assertFalse(r.ok)\"\\n\\n    def \"test_decompress_gzip(self)\":\\n        r = \"requests.get(httpbin(\\'gzip\\')\")\\n        \"r.content.decode(\\'ascii\\')\"\\n\\n    def \"test_unicode_get(self)\":\\n        url = \"httpbin(\\'/get\\')\"\\n        requests.get(url, params={\\'foo\\': \\'f\\xc3\\xb8\\xc3\\xb8\\'})\\n        requests.get(url, params={\\'f\\xc3\\xb8\\xc3\\xb8\\': \\'f\\xc3\\xb8\\xc3\\xb8\\'})\\n        requests.get(url, params={\\'f\\xc3\\xb8\\xc3\\xb8\\': \\'f\\xc3\\xb8\\xc3\\xb8\\'})\\n        requests.get(url, params={\\'foo\\': \\'foo\\'})\\n        \"requests.get(httpbin(\\'\\xc3\\xb8\\')\", params={\\'foo\\': \\'foo\\'})\\n\\n    def \"test_unicode_header_name(self)\":\\n        \"requests.put(httpbin(\\'put\\')\", headers={\"str(\\'Content-Type\\')\": \\'application/octet-stream\\'}, data=\\'\\\\xff\\') # compat.str is unicode.\\n\\n    def \"test_urlencoded_get_query_multivalued_param(self)\":\\n\\n        r = \"requests.get(httpbin(\\'get\\')\", params=\"dict(test=[\\'foo\\', \\'baz\\'])\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n        \"self.assertEqual(r.url, httpbin(\\'get?test=foo&test=baz\\')\")\\n\\n    def \"test_different_encodings_dont_break_post(self)\":\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': json.dumps({\\'a\\': 123})},\\n                          params={\\'blah\\': \\'asdf1234\\'},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_unicode_multipart_post(self)\":\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': u\\'\\xc3\\xabl\\xc3\\xafxr\\'},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': u\\'\\xc3\\xabl\\xc3\\xafxr\\'.\"encode(\\'utf-8\\')\"},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': \\'elixr\\'},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': \\'elixr\\'.\"encode(\\'utf-8\\')\"},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_unicode_multipart_post_fieldnames(self)\":\\n        filename = \"os.path.splitext(__file__)\"[0] + \\'.py\\'\\n        r = \"requests.Request(method=\\'POST\\',\\n                             url=httpbin(\\'post\\')\",\\n                             data={\\'stuff\\'.\"encode(\\'utf-8\\')\": \\'elixr\\'},\\n                             files={\\'file\\': (\\'test_requests.py\\',\\n                                             \"open(filename, \\'rb\\')\")})\\n        prep = \"r.prepare()\"\\n        \"self.assertTrue(b\\'name=\"stuff\"\\' in prep.body)\"\\n        \"self.assertFalse(b\\'name=\"b\\\\\\'stuff\\\\\\'\"\\' in prep.body)\"\\n\\n    def \"test_custom_content_type(self)\":\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': json.dumps({\\'a\\': 123})},\\n                          files={\\'file1\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\"),\\n                                 \\'file2\\': (\\'test_requests\\', \"open(__file__, \\'rb\\')\",\\n                                           \\'text/py-content-type\\')})\\n        \"self.assertEqual(r.status_code, 200)\"\\n        \"self.assertTrue(b\"text/py-content-type\" in r.request.body)\"\\n\\n    def \"test_hook_receives_request_arguments(self)\":\\n        def \"hook(resp, **kwargs)\":\\n            assert resp is not None\\n            assert kwargs != {}\\n\\n        requests.Request(\\'GET\\', HTTPBIN, hooks={\\'response\\': hook})\\n\\n    def \"test_prepared_request_hook(self)\":\\n        def \"hook(resp, **kwargs)\":\\n            resp.hook_working = True\\n            return resp\\n\\n        req = requests.Request(\\'GET\\', HTTPBIN, hooks={\\'response\\': hook})\\n        prep = \"req.prepare()\"\\n\\n        s = \"requests.Session()\"\\n        s.proxies = \"getproxies()\"\\n        resp = \"s.send(prep)\"\\n\\n        \"self.assertTrue(hasattr(resp, \\'hook_working\\')\")\\n\\n    def \"test_prepared_from_session(self)\":\\n        class \"DummyAuth(requests.auth.AuthBase)\":\\n            def \"__call__(self, r)\":\\n                r.headers[\\'Dummy-Auth-Test\\'] = \\'dummy-auth-test-ok\\'\\n                return r\\n\\n        req = \"requests.Request(\\'GET\\', httpbin(\\'headers\\')\")\\n        \"self.assertEqual(req.auth, None)\"\\n\\n        s = \"requests.Session()\"\\n        s.auth = \"DummyAuth()\"\\n\\n        prep = \"s.prepare_request(req)\"\\n        resp = \"s.send(prep)\"\\n\\n        \"self.assertTrue(resp.json()\"[\\'headers\\'][\\'Dummy-Auth-Test\\'], \\'dummy-auth-test-ok\\')\\n\\n    def \"test_links(self)\":\\n        r = \"requests.Response()\"\\n        r.headers = {\\n            \\'cache-control\\': \\'public, max-age=60, s-maxage=60\\',\\n            \\'connection\\': \\'keep-alive\\',\\n            \\'content-encoding\\': \\'gzip\\',\\n            \\'content-type\\': \\'application/json; charset=utf-8\\',\\n            \\'date\\': \\'Sat, 26 Jan 2013 16:47:56 GMT\\',\\n            \\'etag\\': \\'\"6ff6a73c0e446c1f61614769e3ceb778\"\\',\\n            \\'last-modified\\': \\'Sat, 26 Jan 2013 16:22:39 GMT\\',\\n            \\'link\\': (\\'\"<https://api.github.com/users/kennethreitz/repos?\\'\\n                     \\'page=2&per_page=10>\"; rel=\"next\", \"<https://api.github.\\'\\n                     \\'com/users/kennethreitz/repos?page=7&per_page=10>\"; \\'\\n                     \\' rel=\"last\"\\'),\\n            \\'server\\': \\'GitHub.com\\',\\n            \\'status\\': \\'200 OK\\',\\n            \\'vary\\': \\'Accept\\',\\n            \\'x-content-type-options\\': \\'nosniff\\',\\n            \\'x-github-media-type\\': \\'github.beta\\',\\n            \\'x-ratelimit-limit\\': \\'60\\',\\n            \\'x-ratelimit-remaining\\': \\'57\\'\\n        }\\n        \"self.assertEqual(r.links[\\'next\\'][\\'rel\\'], \\'next\\')\"\\n\\n    def \"test_cookie_parameters(self)\":\\n        key = \\'some_cookie\\'\\n        value = \\'some_value\\'\\n        secure = True\\n        domain = \\'test.com\\'\\n        rest = {\\'HttpOnly\\': True}\\n\\n        jar = \"requests.cookies.RequestsCookieJar()\"\\n        \"jar.set(key, value, secure=secure, domain=domain, rest=rest)\"\\n\\n        \"self.assertEqual(len(jar)\", 1)\\n        \"self.assertTrue(\\'some_cookie\\' in jar)\"\\n\\n        cookie = \"list(jar)\"[0]\\n        \"self.assertEqual(cookie.secure, secure)\"\\n        \"self.assertEqual(cookie.domain, domain)\"\\n        \"self.assertEqual(cookie._rest[\\'HttpOnly\\'], rest[\\'HttpOnly\\'])\"\\n\\n    def \"test_time_elapsed_blank(self)\":\\n        r = \"requests.get(httpbin(\\'get\\')\")\\n        td = r.elapsed\\n        total_seconds = ((td.microseconds + (td.seconds + td.days * 24 * 3600)\\n                         * 10**6) / 10**6)\\n        \"self.assertTrue(total_seconds > 0.0)\"\\n\\n    def \"test_response_is_iterable(self)\":\\n        r = \"requests.Response()\"\\n        io = \"StringIO.StringIO(\\'abc\\')\"\\n        read_ = io.read\\n\\n        def \"read_mock(amt, decode_content=None)\":\\n            return \"read_(amt)\"\\n        \"setattr(io, \\'read\\', read_mock)\"\\n        r.raw = io\\n        \"self.assertTrue(next(iter(r)\"))\\n        \"io.close()\"\\n\\n    def \"test_get_auth_from_url(self)\":\\n        url = \\'http://user:pass@complex.url.com/path?query=yes\\'\\n        \"self.assertEqual((\\'user\\', \\'pass\\')\",\\n                         \"requests.utils.get_auth_from_url(url)\")\\n\\n    def \"test_cannot_send_unprepared_requests(self)\":\\n        r = \"requests.Request(url=HTTPBIN)\"\\n        \"self.assertRaises(ValueError, requests.Session()\".send, r)\\n\\n    def \"test_http_error(self)\":\\n        error = \"requests.exceptions.HTTPError()\"\\n        \"self.assertEqual(error.response, None)\"\\n        response = \"requests.Response()\"\\n        error = \"requests.exceptions.HTTPError(response=response)\"\\n        \"self.assertEqual(error.response, response)\"\\n        error = \"requests.exceptions.HTTPError(\\'message\\', response=response)\"\\n        \"self.assertEqual(str(error)\", \\'message\\')\\n        \"self.assertEqual(error.response, response)\"\\n\\n    def \"test_session_pickling(self)\":\\n        r = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\")\\n        s = \"requests.Session()\"\\n\\n        s = \"pickle.loads(pickle.dumps(s)\")\\n        s.proxies = \"getproxies()\"\\n\\n        r = \"s.send(r.prepare()\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_fixes_1329(self)\":\\n        \"\"\"\\n        Ensure that header updates are done case-insensitively.\\n        \"\"\"\\n        s = \"requests.Session()\"\\n        s.headers.update({\\'ACCEPT\\': \\'BOGUS\\'})\\n        s.headers.update({\\'accept\\': \\'application/json\\'})\\n        r = \"s.get(httpbin(\\'get\\')\")\\n        headers = r.request.headers\\n        \"self.assertEqual(\\n            headers[\\'accept\\'],\\n            \\'application/json\\'\\n        )\"\\n        \"self.assertEqual(\\n            headers[\\'Accept\\'],\\n            \\'application/json\\'\\n        )\"\\n        \"self.assertEqual(\\n            headers[\\'ACCEPT\\'],\\n            \\'application/json\\'\\n        )\"\\n\\n    def \"test_uppercase_scheme_redirect(self)\":\\n        parts = \"urlparse(httpbin(\\'html\\')\")\\n        url = \"HTTP://\" + parts.netloc + parts.path\\n        r = \"requests.get(httpbin(\\'redirect-to\\')\", params={\\'url\\': url})\\n        \"self.assertEqual(r.status_code, 200)\"\\n        \"self.assertEqual(r.url.lower()\", \"url.lower()\")\\n\\n    def \"test_transport_adapter_ordering(self)\":\\n        s = \"requests.Session()\"\\n        order = [\\'https://\\', \\'http://\\']\\n        \"self.assertEqual(order, list(s.adapters)\")\\n        \"s.mount(\\'http://git\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://github\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://github.com\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://github.com/about/\\', HTTPAdapter()\")\\n        order = [\\n            \\'http://github.com/about/\\',\\n            \\'http://github.com\\',\\n            \\'http://github\\',\\n            \\'http://git\\',\\n            \\'https://\\',\\n            \\'http://\\',\\n        ]\\n        \"self.assertEqual(order, list(s.adapters)\")\\n        \"s.mount(\\'http://gittip\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://gittip.com\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://gittip.com/about/\\', HTTPAdapter()\")\\n        order = [\\n            \\'http://github.com/about/\\',\\n            \\'http://gittip.com/about/\\',\\n            \\'http://github.com\\',\\n            \\'http://gittip.com\\',\\n            \\'http://github\\',\\n            \\'http://gittip\\',\\n            \\'http://git\\',\\n            \\'https://\\',\\n            \\'http://\\',\\n        ]\\n        \"self.assertEqual(order, list(s.adapters)\")\\n        s2 = \"requests.Session()\"\\n        s2.adapters = {\\'http://\\': \"HTTPAdapter()\"}\\n        \"s2.mount(\\'https://\\', HTTPAdapter()\")\\n        \"self.assertTrue(\\'http://\\' in s2.adapters)\"\\n        \"self.assertTrue(\\'https://\\' in s2.adapters)\"\\n\\n    def \"test_header_remove_is_case_insensitive(self)\":\\n        # From issue #1321\\n        s = \"requests.Session()\"\\n        s.headers[\\'foo\\'] = \\'bar\\'\\n        r = \"s.get(httpbin(\\'get\\')\", headers={\\'FOO\\': None})\\n        assert \\'foo\\' not in r.request.headers\\n\\n    def \"test_params_are_merged_case_sensitive(self)\":\\n        s = \"requests.Session()\"\\n        s.params[\\'foo\\'] = \\'bar\\'\\n        r = \"s.get(httpbin(\\'get\\')\", params={\\'FOO\\': \\'bar\\'})\\n        assert \"r.json()\"[\\'args\\'] == {\\'foo\\': \\'bar\\', \\'FOO\\': \\'bar\\'}\\n\\n\\n    def \"test_long_authinfo_in_url(self)\":\\n        url = \\'http://{0}:{1}@{2}:9000/path?query#frag\\'.\"format(\\n            \\'E8A3BE87-9E3F-4620-8858-95478E385B5B\\',\\n            \\'EA770032-DA4D-4D84-8CE9-29C6D910BF1E\\',\\n            \\'exactly-------------sixty-----------three------------characters\\',\\n        )\"\\n        r = \"requests.Request(\\'GET\\', url)\".\"prepare()\"\\n        \"self.assertEqual(r.url, url)\"\\n\\n    def \"test_header_keys_are_native(self)\":\\n        headers = {u\\'unicode\\': \\'blah\\', \\'byte\\'.\"encode(\\'ascii\\')\": \\'blah\\'}\\n        r = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\", headers=headers)\\n        p = \"r.prepare()\"\\n\\n        # This is testing that they are builtin strings. A bit weird, but there\\n        # we go.\\n        \"self.assertTrue(\\'unicode\\' in p.headers.keys()\")\\n        \"self.assertTrue(\\'byte\\' in p.headers.keys()\")\\n\\n    def \"test_can_send_nonstring_objects_with_files(self)\":\\n        data = {\\'a\\': 0.0}\\n        files = {\\'b\\': \\'foo\\'}\\n        r = \"requests.Request(\\'POST\\', httpbin(\\'post\\')\", data=data, files=files)\\n        p = \"r.prepare()\"\\n\\n        \"self.assertTrue(\\'multipart/form-data\\' in p.headers[\\'Content-Type\\'])\"\\n\\n\\nclass \"TestCaseInsensitiveDict(unittest.TestCase)\":\\n\\n    def \"test_mapping_init(self)\":\\n        cid = CaseInsensitiveDict({\\'Foo\\': \\'foo\\',\\'BAr\\': \\'bar\\'})\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertTrue(\\'foo\\' in cid)\"\\n        \"self.assertTrue(\\'bar\\' in cid)\"\\n\\n    def \"test_iterable_init(self)\":\\n        cid = \"CaseInsensitiveDict([(\\'Foo\\', \\'foo\\')\", (\\'BAr\\', \\'bar\\')])\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertTrue(\\'foo\\' in cid)\"\\n        \"self.assertTrue(\\'bar\\' in cid)\"\\n\\n    def \"test_kwargs_init(self)\":\\n        cid = \"CaseInsensitiveDict(FOO=\\'foo\\', BAr=\\'bar\\')\"\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertTrue(\\'foo\\' in cid)\"\\n        \"self.assertTrue(\\'bar\\' in cid)\"\\n\\n    def \"test_docstring_example(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'Accept\\'] = \\'application/json\\'\\n        \"self.assertEqual(cid[\\'aCCEPT\\'], \\'application/json\\')\"\\n        \"self.assertEqual(list(cid)\", [\\'Accept\\'])\\n\\n    def \"test_len(self)\":\\n        cid = CaseInsensitiveDict({\\'a\\': \\'a\\', \\'b\\': \\'b\\'})\\n        cid[\\'A\\'] = \\'a\\'\\n        \"self.assertEqual(len(cid)\", 2)\\n\\n    def \"test_getitem(self)\":\\n        cid = CaseInsensitiveDict({\\'Spam\\': \\'blueval\\'})\\n        \"self.assertEqual(cid[\\'spam\\'], \\'blueval\\')\"\\n        \"self.assertEqual(cid[\\'SPAM\\'], \\'blueval\\')\"\\n\\n    def \"test_fixes_649(self)\":\\n        \"\"\"__setitem__ should behave case-insensitively.\"\"\"\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'spam\\'] = \\'oneval\\'\\n        cid[\\'Spam\\'] = \\'twoval\\'\\n        cid[\\'sPAM\\'] = \\'redval\\'\\n        cid[\\'SPAM\\'] = \\'blueval\\'\\n        \"self.assertEqual(cid[\\'spam\\'], \\'blueval\\')\"\\n        \"self.assertEqual(cid[\\'SPAM\\'], \\'blueval\\')\"\\n        \"self.assertEqual(list(cid.keys()\"), [\\'SPAM\\'])\\n\\n    def \"test_delitem(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'Spam\\'] = \\'someval\\'\\n        del cid[\\'sPam\\']\\n        \"self.assertFalse(\\'spam\\' in cid)\"\\n        \"self.assertEqual(len(cid)\", 0)\\n\\n    def \"test_contains(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'Spam\\'] = \\'someval\\'\\n        \"self.assertTrue(\\'Spam\\' in cid)\"\\n        \"self.assertTrue(\\'spam\\' in cid)\"\\n        \"self.assertTrue(\\'SPAM\\' in cid)\"\\n        \"self.assertTrue(\\'sPam\\' in cid)\"\\n        \"self.assertFalse(\\'notspam\\' in cid)\"\\n\\n    def \"test_get(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'spam\\'] = \\'oneval\\'\\n        cid[\\'SPAM\\'] = \\'blueval\\'\\n        \"self.assertEqual(cid.get(\\'spam\\')\", \\'blueval\\')\\n        \"self.assertEqual(cid.get(\\'SPAM\\')\", \\'blueval\\')\\n        \"self.assertEqual(cid.get(\\'sPam\\')\", \\'blueval\\')\\n        \"self.assertEqual(cid.get(\\'notspam\\', \\'default\\')\", \\'default\\')\\n\\n    def \"test_update(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'spam\\'] = \\'blueval\\'\\n        cid.update({\\'sPam\\': \\'notblueval\\'})\\n        \"self.assertEqual(cid[\\'spam\\'], \\'notblueval\\')\"\\n        cid = CaseInsensitiveDict({\\'Foo\\': \\'foo\\',\\'BAr\\': \\'bar\\'})\\n        cid.update({\\'fOO\\': \\'anotherfoo\\', \\'bAR\\': \\'anotherbar\\'})\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertEqual(cid[\\'foo\\'], \\'anotherfoo\\')\"\\n        \"self.assertEqual(cid[\\'bar\\'], \\'anotherbar\\')\"\\n\\n    def \"test_update_retains_unchanged(self)\":\\n        cid = CaseInsensitiveDict({\\'foo\\': \\'foo\\', \\'bar\\': \\'bar\\'})\\n        cid.update({\\'foo\\': \\'newfoo\\'})\\n        \"self.assertEquals(cid[\\'bar\\'], \\'bar\\')\"\\n\\n    def \"test_iter(self)\":\\n        cid = CaseInsensitiveDict({\\'Spam\\': \\'spam\\', \\'Eggs\\': \\'eggs\\'})\\n        keys = \"frozenset([\\'Spam\\', \\'Eggs\\'])\"\\n        \"self.assertEqual(frozenset(iter(cid)\"), keys)\\n\\n    def \"test_equality(self)\":\\n        cid = CaseInsensitiveDict({\\'SPAM\\': \\'blueval\\', \\'Eggs\\': \\'redval\\'})\\n        othercid = CaseInsensitiveDict({\\'spam\\': \\'blueval\\', \\'eggs\\': \\'redval\\'})\\n        \"self.assertEqual(cid, othercid)\"\\n        del othercid[\\'spam\\']\\n        \"self.assertNotEqual(cid, othercid)\"\\n        self.assertEqual(cid, {\\'spam\\': \\'blueval\\', \\'eggs\\': \\'redval\\'})\\n\\n    def \"test_setdefault(self)\":\\n        cid = CaseInsensitiveDict({\\'Spam\\': \\'blueval\\'})\\n        \"self.assertEqual(\\n            cid.setdefault(\\'spam\\', \\'notblueval\\')\",\\n            \\'blueval\\'\\n        )\\n        \"self.assertEqual(\\n            cid.setdefault(\\'notspam\\', \\'notblueval\\')\",\\n            \\'notblueval\\'\\n        )\\n\\n    def \"test_lower_items(self)\":\\n        cid = CaseInsensitiveDict({\\n            \\'Accept\\': \\'application/json\\',\\n            \\'user-Agent\\': \\'requests\\',\\n        })\\n        keyset = \"frozenset(lowerkey for lowerkey, v in cid.lower_items()\")\\n        lowerkeyset = \"frozenset([\\'accept\\', \\'user-agent\\'])\"\\n        \"self.assertEqual(keyset, lowerkeyset)\"\\n\\n    def \"test_preserve_key_case(self)\":\\n        cid = CaseInsensitiveDict({\\n            \\'Accept\\': \\'application/json\\',\\n            \\'user-Agent\\': \\'requests\\',\\n        })\\n        keyset = \"frozenset([\\'Accept\\', \\'user-Agent\\'])\"\\n        \"self.assertEqual(frozenset(i[0] for i in cid.items()\"), keyset)\\n        \"self.assertEqual(frozenset(cid.keys()\"), keyset)\\n        \"self.assertEqual(frozenset(cid)\", keyset)\\n\\n    def \"test_preserve_last_key_case(self)\":\\n        cid = CaseInsensitiveDict({\\n            \\'Accept\\': \\'application/json\\',\\n            \\'user-Agent\\': \\'requests\\',\\n        })\\n        cid.update({\\'ACCEPT\\': \\'application/json\\'})\\n        cid[\\'USER-AGENT\\'] = \\'requests\\'\\n        keyset = \"frozenset([\\'ACCEPT\\', \\'USER-AGENT\\'])\"\\n        \"self.assertEqual(frozenset(i[0] for i in cid.items()\"), keyset)\\n        \"self.assertEqual(frozenset(cid.keys()\"), keyset)\\n        \"self.assertEqual(frozenset(cid)\", keyset)\\n\\n\\nif __name__ == \\'__main__\\':\\n    \"unittest.main()\"\\n\\r\\n--e103254b78f44c34821a3e68148b0ee0\\r\\nContent-Disposition: form-data; name=\"file2\"; filename=\"test_requests\"\\r\\nContent-Type: text/py-content-type\\r\\n\\r\\n#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\n\"\"\"Tests for Requests.\"\"\"\\n\\nfrom __future__ import division\\nimport json\\nimport os\\nimport unittest\\nimport pickle\\n\\nimport requests\\nfrom requests.auth import HTTPDigestAuth\\nfrom requests.adapters import HTTPAdapter\\nfrom requests.compat import str, cookielib, getproxies, urljoin, urlparse\\nfrom requests.cookies import cookiejar_from_dict\\nfrom requests.exceptions import InvalidURL, MissingSchema\\nfrom requests.structures import CaseInsensitiveDict\\n\\ntry:\\n    import StringIO\\nexcept ImportError:\\n    import io as StringIO\\n\\nHTTPBIN = \"os.environ.get(\\'HTTPBIN_URL\\', \\'http://httpbin.org/\\')\"\\n# Issue #1483: Make sure the URL always has a trailing slash\\nHTTPBIN = \"HTTPBIN.rstrip(\\'/\\')\" + \\'/\\'\\n\\n\\ndef \"httpbin(*suffix)\":\\n    \"\"\"Returns url for HTTPBIN resource.\"\"\"\\n    return \"urljoin(HTTPBIN, \\'/\\'.join(suffix)\")\\n\\n\\nclass \"RequestsTestCase(unittest.TestCase)\":\\n\\n    _multiprocess_can_split_ = True\\n\\n    def \"setUp(self)\":\\n        \"\"\"Create simple data set with headers.\"\"\"\\n        pass\\n\\n    def \"tearDown(self)\":\\n        \"\"\"Teardown.\"\"\"\\n        pass\\n\\n    def \"test_entry_points(self)\":\\n\\n        requests.session\\n        \"requests.session()\".get\\n        \"requests.session()\".head\\n        requests.get\\n        requests.head\\n        requests.put\\n        requests.patch\\n        requests.post\\n\\n    def \"test_invalid_url(self)\":\\n        \"self.assertRaises(MissingSchema, requests.get, \\'hiwpefhipowhefopw\\')\"\\n        \"self.assertRaises(InvalidURL, requests.get, \\'http://\\')\"\\n\\n    def \"test_basic_building(self)\":\\n        req = \"requests.Request()\"\\n        req.url = \\'http://kennethreitz.org/\\'\\n        req.data = {\\'life\\': \\'42\\'}\\n\\n        pr = \"req.prepare()\"\\n        assert pr.url == req.url\\n        assert pr.body == \\'life=42\\'\\n\\n    def \"test_no_content_length(self)\":\\n        get_req = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\").\"prepare()\"\\n        \"self.assertTrue(\\'Content-Length\\' not in get_req.headers)\"\\n        head_req = \"requests.Request(\\'HEAD\\', httpbin(\\'head\\')\").\"prepare()\"\\n        \"self.assertTrue(\\'Content-Length\\' not in head_req.headers)\"\\n\\n    def \"test_path_is_not_double_encoded(self)\":\\n        request = \"requests.Request(\\'GET\\', \"http://0.0.0.0/get/test case\")\".\"prepare()\"\\n\\n        \"self.assertEqual(request.path_url, \"/get/test%20case\")\"\\n\\n    def \"test_params_are_added_before_fragment(self)\":\\n        request = requests.Request(\\'GET\\',\\n            \"http://example.com/path#fragment\", params={\"a\": \"b\"}).\"prepare()\"\\n        \"self.assertEqual(request.url,\\n            \"http://example.com/path?a=b#fragment\")\"\\n        request = requests.Request(\\'GET\\',\\n            \"http://example.com/path?key=value#fragment\", params={\"a\": \"b\"}).\"prepare()\"\\n        \"self.assertEqual(request.url,\\n            \"http://example.com/path?key=value&a=b#fragment\")\"\\n\\n    def \"test_mixed_case_scheme_acceptable(self)\":\\n        s = \"requests.Session()\"\\n        s.proxies = \"getproxies()\"\\n        parts = \"urlparse(httpbin(\\'get\\')\")\\n        schemes = [\\'http://\\', \\'HTTP://\\', \\'hTTp://\\', \\'HttP://\\',\\n                   \\'https://\\', \\'HTTPS://\\', \\'hTTps://\\', \\'HttPs://\\']\\n        for scheme in schemes:\\n            url = scheme + parts.netloc + parts.path\\n            r = \"requests.Request(\\'GET\\', url)\"\\n            r = \"s.send(r.prepare()\")\\n            \"self.assertEqual(r.status_code, 200,\\n                             \"failed for scheme %s\" % scheme)\"\\n\\n    def \"test_HTTP_200_OK_GET_ALTERNATIVE(self)\":\\n        r = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\")\\n        s = \"requests.Session()\"\\n        s.proxies = \"getproxies()\"\\n\\n        r = \"s.send(r.prepare()\")\\n\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_302_ALLOW_REDIRECT_GET(self)\":\\n        r = \"requests.get(httpbin(\\'redirect\\', \\'1\\')\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    # def \"test_HTTP_302_ALLOW_REDIRECT_POST(self)\":\\n    #     r = \"requests.post(httpbin(\\'status\\', \\'302\\')\", data={\\'some\\': \\'data\\'})\\n    #     \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_200_OK_GET_WITH_PARAMS(self)\":\\n        heads = {\\'User-agent\\': \\'Mozilla/5.0\\'}\\n\\n        r = \"requests.get(httpbin(\\'user-agent\\')\", headers=heads)\\n\\n        \"self.assertTrue(heads[\\'User-agent\\'] in r.text)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self)\":\\n        heads = {\\'User-agent\\': \\'Mozilla/5.0\\'}\\n\\n        r = \"requests.get(httpbin(\\'get\\')\" + \\'?test=true\\', params={\\'q\\': \\'test\\'}, headers=heads)\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_set_cookie_on_301(self)\":\\n        s = \"requests.session()\"\\n        url = \"httpbin(\\'cookies/set?foo=bar\\')\"\\n        r = \"s.get(url)\"\\n        \"self.assertTrue(s.cookies[\\'foo\\'] == \\'bar\\')\"\\n\\n    def \"test_cookie_sent_on_redirect(self)\":\\n        s = \"requests.session()\"\\n        \"s.get(httpbin(\\'cookies/set?foo=bar\\')\")\\n        r = \"s.get(httpbin(\\'redirect/1\\')\")  # redirects to \"httpbin(\\'get\\')\"\\n        \"self.assertTrue(\"Cookie\" in r.json()\"[\"headers\"])\\n\\n    def \"test_cookie_removed_on_expire(self)\":\\n        s = \"requests.session()\"\\n        \"s.get(httpbin(\\'cookies/set?foo=bar\\')\")\\n        \"self.assertTrue(s.cookies[\\'foo\\'] == \\'bar\\')\"\\n        \"s.get(\\n            httpbin(\\'response-headers\\')\",\\n            params={\\n                \\'Set-Cookie\\':\\n                    \\'foo=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT\\'\\n            }\\n        )\\n        assert \\'foo\\' not in s.cookies\\n\\n    def \"test_cookie_quote_wrapped(self)\":\\n        s = \"requests.session()\"\\n        \"s.get(httpbin(\\'cookies/set?foo=\"bar:baz\"\\')\")\\n        \"self.assertTrue(s.cookies[\\'foo\\'] == \\'\"bar:baz\"\\')\"\\n\\n    def \"test_request_cookie_overrides_session_cookie(self)\":\\n        s = \"requests.session()\"\\n        s.cookies[\\'foo\\'] = \\'bar\\'\\n        r = \"s.get(httpbin(\\'cookies\\')\", cookies={\\'foo\\': \\'baz\\'})\\n        assert \"r.json()\"[\\'cookies\\'][\\'foo\\'] == \\'baz\\'\\n        # Session cookie should not be modified\\n        assert s.cookies[\\'foo\\'] == \\'bar\\'\\n\\n    def \"test_generic_cookiejar_works(self)\":\\n        cj = \"cookielib.CookieJar()\"\\n        cookiejar_from_dict({\\'foo\\': \\'bar\\'}, cj)\\n        s = \"requests.session()\"\\n        s.cookies = cj\\n        r = \"s.get(httpbin(\\'cookies\\')\")\\n        # Make sure the cookie was sent\\n        assert \"r.json()\"[\\'cookies\\'][\\'foo\\'] == \\'bar\\'\\n        # Make sure the session cj is still the custom one\\n        assert s.cookies is cj\\n\\n    def \"test_requests_in_history_are_not_overridden(self)\":\\n        resp = \"requests.get(httpbin(\\'redirect/3\\')\")\\n        urls = [r.url for r in resp.history]\\n        req_urls = [r.request.url for r in resp.history]\\n        \"self.assertEquals(urls, req_urls)\"\\n\\n    def \"test_user_agent_transfers(self)\":\\n\\n        heads = {\\n            \\'User-agent\\': \\'Mozilla/\"5.0 (github.com/kennethreitz/requests)\"\\'\\n        }\\n\\n        r = \"requests.get(httpbin(\\'user-agent\\')\", headers=heads)\\n        \"self.assertTrue(heads[\\'User-agent\\'] in r.text)\"\\n\\n        heads = {\\n            \\'user-agent\\': \\'Mozilla/\"5.0 (github.com/kennethreitz/requests)\"\\'\\n        }\\n\\n        r = \"requests.get(httpbin(\\'user-agent\\')\", headers=heads)\\n        \"self.assertTrue(heads[\\'user-agent\\'] in r.text)\"\\n\\n    def \"test_HTTP_200_OK_HEAD(self)\":\\n        r = \"requests.head(httpbin(\\'get\\')\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_200_OK_PUT(self)\":\\n        r = \"requests.put(httpbin(\\'put\\')\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self)\":\\n        auth = (\\'user\\', \\'pass\\')\\n        url = \"httpbin(\\'basic-auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n        s.auth = auth\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_basicauth_with_netrc(self)\":\\n        auth = (\\'user\\', \\'pass\\')\\n        wrong_auth = (\\'wronguser\\', \\'wrongpass\\')\\n        url = \"httpbin(\\'basic-auth\\', \\'user\\', \\'pass\\')\"\\n\\n        def \"get_netrc_auth_mock(url)\":\\n            return auth\\n        requests.sessions.get_netrc_auth = get_netrc_auth_mock\\n\\n        # Should use netrc and work.\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        # Given auth should override and fail.\\n        r = \"requests.get(url, auth=wrong_auth)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n\\n        # Should use netrc and work.\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        # Given auth should override and fail.\\n        s.auth = wrong_auth\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n    def \"test_DIGEST_HTTP_200_OK_GET(self)\":\\n\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n        s.auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_DIGEST_AUTH_RETURNS_COOKIE(self)\":\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        r = \"requests.get(url)\"\\n        assert r.cookies[\\'fake\\'] == \\'fake_value\\'\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        assert r.status_code == 200\\n\\n    def \"test_DIGEST_AUTH_SETS_SESSION_COOKIES(self)\":\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        s = \"requests.Session()\"\\n        \"s.get(url, auth=auth)\"\\n        assert s.cookies[\\'fake\\'] == \\'fake_value\\'\\n\\n    def \"test_DIGEST_STREAM(self)\":\\n\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth, stream=True)\"\\n        \"self.assertNotEqual(r.raw.read()\", b\\'\\')\\n\\n        r = \"requests.get(url, auth=auth, stream=False)\"\\n        \"self.assertEqual(r.raw.read()\", b\\'\\')\\n\\n\\n    def \"test_DIGESTAUTH_WRONG_HTTP_401_GET(self)\":\\n\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'wrongpass\\')\"\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n        s.auth = auth\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n    def \"test_POSTBIN_GET_POST_FILES(self)\":\\n\\n        url = \"httpbin(\\'post\\')\"\\n        post1 = \"requests.post(url)\".\"raise_for_status()\"\\n\\n        post1 = requests.post(url, data={\\'some\\': \\'data\\'})\\n        \"self.assertEqual(post1.status_code, 200)\"\\n\\n        with \"open(\\'requirements.txt\\')\" as f:\\n            post2 = requests.post(url, files={\\'some\\': f})\\n        \"self.assertEqual(post2.status_code, 200)\"\\n\\n        post4 = requests.post(url, data=\\'[{\"some\": \"json\"}]\\')\\n        \"self.assertEqual(post4.status_code, 200)\"\\n\\n        try:\\n            \"requests.post(url, files=[\\'bad file data\\'])\"\\n        except ValueError:\\n            pass\\n\\n    def \"test_POSTBIN_GET_POST_FILES_WITH_DATA(self)\":\\n\\n        url = \"httpbin(\\'post\\')\"\\n        post1 = \"requests.post(url)\".\"raise_for_status()\"\\n\\n        post1 = requests.post(url, data={\\'some\\': \\'data\\'})\\n        \"self.assertEqual(post1.status_code, 200)\"\\n\\n        with \"open(\\'requirements.txt\\')\" as f:\\n            post2 = requests.post(url, data={\\'some\\': \\'data\\'}, files={\\'some\\': f})\\n        \"self.assertEqual(post2.status_code, 200)\"\\n\\n        post4 = requests.post(url, data=\\'[{\"some\": \"json\"}]\\')\\n        \"self.assertEqual(post4.status_code, 200)\"\\n\\n        try:\\n            \"requests.post(url, files=[\\'bad file data\\'])\"\\n        except ValueError:\\n            pass\\n\\n    def \"test_request_ok_set(self)\":\\n        r = \"requests.get(httpbin(\\'status\\', \\'404\\')\")\\n        \"self.assertEqual(r.ok, False)\"\\n\\n    def \"test_status_raising(self)\":\\n        r = \"requests.get(httpbin(\\'status\\', \\'404\\')\")\\n        \"self.assertRaises(requests.exceptions.HTTPError, r.raise_for_status)\"\\n\\n        r = \"requests.get(httpbin(\\'status\\', \\'500\\')\")\\n        \"self.assertFalse(r.ok)\"\\n\\n    def \"test_decompress_gzip(self)\":\\n        r = \"requests.get(httpbin(\\'gzip\\')\")\\n        \"r.content.decode(\\'ascii\\')\"\\n\\n    def \"test_unicode_get(self)\":\\n        url = \"httpbin(\\'/get\\')\"\\n        requests.get(url, params={\\'foo\\': \\'f\\xc3\\xb8\\xc3\\xb8\\'})\\n        requests.get(url, params={\\'f\\xc3\\xb8\\xc3\\xb8\\': \\'f\\xc3\\xb8\\xc3\\xb8\\'})\\n        requests.get(url, params={\\'f\\xc3\\xb8\\xc3\\xb8\\': \\'f\\xc3\\xb8\\xc3\\xb8\\'})\\n        requests.get(url, params={\\'foo\\': \\'foo\\'})\\n        \"requests.get(httpbin(\\'\\xc3\\xb8\\')\", params={\\'foo\\': \\'foo\\'})\\n\\n    def \"test_unicode_header_name(self)\":\\n        \"requests.put(httpbin(\\'put\\')\", headers={\"str(\\'Content-Type\\')\": \\'application/octet-stream\\'}, data=\\'\\\\xff\\') # compat.str is unicode.\\n\\n    def \"test_urlencoded_get_query_multivalued_param(self)\":\\n\\n        r = \"requests.get(httpbin(\\'get\\')\", params=\"dict(test=[\\'foo\\', \\'baz\\'])\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n        \"self.assertEqual(r.url, httpbin(\\'get?test=foo&test=baz\\')\")\\n\\n    def \"test_different_encodings_dont_break_post(self)\":\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': json.dumps({\\'a\\': 123})},\\n                          params={\\'blah\\': \\'asdf1234\\'},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_unicode_multipart_post(self)\":\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': u\\'\\xc3\\xabl\\xc3\\xafxr\\'},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': u\\'\\xc3\\xabl\\xc3\\xafxr\\'.\"encode(\\'utf-8\\')\"},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': \\'elixr\\'},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': \\'elixr\\'.\"encode(\\'utf-8\\')\"},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_unicode_multipart_post_fieldnames(self)\":\\n        filename = \"os.path.splitext(__file__)\"[0] + \\'.py\\'\\n        r = \"requests.Request(method=\\'POST\\',\\n                             url=httpbin(\\'post\\')\",\\n                             data={\\'stuff\\'.\"encode(\\'utf-8\\')\": \\'elixr\\'},\\n                             files={\\'file\\': (\\'test_requests.py\\',\\n                                             \"open(filename, \\'rb\\')\")})\\n        prep = \"r.prepare()\"\\n        \"self.assertTrue(b\\'name=\"stuff\"\\' in prep.body)\"\\n        \"self.assertFalse(b\\'name=\"b\\\\\\'stuff\\\\\\'\"\\' in prep.body)\"\\n\\n    def \"test_custom_content_type(self)\":\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': json.dumps({\\'a\\': 123})},\\n                          files={\\'file1\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\"),\\n                                 \\'file2\\': (\\'test_requests\\', \"open(__file__, \\'rb\\')\",\\n                                           \\'text/py-content-type\\')})\\n        \"self.assertEqual(r.status_code, 200)\"\\n        \"self.assertTrue(b\"text/py-content-type\" in r.request.body)\"\\n\\n    def \"test_hook_receives_request_arguments(self)\":\\n        def \"hook(resp, **kwargs)\":\\n            assert resp is not None\\n            assert kwargs != {}\\n\\n        requests.Request(\\'GET\\', HTTPBIN, hooks={\\'response\\': hook})\\n\\n    def \"test_prepared_request_hook(self)\":\\n        def \"hook(resp, **kwargs)\":\\n            resp.hook_working = True\\n            return resp\\n\\n        req = requests.Request(\\'GET\\', HTTPBIN, hooks={\\'response\\': hook})\\n        prep = \"req.prepare()\"\\n\\n        s = \"requests.Session()\"\\n        s.proxies = \"getproxies()\"\\n        resp = \"s.send(prep)\"\\n\\n        \"self.assertTrue(hasattr(resp, \\'hook_working\\')\")\\n\\n    def \"test_prepared_from_session(self)\":\\n        class \"DummyAuth(requests.auth.AuthBase)\":\\n            def \"__call__(self, r)\":\\n                r.headers[\\'Dummy-Auth-Test\\'] = \\'dummy-auth-test-ok\\'\\n                return r\\n\\n        req = \"requests.Request(\\'GET\\', httpbin(\\'headers\\')\")\\n        \"self.assertEqual(req.auth, None)\"\\n\\n        s = \"requests.Session()\"\\n        s.auth = \"DummyAuth()\"\\n\\n        prep = \"s.prepare_request(req)\"\\n        resp = \"s.send(prep)\"\\n\\n        \"self.assertTrue(resp.json()\"[\\'headers\\'][\\'Dummy-Auth-Test\\'], \\'dummy-auth-test-ok\\')\\n\\n    def \"test_links(self)\":\\n        r = \"requests.Response()\"\\n        r.headers = {\\n            \\'cache-control\\': \\'public, max-age=60, s-maxage=60\\',\\n            \\'connection\\': \\'keep-alive\\',\\n            \\'content-encoding\\': \\'gzip\\',\\n            \\'content-type\\': \\'application/json; charset=utf-8\\',\\n            \\'date\\': \\'Sat, 26 Jan 2013 16:47:56 GMT\\',\\n            \\'etag\\': \\'\"6ff6a73c0e446c1f61614769e3ceb778\"\\',\\n            \\'last-modified\\': \\'Sat, 26 Jan 2013 16:22:39 GMT\\',\\n            \\'link\\': (\\'\"<https://api.github.com/users/kennethreitz/repos?\\'\\n                     \\'page=2&per_page=10>\"; rel=\"next\", \"<https://api.github.\\'\\n                     \\'com/users/kennethreitz/repos?page=7&per_page=10>\"; \\'\\n                     \\' rel=\"last\"\\'),\\n            \\'server\\': \\'GitHub.com\\',\\n            \\'status\\': \\'200 OK\\',\\n            \\'vary\\': \\'Accept\\',\\n            \\'x-content-type-options\\': \\'nosniff\\',\\n            \\'x-github-media-type\\': \\'github.beta\\',\\n            \\'x-ratelimit-limit\\': \\'60\\',\\n            \\'x-ratelimit-remaining\\': \\'57\\'\\n        }\\n        \"self.assertEqual(r.links[\\'next\\'][\\'rel\\'], \\'next\\')\"\\n\\n    def \"test_cookie_parameters(self)\":\\n        key = \\'some_cookie\\'\\n        value = \\'some_value\\'\\n        secure = True\\n        domain = \\'test.com\\'\\n        rest = {\\'HttpOnly\\': True}\\n\\n        jar = \"requests.cookies.RequestsCookieJar()\"\\n        \"jar.set(key, value, secure=secure, domain=domain, rest=rest)\"\\n\\n        \"self.assertEqual(len(jar)\", 1)\\n        \"self.assertTrue(\\'some_cookie\\' in jar)\"\\n\\n        cookie = \"list(jar)\"[0]\\n        \"self.assertEqual(cookie.secure, secure)\"\\n        \"self.assertEqual(cookie.domain, domain)\"\\n        \"self.assertEqual(cookie._rest[\\'HttpOnly\\'], rest[\\'HttpOnly\\'])\"\\n\\n    def \"test_time_elapsed_blank(self)\":\\n        r = \"requests.get(httpbin(\\'get\\')\")\\n        td = r.elapsed\\n        total_seconds = ((td.microseconds + (td.seconds + td.days * 24 * 3600)\\n                         * 10**6) / 10**6)\\n        \"self.assertTrue(total_seconds > 0.0)\"\\n\\n    def \"test_response_is_iterable(self)\":\\n        r = \"requests.Response()\"\\n        io = \"StringIO.StringIO(\\'abc\\')\"\\n        read_ = io.read\\n\\n        def \"read_mock(amt, decode_content=None)\":\\n            return \"read_(amt)\"\\n        \"setattr(io, \\'read\\', read_mock)\"\\n        r.raw = io\\n        \"self.assertTrue(next(iter(r)\"))\\n        \"io.close()\"\\n\\n    def \"test_get_auth_from_url(self)\":\\n        url = \\'http://user:pass@complex.url.com/path?query=yes\\'\\n        \"self.assertEqual((\\'user\\', \\'pass\\')\",\\n                         \"requests.utils.get_auth_from_url(url)\")\\n\\n    def \"test_cannot_send_unprepared_requests(self)\":\\n        r = \"requests.Request(url=HTTPBIN)\"\\n        \"self.assertRaises(ValueError, requests.Session()\".send, r)\\n\\n    def \"test_http_error(self)\":\\n        error = \"requests.exceptions.HTTPError()\"\\n        \"self.assertEqual(error.response, None)\"\\n        response = \"requests.Response()\"\\n        error = \"requests.exceptions.HTTPError(response=response)\"\\n        \"self.assertEqual(error.response, response)\"\\n        error = \"requests.exceptions.HTTPError(\\'message\\', response=response)\"\\n        \"self.assertEqual(str(error)\", \\'message\\')\\n        \"self.assertEqual(error.response, response)\"\\n\\n    def \"test_session_pickling(self)\":\\n        r = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\")\\n        s = \"requests.Session()\"\\n\\n        s = \"pickle.loads(pickle.dumps(s)\")\\n        s.proxies = \"getproxies()\"\\n\\n        r = \"s.send(r.prepare()\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_fixes_1329(self)\":\\n        \"\"\"\\n        Ensure that header updates are done case-insensitively.\\n        \"\"\"\\n        s = \"requests.Session()\"\\n        s.headers.update({\\'ACCEPT\\': \\'BOGUS\\'})\\n        s.headers.update({\\'accept\\': \\'application/json\\'})\\n        r = \"s.get(httpbin(\\'get\\')\")\\n        headers = r.request.headers\\n        \"self.assertEqual(\\n            headers[\\'accept\\'],\\n            \\'application/json\\'\\n        )\"\\n        \"self.assertEqual(\\n            headers[\\'Accept\\'],\\n            \\'application/json\\'\\n        )\"\\n        \"self.assertEqual(\\n            headers[\\'ACCEPT\\'],\\n            \\'application/json\\'\\n        )\"\\n\\n    def \"test_uppercase_scheme_redirect(self)\":\\n        parts = \"urlparse(httpbin(\\'html\\')\")\\n        url = \"HTTP://\" + parts.netloc + parts.path\\n        r = \"requests.get(httpbin(\\'redirect-to\\')\", params={\\'url\\': url})\\n        \"self.assertEqual(r.status_code, 200)\"\\n        \"self.assertEqual(r.url.lower()\", \"url.lower()\")\\n\\n    def \"test_transport_adapter_ordering(self)\":\\n        s = \"requests.Session()\"\\n        order = [\\'https://\\', \\'http://\\']\\n        \"self.assertEqual(order, list(s.adapters)\")\\n        \"s.mount(\\'http://git\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://github\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://github.com\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://github.com/about/\\', HTTPAdapter()\")\\n        order = [\\n            \\'http://github.com/about/\\',\\n            \\'http://github.com\\',\\n            \\'http://github\\',\\n            \\'http://git\\',\\n            \\'https://\\',\\n            \\'http://\\',\\n        ]\\n        \"self.assertEqual(order, list(s.adapters)\")\\n        \"s.mount(\\'http://gittip\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://gittip.com\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://gittip.com/about/\\', HTTPAdapter()\")\\n        order = [\\n            \\'http://github.com/about/\\',\\n            \\'http://gittip.com/about/\\',\\n            \\'http://github.com\\',\\n            \\'http://gittip.com\\',\\n            \\'http://github\\',\\n            \\'http://gittip\\',\\n            \\'http://git\\',\\n            \\'https://\\',\\n            \\'http://\\',\\n        ]\\n        \"self.assertEqual(order, list(s.adapters)\")\\n        s2 = \"requests.Session()\"\\n        s2.adapters = {\\'http://\\': \"HTTPAdapter()\"}\\n        \"s2.mount(\\'https://\\', HTTPAdapter()\")\\n        \"self.assertTrue(\\'http://\\' in s2.adapters)\"\\n        \"self.assertTrue(\\'https://\\' in s2.adapters)\"\\n\\n    def \"test_header_remove_is_case_insensitive(self)\":\\n        # From issue #1321\\n        s = \"requests.Session()\"\\n        s.headers[\\'foo\\'] = \\'bar\\'\\n        r = \"s.get(httpbin(\\'get\\')\", headers={\\'FOO\\': None})\\n        assert \\'foo\\' not in r.request.headers\\n\\n    def \"test_params_are_merged_case_sensitive(self)\":\\n        s = \"requests.Session()\"\\n        s.params[\\'foo\\'] = \\'bar\\'\\n        r = \"s.get(httpbin(\\'get\\')\", params={\\'FOO\\': \\'bar\\'})\\n        assert \"r.json()\"[\\'args\\'] == {\\'foo\\': \\'bar\\', \\'FOO\\': \\'bar\\'}\\n\\n\\n    def \"test_long_authinfo_in_url(self)\":\\n        url = \\'http://{0}:{1}@{2}:9000/path?query#frag\\'.\"format(\\n            \\'E8A3BE87-9E3F-4620-8858-95478E385B5B\\',\\n            \\'EA770032-DA4D-4D84-8CE9-29C6D910BF1E\\',\\n            \\'exactly-------------sixty-----------three------------characters\\',\\n        )\"\\n        r = \"requests.Request(\\'GET\\', url)\".\"prepare()\"\\n        \"self.assertEqual(r.url, url)\"\\n\\n    def \"test_header_keys_are_native(self)\":\\n        headers = {u\\'unicode\\': \\'blah\\', \\'byte\\'.\"encode(\\'ascii\\')\": \\'blah\\'}\\n        r = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\", headers=headers)\\n        p = \"r.prepare()\"\\n\\n        # This is testing that they are builtin strings. A bit weird, but there\\n        # we go.\\n        \"self.assertTrue(\\'unicode\\' in p.headers.keys()\")\\n        \"self.assertTrue(\\'byte\\' in p.headers.keys()\")\\n\\n    def \"test_can_send_nonstring_objects_with_files(self)\":\\n        data = {\\'a\\': 0.0}\\n        files = {\\'b\\': \\'foo\\'}\\n        r = \"requests.Request(\\'POST\\', httpbin(\\'post\\')\", data=data, files=files)\\n        p = \"r.prepare()\"\\n\\n        \"self.assertTrue(\\'multipart/form-data\\' in p.headers[\\'Content-Type\\'])\"\\n\\n\\nclass \"TestCaseInsensitiveDict(unittest.TestCase)\":\\n\\n    def \"test_mapping_init(self)\":\\n        cid = CaseInsensitiveDict({\\'Foo\\': \\'foo\\',\\'BAr\\': \\'bar\\'})\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertTrue(\\'foo\\' in cid)\"\\n        \"self.assertTrue(\\'bar\\' in cid)\"\\n\\n    def \"test_iterable_init(self)\":\\n        cid = \"CaseInsensitiveDict([(\\'Foo\\', \\'foo\\')\", (\\'BAr\\', \\'bar\\')])\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertTrue(\\'foo\\' in cid)\"\\n        \"self.assertTrue(\\'bar\\' in cid)\"\\n\\n    def \"test_kwargs_init(self)\":\\n        cid = \"CaseInsensitiveDict(FOO=\\'foo\\', BAr=\\'bar\\')\"\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertTrue(\\'foo\\' in cid)\"\\n        \"self.assertTrue(\\'bar\\' in cid)\"\\n\\n    def \"test_docstring_example(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'Accept\\'] = \\'application/json\\'\\n        \"self.assertEqual(cid[\\'aCCEPT\\'], \\'application/json\\')\"\\n        \"self.assertEqual(list(cid)\", [\\'Accept\\'])\\n\\n    def \"test_len(self)\":\\n        cid = CaseInsensitiveDict({\\'a\\': \\'a\\', \\'b\\': \\'b\\'})\\n        cid[\\'A\\'] = \\'a\\'\\n        \"self.assertEqual(len(cid)\", 2)\\n\\n    def \"test_getitem(self)\":\\n        cid = CaseInsensitiveDict({\\'Spam\\': \\'blueval\\'})\\n        \"self.assertEqual(cid[\\'spam\\'], \\'blueval\\')\"\\n        \"self.assertEqual(cid[\\'SPAM\\'], \\'blueval\\')\"\\n\\n    def \"test_fixes_649(self)\":\\n        \"\"\"__setitem__ should behave case-insensitively.\"\"\"\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'spam\\'] = \\'oneval\\'\\n        cid[\\'Spam\\'] = \\'twoval\\'\\n        cid[\\'sPAM\\'] = \\'redval\\'\\n        cid[\\'SPAM\\'] = \\'blueval\\'\\n        \"self.assertEqual(cid[\\'spam\\'], \\'blueval\\')\"\\n        \"self.assertEqual(cid[\\'SPAM\\'], \\'blueval\\')\"\\n        \"self.assertEqual(list(cid.keys()\"), [\\'SPAM\\'])\\n\\n    def \"test_delitem(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'Spam\\'] = \\'someval\\'\\n        del cid[\\'sPam\\']\\n        \"self.assertFalse(\\'spam\\' in cid)\"\\n        \"self.assertEqual(len(cid)\", 0)\\n\\n    def \"test_contains(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'Spam\\'] = \\'someval\\'\\n        \"self.assertTrue(\\'Spam\\' in cid)\"\\n        \"self.assertTrue(\\'spam\\' in cid)\"\\n        \"self.assertTrue(\\'SPAM\\' in cid)\"\\n        \"self.assertTrue(\\'sPam\\' in cid)\"\\n        \"self.assertFalse(\\'notspam\\' in cid)\"\\n\\n    def \"test_get(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'spam\\'] = \\'oneval\\'\\n        cid[\\'SPAM\\'] = \\'blueval\\'\\n        \"self.assertEqual(cid.get(\\'spam\\')\", \\'blueval\\')\\n        \"self.assertEqual(cid.get(\\'SPAM\\')\", \\'blueval\\')\\n        \"self.assertEqual(cid.get(\\'sPam\\')\", \\'blueval\\')\\n        \"self.assertEqual(cid.get(\\'notspam\\', \\'default\\')\", \\'default\\')\\n\\n    def \"test_update(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'spam\\'] = \\'blueval\\'\\n        cid.update({\\'sPam\\': \\'notblueval\\'})\\n        \"self.assertEqual(cid[\\'spam\\'], \\'notblueval\\')\"\\n        cid = CaseInsensitiveDict({\\'Foo\\': \\'foo\\',\\'BAr\\': \\'bar\\'})\\n        cid.update({\\'fOO\\': \\'anotherfoo\\', \\'bAR\\': \\'anotherbar\\'})\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertEqual(cid[\\'foo\\'], \\'anotherfoo\\')\"\\n        \"self.assertEqual(cid[\\'bar\\'], \\'anotherbar\\')\"\\n\\n    def \"test_update_retains_unchanged(self)\":\\n        cid = CaseInsensitiveDict({\\'foo\\': \\'foo\\', \\'bar\\': \\'bar\\'})\\n        cid.update({\\'foo\\': \\'newfoo\\'})\\n        \"self.assertEquals(cid[\\'bar\\'], \\'bar\\')\"\\n\\n    def \"test_iter(self)\":\\n        cid = CaseInsensitiveDict({\\'Spam\\': \\'spam\\', \\'Eggs\\': \\'eggs\\'})\\n        keys = \"frozenset([\\'Spam\\', \\'Eggs\\'])\"\\n        \"self.assertEqual(frozenset(iter(cid)\"), keys)\\n\\n    def \"test_equality(self)\":\\n        cid = CaseInsensitiveDict({\\'SPAM\\': \\'blueval\\', \\'Eggs\\': \\'redval\\'})\\n        othercid = CaseInsensitiveDict({\\'spam\\': \\'blueval\\', \\'eggs\\': \\'redval\\'})\\n        \"self.assertEqual(cid, othercid)\"\\n        del othercid[\\'spam\\']\\n        \"self.assertNotEqual(cid, othercid)\"\\n        self.assertEqual(cid, {\\'spam\\': \\'blueval\\', \\'eggs\\': \\'redval\\'})\\n\\n    def \"test_setdefault(self)\":\\n        cid = CaseInsensitiveDict({\\'Spam\\': \\'blueval\\'})\\n        \"self.assertEqual(\\n            cid.setdefault(\\'spam\\', \\'notblueval\\')\",\\n            \\'blueval\\'\\n        )\\n        \"self.assertEqual(\\n            cid.setdefault(\\'notspam\\', \\'notblueval\\')\",\\n            \\'notblueval\\'\\n        )\\n\\n    def \"test_lower_items(self)\":\\n        cid = CaseInsensitiveDict({\\n            \\'Accept\\': \\'application/json\\',\\n            \\'user-Agent\\': \\'requests\\',\\n        })\\n        keyset = \"frozenset(lowerkey for lowerkey, v in cid.lower_items()\")\\n        lowerkeyset = \"frozenset([\\'accept\\', \\'user-agent\\'])\"\\n        \"self.assertEqual(keyset, lowerkeyset)\"\\n\\n    def \"test_preserve_key_case(self)\":\\n        cid = CaseInsensitiveDict({\\n            \\'Accept\\': \\'application/json\\',\\n            \\'user-Agent\\': \\'requests\\',\\n        })\\n        keyset = \"frozenset([\\'Accept\\', \\'user-Agent\\'])\"\\n        \"self.assertEqual(frozenset(i[0] for i in cid.items()\"), keyset)\\n        \"self.assertEqual(frozenset(cid.keys()\"), keyset)\\n        \"self.assertEqual(frozenset(cid)\", keyset)\\n\\n    def \"test_preserve_last_key_case(self)\":\\n        cid = CaseInsensitiveDict({\\n            \\'Accept\\': \\'application/json\\',\\n            \\'user-Agent\\': \\'requests\\',\\n        })\\n        cid.update({\\'ACCEPT\\': \\'application/json\\'})\\n        cid[\\'USER-AGENT\\'] = \\'requests\\'\\n        keyset = \"frozenset([\\'ACCEPT\\', \\'USER-AGENT\\'])\"\\n        \"self.assertEqual(frozenset(i[0] for i in cid.items()\"), keyset)\\n        \"self.assertEqual(frozenset(cid.keys()\"), keyset)\\n        \"self.assertEqual(frozenset(cid)\", keyset)\\n\\n\\nif __name__ == \\'__main__\\':\\n    \"unittest.main()\"\\n\\r\\n--e103254b78f44c34821a3e68148b0ee0--\\r\\n'", "multipart/form-data; boundary=e103254b78f44c34821a3e68148b0ee0"]}, "name": "_encode_files"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"files": {"file": "list of different types containing 2 elements ['str', 'in ground truth values, it is an empty dict']"}, "data": {"stuff": "str"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "list of 2 str"}, "values": {"inputs": {"self": {}, "args": {"files": {"file": ["test_requests.py", {}]}, "data": {"stuff": "{\"a\": 123}"}}, "kwargs": {}}, "return": ["b'--ad07693eb62044349b5577fba4a9095f\\r\\nContent-Disposition: form-data; name=\"stuff\"\\r\\n\\r\\n{\"a\": 123}\\r\\n--ad07693eb62044349b5577fba4a9095f\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"test_requests.py\"\\r\\nContent-Type: text/x-python\\r\\n\\r\\n#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\n\"\"\"Tests for Requests.\"\"\"\\n\\nfrom __future__ import division\\nimport json\\nimport os\\nimport unittest\\nimport pickle\\n\\nimport requests\\nfrom requests.auth import HTTPDigestAuth\\nfrom requests.adapters import HTTPAdapter\\nfrom requests.compat import str, cookielib, getproxies, urljoin, urlparse\\nfrom requests.cookies import cookiejar_from_dict\\nfrom requests.exceptions import InvalidURL, MissingSchema\\nfrom requests.structures import CaseInsensitiveDict\\n\\ntry:\\n    import StringIO\\nexcept ImportError:\\n    import io as StringIO\\n\\nHTTPBIN = \"os.environ.get(\\'HTTPBIN_URL\\', \\'http://httpbin.org/\\')\"\\n# Issue #1483: Make sure the URL always has a trailing slash\\nHTTPBIN = \"HTTPBIN.rstrip(\\'/\\')\" + \\'/\\'\\n\\n\\ndef \"httpbin(*suffix)\":\\n    \"\"\"Returns url for HTTPBIN resource.\"\"\"\\n    return \"urljoin(HTTPBIN, \\'/\\'.join(suffix)\")\\n\\n\\nclass \"RequestsTestCase(unittest.TestCase)\":\\n\\n    _multiprocess_can_split_ = True\\n\\n    def \"setUp(self)\":\\n        \"\"\"Create simple data set with headers.\"\"\"\\n        pass\\n\\n    def \"tearDown(self)\":\\n        \"\"\"Teardown.\"\"\"\\n        pass\\n\\n    def \"test_entry_points(self)\":\\n\\n        requests.session\\n        \"requests.session()\".get\\n        \"requests.session()\".head\\n        requests.get\\n        requests.head\\n        requests.put\\n        requests.patch\\n        requests.post\\n\\n    def \"test_invalid_url(self)\":\\n        \"self.assertRaises(MissingSchema, requests.get, \\'hiwpefhipowhefopw\\')\"\\n        \"self.assertRaises(InvalidURL, requests.get, \\'http://\\')\"\\n\\n    def \"test_basic_building(self)\":\\n        req = \"requests.Request()\"\\n        req.url = \\'http://kennethreitz.org/\\'\\n        req.data = {\\'life\\': \\'42\\'}\\n\\n        pr = \"req.prepare()\"\\n        assert pr.url == req.url\\n        assert pr.body == \\'life=42\\'\\n\\n    def \"test_no_content_length(self)\":\\n        get_req = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\").\"prepare()\"\\n        \"self.assertTrue(\\'Content-Length\\' not in get_req.headers)\"\\n        head_req = \"requests.Request(\\'HEAD\\', httpbin(\\'head\\')\").\"prepare()\"\\n        \"self.assertTrue(\\'Content-Length\\' not in head_req.headers)\"\\n\\n    def \"test_path_is_not_double_encoded(self)\":\\n        request = \"requests.Request(\\'GET\\', \"http://0.0.0.0/get/test case\")\".\"prepare()\"\\n\\n        \"self.assertEqual(request.path_url, \"/get/test%20case\")\"\\n\\n    def \"test_params_are_added_before_fragment(self)\":\\n        request = requests.Request(\\'GET\\',\\n            \"http://example.com/path#fragment\", params={\"a\": \"b\"}).\"prepare()\"\\n        \"self.assertEqual(request.url,\\n            \"http://example.com/path?a=b#fragment\")\"\\n        request = requests.Request(\\'GET\\',\\n            \"http://example.com/path?key=value#fragment\", params={\"a\": \"b\"}).\"prepare()\"\\n        \"self.assertEqual(request.url,\\n            \"http://example.com/path?key=value&a=b#fragment\")\"\\n\\n    def \"test_mixed_case_scheme_acceptable(self)\":\\n        s = \"requests.Session()\"\\n        s.proxies = \"getproxies()\"\\n        parts = \"urlparse(httpbin(\\'get\\')\")\\n        schemes = [\\'http://\\', \\'HTTP://\\', \\'hTTp://\\', \\'HttP://\\',\\n                   \\'https://\\', \\'HTTPS://\\', \\'hTTps://\\', \\'HttPs://\\']\\n        for scheme in schemes:\\n            url = scheme + parts.netloc + parts.path\\n            r = \"requests.Request(\\'GET\\', url)\"\\n            r = \"s.send(r.prepare()\")\\n            \"self.assertEqual(r.status_code, 200,\\n                             \"failed for scheme %s\" % scheme)\"\\n\\n    def \"test_HTTP_200_OK_GET_ALTERNATIVE(self)\":\\n        r = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\")\\n        s = \"requests.Session()\"\\n        s.proxies = \"getproxies()\"\\n\\n        r = \"s.send(r.prepare()\")\\n\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_302_ALLOW_REDIRECT_GET(self)\":\\n        r = \"requests.get(httpbin(\\'redirect\\', \\'1\\')\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    # def \"test_HTTP_302_ALLOW_REDIRECT_POST(self)\":\\n    #     r = \"requests.post(httpbin(\\'status\\', \\'302\\')\", data={\\'some\\': \\'data\\'})\\n    #     \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_200_OK_GET_WITH_PARAMS(self)\":\\n        heads = {\\'User-agent\\': \\'Mozilla/5.0\\'}\\n\\n        r = \"requests.get(httpbin(\\'user-agent\\')\", headers=heads)\\n\\n        \"self.assertTrue(heads[\\'User-agent\\'] in r.text)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self)\":\\n        heads = {\\'User-agent\\': \\'Mozilla/5.0\\'}\\n\\n        r = \"requests.get(httpbin(\\'get\\')\" + \\'?test=true\\', params={\\'q\\': \\'test\\'}, headers=heads)\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_set_cookie_on_301(self)\":\\n        s = \"requests.session()\"\\n        url = \"httpbin(\\'cookies/set?foo=bar\\')\"\\n        r = \"s.get(url)\"\\n        \"self.assertTrue(s.cookies[\\'foo\\'] == \\'bar\\')\"\\n\\n    def \"test_cookie_sent_on_redirect(self)\":\\n        s = \"requests.session()\"\\n        \"s.get(httpbin(\\'cookies/set?foo=bar\\')\")\\n        r = \"s.get(httpbin(\\'redirect/1\\')\")  # redirects to \"httpbin(\\'get\\')\"\\n        \"self.assertTrue(\"Cookie\" in r.json()\"[\"headers\"])\\n\\n    def \"test_cookie_removed_on_expire(self)\":\\n        s = \"requests.session()\"\\n        \"s.get(httpbin(\\'cookies/set?foo=bar\\')\")\\n        \"self.assertTrue(s.cookies[\\'foo\\'] == \\'bar\\')\"\\n        \"s.get(\\n            httpbin(\\'response-headers\\')\",\\n            params={\\n                \\'Set-Cookie\\':\\n                    \\'foo=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT\\'\\n            }\\n        )\\n        assert \\'foo\\' not in s.cookies\\n\\n    def \"test_cookie_quote_wrapped(self)\":\\n        s = \"requests.session()\"\\n        \"s.get(httpbin(\\'cookies/set?foo=\"bar:baz\"\\')\")\\n        \"self.assertTrue(s.cookies[\\'foo\\'] == \\'\"bar:baz\"\\')\"\\n\\n    def \"test_request_cookie_overrides_session_cookie(self)\":\\n        s = \"requests.session()\"\\n        s.cookies[\\'foo\\'] = \\'bar\\'\\n        r = \"s.get(httpbin(\\'cookies\\')\", cookies={\\'foo\\': \\'baz\\'})\\n        assert \"r.json()\"[\\'cookies\\'][\\'foo\\'] == \\'baz\\'\\n        # Session cookie should not be modified\\n        assert s.cookies[\\'foo\\'] == \\'bar\\'\\n\\n    def \"test_generic_cookiejar_works(self)\":\\n        cj = \"cookielib.CookieJar()\"\\n        cookiejar_from_dict({\\'foo\\': \\'bar\\'}, cj)\\n        s = \"requests.session()\"\\n        s.cookies = cj\\n        r = \"s.get(httpbin(\\'cookies\\')\")\\n        # Make sure the cookie was sent\\n        assert \"r.json()\"[\\'cookies\\'][\\'foo\\'] == \\'bar\\'\\n        # Make sure the session cj is still the custom one\\n        assert s.cookies is cj\\n\\n    def \"test_requests_in_history_are_not_overridden(self)\":\\n        resp = \"requests.get(httpbin(\\'redirect/3\\')\")\\n        urls = [r.url for r in resp.history]\\n        req_urls = [r.request.url for r in resp.history]\\n        \"self.assertEquals(urls, req_urls)\"\\n\\n    def \"test_user_agent_transfers(self)\":\\n\\n        heads = {\\n            \\'User-agent\\': \\'Mozilla/\"5.0 (github.com/kennethreitz/requests)\"\\'\\n        }\\n\\n        r = \"requests.get(httpbin(\\'user-agent\\')\", headers=heads)\\n        \"self.assertTrue(heads[\\'User-agent\\'] in r.text)\"\\n\\n        heads = {\\n            \\'user-agent\\': \\'Mozilla/\"5.0 (github.com/kennethreitz/requests)\"\\'\\n        }\\n\\n        r = \"requests.get(httpbin(\\'user-agent\\')\", headers=heads)\\n        \"self.assertTrue(heads[\\'user-agent\\'] in r.text)\"\\n\\n    def \"test_HTTP_200_OK_HEAD(self)\":\\n        r = \"requests.head(httpbin(\\'get\\')\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_200_OK_PUT(self)\":\\n        r = \"requests.put(httpbin(\\'put\\')\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self)\":\\n        auth = (\\'user\\', \\'pass\\')\\n        url = \"httpbin(\\'basic-auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n        s.auth = auth\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_basicauth_with_netrc(self)\":\\n        auth = (\\'user\\', \\'pass\\')\\n        wrong_auth = (\\'wronguser\\', \\'wrongpass\\')\\n        url = \"httpbin(\\'basic-auth\\', \\'user\\', \\'pass\\')\"\\n\\n        def \"get_netrc_auth_mock(url)\":\\n            return auth\\n        requests.sessions.get_netrc_auth = get_netrc_auth_mock\\n\\n        # Should use netrc and work.\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        # Given auth should override and fail.\\n        r = \"requests.get(url, auth=wrong_auth)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n\\n        # Should use netrc and work.\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        # Given auth should override and fail.\\n        s.auth = wrong_auth\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n    def \"test_DIGEST_HTTP_200_OK_GET(self)\":\\n\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n        s.auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_DIGEST_AUTH_RETURNS_COOKIE(self)\":\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        r = \"requests.get(url)\"\\n        assert r.cookies[\\'fake\\'] == \\'fake_value\\'\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        assert r.status_code == 200\\n\\n    def \"test_DIGEST_AUTH_SETS_SESSION_COOKIES(self)\":\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        s = \"requests.Session()\"\\n        \"s.get(url, auth=auth)\"\\n        assert s.cookies[\\'fake\\'] == \\'fake_value\\'\\n\\n    def \"test_DIGEST_STREAM(self)\":\\n\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth, stream=True)\"\\n        \"self.assertNotEqual(r.raw.read()\", b\\'\\')\\n\\n        r = \"requests.get(url, auth=auth, stream=False)\"\\n        \"self.assertEqual(r.raw.read()\", b\\'\\')\\n\\n\\n    def \"test_DIGESTAUTH_WRONG_HTTP_401_GET(self)\":\\n\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'wrongpass\\')\"\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n        s.auth = auth\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n    def \"test_POSTBIN_GET_POST_FILES(self)\":\\n\\n        url = \"httpbin(\\'post\\')\"\\n        post1 = \"requests.post(url)\".\"raise_for_status()\"\\n\\n        post1 = requests.post(url, data={\\'some\\': \\'data\\'})\\n        \"self.assertEqual(post1.status_code, 200)\"\\n\\n        with \"open(\\'requirements.txt\\')\" as f:\\n            post2 = requests.post(url, files={\\'some\\': f})\\n        \"self.assertEqual(post2.status_code, 200)\"\\n\\n        post4 = requests.post(url, data=\\'[{\"some\": \"json\"}]\\')\\n        \"self.assertEqual(post4.status_code, 200)\"\\n\\n        try:\\n            \"requests.post(url, files=[\\'bad file data\\'])\"\\n        except ValueError:\\n            pass\\n\\n    def \"test_POSTBIN_GET_POST_FILES_WITH_DATA(self)\":\\n\\n        url = \"httpbin(\\'post\\')\"\\n        post1 = \"requests.post(url)\".\"raise_for_status()\"\\n\\n        post1 = requests.post(url, data={\\'some\\': \\'data\\'})\\n        \"self.assertEqual(post1.status_code, 200)\"\\n\\n        with \"open(\\'requirements.txt\\')\" as f:\\n            post2 = requests.post(url, data={\\'some\\': \\'data\\'}, files={\\'some\\': f})\\n        \"self.assertEqual(post2.status_code, 200)\"\\n\\n        post4 = requests.post(url, data=\\'[{\"some\": \"json\"}]\\')\\n        \"self.assertEqual(post4.status_code, 200)\"\\n\\n        try:\\n            \"requests.post(url, files=[\\'bad file data\\'])\"\\n        except ValueError:\\n            pass\\n\\n    def \"test_request_ok_set(self)\":\\n        r = \"requests.get(httpbin(\\'status\\', \\'404\\')\")\\n        \"self.assertEqual(r.ok, False)\"\\n\\n    def \"test_status_raising(self)\":\\n        r = \"requests.get(httpbin(\\'status\\', \\'404\\')\")\\n        \"self.assertRaises(requests.exceptions.HTTPError, r.raise_for_status)\"\\n\\n        r = \"requests.get(httpbin(\\'status\\', \\'500\\')\")\\n        \"self.assertFalse(r.ok)\"\\n\\n    def \"test_decompress_gzip(self)\":\\n        r = \"requests.get(httpbin(\\'gzip\\')\")\\n        \"r.content.decode(\\'ascii\\')\"\\n\\n    def \"test_unicode_get(self)\":\\n        url = \"httpbin(\\'/get\\')\"\\n        requests.get(url, params={\\'foo\\': \\'f\\xc3\\xb8\\xc3\\xb8\\'})\\n        requests.get(url, params={\\'f\\xc3\\xb8\\xc3\\xb8\\': \\'f\\xc3\\xb8\\xc3\\xb8\\'})\\n        requests.get(url, params={\\'f\\xc3\\xb8\\xc3\\xb8\\': \\'f\\xc3\\xb8\\xc3\\xb8\\'})\\n        requests.get(url, params={\\'foo\\': \\'foo\\'})\\n        \"requests.get(httpbin(\\'\\xc3\\xb8\\')\", params={\\'foo\\': \\'foo\\'})\\n\\n    def \"test_unicode_header_name(self)\":\\n        \"requests.put(httpbin(\\'put\\')\", headers={\"str(\\'Content-Type\\')\": \\'application/octet-stream\\'}, data=\\'\\\\xff\\') # compat.str is unicode.\\n\\n    def \"test_urlencoded_get_query_multivalued_param(self)\":\\n\\n        r = \"requests.get(httpbin(\\'get\\')\", params=\"dict(test=[\\'foo\\', \\'baz\\'])\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n        \"self.assertEqual(r.url, httpbin(\\'get?test=foo&test=baz\\')\")\\n\\n    def \"test_different_encodings_dont_break_post(self)\":\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': json.dumps({\\'a\\': 123})},\\n                          params={\\'blah\\': \\'asdf1234\\'},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_unicode_multipart_post(self)\":\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': u\\'\\xc3\\xabl\\xc3\\xafxr\\'},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': u\\'\\xc3\\xabl\\xc3\\xafxr\\'.\"encode(\\'utf-8\\')\"},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': \\'elixr\\'},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': \\'elixr\\'.\"encode(\\'utf-8\\')\"},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_unicode_multipart_post_fieldnames(self)\":\\n        filename = \"os.path.splitext(__file__)\"[0] + \\'.py\\'\\n        r = \"requests.Request(method=\\'POST\\',\\n                             url=httpbin(\\'post\\')\",\\n                             data={\\'stuff\\'.\"encode(\\'utf-8\\')\": \\'elixr\\'},\\n                             files={\\'file\\': (\\'test_requests.py\\',\\n                                             \"open(filename, \\'rb\\')\")})\\n        prep = \"r.prepare()\"\\n        \"self.assertTrue(b\\'name=\"stuff\"\\' in prep.body)\"\\n        \"self.assertFalse(b\\'name=\"b\\\\\\'stuff\\\\\\'\"\\' in prep.body)\"\\n\\n    def \"test_custom_content_type(self)\":\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': json.dumps({\\'a\\': 123})},\\n                          files={\\'file1\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\"),\\n                                 \\'file2\\': (\\'test_requests\\', \"open(__file__, \\'rb\\')\",\\n                                           \\'text/py-content-type\\')})\\n        \"self.assertEqual(r.status_code, 200)\"\\n        \"self.assertTrue(b\"text/py-content-type\" in r.request.body)\"\\n\\n    def \"test_hook_receives_request_arguments(self)\":\\n        def \"hook(resp, **kwargs)\":\\n            assert resp is not None\\n            assert kwargs != {}\\n\\n        requests.Request(\\'GET\\', HTTPBIN, hooks={\\'response\\': hook})\\n\\n    def \"test_prepared_request_hook(self)\":\\n        def \"hook(resp, **kwargs)\":\\n            resp.hook_working = True\\n            return resp\\n\\n        req = requests.Request(\\'GET\\', HTTPBIN, hooks={\\'response\\': hook})\\n        prep = \"req.prepare()\"\\n\\n        s = \"requests.Session()\"\\n        s.proxies = \"getproxies()\"\\n        resp = \"s.send(prep)\"\\n\\n        \"self.assertTrue(hasattr(resp, \\'hook_working\\')\")\\n\\n    def \"test_prepared_from_session(self)\":\\n        class \"DummyAuth(requests.auth.AuthBase)\":\\n            def \"__call__(self, r)\":\\n                r.headers[\\'Dummy-Auth-Test\\'] = \\'dummy-auth-test-ok\\'\\n                return r\\n\\n        req = \"requests.Request(\\'GET\\', httpbin(\\'headers\\')\")\\n        \"self.assertEqual(req.auth, None)\"\\n\\n        s = \"requests.Session()\"\\n        s.auth = \"DummyAuth()\"\\n\\n        prep = \"s.prepare_request(req)\"\\n        resp = \"s.send(prep)\"\\n\\n        \"self.assertTrue(resp.json()\"[\\'headers\\'][\\'Dummy-Auth-Test\\'], \\'dummy-auth-test-ok\\')\\n\\n    def \"test_links(self)\":\\n        r = \"requests.Response()\"\\n        r.headers = {\\n            \\'cache-control\\': \\'public, max-age=60, s-maxage=60\\',\\n            \\'connection\\': \\'keep-alive\\',\\n            \\'content-encoding\\': \\'gzip\\',\\n            \\'content-type\\': \\'application/json; charset=utf-8\\',\\n            \\'date\\': \\'Sat, 26 Jan 2013 16:47:56 GMT\\',\\n            \\'etag\\': \\'\"6ff6a73c0e446c1f61614769e3ceb778\"\\',\\n            \\'last-modified\\': \\'Sat, 26 Jan 2013 16:22:39 GMT\\',\\n            \\'link\\': (\\'\"<https://api.github.com/users/kennethreitz/repos?\\'\\n                     \\'page=2&per_page=10>\"; rel=\"next\", \"<https://api.github.\\'\\n                     \\'com/users/kennethreitz/repos?page=7&per_page=10>\"; \\'\\n                     \\' rel=\"last\"\\'),\\n            \\'server\\': \\'GitHub.com\\',\\n            \\'status\\': \\'200 OK\\',\\n            \\'vary\\': \\'Accept\\',\\n            \\'x-content-type-options\\': \\'nosniff\\',\\n            \\'x-github-media-type\\': \\'github.beta\\',\\n            \\'x-ratelimit-limit\\': \\'60\\',\\n            \\'x-ratelimit-remaining\\': \\'57\\'\\n        }\\n        \"self.assertEqual(r.links[\\'next\\'][\\'rel\\'], \\'next\\')\"\\n\\n    def \"test_cookie_parameters(self)\":\\n        key = \\'some_cookie\\'\\n        value = \\'some_value\\'\\n        secure = True\\n        domain = \\'test.com\\'\\n        rest = {\\'HttpOnly\\': True}\\n\\n        jar = \"requests.cookies.RequestsCookieJar()\"\\n        \"jar.set(key, value, secure=secure, domain=domain, rest=rest)\"\\n\\n        \"self.assertEqual(len(jar)\", 1)\\n        \"self.assertTrue(\\'some_cookie\\' in jar)\"\\n\\n        cookie = \"list(jar)\"[0]\\n        \"self.assertEqual(cookie.secure, secure)\"\\n        \"self.assertEqual(cookie.domain, domain)\"\\n        \"self.assertEqual(cookie._rest[\\'HttpOnly\\'], rest[\\'HttpOnly\\'])\"\\n\\n    def \"test_time_elapsed_blank(self)\":\\n        r = \"requests.get(httpbin(\\'get\\')\")\\n        td = r.elapsed\\n        total_seconds = ((td.microseconds + (td.seconds + td.days * 24 * 3600)\\n                         * 10**6) / 10**6)\\n        \"self.assertTrue(total_seconds > 0.0)\"\\n\\n    def \"test_response_is_iterable(self)\":\\n        r = \"requests.Response()\"\\n        io = \"StringIO.StringIO(\\'abc\\')\"\\n        read_ = io.read\\n\\n        def \"read_mock(amt, decode_content=None)\":\\n            return \"read_(amt)\"\\n        \"setattr(io, \\'read\\', read_mock)\"\\n        r.raw = io\\n        \"self.assertTrue(next(iter(r)\"))\\n        \"io.close()\"\\n\\n    def \"test_get_auth_from_url(self)\":\\n        url = \\'http://user:pass@complex.url.com/path?query=yes\\'\\n        \"self.assertEqual((\\'user\\', \\'pass\\')\",\\n                         \"requests.utils.get_auth_from_url(url)\")\\n\\n    def \"test_cannot_send_unprepared_requests(self)\":\\n        r = \"requests.Request(url=HTTPBIN)\"\\n        \"self.assertRaises(ValueError, requests.Session()\".send, r)\\n\\n    def \"test_http_error(self)\":\\n        error = \"requests.exceptions.HTTPError()\"\\n        \"self.assertEqual(error.response, None)\"\\n        response = \"requests.Response()\"\\n        error = \"requests.exceptions.HTTPError(response=response)\"\\n        \"self.assertEqual(error.response, response)\"\\n        error = \"requests.exceptions.HTTPError(\\'message\\', response=response)\"\\n        \"self.assertEqual(str(error)\", \\'message\\')\\n        \"self.assertEqual(error.response, response)\"\\n\\n    def \"test_session_pickling(self)\":\\n        r = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\")\\n        s = \"requests.Session()\"\\n\\n        s = \"pickle.loads(pickle.dumps(s)\")\\n        s.proxies = \"getproxies()\"\\n\\n        r = \"s.send(r.prepare()\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_fixes_1329(self)\":\\n        \"\"\"\\n        Ensure that header updates are done case-insensitively.\\n        \"\"\"\\n        s = \"requests.Session()\"\\n        s.headers.update({\\'ACCEPT\\': \\'BOGUS\\'})\\n        s.headers.update({\\'accept\\': \\'application/json\\'})\\n        r = \"s.get(httpbin(\\'get\\')\")\\n        headers = r.request.headers\\n        \"self.assertEqual(\\n            headers[\\'accept\\'],\\n            \\'application/json\\'\\n        )\"\\n        \"self.assertEqual(\\n            headers[\\'Accept\\'],\\n            \\'application/json\\'\\n        )\"\\n        \"self.assertEqual(\\n            headers[\\'ACCEPT\\'],\\n            \\'application/json\\'\\n        )\"\\n\\n    def \"test_uppercase_scheme_redirect(self)\":\\n        parts = \"urlparse(httpbin(\\'html\\')\")\\n        url = \"HTTP://\" + parts.netloc + parts.path\\n        r = \"requests.get(httpbin(\\'redirect-to\\')\", params={\\'url\\': url})\\n        \"self.assertEqual(r.status_code, 200)\"\\n        \"self.assertEqual(r.url.lower()\", \"url.lower()\")\\n\\n    def \"test_transport_adapter_ordering(self)\":\\n        s = \"requests.Session()\"\\n        order = [\\'https://\\', \\'http://\\']\\n        \"self.assertEqual(order, list(s.adapters)\")\\n        \"s.mount(\\'http://git\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://github\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://github.com\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://github.com/about/\\', HTTPAdapter()\")\\n        order = [\\n            \\'http://github.com/about/\\',\\n            \\'http://github.com\\',\\n            \\'http://github\\',\\n            \\'http://git\\',\\n            \\'https://\\',\\n            \\'http://\\',\\n        ]\\n        \"self.assertEqual(order, list(s.adapters)\")\\n        \"s.mount(\\'http://gittip\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://gittip.com\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://gittip.com/about/\\', HTTPAdapter()\")\\n        order = [\\n            \\'http://github.com/about/\\',\\n            \\'http://gittip.com/about/\\',\\n            \\'http://github.com\\',\\n            \\'http://gittip.com\\',\\n            \\'http://github\\',\\n            \\'http://gittip\\',\\n            \\'http://git\\',\\n            \\'https://\\',\\n            \\'http://\\',\\n        ]\\n        \"self.assertEqual(order, list(s.adapters)\")\\n        s2 = \"requests.Session()\"\\n        s2.adapters = {\\'http://\\': \"HTTPAdapter()\"}\\n        \"s2.mount(\\'https://\\', HTTPAdapter()\")\\n        \"self.assertTrue(\\'http://\\' in s2.adapters)\"\\n        \"self.assertTrue(\\'https://\\' in s2.adapters)\"\\n\\n    def \"test_header_remove_is_case_insensitive(self)\":\\n        # From issue #1321\\n        s = \"requests.Session()\"\\n        s.headers[\\'foo\\'] = \\'bar\\'\\n        r = \"s.get(httpbin(\\'get\\')\", headers={\\'FOO\\': None})\\n        assert \\'foo\\' not in r.request.headers\\n\\n    def \"test_params_are_merged_case_sensitive(self)\":\\n        s = \"requests.Session()\"\\n        s.params[\\'foo\\'] = \\'bar\\'\\n        r = \"s.get(httpbin(\\'get\\')\", params={\\'FOO\\': \\'bar\\'})\\n        assert \"r.json()\"[\\'args\\'] == {\\'foo\\': \\'bar\\', \\'FOO\\': \\'bar\\'}\\n\\n\\n    def \"test_long_authinfo_in_url(self)\":\\n        url = \\'http://{0}:{1}@{2}:9000/path?query#frag\\'.\"format(\\n            \\'E8A3BE87-9E3F-4620-8858-95478E385B5B\\',\\n            \\'EA770032-DA4D-4D84-8CE9-29C6D910BF1E\\',\\n            \\'exactly-------------sixty-----------three------------characters\\',\\n        )\"\\n        r = \"requests.Request(\\'GET\\', url)\".\"prepare()\"\\n        \"self.assertEqual(r.url, url)\"\\n\\n    def \"test_header_keys_are_native(self)\":\\n        headers = {u\\'unicode\\': \\'blah\\', \\'byte\\'.\"encode(\\'ascii\\')\": \\'blah\\'}\\n        r = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\", headers=headers)\\n        p = \"r.prepare()\"\\n\\n        # This is testing that they are builtin strings. A bit weird, but there\\n        # we go.\\n        \"self.assertTrue(\\'unicode\\' in p.headers.keys()\")\\n        \"self.assertTrue(\\'byte\\' in p.headers.keys()\")\\n\\n    def \"test_can_send_nonstring_objects_with_files(self)\":\\n        data = {\\'a\\': 0.0}\\n        files = {\\'b\\': \\'foo\\'}\\n        r = \"requests.Request(\\'POST\\', httpbin(\\'post\\')\", data=data, files=files)\\n        p = \"r.prepare()\"\\n\\n        \"self.assertTrue(\\'multipart/form-data\\' in p.headers[\\'Content-Type\\'])\"\\n\\n\\nclass \"TestCaseInsensitiveDict(unittest.TestCase)\":\\n\\n    def \"test_mapping_init(self)\":\\n        cid = CaseInsensitiveDict({\\'Foo\\': \\'foo\\',\\'BAr\\': \\'bar\\'})\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertTrue(\\'foo\\' in cid)\"\\n        \"self.assertTrue(\\'bar\\' in cid)\"\\n\\n    def \"test_iterable_init(self)\":\\n        cid = \"CaseInsensitiveDict([(\\'Foo\\', \\'foo\\')\", (\\'BAr\\', \\'bar\\')])\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertTrue(\\'foo\\' in cid)\"\\n        \"self.assertTrue(\\'bar\\' in cid)\"\\n\\n    def \"test_kwargs_init(self)\":\\n        cid = \"CaseInsensitiveDict(FOO=\\'foo\\', BAr=\\'bar\\')\"\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertTrue(\\'foo\\' in cid)\"\\n        \"self.assertTrue(\\'bar\\' in cid)\"\\n\\n    def \"test_docstring_example(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'Accept\\'] = \\'application/json\\'\\n        \"self.assertEqual(cid[\\'aCCEPT\\'], \\'application/json\\')\"\\n        \"self.assertEqual(list(cid)\", [\\'Accept\\'])\\n\\n    def \"test_len(self)\":\\n        cid = CaseInsensitiveDict({\\'a\\': \\'a\\', \\'b\\': \\'b\\'})\\n        cid[\\'A\\'] = \\'a\\'\\n        \"self.assertEqual(len(cid)\", 2)\\n\\n    def \"test_getitem(self)\":\\n        cid = CaseInsensitiveDict({\\'Spam\\': \\'blueval\\'})\\n        \"self.assertEqual(cid[\\'spam\\'], \\'blueval\\')\"\\n        \"self.assertEqual(cid[\\'SPAM\\'], \\'blueval\\')\"\\n\\n    def \"test_fixes_649(self)\":\\n        \"\"\"__setitem__ should behave case-insensitively.\"\"\"\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'spam\\'] = \\'oneval\\'\\n        cid[\\'Spam\\'] = \\'twoval\\'\\n        cid[\\'sPAM\\'] = \\'redval\\'\\n        cid[\\'SPAM\\'] = \\'blueval\\'\\n        \"self.assertEqual(cid[\\'spam\\'], \\'blueval\\')\"\\n        \"self.assertEqual(cid[\\'SPAM\\'], \\'blueval\\')\"\\n        \"self.assertEqual(list(cid.keys()\"), [\\'SPAM\\'])\\n\\n    def \"test_delitem(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'Spam\\'] = \\'someval\\'\\n        del cid[\\'sPam\\']\\n        \"self.assertFalse(\\'spam\\' in cid)\"\\n        \"self.assertEqual(len(cid)\", 0)\\n\\n    def \"test_contains(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'Spam\\'] = \\'someval\\'\\n        \"self.assertTrue(\\'Spam\\' in cid)\"\\n        \"self.assertTrue(\\'spam\\' in cid)\"\\n        \"self.assertTrue(\\'SPAM\\' in cid)\"\\n        \"self.assertTrue(\\'sPam\\' in cid)\"\\n        \"self.assertFalse(\\'notspam\\' in cid)\"\\n\\n    def \"test_get(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'spam\\'] = \\'oneval\\'\\n        cid[\\'SPAM\\'] = \\'blueval\\'\\n        \"self.assertEqual(cid.get(\\'spam\\')\", \\'blueval\\')\\n        \"self.assertEqual(cid.get(\\'SPAM\\')\", \\'blueval\\')\\n        \"self.assertEqual(cid.get(\\'sPam\\')\", \\'blueval\\')\\n        \"self.assertEqual(cid.get(\\'notspam\\', \\'default\\')\", \\'default\\')\\n\\n    def \"test_update(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'spam\\'] = \\'blueval\\'\\n        cid.update({\\'sPam\\': \\'notblueval\\'})\\n        \"self.assertEqual(cid[\\'spam\\'], \\'notblueval\\')\"\\n        cid = CaseInsensitiveDict({\\'Foo\\': \\'foo\\',\\'BAr\\': \\'bar\\'})\\n        cid.update({\\'fOO\\': \\'anotherfoo\\', \\'bAR\\': \\'anotherbar\\'})\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertEqual(cid[\\'foo\\'], \\'anotherfoo\\')\"\\n        \"self.assertEqual(cid[\\'bar\\'], \\'anotherbar\\')\"\\n\\n    def \"test_update_retains_unchanged(self)\":\\n        cid = CaseInsensitiveDict({\\'foo\\': \\'foo\\', \\'bar\\': \\'bar\\'})\\n        cid.update({\\'foo\\': \\'newfoo\\'})\\n        \"self.assertEquals(cid[\\'bar\\'], \\'bar\\')\"\\n\\n    def \"test_iter(self)\":\\n        cid = CaseInsensitiveDict({\\'Spam\\': \\'spam\\', \\'Eggs\\': \\'eggs\\'})\\n        keys = \"frozenset([\\'Spam\\', \\'Eggs\\'])\"\\n        \"self.assertEqual(frozenset(iter(cid)\"), keys)\\n\\n    def \"test_equality(self)\":\\n        cid = CaseInsensitiveDict({\\'SPAM\\': \\'blueval\\', \\'Eggs\\': \\'redval\\'})\\n        othercid = CaseInsensitiveDict({\\'spam\\': \\'blueval\\', \\'eggs\\': \\'redval\\'})\\n        \"self.assertEqual(cid, othercid)\"\\n        del othercid[\\'spam\\']\\n        \"self.assertNotEqual(cid, othercid)\"\\n        self.assertEqual(cid, {\\'spam\\': \\'blueval\\', \\'eggs\\': \\'redval\\'})\\n\\n    def \"test_setdefault(self)\":\\n        cid = CaseInsensitiveDict({\\'Spam\\': \\'blueval\\'})\\n        \"self.assertEqual(\\n            cid.setdefault(\\'spam\\', \\'notblueval\\')\",\\n            \\'blueval\\'\\n        )\\n        \"self.assertEqual(\\n            cid.setdefault(\\'notspam\\', \\'notblueval\\')\",\\n            \\'notblueval\\'\\n        )\\n\\n    def \"test_lower_items(self)\":\\n        cid = CaseInsensitiveDict({\\n            \\'Accept\\': \\'application/json\\',\\n            \\'user-Agent\\': \\'requests\\',\\n        })\\n        keyset = \"frozenset(lowerkey for lowerkey, v in cid.lower_items()\")\\n        lowerkeyset = \"frozenset([\\'accept\\', \\'user-agent\\'])\"\\n        \"self.assertEqual(keyset, lowerkeyset)\"\\n\\n    def \"test_preserve_key_case(self)\":\\n        cid = CaseInsensitiveDict({\\n            \\'Accept\\': \\'application/json\\',\\n            \\'user-Agent\\': \\'requests\\',\\n        })\\n        keyset = \"frozenset([\\'Accept\\', \\'user-Agent\\'])\"\\n        \"self.assertEqual(frozenset(i[0] for i in cid.items()\"), keyset)\\n        \"self.assertEqual(frozenset(cid.keys()\"), keyset)\\n        \"self.assertEqual(frozenset(cid)\", keyset)\\n\\n    def \"test_preserve_last_key_case(self)\":\\n        cid = CaseInsensitiveDict({\\n            \\'Accept\\': \\'application/json\\',\\n            \\'user-Agent\\': \\'requests\\',\\n        })\\n        cid.update({\\'ACCEPT\\': \\'application/json\\'})\\n        cid[\\'USER-AGENT\\'] = \\'requests\\'\\n        keyset = \"frozenset([\\'ACCEPT\\', \\'USER-AGENT\\'])\"\\n        \"self.assertEqual(frozenset(i[0] for i in cid.items()\"), keyset)\\n        \"self.assertEqual(frozenset(cid.keys()\"), keyset)\\n        \"self.assertEqual(frozenset(cid)\", keyset)\\n\\n\\nif __name__ == \\'__main__\\':\\n    \"unittest.main()\"\\n\\r\\n--ad07693eb62044349b5577fba4a9095f--\\r\\n'", "multipart/form-data; boundary=ad07693eb62044349b5577fba4a9095f"]}, "name": "_encode_files"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"files": {"file": "list of different types containing 2 elements ['str', 'in ground truth values, it is an empty dict']"}, "data": {"stuff": "str"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "list of 2 str"}, "values": {"inputs": {"self": {}, "args": {"files": {"file": ["test_requests.py", {}]}, "data": {"stuff": "\u00ebl\u00efxr"}}, "kwargs": {}}, "return": ["b'--3dfe5355ca7a4a2fbb026ce526e4ae16\\r\\nContent-Disposition: form-data; name=\"stuff\"\\r\\n\\r\\n\\xc3\\xabl\\xc3\\xafxr\\r\\n--3dfe5355ca7a4a2fbb026ce526e4ae16\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"test_requests.py\"\\r\\nContent-Type: text/x-python\\r\\n\\r\\n#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\n\"\"\"Tests for Requests.\"\"\"\\n\\nfrom __future__ import division\\nimport json\\nimport os\\nimport unittest\\nimport pickle\\n\\nimport requests\\nfrom requests.auth import HTTPDigestAuth\\nfrom requests.adapters import HTTPAdapter\\nfrom requests.compat import str, cookielib, getproxies, urljoin, urlparse\\nfrom requests.cookies import cookiejar_from_dict\\nfrom requests.exceptions import InvalidURL, MissingSchema\\nfrom requests.structures import CaseInsensitiveDict\\n\\ntry:\\n    import StringIO\\nexcept ImportError:\\n    import io as StringIO\\n\\nHTTPBIN = \"os.environ.get(\\'HTTPBIN_URL\\', \\'http://httpbin.org/\\')\"\\n# Issue #1483: Make sure the URL always has a trailing slash\\nHTTPBIN = \"HTTPBIN.rstrip(\\'/\\')\" + \\'/\\'\\n\\n\\ndef \"httpbin(*suffix)\":\\n    \"\"\"Returns url for HTTPBIN resource.\"\"\"\\n    return \"urljoin(HTTPBIN, \\'/\\'.join(suffix)\")\\n\\n\\nclass \"RequestsTestCase(unittest.TestCase)\":\\n\\n    _multiprocess_can_split_ = True\\n\\n    def \"setUp(self)\":\\n        \"\"\"Create simple data set with headers.\"\"\"\\n        pass\\n\\n    def \"tearDown(self)\":\\n        \"\"\"Teardown.\"\"\"\\n        pass\\n\\n    def \"test_entry_points(self)\":\\n\\n        requests.session\\n        \"requests.session()\".get\\n        \"requests.session()\".head\\n        requests.get\\n        requests.head\\n        requests.put\\n        requests.patch\\n        requests.post\\n\\n    def \"test_invalid_url(self)\":\\n        \"self.assertRaises(MissingSchema, requests.get, \\'hiwpefhipowhefopw\\')\"\\n        \"self.assertRaises(InvalidURL, requests.get, \\'http://\\')\"\\n\\n    def \"test_basic_building(self)\":\\n        req = \"requests.Request()\"\\n        req.url = \\'http://kennethreitz.org/\\'\\n        req.data = {\\'life\\': \\'42\\'}\\n\\n        pr = \"req.prepare()\"\\n        assert pr.url == req.url\\n        assert pr.body == \\'life=42\\'\\n\\n    def \"test_no_content_length(self)\":\\n        get_req = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\").\"prepare()\"\\n        \"self.assertTrue(\\'Content-Length\\' not in get_req.headers)\"\\n        head_req = \"requests.Request(\\'HEAD\\', httpbin(\\'head\\')\").\"prepare()\"\\n        \"self.assertTrue(\\'Content-Length\\' not in head_req.headers)\"\\n\\n    def \"test_path_is_not_double_encoded(self)\":\\n        request = \"requests.Request(\\'GET\\', \"http://0.0.0.0/get/test case\")\".\"prepare()\"\\n\\n        \"self.assertEqual(request.path_url, \"/get/test%20case\")\"\\n\\n    def \"test_params_are_added_before_fragment(self)\":\\n        request = requests.Request(\\'GET\\',\\n            \"http://example.com/path#fragment\", params={\"a\": \"b\"}).\"prepare()\"\\n        \"self.assertEqual(request.url,\\n            \"http://example.com/path?a=b#fragment\")\"\\n        request = requests.Request(\\'GET\\',\\n            \"http://example.com/path?key=value#fragment\", params={\"a\": \"b\"}).\"prepare()\"\\n        \"self.assertEqual(request.url,\\n            \"http://example.com/path?key=value&a=b#fragment\")\"\\n\\n    def \"test_mixed_case_scheme_acceptable(self)\":\\n        s = \"requests.Session()\"\\n        s.proxies = \"getproxies()\"\\n        parts = \"urlparse(httpbin(\\'get\\')\")\\n        schemes = [\\'http://\\', \\'HTTP://\\', \\'hTTp://\\', \\'HttP://\\',\\n                   \\'https://\\', \\'HTTPS://\\', \\'hTTps://\\', \\'HttPs://\\']\\n        for scheme in schemes:\\n            url = scheme + parts.netloc + parts.path\\n            r = \"requests.Request(\\'GET\\', url)\"\\n            r = \"s.send(r.prepare()\")\\n            \"self.assertEqual(r.status_code, 200,\\n                             \"failed for scheme %s\" % scheme)\"\\n\\n    def \"test_HTTP_200_OK_GET_ALTERNATIVE(self)\":\\n        r = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\")\\n        s = \"requests.Session()\"\\n        s.proxies = \"getproxies()\"\\n\\n        r = \"s.send(r.prepare()\")\\n\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_302_ALLOW_REDIRECT_GET(self)\":\\n        r = \"requests.get(httpbin(\\'redirect\\', \\'1\\')\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    # def \"test_HTTP_302_ALLOW_REDIRECT_POST(self)\":\\n    #     r = \"requests.post(httpbin(\\'status\\', \\'302\\')\", data={\\'some\\': \\'data\\'})\\n    #     \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_200_OK_GET_WITH_PARAMS(self)\":\\n        heads = {\\'User-agent\\': \\'Mozilla/5.0\\'}\\n\\n        r = \"requests.get(httpbin(\\'user-agent\\')\", headers=heads)\\n\\n        \"self.assertTrue(heads[\\'User-agent\\'] in r.text)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self)\":\\n        heads = {\\'User-agent\\': \\'Mozilla/5.0\\'}\\n\\n        r = \"requests.get(httpbin(\\'get\\')\" + \\'?test=true\\', params={\\'q\\': \\'test\\'}, headers=heads)\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_set_cookie_on_301(self)\":\\n        s = \"requests.session()\"\\n        url = \"httpbin(\\'cookies/set?foo=bar\\')\"\\n        r = \"s.get(url)\"\\n        \"self.assertTrue(s.cookies[\\'foo\\'] == \\'bar\\')\"\\n\\n    def \"test_cookie_sent_on_redirect(self)\":\\n        s = \"requests.session()\"\\n        \"s.get(httpbin(\\'cookies/set?foo=bar\\')\")\\n        r = \"s.get(httpbin(\\'redirect/1\\')\")  # redirects to \"httpbin(\\'get\\')\"\\n        \"self.assertTrue(\"Cookie\" in r.json()\"[\"headers\"])\\n\\n    def \"test_cookie_removed_on_expire(self)\":\\n        s = \"requests.session()\"\\n        \"s.get(httpbin(\\'cookies/set?foo=bar\\')\")\\n        \"self.assertTrue(s.cookies[\\'foo\\'] == \\'bar\\')\"\\n        \"s.get(\\n            httpbin(\\'response-headers\\')\",\\n            params={\\n                \\'Set-Cookie\\':\\n                    \\'foo=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT\\'\\n            }\\n        )\\n        assert \\'foo\\' not in s.cookies\\n\\n    def \"test_cookie_quote_wrapped(self)\":\\n        s = \"requests.session()\"\\n        \"s.get(httpbin(\\'cookies/set?foo=\"bar:baz\"\\')\")\\n        \"self.assertTrue(s.cookies[\\'foo\\'] == \\'\"bar:baz\"\\')\"\\n\\n    def \"test_request_cookie_overrides_session_cookie(self)\":\\n        s = \"requests.session()\"\\n        s.cookies[\\'foo\\'] = \\'bar\\'\\n        r = \"s.get(httpbin(\\'cookies\\')\", cookies={\\'foo\\': \\'baz\\'})\\n        assert \"r.json()\"[\\'cookies\\'][\\'foo\\'] == \\'baz\\'\\n        # Session cookie should not be modified\\n        assert s.cookies[\\'foo\\'] == \\'bar\\'\\n\\n    def \"test_generic_cookiejar_works(self)\":\\n        cj = \"cookielib.CookieJar()\"\\n        cookiejar_from_dict({\\'foo\\': \\'bar\\'}, cj)\\n        s = \"requests.session()\"\\n        s.cookies = cj\\n        r = \"s.get(httpbin(\\'cookies\\')\")\\n        # Make sure the cookie was sent\\n        assert \"r.json()\"[\\'cookies\\'][\\'foo\\'] == \\'bar\\'\\n        # Make sure the session cj is still the custom one\\n        assert s.cookies is cj\\n\\n    def \"test_requests_in_history_are_not_overridden(self)\":\\n        resp = \"requests.get(httpbin(\\'redirect/3\\')\")\\n        urls = [r.url for r in resp.history]\\n        req_urls = [r.request.url for r in resp.history]\\n        \"self.assertEquals(urls, req_urls)\"\\n\\n    def \"test_user_agent_transfers(self)\":\\n\\n        heads = {\\n            \\'User-agent\\': \\'Mozilla/\"5.0 (github.com/kennethreitz/requests)\"\\'\\n        }\\n\\n        r = \"requests.get(httpbin(\\'user-agent\\')\", headers=heads)\\n        \"self.assertTrue(heads[\\'User-agent\\'] in r.text)\"\\n\\n        heads = {\\n            \\'user-agent\\': \\'Mozilla/\"5.0 (github.com/kennethreitz/requests)\"\\'\\n        }\\n\\n        r = \"requests.get(httpbin(\\'user-agent\\')\", headers=heads)\\n        \"self.assertTrue(heads[\\'user-agent\\'] in r.text)\"\\n\\n    def \"test_HTTP_200_OK_HEAD(self)\":\\n        r = \"requests.head(httpbin(\\'get\\')\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_200_OK_PUT(self)\":\\n        r = \"requests.put(httpbin(\\'put\\')\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self)\":\\n        auth = (\\'user\\', \\'pass\\')\\n        url = \"httpbin(\\'basic-auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n        s.auth = auth\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_basicauth_with_netrc(self)\":\\n        auth = (\\'user\\', \\'pass\\')\\n        wrong_auth = (\\'wronguser\\', \\'wrongpass\\')\\n        url = \"httpbin(\\'basic-auth\\', \\'user\\', \\'pass\\')\"\\n\\n        def \"get_netrc_auth_mock(url)\":\\n            return auth\\n        requests.sessions.get_netrc_auth = get_netrc_auth_mock\\n\\n        # Should use netrc and work.\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        # Given auth should override and fail.\\n        r = \"requests.get(url, auth=wrong_auth)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n\\n        # Should use netrc and work.\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        # Given auth should override and fail.\\n        s.auth = wrong_auth\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n    def \"test_DIGEST_HTTP_200_OK_GET(self)\":\\n\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n        s.auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_DIGEST_AUTH_RETURNS_COOKIE(self)\":\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        r = \"requests.get(url)\"\\n        assert r.cookies[\\'fake\\'] == \\'fake_value\\'\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        assert r.status_code == 200\\n\\n    def \"test_DIGEST_AUTH_SETS_SESSION_COOKIES(self)\":\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        s = \"requests.Session()\"\\n        \"s.get(url, auth=auth)\"\\n        assert s.cookies[\\'fake\\'] == \\'fake_value\\'\\n\\n    def \"test_DIGEST_STREAM(self)\":\\n\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth, stream=True)\"\\n        \"self.assertNotEqual(r.raw.read()\", b\\'\\')\\n\\n        r = \"requests.get(url, auth=auth, stream=False)\"\\n        \"self.assertEqual(r.raw.read()\", b\\'\\')\\n\\n\\n    def \"test_DIGESTAUTH_WRONG_HTTP_401_GET(self)\":\\n\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'wrongpass\\')\"\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n        s.auth = auth\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n    def \"test_POSTBIN_GET_POST_FILES(self)\":\\n\\n        url = \"httpbin(\\'post\\')\"\\n        post1 = \"requests.post(url)\".\"raise_for_status()\"\\n\\n        post1 = requests.post(url, data={\\'some\\': \\'data\\'})\\n        \"self.assertEqual(post1.status_code, 200)\"\\n\\n        with \"open(\\'requirements.txt\\')\" as f:\\n            post2 = requests.post(url, files={\\'some\\': f})\\n        \"self.assertEqual(post2.status_code, 200)\"\\n\\n        post4 = requests.post(url, data=\\'[{\"some\": \"json\"}]\\')\\n        \"self.assertEqual(post4.status_code, 200)\"\\n\\n        try:\\n            \"requests.post(url, files=[\\'bad file data\\'])\"\\n        except ValueError:\\n            pass\\n\\n    def \"test_POSTBIN_GET_POST_FILES_WITH_DATA(self)\":\\n\\n        url = \"httpbin(\\'post\\')\"\\n        post1 = \"requests.post(url)\".\"raise_for_status()\"\\n\\n        post1 = requests.post(url, data={\\'some\\': \\'data\\'})\\n        \"self.assertEqual(post1.status_code, 200)\"\\n\\n        with \"open(\\'requirements.txt\\')\" as f:\\n            post2 = requests.post(url, data={\\'some\\': \\'data\\'}, files={\\'some\\': f})\\n        \"self.assertEqual(post2.status_code, 200)\"\\n\\n        post4 = requests.post(url, data=\\'[{\"some\": \"json\"}]\\')\\n        \"self.assertEqual(post4.status_code, 200)\"\\n\\n        try:\\n            \"requests.post(url, files=[\\'bad file data\\'])\"\\n        except ValueError:\\n            pass\\n\\n    def \"test_request_ok_set(self)\":\\n        r = \"requests.get(httpbin(\\'status\\', \\'404\\')\")\\n        \"self.assertEqual(r.ok, False)\"\\n\\n    def \"test_status_raising(self)\":\\n        r = \"requests.get(httpbin(\\'status\\', \\'404\\')\")\\n        \"self.assertRaises(requests.exceptions.HTTPError, r.raise_for_status)\"\\n\\n        r = \"requests.get(httpbin(\\'status\\', \\'500\\')\")\\n        \"self.assertFalse(r.ok)\"\\n\\n    def \"test_decompress_gzip(self)\":\\n        r = \"requests.get(httpbin(\\'gzip\\')\")\\n        \"r.content.decode(\\'ascii\\')\"\\n\\n    def \"test_unicode_get(self)\":\\n        url = \"httpbin(\\'/get\\')\"\\n        requests.get(url, params={\\'foo\\': \\'f\\xc3\\xb8\\xc3\\xb8\\'})\\n        requests.get(url, params={\\'f\\xc3\\xb8\\xc3\\xb8\\': \\'f\\xc3\\xb8\\xc3\\xb8\\'})\\n        requests.get(url, params={\\'f\\xc3\\xb8\\xc3\\xb8\\': \\'f\\xc3\\xb8\\xc3\\xb8\\'})\\n        requests.get(url, params={\\'foo\\': \\'foo\\'})\\n        \"requests.get(httpbin(\\'\\xc3\\xb8\\')\", params={\\'foo\\': \\'foo\\'})\\n\\n    def \"test_unicode_header_name(self)\":\\n        \"requests.put(httpbin(\\'put\\')\", headers={\"str(\\'Content-Type\\')\": \\'application/octet-stream\\'}, data=\\'\\\\xff\\') # compat.str is unicode.\\n\\n    def \"test_urlencoded_get_query_multivalued_param(self)\":\\n\\n        r = \"requests.get(httpbin(\\'get\\')\", params=\"dict(test=[\\'foo\\', \\'baz\\'])\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n        \"self.assertEqual(r.url, httpbin(\\'get?test=foo&test=baz\\')\")\\n\\n    def \"test_different_encodings_dont_break_post(self)\":\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': json.dumps({\\'a\\': 123})},\\n                          params={\\'blah\\': \\'asdf1234\\'},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_unicode_multipart_post(self)\":\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': u\\'\\xc3\\xabl\\xc3\\xafxr\\'},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': u\\'\\xc3\\xabl\\xc3\\xafxr\\'.\"encode(\\'utf-8\\')\"},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': \\'elixr\\'},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': \\'elixr\\'.\"encode(\\'utf-8\\')\"},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_unicode_multipart_post_fieldnames(self)\":\\n        filename = \"os.path.splitext(__file__)\"[0] + \\'.py\\'\\n        r = \"requests.Request(method=\\'POST\\',\\n                             url=httpbin(\\'post\\')\",\\n                             data={\\'stuff\\'.\"encode(\\'utf-8\\')\": \\'elixr\\'},\\n                             files={\\'file\\': (\\'test_requests.py\\',\\n                                             \"open(filename, \\'rb\\')\")})\\n        prep = \"r.prepare()\"\\n        \"self.assertTrue(b\\'name=\"stuff\"\\' in prep.body)\"\\n        \"self.assertFalse(b\\'name=\"b\\\\\\'stuff\\\\\\'\"\\' in prep.body)\"\\n\\n    def \"test_custom_content_type(self)\":\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': json.dumps({\\'a\\': 123})},\\n                          files={\\'file1\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\"),\\n                                 \\'file2\\': (\\'test_requests\\', \"open(__file__, \\'rb\\')\",\\n                                           \\'text/py-content-type\\')})\\n        \"self.assertEqual(r.status_code, 200)\"\\n        \"self.assertTrue(b\"text/py-content-type\" in r.request.body)\"\\n\\n    def \"test_hook_receives_request_arguments(self)\":\\n        def \"hook(resp, **kwargs)\":\\n            assert resp is not None\\n            assert kwargs != {}\\n\\n        requests.Request(\\'GET\\', HTTPBIN, hooks={\\'response\\': hook})\\n\\n    def \"test_prepared_request_hook(self)\":\\n        def \"hook(resp, **kwargs)\":\\n            resp.hook_working = True\\n            return resp\\n\\n        req = requests.Request(\\'GET\\', HTTPBIN, hooks={\\'response\\': hook})\\n        prep = \"req.prepare()\"\\n\\n        s = \"requests.Session()\"\\n        s.proxies = \"getproxies()\"\\n        resp = \"s.send(prep)\"\\n\\n        \"self.assertTrue(hasattr(resp, \\'hook_working\\')\")\\n\\n    def \"test_prepared_from_session(self)\":\\n        class \"DummyAuth(requests.auth.AuthBase)\":\\n            def \"__call__(self, r)\":\\n                r.headers[\\'Dummy-Auth-Test\\'] = \\'dummy-auth-test-ok\\'\\n                return r\\n\\n        req = \"requests.Request(\\'GET\\', httpbin(\\'headers\\')\")\\n        \"self.assertEqual(req.auth, None)\"\\n\\n        s = \"requests.Session()\"\\n        s.auth = \"DummyAuth()\"\\n\\n        prep = \"s.prepare_request(req)\"\\n        resp = \"s.send(prep)\"\\n\\n        \"self.assertTrue(resp.json()\"[\\'headers\\'][\\'Dummy-Auth-Test\\'], \\'dummy-auth-test-ok\\')\\n\\n    def \"test_links(self)\":\\n        r = \"requests.Response()\"\\n        r.headers = {\\n            \\'cache-control\\': \\'public, max-age=60, s-maxage=60\\',\\n            \\'connection\\': \\'keep-alive\\',\\n            \\'content-encoding\\': \\'gzip\\',\\n            \\'content-type\\': \\'application/json; charset=utf-8\\',\\n            \\'date\\': \\'Sat, 26 Jan 2013 16:47:56 GMT\\',\\n            \\'etag\\': \\'\"6ff6a73c0e446c1f61614769e3ceb778\"\\',\\n            \\'last-modified\\': \\'Sat, 26 Jan 2013 16:22:39 GMT\\',\\n            \\'link\\': (\\'\"<https://api.github.com/users/kennethreitz/repos?\\'\\n                     \\'page=2&per_page=10>\"; rel=\"next\", \"<https://api.github.\\'\\n                     \\'com/users/kennethreitz/repos?page=7&per_page=10>\"; \\'\\n                     \\' rel=\"last\"\\'),\\n            \\'server\\': \\'GitHub.com\\',\\n            \\'status\\': \\'200 OK\\',\\n            \\'vary\\': \\'Accept\\',\\n            \\'x-content-type-options\\': \\'nosniff\\',\\n            \\'x-github-media-type\\': \\'github.beta\\',\\n            \\'x-ratelimit-limit\\': \\'60\\',\\n            \\'x-ratelimit-remaining\\': \\'57\\'\\n        }\\n        \"self.assertEqual(r.links[\\'next\\'][\\'rel\\'], \\'next\\')\"\\n\\n    def \"test_cookie_parameters(self)\":\\n        key = \\'some_cookie\\'\\n        value = \\'some_value\\'\\n        secure = True\\n        domain = \\'test.com\\'\\n        rest = {\\'HttpOnly\\': True}\\n\\n        jar = \"requests.cookies.RequestsCookieJar()\"\\n        \"jar.set(key, value, secure=secure, domain=domain, rest=rest)\"\\n\\n        \"self.assertEqual(len(jar)\", 1)\\n        \"self.assertTrue(\\'some_cookie\\' in jar)\"\\n\\n        cookie = \"list(jar)\"[0]\\n        \"self.assertEqual(cookie.secure, secure)\"\\n        \"self.assertEqual(cookie.domain, domain)\"\\n        \"self.assertEqual(cookie._rest[\\'HttpOnly\\'], rest[\\'HttpOnly\\'])\"\\n\\n    def \"test_time_elapsed_blank(self)\":\\n        r = \"requests.get(httpbin(\\'get\\')\")\\n        td = r.elapsed\\n        total_seconds = ((td.microseconds + (td.seconds + td.days * 24 * 3600)\\n                         * 10**6) / 10**6)\\n        \"self.assertTrue(total_seconds > 0.0)\"\\n\\n    def \"test_response_is_iterable(self)\":\\n        r = \"requests.Response()\"\\n        io = \"StringIO.StringIO(\\'abc\\')\"\\n        read_ = io.read\\n\\n        def \"read_mock(amt, decode_content=None)\":\\n            return \"read_(amt)\"\\n        \"setattr(io, \\'read\\', read_mock)\"\\n        r.raw = io\\n        \"self.assertTrue(next(iter(r)\"))\\n        \"io.close()\"\\n\\n    def \"test_get_auth_from_url(self)\":\\n        url = \\'http://user:pass@complex.url.com/path?query=yes\\'\\n        \"self.assertEqual((\\'user\\', \\'pass\\')\",\\n                         \"requests.utils.get_auth_from_url(url)\")\\n\\n    def \"test_cannot_send_unprepared_requests(self)\":\\n        r = \"requests.Request(url=HTTPBIN)\"\\n        \"self.assertRaises(ValueError, requests.Session()\".send, r)\\n\\n    def \"test_http_error(self)\":\\n        error = \"requests.exceptions.HTTPError()\"\\n        \"self.assertEqual(error.response, None)\"\\n        response = \"requests.Response()\"\\n        error = \"requests.exceptions.HTTPError(response=response)\"\\n        \"self.assertEqual(error.response, response)\"\\n        error = \"requests.exceptions.HTTPError(\\'message\\', response=response)\"\\n        \"self.assertEqual(str(error)\", \\'message\\')\\n        \"self.assertEqual(error.response, response)\"\\n\\n    def \"test_session_pickling(self)\":\\n        r = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\")\\n        s = \"requests.Session()\"\\n\\n        s = \"pickle.loads(pickle.dumps(s)\")\\n        s.proxies = \"getproxies()\"\\n\\n        r = \"s.send(r.prepare()\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_fixes_1329(self)\":\\n        \"\"\"\\n        Ensure that header updates are done case-insensitively.\\n        \"\"\"\\n        s = \"requests.Session()\"\\n        s.headers.update({\\'ACCEPT\\': \\'BOGUS\\'})\\n        s.headers.update({\\'accept\\': \\'application/json\\'})\\n        r = \"s.get(httpbin(\\'get\\')\")\\n        headers = r.request.headers\\n        \"self.assertEqual(\\n            headers[\\'accept\\'],\\n            \\'application/json\\'\\n        )\"\\n        \"self.assertEqual(\\n            headers[\\'Accept\\'],\\n            \\'application/json\\'\\n        )\"\\n        \"self.assertEqual(\\n            headers[\\'ACCEPT\\'],\\n            \\'application/json\\'\\n        )\"\\n\\n    def \"test_uppercase_scheme_redirect(self)\":\\n        parts = \"urlparse(httpbin(\\'html\\')\")\\n        url = \"HTTP://\" + parts.netloc + parts.path\\n        r = \"requests.get(httpbin(\\'redirect-to\\')\", params={\\'url\\': url})\\n        \"self.assertEqual(r.status_code, 200)\"\\n        \"self.assertEqual(r.url.lower()\", \"url.lower()\")\\n\\n    def \"test_transport_adapter_ordering(self)\":\\n        s = \"requests.Session()\"\\n        order = [\\'https://\\', \\'http://\\']\\n        \"self.assertEqual(order, list(s.adapters)\")\\n        \"s.mount(\\'http://git\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://github\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://github.com\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://github.com/about/\\', HTTPAdapter()\")\\n        order = [\\n            \\'http://github.com/about/\\',\\n            \\'http://github.com\\',\\n            \\'http://github\\',\\n            \\'http://git\\',\\n            \\'https://\\',\\n            \\'http://\\',\\n        ]\\n        \"self.assertEqual(order, list(s.adapters)\")\\n        \"s.mount(\\'http://gittip\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://gittip.com\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://gittip.com/about/\\', HTTPAdapter()\")\\n        order = [\\n            \\'http://github.com/about/\\',\\n            \\'http://gittip.com/about/\\',\\n            \\'http://github.com\\',\\n            \\'http://gittip.com\\',\\n            \\'http://github\\',\\n            \\'http://gittip\\',\\n            \\'http://git\\',\\n            \\'https://\\',\\n            \\'http://\\',\\n        ]\\n        \"self.assertEqual(order, list(s.adapters)\")\\n        s2 = \"requests.Session()\"\\n        s2.adapters = {\\'http://\\': \"HTTPAdapter()\"}\\n        \"s2.mount(\\'https://\\', HTTPAdapter()\")\\n        \"self.assertTrue(\\'http://\\' in s2.adapters)\"\\n        \"self.assertTrue(\\'https://\\' in s2.adapters)\"\\n\\n    def \"test_header_remove_is_case_insensitive(self)\":\\n        # From issue #1321\\n        s = \"requests.Session()\"\\n        s.headers[\\'foo\\'] = \\'bar\\'\\n        r = \"s.get(httpbin(\\'get\\')\", headers={\\'FOO\\': None})\\n        assert \\'foo\\' not in r.request.headers\\n\\n    def \"test_params_are_merged_case_sensitive(self)\":\\n        s = \"requests.Session()\"\\n        s.params[\\'foo\\'] = \\'bar\\'\\n        r = \"s.get(httpbin(\\'get\\')\", params={\\'FOO\\': \\'bar\\'})\\n        assert \"r.json()\"[\\'args\\'] == {\\'foo\\': \\'bar\\', \\'FOO\\': \\'bar\\'}\\n\\n\\n    def \"test_long_authinfo_in_url(self)\":\\n        url = \\'http://{0}:{1}@{2}:9000/path?query#frag\\'.\"format(\\n            \\'E8A3BE87-9E3F-4620-8858-95478E385B5B\\',\\n            \\'EA770032-DA4D-4D84-8CE9-29C6D910BF1E\\',\\n            \\'exactly-------------sixty-----------three------------characters\\',\\n        )\"\\n        r = \"requests.Request(\\'GET\\', url)\".\"prepare()\"\\n        \"self.assertEqual(r.url, url)\"\\n\\n    def \"test_header_keys_are_native(self)\":\\n        headers = {u\\'unicode\\': \\'blah\\', \\'byte\\'.\"encode(\\'ascii\\')\": \\'blah\\'}\\n        r = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\", headers=headers)\\n        p = \"r.prepare()\"\\n\\n        # This is testing that they are builtin strings. A bit weird, but there\\n        # we go.\\n        \"self.assertTrue(\\'unicode\\' in p.headers.keys()\")\\n        \"self.assertTrue(\\'byte\\' in p.headers.keys()\")\\n\\n    def \"test_can_send_nonstring_objects_with_files(self)\":\\n        data = {\\'a\\': 0.0}\\n        files = {\\'b\\': \\'foo\\'}\\n        r = \"requests.Request(\\'POST\\', httpbin(\\'post\\')\", data=data, files=files)\\n        p = \"r.prepare()\"\\n\\n        \"self.assertTrue(\\'multipart/form-data\\' in p.headers[\\'Content-Type\\'])\"\\n\\n\\nclass \"TestCaseInsensitiveDict(unittest.TestCase)\":\\n\\n    def \"test_mapping_init(self)\":\\n        cid = CaseInsensitiveDict({\\'Foo\\': \\'foo\\',\\'BAr\\': \\'bar\\'})\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertTrue(\\'foo\\' in cid)\"\\n        \"self.assertTrue(\\'bar\\' in cid)\"\\n\\n    def \"test_iterable_init(self)\":\\n        cid = \"CaseInsensitiveDict([(\\'Foo\\', \\'foo\\')\", (\\'BAr\\', \\'bar\\')])\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertTrue(\\'foo\\' in cid)\"\\n        \"self.assertTrue(\\'bar\\' in cid)\"\\n\\n    def \"test_kwargs_init(self)\":\\n        cid = \"CaseInsensitiveDict(FOO=\\'foo\\', BAr=\\'bar\\')\"\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertTrue(\\'foo\\' in cid)\"\\n        \"self.assertTrue(\\'bar\\' in cid)\"\\n\\n    def \"test_docstring_example(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'Accept\\'] = \\'application/json\\'\\n        \"self.assertEqual(cid[\\'aCCEPT\\'], \\'application/json\\')\"\\n        \"self.assertEqual(list(cid)\", [\\'Accept\\'])\\n\\n    def \"test_len(self)\":\\n        cid = CaseInsensitiveDict({\\'a\\': \\'a\\', \\'b\\': \\'b\\'})\\n        cid[\\'A\\'] = \\'a\\'\\n        \"self.assertEqual(len(cid)\", 2)\\n\\n    def \"test_getitem(self)\":\\n        cid = CaseInsensitiveDict({\\'Spam\\': \\'blueval\\'})\\n        \"self.assertEqual(cid[\\'spam\\'], \\'blueval\\')\"\\n        \"self.assertEqual(cid[\\'SPAM\\'], \\'blueval\\')\"\\n\\n    def \"test_fixes_649(self)\":\\n        \"\"\"__setitem__ should behave case-insensitively.\"\"\"\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'spam\\'] = \\'oneval\\'\\n        cid[\\'Spam\\'] = \\'twoval\\'\\n        cid[\\'sPAM\\'] = \\'redval\\'\\n        cid[\\'SPAM\\'] = \\'blueval\\'\\n        \"self.assertEqual(cid[\\'spam\\'], \\'blueval\\')\"\\n        \"self.assertEqual(cid[\\'SPAM\\'], \\'blueval\\')\"\\n        \"self.assertEqual(list(cid.keys()\"), [\\'SPAM\\'])\\n\\n    def \"test_delitem(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'Spam\\'] = \\'someval\\'\\n        del cid[\\'sPam\\']\\n        \"self.assertFalse(\\'spam\\' in cid)\"\\n        \"self.assertEqual(len(cid)\", 0)\\n\\n    def \"test_contains(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'Spam\\'] = \\'someval\\'\\n        \"self.assertTrue(\\'Spam\\' in cid)\"\\n        \"self.assertTrue(\\'spam\\' in cid)\"\\n        \"self.assertTrue(\\'SPAM\\' in cid)\"\\n        \"self.assertTrue(\\'sPam\\' in cid)\"\\n        \"self.assertFalse(\\'notspam\\' in cid)\"\\n\\n    def \"test_get(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'spam\\'] = \\'oneval\\'\\n        cid[\\'SPAM\\'] = \\'blueval\\'\\n        \"self.assertEqual(cid.get(\\'spam\\')\", \\'blueval\\')\\n        \"self.assertEqual(cid.get(\\'SPAM\\')\", \\'blueval\\')\\n        \"self.assertEqual(cid.get(\\'sPam\\')\", \\'blueval\\')\\n        \"self.assertEqual(cid.get(\\'notspam\\', \\'default\\')\", \\'default\\')\\n\\n    def \"test_update(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'spam\\'] = \\'blueval\\'\\n        cid.update({\\'sPam\\': \\'notblueval\\'})\\n        \"self.assertEqual(cid[\\'spam\\'], \\'notblueval\\')\"\\n        cid = CaseInsensitiveDict({\\'Foo\\': \\'foo\\',\\'BAr\\': \\'bar\\'})\\n        cid.update({\\'fOO\\': \\'anotherfoo\\', \\'bAR\\': \\'anotherbar\\'})\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertEqual(cid[\\'foo\\'], \\'anotherfoo\\')\"\\n        \"self.assertEqual(cid[\\'bar\\'], \\'anotherbar\\')\"\\n\\n    def \"test_update_retains_unchanged(self)\":\\n        cid = CaseInsensitiveDict({\\'foo\\': \\'foo\\', \\'bar\\': \\'bar\\'})\\n        cid.update({\\'foo\\': \\'newfoo\\'})\\n        \"self.assertEquals(cid[\\'bar\\'], \\'bar\\')\"\\n\\n    def \"test_iter(self)\":\\n        cid = CaseInsensitiveDict({\\'Spam\\': \\'spam\\', \\'Eggs\\': \\'eggs\\'})\\n        keys = \"frozenset([\\'Spam\\', \\'Eggs\\'])\"\\n        \"self.assertEqual(frozenset(iter(cid)\"), keys)\\n\\n    def \"test_equality(self)\":\\n        cid = CaseInsensitiveDict({\\'SPAM\\': \\'blueval\\', \\'Eggs\\': \\'redval\\'})\\n        othercid = CaseInsensitiveDict({\\'spam\\': \\'blueval\\', \\'eggs\\': \\'redval\\'})\\n        \"self.assertEqual(cid, othercid)\"\\n        del othercid[\\'spam\\']\\n        \"self.assertNotEqual(cid, othercid)\"\\n        self.assertEqual(cid, {\\'spam\\': \\'blueval\\', \\'eggs\\': \\'redval\\'})\\n\\n    def \"test_setdefault(self)\":\\n        cid = CaseInsensitiveDict({\\'Spam\\': \\'blueval\\'})\\n        \"self.assertEqual(\\n            cid.setdefault(\\'spam\\', \\'notblueval\\')\",\\n            \\'blueval\\'\\n        )\\n        \"self.assertEqual(\\n            cid.setdefault(\\'notspam\\', \\'notblueval\\')\",\\n            \\'notblueval\\'\\n        )\\n\\n    def \"test_lower_items(self)\":\\n        cid = CaseInsensitiveDict({\\n            \\'Accept\\': \\'application/json\\',\\n            \\'user-Agent\\': \\'requests\\',\\n        })\\n        keyset = \"frozenset(lowerkey for lowerkey, v in cid.lower_items()\")\\n        lowerkeyset = \"frozenset([\\'accept\\', \\'user-agent\\'])\"\\n        \"self.assertEqual(keyset, lowerkeyset)\"\\n\\n    def \"test_preserve_key_case(self)\":\\n        cid = CaseInsensitiveDict({\\n            \\'Accept\\': \\'application/json\\',\\n            \\'user-Agent\\': \\'requests\\',\\n        })\\n        keyset = \"frozenset([\\'Accept\\', \\'user-Agent\\'])\"\\n        \"self.assertEqual(frozenset(i[0] for i in cid.items()\"), keyset)\\n        \"self.assertEqual(frozenset(cid.keys()\"), keyset)\\n        \"self.assertEqual(frozenset(cid)\", keyset)\\n\\n    def \"test_preserve_last_key_case(self)\":\\n        cid = CaseInsensitiveDict({\\n            \\'Accept\\': \\'application/json\\',\\n            \\'user-Agent\\': \\'requests\\',\\n        })\\n        cid.update({\\'ACCEPT\\': \\'application/json\\'})\\n        cid[\\'USER-AGENT\\'] = \\'requests\\'\\n        keyset = \"frozenset([\\'ACCEPT\\', \\'USER-AGENT\\'])\"\\n        \"self.assertEqual(frozenset(i[0] for i in cid.items()\"), keyset)\\n        \"self.assertEqual(frozenset(cid.keys()\"), keyset)\\n        \"self.assertEqual(frozenset(cid)\", keyset)\\n\\n\\nif __name__ == \\'__main__\\':\\n    \"unittest.main()\"\\n\\r\\n--3dfe5355ca7a4a2fbb026ce526e4ae16--\\r\\n'", "multipart/form-data; boundary=3dfe5355ca7a4a2fbb026ce526e4ae16"]}, "name": "_encode_files"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"files": {"b": "str"}, "data": {"a": "float"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "list of 2 str"}, "values": {"inputs": {"self": {}, "args": {"files": {"b": "foo"}, "data": {"a": 0.0}}, "kwargs": {}}, "return": ["b'--1133d2402ad14109ac5d906ff793e44f\\r\\nContent-Disposition: form-data; name=\"a\"\\r\\n\\r\\n0.0\\r\\n--1133d2402ad14109ac5d906ff793e44f\\r\\nContent-Disposition: form-data; name=\"b\"; filename=\"b\"\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\nfoo\\r\\n--1133d2402ad14109ac5d906ff793e44f--\\r\\n'", "multipart/form-data; boundary=1133d2402ad14109ac5d906ff793e44f"]}, "name": "_encode_files"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"files": {"file": "list of different types containing 2 elements ['str', 'in ground truth values, it is an empty dict']"}, "data": {"b'stuff'": "str"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "list of 2 str"}, "values": {"inputs": {"self": {}, "args": {"files": {"file": ["test_requests.py", {}]}, "data": {"b'stuff'": "elixr"}}, "kwargs": {}}, "return": ["b'--4e2df906f44246c8a3fb560c4722ef9e\\r\\nContent-Disposition: form-data; name=\"stuff\"\\r\\n\\r\\nelixr\\r\\n--4e2df906f44246c8a3fb560c4722ef9e\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"test_requests.py\"\\r\\nContent-Type: text/x-python\\r\\n\\r\\n#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\n\"\"\"Tests for Requests.\"\"\"\\n\\nfrom __future__ import division\\nimport json\\nimport os\\nimport unittest\\nimport pickle\\n\\nimport requests\\nfrom requests.auth import HTTPDigestAuth\\nfrom requests.adapters import HTTPAdapter\\nfrom requests.compat import str, cookielib, getproxies, urljoin, urlparse\\nfrom requests.cookies import cookiejar_from_dict\\nfrom requests.exceptions import InvalidURL, MissingSchema\\nfrom requests.structures import CaseInsensitiveDict\\n\\ntry:\\n    import StringIO\\nexcept ImportError:\\n    import io as StringIO\\n\\nHTTPBIN = \"os.environ.get(\\'HTTPBIN_URL\\', \\'http://httpbin.org/\\')\"\\n# Issue #1483: Make sure the URL always has a trailing slash\\nHTTPBIN = \"HTTPBIN.rstrip(\\'/\\')\" + \\'/\\'\\n\\n\\ndef \"httpbin(*suffix)\":\\n    \"\"\"Returns url for HTTPBIN resource.\"\"\"\\n    return \"urljoin(HTTPBIN, \\'/\\'.join(suffix)\")\\n\\n\\nclass \"RequestsTestCase(unittest.TestCase)\":\\n\\n    _multiprocess_can_split_ = True\\n\\n    def \"setUp(self)\":\\n        \"\"\"Create simple data set with headers.\"\"\"\\n        pass\\n\\n    def \"tearDown(self)\":\\n        \"\"\"Teardown.\"\"\"\\n        pass\\n\\n    def \"test_entry_points(self)\":\\n\\n        requests.session\\n        \"requests.session()\".get\\n        \"requests.session()\".head\\n        requests.get\\n        requests.head\\n        requests.put\\n        requests.patch\\n        requests.post\\n\\n    def \"test_invalid_url(self)\":\\n        \"self.assertRaises(MissingSchema, requests.get, \\'hiwpefhipowhefopw\\')\"\\n        \"self.assertRaises(InvalidURL, requests.get, \\'http://\\')\"\\n\\n    def \"test_basic_building(self)\":\\n        req = \"requests.Request()\"\\n        req.url = \\'http://kennethreitz.org/\\'\\n        req.data = {\\'life\\': \\'42\\'}\\n\\n        pr = \"req.prepare()\"\\n        assert pr.url == req.url\\n        assert pr.body == \\'life=42\\'\\n\\n    def \"test_no_content_length(self)\":\\n        get_req = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\").\"prepare()\"\\n        \"self.assertTrue(\\'Content-Length\\' not in get_req.headers)\"\\n        head_req = \"requests.Request(\\'HEAD\\', httpbin(\\'head\\')\").\"prepare()\"\\n        \"self.assertTrue(\\'Content-Length\\' not in head_req.headers)\"\\n\\n    def \"test_path_is_not_double_encoded(self)\":\\n        request = \"requests.Request(\\'GET\\', \"http://0.0.0.0/get/test case\")\".\"prepare()\"\\n\\n        \"self.assertEqual(request.path_url, \"/get/test%20case\")\"\\n\\n    def \"test_params_are_added_before_fragment(self)\":\\n        request = requests.Request(\\'GET\\',\\n            \"http://example.com/path#fragment\", params={\"a\": \"b\"}).\"prepare()\"\\n        \"self.assertEqual(request.url,\\n            \"http://example.com/path?a=b#fragment\")\"\\n        request = requests.Request(\\'GET\\',\\n            \"http://example.com/path?key=value#fragment\", params={\"a\": \"b\"}).\"prepare()\"\\n        \"self.assertEqual(request.url,\\n            \"http://example.com/path?key=value&a=b#fragment\")\"\\n\\n    def \"test_mixed_case_scheme_acceptable(self)\":\\n        s = \"requests.Session()\"\\n        s.proxies = \"getproxies()\"\\n        parts = \"urlparse(httpbin(\\'get\\')\")\\n        schemes = [\\'http://\\', \\'HTTP://\\', \\'hTTp://\\', \\'HttP://\\',\\n                   \\'https://\\', \\'HTTPS://\\', \\'hTTps://\\', \\'HttPs://\\']\\n        for scheme in schemes:\\n            url = scheme + parts.netloc + parts.path\\n            r = \"requests.Request(\\'GET\\', url)\"\\n            r = \"s.send(r.prepare()\")\\n            \"self.assertEqual(r.status_code, 200,\\n                             \"failed for scheme %s\" % scheme)\"\\n\\n    def \"test_HTTP_200_OK_GET_ALTERNATIVE(self)\":\\n        r = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\")\\n        s = \"requests.Session()\"\\n        s.proxies = \"getproxies()\"\\n\\n        r = \"s.send(r.prepare()\")\\n\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_302_ALLOW_REDIRECT_GET(self)\":\\n        r = \"requests.get(httpbin(\\'redirect\\', \\'1\\')\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    # def \"test_HTTP_302_ALLOW_REDIRECT_POST(self)\":\\n    #     r = \"requests.post(httpbin(\\'status\\', \\'302\\')\", data={\\'some\\': \\'data\\'})\\n    #     \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_200_OK_GET_WITH_PARAMS(self)\":\\n        heads = {\\'User-agent\\': \\'Mozilla/5.0\\'}\\n\\n        r = \"requests.get(httpbin(\\'user-agent\\')\", headers=heads)\\n\\n        \"self.assertTrue(heads[\\'User-agent\\'] in r.text)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self)\":\\n        heads = {\\'User-agent\\': \\'Mozilla/5.0\\'}\\n\\n        r = \"requests.get(httpbin(\\'get\\')\" + \\'?test=true\\', params={\\'q\\': \\'test\\'}, headers=heads)\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_set_cookie_on_301(self)\":\\n        s = \"requests.session()\"\\n        url = \"httpbin(\\'cookies/set?foo=bar\\')\"\\n        r = \"s.get(url)\"\\n        \"self.assertTrue(s.cookies[\\'foo\\'] == \\'bar\\')\"\\n\\n    def \"test_cookie_sent_on_redirect(self)\":\\n        s = \"requests.session()\"\\n        \"s.get(httpbin(\\'cookies/set?foo=bar\\')\")\\n        r = \"s.get(httpbin(\\'redirect/1\\')\")  # redirects to \"httpbin(\\'get\\')\"\\n        \"self.assertTrue(\"Cookie\" in r.json()\"[\"headers\"])\\n\\n    def \"test_cookie_removed_on_expire(self)\":\\n        s = \"requests.session()\"\\n        \"s.get(httpbin(\\'cookies/set?foo=bar\\')\")\\n        \"self.assertTrue(s.cookies[\\'foo\\'] == \\'bar\\')\"\\n        \"s.get(\\n            httpbin(\\'response-headers\\')\",\\n            params={\\n                \\'Set-Cookie\\':\\n                    \\'foo=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT\\'\\n            }\\n        )\\n        assert \\'foo\\' not in s.cookies\\n\\n    def \"test_cookie_quote_wrapped(self)\":\\n        s = \"requests.session()\"\\n        \"s.get(httpbin(\\'cookies/set?foo=\"bar:baz\"\\')\")\\n        \"self.assertTrue(s.cookies[\\'foo\\'] == \\'\"bar:baz\"\\')\"\\n\\n    def \"test_request_cookie_overrides_session_cookie(self)\":\\n        s = \"requests.session()\"\\n        s.cookies[\\'foo\\'] = \\'bar\\'\\n        r = \"s.get(httpbin(\\'cookies\\')\", cookies={\\'foo\\': \\'baz\\'})\\n        assert \"r.json()\"[\\'cookies\\'][\\'foo\\'] == \\'baz\\'\\n        # Session cookie should not be modified\\n        assert s.cookies[\\'foo\\'] == \\'bar\\'\\n\\n    def \"test_generic_cookiejar_works(self)\":\\n        cj = \"cookielib.CookieJar()\"\\n        cookiejar_from_dict({\\'foo\\': \\'bar\\'}, cj)\\n        s = \"requests.session()\"\\n        s.cookies = cj\\n        r = \"s.get(httpbin(\\'cookies\\')\")\\n        # Make sure the cookie was sent\\n        assert \"r.json()\"[\\'cookies\\'][\\'foo\\'] == \\'bar\\'\\n        # Make sure the session cj is still the custom one\\n        assert s.cookies is cj\\n\\n    def \"test_requests_in_history_are_not_overridden(self)\":\\n        resp = \"requests.get(httpbin(\\'redirect/3\\')\")\\n        urls = [r.url for r in resp.history]\\n        req_urls = [r.request.url for r in resp.history]\\n        \"self.assertEquals(urls, req_urls)\"\\n\\n    def \"test_user_agent_transfers(self)\":\\n\\n        heads = {\\n            \\'User-agent\\': \\'Mozilla/\"5.0 (github.com/kennethreitz/requests)\"\\'\\n        }\\n\\n        r = \"requests.get(httpbin(\\'user-agent\\')\", headers=heads)\\n        \"self.assertTrue(heads[\\'User-agent\\'] in r.text)\"\\n\\n        heads = {\\n            \\'user-agent\\': \\'Mozilla/\"5.0 (github.com/kennethreitz/requests)\"\\'\\n        }\\n\\n        r = \"requests.get(httpbin(\\'user-agent\\')\", headers=heads)\\n        \"self.assertTrue(heads[\\'user-agent\\'] in r.text)\"\\n\\n    def \"test_HTTP_200_OK_HEAD(self)\":\\n        r = \"requests.head(httpbin(\\'get\\')\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_HTTP_200_OK_PUT(self)\":\\n        r = \"requests.put(httpbin(\\'put\\')\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self)\":\\n        auth = (\\'user\\', \\'pass\\')\\n        url = \"httpbin(\\'basic-auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n        s.auth = auth\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_basicauth_with_netrc(self)\":\\n        auth = (\\'user\\', \\'pass\\')\\n        wrong_auth = (\\'wronguser\\', \\'wrongpass\\')\\n        url = \"httpbin(\\'basic-auth\\', \\'user\\', \\'pass\\')\"\\n\\n        def \"get_netrc_auth_mock(url)\":\\n            return auth\\n        requests.sessions.get_netrc_auth = get_netrc_auth_mock\\n\\n        # Should use netrc and work.\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        # Given auth should override and fail.\\n        r = \"requests.get(url, auth=wrong_auth)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n\\n        # Should use netrc and work.\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        # Given auth should override and fail.\\n        s.auth = wrong_auth\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n    def \"test_DIGEST_HTTP_200_OK_GET(self)\":\\n\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n        s.auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_DIGEST_AUTH_RETURNS_COOKIE(self)\":\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        r = \"requests.get(url)\"\\n        assert r.cookies[\\'fake\\'] == \\'fake_value\\'\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        assert r.status_code == 200\\n\\n    def \"test_DIGEST_AUTH_SETS_SESSION_COOKIES(self)\":\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        s = \"requests.Session()\"\\n        \"s.get(url, auth=auth)\"\\n        assert s.cookies[\\'fake\\'] == \\'fake_value\\'\\n\\n    def \"test_DIGEST_STREAM(self)\":\\n\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'pass\\')\"\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth, stream=True)\"\\n        \"self.assertNotEqual(r.raw.read()\", b\\'\\')\\n\\n        r = \"requests.get(url, auth=auth, stream=False)\"\\n        \"self.assertEqual(r.raw.read()\", b\\'\\')\\n\\n\\n    def \"test_DIGESTAUTH_WRONG_HTTP_401_GET(self)\":\\n\\n        auth = \"HTTPDigestAuth(\\'user\\', \\'wrongpass\\')\"\\n        url = \"httpbin(\\'digest-auth\\', \\'auth\\', \\'user\\', \\'pass\\')\"\\n\\n        r = \"requests.get(url, auth=auth)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        r = \"requests.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n        s = \"requests.session()\"\\n        s.auth = auth\\n        r = \"s.get(url)\"\\n        \"self.assertEqual(r.status_code, 401)\"\\n\\n    def \"test_POSTBIN_GET_POST_FILES(self)\":\\n\\n        url = \"httpbin(\\'post\\')\"\\n        post1 = \"requests.post(url)\".\"raise_for_status()\"\\n\\n        post1 = requests.post(url, data={\\'some\\': \\'data\\'})\\n        \"self.assertEqual(post1.status_code, 200)\"\\n\\n        with \"open(\\'requirements.txt\\')\" as f:\\n            post2 = requests.post(url, files={\\'some\\': f})\\n        \"self.assertEqual(post2.status_code, 200)\"\\n\\n        post4 = requests.post(url, data=\\'[{\"some\": \"json\"}]\\')\\n        \"self.assertEqual(post4.status_code, 200)\"\\n\\n        try:\\n            \"requests.post(url, files=[\\'bad file data\\'])\"\\n        except ValueError:\\n            pass\\n\\n    def \"test_POSTBIN_GET_POST_FILES_WITH_DATA(self)\":\\n\\n        url = \"httpbin(\\'post\\')\"\\n        post1 = \"requests.post(url)\".\"raise_for_status()\"\\n\\n        post1 = requests.post(url, data={\\'some\\': \\'data\\'})\\n        \"self.assertEqual(post1.status_code, 200)\"\\n\\n        with \"open(\\'requirements.txt\\')\" as f:\\n            post2 = requests.post(url, data={\\'some\\': \\'data\\'}, files={\\'some\\': f})\\n        \"self.assertEqual(post2.status_code, 200)\"\\n\\n        post4 = requests.post(url, data=\\'[{\"some\": \"json\"}]\\')\\n        \"self.assertEqual(post4.status_code, 200)\"\\n\\n        try:\\n            \"requests.post(url, files=[\\'bad file data\\'])\"\\n        except ValueError:\\n            pass\\n\\n    def \"test_request_ok_set(self)\":\\n        r = \"requests.get(httpbin(\\'status\\', \\'404\\')\")\\n        \"self.assertEqual(r.ok, False)\"\\n\\n    def \"test_status_raising(self)\":\\n        r = \"requests.get(httpbin(\\'status\\', \\'404\\')\")\\n        \"self.assertRaises(requests.exceptions.HTTPError, r.raise_for_status)\"\\n\\n        r = \"requests.get(httpbin(\\'status\\', \\'500\\')\")\\n        \"self.assertFalse(r.ok)\"\\n\\n    def \"test_decompress_gzip(self)\":\\n        r = \"requests.get(httpbin(\\'gzip\\')\")\\n        \"r.content.decode(\\'ascii\\')\"\\n\\n    def \"test_unicode_get(self)\":\\n        url = \"httpbin(\\'/get\\')\"\\n        requests.get(url, params={\\'foo\\': \\'f\\xc3\\xb8\\xc3\\xb8\\'})\\n        requests.get(url, params={\\'f\\xc3\\xb8\\xc3\\xb8\\': \\'f\\xc3\\xb8\\xc3\\xb8\\'})\\n        requests.get(url, params={\\'f\\xc3\\xb8\\xc3\\xb8\\': \\'f\\xc3\\xb8\\xc3\\xb8\\'})\\n        requests.get(url, params={\\'foo\\': \\'foo\\'})\\n        \"requests.get(httpbin(\\'\\xc3\\xb8\\')\", params={\\'foo\\': \\'foo\\'})\\n\\n    def \"test_unicode_header_name(self)\":\\n        \"requests.put(httpbin(\\'put\\')\", headers={\"str(\\'Content-Type\\')\": \\'application/octet-stream\\'}, data=\\'\\\\xff\\') # compat.str is unicode.\\n\\n    def \"test_urlencoded_get_query_multivalued_param(self)\":\\n\\n        r = \"requests.get(httpbin(\\'get\\')\", params=\"dict(test=[\\'foo\\', \\'baz\\'])\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n        \"self.assertEqual(r.url, httpbin(\\'get?test=foo&test=baz\\')\")\\n\\n    def \"test_different_encodings_dont_break_post(self)\":\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': json.dumps({\\'a\\': 123})},\\n                          params={\\'blah\\': \\'asdf1234\\'},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_unicode_multipart_post(self)\":\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': u\\'\\xc3\\xabl\\xc3\\xafxr\\'},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': u\\'\\xc3\\xabl\\xc3\\xafxr\\'.\"encode(\\'utf-8\\')\"},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': \\'elixr\\'},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': \\'elixr\\'.\"encode(\\'utf-8\\')\"},\\n                          files={\\'file\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\")})\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_unicode_multipart_post_fieldnames(self)\":\\n        filename = \"os.path.splitext(__file__)\"[0] + \\'.py\\'\\n        r = \"requests.Request(method=\\'POST\\',\\n                             url=httpbin(\\'post\\')\",\\n                             data={\\'stuff\\'.\"encode(\\'utf-8\\')\": \\'elixr\\'},\\n                             files={\\'file\\': (\\'test_requests.py\\',\\n                                             \"open(filename, \\'rb\\')\")})\\n        prep = \"r.prepare()\"\\n        \"self.assertTrue(b\\'name=\"stuff\"\\' in prep.body)\"\\n        \"self.assertFalse(b\\'name=\"b\\\\\\'stuff\\\\\\'\"\\' in prep.body)\"\\n\\n    def \"test_custom_content_type(self)\":\\n        r = \"requests.post(httpbin(\\'post\\')\",\\n                          data={\\'stuff\\': json.dumps({\\'a\\': 123})},\\n                          files={\\'file1\\': (\\'test_requests.py\\', \"open(__file__, \\'rb\\')\"),\\n                                 \\'file2\\': (\\'test_requests\\', \"open(__file__, \\'rb\\')\",\\n                                           \\'text/py-content-type\\')})\\n        \"self.assertEqual(r.status_code, 200)\"\\n        \"self.assertTrue(b\"text/py-content-type\" in r.request.body)\"\\n\\n    def \"test_hook_receives_request_arguments(self)\":\\n        def \"hook(resp, **kwargs)\":\\n            assert resp is not None\\n            assert kwargs != {}\\n\\n        requests.Request(\\'GET\\', HTTPBIN, hooks={\\'response\\': hook})\\n\\n    def \"test_prepared_request_hook(self)\":\\n        def \"hook(resp, **kwargs)\":\\n            resp.hook_working = True\\n            return resp\\n\\n        req = requests.Request(\\'GET\\', HTTPBIN, hooks={\\'response\\': hook})\\n        prep = \"req.prepare()\"\\n\\n        s = \"requests.Session()\"\\n        s.proxies = \"getproxies()\"\\n        resp = \"s.send(prep)\"\\n\\n        \"self.assertTrue(hasattr(resp, \\'hook_working\\')\")\\n\\n    def \"test_prepared_from_session(self)\":\\n        class \"DummyAuth(requests.auth.AuthBase)\":\\n            def \"__call__(self, r)\":\\n                r.headers[\\'Dummy-Auth-Test\\'] = \\'dummy-auth-test-ok\\'\\n                return r\\n\\n        req = \"requests.Request(\\'GET\\', httpbin(\\'headers\\')\")\\n        \"self.assertEqual(req.auth, None)\"\\n\\n        s = \"requests.Session()\"\\n        s.auth = \"DummyAuth()\"\\n\\n        prep = \"s.prepare_request(req)\"\\n        resp = \"s.send(prep)\"\\n\\n        \"self.assertTrue(resp.json()\"[\\'headers\\'][\\'Dummy-Auth-Test\\'], \\'dummy-auth-test-ok\\')\\n\\n    def \"test_links(self)\":\\n        r = \"requests.Response()\"\\n        r.headers = {\\n            \\'cache-control\\': \\'public, max-age=60, s-maxage=60\\',\\n            \\'connection\\': \\'keep-alive\\',\\n            \\'content-encoding\\': \\'gzip\\',\\n            \\'content-type\\': \\'application/json; charset=utf-8\\',\\n            \\'date\\': \\'Sat, 26 Jan 2013 16:47:56 GMT\\',\\n            \\'etag\\': \\'\"6ff6a73c0e446c1f61614769e3ceb778\"\\',\\n            \\'last-modified\\': \\'Sat, 26 Jan 2013 16:22:39 GMT\\',\\n            \\'link\\': (\\'\"<https://api.github.com/users/kennethreitz/repos?\\'\\n                     \\'page=2&per_page=10>\"; rel=\"next\", \"<https://api.github.\\'\\n                     \\'com/users/kennethreitz/repos?page=7&per_page=10>\"; \\'\\n                     \\' rel=\"last\"\\'),\\n            \\'server\\': \\'GitHub.com\\',\\n            \\'status\\': \\'200 OK\\',\\n            \\'vary\\': \\'Accept\\',\\n            \\'x-content-type-options\\': \\'nosniff\\',\\n            \\'x-github-media-type\\': \\'github.beta\\',\\n            \\'x-ratelimit-limit\\': \\'60\\',\\n            \\'x-ratelimit-remaining\\': \\'57\\'\\n        }\\n        \"self.assertEqual(r.links[\\'next\\'][\\'rel\\'], \\'next\\')\"\\n\\n    def \"test_cookie_parameters(self)\":\\n        key = \\'some_cookie\\'\\n        value = \\'some_value\\'\\n        secure = True\\n        domain = \\'test.com\\'\\n        rest = {\\'HttpOnly\\': True}\\n\\n        jar = \"requests.cookies.RequestsCookieJar()\"\\n        \"jar.set(key, value, secure=secure, domain=domain, rest=rest)\"\\n\\n        \"self.assertEqual(len(jar)\", 1)\\n        \"self.assertTrue(\\'some_cookie\\' in jar)\"\\n\\n        cookie = \"list(jar)\"[0]\\n        \"self.assertEqual(cookie.secure, secure)\"\\n        \"self.assertEqual(cookie.domain, domain)\"\\n        \"self.assertEqual(cookie._rest[\\'HttpOnly\\'], rest[\\'HttpOnly\\'])\"\\n\\n    def \"test_time_elapsed_blank(self)\":\\n        r = \"requests.get(httpbin(\\'get\\')\")\\n        td = r.elapsed\\n        total_seconds = ((td.microseconds + (td.seconds + td.days * 24 * 3600)\\n                         * 10**6) / 10**6)\\n        \"self.assertTrue(total_seconds > 0.0)\"\\n\\n    def \"test_response_is_iterable(self)\":\\n        r = \"requests.Response()\"\\n        io = \"StringIO.StringIO(\\'abc\\')\"\\n        read_ = io.read\\n\\n        def \"read_mock(amt, decode_content=None)\":\\n            return \"read_(amt)\"\\n        \"setattr(io, \\'read\\', read_mock)\"\\n        r.raw = io\\n        \"self.assertTrue(next(iter(r)\"))\\n        \"io.close()\"\\n\\n    def \"test_get_auth_from_url(self)\":\\n        url = \\'http://user:pass@complex.url.com/path?query=yes\\'\\n        \"self.assertEqual((\\'user\\', \\'pass\\')\",\\n                         \"requests.utils.get_auth_from_url(url)\")\\n\\n    def \"test_cannot_send_unprepared_requests(self)\":\\n        r = \"requests.Request(url=HTTPBIN)\"\\n        \"self.assertRaises(ValueError, requests.Session()\".send, r)\\n\\n    def \"test_http_error(self)\":\\n        error = \"requests.exceptions.HTTPError()\"\\n        \"self.assertEqual(error.response, None)\"\\n        response = \"requests.Response()\"\\n        error = \"requests.exceptions.HTTPError(response=response)\"\\n        \"self.assertEqual(error.response, response)\"\\n        error = \"requests.exceptions.HTTPError(\\'message\\', response=response)\"\\n        \"self.assertEqual(str(error)\", \\'message\\')\\n        \"self.assertEqual(error.response, response)\"\\n\\n    def \"test_session_pickling(self)\":\\n        r = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\")\\n        s = \"requests.Session()\"\\n\\n        s = \"pickle.loads(pickle.dumps(s)\")\\n        s.proxies = \"getproxies()\"\\n\\n        r = \"s.send(r.prepare()\")\\n        \"self.assertEqual(r.status_code, 200)\"\\n\\n    def \"test_fixes_1329(self)\":\\n        \"\"\"\\n        Ensure that header updates are done case-insensitively.\\n        \"\"\"\\n        s = \"requests.Session()\"\\n        s.headers.update({\\'ACCEPT\\': \\'BOGUS\\'})\\n        s.headers.update({\\'accept\\': \\'application/json\\'})\\n        r = \"s.get(httpbin(\\'get\\')\")\\n        headers = r.request.headers\\n        \"self.assertEqual(\\n            headers[\\'accept\\'],\\n            \\'application/json\\'\\n        )\"\\n        \"self.assertEqual(\\n            headers[\\'Accept\\'],\\n            \\'application/json\\'\\n        )\"\\n        \"self.assertEqual(\\n            headers[\\'ACCEPT\\'],\\n            \\'application/json\\'\\n        )\"\\n\\n    def \"test_uppercase_scheme_redirect(self)\":\\n        parts = \"urlparse(httpbin(\\'html\\')\")\\n        url = \"HTTP://\" + parts.netloc + parts.path\\n        r = \"requests.get(httpbin(\\'redirect-to\\')\", params={\\'url\\': url})\\n        \"self.assertEqual(r.status_code, 200)\"\\n        \"self.assertEqual(r.url.lower()\", \"url.lower()\")\\n\\n    def \"test_transport_adapter_ordering(self)\":\\n        s = \"requests.Session()\"\\n        order = [\\'https://\\', \\'http://\\']\\n        \"self.assertEqual(order, list(s.adapters)\")\\n        \"s.mount(\\'http://git\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://github\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://github.com\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://github.com/about/\\', HTTPAdapter()\")\\n        order = [\\n            \\'http://github.com/about/\\',\\n            \\'http://github.com\\',\\n            \\'http://github\\',\\n            \\'http://git\\',\\n            \\'https://\\',\\n            \\'http://\\',\\n        ]\\n        \"self.assertEqual(order, list(s.adapters)\")\\n        \"s.mount(\\'http://gittip\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://gittip.com\\', HTTPAdapter()\")\\n        \"s.mount(\\'http://gittip.com/about/\\', HTTPAdapter()\")\\n        order = [\\n            \\'http://github.com/about/\\',\\n            \\'http://gittip.com/about/\\',\\n            \\'http://github.com\\',\\n            \\'http://gittip.com\\',\\n            \\'http://github\\',\\n            \\'http://gittip\\',\\n            \\'http://git\\',\\n            \\'https://\\',\\n            \\'http://\\',\\n        ]\\n        \"self.assertEqual(order, list(s.adapters)\")\\n        s2 = \"requests.Session()\"\\n        s2.adapters = {\\'http://\\': \"HTTPAdapter()\"}\\n        \"s2.mount(\\'https://\\', HTTPAdapter()\")\\n        \"self.assertTrue(\\'http://\\' in s2.adapters)\"\\n        \"self.assertTrue(\\'https://\\' in s2.adapters)\"\\n\\n    def \"test_header_remove_is_case_insensitive(self)\":\\n        # From issue #1321\\n        s = \"requests.Session()\"\\n        s.headers[\\'foo\\'] = \\'bar\\'\\n        r = \"s.get(httpbin(\\'get\\')\", headers={\\'FOO\\': None})\\n        assert \\'foo\\' not in r.request.headers\\n\\n    def \"test_params_are_merged_case_sensitive(self)\":\\n        s = \"requests.Session()\"\\n        s.params[\\'foo\\'] = \\'bar\\'\\n        r = \"s.get(httpbin(\\'get\\')\", params={\\'FOO\\': \\'bar\\'})\\n        assert \"r.json()\"[\\'args\\'] == {\\'foo\\': \\'bar\\', \\'FOO\\': \\'bar\\'}\\n\\n\\n    def \"test_long_authinfo_in_url(self)\":\\n        url = \\'http://{0}:{1}@{2}:9000/path?query#frag\\'.\"format(\\n            \\'E8A3BE87-9E3F-4620-8858-95478E385B5B\\',\\n            \\'EA770032-DA4D-4D84-8CE9-29C6D910BF1E\\',\\n            \\'exactly-------------sixty-----------three------------characters\\',\\n        )\"\\n        r = \"requests.Request(\\'GET\\', url)\".\"prepare()\"\\n        \"self.assertEqual(r.url, url)\"\\n\\n    def \"test_header_keys_are_native(self)\":\\n        headers = {u\\'unicode\\': \\'blah\\', \\'byte\\'.\"encode(\\'ascii\\')\": \\'blah\\'}\\n        r = \"requests.Request(\\'GET\\', httpbin(\\'get\\')\", headers=headers)\\n        p = \"r.prepare()\"\\n\\n        # This is testing that they are builtin strings. A bit weird, but there\\n        # we go.\\n        \"self.assertTrue(\\'unicode\\' in p.headers.keys()\")\\n        \"self.assertTrue(\\'byte\\' in p.headers.keys()\")\\n\\n    def \"test_can_send_nonstring_objects_with_files(self)\":\\n        data = {\\'a\\': 0.0}\\n        files = {\\'b\\': \\'foo\\'}\\n        r = \"requests.Request(\\'POST\\', httpbin(\\'post\\')\", data=data, files=files)\\n        p = \"r.prepare()\"\\n\\n        \"self.assertTrue(\\'multipart/form-data\\' in p.headers[\\'Content-Type\\'])\"\\n\\n\\nclass \"TestCaseInsensitiveDict(unittest.TestCase)\":\\n\\n    def \"test_mapping_init(self)\":\\n        cid = CaseInsensitiveDict({\\'Foo\\': \\'foo\\',\\'BAr\\': \\'bar\\'})\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertTrue(\\'foo\\' in cid)\"\\n        \"self.assertTrue(\\'bar\\' in cid)\"\\n\\n    def \"test_iterable_init(self)\":\\n        cid = \"CaseInsensitiveDict([(\\'Foo\\', \\'foo\\')\", (\\'BAr\\', \\'bar\\')])\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertTrue(\\'foo\\' in cid)\"\\n        \"self.assertTrue(\\'bar\\' in cid)\"\\n\\n    def \"test_kwargs_init(self)\":\\n        cid = \"CaseInsensitiveDict(FOO=\\'foo\\', BAr=\\'bar\\')\"\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertTrue(\\'foo\\' in cid)\"\\n        \"self.assertTrue(\\'bar\\' in cid)\"\\n\\n    def \"test_docstring_example(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'Accept\\'] = \\'application/json\\'\\n        \"self.assertEqual(cid[\\'aCCEPT\\'], \\'application/json\\')\"\\n        \"self.assertEqual(list(cid)\", [\\'Accept\\'])\\n\\n    def \"test_len(self)\":\\n        cid = CaseInsensitiveDict({\\'a\\': \\'a\\', \\'b\\': \\'b\\'})\\n        cid[\\'A\\'] = \\'a\\'\\n        \"self.assertEqual(len(cid)\", 2)\\n\\n    def \"test_getitem(self)\":\\n        cid = CaseInsensitiveDict({\\'Spam\\': \\'blueval\\'})\\n        \"self.assertEqual(cid[\\'spam\\'], \\'blueval\\')\"\\n        \"self.assertEqual(cid[\\'SPAM\\'], \\'blueval\\')\"\\n\\n    def \"test_fixes_649(self)\":\\n        \"\"\"__setitem__ should behave case-insensitively.\"\"\"\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'spam\\'] = \\'oneval\\'\\n        cid[\\'Spam\\'] = \\'twoval\\'\\n        cid[\\'sPAM\\'] = \\'redval\\'\\n        cid[\\'SPAM\\'] = \\'blueval\\'\\n        \"self.assertEqual(cid[\\'spam\\'], \\'blueval\\')\"\\n        \"self.assertEqual(cid[\\'SPAM\\'], \\'blueval\\')\"\\n        \"self.assertEqual(list(cid.keys()\"), [\\'SPAM\\'])\\n\\n    def \"test_delitem(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'Spam\\'] = \\'someval\\'\\n        del cid[\\'sPam\\']\\n        \"self.assertFalse(\\'spam\\' in cid)\"\\n        \"self.assertEqual(len(cid)\", 0)\\n\\n    def \"test_contains(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'Spam\\'] = \\'someval\\'\\n        \"self.assertTrue(\\'Spam\\' in cid)\"\\n        \"self.assertTrue(\\'spam\\' in cid)\"\\n        \"self.assertTrue(\\'SPAM\\' in cid)\"\\n        \"self.assertTrue(\\'sPam\\' in cid)\"\\n        \"self.assertFalse(\\'notspam\\' in cid)\"\\n\\n    def \"test_get(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'spam\\'] = \\'oneval\\'\\n        cid[\\'SPAM\\'] = \\'blueval\\'\\n        \"self.assertEqual(cid.get(\\'spam\\')\", \\'blueval\\')\\n        \"self.assertEqual(cid.get(\\'SPAM\\')\", \\'blueval\\')\\n        \"self.assertEqual(cid.get(\\'sPam\\')\", \\'blueval\\')\\n        \"self.assertEqual(cid.get(\\'notspam\\', \\'default\\')\", \\'default\\')\\n\\n    def \"test_update(self)\":\\n        cid = \"CaseInsensitiveDict()\"\\n        cid[\\'spam\\'] = \\'blueval\\'\\n        cid.update({\\'sPam\\': \\'notblueval\\'})\\n        \"self.assertEqual(cid[\\'spam\\'], \\'notblueval\\')\"\\n        cid = CaseInsensitiveDict({\\'Foo\\': \\'foo\\',\\'BAr\\': \\'bar\\'})\\n        cid.update({\\'fOO\\': \\'anotherfoo\\', \\'bAR\\': \\'anotherbar\\'})\\n        \"self.assertEqual(len(cid)\", 2)\\n        \"self.assertEqual(cid[\\'foo\\'], \\'anotherfoo\\')\"\\n        \"self.assertEqual(cid[\\'bar\\'], \\'anotherbar\\')\"\\n\\n    def \"test_update_retains_unchanged(self)\":\\n        cid = CaseInsensitiveDict({\\'foo\\': \\'foo\\', \\'bar\\': \\'bar\\'})\\n        cid.update({\\'foo\\': \\'newfoo\\'})\\n        \"self.assertEquals(cid[\\'bar\\'], \\'bar\\')\"\\n\\n    def \"test_iter(self)\":\\n        cid = CaseInsensitiveDict({\\'Spam\\': \\'spam\\', \\'Eggs\\': \\'eggs\\'})\\n        keys = \"frozenset([\\'Spam\\', \\'Eggs\\'])\"\\n        \"self.assertEqual(frozenset(iter(cid)\"), keys)\\n\\n    def \"test_equality(self)\":\\n        cid = CaseInsensitiveDict({\\'SPAM\\': \\'blueval\\', \\'Eggs\\': \\'redval\\'})\\n        othercid = CaseInsensitiveDict({\\'spam\\': \\'blueval\\', \\'eggs\\': \\'redval\\'})\\n        \"self.assertEqual(cid, othercid)\"\\n        del othercid[\\'spam\\']\\n        \"self.assertNotEqual(cid, othercid)\"\\n        self.assertEqual(cid, {\\'spam\\': \\'blueval\\', \\'eggs\\': \\'redval\\'})\\n\\n    def \"test_setdefault(self)\":\\n        cid = CaseInsensitiveDict({\\'Spam\\': \\'blueval\\'})\\n        \"self.assertEqual(\\n            cid.setdefault(\\'spam\\', \\'notblueval\\')\",\\n            \\'blueval\\'\\n        )\\n        \"self.assertEqual(\\n            cid.setdefault(\\'notspam\\', \\'notblueval\\')\",\\n            \\'notblueval\\'\\n        )\\n\\n    def \"test_lower_items(self)\":\\n        cid = CaseInsensitiveDict({\\n            \\'Accept\\': \\'application/json\\',\\n            \\'user-Agent\\': \\'requests\\',\\n        })\\n        keyset = \"frozenset(lowerkey for lowerkey, v in cid.lower_items()\")\\n        lowerkeyset = \"frozenset([\\'accept\\', \\'user-agent\\'])\"\\n        \"self.assertEqual(keyset, lowerkeyset)\"\\n\\n    def \"test_preserve_key_case(self)\":\\n        cid = CaseInsensitiveDict({\\n            \\'Accept\\': \\'application/json\\',\\n            \\'user-Agent\\': \\'requests\\',\\n        })\\n        keyset = \"frozenset([\\'Accept\\', \\'user-Agent\\'])\"\\n        \"self.assertEqual(frozenset(i[0] for i in cid.items()\"), keyset)\\n        \"self.assertEqual(frozenset(cid.keys()\"), keyset)\\n        \"self.assertEqual(frozenset(cid)\", keyset)\\n\\n    def \"test_preserve_last_key_case(self)\":\\n        cid = CaseInsensitiveDict({\\n            \\'Accept\\': \\'application/json\\',\\n            \\'user-Agent\\': \\'requests\\',\\n        })\\n        cid.update({\\'ACCEPT\\': \\'application/json\\'})\\n        cid[\\'USER-AGENT\\'] = \\'requests\\'\\n        keyset = \"frozenset([\\'ACCEPT\\', \\'USER-AGENT\\'])\"\\n        \"self.assertEqual(frozenset(i[0] for i in cid.items()\"), keyset)\\n        \"self.assertEqual(frozenset(cid.keys()\"), keyset)\\n        \"self.assertEqual(frozenset(cid)\", keyset)\\n\\n\\nif __name__ == \\'__main__\\':\\n    \"unittest.main()\"\\n\\r\\n--4e2df906f44246c8a3fb560c4722ef9e--\\r\\n'", "multipart/form-data; boundary=4e2df906f44246c8a3fb560c4722ef9e"]}, "name": "_encode_files"}
