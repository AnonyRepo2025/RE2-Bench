{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**2", "limits": ["j + k - 1"]}, "kwargs": {}}, "return": "RisingFactorial(k, j)**2"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**2", "limits": ["j + k", "k - 1"]}, "kwargs": {}}, "return": "RisingFactorial(j + k, -j)**2"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**(-2)", "limits": ["k - 1"]}, "kwargs": {}}, "return": "1"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": {"nargs": "in ground truth values, it is an empty dict"}, "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": {"nargs": {}}, "limits": ["2", "10"]}, "kwargs": {}}, "return": "f(2)*\"f(3)\"*\"f(4)\"*\"f(5)\"*\"f(6)\"*\"f(7)\"*\"f(8)\"*\"f(9)\"*f(10)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**2 + 2*i - 3", "limits": ["u + v - 1"]}, "kwargs": {}}, "return": "RisingFactorial(u - 1, v)*RisingFactorial(u + 3, v)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "1/(i**2 + 2*i - 3)", "limits": ["u + v - 1"]}, "kwargs": {}}, "return": "1/(\"RisingFactorial(u - 1, v)\"*\"RisingFactorial(u + 3, v)\")"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**2 + 5*i + 4", "limits": ["u + v - 1"]}, "kwargs": {}}, "return": "RisingFactorial(u + 1, v)*RisingFactorial(u + 4, v)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "1", "limits": ["u + v - 1"]}, "kwargs": {}}, "return": "1"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "(i**2 + 5*i + 4)/(i**2 + 2*i - 3)", "limits": ["u + v - 1"]}, "kwargs": {}}, "return": "RisingFactorial(u + 1, v)*\"RisingFactorial(u + 4, v)\"/(\"RisingFactorial(u - 1, v)\"*\"RisingFactorial(u + 3, v)\")"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "(i**2 + 2*i - 3)/(i**2 + 5*i + 4)", "limits": ["u - 1"]}, "kwargs": {}}, "return": "1"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**2 + 2*i - 3", "limits": ["u + v", "u - 1"]}, "kwargs": {}}, "return": "RisingFactorial(u + v - 1, -v)*RisingFactorial(u + v + 3, -v)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "1/(i**2 + 2*i - 3)", "limits": ["u + v", "u - 1"]}, "kwargs": {}}, "return": "1/(\"RisingFactorial(u + v - 1, -v)\"*\"RisingFactorial(u + v + 3, -v)\")"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**2 + 5*i + 4", "limits": ["u + v", "u - 1"]}, "kwargs": {}}, "return": "RisingFactorial(u + v + 1, -v)*RisingFactorial(u + v + 4, -v)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "1", "limits": ["u + v", "u - 1"]}, "kwargs": {}}, "return": "1"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "(i**2 + 5*i + 4)/(i**2 + 2*i - 3)", "limits": ["u + v", "u - 1"]}, "kwargs": {}}, "return": "RisingFactorial(u + v + 1, -v)*\"RisingFactorial(u + v + 4, -v)\"/(\"RisingFactorial(u + v - 1, -v)\"*\"RisingFactorial(u + v + 3, -v)\")"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**3", "limits": ["u + v - 1"]}, "kwargs": {}}, "return": "RisingFactorial(u, v)**3"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**3", "limits": ["u + v + w - 1"]}, "kwargs": {}}, "return": "RisingFactorial(u, v + w)**3"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**3", "limits": ["u + v + w", "u + v - 1"]}, "kwargs": {}}, "return": "RisingFactorial(u + v + w, -w)**3"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**(-3)", "limits": ["u + v", "u + v - 1"]}, "kwargs": {}}, "return": "1"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**3", "limits": ["v - 1"]}, "kwargs": {}}, "return": "RisingFactorial(u, -u + v)**3"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**(-3)", "limits": ["u - 1"]}, "kwargs": {}}, "return": "1"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**3", "limits": ["u + v", "u - 1"]}, "kwargs": {}}, "return": "RisingFactorial(u + v, -v)**3"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**3", "limits": ["u + v", "u + w - 1"]}, "kwargs": {}}, "return": "RisingFactorial(u + v, -v + w)**3"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**3", "limits": ["u + w", "u - 1"]}, "kwargs": {}}, "return": "RisingFactorial(u + w, -w)**3"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "i**3", "limits": ["u + v + w", "u - 1"]}, "kwargs": {}}, "return": "RisingFactorial(u + v + w, -v - w)**3"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "in ground truth values, it is an empty list"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "2", "limits": []}, "kwargs": {}}, "return": "2**(-a + n + 1)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": {"nargs": {"_elements": "np.ndarray[frozenset]"}}}, "values": {"inputs": {"self": {}, "args": {"limits": ["1"]}, "kwargs": {}}, "return": {"nargs": {"_elements": "frozenset({1})"}}}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "k**3", "limits": ["1"]}, "kwargs": {}}, "return": "factorial(n)**3"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": {"nargs": {"_elements": "np.ndarray[frozenset]"}}}, "values": {"inputs": {"self": {}, "args": {"term": "k + 1", "limits": ["0", "n - 1"]}, "kwargs": {}}, "return": {"nargs": {"_elements": "frozenset({1})"}}}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": {"nargs": {"_elements": "np.ndarray[frozenset]"}}}, "values": {"inputs": {"self": {}, "args": {"term": "k + 1", "limits": ["n - 1"]}, "kwargs": {}}, "return": {"nargs": {"_elements": "frozenset({2})"}}}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": {"nargs": {"_elements": "np.ndarray[frozenset]"}}, "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": {"nargs": {"_elements": "frozenset({1})"}}, "limits": ["0", "5"]}, "kwargs": {}}, "return": "cos(1)*\"cos(2)\"*\"cos(3)\"*\"cos(4)\"*cos(5)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": {"nargs": {"_elements": "np.ndarray[frozenset]"}}, "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": {"nargs": {"_elements": "frozenset({1})"}}, "limits": ["3", "5"]}, "kwargs": {}}, "return": "cos(3)*\"cos(4)\"*cos(5)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "1", "limits": ["1", "oo"]}, "kwargs": {}}, "return": "1"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "2", "limits": ["1", "oo"]}, "kwargs": {}}, "return": "oo"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[empty]"}, "values": {"inputs": {"self": {}, "args": {"term": "-1", "limits": ["1", "oo"]}, "kwargs": {}}, "return": "nan"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "x**k", "limits": ["1"]}, "kwargs": {}}, "return": "x**(m**2/2 + m/2)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": {"nargs": "in ground truth values, it is an empty dict"}, "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": {"nargs": {}}, "limits": ["1"]}, "kwargs": {}}, "return": "f(n)**k"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "1/k", "limits": ["1"]}, "kwargs": {}}, "return": "1/factorial(n)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": {"nargs": {"_elements": "np.ndarray[frozenset]"}}}, "values": {"inputs": {"self": {}, "args": {"term": "k + 1", "limits": ["1"]}, "kwargs": {}}, "return": {"nargs": {"_elements": "frozenset({2})"}}}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "1", "limits": ["1"]}, "kwargs": {}}, "return": "1"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "(k + 1)/k", "limits": ["1"]}, "kwargs": {}}, "return": "RisingFactorial(2, n)/factorial(n)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "1 + 1/k", "limits": ["1"]}, "kwargs": {}}, "return": "RisingFactorial(2, n)/factorial(n)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "16", "limits": ["1"]}, "kwargs": {}}, "return": "16**n"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "k**2", "limits": ["1"]}, "kwargs": {}}, "return": "factorial(n)**2"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "4*k**2 - 1", "limits": ["1"]}, "kwargs": {}}, "return": "4**n*\"RisingFactorial(1/2, n)\"*RisingFactorial(3/2, n)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "1/(4*k**2 - 1)", "limits": ["1"]}, "kwargs": {}}, "return": "4**(-n)/(\"RisingFactorial(1/2, n)\"*\"RisingFactorial(3/2, n)\")"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "16*k**2/(4*k**2 - 1)", "limits": ["1"]}, "kwargs": {}}, "return": "16**n*4**(-n)*\"factorial(n)\"**2/(\"RisingFactorial(1/2, n)\"*\"RisingFactorial(3/2, n)\")"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "k**(-2)", "limits": ["1"]}, "kwargs": {}}, "return": "factorial(n)**(-2)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "a + k**2", "limits": ["1"]}, "kwargs": {}}, "return": "RisingFactorial(-\"sqrt(-a)\" + 1, n)*\"RisingFactorial(sqrt(-a)\" + 1, n)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "(a + k**2)/k**2", "limits": ["1"]}, "kwargs": {}}, "return": "RisingFactorial(-\"sqrt(-a)\" + 1, n)*\"RisingFactorial(sqrt(-a)\" + 1, n)/\"factorial(n)\"**2"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "a/k**2 + 1", "limits": ["1"]}, "kwargs": {}}, "return": "RisingFactorial(-\"sqrt(-a)\" + 1, n)*\"RisingFactorial(sqrt(-a)\" + 1, n)/\"factorial(n)\"**2"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "2", "limits": ["1"]}, "kwargs": {}}, "return": "2**n"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "2**i", "limits": ["1"]}, "kwargs": {}}, "return": "2**(n**2/2 + n/2)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 1 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "2**(2*\"f(k)\")", "limits": ["1"]}, "kwargs": {}}, "return": "2**\"Sum(2*f(k)\", (k, 1, n))"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "x**k", "limits": ["1", "3"]}, "kwargs": {}}, "return": "x**6"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "A*B**k", "limits": ["1", "3"]}, "kwargs": {}}, "return": "A*B*A*B**2*A*B**3"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "conjugate(A)*\"conjugate(B)\"**k", "limits": ["1", "3"]}, "kwargs": {}}, "return": "conjugate(A)*\"conjugate(B)\"*\"conjugate(A)\"*\"conjugate(B)\"**2*\"conjugate(A)\"*\"conjugate(B)\"**3"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[empty]"}, "values": {"inputs": {"self": {}, "args": {"limits": ["1", "oo"]}, "kwargs": {}}, "return": "nan"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[empty]"}, "values": {"inputs": {"self": {}, "args": {"term": "n**(-2/3)", "limits": ["1", "oo"]}, "kwargs": {}}, "return": "nan"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[empty]"}, "values": {"inputs": {"self": {}, "args": {"term": "(n**(2/3) + 1)/n**(2/3)", "limits": ["1", "oo"]}, "kwargs": {}}, "return": "nan"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[empty]"}, "values": {"inputs": {"self": {}, "args": {"term": "1 + n**(-2/3)", "limits": ["1", "oo"]}, "kwargs": {}}, "return": "nan"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "2**(-k)", "limits": ["0", "n - 1"]}, "kwargs": {}}, "return": "2**(-n**2/2 + n/2)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "2**(-k)*(2**k*n + 1)", "limits": ["0", "n - 1"]}, "kwargs": {}}, "return": "2**(-n**2/2 + n/2)*\"Product(2**k*n + 1, (k, 0, n - 1)\")"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "n + 2**(-k)", "limits": ["0", "n - 1"]}, "kwargs": {}}, "return": "2**(-n**2/2 + n/2)*\"Product(2**k*n + 1, (k, 0, n - 1)\")"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "2*2**k + 1", "limits": ["0", "1"]}, "kwargs": {}}, "return": "15"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "pi**(-2)", "limits": ["1", "oo"]}, "kwargs": {}}, "return": "pi**(-oo)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[empty]"}, "values": {"inputs": {"self": {}, "args": {"term": "n**(-2)", "limits": ["1", "oo"]}, "kwargs": {}}, "return": "nan"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"term": "-a**2 + pi**2*n**2", "limits": ["1", "oo"]}, "kwargs": {}}, "return": "pi**oo*\"RisingFactorial(-a/pi + 1, oo)\"*RisingFactorial(a/pi + 1, oo)"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[empty]"}, "values": {"inputs": {"self": {}, "args": {"term": "(-a**2 + pi**2*n**2)/(pi**2*n**2)", "limits": ["1", "oo"]}, "kwargs": {}}, "return": "nan"}, "name": "_eval_product"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"term": "str", "limits": "list of 2 str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[empty]"}, "values": {"inputs": {"self": {}, "args": {"term": "-a**2/(pi**2*n**2) + 1", "limits": ["1", "oo"]}, "kwargs": {}}, "return": "nan"}, "name": "_eval_product"}
