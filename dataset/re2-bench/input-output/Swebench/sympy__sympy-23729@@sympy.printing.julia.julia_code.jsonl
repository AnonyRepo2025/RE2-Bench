{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "67"}, "kwargs": {}}, "return": "67"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "-1"}, "kwargs": {}}, "return": "-1"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "np.ndarray[float64]"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"expr": "3/7"}, "kwargs": {}}, "return": "3 // 7"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "2"}, "kwargs": {}}, "return": "2"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "np.ndarray[float64]"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"expr": "-3/7"}, "kwargs": {}}, "return": "-3 // 7"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x + 3/7"}, "kwargs": {}}, "return": "x + 3 // 7"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "3*x/7"}, "kwargs": {}}, "return": "(3 // 7) * x"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "Eq(x, y)"}, "kwargs": {}}, "return": "x == y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "Ne(x, y)"}, "kwargs": {}}, "return": "x != y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x <= y"}, "kwargs": {}}, "return": "x <= y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x < y"}, "kwargs": {}}, "return": "x < y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x > y"}, "kwargs": {}}, "return": "x > y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x >= y"}, "kwargs": {}}, "return": "x >= y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "sin(x)**cos(x)"}, "kwargs": {}}, "return": "sin(x) .^ cos(x)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": {"nargs": {"_args_set": "in ground truth values, it is an empty set"}}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": {"nargs": {"_args_set": "{'1'}"}}}, "kwargs": {}}, "return": "abs(x)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x**3"}, "kwargs": {}}, "return": "x .^ 3"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x**(y**3)"}, "kwargs": {}}, "return": "x .^ (y .^ 3)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x**(2/3)"}, "kwargs": {}}, "return": "x .^ (2 // 3)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "(3.5*\"g(x)\")**(-x + y**x)/(x**2 + y)"}, "kwargs": {}}, "return": "(3.5 * 2 * x) .^ (-x + y .^ x) ./ (x .^ 2 + y)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "-2*x/(y*y)"}, "kwargs": {}}, "return": "-2 * x ./ (y .* y)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x*y"}, "kwargs": {}}, "return": "x .* y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x + y"}, "kwargs": {}}, "return": "x + y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x - y"}, "kwargs": {}}, "return": "x - y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "-x"}, "kwargs": {}}, "return": "-x"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "1/x"}, "kwargs": {}}, "return": "1 ./ x"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x**(-1.0)"}, "kwargs": {}}, "return": "1 ./ x"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "1/sqrt(x)"}, "kwargs": {}}, "return": "1 ./ sqrt(x)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x**(-0.5)"}, "kwargs": {}}, "return": "1 ./ sqrt(x)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "sqrt(x)"}, "kwargs": {}}, "return": "sqrt(x)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x**0.5"}, "kwargs": {}}, "return": "sqrt(x)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "1/pi"}, "kwargs": {}}, "return": "1 / pi"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "pi**(-1.0)"}, "kwargs": {}}, "return": "1 / pi"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "pi**(-0.5)"}, "kwargs": {}}, "return": "1 / sqrt(pi)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "3*x"}, "kwargs": {}}, "return": "3 * x"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "pi*x"}, "kwargs": {}}, "return": "pi * x"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "3/x"}, "kwargs": {}}, "return": "3 ./ x"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "pi/x"}, "kwargs": {}}, "return": "pi ./ x"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x/3"}, "kwargs": {}}, "return": "x / 3"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x/pi"}, "kwargs": {}}, "return": "x / pi"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "3*x*y"}, "kwargs": {}}, "return": "3 * x .* y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "3*pi*x*y"}, "kwargs": {}}, "return": "3 * pi * x .* y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x/y"}, "kwargs": {}}, "return": "x ./ y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "3*x/y"}, "kwargs": {}}, "return": "3 * x ./ y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x*y/z"}, "kwargs": {}}, "return": "x .* y ./ z"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x*z/y"}, "kwargs": {}}, "return": "x .* z ./ y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "1/(x*y)"}, "kwargs": {}}, "return": "1 ./ (x .* y)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "2*pi*x/(y*z)"}, "kwargs": {}}, "return": "2 * pi * x ./ (y .* z)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "3*pi/x"}, "kwargs": {}}, "return": "3 * pi ./ x"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "np.ndarray[float64]"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"expr": "3/5"}, "kwargs": {}}, "return": "3 // 5"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "3*x/5"}, "kwargs": {}}, "return": "(3 // 5) * x"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x/(y*z)"}, "kwargs": {}}, "return": "x ./ (y .* z)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "(x + y)/z"}, "kwargs": {}}, "return": "(x + y) ./ z"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "(x + y)/(x + z)"}, "kwargs": {}}, "return": "(x + y) ./ (x + z)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "(x + y)/EulerGamma"}, "kwargs": {}}, "return": "(x + y) / eulergamma"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x/(3*pi)"}, "kwargs": {}}, "return": "x / (3 * pi)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "3*x*y/(5*pi)"}, "kwargs": {}}, "return": "(3 // 5) * x .* y / pi"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "pi**3"}, "kwargs": {}}, "return": "pi ^ 3"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x**2"}, "kwargs": {}}, "return": "x .^ 2"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x**(pi**3)"}, "kwargs": {}}, "return": "x .^ (pi ^ 3)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x**y"}, "kwargs": {}}, "return": "x .^ y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x**(y**z)"}, "kwargs": {}}, "return": "x .^ (y .^ z)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "(x**y)**z"}, "kwargs": {}}, "return": "(x .^ y) .^ z"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "I"}, "kwargs": {}}, "return": "im"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "5*I"}, "kwargs": {}}, "return": "5im"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "3*I/2"}, "kwargs": {}}, "return": "(3 // 2) * im"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "3 + 4*I"}, "kwargs": {}}, "return": "3 + 4im"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "pi"}, "kwargs": {}}, "return": "pi"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "oo"}, "kwargs": {}}, "return": "Inf"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "-oo"}, "kwargs": {}}, "return": "-Inf"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "np.ndarray[empty]"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "nan"}, "kwargs": {}}, "return": "NaN"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "E"}, "kwargs": {}}, "return": "e"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "2*GoldenRatio"}, "kwargs": {}}, "return": "2 * golden"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "2*Catalan"}, "kwargs": {}}, "return": "2 * catalan"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "2*EulerGamma"}, "kwargs": {}}, "return": "2 * eulergamma"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": {"nargs": "in ground truth values, it is an empty dict", "_argset": "str"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": {"nargs": {}, "_argset": "frozenset({y, x})"}}, "kwargs": {}}, "return": "x && y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": {"nargs": "in ground truth values, it is an empty dict", "_argset": "str"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": {"nargs": {}, "_argset": "frozenset({y, z, x})"}}, "kwargs": {}}, "return": "x && y && z"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": {"nargs": "in ground truth values, it is an empty dict", "_argset": "str"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": {"nargs": {}, "_argset": "frozenset({x & y, z})"}}, "kwargs": {}}, "return": "z || x && y"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": {"nargs": "in ground truth values, it is an empty dict", "_argset": "str"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": {"nargs": {}, "_argset": "frozenset({z, x | y})"}}, "kwargs": {}}, "return": "z && (x || y)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "in ground truth values, it is an empty dict"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": {}}, "kwargs": {}}, "return": "A * B"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "null value in the ground truth"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": null}, "kwargs": {}}, "return": "Any[1, 2, 3, Any[4, 5, Any[6, 7]], 8, Any[9, 10], 11]"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "list of different types containing 3 elements ['int', 'list of 2 int']"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": [1, 2, [3, 4]]}, "kwargs": {}}, "return": "(1, 2, (3, 4))"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "list of 1 int"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": [1]}, "kwargs": {}}, "return": "(1,)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "list of different types containing 3 elements ['int', 'str', \"list of different types containing 2 elements ['int', 'str']\"]"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": [1, "x*y", [3, "x**2"]]}, "kwargs": {}}, "return": "(1, x .* y, (3, x .^ 2))"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": {"assign_to": "str", "inline": "bool"}}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "(x + y)/Catalan"}, "kwargs": {"assign_to": "me", "inline": false}}, "return": "const Catalan = 0.91596559417721901\nme = (x + y) / Catalan"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "in ground truth values, it is an empty dict"}, "kwargs": {"assign_to": "str"}}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": {}}, "kwargs": {"assign_to": "r"}}, "return": "r = ((x < 1) ? (x) : (x .^ 2))"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "in ground truth values, it is an empty dict"}, "kwargs": {"assign_to": "str", "inline": "bool"}}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": {}}, "kwargs": {"assign_to": "r", "inline": false}}, "return": "if (x < 1)\n    r = x\nelse\n    r = x .^ 2\nend"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "2*\"Piecewise((x, x < 1)\", (x**2, True))"}, "kwargs": {}}, "return": "2 * ((x < 1) ? (x) : (x .^ 2))"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "Piecewise((x, x < 1), (x**2, True))/x"}, "kwargs": {}}, "return": "((x < 1) ? (x) : (x .^ 2)) ./ x"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "Piecewise((x, x < 1), (x**2, True))/(x*y)"}, "kwargs": {}}, "return": "((x < 1) ? (x) : (x .^ 2)) ./ (x .* y)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "Piecewise((x, x < 1), (x**2, True))/3"}, "kwargs": {}}, "return": "((x < 1) ? (x) : (x .^ 2)) / 3"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "x**2 + x*y + 2"}, "kwargs": {}}, "return": "x .^ 2 + x .* y + 2"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "sin(AA[0, 1]) + AA[0, 0]**2 + AA[0, 2]"}, "kwargs": {}}, "return": "sin(AA[1,2]) + AA[1,1] .^ 2 + AA[1,3]"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "AA[0, 0] + AA[0, 1] + AA[0, 2]"}, "kwargs": {}}, "return": "AA[1,1] + AA[1,2] + AA[1,3]"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "bool"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": true}, "kwargs": {}}, "return": "true"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "bool"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": false}, "kwargs": {}}, "return": "false"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "zoo"}, "kwargs": {}}, "return": "# Not supported in Julia:\n# ComplexInfinity\nzoo"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "in ground truth values, it is an empty dict"}, "kwargs": {"inline": "bool"}}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": {}}, "kwargs": {"inline": false}}, "return": "if (x < 0)\n    endless\"nelseif (x <= 1)\"\n    elsewhere\nelse\n    1\nend"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": {"nargs": {"_args_set": "in ground truth values, it is an empty set"}}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": {"nargs": {"_args_set": "{'2'}"}}}, "kwargs": {}}, "return": "besselj(n, x)"}, "name": "julia_code"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"expr": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"expr": "3*A[0, 0]"}, "kwargs": {}}, "return": "3 * A[1,1]"}, "name": "julia_code"}
