{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.12075831 -0.18368868  0.03989088 -0.1546627   0.68043377]\n [ 0.6249434   0.72870625  0.26478475 -0.12139797  0.87006453]\n [ 0.66474897 -0.23748974  0.45617744 -1.41935695 -2.01659962]\n [-0.17571151  0.83210472 -0.59905529  1.70449342 -0.91797548]\n [-0.78357159 -0.21951533  1.67588895  0.90409756  0.69133763]\n [-0.45116759 -0.92011722 -1.83768673 -0.91317336  0.69273917]]", "y": "[ 0.71836554 -0.6455296  -0.06694882  1.19520639  0.82187118 -2.02296469]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "svd", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.05630007  0.05755984  0.41383827  0.56980678 -0.28161229]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-1.34744610e+00 -1.42123849e+00  2.69621717e+00 -8.15689295e-01\n  -5.97985445e-01 -7.51096548e-01  6.20696354e-01 -7.06333156e-01\n  -3.30156484e-01 -4.14033914e-01]\n [ 4.59474338e-01 -2.25773440e-01 -4.35190405e-01 -3.34219342e-01\n   2.68420727e-01  5.68216035e-01  1.45677896e-01  2.73242598e-01\n  -4.80157370e-01 -1.91027801e-01]\n [-2.86981321e-01 -5.28114585e-01 -9.80840823e-01 -1.28610971e-01\n  -5.61692080e-01 -1.12849953e+00  3.05988254e-01  2.66327469e-04\n  -6.54708080e-02  1.21052321e+00]\n [ 2.01554751e-01  1.42443238e+00 -4.89384041e-01  9.63045278e-02\n  -8.44721235e-01 -3.69098337e-01 -7.35643666e-01  5.96012160e-01\n  -6.12508615e-02 -6.83717194e-01]\n [ 9.73398328e-01  7.50694137e-01 -7.90801907e-01  1.18221508e+00\n   1.73597803e+00  1.68047838e+00 -3.36718838e-01 -1.63187930e-01\n   9.37035523e-01  7.82556999e-02]]", "y": "[ 1.09139308  1.06348225 -0.52622442 -0.44120035 -1.18745056]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "svd", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.07631312 -0.28699913  0.12611882 -0.39036136 -0.04755426  0.17240699\n  0.14784153  0.12708194 -0.41551192 -0.2560797 ]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.12075831 -0.18368868  0.03989088 -0.1546627   0.68043377]\n [ 0.6249434   0.72870625  0.26478475 -0.12139797  0.87006453]\n [ 0.66474897 -0.23748974  0.45617744 -1.41935695 -2.01659962]\n [-0.17571151  0.83210472 -0.59905529  1.70449342 -0.91797548]\n [-0.78357159 -0.21951533  1.67588895  0.90409756  0.69133763]\n [-0.45116759 -0.92011722 -1.83768673 -0.91317336  0.69273917]]", "y": "[ 0.71836554 -0.6455296  -0.06694882  1.19520639  0.82187118 -2.02296469]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "sparse_cg", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.05630007  0.05755984  0.41383827  0.56980678 -0.28161229]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-1.34744610e+00 -1.42123849e+00  2.69621717e+00 -8.15689295e-01\n  -5.97985445e-01 -7.51096548e-01  6.20696354e-01 -7.06333156e-01\n  -3.30156484e-01 -4.14033914e-01]\n [ 4.59474338e-01 -2.25773440e-01 -4.35190405e-01 -3.34219342e-01\n   2.68420727e-01  5.68216035e-01  1.45677896e-01  2.73242598e-01\n  -4.80157370e-01 -1.91027801e-01]\n [-2.86981321e-01 -5.28114585e-01 -9.80840823e-01 -1.28610971e-01\n  -5.61692080e-01 -1.12849953e+00  3.05988254e-01  2.66327469e-04\n  -6.54708080e-02  1.21052321e+00]\n [ 2.01554751e-01  1.42443238e+00 -4.89384041e-01  9.63045278e-02\n  -8.44721235e-01 -3.69098337e-01 -7.35643666e-01  5.96012160e-01\n  -6.12508615e-02 -6.83717194e-01]\n [ 9.73398328e-01  7.50694137e-01 -7.90801907e-01  1.18221508e+00\n   1.73597803e+00  1.68047838e+00 -3.36718838e-01 -1.63187930e-01\n   9.37035523e-01  7.82556999e-02]]", "y": "[ 1.09139308  1.06348225 -0.52622442 -0.44120035 -1.18745056]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "sparse_cg", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.07631312 -0.28699913  0.12611882 -0.39036136 -0.04755426  0.17240699\n  0.14784153  0.12708194 -0.41551192 -0.2560797 ]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.12075831 -0.18368868  0.03989088 -0.1546627   0.68043377]\n [ 0.6249434   0.72870625  0.26478475 -0.12139797  0.87006453]\n [ 0.66474897 -0.23748974  0.45617744 -1.41935695 -2.01659962]\n [-0.17571151  0.83210472 -0.59905529  1.70449342 -0.91797548]\n [-0.78357159 -0.21951533  1.67588895  0.90409756  0.69133763]\n [-0.45116759 -0.92011722 -1.83768673 -0.91317336  0.69273917]]", "y": "[ 0.71836554 -0.6455296  -0.06694882  1.19520639  0.82187118 -2.02296469]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.05630007  0.05755984  0.41383827  0.56980678 -0.28161229]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.12075831 -0.18368868  0.03989088 -0.1546627   0.68043377]\n [ 0.6249434   0.72870625  0.26478475 -0.12139797  0.87006453]\n [ 0.66474897 -0.23748974  0.45617744 -1.41935695 -2.01659962]\n [-0.17571151  0.83210472 -0.59905529  1.70449342 -0.91797548]\n [-0.78357159 -0.21951533  1.67588895  0.90409756  0.69133763]\n [-0.45116759 -0.92011722 -1.83768673 -0.91317336  0.69273917]]", "y": "[ 0.71836554 -0.6455296  -0.06694882  1.19520639  0.82187118 -2.02296469]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1. 1. 1. 1. 1. 1.]", "max_iter": null, "tol": 0.001, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.05630007  0.05755984  0.41383827  0.56980678 -0.28161229]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-1.34744610e+00 -1.42123849e+00  2.69621717e+00 -8.15689295e-01\n  -5.97985445e-01 -7.51096548e-01  6.20696354e-01 -7.06333156e-01\n  -3.30156484e-01 -4.14033914e-01]\n [ 4.59474338e-01 -2.25773440e-01 -4.35190405e-01 -3.34219342e-01\n   2.68420727e-01  5.68216035e-01  1.45677896e-01  2.73242598e-01\n  -4.80157370e-01 -1.91027801e-01]\n [-2.86981321e-01 -5.28114585e-01 -9.80840823e-01 -1.28610971e-01\n  -5.61692080e-01 -1.12849953e+00  3.05988254e-01  2.66327469e-04\n  -6.54708080e-02  1.21052321e+00]\n [ 2.01554751e-01  1.42443238e+00 -4.89384041e-01  9.63045278e-02\n  -8.44721235e-01 -3.69098337e-01 -7.35643666e-01  5.96012160e-01\n  -6.12508615e-02 -6.83717194e-01]\n [ 9.73398328e-01  7.50694137e-01 -7.90801907e-01  1.18221508e+00\n   1.73597803e+00  1.68047838e+00 -3.36718838e-01 -1.63187930e-01\n   9.37035523e-01  7.82556999e-02]]", "y": "[ 1.09139308  1.06348225 -0.52622442 -0.44120035 -1.18745056]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.07631312 -0.28699913  0.12611882 -0.39036136 -0.04755426  0.17240699\n  0.14784153  0.12708194 -0.41551192 -0.2560797 ]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-1.34744610e+00 -1.42123849e+00  2.69621717e+00 -8.15689295e-01\n  -5.97985445e-01 -7.51096548e-01  6.20696354e-01 -7.06333156e-01\n  -3.30156484e-01 -4.14033914e-01]\n [ 4.59474338e-01 -2.25773440e-01 -4.35190405e-01 -3.34219342e-01\n   2.68420727e-01  5.68216035e-01  1.45677896e-01  2.73242598e-01\n  -4.80157370e-01 -1.91027801e-01]\n [-2.86981321e-01 -5.28114585e-01 -9.80840823e-01 -1.28610971e-01\n  -5.61692080e-01 -1.12849953e+00  3.05988254e-01  2.66327469e-04\n  -6.54708080e-02  1.21052321e+00]\n [ 2.01554751e-01  1.42443238e+00 -4.89384041e-01  9.63045278e-02\n  -8.44721235e-01 -3.69098337e-01 -7.35643666e-01  5.96012160e-01\n  -6.12508615e-02 -6.83717194e-01]\n [ 9.73398328e-01  7.50694137e-01 -7.90801907e-01  1.18221508e+00\n   1.73597803e+00  1.68047838e+00 -3.36718838e-01 -1.63187930e-01\n   9.37035523e-01  7.82556999e-02]]", "y": "[ 1.09139308  1.06348225 -0.52622442 -0.44120035 -1.18745056]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1. 1. 1. 1. 1.]", "max_iter": null, "tol": 0.001, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.07631312 -0.28699913  0.12611882 -0.39036136 -0.04755426  0.17240699\n  0.14784153  0.12708194 -0.41551192 -0.2560797 ]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'list of 1 int']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.12075831 -0.18368868  0.03989088 -0.1546627   0.68043377]\n [ 0.6249434   0.72870625  0.26478475 -0.12139797  0.87006453]\n [ 0.66474897 -0.23748974  0.45617744 -1.41935695 -2.01659962]\n [-0.17571151  0.83210472 -0.59905529  1.70449342 -0.91797548]\n [-0.78357159 -0.21951533  1.67588895  0.90409756  0.69133763]\n [-0.45116759 -0.92011722 -1.83768673 -0.91317336  0.69273917]]", "y": "[ 0.71836554 -0.6455296  -0.06694882  1.19520639  0.82187118 -2.02296469]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "lsqr", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.05630007  0.05755984  0.41383827  0.56980678 -0.28161229]", "[5]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'list of 1 int']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-1.34744610e+00 -1.42123849e+00  2.69621717e+00 -8.15689295e-01\n  -5.97985445e-01 -7.51096548e-01  6.20696354e-01 -7.06333156e-01\n  -3.30156484e-01 -4.14033914e-01]\n [ 4.59474338e-01 -2.25773440e-01 -4.35190405e-01 -3.34219342e-01\n   2.68420727e-01  5.68216035e-01  1.45677896e-01  2.73242598e-01\n  -4.80157370e-01 -1.91027801e-01]\n [-2.86981321e-01 -5.28114585e-01 -9.80840823e-01 -1.28610971e-01\n  -5.61692080e-01 -1.12849953e+00  3.05988254e-01  2.66327469e-04\n  -6.54708080e-02  1.21052321e+00]\n [ 2.01554751e-01  1.42443238e+00 -4.89384041e-01  9.63045278e-02\n  -8.44721235e-01 -3.69098337e-01 -7.35643666e-01  5.96012160e-01\n  -6.12508615e-02 -6.83717194e-01]\n [ 9.73398328e-01  7.50694137e-01 -7.90801907e-01  1.18221508e+00\n   1.73597803e+00  1.68047838e+00 -3.36718838e-01 -1.63187930e-01\n   9.37035523e-01  7.82556999e-02]]", "y": "[ 1.09139308  1.06348225 -0.52622442 -0.44120035 -1.18745056]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "lsqr", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.07631312 -0.28699913  0.12611882 -0.39036136 -0.04755426  0.17240699\n  0.14784153  0.12708194 -0.41551192 -0.2560797 ]", "[4]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'list of 1 int']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.12075831 -0.18368868  0.03989088 -0.1546627   0.68043377]\n [ 0.6249434   0.72870625  0.26478475 -0.12139797  0.87006453]\n [ 0.66474897 -0.23748974  0.45617744 -1.41935695 -2.01659962]\n [-0.17571151  0.83210472 -0.59905529  1.70449342 -0.91797548]\n [-0.78357159 -0.21951533  1.67588895  0.90409756  0.69133763]\n [-0.45116759 -0.92011722 -1.83768673 -0.91317336  0.69273917]]", "y": "[ 0.71836554 -0.6455296  -0.06694882  1.19520639  0.82187118 -2.02296469]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "sag", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.05384682  0.05957079  0.41359992  0.56823295 -0.28147864]", "[26]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'list of 1 int']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.12075831 -0.18368868  0.03989088 -0.1546627   0.68043377]\n [ 0.6249434   0.72870625  0.26478475 -0.12139797  0.87006453]\n [ 0.66474897 -0.23748974  0.45617744 -1.41935695 -2.01659962]\n [-0.17571151  0.83210472 -0.59905529  1.70449342 -0.91797548]\n [-0.78357159 -0.21951533  1.67588895  0.90409756  0.69133763]\n [-0.45116759 -0.92011722 -1.83768673 -0.91317336  0.69273917]]", "y": "[ 0.71836554 -0.6455296  -0.06694882  1.19520639  0.82187118 -2.02296469]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1. 1. 1. 1. 1. 1.]", "max_iter": null, "tol": 0.001, "solver": "sag", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.05311893  0.06054647  0.41395818  0.5679793  -0.28168992]", "[23]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'list of 1 int']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-1.34744610e+00 -1.42123849e+00  2.69621717e+00 -8.15689295e-01\n  -5.97985445e-01 -7.51096548e-01  6.20696354e-01 -7.06333156e-01\n  -3.30156484e-01 -4.14033914e-01]\n [ 4.59474338e-01 -2.25773440e-01 -4.35190405e-01 -3.34219342e-01\n   2.68420727e-01  5.68216035e-01  1.45677896e-01  2.73242598e-01\n  -4.80157370e-01 -1.91027801e-01]\n [-2.86981321e-01 -5.28114585e-01 -9.80840823e-01 -1.28610971e-01\n  -5.61692080e-01 -1.12849953e+00  3.05988254e-01  2.66327469e-04\n  -6.54708080e-02  1.21052321e+00]\n [ 2.01554751e-01  1.42443238e+00 -4.89384041e-01  9.63045278e-02\n  -8.44721235e-01 -3.69098337e-01 -7.35643666e-01  5.96012160e-01\n  -6.12508615e-02 -6.83717194e-01]\n [ 9.73398328e-01  7.50694137e-01 -7.90801907e-01  1.18221508e+00\n   1.73597803e+00  1.68047838e+00 -3.36718838e-01 -1.63187930e-01\n   9.37035523e-01  7.82556999e-02]]", "y": "[ 1.09139308  1.06348225 -0.52622442 -0.44120035 -1.18745056]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "sag", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.07557786 -0.28599096  0.12646638 -0.38869664 -0.04739987  0.1715201\n  0.14728407  0.12624052 -0.4135857  -0.25512077]", "[30]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'list of 1 int']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-1.34744610e+00 -1.42123849e+00  2.69621717e+00 -8.15689295e-01\n  -5.97985445e-01 -7.51096548e-01  6.20696354e-01 -7.06333156e-01\n  -3.30156484e-01 -4.14033914e-01]\n [ 4.59474338e-01 -2.25773440e-01 -4.35190405e-01 -3.34219342e-01\n   2.68420727e-01  5.68216035e-01  1.45677896e-01  2.73242598e-01\n  -4.80157370e-01 -1.91027801e-01]\n [-2.86981321e-01 -5.28114585e-01 -9.80840823e-01 -1.28610971e-01\n  -5.61692080e-01 -1.12849953e+00  3.05988254e-01  2.66327469e-04\n  -6.54708080e-02  1.21052321e+00]\n [ 2.01554751e-01  1.42443238e+00 -4.89384041e-01  9.63045278e-02\n  -8.44721235e-01 -3.69098337e-01 -7.35643666e-01  5.96012160e-01\n  -6.12508615e-02 -6.83717194e-01]\n [ 9.73398328e-01  7.50694137e-01 -7.90801907e-01  1.18221508e+00\n   1.73597803e+00  1.68047838e+00 -3.36718838e-01 -1.63187930e-01\n   9.37035523e-01  7.82556999e-02]]", "y": "[ 1.09139308  1.06348225 -0.52622442 -0.44120035 -1.18745056]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1. 1. 1. 1. 1.]", "max_iter": null, "tol": 0.001, "solver": "sag", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.07524183 -0.28583684  0.1268623  -0.3885418  -0.04765074  0.17112329\n  0.14718007  0.12607951 -0.41332712 -0.25509506]", "[27]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "int", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 1.24583786  0.69899778 -1.06789033  0.27535714  0.14323544  0.63422963]\n [-0.58445684 -1.02451664  1.36366105  0.08630644  0.41626766  1.18131171]\n [-0.66138102  0.32551886 -0.29577072 -0.36166358 -0.5595031  -1.81554134]\n [ 1.24583786  0.69899778 -1.06789033  0.27535714  0.14323544  0.63422963]\n [-0.58445684 -1.02451664  1.36366105  0.08630644  0.41626766  1.18131171]\n [-0.66138102  0.32551886 -0.29577072 -0.36166358 -0.5595031  -1.81554134]]", "y": "[ 0.71640317 -0.64749197 -0.0689112   0.71640317 -0.64749197 -0.0689112 ]"}, "kwargs": {"alpha": 0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.23482447  0.17829881 -0.25892826  0.03750263 -0.00530701  0.02072755]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]", "alpha": "float"}, "kwargs": {"sample_weight": "np.ndarray[float64]", "solver": "str", "max_iter": "null value in the ground truth", "tol": "float", "verbose": "int", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool", "X_scale": "null value in the ground truth", "X_offset": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.95008842 -0.15135721 -0.10321885  0.4105985   0.14404357]\n [ 1.45427351  0.76103773  0.12167502  0.44386323  0.33367433]\n [ 1.49407907 -0.20515826  0.3130677  -0.85409574 -2.55298982]\n [ 0.6536186   0.8644362  -0.74216502  2.26975462 -1.45436567]\n [ 0.04575852 -0.18718385  1.53277921  1.46935877  0.15494743]\n [ 0.37816252 -0.88778575 -1.98079647 -0.34791215  0.15634897]]", "y": "[ 1.76405235  0.40015721  0.97873798  2.2408932   1.86755799 -0.97727788]", "alpha": 1.0}, "kwargs": {"sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "solver": "cholesky", "max_iter": null, "tol": 0.001, "verbose": 0, "random_state": null, "return_n_iter": false, "return_intercept": false, "X_scale": null, "X_offset": null}}, "return": "[ 0.49781208 -0.29396082  0.4021941   0.83593718 -0.29756056]"}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]", "alpha": "float"}, "kwargs": {"sample_weight": "null value in the ground truth", "solver": "str", "max_iter": "null value in the ground truth", "tol": "float", "verbose": "int", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool", "X_scale": "null value in the ground truth", "X_offset": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 1.22659569 -0.19540718 -0.13325896  0.5300963   0.18596503]\n [ 1.87969442  0.98366529  0.1572688   0.57370724  0.4312846 ]\n [ 1.64374677 -0.22570976  0.34442891 -0.93965382 -2.80873271]\n [ 0.69447592  0.91847162 -0.78855734  2.4116357  -1.54527725]\n [ 0.05248142 -0.21468514  1.75797705  1.6852388   0.17771249]\n [ 0.44161073 -1.03673868 -2.31313504 -0.40628495  0.18258124]]", "y": "[ 2.27745014  0.51721583  1.07678196  2.38097017  2.14194194 -1.14124583]", "alpha": 1.0}, "kwargs": {"sample_weight": null, "solver": "cholesky", "max_iter": null, "tol": 0.001, "verbose": 0, "random_state": null, "return_n_iter": false, "return_intercept": false, "X_scale": null, "X_offset": null}}, "return": "[ 0.49781208 -0.29396082  0.4021941   0.83593718 -0.29756056]"}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]", "alpha": "float"}, "kwargs": {"sample_weight": "np.ndarray[float64]", "solver": "str", "max_iter": "null value in the ground truth", "tol": "float", "verbose": "int", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool", "X_scale": "null value in the ground truth", "X_offset": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-1.61389785 -0.21274028 -0.89546656  0.3869025  -0.51080514]\n [-1.18063218 -0.02818223  0.42833187  0.06651722  0.3024719 ]\n [-0.63432209 -0.36274117 -0.67246045 -0.35955316 -0.81314628]\n [-1.7262826   0.17742614 -0.40178094 -1.63019835  0.46278226]\n [-0.90729836  0.0519454   0.72909056  0.12898291  1.13940068]\n [-1.23482582  0.40234164 -0.68481009 -0.87079715 -0.57884966]]", "y": "[-1.70627019  1.9507754  -0.50965218 -0.4380743  -1.25279536  0.77749036]", "alpha": 0.01}, "kwargs": {"sample_weight": "[1.58651293 1.02010755 1.82894003 1.00469548 1.67781654 1.27000797]", "solver": "cholesky", "max_iter": null, "tol": 0.001, "verbose": 0, "random_state": null, "return_n_iter": false, "return_intercept": false, "X_scale": null, "X_offset": null}}, "return": "[-0.41948097  1.93389903  3.94986994 -0.73603122 -3.36175236]"}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]", "alpha": "float"}, "kwargs": {"sample_weight": "null value in the ground truth", "solver": "str", "max_iter": "null value in the ground truth", "tol": "float", "verbose": "int", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool", "X_scale": "null value in the ground truth", "X_offset": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-2.03281497 -0.26796097 -1.12790152  0.48733022 -0.64339409]\n [-1.19244292 -0.02846416  0.43261679  0.06718264  0.30549775]\n [-0.85784647 -0.49056502 -0.90942414 -0.48625362 -1.09968528]\n [-1.73033072  0.1778422  -0.40272311 -1.63402114  0.46386747]\n [-1.17522863  0.06728516  0.94439507  0.16707228  1.47587206]\n [-1.39158239  0.45341743 -0.7717442  -0.98134163 -0.65233249]]", "y": "[-2.14916427  1.97029044 -0.68924499 -0.43910158 -1.62275282  0.87618988]", "alpha": 0.01}, "kwargs": {"sample_weight": null, "solver": "cholesky", "max_iter": null, "tol": 0.001, "verbose": 0, "random_state": null, "return_n_iter": false, "return_intercept": false, "X_scale": null, "X_offset": null}}, "return": "[-0.41948097  1.93389903  3.94986994 -0.73603122 -3.36175236]"}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]", "alpha": "float"}, "kwargs": {"sample_weight": "np.ndarray[float64]", "solver": "str", "max_iter": "null value in the ground truth", "tol": "float", "verbose": "int", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool", "X_scale": "null value in the ground truth", "X_offset": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.17992484 -1.07075262  1.05445173 -0.40317695  1.22244507  0.20827498\n   0.97663904  0.3563664   0.70657317  0.01050002]\n [ 1.78587049  0.12691209  0.40198936  1.8831507  -1.34775906 -1.270485\n   0.96939671 -1.17312341  1.94362119 -0.41361898]\n [-0.74745481  1.92294203  1.48051479  1.86755896  0.90604466 -0.86122569\n   1.91006495 -0.26800337  0.8024564   0.94725197]\n [-0.15501009  0.61407937  0.92220667  0.37642553 -1.09940079  0.29823817\n   1.3263859  -0.69456786 -0.14963454 -0.43515355]\n [ 1.84926373  0.67229476  0.40746184 -0.76991607  0.53924919 -0.67433266\n   0.03183056 -0.63584608  0.67643329  0.57659082]]", "y": "[ 0.46566244 -1.53624369  1.48825219  1.89588918  1.17877957]", "alpha": 1.0}, "kwargs": {"sample_weight": "[1.7044144  1.03183893 1.16469416 1.6214784  1.57722859]", "solver": "cholesky", "max_iter": null, "tol": 0.001, "verbose": 0, "random_state": null, "return_n_iter": false, "return_intercept": false, "X_scale": null, "X_offset": null}}, "return": "[ 0.02237691  0.58351388  0.58242198 -0.60283493  0.04243502  0.28423317\n  0.50466544 -0.25811279 -0.39931444  0.12350216]"}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]", "alpha": "float"}, "kwargs": {"sample_weight": "null value in the ground truth", "solver": "str", "max_iter": "null value in the ground truth", "tol": "float", "verbose": "int", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool", "X_scale": "null value in the ground truth", "X_offset": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.23489767 -1.39790206  1.37662071 -0.5263605   1.59594144  0.2719097\n   1.27503374  0.46524782  0.92245404  0.01370812]\n [ 1.81407783  0.12891663  0.40833868  1.91289455 -1.36904655 -1.29055196\n   0.98470807 -1.19165257  1.97432015 -0.42015198]\n [-0.80666068  2.0752582   1.59778632  2.01548825  0.97781243 -0.92944334\n   2.06136114 -0.28923191  0.86601894  1.02228377]\n [-0.19738564  0.78195199  1.17431293  0.47933005 -1.39994711  0.37976839\n   1.68898378 -0.88444385 -0.19054056 -0.55411272]\n [ 2.32244892  0.84431994  0.5117222  -0.96692036  0.67723099 -0.84687929\n   0.03997529 -0.79854486  0.84951743  0.7241275 ]]", "y": "[ 0.60793732 -1.56050824  1.6061366   2.41417379  1.48040288]", "alpha": 1.0}, "kwargs": {"sample_weight": null, "solver": "cholesky", "max_iter": null, "tol": 0.001, "verbose": 0, "random_state": null, "return_n_iter": false, "return_intercept": false, "X_scale": null, "X_offset": null}}, "return": "[ 0.02237691  0.58351388  0.58242198 -0.60283493  0.04243502  0.28423317\n  0.50466544 -0.25811279 -0.39931444  0.12350216]"}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]", "alpha": "float"}, "kwargs": {"sample_weight": "np.ndarray[float64]", "solver": "str", "max_iter": "null value in the ground truth", "tol": "float", "verbose": "int", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool", "X_scale": "null value in the ground truth", "X_offset": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.87736332 -1.6210875  -0.581673   -0.53783395 -1.55602368 -0.05446484\n  -1.81127879 -0.63117522 -0.92815918  1.49072192]\n [ 0.19549934 -0.47160433  1.81235465 -2.29413748  0.65120935 -1.13049645\n  -0.77734666  1.11593845  1.33945302 -1.76743365]\n [ 0.42441246  1.08930905 -0.38418568  0.63220141 -0.5496559   0.52112574\n   0.10834955  0.26166848 -0.91475533  0.85823779]\n [ 0.09433429 -1.48590386 -1.90058426 -1.1375792  -1.76203889 -0.28862322\n   1.04798222  0.24995754  0.04690446 -1.03224304]\n [ 0.40318568 -0.68405925  1.26232219 -2.00555659 -0.3320304  -0.2961004\n  -2.21836076 -0.18350288  0.39230806  0.24163481]]", "y": "[-0.20829876  0.71422382  2.28433335  1.56410258  0.61110371]", "alpha": 0.01}, "kwargs": {"sample_weight": "[1.08342244 1.55219247 1.58447607 1.96193638 1.29214753]", "solver": "cholesky", "max_iter": null, "tol": 0.001, "verbose": 0, "random_state": null, "return_n_iter": false, "return_intercept": false, "X_scale": null, "X_offset": null}}, "return": "[ 0.62436658  0.86647513 -0.0900838  -0.61166182 -0.95133022  0.00288615\n  0.00859232  1.13405719 -0.63936533  0.0130586 ]"}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]", "alpha": "float"}, "kwargs": {"sample_weight": "null value in the ground truth", "solver": "str", "max_iter": "null value in the ground truth", "tol": "float", "verbose": "int", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool", "X_scale": "null value in the ground truth", "X_offset": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.91322625 -1.68735075 -0.60544935 -0.55981835 -1.61962739 -0.05669114\n  -1.88531626 -0.65697501 -0.96609844  1.55165637]\n [ 0.24356679 -0.58755777  2.25795859 -2.85819744  0.8113223  -1.4084518\n  -0.96847301  1.39031443  1.66878455 -2.20199286]\n [ 0.53423331  1.37117836 -0.48359747  0.79578968 -0.69188472  0.6559721\n   0.13638605  0.32937774 -1.15145718  1.08031517]\n [ 0.13213323 -2.08129275 -2.66213202 -1.59339739 -2.4680727  -0.40427206\n   1.46789968  0.35011338  0.06569868 -1.44585394]\n [ 0.45831192 -0.7775884   1.4349153  -2.27976967 -0.37742781 -0.33658523\n  -2.52166984 -0.20859262  0.44594703  0.27467273]]", "y": "[-0.21681313  0.88983015  2.87542685  2.19082502  0.69465789]", "alpha": 0.01}, "kwargs": {"sample_weight": null, "solver": "cholesky", "max_iter": null, "tol": 0.001, "verbose": 0, "random_state": null, "return_n_iter": false, "return_intercept": false, "X_scale": null, "X_offset": null}}, "return": "[ 0.62436658  0.86647513 -0.0900838  -0.61166182 -0.95133022  0.00288615\n  0.00859232  1.13405719 -0.63936533  0.0130586 ]"}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]", "alpha": "float"}, "kwargs": {"sample_weight": "null value in the ground truth", "solver": "str", "max_iter": "null value in the ground truth", "tol": "float", "verbose": "int", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool", "X_scale": "null value in the ground truth", "X_offset": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.97727788  0.95008842 -0.15135721 -0.10321885  0.4105985   0.14404357\n   1.45427351  0.76103773  0.12167502  0.44386323]\n [ 0.33367433  1.49407907 -0.20515826  0.3130677  -0.85409574 -2.55298982\n   0.6536186   0.8644362  -0.74216502  2.26975462]\n [-1.45436567  0.04575852 -0.18718385  1.53277921  1.46935877  0.15494743\n   0.37816252 -0.88778575 -1.98079647 -0.34791215]\n [ 0.15634897  1.23029068  1.20237985 -0.38732682 -0.30230275 -1.04855297\n  -1.42001794 -1.70627019  1.9507754  -0.50965218]\n [-0.4380743  -1.25279536  0.77749036 -1.61389785 -0.21274028 -0.89546656\n   0.3869025  -0.51080514 -1.18063218 -0.02818223]]", "y": "[1.76405235 0.40015721 0.97873798 2.2408932  1.86755799]", "alpha": 1.0}, "kwargs": {"sample_weight": null, "solver": "sparse_cg", "max_iter": null, "tol": 0.0, "verbose": 1, "random_state": null, "return_n_iter": false, "return_intercept": false, "X_scale": null, "X_offset": null}}, "return": "[-0.720426    0.38412553  0.50925082 -0.49132531  0.23922424 -0.38388094\n  0.38997221 -0.43976137  0.10560099 -0.08950555]"}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.09615629 -0.18603902  0.02994015 -0.11752168  0.5649932 ]\n [ 0.60034138  0.72635591  0.25483402 -0.08425695  0.75462395]\n [ 0.64014694 -0.23984008  0.44622671 -1.38221592 -2.13204019]\n [-0.20031353  0.82975438 -0.60900601  1.74163444 -1.03341605]\n [-0.80817361 -0.22186566  1.66593822  0.94123859  0.57589705]\n [-0.47576961 -0.92246756 -1.84763746 -0.87603233  0.57729859]]", "y": "[ 0.7531266  -0.61076854 -0.03218777  1.22996745  0.85663224 -1.98820363]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "svd", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.11102966 -0.04981368  0.43137282  0.624218   -0.28724251]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.09615629 -0.18603902  0.02994015 -0.11752168  0.5649932 ]\n [ 0.60034138  0.72635591  0.25483402 -0.08425695  0.75462395]\n [ 0.64014694 -0.23984008  0.44622671 -1.38221592 -2.13204019]\n [-0.20031353  0.82975438 -0.60900601  1.74163444 -1.03341605]\n [-0.80817361 -0.22186566  1.66593822  0.94123859  0.57589705]\n [-0.47576961 -0.92246756 -1.84763746 -0.87603233  0.57729859]]", "y": "[ 0.7531266  -0.61076854 -0.03218777  1.22996745  0.85663224 -1.98820363]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.11102966 -0.04981368  0.43137282  0.624218   -0.28724251]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'list of 1 int']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.09615629 -0.18603902  0.02994015 -0.11752168  0.5649932 ]\n [ 0.60034138  0.72635591  0.25483402 -0.08425695  0.75462395]\n [ 0.64014694 -0.23984008  0.44622671 -1.38221592 -2.13204019]\n [-0.20031353  0.82975438 -0.60900601  1.74163444 -1.03341605]\n [-0.80817361 -0.22186566  1.66593822  0.94123859  0.57589705]\n [-0.47576961 -0.92246756 -1.84763746 -0.87603233  0.57729859]]", "y": "[ 0.7531266  -0.61076854 -0.03218777  1.22996745  0.85663224 -1.98820363]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "lsqr", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.11102966 -0.04981368  0.43137282  0.624218   -0.28724251]", "[5]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.09615629 -0.18603902  0.02994015 -0.11752168  0.5649932 ]\n [ 0.60034138  0.72635591  0.25483402 -0.08425695  0.75462395]\n [ 0.64014694 -0.23984008  0.44622671 -1.38221592 -2.13204019]\n [-0.20031353  0.82975438 -0.60900601  1.74163444 -1.03341605]\n [-0.80817361 -0.22186566  1.66593822  0.94123859  0.57589705]\n [-0.47576961 -0.92246756 -1.84763746 -0.87603233  0.57729859]]", "y": "[ 0.7531266  -0.61076854 -0.03218777  1.22996745  0.85663224 -1.98820363]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "sparse_cg", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.11102966 -0.04981368  0.43137282  0.624218   -0.28724251]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.95008842 -0.15135721 -0.10321885  0.4105985   0.14404357]\n [ 1.45427351  0.76103773  0.12167502  0.44386323  0.33367433]\n [ 1.49407907 -0.20515826  0.3130677  -0.85409574 -2.55298982]\n [ 0.6536186   0.8644362  -0.74216502  2.26975462 -1.45436567]\n [ 0.04575852 -0.18718385  1.53277921  1.46935877  0.15494743]\n [ 0.37816252 -0.88778575 -1.98079647 -0.34791215  0.15634897]]", "y": "[ 1.76405235  0.40015721  0.97873798  2.2408932   1.86755799 -0.97727788]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "svd", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.49781208 -0.29396082  0.4021941   0.83593718 -0.29756056]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.95008842 -0.15135721 -0.10321885  0.4105985   0.14404357]\n [ 1.45427351  0.76103773  0.12167502  0.44386323  0.33367433]\n [ 1.49407907 -0.20515826  0.3130677  -0.85409574 -2.55298982]\n [ 0.6536186   0.8644362  -0.74216502  2.26975462 -1.45436567]\n [ 0.04575852 -0.18718385  1.53277921  1.46935877  0.15494743]\n [ 0.37816252 -0.88778575 -1.98079647 -0.34791215  0.15634897]]", "y": "[ 1.76405235  0.40015721  0.97873798  2.2408932   1.86755799 -0.97727788]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.49781208 -0.29396082  0.4021941   0.83593718 -0.29756056]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'list of 1 int']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.95008842 -0.15135721 -0.10321885  0.4105985   0.14404357]\n [ 1.45427351  0.76103773  0.12167502  0.44386323  0.33367433]\n [ 1.49407907 -0.20515826  0.3130677  -0.85409574 -2.55298982]\n [ 0.6536186   0.8644362  -0.74216502  2.26975462 -1.45436567]\n [ 0.04575852 -0.18718385  1.53277921  1.46935877  0.15494743]\n [ 0.37816252 -0.88778575 -1.98079647 -0.34791215  0.15634897]]", "y": "[ 1.76405235  0.40015721  0.97873798  2.2408932   1.86755799 -0.97727788]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "lsqr", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.49781208 -0.29396082  0.4021941   0.83593718 -0.29756056]", "[5]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.95008842 -0.15135721 -0.10321885  0.4105985   0.14404357]\n [ 1.45427351  0.76103773  0.12167502  0.44386323  0.33367433]\n [ 1.49407907 -0.20515826  0.3130677  -0.85409574 -2.55298982]\n [ 0.6536186   0.8644362  -0.74216502  2.26975462 -1.45436567]\n [ 0.04575852 -0.18718385  1.53277921  1.46935877  0.15494743]\n [ 0.37816252 -0.88778575 -1.98079647 -0.34791215  0.15634897]]", "y": "[ 1.76405235  0.40015721  0.97873798  2.2408932   1.86755799 -0.97727788]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "sparse_cg", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.49781208 -0.29396082  0.4021941   0.83593718 -0.29756056]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.09615629 -0.18603902  0.02994015 -0.11752168  0.5649932 ]\n [ 0.60034138  0.72635591  0.25483402 -0.08425695  0.75462395]\n [ 0.64014694 -0.23984008  0.44622671 -1.38221592 -2.13204019]\n [-0.20031353  0.82975438 -0.60900601  1.74163444 -1.03341605]\n [-0.80817361 -0.22186566  1.66593822  0.94123859  0.57589705]\n [-0.47576961 -0.92246756 -1.84763746 -0.87603233  0.57729859]]", "y": "[ 0.7531266  -0.61076854 -0.03218777  1.22996745  0.85663224 -1.98820363]"}, "kwargs": {"alpha": 0.01, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "svd", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 3.8074474  -3.49052058  0.40308478  2.82286174 -0.20084511]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.09615629 -0.18603902  0.02994015 -0.11752168  0.5649932 ]\n [ 0.60034138  0.72635591  0.25483402 -0.08425695  0.75462395]\n [ 0.64014694 -0.23984008  0.44622671 -1.38221592 -2.13204019]\n [-0.20031353  0.82975438 -0.60900601  1.74163444 -1.03341605]\n [-0.80817361 -0.22186566  1.66593822  0.94123859  0.57589705]\n [-0.47576961 -0.92246756 -1.84763746 -0.87603233  0.57729859]]", "y": "[ 0.7531266  -0.61076854 -0.03218777  1.22996745  0.85663224 -1.98820363]"}, "kwargs": {"alpha": 0.01, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 3.8074474  -3.49052058  0.40308478  2.82286174 -0.20084511]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'list of 1 int']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.09615629 -0.18603902  0.02994015 -0.11752168  0.5649932 ]\n [ 0.60034138  0.72635591  0.25483402 -0.08425695  0.75462395]\n [ 0.64014694 -0.23984008  0.44622671 -1.38221592 -2.13204019]\n [-0.20031353  0.82975438 -0.60900601  1.74163444 -1.03341605]\n [-0.80817361 -0.22186566  1.66593822  0.94123859  0.57589705]\n [-0.47576961 -0.92246756 -1.84763746 -0.87603233  0.57729859]]", "y": "[ 0.7531266  -0.61076854 -0.03218777  1.22996745  0.85663224 -1.98820363]"}, "kwargs": {"alpha": 0.01, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "lsqr", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 3.8074474  -3.49052058  0.40308478  2.82286174 -0.20084511]", "[5]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.09615629 -0.18603902  0.02994015 -0.11752168  0.5649932 ]\n [ 0.60034138  0.72635591  0.25483402 -0.08425695  0.75462395]\n [ 0.64014694 -0.23984008  0.44622671 -1.38221592 -2.13204019]\n [-0.20031353  0.82975438 -0.60900601  1.74163444 -1.03341605]\n [-0.80817361 -0.22186566  1.66593822  0.94123859  0.57589705]\n [-0.47576961 -0.92246756 -1.84763746 -0.87603233  0.57729859]]", "y": "[ 0.7531266  -0.61076854 -0.03218777  1.22996745  0.85663224 -1.98820363]"}, "kwargs": {"alpha": 0.01, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "sparse_cg", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 3.8074474  -3.49052058  0.40308478  2.82286174 -0.20084511]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.95008842 -0.15135721 -0.10321885  0.4105985   0.14404357]\n [ 1.45427351  0.76103773  0.12167502  0.44386323  0.33367433]\n [ 1.49407907 -0.20515826  0.3130677  -0.85409574 -2.55298982]\n [ 0.6536186   0.8644362  -0.74216502  2.26975462 -1.45436567]\n [ 0.04575852 -0.18718385  1.53277921  1.46935877  0.15494743]\n [ 0.37816252 -0.88778575 -1.98079647 -0.34791215  0.15634897]]", "y": "[ 1.76405235  0.40015721  0.97873798  2.2408932   1.86755799 -0.97727788]"}, "kwargs": {"alpha": 0.01, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "svd", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.58214011 -0.59989167  0.4729162   0.97717397 -0.30146239]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.95008842 -0.15135721 -0.10321885  0.4105985   0.14404357]\n [ 1.45427351  0.76103773  0.12167502  0.44386323  0.33367433]\n [ 1.49407907 -0.20515826  0.3130677  -0.85409574 -2.55298982]\n [ 0.6536186   0.8644362  -0.74216502  2.26975462 -1.45436567]\n [ 0.04575852 -0.18718385  1.53277921  1.46935877  0.15494743]\n [ 0.37816252 -0.88778575 -1.98079647 -0.34791215  0.15634897]]", "y": "[ 1.76405235  0.40015721  0.97873798  2.2408932   1.86755799 -0.97727788]"}, "kwargs": {"alpha": 0.01, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.58214011 -0.59989167  0.4729162   0.97717397 -0.30146239]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'list of 1 int']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.95008842 -0.15135721 -0.10321885  0.4105985   0.14404357]\n [ 1.45427351  0.76103773  0.12167502  0.44386323  0.33367433]\n [ 1.49407907 -0.20515826  0.3130677  -0.85409574 -2.55298982]\n [ 0.6536186   0.8644362  -0.74216502  2.26975462 -1.45436567]\n [ 0.04575852 -0.18718385  1.53277921  1.46935877  0.15494743]\n [ 0.37816252 -0.88778575 -1.98079647 -0.34791215  0.15634897]]", "y": "[ 1.76405235  0.40015721  0.97873798  2.2408932   1.86755799 -0.97727788]"}, "kwargs": {"alpha": 0.01, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "lsqr", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.58214011 -0.59989167  0.4729162   0.97717397 -0.30146239]", "[5]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.95008842 -0.15135721 -0.10321885  0.4105985   0.14404357]\n [ 1.45427351  0.76103773  0.12167502  0.44386323  0.33367433]\n [ 1.49407907 -0.20515826  0.3130677  -0.85409574 -2.55298982]\n [ 0.6536186   0.8644362  -0.74216502  2.26975462 -1.45436567]\n [ 0.04575852 -0.18718385  1.53277921  1.46935877  0.15494743]\n [ 0.37816252 -0.88778575 -1.98079647 -0.34791215  0.15634897]]", "y": "[ 1.76405235  0.40015721  0.97873798  2.2408932   1.86755799 -0.97727788]"}, "kwargs": {"alpha": 0.01, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 1e-06, "solver": "sparse_cg", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.58214011 -0.59989167  0.4729162   0.97717397 -0.30146239]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 2.07175223  0.10691843  0.97670679  1.92281677  1.12283569 -0.50133897\n   0.45660415 -0.43859138 -0.05149953  0.3084348 ]\n [ 0.45174346  1.16103473  0.75900653 -0.19640141 -0.30085907  0.80961324\n   1.00059481 -0.49239244  0.36478702 -0.95625944]\n [-2.24528993  0.36037982  0.862405   -1.06024144  1.52503232 -0.97842676\n  -0.44772575 -0.47441803  1.58449853  1.36719507]\n [ 0.46264731  0.08492374 -0.88981694 -2.29887289 -1.09263445  0.63228788\n   0.73680641  0.91514567 -0.3356075  -0.40446645]\n [-0.74085308 -1.71325672 -1.70830138  1.63269897 -1.25437448  0.03786461\n  -1.74627963  0.49025618 -1.56217853 -0.31490398]]", "y": "[-0.44982984  0.83253922 -0.06516841 -0.73499546  0.41745449]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.27643119  0.1502586   0.09430074  0.2201944  -0.14242159  0.18125642\n -0.04960506 -0.19240321  0.03593287 -0.25736954]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 2.07175223  0.10691843  0.97670679  1.92281677  1.12283569 -0.50133897\n   0.45660415 -0.43859138 -0.05149953  0.3084348 ]\n [ 0.45174346  1.16103473  0.75900653 -0.19640141 -0.30085907  0.80961324\n   1.00059481 -0.49239244  0.36478702 -0.95625944]\n [-2.24528993  0.36037982  0.862405   -1.06024144  1.52503232 -0.97842676\n  -0.44772575 -0.47441803  1.58449853  1.36719507]\n [ 0.46264731  0.08492374 -0.88981694 -2.29887289 -1.09263445  0.63228788\n   0.73680641  0.91514567 -0.3356075  -0.40446645]\n [-0.74085308 -1.71325672 -1.70830138  1.63269897 -1.25437448  0.03786461\n  -1.74627963  0.49025618 -1.56217853 -0.31490398]]", "y": "[[-0.44982984]\n [ 0.83253922]\n [-0.06516841]\n [-0.73499546]\n [ 0.41745449]]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[-0.27643119  0.1502586   0.09430074  0.2201944  -0.14242159  0.18125642\n  -0.04960506 -0.19240321  0.03593287 -0.25736954]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 2.07175223  0.10691843  0.97670679  1.92281677  1.12283569 -0.50133897\n   0.45660415 -0.43859138 -0.05149953  0.3084348 ]\n [ 0.45174346  1.16103473  0.75900653 -0.19640141 -0.30085907  0.80961324\n   1.00059481 -0.49239244  0.36478702 -0.95625944]\n [-2.24528993  0.36037982  0.862405   -1.06024144  1.52503232 -0.97842676\n  -0.44772575 -0.47441803  1.58449853  1.36719507]\n [ 0.46264731  0.08492374 -0.88981694 -2.29887289 -1.09263445  0.63228788\n   0.73680641  0.91514567 -0.3356075  -0.40446645]\n [-0.74085308 -1.71325672 -1.70830138  1.63269897 -1.25437448  0.03786461\n  -1.74627963  0.49025618 -1.56217853 -0.31490398]]", "y": "[[-0.44982984 -0.44982984]\n [ 0.83253922  0.83253922]\n [-0.06516841 -0.06516841]\n [-0.73499546 -0.73499546]\n [ 0.41745449  0.41745449]]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[-0.27643119  0.1502586   0.09430074  0.2201944  -0.14242159  0.18125642\n  -0.04960506 -0.19240321  0.03593287 -0.25736954]\n [-0.27643119  0.1502586   0.09430074  0.2201944  -0.14242159  0.18125642\n  -0.04960506 -0.19240321  0.03593287 -0.25736954]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['list of 1 float', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.5]\n [ 0.5]]", "y": "[-0.5  0.5]"}, "kwargs": {"alpha": 0.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[1.]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.5]\n [ 0.5]]", "y": "[[-0.5 -0.5]\n [ 0.5  0.5]]"}, "kwargs": {"alpha": 0.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[1.]\n [1.]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.97727788  0.95008842 -0.15135721 -0.10321885]\n [ 0.4105985   0.14404357  1.45427351  0.76103773]\n [ 0.12167502  0.44386323  0.33367433  1.49407907]\n [-0.20515826  0.3130677  -0.85409574 -2.55298982]\n [ 0.6536186   0.8644362  -0.74216502  2.26975462]]", "y": "[1.76405235 0.40015721 0.97873798 2.2408932  1.86755799]"}, "kwargs": {"alpha": 0.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 1.08215509  3.00308855  0.03626734 -0.57333737]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "str", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.67578656 -0.32941689  0.75868929  1.67967162 -0.03016707 -0.50267209\n   1.54511755  0.65533014 -0.35161731  0.78759898]\n [-0.28434528 -0.65688234  0.35296303 -1.75663849 -1.52093153 -0.83082266\n  -1.04692639  0.20214274 -0.790167   -1.16726477]\n [ 1.64472118 -0.41692889  0.17852896 -1.26810643 -0.34039642 -0.15761254\n  -1.18508884  0.26359343 -0.48278161 -0.04665482]\n [-0.4226342   1.66112559  0.09750353 -0.90106917  1.02653121 -1.48937878\n   0.17476833 -2.07177472 -1.21032897  0.44190017]\n [ 0.91753899 -0.01978431 -0.00464753 -0.14446194 -1.27453569 -0.98837934\n  -0.49473404  0.94501763  0.46147537 -1.51800122]\n [ 0.50315638 -0.57623487 -0.56592125  0.76831805  1.23498582  0.66274499\n  -0.87331279 -0.42131697  0.44912051  1.22058406]\n [-0.30010183 -0.37681157 -0.99533422 -1.03956486  1.01651212  1.0877049\n  -0.10610539  0.89142831  0.4794931  -0.40008082]\n [ 0.54046801  1.34688398  0.07517472  1.72128541 -2.4157588   0.55336737\n   0.0529518  -0.41111194  0.20961785 -1.74252998]\n [-0.04059948  0.16595998  1.5888948  -0.36162846 -0.6045073  -0.77029218\n   0.88130685  0.21664652 -0.41190313  0.75830637]\n [ 0.27614996  0.7774924  -0.59105234 -0.17102039 -0.18812185 -1.73205008\n   0.26202501  0.14895068  0.12297053  0.0104518 ]\n [-1.23629833 -0.61179791 -0.23171376 -0.64563551  0.04270059  0.13551572\n   1.85209064  0.06247322  0.37540747  0.17059302]\n [-1.73969881 -0.21766647  0.17123097  2.61988387  0.01162534  0.03301221\n  -0.06880704 -1.28078263  1.26067989  0.99697197]\n [ 0.97010436 -1.10054005  1.51379507 -1.2452093   0.79084339  1.92192049\n  -1.02463159 -0.67840232  0.21750844 -0.25843672]\n [-1.37159102 -0.12258962 -0.95130296  0.63023419 -0.71543793  1.28139927\n  -0.81734856 -0.43416611  0.93137429 -0.98582538]\n [ 0.40653234  1.11599016 -1.49648248  0.34127562  0.46386909  0.51328774\n  -1.27104598 -1.4325612   0.63979864  0.54202361]\n [ 0.42956526  0.15529562 -0.56902397  0.38889546  0.49705877 -0.98288655\n   1.83167925  0.36172833 -1.07344642  0.90159254]\n [-0.79560926  0.59593201  1.26959633 -0.66404056  1.16736243  0.14424579\n   0.78796489  1.78468839 -0.12753104 -0.50869723]\n [-0.71044202 -1.00696288  0.03389905  0.49779373  0.4806771   0.55864812\n  -0.02109337  1.34142949 -0.14679976  2.9652081 ]\n [ 0.80473976 -1.04831015 -0.95989174  0.63911417 -0.01947649  0.44546536\n   0.43914236 -0.1849335  -0.72893664 -1.26980829]\n [-0.26744254  0.6652462   0.3250945  -1.08909702  0.37716723  0.11678225\n  -0.9179527   0.04162051  0.17606579 -0.89793136]]", "y": "[ 0.44909214 -0.84652026  0.66219529  0.850274    2.40596335  1.18025538\n -0.63906185  0.7252238  -0.70121596 -0.24319646 -1.16957918 -0.39292929\n -0.83562569 -1.1564784   1.53257807  0.55340825  0.20482212 -1.86078302\n -0.11681747 -0.60160482]"}, "kwargs": {"alpha": "0", "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.76217294  0.3584001  -0.05998943  0.34269954  0.40785902 -0.49453411\n -0.14817955  0.02351769  0.37187977 -0.28187883]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "str", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.67578656 -0.32941689  0.75868929  1.67967162 -0.03016707 -0.50267209\n   1.54511755  0.65533014 -0.35161731  0.78759898]\n [-0.28434528 -0.65688234  0.35296303 -1.75663849 -1.52093153 -0.83082266\n  -1.04692639  0.20214274 -0.790167   -1.16726477]\n [ 1.64472118 -0.41692889  0.17852896 -1.26810643 -0.34039642 -0.15761254\n  -1.18508884  0.26359343 -0.48278161 -0.04665482]\n [-0.4226342   1.66112559  0.09750353 -0.90106917  1.02653121 -1.48937878\n   0.17476833 -2.07177472 -1.21032897  0.44190017]\n [ 0.91753899 -0.01978431 -0.00464753 -0.14446194 -1.27453569 -0.98837934\n  -0.49473404  0.94501763  0.46147537 -1.51800122]\n [ 0.50315638 -0.57623487 -0.56592125  0.76831805  1.23498582  0.66274499\n  -0.87331279 -0.42131697  0.44912051  1.22058406]\n [-0.30010183 -0.37681157 -0.99533422 -1.03956486  1.01651212  1.0877049\n  -0.10610539  0.89142831  0.4794931  -0.40008082]\n [ 0.54046801  1.34688398  0.07517472  1.72128541 -2.4157588   0.55336737\n   0.0529518  -0.41111194  0.20961785 -1.74252998]\n [-0.04059948  0.16595998  1.5888948  -0.36162846 -0.6045073  -0.77029218\n   0.88130685  0.21664652 -0.41190313  0.75830637]\n [ 0.27614996  0.7774924  -0.59105234 -0.17102039 -0.18812185 -1.73205008\n   0.26202501  0.14895068  0.12297053  0.0104518 ]\n [-1.23629833 -0.61179791 -0.23171376 -0.64563551  0.04270059  0.13551572\n   1.85209064  0.06247322  0.37540747  0.17059302]\n [-1.73969881 -0.21766647  0.17123097  2.61988387  0.01162534  0.03301221\n  -0.06880704 -1.28078263  1.26067989  0.99697197]\n [ 0.97010436 -1.10054005  1.51379507 -1.2452093   0.79084339  1.92192049\n  -1.02463159 -0.67840232  0.21750844 -0.25843672]\n [-1.37159102 -0.12258962 -0.95130296  0.63023419 -0.71543793  1.28139927\n  -0.81734856 -0.43416611  0.93137429 -0.98582538]\n [ 0.40653234  1.11599016 -1.49648248  0.34127562  0.46386909  0.51328774\n  -1.27104598 -1.4325612   0.63979864  0.54202361]\n [ 0.42956526  0.15529562 -0.56902397  0.38889546  0.49705877 -0.98288655\n   1.83167925  0.36172833 -1.07344642  0.90159254]\n [-0.79560926  0.59593201  1.26959633 -0.66404056  1.16736243  0.14424579\n   0.78796489  1.78468839 -0.12753104 -0.50869723]\n [-0.71044202 -1.00696288  0.03389905  0.49779373  0.4806771   0.55864812\n  -0.02109337  1.34142949 -0.14679976  2.9652081 ]\n [ 0.80473976 -1.04831015 -0.95989174  0.63911417 -0.01947649  0.44546536\n   0.43914236 -0.1849335  -0.72893664 -1.26980829]\n [-0.26744254  0.6652462   0.3250945  -1.08909702  0.37716723  0.11678225\n  -0.9179527   0.04162051  0.17606579 -0.89793136]]", "y": "[ 0.52703401  0.48128475  1.10181512 -0.80657573 -1.90101571  0.0305295\n  0.18270807 -2.05889311 -0.14848696 -0.50869583  0.88411143  1.23316063\n -0.09327588  1.59866078 -1.46961267  0.16530918  0.62838015 -0.18553562\n -0.52675145  0.86584936]"}, "kwargs": {"alpha": "1", "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.54394874 -0.51918157  0.15117121 -0.04325523  0.2342609  -0.07275218\n -0.04751947  0.00495977 -0.02414442 -0.07750359]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "str", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.67578656 -0.32941689  0.75868929  1.67967162 -0.03016707 -0.50267209\n   1.54511755  0.65533014 -0.35161731  0.78759898]\n [-0.28434528 -0.65688234  0.35296303 -1.75663849 -1.52093153 -0.83082266\n  -1.04692639  0.20214274 -0.790167   -1.16726477]\n [ 1.64472118 -0.41692889  0.17852896 -1.26810643 -0.34039642 -0.15761254\n  -1.18508884  0.26359343 -0.48278161 -0.04665482]\n [-0.4226342   1.66112559  0.09750353 -0.90106917  1.02653121 -1.48937878\n   0.17476833 -2.07177472 -1.21032897  0.44190017]\n [ 0.91753899 -0.01978431 -0.00464753 -0.14446194 -1.27453569 -0.98837934\n  -0.49473404  0.94501763  0.46147537 -1.51800122]\n [ 0.50315638 -0.57623487 -0.56592125  0.76831805  1.23498582  0.66274499\n  -0.87331279 -0.42131697  0.44912051  1.22058406]\n [-0.30010183 -0.37681157 -0.99533422 -1.03956486  1.01651212  1.0877049\n  -0.10610539  0.89142831  0.4794931  -0.40008082]\n [ 0.54046801  1.34688398  0.07517472  1.72128541 -2.4157588   0.55336737\n   0.0529518  -0.41111194  0.20961785 -1.74252998]\n [-0.04059948  0.16595998  1.5888948  -0.36162846 -0.6045073  -0.77029218\n   0.88130685  0.21664652 -0.41190313  0.75830637]\n [ 0.27614996  0.7774924  -0.59105234 -0.17102039 -0.18812185 -1.73205008\n   0.26202501  0.14895068  0.12297053  0.0104518 ]\n [-1.23629833 -0.61179791 -0.23171376 -0.64563551  0.04270059  0.13551572\n   1.85209064  0.06247322  0.37540747  0.17059302]\n [-1.73969881 -0.21766647  0.17123097  2.61988387  0.01162534  0.03301221\n  -0.06880704 -1.28078263  1.26067989  0.99697197]\n [ 0.97010436 -1.10054005  1.51379507 -1.2452093   0.79084339  1.92192049\n  -1.02463159 -0.67840232  0.21750844 -0.25843672]\n [-1.37159102 -0.12258962 -0.95130296  0.63023419 -0.71543793  1.28139927\n  -0.81734856 -0.43416611  0.93137429 -0.98582538]\n [ 0.40653234  1.11599016 -1.49648248  0.34127562  0.46386909  0.51328774\n  -1.27104598 -1.4325612   0.63979864  0.54202361]\n [ 0.42956526  0.15529562 -0.56902397  0.38889546  0.49705877 -0.98288655\n   1.83167925  0.36172833 -1.07344642  0.90159254]\n [-0.79560926  0.59593201  1.26959633 -0.66404056  1.16736243  0.14424579\n   0.78796489  1.78468839 -0.12753104 -0.50869723]\n [-0.71044202 -1.00696288  0.03389905  0.49779373  0.4806771   0.55864812\n  -0.02109337  1.34142949 -0.14679976  2.9652081 ]\n [ 0.80473976 -1.04831015 -0.95989174  0.63911417 -0.01947649  0.44546536\n   0.43914236 -0.1849335  -0.72893664 -1.26980829]\n [-0.26744254  0.6652462   0.3250945  -1.08909702  0.37716723  0.11678225\n  -0.9179527   0.04162051  0.17606579 -0.89793136]]", "y": "[ 1.02282556  0.45356027  0.89377608 -0.29704429  0.62603451 -1.13797046\n -0.01465384  0.12622863  0.4447616  -0.71355491  2.06193052 -0.76789515\n -3.30149302 -1.49036706  1.10293807 -0.66044256  1.52579113  0.52809152\n -0.64959044  0.24707384]"}, "kwargs": {"alpha": "2", "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.12351238  0.38494334 -0.18553014 -0.20639285 -0.27577429 -0.16243397\n  0.23632946  0.48674927  0.10303044  0.1886299 ]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "str", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.67578656 -0.32941689  0.75868929  1.67967162 -0.03016707 -0.50267209\n   1.54511755  0.65533014 -0.35161731  0.78759898]\n [-0.28434528 -0.65688234  0.35296303 -1.75663849 -1.52093153 -0.83082266\n  -1.04692639  0.20214274 -0.790167   -1.16726477]\n [ 1.64472118 -0.41692889  0.17852896 -1.26810643 -0.34039642 -0.15761254\n  -1.18508884  0.26359343 -0.48278161 -0.04665482]\n [-0.4226342   1.66112559  0.09750353 -0.90106917  1.02653121 -1.48937878\n   0.17476833 -2.07177472 -1.21032897  0.44190017]\n [ 0.91753899 -0.01978431 -0.00464753 -0.14446194 -1.27453569 -0.98837934\n  -0.49473404  0.94501763  0.46147537 -1.51800122]\n [ 0.50315638 -0.57623487 -0.56592125  0.76831805  1.23498582  0.66274499\n  -0.87331279 -0.42131697  0.44912051  1.22058406]\n [-0.30010183 -0.37681157 -0.99533422 -1.03956486  1.01651212  1.0877049\n  -0.10610539  0.89142831  0.4794931  -0.40008082]\n [ 0.54046801  1.34688398  0.07517472  1.72128541 -2.4157588   0.55336737\n   0.0529518  -0.41111194  0.20961785 -1.74252998]\n [-0.04059948  0.16595998  1.5888948  -0.36162846 -0.6045073  -0.77029218\n   0.88130685  0.21664652 -0.41190313  0.75830637]\n [ 0.27614996  0.7774924  -0.59105234 -0.17102039 -0.18812185 -1.73205008\n   0.26202501  0.14895068  0.12297053  0.0104518 ]\n [-1.23629833 -0.61179791 -0.23171376 -0.64563551  0.04270059  0.13551572\n   1.85209064  0.06247322  0.37540747  0.17059302]\n [-1.73969881 -0.21766647  0.17123097  2.61988387  0.01162534  0.03301221\n  -0.06880704 -1.28078263  1.26067989  0.99697197]\n [ 0.97010436 -1.10054005  1.51379507 -1.2452093   0.79084339  1.92192049\n  -1.02463159 -0.67840232  0.21750844 -0.25843672]\n [-1.37159102 -0.12258962 -0.95130296  0.63023419 -0.71543793  1.28139927\n  -0.81734856 -0.43416611  0.93137429 -0.98582538]\n [ 0.40653234  1.11599016 -1.49648248  0.34127562  0.46386909  0.51328774\n  -1.27104598 -1.4325612   0.63979864  0.54202361]\n [ 0.42956526  0.15529562 -0.56902397  0.38889546  0.49705877 -0.98288655\n   1.83167925  0.36172833 -1.07344642  0.90159254]\n [-0.79560926  0.59593201  1.26959633 -0.66404056  1.16736243  0.14424579\n   0.78796489  1.78468839 -0.12753104 -0.50869723]\n [-0.71044202 -1.00696288  0.03389905  0.49779373  0.4806771   0.55864812\n  -0.02109337  1.34142949 -0.14679976  2.9652081 ]\n [ 0.80473976 -1.04831015 -0.95989174  0.63911417 -0.01947649  0.44546536\n   0.43914236 -0.1849335  -0.72893664 -1.26980829]\n [-0.26744254  0.6652462   0.3250945  -1.08909702  0.37716723  0.11678225\n  -0.9179527   0.04162051  0.17606579 -0.89793136]]", "y": "[ 0.97769161  0.43893725  0.57528081 -0.56147399 -1.68882631 -0.79141415\n -0.72771079 -0.7378969   0.78964476  1.6893438   0.95635482  0.36770899\n -1.10049808 -0.51615493 -0.06587738 -0.00630835 -1.31392594  0.20488143\n  0.77349166  0.73675168]"}, "kwargs": {"alpha": "3", "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.03324588 -0.23136172 -0.13124338 -0.07095717 -0.19888589 -0.27042907\n  0.18183844 -0.14296576 -0.02451483  0.19207908]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "str", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.67578656 -0.32941689  0.75868929  1.67967162 -0.03016707 -0.50267209\n   1.54511755  0.65533014 -0.35161731  0.78759898]\n [-0.28434528 -0.65688234  0.35296303 -1.75663849 -1.52093153 -0.83082266\n  -1.04692639  0.20214274 -0.790167   -1.16726477]\n [ 1.64472118 -0.41692889  0.17852896 -1.26810643 -0.34039642 -0.15761254\n  -1.18508884  0.26359343 -0.48278161 -0.04665482]\n [-0.4226342   1.66112559  0.09750353 -0.90106917  1.02653121 -1.48937878\n   0.17476833 -2.07177472 -1.21032897  0.44190017]\n [ 0.91753899 -0.01978431 -0.00464753 -0.14446194 -1.27453569 -0.98837934\n  -0.49473404  0.94501763  0.46147537 -1.51800122]\n [ 0.50315638 -0.57623487 -0.56592125  0.76831805  1.23498582  0.66274499\n  -0.87331279 -0.42131697  0.44912051  1.22058406]\n [-0.30010183 -0.37681157 -0.99533422 -1.03956486  1.01651212  1.0877049\n  -0.10610539  0.89142831  0.4794931  -0.40008082]\n [ 0.54046801  1.34688398  0.07517472  1.72128541 -2.4157588   0.55336737\n   0.0529518  -0.41111194  0.20961785 -1.74252998]\n [-0.04059948  0.16595998  1.5888948  -0.36162846 -0.6045073  -0.77029218\n   0.88130685  0.21664652 -0.41190313  0.75830637]\n [ 0.27614996  0.7774924  -0.59105234 -0.17102039 -0.18812185 -1.73205008\n   0.26202501  0.14895068  0.12297053  0.0104518 ]\n [-1.23629833 -0.61179791 -0.23171376 -0.64563551  0.04270059  0.13551572\n   1.85209064  0.06247322  0.37540747  0.17059302]\n [-1.73969881 -0.21766647  0.17123097  2.61988387  0.01162534  0.03301221\n  -0.06880704 -1.28078263  1.26067989  0.99697197]\n [ 0.97010436 -1.10054005  1.51379507 -1.2452093   0.79084339  1.92192049\n  -1.02463159 -0.67840232  0.21750844 -0.25843672]\n [-1.37159102 -0.12258962 -0.95130296  0.63023419 -0.71543793  1.28139927\n  -0.81734856 -0.43416611  0.93137429 -0.98582538]\n [ 0.40653234  1.11599016 -1.49648248  0.34127562  0.46386909  0.51328774\n  -1.27104598 -1.4325612   0.63979864  0.54202361]\n [ 0.42956526  0.15529562 -0.56902397  0.38889546  0.49705877 -0.98288655\n   1.83167925  0.36172833 -1.07344642  0.90159254]\n [-0.79560926  0.59593201  1.26959633 -0.66404056  1.16736243  0.14424579\n   0.78796489  1.78468839 -0.12753104 -0.50869723]\n [-0.71044202 -1.00696288  0.03389905  0.49779373  0.4806771   0.55864812\n  -0.02109337  1.34142949 -0.14679976  2.9652081 ]\n [ 0.80473976 -1.04831015 -0.95989174  0.63911417 -0.01947649  0.44546536\n   0.43914236 -0.1849335  -0.72893664 -1.26980829]\n [-0.26744254  0.6652462   0.3250945  -1.08909702  0.37716723  0.11678225\n  -0.9179527   0.04162051  0.17606579 -0.89793136]]", "y": "[-1.62336877  3.60703209 -0.56096865 -0.16382526 -0.71763127  0.43389835\n  1.89824469  0.60673393 -1.44599581  0.15928231 -1.76506937  0.52893465\n -0.49826756 -0.11495883 -1.22720805 -0.631013    1.88733397 -0.86839892\n  0.11131608  0.38392944]"}, "kwargs": {"alpha": "4", "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.49138576 -0.04249492 -0.01921611 -0.01809751  0.12870073 -0.08973085\n -0.48741236  0.29020132 -0.33380108 -0.45155418]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "np.ndarray[int64]", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.67578656 -0.32941689  0.75868929  1.67967162 -0.03016707 -0.50267209\n   1.54511755  0.65533014 -0.35161731  0.78759898]\n [-0.28434528 -0.65688234  0.35296303 -1.75663849 -1.52093153 -0.83082266\n  -1.04692639  0.20214274 -0.790167   -1.16726477]\n [ 1.64472118 -0.41692889  0.17852896 -1.26810643 -0.34039642 -0.15761254\n  -1.18508884  0.26359343 -0.48278161 -0.04665482]\n [-0.4226342   1.66112559  0.09750353 -0.90106917  1.02653121 -1.48937878\n   0.17476833 -2.07177472 -1.21032897  0.44190017]\n [ 0.91753899 -0.01978431 -0.00464753 -0.14446194 -1.27453569 -0.98837934\n  -0.49473404  0.94501763  0.46147537 -1.51800122]\n [ 0.50315638 -0.57623487 -0.56592125  0.76831805  1.23498582  0.66274499\n  -0.87331279 -0.42131697  0.44912051  1.22058406]\n [-0.30010183 -0.37681157 -0.99533422 -1.03956486  1.01651212  1.0877049\n  -0.10610539  0.89142831  0.4794931  -0.40008082]\n [ 0.54046801  1.34688398  0.07517472  1.72128541 -2.4157588   0.55336737\n   0.0529518  -0.41111194  0.20961785 -1.74252998]\n [-0.04059948  0.16595998  1.5888948  -0.36162846 -0.6045073  -0.77029218\n   0.88130685  0.21664652 -0.41190313  0.75830637]\n [ 0.27614996  0.7774924  -0.59105234 -0.17102039 -0.18812185 -1.73205008\n   0.26202501  0.14895068  0.12297053  0.0104518 ]\n [-1.23629833 -0.61179791 -0.23171376 -0.64563551  0.04270059  0.13551572\n   1.85209064  0.06247322  0.37540747  0.17059302]\n [-1.73969881 -0.21766647  0.17123097  2.61988387  0.01162534  0.03301221\n  -0.06880704 -1.28078263  1.26067989  0.99697197]\n [ 0.97010436 -1.10054005  1.51379507 -1.2452093   0.79084339  1.92192049\n  -1.02463159 -0.67840232  0.21750844 -0.25843672]\n [-1.37159102 -0.12258962 -0.95130296  0.63023419 -0.71543793  1.28139927\n  -0.81734856 -0.43416611  0.93137429 -0.98582538]\n [ 0.40653234  1.11599016 -1.49648248  0.34127562  0.46386909  0.51328774\n  -1.27104598 -1.4325612   0.63979864  0.54202361]\n [ 0.42956526  0.15529562 -0.56902397  0.38889546  0.49705877 -0.98288655\n   1.83167925  0.36172833 -1.07344642  0.90159254]\n [-0.79560926  0.59593201  1.26959633 -0.66404056  1.16736243  0.14424579\n   0.78796489  1.78468839 -0.12753104 -0.50869723]\n [-0.71044202 -1.00696288  0.03389905  0.49779373  0.4806771   0.55864812\n  -0.02109337  1.34142949 -0.14679976  2.9652081 ]\n [ 0.80473976 -1.04831015 -0.95989174  0.63911417 -0.01947649  0.44546536\n   0.43914236 -0.1849335  -0.72893664 -1.26980829]\n [-0.26744254  0.6652462   0.3250945  -1.08909702  0.37716723  0.11678225\n  -0.9179527   0.04162051  0.17606579 -0.89793136]]", "y": "[[ 0.44909214  0.52703401  1.02282556  0.97769161 -1.62336877]\n [-0.84652026  0.48128475  0.45356027  0.43893725  3.60703209]\n [ 0.66219529  1.10181512  0.89377608  0.57528081 -0.56096865]\n [ 0.850274   -0.80657573 -0.29704429 -0.56147399 -0.16382526]\n [ 2.40596335 -1.90101571  0.62603451 -1.68882631 -0.71763127]\n [ 1.18025538  0.0305295  -1.13797046 -0.79141415  0.43389835]\n [-0.63906185  0.18270807 -0.01465384 -0.72771079  1.89824469]\n [ 0.7252238  -2.05889311  0.12622863 -0.7378969   0.60673393]\n [-0.70121596 -0.14848696  0.4447616   0.78964476 -1.44599581]\n [-0.24319646 -0.50869583 -0.71355491  1.6893438   0.15928231]\n [-1.16957918  0.88411143  2.06193052  0.95635482 -1.76506937]\n [-0.39292929  1.23316063 -0.76789515  0.36770899  0.52893465]\n [-0.83562569 -0.09327588 -3.30149302 -1.10049808 -0.49826756]\n [-1.1564784   1.59866078 -1.49036706 -0.51615493 -0.11495883]\n [ 1.53257807 -1.46961267  1.10293807 -0.06587738 -1.22720805]\n [ 0.55340825  0.16530918 -0.66044256 -0.00630835 -0.631013  ]\n [ 0.20482212  0.62838015  1.52579113 -1.31392594  1.88733397]\n [-1.86078302 -0.18553562  0.52809152  0.20488143 -0.86839892]\n [-0.11681747 -0.52675145 -0.64959044  0.77349166  0.11131608]\n [-0.60160482  0.86584936  0.24707384  0.73675168  0.38392944]]"}, "kwargs": {"alpha": "[0 1 2 3 4]", "sample_weight": null, "max_iter": null, "tol": 1e-08, "solver": "svd", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[ 0.76217294  0.3584001  -0.05998943  0.34269954  0.40785902 -0.49453411\n  -0.14817955  0.02351769  0.37187977 -0.28187883]\n [-0.54394874 -0.51918157  0.15117121 -0.04325523  0.2342609  -0.07275218\n  -0.04751947  0.00495977 -0.02414442 -0.07750359]\n [-0.12351238  0.38494334 -0.18553014 -0.20639285 -0.27577429 -0.16243397\n   0.23632946  0.48674927  0.10303044  0.1886299 ]\n [-0.03324588 -0.23136172 -0.13124338 -0.07095717 -0.19888589 -0.27042907\n   0.18183844 -0.14296576 -0.02451483  0.19207908]\n [-0.49138576 -0.04249492 -0.01921611 -0.01809751  0.12870073 -0.08973085\n  -0.48741236  0.29020132 -0.33380108 -0.45155418]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "np.ndarray[int64]", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.67578656 -0.32941689  0.75868929  1.67967162 -0.03016707 -0.50267209\n   1.54511755  0.65533014 -0.35161731  0.78759898]\n [-0.28434528 -0.65688234  0.35296303 -1.75663849 -1.52093153 -0.83082266\n  -1.04692639  0.20214274 -0.790167   -1.16726477]\n [ 1.64472118 -0.41692889  0.17852896 -1.26810643 -0.34039642 -0.15761254\n  -1.18508884  0.26359343 -0.48278161 -0.04665482]\n [-0.4226342   1.66112559  0.09750353 -0.90106917  1.02653121 -1.48937878\n   0.17476833 -2.07177472 -1.21032897  0.44190017]\n [ 0.91753899 -0.01978431 -0.00464753 -0.14446194 -1.27453569 -0.98837934\n  -0.49473404  0.94501763  0.46147537 -1.51800122]\n [ 0.50315638 -0.57623487 -0.56592125  0.76831805  1.23498582  0.66274499\n  -0.87331279 -0.42131697  0.44912051  1.22058406]\n [-0.30010183 -0.37681157 -0.99533422 -1.03956486  1.01651212  1.0877049\n  -0.10610539  0.89142831  0.4794931  -0.40008082]\n [ 0.54046801  1.34688398  0.07517472  1.72128541 -2.4157588   0.55336737\n   0.0529518  -0.41111194  0.20961785 -1.74252998]\n [-0.04059948  0.16595998  1.5888948  -0.36162846 -0.6045073  -0.77029218\n   0.88130685  0.21664652 -0.41190313  0.75830637]\n [ 0.27614996  0.7774924  -0.59105234 -0.17102039 -0.18812185 -1.73205008\n   0.26202501  0.14895068  0.12297053  0.0104518 ]\n [-1.23629833 -0.61179791 -0.23171376 -0.64563551  0.04270059  0.13551572\n   1.85209064  0.06247322  0.37540747  0.17059302]\n [-1.73969881 -0.21766647  0.17123097  2.61988387  0.01162534  0.03301221\n  -0.06880704 -1.28078263  1.26067989  0.99697197]\n [ 0.97010436 -1.10054005  1.51379507 -1.2452093   0.79084339  1.92192049\n  -1.02463159 -0.67840232  0.21750844 -0.25843672]\n [-1.37159102 -0.12258962 -0.95130296  0.63023419 -0.71543793  1.28139927\n  -0.81734856 -0.43416611  0.93137429 -0.98582538]\n [ 0.40653234  1.11599016 -1.49648248  0.34127562  0.46386909  0.51328774\n  -1.27104598 -1.4325612   0.63979864  0.54202361]\n [ 0.42956526  0.15529562 -0.56902397  0.38889546  0.49705877 -0.98288655\n   1.83167925  0.36172833 -1.07344642  0.90159254]\n [-0.79560926  0.59593201  1.26959633 -0.66404056  1.16736243  0.14424579\n   0.78796489  1.78468839 -0.12753104 -0.50869723]\n [-0.71044202 -1.00696288  0.03389905  0.49779373  0.4806771   0.55864812\n  -0.02109337  1.34142949 -0.14679976  2.9652081 ]\n [ 0.80473976 -1.04831015 -0.95989174  0.63911417 -0.01947649  0.44546536\n   0.43914236 -0.1849335  -0.72893664 -1.26980829]\n [-0.26744254  0.6652462   0.3250945  -1.08909702  0.37716723  0.11678225\n  -0.9179527   0.04162051  0.17606579 -0.89793136]]", "y": "[[ 0.44909214  0.52703401  1.02282556  0.97769161 -1.62336877]\n [-0.84652026  0.48128475  0.45356027  0.43893725  3.60703209]\n [ 0.66219529  1.10181512  0.89377608  0.57528081 -0.56096865]\n [ 0.850274   -0.80657573 -0.29704429 -0.56147399 -0.16382526]\n [ 2.40596335 -1.90101571  0.62603451 -1.68882631 -0.71763127]\n [ 1.18025538  0.0305295  -1.13797046 -0.79141415  0.43389835]\n [-0.63906185  0.18270807 -0.01465384 -0.72771079  1.89824469]\n [ 0.7252238  -2.05889311  0.12622863 -0.7378969   0.60673393]\n [-0.70121596 -0.14848696  0.4447616   0.78964476 -1.44599581]\n [-0.24319646 -0.50869583 -0.71355491  1.6893438   0.15928231]\n [-1.16957918  0.88411143  2.06193052  0.95635482 -1.76506937]\n [-0.39292929  1.23316063 -0.76789515  0.36770899  0.52893465]\n [-0.83562569 -0.09327588 -3.30149302 -1.10049808 -0.49826756]\n [-1.1564784   1.59866078 -1.49036706 -0.51615493 -0.11495883]\n [ 1.53257807 -1.46961267  1.10293807 -0.06587738 -1.22720805]\n [ 0.55340825  0.16530918 -0.66044256 -0.00630835 -0.631013  ]\n [ 0.20482212  0.62838015  1.52579113 -1.31392594  1.88733397]\n [-1.86078302 -0.18553562  0.52809152  0.20488143 -0.86839892]\n [-0.11681747 -0.52675145 -0.64959044  0.77349166  0.11131608]\n [-0.60160482  0.86584936  0.24707384  0.73675168  0.38392944]]"}, "kwargs": {"alpha": "[0 1 2 3 4]", "sample_weight": null, "max_iter": null, "tol": 1e-08, "solver": "sparse_cg", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[ 0.76217294  0.3584001  -0.05998943  0.34269954  0.40785902 -0.49453411\n  -0.14817955  0.02351769  0.37187977 -0.28187883]\n [-0.54394874 -0.51918157  0.15117121 -0.04325523  0.2342609  -0.07275218\n  -0.04751947  0.00495977 -0.02414442 -0.07750359]\n [-0.12351238  0.38494334 -0.18553014 -0.20639285 -0.27577429 -0.16243397\n   0.23632946  0.48674927  0.10303044  0.1886299 ]\n [-0.03324588 -0.23136172 -0.13124338 -0.07095717 -0.19888589 -0.27042907\n   0.18183844 -0.14296576 -0.02451483  0.19207908]\n [-0.49138576 -0.04249492 -0.01921611 -0.01809751  0.12870073 -0.08973085\n  -0.48741236  0.29020132 -0.33380108 -0.45155418]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "np.ndarray[int64]", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.67578656 -0.32941689  0.75868929  1.67967162 -0.03016707 -0.50267209\n   1.54511755  0.65533014 -0.35161731  0.78759898]\n [-0.28434528 -0.65688234  0.35296303 -1.75663849 -1.52093153 -0.83082266\n  -1.04692639  0.20214274 -0.790167   -1.16726477]\n [ 1.64472118 -0.41692889  0.17852896 -1.26810643 -0.34039642 -0.15761254\n  -1.18508884  0.26359343 -0.48278161 -0.04665482]\n [-0.4226342   1.66112559  0.09750353 -0.90106917  1.02653121 -1.48937878\n   0.17476833 -2.07177472 -1.21032897  0.44190017]\n [ 0.91753899 -0.01978431 -0.00464753 -0.14446194 -1.27453569 -0.98837934\n  -0.49473404  0.94501763  0.46147537 -1.51800122]\n [ 0.50315638 -0.57623487 -0.56592125  0.76831805  1.23498582  0.66274499\n  -0.87331279 -0.42131697  0.44912051  1.22058406]\n [-0.30010183 -0.37681157 -0.99533422 -1.03956486  1.01651212  1.0877049\n  -0.10610539  0.89142831  0.4794931  -0.40008082]\n [ 0.54046801  1.34688398  0.07517472  1.72128541 -2.4157588   0.55336737\n   0.0529518  -0.41111194  0.20961785 -1.74252998]\n [-0.04059948  0.16595998  1.5888948  -0.36162846 -0.6045073  -0.77029218\n   0.88130685  0.21664652 -0.41190313  0.75830637]\n [ 0.27614996  0.7774924  -0.59105234 -0.17102039 -0.18812185 -1.73205008\n   0.26202501  0.14895068  0.12297053  0.0104518 ]\n [-1.23629833 -0.61179791 -0.23171376 -0.64563551  0.04270059  0.13551572\n   1.85209064  0.06247322  0.37540747  0.17059302]\n [-1.73969881 -0.21766647  0.17123097  2.61988387  0.01162534  0.03301221\n  -0.06880704 -1.28078263  1.26067989  0.99697197]\n [ 0.97010436 -1.10054005  1.51379507 -1.2452093   0.79084339  1.92192049\n  -1.02463159 -0.67840232  0.21750844 -0.25843672]\n [-1.37159102 -0.12258962 -0.95130296  0.63023419 -0.71543793  1.28139927\n  -0.81734856 -0.43416611  0.93137429 -0.98582538]\n [ 0.40653234  1.11599016 -1.49648248  0.34127562  0.46386909  0.51328774\n  -1.27104598 -1.4325612   0.63979864  0.54202361]\n [ 0.42956526  0.15529562 -0.56902397  0.38889546  0.49705877 -0.98288655\n   1.83167925  0.36172833 -1.07344642  0.90159254]\n [-0.79560926  0.59593201  1.26959633 -0.66404056  1.16736243  0.14424579\n   0.78796489  1.78468839 -0.12753104 -0.50869723]\n [-0.71044202 -1.00696288  0.03389905  0.49779373  0.4806771   0.55864812\n  -0.02109337  1.34142949 -0.14679976  2.9652081 ]\n [ 0.80473976 -1.04831015 -0.95989174  0.63911417 -0.01947649  0.44546536\n   0.43914236 -0.1849335  -0.72893664 -1.26980829]\n [-0.26744254  0.6652462   0.3250945  -1.08909702  0.37716723  0.11678225\n  -0.9179527   0.04162051  0.17606579 -0.89793136]]", "y": "[[ 0.44909214  0.52703401  1.02282556  0.97769161 -1.62336877]\n [-0.84652026  0.48128475  0.45356027  0.43893725  3.60703209]\n [ 0.66219529  1.10181512  0.89377608  0.57528081 -0.56096865]\n [ 0.850274   -0.80657573 -0.29704429 -0.56147399 -0.16382526]\n [ 2.40596335 -1.90101571  0.62603451 -1.68882631 -0.71763127]\n [ 1.18025538  0.0305295  -1.13797046 -0.79141415  0.43389835]\n [-0.63906185  0.18270807 -0.01465384 -0.72771079  1.89824469]\n [ 0.7252238  -2.05889311  0.12622863 -0.7378969   0.60673393]\n [-0.70121596 -0.14848696  0.4447616   0.78964476 -1.44599581]\n [-0.24319646 -0.50869583 -0.71355491  1.6893438   0.15928231]\n [-1.16957918  0.88411143  2.06193052  0.95635482 -1.76506937]\n [-0.39292929  1.23316063 -0.76789515  0.36770899  0.52893465]\n [-0.83562569 -0.09327588 -3.30149302 -1.10049808 -0.49826756]\n [-1.1564784   1.59866078 -1.49036706 -0.51615493 -0.11495883]\n [ 1.53257807 -1.46961267  1.10293807 -0.06587738 -1.22720805]\n [ 0.55340825  0.16530918 -0.66044256 -0.00630835 -0.631013  ]\n [ 0.20482212  0.62838015  1.52579113 -1.31392594  1.88733397]\n [-1.86078302 -0.18553562  0.52809152  0.20488143 -0.86839892]\n [-0.11681747 -0.52675145 -0.64959044  0.77349166  0.11131608]\n [-0.60160482  0.86584936  0.24707384  0.73675168  0.38392944]]"}, "kwargs": {"alpha": "[0 1 2 3 4]", "sample_weight": null, "max_iter": null, "tol": 1e-08, "solver": "lsqr", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[ 0.76217294  0.3584001  -0.05998943  0.34269954  0.40785902 -0.49453411\n  -0.14817955  0.02351769  0.37187977 -0.28187883]\n [-0.54394874 -0.51918157  0.15117121 -0.04325523  0.2342609  -0.07275218\n  -0.04751947  0.00495977 -0.02414442 -0.07750359]\n [-0.12351238  0.38494334 -0.18553014 -0.20639285 -0.27577429 -0.16243397\n   0.23632946  0.48674927  0.10303044  0.1886299 ]\n [-0.03324588 -0.23136172 -0.13124338 -0.07095717 -0.19888589 -0.27042907\n   0.18183844 -0.14296576 -0.02451483  0.19207908]\n [-0.49138576 -0.04249492 -0.01921611 -0.01809751  0.12870073 -0.08973085\n  -0.48741236  0.29020132 -0.33380108 -0.45155418]]", "[10 10 10 10 10]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "np.ndarray[int64]", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.67578656 -0.32941689  0.75868929  1.67967162 -0.03016707 -0.50267209\n   1.54511755  0.65533014 -0.35161731  0.78759898]\n [-0.28434528 -0.65688234  0.35296303 -1.75663849 -1.52093153 -0.83082266\n  -1.04692639  0.20214274 -0.790167   -1.16726477]\n [ 1.64472118 -0.41692889  0.17852896 -1.26810643 -0.34039642 -0.15761254\n  -1.18508884  0.26359343 -0.48278161 -0.04665482]\n [-0.4226342   1.66112559  0.09750353 -0.90106917  1.02653121 -1.48937878\n   0.17476833 -2.07177472 -1.21032897  0.44190017]\n [ 0.91753899 -0.01978431 -0.00464753 -0.14446194 -1.27453569 -0.98837934\n  -0.49473404  0.94501763  0.46147537 -1.51800122]\n [ 0.50315638 -0.57623487 -0.56592125  0.76831805  1.23498582  0.66274499\n  -0.87331279 -0.42131697  0.44912051  1.22058406]\n [-0.30010183 -0.37681157 -0.99533422 -1.03956486  1.01651212  1.0877049\n  -0.10610539  0.89142831  0.4794931  -0.40008082]\n [ 0.54046801  1.34688398  0.07517472  1.72128541 -2.4157588   0.55336737\n   0.0529518  -0.41111194  0.20961785 -1.74252998]\n [-0.04059948  0.16595998  1.5888948  -0.36162846 -0.6045073  -0.77029218\n   0.88130685  0.21664652 -0.41190313  0.75830637]\n [ 0.27614996  0.7774924  -0.59105234 -0.17102039 -0.18812185 -1.73205008\n   0.26202501  0.14895068  0.12297053  0.0104518 ]\n [-1.23629833 -0.61179791 -0.23171376 -0.64563551  0.04270059  0.13551572\n   1.85209064  0.06247322  0.37540747  0.17059302]\n [-1.73969881 -0.21766647  0.17123097  2.61988387  0.01162534  0.03301221\n  -0.06880704 -1.28078263  1.26067989  0.99697197]\n [ 0.97010436 -1.10054005  1.51379507 -1.2452093   0.79084339  1.92192049\n  -1.02463159 -0.67840232  0.21750844 -0.25843672]\n [-1.37159102 -0.12258962 -0.95130296  0.63023419 -0.71543793  1.28139927\n  -0.81734856 -0.43416611  0.93137429 -0.98582538]\n [ 0.40653234  1.11599016 -1.49648248  0.34127562  0.46386909  0.51328774\n  -1.27104598 -1.4325612   0.63979864  0.54202361]\n [ 0.42956526  0.15529562 -0.56902397  0.38889546  0.49705877 -0.98288655\n   1.83167925  0.36172833 -1.07344642  0.90159254]\n [-0.79560926  0.59593201  1.26959633 -0.66404056  1.16736243  0.14424579\n   0.78796489  1.78468839 -0.12753104 -0.50869723]\n [-0.71044202 -1.00696288  0.03389905  0.49779373  0.4806771   0.55864812\n  -0.02109337  1.34142949 -0.14679976  2.9652081 ]\n [ 0.80473976 -1.04831015 -0.95989174  0.63911417 -0.01947649  0.44546536\n   0.43914236 -0.1849335  -0.72893664 -1.26980829]\n [-0.26744254  0.6652462   0.3250945  -1.08909702  0.37716723  0.11678225\n  -0.9179527   0.04162051  0.17606579 -0.89793136]]", "y": "[[ 0.44909214  0.52703401  1.02282556  0.97769161 -1.62336877]\n [-0.84652026  0.48128475  0.45356027  0.43893725  3.60703209]\n [ 0.66219529  1.10181512  0.89377608  0.57528081 -0.56096865]\n [ 0.850274   -0.80657573 -0.29704429 -0.56147399 -0.16382526]\n [ 2.40596335 -1.90101571  0.62603451 -1.68882631 -0.71763127]\n [ 1.18025538  0.0305295  -1.13797046 -0.79141415  0.43389835]\n [-0.63906185  0.18270807 -0.01465384 -0.72771079  1.89824469]\n [ 0.7252238  -2.05889311  0.12622863 -0.7378969   0.60673393]\n [-0.70121596 -0.14848696  0.4447616   0.78964476 -1.44599581]\n [-0.24319646 -0.50869583 -0.71355491  1.6893438   0.15928231]\n [-1.16957918  0.88411143  2.06193052  0.95635482 -1.76506937]\n [-0.39292929  1.23316063 -0.76789515  0.36770899  0.52893465]\n [-0.83562569 -0.09327588 -3.30149302 -1.10049808 -0.49826756]\n [-1.1564784   1.59866078 -1.49036706 -0.51615493 -0.11495883]\n [ 1.53257807 -1.46961267  1.10293807 -0.06587738 -1.22720805]\n [ 0.55340825  0.16530918 -0.66044256 -0.00630835 -0.631013  ]\n [ 0.20482212  0.62838015  1.52579113 -1.31392594  1.88733397]\n [-1.86078302 -0.18553562  0.52809152  0.20488143 -0.86839892]\n [-0.11681747 -0.52675145 -0.64959044  0.77349166  0.11131608]\n [-0.60160482  0.86584936  0.24707384  0.73675168  0.38392944]]"}, "kwargs": {"alpha": "[0 1 2 3 4]", "sample_weight": null, "max_iter": null, "tol": 1e-08, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[ 0.76217294  0.3584001  -0.05998943  0.34269954  0.40785902 -0.49453411\n  -0.14817955  0.02351769  0.37187977 -0.28187883]\n [-0.54394874 -0.51918157  0.15117121 -0.04325523  0.2342609  -0.07275218\n  -0.04751947  0.00495977 -0.02414442 -0.07750359]\n [-0.12351238  0.38494334 -0.18553014 -0.20639285 -0.27577429 -0.16243397\n   0.23632946  0.48674927  0.10303044  0.1886299 ]\n [-0.03324588 -0.23136172 -0.13124338 -0.07095717 -0.19888589 -0.27042907\n   0.18183844 -0.14296576 -0.02451483  0.19207908]\n [-0.49138576 -0.04249492 -0.01921611 -0.01809751  0.12870073 -0.08973085\n  -0.48741236  0.29020132 -0.33380108 -0.45155418]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "np.ndarray[int64]", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.67578656 -0.32941689  0.75868929  1.67967162 -0.03016707 -0.50267209\n   1.54511755  0.65533014 -0.35161731  0.78759898]\n [-0.28434528 -0.65688234  0.35296303 -1.75663849 -1.52093153 -0.83082266\n  -1.04692639  0.20214274 -0.790167   -1.16726477]\n [ 1.64472118 -0.41692889  0.17852896 -1.26810643 -0.34039642 -0.15761254\n  -1.18508884  0.26359343 -0.48278161 -0.04665482]\n [-0.4226342   1.66112559  0.09750353 -0.90106917  1.02653121 -1.48937878\n   0.17476833 -2.07177472 -1.21032897  0.44190017]\n [ 0.91753899 -0.01978431 -0.00464753 -0.14446194 -1.27453569 -0.98837934\n  -0.49473404  0.94501763  0.46147537 -1.51800122]\n [ 0.50315638 -0.57623487 -0.56592125  0.76831805  1.23498582  0.66274499\n  -0.87331279 -0.42131697  0.44912051  1.22058406]\n [-0.30010183 -0.37681157 -0.99533422 -1.03956486  1.01651212  1.0877049\n  -0.10610539  0.89142831  0.4794931  -0.40008082]\n [ 0.54046801  1.34688398  0.07517472  1.72128541 -2.4157588   0.55336737\n   0.0529518  -0.41111194  0.20961785 -1.74252998]\n [-0.04059948  0.16595998  1.5888948  -0.36162846 -0.6045073  -0.77029218\n   0.88130685  0.21664652 -0.41190313  0.75830637]\n [ 0.27614996  0.7774924  -0.59105234 -0.17102039 -0.18812185 -1.73205008\n   0.26202501  0.14895068  0.12297053  0.0104518 ]\n [-1.23629833 -0.61179791 -0.23171376 -0.64563551  0.04270059  0.13551572\n   1.85209064  0.06247322  0.37540747  0.17059302]\n [-1.73969881 -0.21766647  0.17123097  2.61988387  0.01162534  0.03301221\n  -0.06880704 -1.28078263  1.26067989  0.99697197]\n [ 0.97010436 -1.10054005  1.51379507 -1.2452093   0.79084339  1.92192049\n  -1.02463159 -0.67840232  0.21750844 -0.25843672]\n [-1.37159102 -0.12258962 -0.95130296  0.63023419 -0.71543793  1.28139927\n  -0.81734856 -0.43416611  0.93137429 -0.98582538]\n [ 0.40653234  1.11599016 -1.49648248  0.34127562  0.46386909  0.51328774\n  -1.27104598 -1.4325612   0.63979864  0.54202361]\n [ 0.42956526  0.15529562 -0.56902397  0.38889546  0.49705877 -0.98288655\n   1.83167925  0.36172833 -1.07344642  0.90159254]\n [-0.79560926  0.59593201  1.26959633 -0.66404056  1.16736243  0.14424579\n   0.78796489  1.78468839 -0.12753104 -0.50869723]\n [-0.71044202 -1.00696288  0.03389905  0.49779373  0.4806771   0.55864812\n  -0.02109337  1.34142949 -0.14679976  2.9652081 ]\n [ 0.80473976 -1.04831015 -0.95989174  0.63911417 -0.01947649  0.44546536\n   0.43914236 -0.1849335  -0.72893664 -1.26980829]\n [-0.26744254  0.6652462   0.3250945  -1.08909702  0.37716723  0.11678225\n  -0.9179527   0.04162051  0.17606579 -0.89793136]]", "y": "[[ 0.44909214  0.52703401  1.02282556  0.97769161 -1.62336877]\n [-0.84652026  0.48128475  0.45356027  0.43893725  3.60703209]\n [ 0.66219529  1.10181512  0.89377608  0.57528081 -0.56096865]\n [ 0.850274   -0.80657573 -0.29704429 -0.56147399 -0.16382526]\n [ 2.40596335 -1.90101571  0.62603451 -1.68882631 -0.71763127]\n [ 1.18025538  0.0305295  -1.13797046 -0.79141415  0.43389835]\n [-0.63906185  0.18270807 -0.01465384 -0.72771079  1.89824469]\n [ 0.7252238  -2.05889311  0.12622863 -0.7378969   0.60673393]\n [-0.70121596 -0.14848696  0.4447616   0.78964476 -1.44599581]\n [-0.24319646 -0.50869583 -0.71355491  1.6893438   0.15928231]\n [-1.16957918  0.88411143  2.06193052  0.95635482 -1.76506937]\n [-0.39292929  1.23316063 -0.76789515  0.36770899  0.52893465]\n [-0.83562569 -0.09327588 -3.30149302 -1.10049808 -0.49826756]\n [-1.1564784   1.59866078 -1.49036706 -0.51615493 -0.11495883]\n [ 1.53257807 -1.46961267  1.10293807 -0.06587738 -1.22720805]\n [ 0.55340825  0.16530918 -0.66044256 -0.00630835 -0.631013  ]\n [ 0.20482212  0.62838015  1.52579113 -1.31392594  1.88733397]\n [-1.86078302 -0.18553562  0.52809152  0.20488143 -0.86839892]\n [-0.11681747 -0.52675145 -0.64959044  0.77349166  0.11131608]\n [-0.60160482  0.86584936  0.24707384  0.73675168  0.38392944]]"}, "kwargs": {"alpha": "[0 1 2 3 4]", "sample_weight": null, "max_iter": null, "tol": 1e-08, "solver": "sag", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[ 0.76217294  0.3584001  -0.05998944  0.34269955  0.40785903 -0.49453412\n  -0.14817955  0.0235177   0.37187977 -0.28187884]\n [-0.54394875 -0.51918157  0.15117121 -0.04325522  0.23426091 -0.07275217\n  -0.04751947  0.00495978 -0.02414443 -0.0775036 ]\n [-0.12351238  0.38494335 -0.18553013 -0.20639285 -0.27577429 -0.16243397\n   0.23632946  0.48674927  0.10303044  0.1886299 ]\n [-0.03324588 -0.23136172 -0.13124338 -0.07095717 -0.19888589 -0.27042907\n   0.18183844 -0.14296576 -0.02451483  0.19207908]\n [-0.49138576 -0.04249492 -0.0192161  -0.01809751  0.12870073 -0.08973085\n  -0.48741236  0.29020132 -0.33380108 -0.45155418]]", "[138  80  77  85  82]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "np.ndarray[int64]", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.67578656 -0.32941689  0.75868929  1.67967162 -0.03016707 -0.50267209\n   1.54511755  0.65533014 -0.35161731  0.78759898]\n [-0.28434528 -0.65688234  0.35296303 -1.75663849 -1.52093153 -0.83082266\n  -1.04692639  0.20214274 -0.790167   -1.16726477]\n [ 1.64472118 -0.41692889  0.17852896 -1.26810643 -0.34039642 -0.15761254\n  -1.18508884  0.26359343 -0.48278161 -0.04665482]\n [-0.4226342   1.66112559  0.09750353 -0.90106917  1.02653121 -1.48937878\n   0.17476833 -2.07177472 -1.21032897  0.44190017]\n [ 0.91753899 -0.01978431 -0.00464753 -0.14446194 -1.27453569 -0.98837934\n  -0.49473404  0.94501763  0.46147537 -1.51800122]\n [ 0.50315638 -0.57623487 -0.56592125  0.76831805  1.23498582  0.66274499\n  -0.87331279 -0.42131697  0.44912051  1.22058406]\n [-0.30010183 -0.37681157 -0.99533422 -1.03956486  1.01651212  1.0877049\n  -0.10610539  0.89142831  0.4794931  -0.40008082]\n [ 0.54046801  1.34688398  0.07517472  1.72128541 -2.4157588   0.55336737\n   0.0529518  -0.41111194  0.20961785 -1.74252998]\n [-0.04059948  0.16595998  1.5888948  -0.36162846 -0.6045073  -0.77029218\n   0.88130685  0.21664652 -0.41190313  0.75830637]\n [ 0.27614996  0.7774924  -0.59105234 -0.17102039 -0.18812185 -1.73205008\n   0.26202501  0.14895068  0.12297053  0.0104518 ]\n [-1.23629833 -0.61179791 -0.23171376 -0.64563551  0.04270059  0.13551572\n   1.85209064  0.06247322  0.37540747  0.17059302]\n [-1.73969881 -0.21766647  0.17123097  2.61988387  0.01162534  0.03301221\n  -0.06880704 -1.28078263  1.26067989  0.99697197]\n [ 0.97010436 -1.10054005  1.51379507 -1.2452093   0.79084339  1.92192049\n  -1.02463159 -0.67840232  0.21750844 -0.25843672]\n [-1.37159102 -0.12258962 -0.95130296  0.63023419 -0.71543793  1.28139927\n  -0.81734856 -0.43416611  0.93137429 -0.98582538]\n [ 0.40653234  1.11599016 -1.49648248  0.34127562  0.46386909  0.51328774\n  -1.27104598 -1.4325612   0.63979864  0.54202361]\n [ 0.42956526  0.15529562 -0.56902397  0.38889546  0.49705877 -0.98288655\n   1.83167925  0.36172833 -1.07344642  0.90159254]\n [-0.79560926  0.59593201  1.26959633 -0.66404056  1.16736243  0.14424579\n   0.78796489  1.78468839 -0.12753104 -0.50869723]\n [-0.71044202 -1.00696288  0.03389905  0.49779373  0.4806771   0.55864812\n  -0.02109337  1.34142949 -0.14679976  2.9652081 ]\n [ 0.80473976 -1.04831015 -0.95989174  0.63911417 -0.01947649  0.44546536\n   0.43914236 -0.1849335  -0.72893664 -1.26980829]\n [-0.26744254  0.6652462   0.3250945  -1.08909702  0.37716723  0.11678225\n  -0.9179527   0.04162051  0.17606579 -0.89793136]]", "y": "[[ 0.44909214  0.52703401  1.02282556  0.97769161 -1.62336877]\n [-0.84652026  0.48128475  0.45356027  0.43893725  3.60703209]\n [ 0.66219529  1.10181512  0.89377608  0.57528081 -0.56096865]\n [ 0.850274   -0.80657573 -0.29704429 -0.56147399 -0.16382526]\n [ 2.40596335 -1.90101571  0.62603451 -1.68882631 -0.71763127]\n [ 1.18025538  0.0305295  -1.13797046 -0.79141415  0.43389835]\n [-0.63906185  0.18270807 -0.01465384 -0.72771079  1.89824469]\n [ 0.7252238  -2.05889311  0.12622863 -0.7378969   0.60673393]\n [-0.70121596 -0.14848696  0.4447616   0.78964476 -1.44599581]\n [-0.24319646 -0.50869583 -0.71355491  1.6893438   0.15928231]\n [-1.16957918  0.88411143  2.06193052  0.95635482 -1.76506937]\n [-0.39292929  1.23316063 -0.76789515  0.36770899  0.52893465]\n [-0.83562569 -0.09327588 -3.30149302 -1.10049808 -0.49826756]\n [-1.1564784   1.59866078 -1.49036706 -0.51615493 -0.11495883]\n [ 1.53257807 -1.46961267  1.10293807 -0.06587738 -1.22720805]\n [ 0.55340825  0.16530918 -0.66044256 -0.00630835 -0.631013  ]\n [ 0.20482212  0.62838015  1.52579113 -1.31392594  1.88733397]\n [-1.86078302 -0.18553562  0.52809152  0.20488143 -0.86839892]\n [-0.11681747 -0.52675145 -0.64959044  0.77349166  0.11131608]\n [-0.60160482  0.86584936  0.24707384  0.73675168  0.38392944]]"}, "kwargs": {"alpha": "[0 1 2 3 4]", "sample_weight": null, "max_iter": null, "tol": 1e-08, "solver": "saga", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[ 0.76217291  0.3584001  -0.05998943  0.34269958  0.40785904 -0.49453411\n  -0.14817959  0.02351771  0.37187968 -0.28187885]\n [-0.54394872 -0.51918157  0.15117121 -0.04325525  0.23426089 -0.07275218\n  -0.04751944  0.00495976 -0.02414437 -0.07750358]\n [-0.12351239  0.38494334 -0.18553014 -0.20639283 -0.27577428 -0.16243397\n   0.23632943  0.48674928  0.10303039  0.18862989]\n [-0.03324589 -0.23136173 -0.13124338 -0.07095716 -0.19888589 -0.27042907\n   0.18183843 -0.14296576 -0.02451485  0.19207908]\n [-0.49138575 -0.04249492 -0.01921611 -0.01809752  0.12870072 -0.08973085\n  -0.48741235  0.29020131 -0.33380106 -0.45155417]]", "[182 135 108 101  99]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [150, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480 484 488 492 496 500\n 504 508 512 516 520 524 528 532 536 540 544 548 552 556 560 564 568 572\n 576 580 584 588 592 596 600]", "data": "[5.1 3.5 1.4 0.2 4.9 3.  1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.  3.6\n 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.  3.4 1.5 0.2 4.4 2.9 1.4 0.2\n 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.  1.4 0.1 4.3 3.\n 1.1 0.1 5.8 4.  1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3\n 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6\n 1.  0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.  3.  1.6 0.2 5.  3.4 1.6 0.4\n 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 4.8 3.1 1.6 0.2 5.4 3.4\n 1.5 0.4 5.2 4.1 1.5 0.1 5.5 4.2 1.4 0.2 4.9 3.1 1.5 0.2 5.  3.2 1.2 0.2\n 5.5 3.5 1.3 0.2 4.9 3.6 1.4 0.1 4.4 3.  1.3 0.2 5.1 3.4 1.5 0.2 5.  3.5\n 1.3 0.3 4.5 2.3 1.3 0.3 4.4 3.2 1.3 0.2 5.  3.5 1.6 0.6 5.1 3.8 1.9 0.4\n 4.8 3.  1.4 0.3 5.1 3.8 1.6 0.2 4.6 3.2 1.4 0.2 5.3 3.7 1.5 0.2 5.  3.3\n 1.4 0.2 7.  3.2 4.7 1.4 6.4 3.2 4.5 1.5 6.9 3.1 4.9 1.5 5.5 2.3 4.  1.3\n 6.5 2.8 4.6 1.5 5.7 2.8 4.5 1.3 6.3 3.3 4.7 1.6 4.9 2.4 3.3 1.  6.6 2.9\n 4.6 1.3 5.2 2.7 3.9 1.4 5.  2.  3.5 1.  5.9 3.  4.2 1.5 6.  2.2 4.  1.\n 6.1 2.9 4.7 1.4 5.6 2.9 3.6 1.3 6.7 3.1 4.4 1.4 5.6 3.  4.5 1.5 5.8 2.7\n 4.1 1.  6.2 2.2 4.5 1.5 5.6 2.5 3.9 1.1 5.9 3.2 4.8 1.8 6.1 2.8 4.  1.3\n 6.3 2.5 4.9 1.5 6.1 2.8 4.7 1.2 6.4 2.9 4.3 1.3 6.6 3.  4.4 1.4 6.8 2.8\n 4.8 1.4 6.7 3.  5.  1.7 6.  2.9 4.5 1.5 5.7 2.6 3.5 1.  5.5 2.4 3.8 1.1\n 5.5 2.4 3.7 1.  5.8 2.7 3.9 1.2 6.  2.7 5.1 1.6 5.4 3.  4.5 1.5 6.  3.4\n 4.5 1.6 6.7 3.1 4.7 1.5 6.3 2.3 4.4 1.3 5.6 3.  4.1 1.3 5.5 2.5 4.  1.3\n 5.5 2.6 4.4 1.2 6.1 3.  4.6 1.4 5.8 2.6 4.  1.2 5.  2.3 3.3 1.  5.6 2.7\n 4.2 1.3 5.7 3.  4.2 1.2 5.7 2.9 4.2 1.3 6.2 2.9 4.3 1.3 5.1 2.5 3.  1.1\n 5.7 2.8 4.1 1.3 6.3 3.3 6.  2.5 5.8 2.7 5.1 1.9 7.1 3.  5.9 2.1 6.3 2.9\n 5.6 1.8 6.5 3.  5.8 2.2 7.6 3.  6.6 2.1 4.9 2.5 4.5 1.7 7.3 2.9 6.3 1.8\n 6.7 2.5 5.8 1.8 7.2 3.6 6.1 2.5 6.5 3.2 5.1 2.  6.4 2.7 5.3 1.9 6.8 3.\n 5.5 2.1 5.7 2.5 5.  2.  5.8 2.8 5.1 2.4 6.4 3.2 5.3 2.3 6.5 3.  5.5 1.8\n 7.7 3.8 6.7 2.2 7.7 2.6 6.9 2.3 6.  2.2 5.  1.5 6.9 3.2 5.7 2.3 5.6 2.8\n 4.9 2.  7.7 2.8 6.7 2.  6.3 2.7 4.9 1.8 6.7 3.3 5.7 2.1 7.2 3.2 6.  1.8\n 6.2 2.8 4.8 1.8 6.1 3.  4.9 1.8 6.4 2.8 5.6 2.1 7.2 3.  5.8 1.6 7.4 2.8\n 6.1 1.9 7.9 3.8 6.4 2.  6.4 2.8 5.6 2.2 6.3 2.8 5.1 1.5 6.1 2.6 5.6 1.4\n 7.7 3.  6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8 6.  3.  4.8 1.8 6.9 3.1\n 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7 5.1 1.9 6.8 3.2 5.9 2.3\n 6.7 3.3 5.7 2.5 6.7 3.  5.2 2.3 6.3 2.5 5.  1.9 6.5 3.  5.2 2.  6.2 3.4\n 5.4 2.3 5.9 3.  5.1 1.8]"}, "y": "[[ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.078444    0.43311857 -0.44142423 -0.10073172]\n [ 0.33704676 -0.66961764  0.30614756 -0.92456684]\n [-0.41222222  0.23212621  0.1329097   1.02653909]]", "[29 74 73]", "[-9.75097592e-05  1.70799830e-02 -1.53296544e-02]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [120, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480]", "data": "[4.8 3.1 1.6 0.2 5.4 3.4 1.5 0.4 5.2 4.1 1.5 0.1 5.5 4.2 1.4 0.2 4.9 3.1\n 1.5 0.2 5.  3.2 1.2 0.2 5.5 3.5 1.3 0.2 4.9 3.6 1.4 0.1 4.4 3.  1.3 0.2\n 5.1 3.4 1.5 0.2 5.  3.5 1.3 0.3 4.5 2.3 1.3 0.3 4.4 3.2 1.3 0.2 5.  3.5\n 1.6 0.6 5.1 3.8 1.9 0.4 4.8 3.  1.4 0.3 5.1 3.8 1.6 0.2 4.6 3.2 1.4 0.2\n 5.3 3.7 1.5 0.2 5.  3.3 1.4 0.2 7.  3.2 4.7 1.4 6.4 3.2 4.5 1.5 6.9 3.1\n 4.9 1.5 5.5 2.3 4.  1.3 6.5 2.8 4.6 1.5 5.7 2.8 4.5 1.3 6.3 3.3 4.7 1.6\n 4.9 2.4 3.3 1.  6.6 2.9 4.6 1.3 5.2 2.7 3.9 1.4 5.  2.  3.5 1.  5.9 3.\n 4.2 1.5 6.  2.2 4.  1.  6.1 2.9 4.7 1.4 5.6 2.9 3.6 1.3 6.7 3.1 4.4 1.4\n 5.6 3.  4.5 1.5 5.8 2.7 4.1 1.  6.2 2.2 4.5 1.5 5.6 2.5 3.9 1.1 5.9 3.2\n 4.8 1.8 6.1 2.8 4.  1.3 6.3 2.5 4.9 1.5 6.1 2.8 4.7 1.2 6.4 2.9 4.3 1.3\n 6.6 3.  4.4 1.4 6.8 2.8 4.8 1.4 6.7 3.  5.  1.7 6.  2.9 4.5 1.5 5.7 2.6\n 3.5 1.  5.5 2.4 3.8 1.1 5.5 2.4 3.7 1.  5.8 2.7 3.9 1.2 6.  2.7 5.1 1.6\n 5.4 3.  4.5 1.5 6.  3.4 4.5 1.6 6.7 3.1 4.7 1.5 6.3 2.3 4.4 1.3 5.6 3.\n 4.1 1.3 5.5 2.5 4.  1.3 5.5 2.6 4.4 1.2 6.1 3.  4.6 1.4 5.8 2.6 4.  1.2\n 5.  2.3 3.3 1.  5.6 2.7 4.2 1.3 5.7 3.  4.2 1.2 5.7 2.9 4.2 1.3 6.2 2.9\n 4.3 1.3 5.1 2.5 3.  1.1 5.7 2.8 4.1 1.3 6.3 3.3 6.  2.5 5.8 2.7 5.1 1.9\n 7.1 3.  5.9 2.1 6.3 2.9 5.6 1.8 6.5 3.  5.8 2.2 7.6 3.  6.6 2.1 4.9 2.5\n 4.5 1.7 7.3 2.9 6.3 1.8 6.7 2.5 5.8 1.8 7.2 3.6 6.1 2.5 6.5 3.2 5.1 2.\n 6.4 2.7 5.3 1.9 6.8 3.  5.5 2.1 5.7 2.5 5.  2.  5.8 2.8 5.1 2.4 6.4 3.2\n 5.3 2.3 6.5 3.  5.5 1.8 7.7 3.8 6.7 2.2 7.7 2.6 6.9 2.3 6.  2.2 5.  1.5\n 6.9 3.2 5.7 2.3 5.6 2.8 4.9 2.  7.7 2.8 6.7 2.  6.3 2.7 4.9 1.8 6.7 3.3\n 5.7 2.1 7.2 3.2 6.  1.8 6.2 2.8 4.8 1.8 6.1 3.  4.9 1.8 6.4 2.8 5.6 2.1\n 7.2 3.  5.8 1.6 7.4 2.8 6.1 1.9 7.9 3.8 6.4 2.  6.4 2.8 5.6 2.2 6.3 2.8\n 5.1 1.5 6.1 2.6 5.6 1.4 7.7 3.  6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8\n 6.  3.  4.8 1.8 6.9 3.1 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7\n 5.1 1.9 6.8 3.2 5.9 2.3 6.7 3.3 5.7 2.5 6.7 3.  5.2 2.3 6.3 2.5 5.  1.9\n 6.5 3.  5.2 2.  6.2 3.4 5.4 2.3 5.9 3.  5.1 1.8]"}, "y": "[[ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]]"}, "kwargs": {"alpha": 0.1, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.1022658   0.45765846 -0.4419126  -0.03764995]\n [ 0.3647535  -0.64078515  0.30589455 -1.1686141 ]\n [-0.47338282  0.18878002  0.14561957  1.19105309]]", "[55 97 91]", "[-0.00146919  0.02211335 -0.01842362]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [120, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480]", "data": "[5.1 3.5 1.4 0.2 4.9 3.  1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.  3.6\n 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.  3.4 1.5 0.2 4.4 2.9 1.4 0.2\n 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.  1.4 0.1 4.3 3.\n 1.1 0.1 5.8 4.  1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3\n 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6\n 1.  0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.  3.  1.6 0.2 5.  3.4 1.6 0.4\n 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 5.  2.  3.5 1.  5.9 3.\n 4.2 1.5 6.  2.2 4.  1.  6.1 2.9 4.7 1.4 5.6 2.9 3.6 1.3 6.7 3.1 4.4 1.4\n 5.6 3.  4.5 1.5 5.8 2.7 4.1 1.  6.2 2.2 4.5 1.5 5.6 2.5 3.9 1.1 5.9 3.2\n 4.8 1.8 6.1 2.8 4.  1.3 6.3 2.5 4.9 1.5 6.1 2.8 4.7 1.2 6.4 2.9 4.3 1.3\n 6.6 3.  4.4 1.4 6.8 2.8 4.8 1.4 6.7 3.  5.  1.7 6.  2.9 4.5 1.5 5.7 2.6\n 3.5 1.  5.5 2.4 3.8 1.1 5.5 2.4 3.7 1.  5.8 2.7 3.9 1.2 6.  2.7 5.1 1.6\n 5.4 3.  4.5 1.5 6.  3.4 4.5 1.6 6.7 3.1 4.7 1.5 6.3 2.3 4.4 1.3 5.6 3.\n 4.1 1.3 5.5 2.5 4.  1.3 5.5 2.6 4.4 1.2 6.1 3.  4.6 1.4 5.8 2.6 4.  1.2\n 5.  2.3 3.3 1.  5.6 2.7 4.2 1.3 5.7 3.  4.2 1.2 5.7 2.9 4.2 1.3 6.2 2.9\n 4.3 1.3 5.1 2.5 3.  1.1 5.7 2.8 4.1 1.3 6.3 3.3 6.  2.5 5.8 2.7 5.1 1.9\n 7.1 3.  5.9 2.1 6.3 2.9 5.6 1.8 6.5 3.  5.8 2.2 7.6 3.  6.6 2.1 4.9 2.5\n 4.5 1.7 7.3 2.9 6.3 1.8 6.7 2.5 5.8 1.8 7.2 3.6 6.1 2.5 6.5 3.2 5.1 2.\n 6.4 2.7 5.3 1.9 6.8 3.  5.5 2.1 5.7 2.5 5.  2.  5.8 2.8 5.1 2.4 6.4 3.2\n 5.3 2.3 6.5 3.  5.5 1.8 7.7 3.8 6.7 2.2 7.7 2.6 6.9 2.3 6.  2.2 5.  1.5\n 6.9 3.2 5.7 2.3 5.6 2.8 4.9 2.  7.7 2.8 6.7 2.  6.3 2.7 4.9 1.8 6.7 3.3\n 5.7 2.1 7.2 3.2 6.  1.8 6.2 2.8 4.8 1.8 6.1 3.  4.9 1.8 6.4 2.8 5.6 2.1\n 7.2 3.  5.8 1.6 7.4 2.8 6.1 1.9 7.9 3.8 6.4 2.  6.4 2.8 5.6 2.2 6.3 2.8\n 5.1 1.5 6.1 2.6 5.6 1.4 7.7 3.  6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8\n 6.  3.  4.8 1.8 6.9 3.1 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7\n 5.1 1.9 6.8 3.2 5.9 2.3 6.7 3.3 5.7 2.5 6.7 3.  5.2 2.3 6.3 2.5 5.  1.9\n 6.5 3.  5.2 2.  6.2 3.4 5.4 2.3 5.9 3.  5.1 1.8]"}, "y": "[[ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]]"}, "kwargs": {"alpha": 0.1, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.05045679  0.48871214 -0.37986359 -0.15944697]\n [ 0.39588122 -0.69200157  0.22947975 -0.93628344]\n [-0.43887254  0.19528393  0.14092281  1.10891182]]", "[49 83 87]", "[-0.00163682  0.01985213 -0.01757578]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [120, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480]", "data": "[5.1 3.5 1.4 0.2 4.9 3.  1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.  3.6\n 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.  3.4 1.5 0.2 4.4 2.9 1.4 0.2\n 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.  1.4 0.1 4.3 3.\n 1.1 0.1 5.8 4.  1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3\n 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6\n 1.  0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.  3.  1.6 0.2 5.  3.4 1.6 0.4\n 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 4.8 3.1 1.6 0.2 5.4 3.4\n 1.5 0.4 5.2 4.1 1.5 0.1 5.5 4.2 1.4 0.2 4.9 3.1 1.5 0.2 5.  3.2 1.2 0.2\n 5.5 3.5 1.3 0.2 4.9 3.6 1.4 0.1 4.4 3.  1.3 0.2 5.1 3.4 1.5 0.2 5.  3.5\n 1.3 0.3 4.5 2.3 1.3 0.3 4.4 3.2 1.3 0.2 5.  3.5 1.6 0.6 5.1 3.8 1.9 0.4\n 4.8 3.  1.4 0.3 5.1 3.8 1.6 0.2 4.6 3.2 1.4 0.2 5.3 3.7 1.5 0.2 5.  3.3\n 1.4 0.2 7.  3.2 4.7 1.4 6.4 3.2 4.5 1.5 6.9 3.1 4.9 1.5 5.5 2.3 4.  1.3\n 6.5 2.8 4.6 1.5 5.7 2.8 4.5 1.3 6.3 3.3 4.7 1.6 4.9 2.4 3.3 1.  6.6 2.9\n 4.6 1.3 5.2 2.7 3.9 1.4 5.5 2.6 4.4 1.2 6.1 3.  4.6 1.4 5.8 2.6 4.  1.2\n 5.  2.3 3.3 1.  5.6 2.7 4.2 1.3 5.7 3.  4.2 1.2 5.7 2.9 4.2 1.3 6.2 2.9\n 4.3 1.3 5.1 2.5 3.  1.1 5.7 2.8 4.1 1.3 6.3 3.3 6.  2.5 5.8 2.7 5.1 1.9\n 7.1 3.  5.9 2.1 6.3 2.9 5.6 1.8 6.5 3.  5.8 2.2 7.6 3.  6.6 2.1 4.9 2.5\n 4.5 1.7 7.3 2.9 6.3 1.8 6.7 2.5 5.8 1.8 7.2 3.6 6.1 2.5 6.5 3.2 5.1 2.\n 6.4 2.7 5.3 1.9 6.8 3.  5.5 2.1 5.7 2.5 5.  2.  5.8 2.8 5.1 2.4 6.4 3.2\n 5.3 2.3 6.5 3.  5.5 1.8 7.7 3.8 6.7 2.2 7.7 2.6 6.9 2.3 6.  2.2 5.  1.5\n 6.9 3.2 5.7 2.3 5.6 2.8 4.9 2.  7.7 2.8 6.7 2.  6.3 2.7 4.9 1.8 6.7 3.3\n 5.7 2.1 7.2 3.2 6.  1.8 6.2 2.8 4.8 1.8 6.1 3.  4.9 1.8 6.4 2.8 5.6 2.1\n 7.2 3.  5.8 1.6 7.4 2.8 6.1 1.9 7.9 3.8 6.4 2.  6.4 2.8 5.6 2.2 6.3 2.8\n 5.1 1.5 6.1 2.6 5.6 1.4 7.7 3.  6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8\n 6.  3.  4.8 1.8 6.9 3.1 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7\n 5.1 1.9 6.8 3.2 5.9 2.3 6.7 3.3 5.7 2.5 6.7 3.  5.2 2.3 6.3 2.5 5.  1.9\n 6.5 3.  5.2 2.  6.2 3.4 5.4 2.3 5.9 3.  5.1 1.8]"}, "y": "[[ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]]"}, "kwargs": {"alpha": 0.1, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.14053454  0.31117668 -0.43806625 -0.17419477]\n [ 0.18753929 -0.37813418  0.23837558 -0.68402859]\n [-0.33278814  0.07212946  0.20110997  0.86068671]]", "[32 97 87]", "[ 0.00030444  0.01378629 -0.01093507]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [120, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480]", "data": "[5.1 3.5 1.4 0.2 4.9 3.  1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.  3.6\n 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.  3.4 1.5 0.2 4.4 2.9 1.4 0.2\n 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.  1.4 0.1 4.3 3.\n 1.1 0.1 5.8 4.  1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3\n 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6\n 1.  0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.  3.  1.6 0.2 5.  3.4 1.6 0.4\n 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 4.8 3.1 1.6 0.2 5.4 3.4\n 1.5 0.4 5.2 4.1 1.5 0.1 5.5 4.2 1.4 0.2 4.9 3.1 1.5 0.2 5.  3.2 1.2 0.2\n 5.5 3.5 1.3 0.2 4.9 3.6 1.4 0.1 4.4 3.  1.3 0.2 5.1 3.4 1.5 0.2 5.  3.5\n 1.3 0.3 4.5 2.3 1.3 0.3 4.4 3.2 1.3 0.2 5.  3.5 1.6 0.6 5.1 3.8 1.9 0.4\n 4.8 3.  1.4 0.3 5.1 3.8 1.6 0.2 4.6 3.2 1.4 0.2 5.3 3.7 1.5 0.2 5.  3.3\n 1.4 0.2 7.  3.2 4.7 1.4 6.4 3.2 4.5 1.5 6.9 3.1 4.9 1.5 5.5 2.3 4.  1.3\n 6.5 2.8 4.6 1.5 5.7 2.8 4.5 1.3 6.3 3.3 4.7 1.6 4.9 2.4 3.3 1.  6.6 2.9\n 4.6 1.3 5.2 2.7 3.9 1.4 5.  2.  3.5 1.  5.9 3.  4.2 1.5 6.  2.2 4.  1.\n 6.1 2.9 4.7 1.4 5.6 2.9 3.6 1.3 6.7 3.1 4.4 1.4 5.6 3.  4.5 1.5 5.8 2.7\n 4.1 1.  6.2 2.2 4.5 1.5 5.6 2.5 3.9 1.1 5.9 3.2 4.8 1.8 6.1 2.8 4.  1.3\n 6.3 2.5 4.9 1.5 6.1 2.8 4.7 1.2 6.4 2.9 4.3 1.3 6.6 3.  4.4 1.4 6.8 2.8\n 4.8 1.4 6.7 3.  5.  1.7 6.  2.9 4.5 1.5 5.7 2.6 3.5 1.  5.5 2.4 3.8 1.1\n 5.5 2.4 3.7 1.  5.8 2.7 3.9 1.2 6.  2.7 5.1 1.6 5.4 3.  4.5 1.5 6.  3.4\n 4.5 1.6 6.7 3.1 4.7 1.5 6.3 2.3 4.4 1.3 5.6 3.  4.1 1.3 5.5 2.5 4.  1.3\n 6.9 3.2 5.7 2.3 5.6 2.8 4.9 2.  7.7 2.8 6.7 2.  6.3 2.7 4.9 1.8 6.7 3.3\n 5.7 2.1 7.2 3.2 6.  1.8 6.2 2.8 4.8 1.8 6.1 3.  4.9 1.8 6.4 2.8 5.6 2.1\n 7.2 3.  5.8 1.6 7.4 2.8 6.1 1.9 7.9 3.8 6.4 2.  6.4 2.8 5.6 2.2 6.3 2.8\n 5.1 1.5 6.1 2.6 5.6 1.4 7.7 3.  6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8\n 6.  3.  4.8 1.8 6.9 3.1 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7\n 5.1 1.9 6.8 3.2 5.9 2.3 6.7 3.3 5.7 2.5 6.7 3.  5.2 2.3 6.3 2.5 5.  1.9\n 6.5 3.  5.2 2.  6.2 3.4 5.4 2.3 5.9 3.  5.1 1.8]"}, "y": "[[ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]]"}, "kwargs": {"alpha": 0.1, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.06383966  0.43175914 -0.47701496 -0.07237026]\n [ 0.31401229 -0.71863947  0.4660417  -1.12774164]\n [-0.38293241  0.29097395  0.02148151  1.18117165]]", "[ 50 109 104]", "[ 0.00012679  0.01451726 -0.01384053]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [120, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480]", "data": "[5.1 3.5 1.4 0.2 4.9 3.  1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.  3.6\n 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.  3.4 1.5 0.2 4.4 2.9 1.4 0.2\n 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.  1.4 0.1 4.3 3.\n 1.1 0.1 5.8 4.  1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3\n 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6\n 1.  0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.  3.  1.6 0.2 5.  3.4 1.6 0.4\n 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 4.8 3.1 1.6 0.2 5.4 3.4\n 1.5 0.4 5.2 4.1 1.5 0.1 5.5 4.2 1.4 0.2 4.9 3.1 1.5 0.2 5.  3.2 1.2 0.2\n 5.5 3.5 1.3 0.2 4.9 3.6 1.4 0.1 4.4 3.  1.3 0.2 5.1 3.4 1.5 0.2 5.  3.5\n 1.3 0.3 4.5 2.3 1.3 0.3 4.4 3.2 1.3 0.2 5.  3.5 1.6 0.6 5.1 3.8 1.9 0.4\n 4.8 3.  1.4 0.3 5.1 3.8 1.6 0.2 4.6 3.2 1.4 0.2 5.3 3.7 1.5 0.2 5.  3.3\n 1.4 0.2 7.  3.2 4.7 1.4 6.4 3.2 4.5 1.5 6.9 3.1 4.9 1.5 5.5 2.3 4.  1.3\n 6.5 2.8 4.6 1.5 5.7 2.8 4.5 1.3 6.3 3.3 4.7 1.6 4.9 2.4 3.3 1.  6.6 2.9\n 4.6 1.3 5.2 2.7 3.9 1.4 5.  2.  3.5 1.  5.9 3.  4.2 1.5 6.  2.2 4.  1.\n 6.1 2.9 4.7 1.4 5.6 2.9 3.6 1.3 6.7 3.1 4.4 1.4 5.6 3.  4.5 1.5 5.8 2.7\n 4.1 1.  6.2 2.2 4.5 1.5 5.6 2.5 3.9 1.1 5.9 3.2 4.8 1.8 6.1 2.8 4.  1.3\n 6.3 2.5 4.9 1.5 6.1 2.8 4.7 1.2 6.4 2.9 4.3 1.3 6.6 3.  4.4 1.4 6.8 2.8\n 4.8 1.4 6.7 3.  5.  1.7 6.  2.9 4.5 1.5 5.7 2.6 3.5 1.  5.5 2.4 3.8 1.1\n 5.5 2.4 3.7 1.  5.8 2.7 3.9 1.2 6.  2.7 5.1 1.6 5.4 3.  4.5 1.5 6.  3.4\n 4.5 1.6 6.7 3.1 4.7 1.5 6.3 2.3 4.4 1.3 5.6 3.  4.1 1.3 5.5 2.5 4.  1.3\n 5.5 2.6 4.4 1.2 6.1 3.  4.6 1.4 5.8 2.6 4.  1.2 5.  2.3 3.3 1.  5.6 2.7\n 4.2 1.3 5.7 3.  4.2 1.2 5.7 2.9 4.2 1.3 6.2 2.9 4.3 1.3 5.1 2.5 3.  1.1\n 5.7 2.8 4.1 1.3 6.3 3.3 6.  2.5 5.8 2.7 5.1 1.9 7.1 3.  5.9 2.1 6.3 2.9\n 5.6 1.8 6.5 3.  5.8 2.2 7.6 3.  6.6 2.1 4.9 2.5 4.5 1.7 7.3 2.9 6.3 1.8\n 6.7 2.5 5.8 1.8 7.2 3.6 6.1 2.5 6.5 3.2 5.1 2.  6.4 2.7 5.3 1.9 6.8 3.\n 5.5 2.1 5.7 2.5 5.  2.  5.8 2.8 5.1 2.4 6.4 3.2 5.3 2.3 6.5 3.  5.5 1.8\n 7.7 3.8 6.7 2.2 7.7 2.6 6.9 2.3 6.  2.2 5.  1.5]"}, "y": "[[ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]]"}, "kwargs": {"alpha": 0.1, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.03562944  0.45690354 -0.44803963 -0.11084324]\n [ 0.26496849 -0.70720625  0.51287147 -1.06611526]\n [-0.30759029  0.25559753 -0.05050437  1.14994987]]", "[ 57 149 144]", "[-0.00059718  0.01678163 -0.01381177]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [120, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480]", "data": "[4.8 3.1 1.6 0.2 5.4 3.4 1.5 0.4 5.2 4.1 1.5 0.1 5.5 4.2 1.4 0.2 4.9 3.1\n 1.5 0.2 5.  3.2 1.2 0.2 5.5 3.5 1.3 0.2 4.9 3.6 1.4 0.1 4.4 3.  1.3 0.2\n 5.1 3.4 1.5 0.2 5.  3.5 1.3 0.3 4.5 2.3 1.3 0.3 4.4 3.2 1.3 0.2 5.  3.5\n 1.6 0.6 5.1 3.8 1.9 0.4 4.8 3.  1.4 0.3 5.1 3.8 1.6 0.2 4.6 3.2 1.4 0.2\n 5.3 3.7 1.5 0.2 5.  3.3 1.4 0.2 7.  3.2 4.7 1.4 6.4 3.2 4.5 1.5 6.9 3.1\n 4.9 1.5 5.5 2.3 4.  1.3 6.5 2.8 4.6 1.5 5.7 2.8 4.5 1.3 6.3 3.3 4.7 1.6\n 4.9 2.4 3.3 1.  6.6 2.9 4.6 1.3 5.2 2.7 3.9 1.4 5.  2.  3.5 1.  5.9 3.\n 4.2 1.5 6.  2.2 4.  1.  6.1 2.9 4.7 1.4 5.6 2.9 3.6 1.3 6.7 3.1 4.4 1.4\n 5.6 3.  4.5 1.5 5.8 2.7 4.1 1.  6.2 2.2 4.5 1.5 5.6 2.5 3.9 1.1 5.9 3.2\n 4.8 1.8 6.1 2.8 4.  1.3 6.3 2.5 4.9 1.5 6.1 2.8 4.7 1.2 6.4 2.9 4.3 1.3\n 6.6 3.  4.4 1.4 6.8 2.8 4.8 1.4 6.7 3.  5.  1.7 6.  2.9 4.5 1.5 5.7 2.6\n 3.5 1.  5.5 2.4 3.8 1.1 5.5 2.4 3.7 1.  5.8 2.7 3.9 1.2 6.  2.7 5.1 1.6\n 5.4 3.  4.5 1.5 6.  3.4 4.5 1.6 6.7 3.1 4.7 1.5 6.3 2.3 4.4 1.3 5.6 3.\n 4.1 1.3 5.5 2.5 4.  1.3 5.5 2.6 4.4 1.2 6.1 3.  4.6 1.4 5.8 2.6 4.  1.2\n 5.  2.3 3.3 1.  5.6 2.7 4.2 1.3 5.7 3.  4.2 1.2 5.7 2.9 4.2 1.3 6.2 2.9\n 4.3 1.3 5.1 2.5 3.  1.1 5.7 2.8 4.1 1.3 6.3 3.3 6.  2.5 5.8 2.7 5.1 1.9\n 7.1 3.  5.9 2.1 6.3 2.9 5.6 1.8 6.5 3.  5.8 2.2 7.6 3.  6.6 2.1 4.9 2.5\n 4.5 1.7 7.3 2.9 6.3 1.8 6.7 2.5 5.8 1.8 7.2 3.6 6.1 2.5 6.5 3.2 5.1 2.\n 6.4 2.7 5.3 1.9 6.8 3.  5.5 2.1 5.7 2.5 5.  2.  5.8 2.8 5.1 2.4 6.4 3.2\n 5.3 2.3 6.5 3.  5.5 1.8 7.7 3.8 6.7 2.2 7.7 2.6 6.9 2.3 6.  2.2 5.  1.5\n 6.9 3.2 5.7 2.3 5.6 2.8 4.9 2.  7.7 2.8 6.7 2.  6.3 2.7 4.9 1.8 6.7 3.3\n 5.7 2.1 7.2 3.2 6.  1.8 6.2 2.8 4.8 1.8 6.1 3.  4.9 1.8 6.4 2.8 5.6 2.1\n 7.2 3.  5.8 1.6 7.4 2.8 6.1 1.9 7.9 3.8 6.4 2.  6.4 2.8 5.6 2.2 6.3 2.8\n 5.1 1.5 6.1 2.6 5.6 1.4 7.7 3.  6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8\n 6.  3.  4.8 1.8 6.9 3.1 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7\n 5.1 1.9 6.8 3.2 5.9 2.3 6.7 3.3 5.7 2.5 6.7 3.  5.2 2.3 6.3 2.5 5.  1.9\n 6.5 3.  5.2 2.  6.2 3.4 5.4 2.3 5.9 3.  5.1 1.8]"}, "y": "[[ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.1048149   0.44863134 -0.43353396 -0.05580876]\n [ 0.36477289 -0.62186715  0.24280573 -1.01537391]\n [-0.47427408  0.17712554  0.19788373  1.05964071]]", "[53 78 70]", "[-0.00100195  0.01837241 -0.01497579]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [120, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480]", "data": "[5.1 3.5 1.4 0.2 4.9 3.  1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.  3.6\n 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.  3.4 1.5 0.2 4.4 2.9 1.4 0.2\n 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.  1.4 0.1 4.3 3.\n 1.1 0.1 5.8 4.  1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3\n 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6\n 1.  0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.  3.  1.6 0.2 5.  3.4 1.6 0.4\n 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 5.  2.  3.5 1.  5.9 3.\n 4.2 1.5 6.  2.2 4.  1.  6.1 2.9 4.7 1.4 5.6 2.9 3.6 1.3 6.7 3.1 4.4 1.4\n 5.6 3.  4.5 1.5 5.8 2.7 4.1 1.  6.2 2.2 4.5 1.5 5.6 2.5 3.9 1.1 5.9 3.2\n 4.8 1.8 6.1 2.8 4.  1.3 6.3 2.5 4.9 1.5 6.1 2.8 4.7 1.2 6.4 2.9 4.3 1.3\n 6.6 3.  4.4 1.4 6.8 2.8 4.8 1.4 6.7 3.  5.  1.7 6.  2.9 4.5 1.5 5.7 2.6\n 3.5 1.  5.5 2.4 3.8 1.1 5.5 2.4 3.7 1.  5.8 2.7 3.9 1.2 6.  2.7 5.1 1.6\n 5.4 3.  4.5 1.5 6.  3.4 4.5 1.6 6.7 3.1 4.7 1.5 6.3 2.3 4.4 1.3 5.6 3.\n 4.1 1.3 5.5 2.5 4.  1.3 5.5 2.6 4.4 1.2 6.1 3.  4.6 1.4 5.8 2.6 4.  1.2\n 5.  2.3 3.3 1.  5.6 2.7 4.2 1.3 5.7 3.  4.2 1.2 5.7 2.9 4.2 1.3 6.2 2.9\n 4.3 1.3 5.1 2.5 3.  1.1 5.7 2.8 4.1 1.3 6.3 3.3 6.  2.5 5.8 2.7 5.1 1.9\n 7.1 3.  5.9 2.1 6.3 2.9 5.6 1.8 6.5 3.  5.8 2.2 7.6 3.  6.6 2.1 4.9 2.5\n 4.5 1.7 7.3 2.9 6.3 1.8 6.7 2.5 5.8 1.8 7.2 3.6 6.1 2.5 6.5 3.2 5.1 2.\n 6.4 2.7 5.3 1.9 6.8 3.  5.5 2.1 5.7 2.5 5.  2.  5.8 2.8 5.1 2.4 6.4 3.2\n 5.3 2.3 6.5 3.  5.5 1.8 7.7 3.8 6.7 2.2 7.7 2.6 6.9 2.3 6.  2.2 5.  1.5\n 6.9 3.2 5.7 2.3 5.6 2.8 4.9 2.  7.7 2.8 6.7 2.  6.3 2.7 4.9 1.8 6.7 3.3\n 5.7 2.1 7.2 3.2 6.  1.8 6.2 2.8 4.8 1.8 6.1 3.  4.9 1.8 6.4 2.8 5.6 2.1\n 7.2 3.  5.8 1.6 7.4 2.8 6.1 1.9 7.9 3.8 6.4 2.  6.4 2.8 5.6 2.2 6.3 2.8\n 5.1 1.5 6.1 2.6 5.6 1.4 7.7 3.  6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8\n 6.  3.  4.8 1.8 6.9 3.1 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7\n 5.1 1.9 6.8 3.2 5.9 2.3 6.7 3.3 5.7 2.5 6.7 3.  5.2 2.3 6.3 2.5 5.  1.9\n 6.5 3.  5.2 2.  6.2 3.4 5.4 2.3 5.9 3.  5.1 1.8]"}, "y": "[[ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.06291828  0.47135295 -0.38726369 -0.15373212]\n [ 0.38139372 -0.6608333   0.19136856 -0.82386273]\n [-0.43887786  0.18391261  0.18861492  0.98824533]]", "[56 71 74]", "[-0.00168828  0.0170178  -0.01547177]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [120, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480]", "data": "[5.1 3.5 1.4 0.2 4.9 3.  1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.  3.6\n 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.  3.4 1.5 0.2 4.4 2.9 1.4 0.2\n 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.  1.4 0.1 4.3 3.\n 1.1 0.1 5.8 4.  1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3\n 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6\n 1.  0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.  3.  1.6 0.2 5.  3.4 1.6 0.4\n 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 4.8 3.1 1.6 0.2 5.4 3.4\n 1.5 0.4 5.2 4.1 1.5 0.1 5.5 4.2 1.4 0.2 4.9 3.1 1.5 0.2 5.  3.2 1.2 0.2\n 5.5 3.5 1.3 0.2 4.9 3.6 1.4 0.1 4.4 3.  1.3 0.2 5.1 3.4 1.5 0.2 5.  3.5\n 1.3 0.3 4.5 2.3 1.3 0.3 4.4 3.2 1.3 0.2 5.  3.5 1.6 0.6 5.1 3.8 1.9 0.4\n 4.8 3.  1.4 0.3 5.1 3.8 1.6 0.2 4.6 3.2 1.4 0.2 5.3 3.7 1.5 0.2 5.  3.3\n 1.4 0.2 7.  3.2 4.7 1.4 6.4 3.2 4.5 1.5 6.9 3.1 4.9 1.5 5.5 2.3 4.  1.3\n 6.5 2.8 4.6 1.5 5.7 2.8 4.5 1.3 6.3 3.3 4.7 1.6 4.9 2.4 3.3 1.  6.6 2.9\n 4.6 1.3 5.2 2.7 3.9 1.4 5.5 2.6 4.4 1.2 6.1 3.  4.6 1.4 5.8 2.6 4.  1.2\n 5.  2.3 3.3 1.  5.6 2.7 4.2 1.3 5.7 3.  4.2 1.2 5.7 2.9 4.2 1.3 6.2 2.9\n 4.3 1.3 5.1 2.5 3.  1.1 5.7 2.8 4.1 1.3 6.3 3.3 6.  2.5 5.8 2.7 5.1 1.9\n 7.1 3.  5.9 2.1 6.3 2.9 5.6 1.8 6.5 3.  5.8 2.2 7.6 3.  6.6 2.1 4.9 2.5\n 4.5 1.7 7.3 2.9 6.3 1.8 6.7 2.5 5.8 1.8 7.2 3.6 6.1 2.5 6.5 3.2 5.1 2.\n 6.4 2.7 5.3 1.9 6.8 3.  5.5 2.1 5.7 2.5 5.  2.  5.8 2.8 5.1 2.4 6.4 3.2\n 5.3 2.3 6.5 3.  5.5 1.8 7.7 3.8 6.7 2.2 7.7 2.6 6.9 2.3 6.  2.2 5.  1.5\n 6.9 3.2 5.7 2.3 5.6 2.8 4.9 2.  7.7 2.8 6.7 2.  6.3 2.7 4.9 1.8 6.7 3.3\n 5.7 2.1 7.2 3.2 6.  1.8 6.2 2.8 4.8 1.8 6.1 3.  4.9 1.8 6.4 2.8 5.6 2.1\n 7.2 3.  5.8 1.6 7.4 2.8 6.1 1.9 7.9 3.8 6.4 2.  6.4 2.8 5.6 2.2 6.3 2.8\n 5.1 1.5 6.1 2.6 5.6 1.4 7.7 3.  6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8\n 6.  3.  4.8 1.8 6.9 3.1 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7\n 5.1 1.9 6.8 3.2 5.9 2.3 6.7 3.3 5.7 2.5 6.7 3.  5.2 2.3 6.3 2.5 5.  1.9\n 6.5 3.  5.2 2.  6.2 3.4 5.4 2.3 5.9 3.  5.1 1.8]"}, "y": "[[ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.14541939  0.30212188 -0.43356124 -0.18863787]\n [ 0.18277949 -0.36123016  0.20020644 -0.58533051]\n [-0.32521204  0.05403315  0.23462963  0.76683271]]", "[32 83 69]", "[ 0.00031034  0.0118319  -0.00951225]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [120, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480]", "data": "[5.1 3.5 1.4 0.2 4.9 3.  1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.  3.6\n 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.  3.4 1.5 0.2 4.4 2.9 1.4 0.2\n 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.  1.4 0.1 4.3 3.\n 1.1 0.1 5.8 4.  1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3\n 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6\n 1.  0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.  3.  1.6 0.2 5.  3.4 1.6 0.4\n 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 4.8 3.1 1.6 0.2 5.4 3.4\n 1.5 0.4 5.2 4.1 1.5 0.1 5.5 4.2 1.4 0.2 4.9 3.1 1.5 0.2 5.  3.2 1.2 0.2\n 5.5 3.5 1.3 0.2 4.9 3.6 1.4 0.1 4.4 3.  1.3 0.2 5.1 3.4 1.5 0.2 5.  3.5\n 1.3 0.3 4.5 2.3 1.3 0.3 4.4 3.2 1.3 0.2 5.  3.5 1.6 0.6 5.1 3.8 1.9 0.4\n 4.8 3.  1.4 0.3 5.1 3.8 1.6 0.2 4.6 3.2 1.4 0.2 5.3 3.7 1.5 0.2 5.  3.3\n 1.4 0.2 7.  3.2 4.7 1.4 6.4 3.2 4.5 1.5 6.9 3.1 4.9 1.5 5.5 2.3 4.  1.3\n 6.5 2.8 4.6 1.5 5.7 2.8 4.5 1.3 6.3 3.3 4.7 1.6 4.9 2.4 3.3 1.  6.6 2.9\n 4.6 1.3 5.2 2.7 3.9 1.4 5.  2.  3.5 1.  5.9 3.  4.2 1.5 6.  2.2 4.  1.\n 6.1 2.9 4.7 1.4 5.6 2.9 3.6 1.3 6.7 3.1 4.4 1.4 5.6 3.  4.5 1.5 5.8 2.7\n 4.1 1.  6.2 2.2 4.5 1.5 5.6 2.5 3.9 1.1 5.9 3.2 4.8 1.8 6.1 2.8 4.  1.3\n 6.3 2.5 4.9 1.5 6.1 2.8 4.7 1.2 6.4 2.9 4.3 1.3 6.6 3.  4.4 1.4 6.8 2.8\n 4.8 1.4 6.7 3.  5.  1.7 6.  2.9 4.5 1.5 5.7 2.6 3.5 1.  5.5 2.4 3.8 1.1\n 5.5 2.4 3.7 1.  5.8 2.7 3.9 1.2 6.  2.7 5.1 1.6 5.4 3.  4.5 1.5 6.  3.4\n 4.5 1.6 6.7 3.1 4.7 1.5 6.3 2.3 4.4 1.3 5.6 3.  4.1 1.3 5.5 2.5 4.  1.3\n 6.9 3.2 5.7 2.3 5.6 2.8 4.9 2.  7.7 2.8 6.7 2.  6.3 2.7 4.9 1.8 6.7 3.3\n 5.7 2.1 7.2 3.2 6.  1.8 6.2 2.8 4.8 1.8 6.1 3.  4.9 1.8 6.4 2.8 5.6 2.1\n 7.2 3.  5.8 1.6 7.4 2.8 6.1 1.9 7.9 3.8 6.4 2.  6.4 2.8 5.6 2.2 6.3 2.8\n 5.1 1.5 6.1 2.6 5.6 1.4 7.7 3.  6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8\n 6.  3.  4.8 1.8 6.9 3.1 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7\n 5.1 1.9 6.8 3.2 5.9 2.3 6.7 3.3 5.7 2.5 6.7 3.  5.2 2.3 6.3 2.5 5.  1.9\n 6.5 3.  5.2 2.  6.2 3.4 5.4 2.3 5.9 3.  5.1 1.8]"}, "y": "[[ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.07261885  0.41787687 -0.47513732 -0.08556426]\n [ 0.3141991  -0.69751192  0.3862309  -0.9313443 ]\n [-0.3849059   0.27627413  0.09101248  1.00891349]]", "[38 94 84]", "[ 6.88804977e-05  1.27986171e-02 -1.19810988e-02]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [120, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480]", "data": "[5.1 3.5 1.4 0.2 4.9 3.  1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.  3.6\n 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.  3.4 1.5 0.2 4.4 2.9 1.4 0.2\n 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.  1.4 0.1 4.3 3.\n 1.1 0.1 5.8 4.  1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3\n 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6\n 1.  0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.  3.  1.6 0.2 5.  3.4 1.6 0.4\n 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 4.8 3.1 1.6 0.2 5.4 3.4\n 1.5 0.4 5.2 4.1 1.5 0.1 5.5 4.2 1.4 0.2 4.9 3.1 1.5 0.2 5.  3.2 1.2 0.2\n 5.5 3.5 1.3 0.2 4.9 3.6 1.4 0.1 4.4 3.  1.3 0.2 5.1 3.4 1.5 0.2 5.  3.5\n 1.3 0.3 4.5 2.3 1.3 0.3 4.4 3.2 1.3 0.2 5.  3.5 1.6 0.6 5.1 3.8 1.9 0.4\n 4.8 3.  1.4 0.3 5.1 3.8 1.6 0.2 4.6 3.2 1.4 0.2 5.3 3.7 1.5 0.2 5.  3.3\n 1.4 0.2 7.  3.2 4.7 1.4 6.4 3.2 4.5 1.5 6.9 3.1 4.9 1.5 5.5 2.3 4.  1.3\n 6.5 2.8 4.6 1.5 5.7 2.8 4.5 1.3 6.3 3.3 4.7 1.6 4.9 2.4 3.3 1.  6.6 2.9\n 4.6 1.3 5.2 2.7 3.9 1.4 5.  2.  3.5 1.  5.9 3.  4.2 1.5 6.  2.2 4.  1.\n 6.1 2.9 4.7 1.4 5.6 2.9 3.6 1.3 6.7 3.1 4.4 1.4 5.6 3.  4.5 1.5 5.8 2.7\n 4.1 1.  6.2 2.2 4.5 1.5 5.6 2.5 3.9 1.1 5.9 3.2 4.8 1.8 6.1 2.8 4.  1.3\n 6.3 2.5 4.9 1.5 6.1 2.8 4.7 1.2 6.4 2.9 4.3 1.3 6.6 3.  4.4 1.4 6.8 2.8\n 4.8 1.4 6.7 3.  5.  1.7 6.  2.9 4.5 1.5 5.7 2.6 3.5 1.  5.5 2.4 3.8 1.1\n 5.5 2.4 3.7 1.  5.8 2.7 3.9 1.2 6.  2.7 5.1 1.6 5.4 3.  4.5 1.5 6.  3.4\n 4.5 1.6 6.7 3.1 4.7 1.5 6.3 2.3 4.4 1.3 5.6 3.  4.1 1.3 5.5 2.5 4.  1.3\n 5.5 2.6 4.4 1.2 6.1 3.  4.6 1.4 5.8 2.6 4.  1.2 5.  2.3 3.3 1.  5.6 2.7\n 4.2 1.3 5.7 3.  4.2 1.2 5.7 2.9 4.2 1.3 6.2 2.9 4.3 1.3 5.1 2.5 3.  1.1\n 5.7 2.8 4.1 1.3 6.3 3.3 6.  2.5 5.8 2.7 5.1 1.9 7.1 3.  5.9 2.1 6.3 2.9\n 5.6 1.8 6.5 3.  5.8 2.2 7.6 3.  6.6 2.1 4.9 2.5 4.5 1.7 7.3 2.9 6.3 1.8\n 6.7 2.5 5.8 1.8 7.2 3.6 6.1 2.5 6.5 3.2 5.1 2.  6.4 2.7 5.3 1.9 6.8 3.\n 5.5 2.1 5.7 2.5 5.  2.  5.8 2.8 5.1 2.4 6.4 3.2 5.3 2.3 6.5 3.  5.5 1.8\n 7.7 3.8 6.7 2.2 7.7 2.6 6.9 2.3 6.  2.2 5.  1.5]"}, "y": "[[ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.04205551  0.44602809 -0.44508729 -0.12383547]\n [ 0.27753464 -0.6968172   0.40789577 -0.81588232]\n [-0.32578755  0.25591413  0.0487688   0.91882894]]", "[ 61 118 112]", "[-0.00064371  0.01355733 -0.01153223]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [120, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480]", "data": "[4.8 3.1 1.6 0.2 5.4 3.4 1.5 0.4 5.2 4.1 1.5 0.1 5.5 4.2 1.4 0.2 4.9 3.1\n 1.5 0.2 5.  3.2 1.2 0.2 5.5 3.5 1.3 0.2 4.9 3.6 1.4 0.1 4.4 3.  1.3 0.2\n 5.1 3.4 1.5 0.2 5.  3.5 1.3 0.3 4.5 2.3 1.3 0.3 4.4 3.2 1.3 0.2 5.  3.5\n 1.6 0.6 5.1 3.8 1.9 0.4 4.8 3.  1.4 0.3 5.1 3.8 1.6 0.2 4.6 3.2 1.4 0.2\n 5.3 3.7 1.5 0.2 5.  3.3 1.4 0.2 7.  3.2 4.7 1.4 6.4 3.2 4.5 1.5 6.9 3.1\n 4.9 1.5 5.5 2.3 4.  1.3 6.5 2.8 4.6 1.5 5.7 2.8 4.5 1.3 6.3 3.3 4.7 1.6\n 4.9 2.4 3.3 1.  6.6 2.9 4.6 1.3 5.2 2.7 3.9 1.4 5.  2.  3.5 1.  5.9 3.\n 4.2 1.5 6.  2.2 4.  1.  6.1 2.9 4.7 1.4 5.6 2.9 3.6 1.3 6.7 3.1 4.4 1.4\n 5.6 3.  4.5 1.5 5.8 2.7 4.1 1.  6.2 2.2 4.5 1.5 5.6 2.5 3.9 1.1 5.9 3.2\n 4.8 1.8 6.1 2.8 4.  1.3 6.3 2.5 4.9 1.5 6.1 2.8 4.7 1.2 6.4 2.9 4.3 1.3\n 6.6 3.  4.4 1.4 6.8 2.8 4.8 1.4 6.7 3.  5.  1.7 6.  2.9 4.5 1.5 5.7 2.6\n 3.5 1.  5.5 2.4 3.8 1.1 5.5 2.4 3.7 1.  5.8 2.7 3.9 1.2 6.  2.7 5.1 1.6\n 5.4 3.  4.5 1.5 6.  3.4 4.5 1.6 6.7 3.1 4.7 1.5 6.3 2.3 4.4 1.3 5.6 3.\n 4.1 1.3 5.5 2.5 4.  1.3 5.5 2.6 4.4 1.2 6.1 3.  4.6 1.4 5.8 2.6 4.  1.2\n 5.  2.3 3.3 1.  5.6 2.7 4.2 1.3 5.7 3.  4.2 1.2 5.7 2.9 4.2 1.3 6.2 2.9\n 4.3 1.3 5.1 2.5 3.  1.1 5.7 2.8 4.1 1.3 6.3 3.3 6.  2.5 5.8 2.7 5.1 1.9\n 7.1 3.  5.9 2.1 6.3 2.9 5.6 1.8 6.5 3.  5.8 2.2 7.6 3.  6.6 2.1 4.9 2.5\n 4.5 1.7 7.3 2.9 6.3 1.8 6.7 2.5 5.8 1.8 7.2 3.6 6.1 2.5 6.5 3.2 5.1 2.\n 6.4 2.7 5.3 1.9 6.8 3.  5.5 2.1 5.7 2.5 5.  2.  5.8 2.8 5.1 2.4 6.4 3.2\n 5.3 2.3 6.5 3.  5.5 1.8 7.7 3.8 6.7 2.2 7.7 2.6 6.9 2.3 6.  2.2 5.  1.5\n 6.9 3.2 5.7 2.3 5.6 2.8 4.9 2.  7.7 2.8 6.7 2.  6.3 2.7 4.9 1.8 6.7 3.3\n 5.7 2.1 7.2 3.2 6.  1.8 6.2 2.8 4.8 1.8 6.1 3.  4.9 1.8 6.4 2.8 5.6 2.1\n 7.2 3.  5.8 1.6 7.4 2.8 6.1 1.9 7.9 3.8 6.4 2.  6.4 2.8 5.6 2.2 6.3 2.8\n 5.1 1.5 6.1 2.6 5.6 1.4 7.7 3.  6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8\n 6.  3.  4.8 1.8 6.9 3.1 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7\n 5.1 1.9 6.8 3.2 5.9 2.3 6.7 3.3 5.7 2.5 6.7 3.  5.2 2.3 6.3 2.5 5.  1.9\n 6.5 3.  5.2 2.  6.2 3.4 5.4 2.3 5.9 3.  5.1 1.8]"}, "y": "[[ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [ 1.66666667 -0.83333333 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333  1.16666667 -0.83333333]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]\n [-0.33333333 -0.83333333  1.16666667]]"}, "kwargs": {"alpha": 10.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.12616838  0.38038003 -0.39739716 -0.11891188]\n [ 0.24592362 -0.40488976  0.08430298 -0.47754838]\n [-0.37204125  0.02418249  0.3144941   0.5929936 ]]", "[25 33 32]", "[ 0.00119895  0.00798652 -0.00894188]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [120, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480]", "data": "[5.1 3.5 1.4 0.2 4.9 3.  1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.  3.6\n 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.  3.4 1.5 0.2 4.4 2.9 1.4 0.2\n 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.  1.4 0.1 4.3 3.\n 1.1 0.1 5.8 4.  1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3\n 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6\n 1.  0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.  3.  1.6 0.2 5.  3.4 1.6 0.4\n 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 5.  2.  3.5 1.  5.9 3.\n 4.2 1.5 6.  2.2 4.  1.  6.1 2.9 4.7 1.4 5.6 2.9 3.6 1.3 6.7 3.1 4.4 1.4\n 5.6 3.  4.5 1.5 5.8 2.7 4.1 1.  6.2 2.2 4.5 1.5 5.6 2.5 3.9 1.1 5.9 3.2\n 4.8 1.8 6.1 2.8 4.  1.3 6.3 2.5 4.9 1.5 6.1 2.8 4.7 1.2 6.4 2.9 4.3 1.3\n 6.6 3.  4.4 1.4 6.8 2.8 4.8 1.4 6.7 3.  5.  1.7 6.  2.9 4.5 1.5 5.7 2.6\n 3.5 1.  5.5 2.4 3.8 1.1 5.5 2.4 3.7 1.  5.8 2.7 3.9 1.2 6.  2.7 5.1 1.6\n 5.4 3.  4.5 1.5 6.  3.4 4.5 1.6 6.7 3.1 4.7 1.5 6.3 2.3 4.4 1.3 5.6 3.\n 4.1 1.3 5.5 2.5 4.  1.3 5.5 2.6 4.4 1.2 6.1 3.  4.6 1.4 5.8 2.6 4.  1.2\n 5.  2.3 3.3 1.  5.6 2.7 4.2 1.3 5.7 3.  4.2 1.2 5.7 2.9 4.2 1.3 6.2 2.9\n 4.3 1.3 5.1 2.5 3.  1.1 5.7 2.8 4.1 1.3 6.3 3.3 6.  2.5 5.8 2.7 5.1 1.9\n 7.1 3.  5.9 2.1 6.3 2.9 5.6 1.8 6.5 3.  5.8 2.2 7.6 3.  6.6 2.1 4.9 2.5\n 4.5 1.7 7.3 2.9 6.3 1.8 6.7 2.5 5.8 1.8 7.2 3.6 6.1 2.5 6.5 3.2 5.1 2.\n 6.4 2.7 5.3 1.9 6.8 3.  5.5 2.1 5.7 2.5 5.  2.  5.8 2.8 5.1 2.4 6.4 3.2\n 5.3 2.3 6.5 3.  5.5 1.8 7.7 3.8 6.7 2.2 7.7 2.6 6.9 2.3 6.  2.2 5.  1.5\n 6.9 3.2 5.7 2.3 5.6 2.8 4.9 2.  7.7 2.8 6.7 2.  6.3 2.7 4.9 1.8 6.7 3.3\n 5.7 2.1 7.2 3.2 6.  1.8 6.2 2.8 4.8 1.8 6.1 3.  4.9 1.8 6.4 2.8 5.6 2.1\n 7.2 3.  5.8 1.6 7.4 2.8 6.1 1.9 7.9 3.8 6.4 2.  6.4 2.8 5.6 2.2 6.3 2.8\n 5.1 1.5 6.1 2.6 5.6 1.4 7.7 3.  6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8\n 6.  3.  4.8 1.8 6.9 3.1 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7\n 5.1 1.9 6.8 3.2 5.9 2.3 6.7 3.3 5.7 2.5 6.7 3.  5.2 2.3 6.3 2.5 5.  1.9\n 6.5 3.  5.2 2.  6.2 3.4 5.4 2.3 5.9 3.  5.1 1.8]"}, "y": "[[ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [ 1.5        -0.66666667 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5         1.33333333 -0.83333333]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]\n [-0.5        -0.66666667  1.16666667]]"}, "kwargs": {"alpha": 10.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.10969607  0.38858142 -0.39465213 -0.15870173]\n [ 0.22807635 -0.41939768  0.09949232 -0.39982938]\n [-0.33615766  0.02865558  0.29414723  0.55835741]]", "[24 33 31]", "[ 0.00068622  0.00814457 -0.00861495]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [120, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480]", "data": "[5.1 3.5 1.4 0.2 4.9 3.  1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.  3.6\n 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.  3.4 1.5 0.2 4.4 2.9 1.4 0.2\n 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.  1.4 0.1 4.3 3.\n 1.1 0.1 5.8 4.  1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3\n 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6\n 1.  0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.  3.  1.6 0.2 5.  3.4 1.6 0.4\n 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 4.8 3.1 1.6 0.2 5.4 3.4\n 1.5 0.4 5.2 4.1 1.5 0.1 5.5 4.2 1.4 0.2 4.9 3.1 1.5 0.2 5.  3.2 1.2 0.2\n 5.5 3.5 1.3 0.2 4.9 3.6 1.4 0.1 4.4 3.  1.3 0.2 5.1 3.4 1.5 0.2 5.  3.5\n 1.3 0.3 4.5 2.3 1.3 0.3 4.4 3.2 1.3 0.2 5.  3.5 1.6 0.6 5.1 3.8 1.9 0.4\n 4.8 3.  1.4 0.3 5.1 3.8 1.6 0.2 4.6 3.2 1.4 0.2 5.3 3.7 1.5 0.2 5.  3.3\n 1.4 0.2 7.  3.2 4.7 1.4 6.4 3.2 4.5 1.5 6.9 3.1 4.9 1.5 5.5 2.3 4.  1.3\n 6.5 2.8 4.6 1.5 5.7 2.8 4.5 1.3 6.3 3.3 4.7 1.6 4.9 2.4 3.3 1.  6.6 2.9\n 4.6 1.3 5.2 2.7 3.9 1.4 5.5 2.6 4.4 1.2 6.1 3.  4.6 1.4 5.8 2.6 4.  1.2\n 5.  2.3 3.3 1.  5.6 2.7 4.2 1.3 5.7 3.  4.2 1.2 5.7 2.9 4.2 1.3 6.2 2.9\n 4.3 1.3 5.1 2.5 3.  1.1 5.7 2.8 4.1 1.3 6.3 3.3 6.  2.5 5.8 2.7 5.1 1.9\n 7.1 3.  5.9 2.1 6.3 2.9 5.6 1.8 6.5 3.  5.8 2.2 7.6 3.  6.6 2.1 4.9 2.5\n 4.5 1.7 7.3 2.9 6.3 1.8 6.7 2.5 5.8 1.8 7.2 3.6 6.1 2.5 6.5 3.2 5.1 2.\n 6.4 2.7 5.3 1.9 6.8 3.  5.5 2.1 5.7 2.5 5.  2.  5.8 2.8 5.1 2.4 6.4 3.2\n 5.3 2.3 6.5 3.  5.5 1.8 7.7 3.8 6.7 2.2 7.7 2.6 6.9 2.3 6.  2.2 5.  1.5\n 6.9 3.2 5.7 2.3 5.6 2.8 4.9 2.  7.7 2.8 6.7 2.  6.3 2.7 4.9 1.8 6.7 3.3\n 5.7 2.1 7.2 3.2 6.  1.8 6.2 2.8 4.8 1.8 6.1 3.  4.9 1.8 6.4 2.8 5.6 2.1\n 7.2 3.  5.8 1.6 7.4 2.8 6.1 1.9 7.9 3.8 6.4 2.  6.4 2.8 5.6 2.2 6.3 2.8\n 5.1 1.5 6.1 2.6 5.6 1.4 7.7 3.  6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8\n 6.  3.  4.8 1.8 6.9 3.1 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7\n 5.1 1.9 6.8 3.2 5.9 2.3 6.7 3.3 5.7 2.5 6.7 3.  5.2 2.3 6.3 2.5 5.  1.9\n 6.5 3.  5.2 2.  6.2 3.4 5.4 2.3 5.9 3.  5.1 1.8]"}, "y": "[[ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [ 1.16666667 -0.33333333 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333  1.66666667 -0.83333333]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]\n [-0.83333333 -0.33333333  1.16666667]]"}, "kwargs": {"alpha": 10.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.13724603  0.29616141 -0.41545551 -0.19425807]\n [ 0.1024104  -0.22308667  0.10223231 -0.24542823]\n [-0.23974396 -0.07363589  0.31464429  0.43609676]]", "[18 37 35]", "[ 0.00107043  0.00513572 -0.00639082]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [120, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480]", "data": "[5.1 3.5 1.4 0.2 4.9 3.  1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.  3.6\n 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.  3.4 1.5 0.2 4.4 2.9 1.4 0.2\n 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.  1.4 0.1 4.3 3.\n 1.1 0.1 5.8 4.  1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3\n 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6\n 1.  0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.  3.  1.6 0.2 5.  3.4 1.6 0.4\n 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 4.8 3.1 1.6 0.2 5.4 3.4\n 1.5 0.4 5.2 4.1 1.5 0.1 5.5 4.2 1.4 0.2 4.9 3.1 1.5 0.2 5.  3.2 1.2 0.2\n 5.5 3.5 1.3 0.2 4.9 3.6 1.4 0.1 4.4 3.  1.3 0.2 5.1 3.4 1.5 0.2 5.  3.5\n 1.3 0.3 4.5 2.3 1.3 0.3 4.4 3.2 1.3 0.2 5.  3.5 1.6 0.6 5.1 3.8 1.9 0.4\n 4.8 3.  1.4 0.3 5.1 3.8 1.6 0.2 4.6 3.2 1.4 0.2 5.3 3.7 1.5 0.2 5.  3.3\n 1.4 0.2 7.  3.2 4.7 1.4 6.4 3.2 4.5 1.5 6.9 3.1 4.9 1.5 5.5 2.3 4.  1.3\n 6.5 2.8 4.6 1.5 5.7 2.8 4.5 1.3 6.3 3.3 4.7 1.6 4.9 2.4 3.3 1.  6.6 2.9\n 4.6 1.3 5.2 2.7 3.9 1.4 5.  2.  3.5 1.  5.9 3.  4.2 1.5 6.  2.2 4.  1.\n 6.1 2.9 4.7 1.4 5.6 2.9 3.6 1.3 6.7 3.1 4.4 1.4 5.6 3.  4.5 1.5 5.8 2.7\n 4.1 1.  6.2 2.2 4.5 1.5 5.6 2.5 3.9 1.1 5.9 3.2 4.8 1.8 6.1 2.8 4.  1.3\n 6.3 2.5 4.9 1.5 6.1 2.8 4.7 1.2 6.4 2.9 4.3 1.3 6.6 3.  4.4 1.4 6.8 2.8\n 4.8 1.4 6.7 3.  5.  1.7 6.  2.9 4.5 1.5 5.7 2.6 3.5 1.  5.5 2.4 3.8 1.1\n 5.5 2.4 3.7 1.  5.8 2.7 3.9 1.2 6.  2.7 5.1 1.6 5.4 3.  4.5 1.5 6.  3.4\n 4.5 1.6 6.7 3.1 4.7 1.5 6.3 2.3 4.4 1.3 5.6 3.  4.1 1.3 5.5 2.5 4.  1.3\n 6.9 3.2 5.7 2.3 5.6 2.8 4.9 2.  7.7 2.8 6.7 2.  6.3 2.7 4.9 1.8 6.7 3.3\n 5.7 2.1 7.2 3.2 6.  1.8 6.2 2.8 4.8 1.8 6.1 3.  4.9 1.8 6.4 2.8 5.6 2.1\n 7.2 3.  5.8 1.6 7.4 2.8 6.1 1.9 7.9 3.8 6.4 2.  6.4 2.8 5.6 2.2 6.3 2.8\n 5.1 1.5 6.1 2.6 5.6 1.4 7.7 3.  6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8\n 6.  3.  4.8 1.8 6.9 3.1 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7\n 5.1 1.9 6.8 3.2 5.9 2.3 6.7 3.3 5.7 2.5 6.7 3.  5.2 2.3 6.3 2.5 5.  1.9\n 6.5 3.  5.2 2.  6.2 3.4 5.4 2.3 5.9 3.  5.1 1.8]"}, "y": "[[ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [ 1.16666667 -0.66666667 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333  1.33333333 -0.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]\n [-0.83333333 -0.66666667  1.5       ]]"}, "kwargs": {"alpha": 10.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.09079951  0.37094798 -0.44339085 -0.15441014]\n [ 0.18079827 -0.46492821  0.21979165 -0.34487376]\n [-0.27270634  0.09513004  0.2258171   0.49563506]]", "[20 37 35]", "[ 0.0015624   0.00532776 -0.0070889 ]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [120, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480]", "data": "[5.1 3.5 1.4 0.2 4.9 3.  1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.  3.6\n 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.  3.4 1.5 0.2 4.4 2.9 1.4 0.2\n 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.  1.4 0.1 4.3 3.\n 1.1 0.1 5.8 4.  1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3\n 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6\n 1.  0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.  3.  1.6 0.2 5.  3.4 1.6 0.4\n 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 4.8 3.1 1.6 0.2 5.4 3.4\n 1.5 0.4 5.2 4.1 1.5 0.1 5.5 4.2 1.4 0.2 4.9 3.1 1.5 0.2 5.  3.2 1.2 0.2\n 5.5 3.5 1.3 0.2 4.9 3.6 1.4 0.1 4.4 3.  1.3 0.2 5.1 3.4 1.5 0.2 5.  3.5\n 1.3 0.3 4.5 2.3 1.3 0.3 4.4 3.2 1.3 0.2 5.  3.5 1.6 0.6 5.1 3.8 1.9 0.4\n 4.8 3.  1.4 0.3 5.1 3.8 1.6 0.2 4.6 3.2 1.4 0.2 5.3 3.7 1.5 0.2 5.  3.3\n 1.4 0.2 7.  3.2 4.7 1.4 6.4 3.2 4.5 1.5 6.9 3.1 4.9 1.5 5.5 2.3 4.  1.3\n 6.5 2.8 4.6 1.5 5.7 2.8 4.5 1.3 6.3 3.3 4.7 1.6 4.9 2.4 3.3 1.  6.6 2.9\n 4.6 1.3 5.2 2.7 3.9 1.4 5.  2.  3.5 1.  5.9 3.  4.2 1.5 6.  2.2 4.  1.\n 6.1 2.9 4.7 1.4 5.6 2.9 3.6 1.3 6.7 3.1 4.4 1.4 5.6 3.  4.5 1.5 5.8 2.7\n 4.1 1.  6.2 2.2 4.5 1.5 5.6 2.5 3.9 1.1 5.9 3.2 4.8 1.8 6.1 2.8 4.  1.3\n 6.3 2.5 4.9 1.5 6.1 2.8 4.7 1.2 6.4 2.9 4.3 1.3 6.6 3.  4.4 1.4 6.8 2.8\n 4.8 1.4 6.7 3.  5.  1.7 6.  2.9 4.5 1.5 5.7 2.6 3.5 1.  5.5 2.4 3.8 1.1\n 5.5 2.4 3.7 1.  5.8 2.7 3.9 1.2 6.  2.7 5.1 1.6 5.4 3.  4.5 1.5 6.  3.4\n 4.5 1.6 6.7 3.1 4.7 1.5 6.3 2.3 4.4 1.3 5.6 3.  4.1 1.3 5.5 2.5 4.  1.3\n 5.5 2.6 4.4 1.2 6.1 3.  4.6 1.4 5.8 2.6 4.  1.2 5.  2.3 3.3 1.  5.6 2.7\n 4.2 1.3 5.7 3.  4.2 1.2 5.7 2.9 4.2 1.3 6.2 2.9 4.3 1.3 5.1 2.5 3.  1.1\n 5.7 2.8 4.1 1.3 6.3 3.3 6.  2.5 5.8 2.7 5.1 1.9 7.1 3.  5.9 2.1 6.3 2.9\n 5.6 1.8 6.5 3.  5.8 2.2 7.6 3.  6.6 2.1 4.9 2.5 4.5 1.7 7.3 2.9 6.3 1.8\n 6.7 2.5 5.8 1.8 7.2 3.6 6.1 2.5 6.5 3.2 5.1 2.  6.4 2.7 5.3 1.9 6.8 3.\n 5.5 2.1 5.7 2.5 5.  2.  5.8 2.8 5.1 2.4 6.4 3.2 5.3 2.3 6.5 3.  5.5 1.8\n 7.7 3.8 6.7 2.2 7.7 2.6 6.9 2.3 6.  2.2 5.  1.5]"}, "y": "[[ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [ 1.16666667 -0.83333333 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333  1.16666667 -0.33333333]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]\n [-0.83333333 -0.83333333  1.66666667]]"}, "kwargs": {"alpha": 10.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.08196497  0.37557943 -0.43946863 -0.1597298 ]\n [ 0.15121237 -0.47511562  0.24804928 -0.23824529]\n [-0.23303873  0.09897866  0.19194096  0.39606838]]", "[21 37 41]", "[ 0.00108743  0.00416385 -0.00581297]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 3 elements ['np.ndarray[float64]', 'np.ndarray[int64]']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [150, 4], "maxprint": 50, "indices": "[0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0\n 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1\n 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2\n 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3\n 0 1 2 3 0 1 2 3]", "indptr": "[  0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68\n  72  76  80  84  88  92  96 100 104 108 112 116 120 124 128 132 136 140\n 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212\n 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284\n 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356\n 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428\n 432 436 440 444 448 452 456 460 464 468 472 476 480 484 488 492 496 500\n 504 508 512 516 520 524 528 532 536 540 544 548 552 556 560 564 568 572\n 576 580 584 588 592 596 600]", "data": "[5.1 3.5 1.4 0.2 4.9 3.  1.4 0.2 4.7 3.2 1.3 0.2 4.6 3.1 1.5 0.2 5.  3.6\n 1.4 0.2 5.4 3.9 1.7 0.4 4.6 3.4 1.4 0.3 5.  3.4 1.5 0.2 4.4 2.9 1.4 0.2\n 4.9 3.1 1.5 0.1 5.4 3.7 1.5 0.2 4.8 3.4 1.6 0.2 4.8 3.  1.4 0.1 4.3 3.\n 1.1 0.1 5.8 4.  1.2 0.2 5.7 4.4 1.5 0.4 5.4 3.9 1.3 0.4 5.1 3.5 1.4 0.3\n 5.7 3.8 1.7 0.3 5.1 3.8 1.5 0.3 5.4 3.4 1.7 0.2 5.1 3.7 1.5 0.4 4.6 3.6\n 1.  0.2 5.1 3.3 1.7 0.5 4.8 3.4 1.9 0.2 5.  3.  1.6 0.2 5.  3.4 1.6 0.4\n 5.2 3.5 1.5 0.2 5.2 3.4 1.4 0.2 4.7 3.2 1.6 0.2 4.8 3.1 1.6 0.2 5.4 3.4\n 1.5 0.4 5.2 4.1 1.5 0.1 5.5 4.2 1.4 0.2 4.9 3.1 1.5 0.2 5.  3.2 1.2 0.2\n 5.5 3.5 1.3 0.2 4.9 3.6 1.4 0.1 4.4 3.  1.3 0.2 5.1 3.4 1.5 0.2 5.  3.5\n 1.3 0.3 4.5 2.3 1.3 0.3 4.4 3.2 1.3 0.2 5.  3.5 1.6 0.6 5.1 3.8 1.9 0.4\n 4.8 3.  1.4 0.3 5.1 3.8 1.6 0.2 4.6 3.2 1.4 0.2 5.3 3.7 1.5 0.2 5.  3.3\n 1.4 0.2 7.  3.2 4.7 1.4 6.4 3.2 4.5 1.5 6.9 3.1 4.9 1.5 5.5 2.3 4.  1.3\n 6.5 2.8 4.6 1.5 5.7 2.8 4.5 1.3 6.3 3.3 4.7 1.6 4.9 2.4 3.3 1.  6.6 2.9\n 4.6 1.3 5.2 2.7 3.9 1.4 5.  2.  3.5 1.  5.9 3.  4.2 1.5 6.  2.2 4.  1.\n 6.1 2.9 4.7 1.4 5.6 2.9 3.6 1.3 6.7 3.1 4.4 1.4 5.6 3.  4.5 1.5 5.8 2.7\n 4.1 1.  6.2 2.2 4.5 1.5 5.6 2.5 3.9 1.1 5.9 3.2 4.8 1.8 6.1 2.8 4.  1.3\n 6.3 2.5 4.9 1.5 6.1 2.8 4.7 1.2 6.4 2.9 4.3 1.3 6.6 3.  4.4 1.4 6.8 2.8\n 4.8 1.4 6.7 3.  5.  1.7 6.  2.9 4.5 1.5 5.7 2.6 3.5 1.  5.5 2.4 3.8 1.1\n 5.5 2.4 3.7 1.  5.8 2.7 3.9 1.2 6.  2.7 5.1 1.6 5.4 3.  4.5 1.5 6.  3.4\n 4.5 1.6 6.7 3.1 4.7 1.5 6.3 2.3 4.4 1.3 5.6 3.  4.1 1.3 5.5 2.5 4.  1.3\n 5.5 2.6 4.4 1.2 6.1 3.  4.6 1.4 5.8 2.6 4.  1.2 5.  2.3 3.3 1.  5.6 2.7\n 4.2 1.3 5.7 3.  4.2 1.2 5.7 2.9 4.2 1.3 6.2 2.9 4.3 1.3 5.1 2.5 3.  1.1\n 5.7 2.8 4.1 1.3 6.3 3.3 6.  2.5 5.8 2.7 5.1 1.9 7.1 3.  5.9 2.1 6.3 2.9\n 5.6 1.8 6.5 3.  5.8 2.2 7.6 3.  6.6 2.1 4.9 2.5 4.5 1.7 7.3 2.9 6.3 1.8\n 6.7 2.5 5.8 1.8 7.2 3.6 6.1 2.5 6.5 3.2 5.1 2.  6.4 2.7 5.3 1.9 6.8 3.\n 5.5 2.1 5.7 2.5 5.  2.  5.8 2.8 5.1 2.4 6.4 3.2 5.3 2.3 6.5 3.  5.5 1.8\n 7.7 3.8 6.7 2.2 7.7 2.6 6.9 2.3 6.  2.2 5.  1.5 6.9 3.2 5.7 2.3 5.6 2.8\n 4.9 2.  7.7 2.8 6.7 2.  6.3 2.7 4.9 1.8 6.7 3.3 5.7 2.1 7.2 3.2 6.  1.8\n 6.2 2.8 4.8 1.8 6.1 3.  4.9 1.8 6.4 2.8 5.6 2.1 7.2 3.  5.8 1.6 7.4 2.8\n 6.1 1.9 7.9 3.8 6.4 2.  6.4 2.8 5.6 2.2 6.3 2.8 5.1 1.5 6.1 2.6 5.6 1.4\n 7.7 3.  6.1 2.3 6.3 3.4 5.6 2.4 6.4 3.1 5.5 1.8 6.  3.  4.8 1.8 6.9 3.1\n 5.4 2.1 6.7 3.1 5.6 2.4 6.9 3.1 5.1 2.3 5.8 2.7 5.1 1.9 6.8 3.2 5.9 2.3\n 6.7 3.3 5.7 2.5 6.7 3.  5.2 2.3 6.3 2.5 5.  1.9 6.5 3.  5.2 2.  6.2 3.4\n 5.4 2.3 5.9 3.  5.1 1.8]"}, "y": "[[ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]]"}, "kwargs": {"alpha": 0.1, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": true}}, "return": ["[[ 0.06667406  0.44908059 -0.43443619 -0.10482836]\n [ 0.3381854  -0.68675988  0.36064579 -1.06048161]\n [-0.40939227  0.24110846  0.08158867  1.15192925]]", "[38 90 87]", "[-0.00094111  0.02094075 -0.0172209 ]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.84 -0.8 ]\n [-0.84  0.2 ]\n [-0.64 -0.8 ]\n [ 1.16  1.2 ]\n [ 1.16  0.2 ]]", "y": "[[ 0.8]\n [ 0.8]\n [ 0.8]\n [-1.2]\n [-1.2]]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[-0.7326846  -0.22781912]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-1.99710434 -1.49825262]\n [-1.99710434 -0.49825262]\n [-1.79710434 -1.49825262]\n [ 0.00289566  0.50174738]\n [ 0.00289566 -0.49825262]]", "y": "[[ 1.99700449]\n [ 1.99700449]\n [ 1.99700449]\n [-0.00299551]\n [-0.00299551]]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[0.001 0.001 0.001 1.    1.   ]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[-0.01142368 -0.0045942 ]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-1.03333333 -0.91666667]\n [-1.03333333  0.08333333]\n [-0.83333333 -0.91666667]\n [ 0.96666667  1.08333333]\n [ 0.96666667  0.08333333]]", "y": "[[ 1.]\n [ 1.]\n [ 1.]\n [-1.]\n [-1.]]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[0.83333333 0.83333333 0.83333333 1.25       1.25      ]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[-0.73973918 -0.22465797]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.55 -0.75]\n [-0.55  0.25]\n [-0.35 -0.75]\n [ 1.45  1.25]]", "y": "[[ 1.]\n [ 1.]\n [-1.]\n [-1.]]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[-0.66742081  0.15158371]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.55 -0.75]\n [-0.55  0.25]\n [-0.35 -0.75]\n [ 1.45  1.25]]", "y": "[[ 1.]\n [ 1.]\n [-1.]\n [-1.]]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1. 1. 1. 1.]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[-0.66742081  0.15158371]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-7.43333333e-01  4.42666667e-01 -2.35800000e+00 -9.99333333e-01]\n [-9.43333333e-01 -5.73333333e-02 -2.35800000e+00 -9.99333333e-01]\n [-1.14333333e+00  1.42666667e-01 -2.45800000e+00 -9.99333333e-01]\n [-1.24333333e+00  4.26666667e-02 -2.25800000e+00 -9.99333333e-01]\n [-8.43333333e-01  5.42666667e-01 -2.35800000e+00 -9.99333333e-01]\n [-4.43333333e-01  8.42666667e-01 -2.05800000e+00 -7.99333333e-01]\n [-1.24333333e+00  3.42666667e-01 -2.35800000e+00 -8.99333333e-01]\n [-8.43333333e-01  3.42666667e-01 -2.25800000e+00 -9.99333333e-01]\n [-1.44333333e+00 -1.57333333e-01 -2.35800000e+00 -9.99333333e-01]\n [-9.43333333e-01  4.26666667e-02 -2.25800000e+00 -1.09933333e+00]\n [-4.43333333e-01  6.42666667e-01 -2.25800000e+00 -9.99333333e-01]\n [-1.04333333e+00  3.42666667e-01 -2.15800000e+00 -9.99333333e-01]\n [-1.04333333e+00 -5.73333333e-02 -2.35800000e+00 -1.09933333e+00]\n [-1.54333333e+00 -5.73333333e-02 -2.65800000e+00 -1.09933333e+00]\n [-4.33333333e-02  9.42666667e-01 -2.55800000e+00 -9.99333333e-01]\n [-1.43333333e-01  1.34266667e+00 -2.25800000e+00 -7.99333333e-01]\n [-4.43333333e-01  8.42666667e-01 -2.45800000e+00 -7.99333333e-01]\n [-7.43333333e-01  4.42666667e-01 -2.35800000e+00 -8.99333333e-01]\n [-1.43333333e-01  7.42666667e-01 -2.05800000e+00 -8.99333333e-01]\n [-7.43333333e-01  7.42666667e-01 -2.25800000e+00 -8.99333333e-01]\n [-4.43333333e-01  3.42666667e-01 -2.05800000e+00 -9.99333333e-01]\n [-7.43333333e-01  6.42666667e-01 -2.25800000e+00 -7.99333333e-01]\n [-1.24333333e+00  5.42666667e-01 -2.75800000e+00 -9.99333333e-01]\n [-7.43333333e-01  2.42666667e-01 -2.05800000e+00 -6.99333333e-01]\n [-1.04333333e+00  3.42666667e-01 -1.85800000e+00 -9.99333333e-01]\n [-8.43333333e-01 -5.73333333e-02 -2.15800000e+00 -9.99333333e-01]\n [-8.43333333e-01  3.42666667e-01 -2.15800000e+00 -7.99333333e-01]\n [-6.43333333e-01  4.42666667e-01 -2.25800000e+00 -9.99333333e-01]\n [-6.43333333e-01  3.42666667e-01 -2.35800000e+00 -9.99333333e-01]\n [-1.14333333e+00  1.42666667e-01 -2.15800000e+00 -9.99333333e-01]\n [-1.04333333e+00  4.26666667e-02 -2.15800000e+00 -9.99333333e-01]\n [-4.43333333e-01  3.42666667e-01 -2.25800000e+00 -7.99333333e-01]\n [-6.43333333e-01  1.04266667e+00 -2.25800000e+00 -1.09933333e+00]\n [-3.43333333e-01  1.14266667e+00 -2.35800000e+00 -9.99333333e-01]\n [-9.43333333e-01  4.26666667e-02 -2.25800000e+00 -9.99333333e-01]\n [-8.43333333e-01  1.42666667e-01 -2.55800000e+00 -9.99333333e-01]\n [-3.43333333e-01  4.42666667e-01 -2.45800000e+00 -9.99333333e-01]\n [-9.43333333e-01  5.42666667e-01 -2.35800000e+00 -1.09933333e+00]\n [-1.44333333e+00 -5.73333333e-02 -2.45800000e+00 -9.99333333e-01]\n [-7.43333333e-01  3.42666667e-01 -2.25800000e+00 -9.99333333e-01]\n [-8.43333333e-01  4.42666667e-01 -2.45800000e+00 -8.99333333e-01]\n [-1.34333333e+00 -7.57333333e-01 -2.45800000e+00 -8.99333333e-01]\n [-1.44333333e+00  1.42666667e-01 -2.45800000e+00 -9.99333333e-01]\n [-8.43333333e-01  4.42666667e-01 -2.15800000e+00 -5.99333333e-01]\n [-7.43333333e-01  7.42666667e-01 -1.85800000e+00 -7.99333333e-01]\n [-1.04333333e+00 -5.73333333e-02 -2.35800000e+00 -8.99333333e-01]\n [-7.43333333e-01  7.42666667e-01 -2.15800000e+00 -9.99333333e-01]\n [-1.24333333e+00  1.42666667e-01 -2.35800000e+00 -9.99333333e-01]\n [-5.43333333e-01  6.42666667e-01 -2.25800000e+00 -9.99333333e-01]\n [-8.43333333e-01  2.42666667e-01 -2.35800000e+00 -9.99333333e-01]\n [ 1.15666667e+00  1.42666667e-01  9.42000000e-01  2.00666667e-01]\n [ 5.56666667e-01  1.42666667e-01  7.42000000e-01  3.00666667e-01]\n [ 1.05666667e+00  4.26666667e-02  1.14200000e+00  3.00666667e-01]\n [-3.43333333e-01 -7.57333333e-01  2.42000000e-01  1.00666667e-01]\n [ 6.56666667e-01 -2.57333333e-01  8.42000000e-01  3.00666667e-01]\n [-1.43333333e-01 -2.57333333e-01  7.42000000e-01  1.00666667e-01]\n [ 4.56666667e-01  2.42666667e-01  9.42000000e-01  4.00666667e-01]\n [-9.43333333e-01 -6.57333333e-01 -4.58000000e-01 -1.99333333e-01]\n [ 7.56666667e-01 -1.57333333e-01  8.42000000e-01  1.00666667e-01]\n [-6.43333333e-01 -3.57333333e-01  1.42000000e-01  2.00666667e-01]\n [-8.43333333e-01 -1.05733333e+00 -2.58000000e-01 -1.99333333e-01]\n [ 5.66666667e-02 -5.73333333e-02  4.42000000e-01  3.00666667e-01]\n [ 1.56666667e-01 -8.57333333e-01  2.42000000e-01 -1.99333333e-01]\n [ 2.56666667e-01 -1.57333333e-01  9.42000000e-01  2.00666667e-01]\n [-2.43333333e-01 -1.57333333e-01 -1.58000000e-01  1.00666667e-01]\n [ 8.56666667e-01  4.26666667e-02  6.42000000e-01  2.00666667e-01]\n [-2.43333333e-01 -5.73333333e-02  7.42000000e-01  3.00666667e-01]\n [-4.33333333e-02 -3.57333333e-01  3.42000000e-01 -1.99333333e-01]\n [ 3.56666667e-01 -8.57333333e-01  7.42000000e-01  3.00666667e-01]\n [-2.43333333e-01 -5.57333333e-01  1.42000000e-01 -9.93333333e-02]\n [ 5.66666667e-02  1.42666667e-01  1.04200000e+00  6.00666667e-01]\n [ 2.56666667e-01 -2.57333333e-01  2.42000000e-01  1.00666667e-01]\n [ 4.56666667e-01 -5.57333333e-01  1.14200000e+00  3.00666667e-01]\n [ 2.56666667e-01 -2.57333333e-01  9.42000000e-01  6.66666667e-04]\n [ 5.56666667e-01 -1.57333333e-01  5.42000000e-01  1.00666667e-01]\n [ 7.56666667e-01 -5.73333333e-02  6.42000000e-01  2.00666667e-01]\n [ 9.56666667e-01 -2.57333333e-01  1.04200000e+00  2.00666667e-01]\n [ 8.56666667e-01 -5.73333333e-02  1.24200000e+00  5.00666667e-01]\n [ 1.56666667e-01 -1.57333333e-01  7.42000000e-01  3.00666667e-01]\n [-1.43333333e-01 -4.57333333e-01 -2.58000000e-01 -1.99333333e-01]\n [-3.43333333e-01 -6.57333333e-01  4.20000000e-02 -9.93333333e-02]\n [-3.43333333e-01 -6.57333333e-01 -5.80000000e-02 -1.99333333e-01]\n [-4.33333333e-02 -3.57333333e-01  1.42000000e-01  6.66666667e-04]\n [ 1.56666667e-01 -3.57333333e-01  1.34200000e+00  4.00666667e-01]\n [-4.43333333e-01 -5.73333333e-02  7.42000000e-01  3.00666667e-01]\n [ 1.56666667e-01  3.42666667e-01  7.42000000e-01  4.00666667e-01]\n [ 8.56666667e-01  4.26666667e-02  9.42000000e-01  3.00666667e-01]\n [ 4.56666667e-01 -7.57333333e-01  6.42000000e-01  1.00666667e-01]\n [-2.43333333e-01 -5.73333333e-02  3.42000000e-01  1.00666667e-01]\n [-3.43333333e-01 -5.57333333e-01  2.42000000e-01  1.00666667e-01]\n [-3.43333333e-01 -4.57333333e-01  6.42000000e-01  6.66666667e-04]\n [ 2.56666667e-01 -5.73333333e-02  8.42000000e-01  2.00666667e-01]\n [-4.33333333e-02 -4.57333333e-01  2.42000000e-01  6.66666667e-04]\n [-8.43333333e-01 -7.57333333e-01 -4.58000000e-01 -1.99333333e-01]\n [-2.43333333e-01 -3.57333333e-01  4.42000000e-01  1.00666667e-01]\n [-1.43333333e-01 -5.73333333e-02  4.42000000e-01  6.66666667e-04]\n [-1.43333333e-01 -1.57333333e-01  4.42000000e-01  1.00666667e-01]\n [ 3.56666667e-01 -1.57333333e-01  5.42000000e-01  1.00666667e-01]\n [-7.43333333e-01 -5.57333333e-01 -7.58000000e-01 -9.93333333e-02]\n [-1.43333333e-01 -2.57333333e-01  3.42000000e-01  1.00666667e-01]\n [ 4.56666667e-01  2.42666667e-01  2.24200000e+00  1.30066667e+00]\n [-4.33333333e-02 -3.57333333e-01  1.34200000e+00  7.00666667e-01]\n [ 1.25666667e+00 -5.73333333e-02  2.14200000e+00  9.00666667e-01]\n [ 4.56666667e-01 -1.57333333e-01  1.84200000e+00  6.00666667e-01]\n [ 6.56666667e-01 -5.73333333e-02  2.04200000e+00  1.00066667e+00]\n [ 1.75666667e+00 -5.73333333e-02  2.84200000e+00  9.00666667e-01]\n [-9.43333333e-01 -5.57333333e-01  7.42000000e-01  5.00666667e-01]\n [ 1.45666667e+00 -1.57333333e-01  2.54200000e+00  6.00666667e-01]\n [ 8.56666667e-01 -5.57333333e-01  2.04200000e+00  6.00666667e-01]\n [ 1.35666667e+00  5.42666667e-01  2.34200000e+00  1.30066667e+00]\n [ 6.56666667e-01  1.42666667e-01  1.34200000e+00  8.00666667e-01]\n [ 5.56666667e-01 -3.57333333e-01  1.54200000e+00  7.00666667e-01]\n [ 9.56666667e-01 -5.73333333e-02  1.74200000e+00  9.00666667e-01]\n [-1.43333333e-01 -5.57333333e-01  1.24200000e+00  8.00666667e-01]\n [-4.33333333e-02 -2.57333333e-01  1.34200000e+00  1.20066667e+00]\n [ 5.56666667e-01  1.42666667e-01  1.54200000e+00  1.10066667e+00]\n [ 6.56666667e-01 -5.73333333e-02  1.74200000e+00  6.00666667e-01]\n [ 1.85666667e+00  7.42666667e-01  2.94200000e+00  1.00066667e+00]\n [ 1.85666667e+00 -4.57333333e-01  3.14200000e+00  1.10066667e+00]\n [ 1.56666667e-01 -8.57333333e-01  1.24200000e+00  3.00666667e-01]\n [ 1.05666667e+00  1.42666667e-01  1.94200000e+00  1.10066667e+00]\n [-2.43333333e-01 -2.57333333e-01  1.14200000e+00  8.00666667e-01]\n [ 1.85666667e+00 -2.57333333e-01  2.94200000e+00  8.00666667e-01]\n [ 4.56666667e-01 -3.57333333e-01  1.14200000e+00  6.00666667e-01]\n [ 8.56666667e-01  2.42666667e-01  1.94200000e+00  9.00666667e-01]\n [ 1.35666667e+00  1.42666667e-01  2.24200000e+00  6.00666667e-01]\n [ 3.56666667e-01 -2.57333333e-01  1.04200000e+00  6.00666667e-01]\n [ 2.56666667e-01 -5.73333333e-02  1.14200000e+00  6.00666667e-01]\n [ 5.56666667e-01 -2.57333333e-01  1.84200000e+00  9.00666667e-01]\n [ 1.35666667e+00 -5.73333333e-02  2.04200000e+00  4.00666667e-01]\n [ 1.55666667e+00 -2.57333333e-01  2.34200000e+00  7.00666667e-01]\n [ 2.05666667e+00  7.42666667e-01  2.64200000e+00  8.00666667e-01]\n [ 5.56666667e-01 -2.57333333e-01  1.84200000e+00  1.00066667e+00]\n [ 4.56666667e-01 -2.57333333e-01  1.34200000e+00  3.00666667e-01]\n [ 2.56666667e-01 -4.57333333e-01  1.84200000e+00  2.00666667e-01]\n [ 1.85666667e+00 -5.73333333e-02  2.34200000e+00  1.10066667e+00]\n [ 4.56666667e-01  3.42666667e-01  1.84200000e+00  1.20066667e+00]\n [ 5.56666667e-01  4.26666667e-02  1.74200000e+00  6.00666667e-01]\n [ 1.56666667e-01 -5.73333333e-02  1.04200000e+00  6.00666667e-01]\n [ 1.05666667e+00  4.26666667e-02  1.64200000e+00  9.00666667e-01]\n [ 8.56666667e-01  4.26666667e-02  1.84200000e+00  1.20066667e+00]\n [ 1.05666667e+00  4.26666667e-02  1.34200000e+00  1.10066667e+00]\n [-4.33333333e-02 -3.57333333e-01  1.34200000e+00  7.00666667e-01]\n [ 9.56666667e-01  1.42666667e-01  2.14200000e+00  1.10066667e+00]\n [ 8.56666667e-01  2.42666667e-01  1.94200000e+00  1.30066667e+00]\n [ 8.56666667e-01 -5.73333333e-02  1.44200000e+00  1.10066667e+00]\n [ 4.56666667e-01 -5.57333333e-01  1.24200000e+00  7.00666667e-01]\n [ 6.56666667e-01 -5.73333333e-02  1.44200000e+00  8.00666667e-01]\n [ 3.56666667e-01  3.42666667e-01  1.64200000e+00  1.10066667e+00]\n [ 5.66666667e-02 -5.73333333e-02  1.34200000e+00  6.00666667e-01]]", "y": "[[ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[ 0.12726863  0.47083649 -0.44536617 -0.12120317]\n [-0.02760744 -0.8779879   0.37199635 -0.83287571]\n [-0.09966119  0.40715142  0.07336981  0.95407888]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-7.43333333e-01  4.42666667e-01 -2.35800000e+00 -9.99333333e-01]\n [-9.43333333e-01 -5.73333333e-02 -2.35800000e+00 -9.99333333e-01]\n [-1.14333333e+00  1.42666667e-01 -2.45800000e+00 -9.99333333e-01]\n [-1.24333333e+00  4.26666667e-02 -2.25800000e+00 -9.99333333e-01]\n [-8.43333333e-01  5.42666667e-01 -2.35800000e+00 -9.99333333e-01]\n [-4.43333333e-01  8.42666667e-01 -2.05800000e+00 -7.99333333e-01]\n [-1.24333333e+00  3.42666667e-01 -2.35800000e+00 -8.99333333e-01]\n [-8.43333333e-01  3.42666667e-01 -2.25800000e+00 -9.99333333e-01]\n [-1.44333333e+00 -1.57333333e-01 -2.35800000e+00 -9.99333333e-01]\n [-9.43333333e-01  4.26666667e-02 -2.25800000e+00 -1.09933333e+00]\n [-4.43333333e-01  6.42666667e-01 -2.25800000e+00 -9.99333333e-01]\n [-1.04333333e+00  3.42666667e-01 -2.15800000e+00 -9.99333333e-01]\n [-1.04333333e+00 -5.73333333e-02 -2.35800000e+00 -1.09933333e+00]\n [-1.54333333e+00 -5.73333333e-02 -2.65800000e+00 -1.09933333e+00]\n [-4.33333333e-02  9.42666667e-01 -2.55800000e+00 -9.99333333e-01]\n [-1.43333333e-01  1.34266667e+00 -2.25800000e+00 -7.99333333e-01]\n [-4.43333333e-01  8.42666667e-01 -2.45800000e+00 -7.99333333e-01]\n [-7.43333333e-01  4.42666667e-01 -2.35800000e+00 -8.99333333e-01]\n [-1.43333333e-01  7.42666667e-01 -2.05800000e+00 -8.99333333e-01]\n [-7.43333333e-01  7.42666667e-01 -2.25800000e+00 -8.99333333e-01]\n [-4.43333333e-01  3.42666667e-01 -2.05800000e+00 -9.99333333e-01]\n [-7.43333333e-01  6.42666667e-01 -2.25800000e+00 -7.99333333e-01]\n [-1.24333333e+00  5.42666667e-01 -2.75800000e+00 -9.99333333e-01]\n [-7.43333333e-01  2.42666667e-01 -2.05800000e+00 -6.99333333e-01]\n [-1.04333333e+00  3.42666667e-01 -1.85800000e+00 -9.99333333e-01]\n [-8.43333333e-01 -5.73333333e-02 -2.15800000e+00 -9.99333333e-01]\n [-8.43333333e-01  3.42666667e-01 -2.15800000e+00 -7.99333333e-01]\n [-6.43333333e-01  4.42666667e-01 -2.25800000e+00 -9.99333333e-01]\n [-6.43333333e-01  3.42666667e-01 -2.35800000e+00 -9.99333333e-01]\n [-1.14333333e+00  1.42666667e-01 -2.15800000e+00 -9.99333333e-01]\n [-1.04333333e+00  4.26666667e-02 -2.15800000e+00 -9.99333333e-01]\n [-4.43333333e-01  3.42666667e-01 -2.25800000e+00 -7.99333333e-01]\n [-6.43333333e-01  1.04266667e+00 -2.25800000e+00 -1.09933333e+00]\n [-3.43333333e-01  1.14266667e+00 -2.35800000e+00 -9.99333333e-01]\n [-9.43333333e-01  4.26666667e-02 -2.25800000e+00 -9.99333333e-01]\n [-8.43333333e-01  1.42666667e-01 -2.55800000e+00 -9.99333333e-01]\n [-3.43333333e-01  4.42666667e-01 -2.45800000e+00 -9.99333333e-01]\n [-9.43333333e-01  5.42666667e-01 -2.35800000e+00 -1.09933333e+00]\n [-1.44333333e+00 -5.73333333e-02 -2.45800000e+00 -9.99333333e-01]\n [-7.43333333e-01  3.42666667e-01 -2.25800000e+00 -9.99333333e-01]\n [-8.43333333e-01  4.42666667e-01 -2.45800000e+00 -8.99333333e-01]\n [-1.34333333e+00 -7.57333333e-01 -2.45800000e+00 -8.99333333e-01]\n [-1.44333333e+00  1.42666667e-01 -2.45800000e+00 -9.99333333e-01]\n [-8.43333333e-01  4.42666667e-01 -2.15800000e+00 -5.99333333e-01]\n [-7.43333333e-01  7.42666667e-01 -1.85800000e+00 -7.99333333e-01]\n [-1.04333333e+00 -5.73333333e-02 -2.35800000e+00 -8.99333333e-01]\n [-7.43333333e-01  7.42666667e-01 -2.15800000e+00 -9.99333333e-01]\n [-1.24333333e+00  1.42666667e-01 -2.35800000e+00 -9.99333333e-01]\n [-5.43333333e-01  6.42666667e-01 -2.25800000e+00 -9.99333333e-01]\n [-8.43333333e-01  2.42666667e-01 -2.35800000e+00 -9.99333333e-01]\n [ 1.15666667e+00  1.42666667e-01  9.42000000e-01  2.00666667e-01]\n [ 5.56666667e-01  1.42666667e-01  7.42000000e-01  3.00666667e-01]\n [ 1.05666667e+00  4.26666667e-02  1.14200000e+00  3.00666667e-01]\n [-3.43333333e-01 -7.57333333e-01  2.42000000e-01  1.00666667e-01]\n [ 6.56666667e-01 -2.57333333e-01  8.42000000e-01  3.00666667e-01]\n [-1.43333333e-01 -2.57333333e-01  7.42000000e-01  1.00666667e-01]\n [ 4.56666667e-01  2.42666667e-01  9.42000000e-01  4.00666667e-01]\n [-9.43333333e-01 -6.57333333e-01 -4.58000000e-01 -1.99333333e-01]\n [ 7.56666667e-01 -1.57333333e-01  8.42000000e-01  1.00666667e-01]\n [-6.43333333e-01 -3.57333333e-01  1.42000000e-01  2.00666667e-01]\n [-8.43333333e-01 -1.05733333e+00 -2.58000000e-01 -1.99333333e-01]\n [ 5.66666667e-02 -5.73333333e-02  4.42000000e-01  3.00666667e-01]\n [ 1.56666667e-01 -8.57333333e-01  2.42000000e-01 -1.99333333e-01]\n [ 2.56666667e-01 -1.57333333e-01  9.42000000e-01  2.00666667e-01]\n [-2.43333333e-01 -1.57333333e-01 -1.58000000e-01  1.00666667e-01]\n [ 8.56666667e-01  4.26666667e-02  6.42000000e-01  2.00666667e-01]\n [-2.43333333e-01 -5.73333333e-02  7.42000000e-01  3.00666667e-01]\n [-4.33333333e-02 -3.57333333e-01  3.42000000e-01 -1.99333333e-01]\n [ 3.56666667e-01 -8.57333333e-01  7.42000000e-01  3.00666667e-01]\n [-2.43333333e-01 -5.57333333e-01  1.42000000e-01 -9.93333333e-02]\n [ 5.66666667e-02  1.42666667e-01  1.04200000e+00  6.00666667e-01]\n [ 2.56666667e-01 -2.57333333e-01  2.42000000e-01  1.00666667e-01]\n [ 4.56666667e-01 -5.57333333e-01  1.14200000e+00  3.00666667e-01]\n [ 2.56666667e-01 -2.57333333e-01  9.42000000e-01  6.66666667e-04]\n [ 5.56666667e-01 -1.57333333e-01  5.42000000e-01  1.00666667e-01]\n [ 7.56666667e-01 -5.73333333e-02  6.42000000e-01  2.00666667e-01]\n [ 9.56666667e-01 -2.57333333e-01  1.04200000e+00  2.00666667e-01]\n [ 8.56666667e-01 -5.73333333e-02  1.24200000e+00  5.00666667e-01]\n [ 1.56666667e-01 -1.57333333e-01  7.42000000e-01  3.00666667e-01]\n [-1.43333333e-01 -4.57333333e-01 -2.58000000e-01 -1.99333333e-01]\n [-3.43333333e-01 -6.57333333e-01  4.20000000e-02 -9.93333333e-02]\n [-3.43333333e-01 -6.57333333e-01 -5.80000000e-02 -1.99333333e-01]\n [-4.33333333e-02 -3.57333333e-01  1.42000000e-01  6.66666667e-04]\n [ 1.56666667e-01 -3.57333333e-01  1.34200000e+00  4.00666667e-01]\n [-4.43333333e-01 -5.73333333e-02  7.42000000e-01  3.00666667e-01]\n [ 1.56666667e-01  3.42666667e-01  7.42000000e-01  4.00666667e-01]\n [ 8.56666667e-01  4.26666667e-02  9.42000000e-01  3.00666667e-01]\n [ 4.56666667e-01 -7.57333333e-01  6.42000000e-01  1.00666667e-01]\n [-2.43333333e-01 -5.73333333e-02  3.42000000e-01  1.00666667e-01]\n [-3.43333333e-01 -5.57333333e-01  2.42000000e-01  1.00666667e-01]\n [-3.43333333e-01 -4.57333333e-01  6.42000000e-01  6.66666667e-04]\n [ 2.56666667e-01 -5.73333333e-02  8.42000000e-01  2.00666667e-01]\n [-4.33333333e-02 -4.57333333e-01  2.42000000e-01  6.66666667e-04]\n [-8.43333333e-01 -7.57333333e-01 -4.58000000e-01 -1.99333333e-01]\n [-2.43333333e-01 -3.57333333e-01  4.42000000e-01  1.00666667e-01]\n [-1.43333333e-01 -5.73333333e-02  4.42000000e-01  6.66666667e-04]\n [-1.43333333e-01 -1.57333333e-01  4.42000000e-01  1.00666667e-01]\n [ 3.56666667e-01 -1.57333333e-01  5.42000000e-01  1.00666667e-01]\n [-7.43333333e-01 -5.57333333e-01 -7.58000000e-01 -9.93333333e-02]\n [-1.43333333e-01 -2.57333333e-01  3.42000000e-01  1.00666667e-01]\n [ 4.56666667e-01  2.42666667e-01  2.24200000e+00  1.30066667e+00]\n [-4.33333333e-02 -3.57333333e-01  1.34200000e+00  7.00666667e-01]\n [ 1.25666667e+00 -5.73333333e-02  2.14200000e+00  9.00666667e-01]\n [ 4.56666667e-01 -1.57333333e-01  1.84200000e+00  6.00666667e-01]\n [ 6.56666667e-01 -5.73333333e-02  2.04200000e+00  1.00066667e+00]\n [ 1.75666667e+00 -5.73333333e-02  2.84200000e+00  9.00666667e-01]\n [-9.43333333e-01 -5.57333333e-01  7.42000000e-01  5.00666667e-01]\n [ 1.45666667e+00 -1.57333333e-01  2.54200000e+00  6.00666667e-01]\n [ 8.56666667e-01 -5.57333333e-01  2.04200000e+00  6.00666667e-01]\n [ 1.35666667e+00  5.42666667e-01  2.34200000e+00  1.30066667e+00]\n [ 6.56666667e-01  1.42666667e-01  1.34200000e+00  8.00666667e-01]\n [ 5.56666667e-01 -3.57333333e-01  1.54200000e+00  7.00666667e-01]\n [ 9.56666667e-01 -5.73333333e-02  1.74200000e+00  9.00666667e-01]\n [-1.43333333e-01 -5.57333333e-01  1.24200000e+00  8.00666667e-01]\n [-4.33333333e-02 -2.57333333e-01  1.34200000e+00  1.20066667e+00]\n [ 5.56666667e-01  1.42666667e-01  1.54200000e+00  1.10066667e+00]\n [ 6.56666667e-01 -5.73333333e-02  1.74200000e+00  6.00666667e-01]\n [ 1.85666667e+00  7.42666667e-01  2.94200000e+00  1.00066667e+00]\n [ 1.85666667e+00 -4.57333333e-01  3.14200000e+00  1.10066667e+00]\n [ 1.56666667e-01 -8.57333333e-01  1.24200000e+00  3.00666667e-01]\n [ 1.05666667e+00  1.42666667e-01  1.94200000e+00  1.10066667e+00]\n [-2.43333333e-01 -2.57333333e-01  1.14200000e+00  8.00666667e-01]\n [ 1.85666667e+00 -2.57333333e-01  2.94200000e+00  8.00666667e-01]\n [ 4.56666667e-01 -3.57333333e-01  1.14200000e+00  6.00666667e-01]\n [ 8.56666667e-01  2.42666667e-01  1.94200000e+00  9.00666667e-01]\n [ 1.35666667e+00  1.42666667e-01  2.24200000e+00  6.00666667e-01]\n [ 3.56666667e-01 -2.57333333e-01  1.04200000e+00  6.00666667e-01]\n [ 2.56666667e-01 -5.73333333e-02  1.14200000e+00  6.00666667e-01]\n [ 5.56666667e-01 -2.57333333e-01  1.84200000e+00  9.00666667e-01]\n [ 1.35666667e+00 -5.73333333e-02  2.04200000e+00  4.00666667e-01]\n [ 1.55666667e+00 -2.57333333e-01  2.34200000e+00  7.00666667e-01]\n [ 2.05666667e+00  7.42666667e-01  2.64200000e+00  8.00666667e-01]\n [ 5.56666667e-01 -2.57333333e-01  1.84200000e+00  1.00066667e+00]\n [ 4.56666667e-01 -2.57333333e-01  1.34200000e+00  3.00666667e-01]\n [ 2.56666667e-01 -4.57333333e-01  1.84200000e+00  2.00666667e-01]\n [ 1.85666667e+00 -5.73333333e-02  2.34200000e+00  1.10066667e+00]\n [ 4.56666667e-01  3.42666667e-01  1.84200000e+00  1.20066667e+00]\n [ 5.56666667e-01  4.26666667e-02  1.74200000e+00  6.00666667e-01]\n [ 1.56666667e-01 -5.73333333e-02  1.04200000e+00  6.00666667e-01]\n [ 1.05666667e+00  4.26666667e-02  1.64200000e+00  9.00666667e-01]\n [ 8.56666667e-01  4.26666667e-02  1.84200000e+00  1.20066667e+00]\n [ 1.05666667e+00  4.26666667e-02  1.34200000e+00  1.10066667e+00]\n [-4.33333333e-02 -3.57333333e-01  1.34200000e+00  7.00666667e-01]\n [ 9.56666667e-01  1.42666667e-01  2.14200000e+00  1.10066667e+00]\n [ 8.56666667e-01  2.42666667e-01  1.94200000e+00  1.30066667e+00]\n [ 8.56666667e-01 -5.73333333e-02  1.44200000e+00  1.10066667e+00]\n [ 4.56666667e-01 -5.57333333e-01  1.24200000e+00  7.00666667e-01]\n [ 6.56666667e-01 -5.73333333e-02  1.44200000e+00  8.00666667e-01]\n [ 3.56666667e-01  3.42666667e-01  1.64200000e+00  1.10066667e+00]\n [ 5.66666667e-02 -5.73333333e-02  1.34200000e+00  6.00666667e-01]]", "y": "[[ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [ 1.33333333 -0.66666667 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667  1.33333333 -0.66666667]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]\n [-0.66666667 -0.66666667  1.33333333]]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n 1. 1. 1. 1. 1. 1.]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[ 0.12726863  0.47083649 -0.44536617 -0.12120317]\n [-0.02760744 -0.8779879   0.37199635 -0.83287571]\n [-0.09966119  0.40715142  0.07336981  0.95407888]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.83327451  0.72154902 -2.84523529 -1.12227451]\n [-1.03327451  0.22154902 -2.84523529 -1.12227451]\n [-1.23327451  0.42154902 -2.94523529 -1.12227451]\n [-1.33327451  0.32154902 -2.74523529 -1.12227451]\n [-0.93327451  0.82154902 -2.84523529 -1.12227451]\n [-0.53327451  1.12154902 -2.54523529 -0.92227451]\n [-1.33327451  0.62154902 -2.84523529 -1.02227451]\n [-0.93327451  0.62154902 -2.74523529 -1.12227451]\n [-1.53327451  0.12154902 -2.84523529 -1.12227451]\n [-1.03327451  0.32154902 -2.74523529 -1.22227451]\n [-0.53327451  0.92154902 -2.74523529 -1.12227451]\n [-1.13327451  0.62154902 -2.64523529 -1.12227451]\n [-1.13327451  0.22154902 -2.84523529 -1.22227451]\n [-1.63327451  0.22154902 -3.14523529 -1.22227451]\n [-0.13327451  1.22154902 -3.04523529 -1.12227451]\n [-0.23327451  1.62154902 -2.74523529 -0.92227451]\n [-0.53327451  1.12154902 -2.94523529 -0.92227451]\n [-0.83327451  0.72154902 -2.84523529 -1.02227451]\n [-0.23327451  1.02154902 -2.54523529 -1.02227451]\n [-0.83327451  1.02154902 -2.74523529 -1.02227451]\n [-0.53327451  0.62154902 -2.54523529 -1.12227451]\n [-0.83327451  0.92154902 -2.74523529 -0.92227451]\n [-1.33327451  0.82154902 -3.24523529 -1.12227451]\n [-0.83327451  0.52154902 -2.54523529 -0.82227451]\n [-1.13327451  0.62154902 -2.34523529 -1.12227451]\n [-0.93327451  0.22154902 -2.64523529 -1.12227451]\n [-0.93327451  0.62154902 -2.64523529 -0.92227451]\n [-0.73327451  0.72154902 -2.74523529 -1.12227451]\n [-0.73327451  0.62154902 -2.84523529 -1.12227451]\n [-1.23327451  0.42154902 -2.64523529 -1.12227451]\n [-1.13327451  0.32154902 -2.64523529 -1.12227451]\n [-0.53327451  0.62154902 -2.74523529 -0.92227451]\n [-0.73327451  1.32154902 -2.74523529 -1.22227451]\n [-0.43327451  1.42154902 -2.84523529 -1.12227451]\n [-1.03327451  0.32154902 -2.74523529 -1.12227451]\n [-0.93327451  0.42154902 -3.04523529 -1.12227451]\n [-0.43327451  0.72154902 -2.94523529 -1.12227451]\n [-1.03327451  0.82154902 -2.84523529 -1.22227451]\n [-1.53327451  0.22154902 -2.94523529 -1.12227451]\n [-0.83327451  0.62154902 -2.74523529 -1.12227451]\n [-0.93327451  0.72154902 -2.94523529 -1.02227451]\n [-1.43327451 -0.47845098 -2.94523529 -1.02227451]\n [-1.53327451  0.42154902 -2.94523529 -1.12227451]\n [-0.93327451  0.72154902 -2.64523529 -0.72227451]\n [-0.83327451  1.02154902 -2.34523529 -0.92227451]\n [-1.13327451  0.22154902 -2.84523529 -1.02227451]\n [-0.83327451  1.02154902 -2.64523529 -1.12227451]\n [-1.33327451  0.42154902 -2.84523529 -1.12227451]\n [-0.63327451  0.92154902 -2.74523529 -1.12227451]\n [-0.93327451  0.52154902 -2.84523529 -1.12227451]\n [ 1.06672549  0.42154902  0.45476471  0.07772549]\n [ 0.46672549  0.42154902  0.25476471  0.17772549]\n [ 0.96672549  0.32154902  0.65476471  0.17772549]\n [-0.43327451 -0.47845098 -0.24523529 -0.02227451]\n [ 0.56672549  0.02154902  0.35476471  0.17772549]\n [-0.23327451  0.02154902  0.25476471 -0.02227451]\n [ 0.36672549  0.52154902  0.45476471  0.27772549]\n [-1.03327451 -0.37845098 -0.94523529 -0.32227451]\n [ 0.66672549  0.12154902  0.35476471 -0.02227451]\n [-0.73327451 -0.07845098 -0.34523529  0.07772549]\n [-0.93327451 -0.77845098 -0.74523529 -0.32227451]\n [-0.03327451  0.22154902 -0.04523529  0.17772549]\n [ 0.06672549 -0.57845098 -0.24523529 -0.32227451]\n [ 0.16672549  0.12154902  0.45476471  0.07772549]\n [-0.33327451  0.12154902 -0.64523529 -0.02227451]\n [ 0.76672549  0.32154902  0.15476471  0.07772549]\n [-0.33327451  0.22154902  0.25476471  0.17772549]\n [-0.13327451 -0.07845098 -0.14523529 -0.32227451]\n [ 0.26672549 -0.57845098  0.25476471  0.17772549]\n [-0.33327451 -0.27845098 -0.34523529 -0.22227451]\n [-0.03327451  0.42154902  0.55476471  0.47772549]\n [ 0.16672549  0.02154902 -0.24523529 -0.02227451]\n [ 0.36672549 -0.27845098  0.65476471  0.17772549]\n [ 0.16672549  0.02154902  0.45476471 -0.12227451]\n [ 0.46672549  0.12154902  0.05476471 -0.02227451]\n [ 0.66672549  0.22154902  0.15476471  0.07772549]\n [ 0.86672549  0.02154902  0.55476471  0.07772549]\n [ 0.76672549  0.22154902  0.75476471  0.37772549]\n [ 0.06672549  0.12154902  0.25476471  0.17772549]\n [-0.23327451 -0.17845098 -0.74523529 -0.32227451]\n [-0.43327451 -0.37845098 -0.44523529 -0.22227451]\n [-0.43327451 -0.37845098 -0.54523529 -0.32227451]\n [-0.13327451 -0.07845098 -0.34523529 -0.12227451]\n [ 0.06672549 -0.07845098  0.85476471  0.27772549]\n [-0.53327451  0.22154902  0.25476471  0.17772549]\n [ 0.06672549  0.62154902  0.25476471  0.27772549]\n [ 0.76672549  0.32154902  0.45476471  0.17772549]\n [ 0.36672549 -0.47845098  0.15476471 -0.02227451]\n [-0.33327451  0.22154902 -0.14523529 -0.02227451]\n [-0.43327451 -0.27845098 -0.24523529 -0.02227451]\n [-0.43327451 -0.17845098  0.15476471 -0.12227451]\n [ 0.16672549  0.22154902  0.35476471  0.07772549]\n [-0.13327451 -0.17845098 -0.24523529 -0.12227451]\n [-0.93327451 -0.47845098 -0.94523529 -0.32227451]\n [-0.33327451 -0.07845098 -0.04523529 -0.02227451]\n [-0.23327451  0.22154902 -0.04523529 -0.12227451]\n [-0.23327451  0.12154902 -0.04523529 -0.02227451]\n [ 0.26672549  0.12154902  0.05476471 -0.02227451]\n [-0.83327451 -0.27845098 -1.24523529 -0.22227451]\n [-0.23327451  0.02154902 -0.14523529 -0.02227451]\n [ 0.36672549  0.52154902  1.75476471  1.17772549]\n [-0.13327451 -0.07845098  0.85476471  0.57772549]\n [ 1.16672549  0.22154902  1.65476471  0.77772549]\n [ 0.36672549  0.12154902  1.35476471  0.47772549]\n [ 0.56672549  0.22154902  1.55476471  0.87772549]\n [ 1.66672549  0.22154902  2.35476471  0.77772549]\n [-1.03327451 -0.27845098  0.25476471  0.37772549]\n [ 1.36672549  0.12154902  2.05476471  0.47772549]\n [ 0.76672549 -0.27845098  1.55476471  0.47772549]\n [ 1.26672549  0.82154902  1.85476471  1.17772549]\n [ 0.56672549  0.42154902  0.85476471  0.67772549]\n [ 0.46672549 -0.07845098  1.05476471  0.57772549]\n [ 0.86672549  0.22154902  1.25476471  0.77772549]\n [-0.23327451 -0.27845098  0.75476471  0.67772549]\n [-0.13327451  0.02154902  0.85476471  1.07772549]\n [ 0.46672549  0.42154902  1.05476471  0.97772549]\n [ 0.56672549  0.22154902  1.25476471  0.47772549]\n [ 1.76672549  1.02154902  2.45476471  0.87772549]\n [ 1.76672549 -0.17845098  2.65476471  0.97772549]\n [ 0.06672549 -0.57845098  0.75476471  0.17772549]\n [ 0.96672549  0.42154902  1.45476471  0.97772549]\n [-0.33327451  0.02154902  0.65476471  0.67772549]\n [ 1.76672549  0.02154902  2.45476471  0.67772549]\n [ 0.36672549 -0.07845098  0.65476471  0.47772549]\n [ 0.76672549  0.52154902  1.45476471  0.77772549]\n [ 1.26672549  0.42154902  1.75476471  0.47772549]\n [ 0.26672549  0.02154902  0.55476471  0.47772549]\n [ 0.16672549  0.22154902  0.65476471  0.47772549]\n [ 0.46672549  0.02154902  1.35476471  0.77772549]\n [ 1.26672549  0.22154902  1.55476471  0.27772549]\n [ 1.46672549  0.02154902  1.85476471  0.57772549]\n [ 1.96672549  1.02154902  2.15476471  0.67772549]\n [ 0.46672549  0.02154902  1.35476471  0.87772549]\n [ 0.36672549  0.02154902  0.85476471  0.17772549]\n [ 0.16672549 -0.17845098  1.35476471  0.07772549]\n [ 1.76672549  0.22154902  1.85476471  0.97772549]\n [ 0.36672549  0.62154902  1.35476471  1.07772549]\n [ 0.46672549  0.32154902  1.25476471  0.47772549]\n [ 0.06672549  0.22154902  0.55476471  0.47772549]\n [ 0.96672549  0.32154902  1.15476471  0.77772549]\n [ 0.76672549  0.32154902  1.35476471  1.07772549]\n [ 0.96672549  0.32154902  0.85476471  0.97772549]\n [-0.13327451 -0.07845098  0.85476471  0.57772549]\n [ 0.86672549  0.42154902  1.65476471  0.97772549]\n [ 0.76672549  0.52154902  1.45476471  1.17772549]\n [ 0.76672549  0.22154902  0.95476471  0.97772549]\n [ 0.36672549 -0.27845098  0.75476471  0.57772549]\n [ 0.56672549  0.22154902  0.95476471  0.67772549]\n [ 0.26672549  0.62154902  1.15476471  0.97772549]\n [-0.03327451  0.22154902  0.85476471  0.47772549]]", "y": "[[ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [ 1.98039216 -1.96078431 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784  0.03921569 -0.01960784]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]\n [-0.01960784 -1.96078431  1.98039216]]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[  1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.\n   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.\n   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.\n   1.   1.   1.   1.   1.   1.   1.   1. 100. 100. 100. 100. 100. 100.\n 100. 100. 100. 100. 100. 100. 100. 100. 100. 100. 100. 100. 100. 100.\n 100. 100. 100. 100. 100. 100. 100. 100. 100. 100. 100. 100. 100. 100.\n 100. 100. 100. 100. 100. 100. 100. 100. 100. 100. 100. 100. 100. 100.\n 100. 100.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.\n   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.\n   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.\n   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[ 0.05825979  0.2910723  -0.17366921 -0.2954651 ]\n [-0.05444259 -0.23079722  0.19361137 -0.03874309]\n [-0.0038172  -0.06027507 -0.01994216  0.33420818]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.83597221  0.72991382 -2.85984943 -1.12596201]\n [-1.03597221  0.22991382 -2.85984943 -1.12596201]\n [-1.23597221  0.42991382 -2.95984943 -1.12596201]\n [-1.33597221  0.32991382 -2.75984943 -1.12596201]\n [-0.93597221  0.82991382 -2.85984943 -1.12596201]\n [-0.53597221  1.12991382 -2.55984943 -0.92596201]\n [-1.33597221  0.62991382 -2.85984943 -1.02596201]\n [-0.93597221  0.62991382 -2.75984943 -1.12596201]\n [-1.53597221  0.12991382 -2.85984943 -1.12596201]\n [-1.03597221  0.32991382 -2.75984943 -1.22596201]\n [-0.53597221  0.92991382 -2.75984943 -1.12596201]\n [-1.13597221  0.62991382 -2.65984943 -1.12596201]\n [-1.13597221  0.22991382 -2.85984943 -1.22596201]\n [-1.63597221  0.22991382 -3.15984943 -1.22596201]\n [-0.13597221  1.22991382 -3.05984943 -1.12596201]\n [-0.23597221  1.62991382 -2.75984943 -0.92596201]\n [-0.53597221  1.12991382 -2.95984943 -0.92596201]\n [-0.83597221  0.72991382 -2.85984943 -1.02596201]\n [-0.23597221  1.02991382 -2.55984943 -1.02596201]\n [-0.83597221  1.02991382 -2.75984943 -1.02596201]\n [-0.53597221  0.62991382 -2.55984943 -1.12596201]\n [-0.83597221  0.92991382 -2.75984943 -0.92596201]\n [-1.33597221  0.82991382 -3.25984943 -1.12596201]\n [-0.83597221  0.52991382 -2.55984943 -0.82596201]\n [-1.13597221  0.62991382 -2.35984943 -1.12596201]\n [-0.93597221  0.22991382 -2.65984943 -1.12596201]\n [-0.93597221  0.62991382 -2.65984943 -0.92596201]\n [-0.73597221  0.72991382 -2.75984943 -1.12596201]\n [-0.73597221  0.62991382 -2.85984943 -1.12596201]\n [-1.23597221  0.42991382 -2.65984943 -1.12596201]\n [-1.13597221  0.32991382 -2.65984943 -1.12596201]\n [-0.53597221  0.62991382 -2.75984943 -0.92596201]\n [-0.73597221  1.32991382 -2.75984943 -1.22596201]\n [-0.43597221  1.42991382 -2.85984943 -1.12596201]\n [-1.03597221  0.32991382 -2.75984943 -1.12596201]\n [-0.93597221  0.42991382 -3.05984943 -1.12596201]\n [-0.43597221  0.72991382 -2.95984943 -1.12596201]\n [-1.03597221  0.82991382 -2.85984943 -1.22596201]\n [-1.53597221  0.22991382 -2.95984943 -1.12596201]\n [-0.83597221  0.62991382 -2.75984943 -1.12596201]\n [-0.93597221  0.72991382 -2.95984943 -1.02596201]\n [-1.43597221 -0.47008618 -2.95984943 -1.02596201]\n [-1.53597221  0.42991382 -2.95984943 -1.12596201]\n [-0.93597221  0.72991382 -2.65984943 -0.72596201]\n [-0.83597221  1.02991382 -2.35984943 -0.92596201]\n [-1.13597221  0.22991382 -2.85984943 -1.02596201]\n [-0.83597221  1.02991382 -2.65984943 -1.12596201]\n [-1.33597221  0.42991382 -2.85984943 -1.12596201]\n [-0.63597221  0.92991382 -2.75984943 -1.12596201]\n [-0.93597221  0.52991382 -2.85984943 -1.12596201]\n [ 1.06402779  0.42991382  0.44015057  0.07403799]\n [ 0.46402779  0.42991382  0.24015057  0.17403799]\n [ 0.96402779  0.32991382  0.64015057  0.17403799]\n [-0.43597221 -0.47008618 -0.25984943 -0.02596201]\n [ 0.56402779  0.02991382  0.34015057  0.17403799]\n [-0.23597221  0.02991382  0.24015057 -0.02596201]\n [ 0.36402779  0.52991382  0.44015057  0.27403799]\n [-1.03597221 -0.37008618 -0.95984943 -0.32596201]\n [ 0.66402779  0.12991382  0.34015057 -0.02596201]\n [-0.73597221 -0.07008618 -0.35984943  0.07403799]\n [-0.93597221 -0.77008618 -0.75984943 -0.32596201]\n [-0.03597221  0.22991382 -0.05984943  0.17403799]\n [ 0.06402779 -0.57008618 -0.25984943 -0.32596201]\n [ 0.16402779  0.12991382  0.44015057  0.07403799]\n [-0.33597221  0.12991382 -0.65984943 -0.02596201]\n [ 0.76402779  0.32991382  0.14015057  0.07403799]\n [-0.33597221  0.22991382  0.24015057  0.17403799]\n [-0.13597221 -0.07008618 -0.15984943 -0.32596201]\n [ 0.26402779 -0.57008618  0.24015057  0.17403799]\n [-0.33597221 -0.27008618 -0.35984943 -0.22596201]\n [-0.03597221  0.42991382  0.54015057  0.47403799]\n [ 0.16402779  0.02991382 -0.25984943 -0.02596201]\n [ 0.36402779 -0.27008618  0.64015057  0.17403799]\n [ 0.16402779  0.02991382  0.44015057 -0.12596201]\n [ 0.46402779  0.12991382  0.04015057 -0.02596201]\n [ 0.66402779  0.22991382  0.14015057  0.07403799]\n [ 0.86402779  0.02991382  0.54015057  0.07403799]\n [ 0.76402779  0.22991382  0.74015057  0.37403799]\n [ 0.06402779  0.12991382  0.24015057  0.17403799]\n [-0.23597221 -0.17008618 -0.75984943 -0.32596201]\n [-0.43597221 -0.37008618 -0.45984943 -0.22596201]\n [-0.43597221 -0.37008618 -0.55984943 -0.32596201]\n [-0.13597221 -0.07008618 -0.35984943 -0.12596201]\n [ 0.06402779 -0.07008618  0.84015057  0.27403799]\n [-0.53597221  0.22991382  0.24015057  0.17403799]\n [ 0.06402779  0.62991382  0.24015057  0.27403799]\n [ 0.76402779  0.32991382  0.44015057  0.17403799]\n [ 0.36402779 -0.47008618  0.14015057 -0.02596201]\n [-0.33597221  0.22991382 -0.15984943 -0.02596201]\n [-0.43597221 -0.27008618 -0.25984943 -0.02596201]\n [-0.43597221 -0.17008618  0.14015057 -0.12596201]\n [ 0.16402779  0.22991382  0.34015057  0.07403799]\n [-0.13597221 -0.17008618 -0.25984943 -0.12596201]\n [-0.93597221 -0.47008618 -0.95984943 -0.32596201]\n [-0.33597221 -0.07008618 -0.05984943 -0.02596201]\n [-0.23597221  0.22991382 -0.05984943 -0.12596201]\n [-0.23597221  0.12991382 -0.05984943 -0.02596201]\n [ 0.26402779  0.12991382  0.04015057 -0.02596201]\n [-0.83597221 -0.27008618 -1.25984943 -0.22596201]\n [-0.23597221  0.02991382 -0.15984943 -0.02596201]\n [ 0.36402779  0.52991382  1.74015057  1.17403799]\n [-0.13597221 -0.07008618  0.84015057  0.57403799]\n [ 1.16402779  0.22991382  1.64015057  0.77403799]\n [ 0.36402779  0.12991382  1.34015057  0.47403799]\n [ 0.56402779  0.22991382  1.54015057  0.87403799]\n [ 1.66402779  0.22991382  2.34015057  0.77403799]\n [-1.03597221 -0.27008618  0.24015057  0.37403799]\n [ 1.36402779  0.12991382  2.04015057  0.47403799]\n [ 0.76402779 -0.27008618  1.54015057  0.47403799]\n [ 1.26402779  0.82991382  1.84015057  1.17403799]\n [ 0.56402779  0.42991382  0.84015057  0.67403799]\n [ 0.46402779 -0.07008618  1.04015057  0.57403799]\n [ 0.86402779  0.22991382  1.24015057  0.77403799]\n [-0.23597221 -0.27008618  0.74015057  0.67403799]\n [-0.13597221  0.02991382  0.84015057  1.07403799]\n [ 0.46402779  0.42991382  1.04015057  0.97403799]\n [ 0.56402779  0.22991382  1.24015057  0.47403799]\n [ 1.76402779  1.02991382  2.44015057  0.87403799]\n [ 1.76402779 -0.17008618  2.64015057  0.97403799]\n [ 0.06402779 -0.57008618  0.74015057  0.17403799]\n [ 0.96402779  0.42991382  1.44015057  0.97403799]\n [-0.33597221  0.02991382  0.64015057  0.67403799]\n [ 1.76402779  0.02991382  2.44015057  0.67403799]\n [ 0.36402779 -0.07008618  0.64015057  0.47403799]\n [ 0.76402779  0.52991382  1.44015057  0.77403799]\n [ 1.26402779  0.42991382  1.74015057  0.47403799]\n [ 0.26402779  0.02991382  0.54015057  0.47403799]\n [ 0.16402779  0.22991382  0.64015057  0.47403799]\n [ 0.46402779  0.02991382  1.34015057  0.77403799]\n [ 1.26402779  0.22991382  1.54015057  0.27403799]\n [ 1.46402779  0.02991382  1.84015057  0.57403799]\n [ 1.96402779  1.02991382  2.14015057  0.67403799]\n [ 0.46402779  0.02991382  1.34015057  0.87403799]\n [ 0.36402779  0.02991382  0.84015057  0.17403799]\n [ 0.16402779 -0.17008618  1.34015057  0.07403799]\n [ 1.76402779  0.22991382  1.84015057  0.97403799]\n [ 0.36402779  0.62991382  1.34015057  1.07403799]\n [ 0.46402779  0.32991382  1.24015057  0.47403799]\n [ 0.06402779  0.22991382  0.54015057  0.47403799]\n [ 0.96402779  0.32991382  1.14015057  0.77403799]\n [ 0.76402779  0.32991382  1.34015057  1.07403799]\n [ 0.96402779  0.32991382  0.84015057  0.97403799]\n [-0.13597221 -0.07008618  0.84015057  0.57403799]\n [ 0.86402779  0.42991382  1.64015057  0.97403799]\n [ 0.76402779  0.52991382  1.44015057  1.17403799]\n [ 0.76402779  0.22991382  0.94015057  0.97403799]\n [ 0.36402779 -0.27008618  0.74015057  0.57403799]\n [ 0.56402779  0.22991382  0.94015057  0.67403799]\n [ 0.26402779  0.62991382  1.14015057  0.97403799]\n [-0.03597221  0.22991382  0.84015057  0.47403799]]", "y": "[[ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [ 1.99980004e+00 -1.99960008e+00 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04  3.99920016e-04 -1.99960008e-04]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]\n [-1.99960008e-04 -1.99960008e+00  1.99980004e+00]]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00\n 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00\n 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00\n 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00\n 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00\n 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04\n 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04\n 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04\n 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04\n 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04 1.e+04\n 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00\n 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00\n 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00\n 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00\n 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00 1.e+00]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[ 0.00119528  0.00635217 -0.00341144 -0.00758271]\n [-0.00095759 -0.00448747  0.00311086  0.0022169 ]\n [-0.00023769 -0.0018647   0.00030058  0.00536581]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.87193636 -0.05982545  0.54100474 -1.44929723 -1.69317638]\n [ 0.03147589  1.00976901 -0.51422798  1.67455313 -0.59455224]\n [-0.57638419 -0.04185104  1.76071625  0.87415728  1.01476086]\n [-0.24398019 -0.74245294 -1.75285943 -0.94311364  1.0161624 ]]", "y": "[ 0.01462218  1.2767774   0.90344219 -1.94139368]"}, "kwargs": {"alpha": 0.1, "sample_weight": "[1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.04821963  0.36004542  0.4483285   0.55609368 -0.32850426]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.2045918  -0.22666592  0.10552721 -0.35165744  0.20384351]\n [ 0.70877689  0.68572902  0.33042108 -0.31839271  0.39347426]\n [-0.09187802  0.78912749 -0.53341896  1.50749868 -1.39456574]\n [-0.6997381  -0.26249256  1.74152527  0.70710283  0.21474736]\n [-0.3673341  -0.96309446 -1.77205041 -1.11016809  0.21614891]]", "y": "[ 0.74767426 -0.61622088  1.22451511  0.8511799  -1.99365597]"}, "kwargs": {"alpha": 0.1, "sample_weight": "[1.66676672 1.67063787 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 1.39293234 -1.30975987  0.91490931  0.52386957 -1.47154663]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.06486509 -0.05642216 -0.06519336  0.154541    0.40356211]\n [ 0.56905017  0.85597278  0.15970051  0.18780573  0.59319287]\n [ 0.60885574 -0.11022321  0.35109319 -1.11015324 -2.29347128]\n [-0.83946481 -0.0922488   1.5708047   1.21330127  0.41446596]\n [-0.50706081 -0.79285069 -1.94277098 -0.60396965  0.41586751]]", "y": "[ 0.9452612  -0.41863394  0.15994683  1.04876684 -1.79606903]"}, "kwargs": {"alpha": 0.1, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.31542835 1.36371077]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 1.42475485 -1.6329103   1.03817894  0.41586153  0.32792435]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.05484235 -0.22749226  0.34120298  0.05833874  0.67259343]\n [ 0.44934274  0.68490267  0.56609685  0.09160347  0.86222419]\n [ 0.4891483  -0.28129332  0.75748954 -1.20635551 -2.02443996]\n [-0.35131217  0.78830115 -0.29774318  1.91749486 -0.92581581]\n [-0.62676825 -0.9639208  -1.53637463 -0.70017192  0.68489883]]", "y": "[ 0.91317921 -0.45071592  0.12786485  1.39002007 -1.82815101]"}, "kwargs": {"alpha": 0.1, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.36371077]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.62600326 -1.12875035  1.45867788  1.18665857 -0.2251001 ]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.00336467 -0.36595227 -0.33041339 -0.28837844  0.67758649]\n [ 0.50754976  0.54644266 -0.10551953 -0.25511371  0.86721725]\n [ 0.54735533 -0.41975333  0.08587316 -1.55307269 -2.01944689]\n [-0.29310515  0.64984113 -0.96935956  1.57077768 -0.92082275]\n [-0.90096523 -0.40177891  1.30558467  0.77038182  0.68849035]]", "y": "[ 0.36535776 -0.99853738 -0.41995661  0.84219861  0.4688634 ]"}, "kwargs": {"alpha": 0.1, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.64169756 -0.85498704 -0.51109974  0.38152137 -0.10901246]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.87193636 -0.05982545  0.54100474 -1.44929723 -1.69317638]\n [ 0.03147589  1.00976901 -0.51422798  1.67455313 -0.59455224]\n [-0.57638419 -0.04185104  1.76071625  0.87415728  1.01476086]\n [-0.24398019 -0.74245294 -1.75285943 -0.94311364  1.0161624 ]]", "y": "[ 0.01462218  1.2767774   0.90344219 -1.94139368]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.04028656  0.32567333  0.42549052  0.50873113 -0.29211293]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.2045918  -0.22666592  0.10552721 -0.35165744  0.20384351]\n [ 0.70877689  0.68572902  0.33042108 -0.31839271  0.39347426]\n [-0.09187802  0.78912749 -0.53341896  1.50749868 -1.39456574]\n [-0.6997381  -0.26249256  1.74152527  0.70710283  0.21474736]\n [-0.3673341  -0.96309446 -1.77205041 -1.11016809  0.21614891]]", "y": "[ 0.74767426 -0.61622088  1.22451511  0.8511799  -1.99365597]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.66676672 1.67063787 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.14109995 -0.07647703  0.49199094  0.5171736  -0.44739184]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.06486509 -0.05642216 -0.06519336  0.154541    0.40356211]\n [ 0.56905017  0.85597278  0.15970051  0.18780573  0.59319287]\n [ 0.60885574 -0.11022321  0.35109319 -1.11015324 -2.29347128]\n [-0.83946481 -0.0922488   1.5708047   1.21330127  0.41446596]\n [-0.50706081 -0.79285069 -1.94277098 -0.60396965  0.41586751]]", "y": "[ 0.9452612  -0.41863394  0.15994683  1.04876684 -1.79606903]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.31542835 1.36371077]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.14735912 -0.20852563  0.64281984  0.26694584 -0.06290718]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.05484235 -0.22749226  0.34120298  0.05833874  0.67259343]\n [ 0.44934274  0.68490267  0.56609685  0.09160347  0.86222419]\n [ 0.4891483  -0.28129332  0.75748954 -1.20635551 -2.02443996]\n [-0.35131217  0.78830115 -0.29774318  1.91749486 -0.92581581]\n [-0.62676825 -0.9639208  -1.53637463 -0.70017192  0.68489883]]", "y": "[ 0.91317921 -0.45071592  0.12786485  1.39002007 -1.82815101]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.36371077]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.17196934 -0.19974562  0.70254595  0.69868131 -0.25060671]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.00336467 -0.36595227 -0.33041339 -0.28837844  0.67758649]\n [ 0.50754976  0.54644266 -0.10551953 -0.25511371  0.86721725]\n [ 0.54735533 -0.41975333  0.08587316 -1.55307269 -2.01944689]\n [-0.29310515  0.64984113 -0.96935956  1.57077768 -0.92082275]\n [-0.90096523 -0.40177891  1.30558467  0.77038182  0.68849035]]", "y": "[ 0.36535776 -0.99853738 -0.41995661  0.84219861  0.4688634 ]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.41875542 -0.43028699 -0.21730656  0.35172537 -0.12705691]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.87193636 -0.05982545  0.54100474 -1.44929723 -1.69317638]\n [ 0.03147589  1.00976901 -0.51422798  1.67455313 -0.59455224]\n [-0.57638419 -0.04185104  1.76071625  0.87415728  1.01476086]\n [-0.24398019 -0.74245294 -1.75285943 -0.94311364  1.0161624 ]]", "y": "[ 0.01462218  1.2767774   0.90344219 -1.94139368]"}, "kwargs": {"alpha": 10.0, "sample_weight": "[1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.01219618  0.17088084  0.26647958  0.28203207 -0.13902488]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.2045918  -0.22666592  0.10552721 -0.35165744  0.20384351]\n [ 0.70877689  0.68572902  0.33042108 -0.31839271  0.39347426]\n [-0.09187802  0.78912749 -0.53341896  1.50749868 -1.39456574]\n [-0.6997381  -0.26249256  1.74152527  0.70710283  0.21474736]\n [-0.3673341  -0.96309446 -1.77205041 -1.11016809  0.21614891]]", "y": "[ 0.74767426 -0.61622088  1.22451511  0.8511799  -1.99365597]"}, "kwargs": {"alpha": 10.0, "sample_weight": "[1.66676672 1.67063787 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.01606417  0.09287592  0.26207881  0.28333664 -0.14096234]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.06486509 -0.05642216 -0.06519336  0.154541    0.40356211]\n [ 0.56905017  0.85597278  0.15970051  0.18780573  0.59319287]\n [ 0.60885574 -0.11022321  0.35109319 -1.11015324 -2.29347128]\n [-0.83946481 -0.0922488   1.5708047   1.21330127  0.41446596]\n [-0.50706081 -0.79285069 -1.94277098 -0.60396965  0.41586751]]", "y": "[ 0.9452612  -0.41863394  0.15994683  1.04876684 -1.79606903]"}, "kwargs": {"alpha": 10.0, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.31542835 1.36371077]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-1.42149958e-04  2.58025033e-02  3.30897840e-01  1.41808887e-01\n -4.76923036e-02]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.05484235 -0.22749226  0.34120298  0.05833874  0.67259343]\n [ 0.44934274  0.68490267  0.56609685  0.09160347  0.86222419]\n [ 0.4891483  -0.28129332  0.75748954 -1.20635551 -2.02443996]\n [-0.35131217  0.78830115 -0.29774318  1.91749486 -0.92581581]\n [-0.62676825 -0.9639208  -1.53637463 -0.70017192  0.68489883]]", "y": "[ 0.91317921 -0.45071592  0.12786485  1.39002007 -1.82815101]"}, "kwargs": {"alpha": 10.0, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.36371077]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.0158803   0.11074702  0.20942065  0.26290043 -0.15133504]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.00336467 -0.36595227 -0.33041339 -0.28837844  0.67758649]\n [ 0.50754976  0.54644266 -0.10551953 -0.25511371  0.86721725]\n [ 0.54735533 -0.41975333  0.08587316 -1.55307269 -2.01944689]\n [-0.29310515  0.64984113 -0.96935956  1.57077768 -0.92082275]\n [-0.90096523 -0.40177891  1.30558467  0.77038182  0.68849035]]", "y": "[ 0.36535776 -0.99853738 -0.41995661  0.84219861  0.4688634 ]"}, "kwargs": {"alpha": 10.0, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.12998193 -0.06515917 -0.02251985  0.17061952 -0.04939387]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.09615629 -0.18603902  0.02994015 -0.11752168  0.5649932 ]\n [ 0.60034138  0.72635591  0.25483402 -0.08425695  0.75462395]\n [ 0.64014694 -0.23984008  0.44622671 -1.38221592 -2.13204019]\n [-0.20031353  0.82975438 -0.60900601  1.74163444 -1.03341605]\n [-0.80817361 -0.22186566  1.66593822  0.94123859  0.57589705]\n [-0.47576961 -0.92246756 -1.84763746 -0.87603233  0.57729859]]", "y": "[ 0.7531266  -0.61076854 -0.03218777  1.22996745  0.85663224 -1.98820363]"}, "kwargs": {"alpha": 0.1, "sample_weight": "[1.66676672 1.67063787 1.21038256 1.1289263  1.31542835 1.36371077]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 1.44684149 -1.31274484  0.43950056  1.45723599 -0.27941233]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.29492683  0.0553253  -0.47559638 -0.25970356 -0.76098774 -1.03196797\n  -0.660382   -0.45812859 -0.77591098 -1.27617039]\n [ 0.45523718 -0.21765097 -0.06090982  1.14184745 -0.27245167  0.920579\n  -0.16892522 -0.23321309 -1.05894014 -0.51676919]\n [-0.58639474  0.37809486 -0.05668987 -0.75239296  0.49939191  0.24684075\n  -0.47034309  0.85269746  1.52175913  1.53280753]\n [-0.18746991 -0.38110522  0.94159651  0.00957994  0.82101049 -0.01054671\n   2.04253964 -0.27918834  0.33244312  0.36452798]]", "y": "[ 1.86281005 -0.59761753 -0.52603965 -1.34076071]"}, "kwargs": {"alpha": 0.1, "sample_weight": "[1.6439902  1.42385505 1.60639321 1.0191932 ]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.01213707  0.10153873 -0.23049905 -0.37392982 -0.27548304 -0.60365806\n -0.35405475 -0.09170451 -0.05371437 -0.37240139]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.59989845 -0.60806404 -0.34973722 -0.39657726 -0.21811635 -0.77447455\n  -0.25813902 -0.57295954 -0.17585522 -0.06577918]\n [ 0.28519035  0.09853545 -0.08505155  1.22797986 -0.47603594  0.87573127\n  -0.31233266 -0.14243567 -1.28899718 -1.00309356]\n [-0.75644157  0.69428128 -0.0808316  -0.66626054  0.29580764  0.20199303\n  -0.61375052  0.94347488  1.29170209  1.04648317]\n [-0.35751675 -0.06491881  0.91745478  0.09571235  0.61742622 -0.05539443\n   1.8991322  -0.18841091  0.10238608 -0.12179639]]", "y": "[-0.69989056  0.49672745  0.56830533 -0.24641573]"}, "kwargs": {"alpha": 0.1, "sample_weight": "[1.95608363 1.42385505 1.60639321 1.0191932 ]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.17512281  0.24177591  0.02150325  0.18327504 -0.00713085  0.33170907\n -0.1370331   0.23434348  0.00827134  0.00321637]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.63214695 -0.68363216 -0.2372249  -0.06989471 -0.07227788 -0.28983698\n  -0.11731773 -0.50853039 -0.20501575  0.17022218]\n [ 0.15712849  0.2959436  -0.38722579  0.15311141 -0.81873354 -0.59217813\n  -0.66296815 -0.30292202 -1.03512856 -1.52649339]\n [-0.72419307  0.61871316  0.03168072 -0.33957799  0.44164611  0.6866306\n  -0.47292923  1.00790403  1.26254155  1.28248452]\n [-0.32526824 -0.14048693  1.0299671   0.42239491  0.76326469  0.42924313\n   2.03995349 -0.12398177  0.07322555  0.11420497]]", "y": "[-1.36717175  2.28987383 -0.09897586 -0.91369692]"}, "kwargs": {"alpha": 0.1, "sample_weight": "[1.95608363 1.6439902  1.60639321 1.0191932 ]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.62665593  0.93153135  0.02324313  0.12879201 -0.35758954  0.01979411\n -0.30623341  0.44164962 -0.26982658 -0.93774433]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.36484708 -0.52457621 -0.23527367 -0.52646495  0.122921   -0.42784004\n  -0.20262181 -0.22222802  0.44117402  0.69187348]\n [-0.11017138  0.45499954 -0.38527456 -0.30345883 -0.62353466 -0.73018118\n  -0.74827223 -0.01661965 -0.38893878 -1.00484209]\n [ 0.05013898  0.18202327  0.029412    1.09809218 -0.13499859  1.22236578\n  -0.25681545  0.20829585 -0.67196794 -0.24544089]\n [-0.59256811  0.01856901  1.03191833 -0.03417533  0.95846357  0.29124008\n   1.95464941  0.1623206   0.71941532  0.63585628]]", "y": "[-1.35329653  2.30374905 -0.15667852 -0.8998217 ]"}, "kwargs": {"alpha": 0.1, "sample_weight": "[1.95608363 1.6439902  1.42385505 1.0191932 ]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.51882314  0.73452895  0.08882692 -0.14481269 -0.35608922 -0.53198449\n  0.04912003  0.13858992 -0.31880735 -1.15176614]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.51397802 -0.7101596  -0.08479863 -0.33882763  0.11595845 -0.51599287\n   0.23308969 -0.51083668  0.08931331  0.3525097 ]\n [ 0.03895956  0.26941616 -0.23479951 -0.11582152 -0.63049721 -0.81833401\n  -0.31256073 -0.3052283  -0.7407995  -1.34420587]\n [ 0.19926992 -0.00356011  0.17988705  1.28572949 -0.14196114  1.13421296\n   0.17889605 -0.08031281 -1.02382865 -0.58480467]\n [-0.842362    0.59218572  0.18410699 -0.60851091  0.62988244  0.46047471\n  -0.12252181  1.00559775  1.55687062  1.46477205]]", "y": "[-1.47099625  2.18604933 -0.27437824 -0.20280036]"}, "kwargs": {"alpha": 0.1, "sample_weight": "[1.95608363 1.6439902  1.42385505 1.60639321]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.62429165  0.9324857  -0.11078842 -0.21428484 -0.42148408 -0.34978275\n -0.50325458  0.42401418 -0.09553403 -0.89975762]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.29492683  0.0553253  -0.47559638 -0.25970356 -0.76098774 -1.03196797\n  -0.660382   -0.45812859 -0.77591098 -1.27617039]\n [ 0.45523718 -0.21765097 -0.06090982  1.14184745 -0.27245167  0.920579\n  -0.16892522 -0.23321309 -1.05894014 -0.51676919]\n [-0.58639474  0.37809486 -0.05668987 -0.75239296  0.49939191  0.24684075\n  -0.47034309  0.85269746  1.52175913  1.53280753]\n [-0.18746991 -0.38110522  0.94159651  0.00957994  0.82101049 -0.01054671\n   2.04253964 -0.27918834  0.33244312  0.36452798]]", "y": "[ 1.86281005 -0.59761753 -0.52603965 -1.34076071]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.6439902  1.42385505 1.60639321 1.0191932 ]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.01893478  0.09071785 -0.21439429 -0.31542906 -0.25596135 -0.52175098\n -0.33632177 -0.08165949 -0.06557653 -0.34062017]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.59989845 -0.60806404 -0.34973722 -0.39657726 -0.21811635 -0.77447455\n  -0.25813902 -0.57295954 -0.17585522 -0.06577918]\n [ 0.28519035  0.09853545 -0.08505155  1.22797986 -0.47603594  0.87573127\n  -0.31233266 -0.14243567 -1.28899718 -1.00309356]\n [-0.75644157  0.69428128 -0.0808316  -0.66626054  0.29580764  0.20199303\n  -0.61375052  0.94347488  1.29170209  1.04648317]\n [-0.35751675 -0.06491881  0.91745478  0.09571235  0.61742622 -0.05539443\n   1.8991322  -0.18841091  0.10238608 -0.12179639]]", "y": "[-0.69989056  0.49672745  0.56830533 -0.24641573]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.95608363 1.42385505 1.60639321 1.0191932 ]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.15339282  0.21072238  0.01833082  0.15618085 -0.00526187  0.28686664\n -0.12005994  0.20504944  0.01099229  0.00589492]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.63214695 -0.68363216 -0.2372249  -0.06989471 -0.07227788 -0.28983698\n  -0.11731773 -0.50853039 -0.20501575  0.17022218]\n [ 0.15712849  0.2959436  -0.38722579  0.15311141 -0.81873354 -0.59217813\n  -0.66296815 -0.30292202 -1.03512856 -1.52649339]\n [-0.72419307  0.61871316  0.03168072 -0.33957799  0.44164611  0.6866306\n  -0.47292923  1.00790403  1.26254155  1.28248452]\n [-0.32526824 -0.14048693  1.0299671   0.42239491  0.76326469  0.42924313\n   2.03995349 -0.12398177  0.07322555  0.11420497]]", "y": "[-1.36717175  2.28987383 -0.09897586 -0.91369692]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.95608363 1.6439902  1.60639321 1.0191932 ]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.47673315  0.73680601 -0.0154677   0.09482071 -0.31755139 -0.00995579\n -0.30235725  0.33891524 -0.23924989 -0.77357089]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.36484708 -0.52457621 -0.23527367 -0.52646495  0.122921   -0.42784004\n  -0.20262181 -0.22222802  0.44117402  0.69187348]\n [-0.11017138  0.45499954 -0.38527456 -0.30345883 -0.62353466 -0.73018118\n  -0.74827223 -0.01661965 -0.38893878 -1.00484209]\n [ 0.05013898  0.18202327  0.029412    1.09809218 -0.13499859  1.22236578\n  -0.25681545  0.20829585 -0.67196794 -0.24544089]\n [-0.59256811  0.01856901  1.03191833 -0.03417533  0.95846357  0.29124008\n   1.95464941  0.1623206   0.71941532  0.63585628]]", "y": "[-1.35329653  2.30374905 -0.15667852 -0.8998217 ]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.95608363 1.6439902  1.42385505 1.0191932 ]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.38130549  0.57759928  0.02698798 -0.09677336 -0.32103349 -0.41214039\n -0.04663753  0.10478167 -0.28932641 -0.93288416]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.51397802 -0.7101596  -0.08479863 -0.33882763  0.11595845 -0.51599287\n   0.23308969 -0.51083668  0.08931331  0.3525097 ]\n [ 0.03895956  0.26941616 -0.23479951 -0.11582152 -0.63049721 -0.81833401\n  -0.31256073 -0.3052283  -0.7407995  -1.34420587]\n [ 0.19926992 -0.00356011  0.17988705  1.28572949 -0.14196114  1.13421296\n   0.17889605 -0.08031281 -1.02382865 -0.58480467]\n [-0.842362    0.59218572  0.18410699 -0.60851091  0.62988244  0.46047471\n  -0.12252181  1.00559775  1.55687062  1.46477205]]", "y": "[-1.47099625  2.18604933 -0.27437824 -0.20280036]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.95608363 1.6439902  1.42385505 1.60639321]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.48792119  0.740444   -0.09290705 -0.16367363 -0.35080092 -0.29206469\n -0.40349635  0.32340119 -0.10364103 -0.75059015]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.29492683  0.0553253  -0.47559638 -0.25970356 -0.76098774 -1.03196797\n  -0.660382   -0.45812859 -0.77591098 -1.27617039]\n [ 0.45523718 -0.21765097 -0.06090982  1.14184745 -0.27245167  0.920579\n  -0.16892522 -0.23321309 -1.05894014 -0.51676919]\n [-0.58639474  0.37809486 -0.05668987 -0.75239296  0.49939191  0.24684075\n  -0.47034309  0.85269746  1.52175913  1.53280753]\n [-0.18746991 -0.38110522  0.94159651  0.00957994  0.82101049 -0.01054671\n   2.04253964 -0.27918834  0.33244312  0.36452798]]", "y": "[ 1.86281005 -0.59761753 -0.52603965 -1.34076071]"}, "kwargs": {"alpha": 10.0, "sample_weight": "[1.6439902  1.42385505 1.60639321 1.0191932 ]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.03076103  0.04160843 -0.12291033 -0.11597486 -0.15225547 -0.2322883\n -0.20127203 -0.0495796  -0.08175624 -0.20217452]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.59989845 -0.60806404 -0.34973722 -0.39657726 -0.21811635 -0.77447455\n  -0.25813902 -0.57295954 -0.17585522 -0.06577918]\n [ 0.28519035  0.09853545 -0.08505155  1.22797986 -0.47603594  0.87573127\n  -0.31233266 -0.14243567 -1.28899718 -1.00309356]\n [-0.75644157  0.69428128 -0.0808316  -0.66626054  0.29580764  0.20199303\n  -0.61375052  0.94347488  1.29170209  1.04648317]\n [-0.35751675 -0.06491881  0.91745478  0.09571235  0.61742622 -0.05539443\n   1.8991322  -0.18841091  0.10238608 -0.12179639]]", "y": "[-0.69989056  0.49672745  0.56830533 -0.24641573]"}, "kwargs": {"alpha": 10.0, "sample_weight": "[1.95608363 1.42385505 1.60639321 1.0191932 ]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.07001446  0.09335772  0.00742286  0.06033917  0.00027729  0.1214968\n -0.05409624  0.0928163   0.01438736  0.01031523]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.63214695 -0.68363216 -0.2372249  -0.06989471 -0.07227788 -0.28983698\n  -0.11731773 -0.50853039 -0.20501575  0.17022218]\n [ 0.15712849  0.2959436  -0.38722579  0.15311141 -0.81873354 -0.59217813\n  -0.66296815 -0.30292202 -1.03512856 -1.52649339]\n [-0.72419307  0.61871316  0.03168072 -0.33957799  0.44164611  0.6866306\n  -0.47292923  1.00790403  1.26254155  1.28248452]\n [-0.32526824 -0.14048693  1.0299671   0.42239491  0.76326469  0.42924313\n   2.03995349 -0.12398177  0.07322555  0.11420497]]", "y": "[-1.36717175  2.28987383 -0.09897586 -0.91369692]"}, "kwargs": {"alpha": 10.0, "sample_weight": "[1.95608363 1.6439902  1.60639321 1.0191932 ]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.1196785   0.23773025 -0.05889199  0.02510635 -0.16659624 -0.05284451\n -0.18931672  0.08327229 -0.1374518  -0.3256079 ]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.36484708 -0.52457621 -0.23527367 -0.52646495  0.122921   -0.42784004\n  -0.20262181 -0.22222802  0.44117402  0.69187348]\n [-0.11017138  0.45499954 -0.38527456 -0.30345883 -0.62353466 -0.73018118\n  -0.74827223 -0.01661965 -0.38893878 -1.00484209]\n [ 0.05013898  0.18202327  0.029412    1.09809218 -0.13499859  1.22236578\n  -0.25681545  0.20829585 -0.67196794 -0.24544089]\n [-0.59256811  0.01856901  1.03191833 -0.03417533  0.95846357  0.29124008\n   1.95464941  0.1623206   0.71941532  0.63585628]]", "y": "[-1.35329653  2.30374905 -0.15667852 -0.8998217 ]"}, "kwargs": {"alpha": 10.0, "sample_weight": "[1.95608363 1.6439902  1.42385505 1.0191932 ]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.09274517  0.20021827 -0.05517824 -0.01232136 -0.17283169 -0.13893961\n -0.14341249  0.02931013 -0.15607043 -0.36445072]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.51397802 -0.7101596  -0.08479863 -0.33882763  0.11595845 -0.51599287\n   0.23308969 -0.51083668  0.08931331  0.3525097 ]\n [ 0.03895956  0.26941616 -0.23479951 -0.11582152 -0.63049721 -0.81833401\n  -0.31256073 -0.3052283  -0.7407995  -1.34420587]\n [ 0.19926992 -0.00356011  0.17988705  1.28572949 -0.14196114  1.13421296\n   0.17889605 -0.08031281 -1.02382865 -0.58480467]\n [-0.842362    0.59218572  0.18410699 -0.60851091  0.62988244  0.46047471\n  -0.12252181  1.00559775  1.55687062  1.46477205]]", "y": "[-1.47099625  2.18604933 -0.27437824 -0.20280036]"}, "kwargs": {"alpha": 10.0, "sample_weight": "[1.95608363 1.6439902  1.42385505 1.60639321]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.13747707  0.23443927 -0.0390802  -0.03364565 -0.14527024 -0.11830278\n -0.13523392  0.07434454 -0.09455971 -0.31527493]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.57305995 -0.68790722 -0.24233636 -0.35927434 -0.01081603 -0.54305146\n  -0.08539318 -0.49401052  0.04034169  0.31300614]\n [ 0.09804149  0.29166854 -0.39233725 -0.13626823 -0.75727169 -0.84539261\n  -0.6310436  -0.28840215 -0.78977112 -1.38370943]\n [ 0.25835185  0.01869227  0.02234932  1.26528278 -0.26873562  1.10715436\n  -0.13958682 -0.06348665 -1.07280027 -0.62430824]\n [-0.78328007  0.6144381   0.02656926 -0.62895762  0.50310795  0.43341612\n  -0.44100468  1.0224239   1.507899    1.42526849]\n [-0.38435524 -0.14476199  1.02485565  0.13301527  0.82472654  0.17602865\n   2.07187804 -0.1094619   0.31858299  0.25698893]]", "y": "[-1.33542545  2.32162013 -0.13880744 -0.06722956 -0.88195062]"}, "kwargs": {"alpha": 0.1, "sample_weight": "[1.95608363 1.6439902  1.42385505 1.60639321 1.0191932 ]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.72759074  0.97657546  0.04850773 -0.2298173  -0.33959923 -0.41462624\n -0.18145061  0.40564753 -0.08247607 -0.9925607 ]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "int", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.52825097  0.04935469  0.45388097]\n [ 0.49806474 -0.04653438 -0.42794452]]", "y": "[ 0.41782714 -0.39395094]"}, "kwargs": {"alpha": 1, "sample_weight": "[1.2204062 1.2943714]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.24274881  0.02268012  0.20857333]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "int", "sample_weight": "float", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.51315785  0.04794454  0.44091275]\n [ 0.51315785 -0.04794454 -0.44091275]]", "y": "[ 0.40588904 -0.40588904]"}, "kwargs": {"alpha": 1, "sample_weight": 1.0, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.21695608  0.02027029  0.18641184]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "int", "sample_weight": "float", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.51315785  0.04794454  0.44091275]\n [ 0.51315785 -0.04794454 -0.44091275]]", "y": "[ 0.40588904 -0.40588904]"}, "kwargs": {"alpha": 1, "sample_weight": 2.0, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.29334544  0.02740738  0.2520467 ]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "int", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.12438937  0.64758742]\n [ 0.58099059 -0.79996307]\n [-1.38588951  0.55102965]]", "y": "[-0.59607134  0.73100711 -0.49126429]"}, "kwargs": {"alpha": 1, "sample_weight": "[2.99460174 3.14812631 1.05097494]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.17482659 -0.6194724 ]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "int", "sample_weight": "float", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.18537339  0.51470276]\n [ 0.89075336 -0.93284774]\n [-1.07612675  0.41814498]]", "y": "[-0.47729517  0.84978329 -0.37248812]"}, "kwargs": {"alpha": 1, "sample_weight": 1.0, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.19200021 -0.41841294]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "int", "sample_weight": "float", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.18537339  0.51470276]\n [ 0.89075336 -0.93284774]\n [-1.07612675  0.41814498]]", "y": "[-0.47729517  0.84978329 -0.37248812]"}, "kwargs": {"alpha": 1, "sample_weight": 2.0, "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.16799898 -0.54971905]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [2, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2]", "indptr": "[0 3 6]", "data": "[ 0.49671415 -0.1382643   0.64768854  1.52302986 -0.23415337 -0.23413696]"}, "y": "[1.57921282 0.76743473]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.2204062 1.2943714]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.56546787 -0.15101598  0.66263507]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 0.49671415 -0.1382643   0.64768854]\n [ 1.52302986 -0.23415337 -0.23413696]]", "y": "[1.57921282 0.76743473]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.2204062 1.2943714]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.56546787 -0.15101598  0.66263507]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [2, 3], "maxprint": 50, "indices": "[0 1 0 1 0 1]", "indptr": "[0 2 4 6]", "data": "[ 0.49671415  1.52302986 -0.1382643  -0.23415337  0.64768854 -0.23413696]"}, "y": "[1.57921282 0.76743473]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[1.2204062 1.2943714]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.56546787 -0.15101598  0.66263507]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [3, 2], "maxprint": 50, "indices": "[0 1 0 1 0 1]", "indptr": "[0 2 4 6]", "data": "[-0.46341769 -0.46572975  0.24196227 -1.91328024 -1.72491783 -0.56228753]"}, "y": "[-1.01283112  0.31424733 -0.90802408]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[2.99460174 3.14812631 1.05097494]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.6645169 -0.0060724]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[-0.46341769 -0.46572975]\n [ 0.24196227 -1.91328024]\n [-1.72491783 -0.56228753]]", "y": "[-1.01283112  0.31424733 -0.90802408]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[2.99460174 3.14812631 1.05097494]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.6645169 -0.0060724]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}, "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "np.ndarray[float64]", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": {"_shape": [3, 2], "maxprint": 50, "indices": "[0 1 2 0 1 2]", "indptr": "[0 3 6]", "data": "[-0.46341769  0.24196227 -1.72491783 -0.46572975 -1.91328024 -0.56228753]"}, "y": "[-1.01283112  0.31424733 -0.90802408]"}, "kwargs": {"alpha": 1.0, "sample_weight": "[2.99460174 3.14812631 1.05097494]", "max_iter": null, "tol": 0.001, "solver": "auto", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[ 0.6645169 -0.0060724]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 2.2211962  -0.43283874  0.63531923  1.680388    0.93305176]\n [-0.520134    0.11709249 -0.49477595 -0.66372406 -0.5239077 ]\n [ 0.60118747  0.6212775   0.41761896 -0.4388302  -0.490643  ]\n [ 0.7908182   0.66108316 -0.548577   -0.2474375  -1.788602  ]\n [-2.095846   -0.17937738  0.52101743 -1.3026702   1.3352485 ]\n [-0.9972218  -0.7872374  -0.5306026   0.972274    0.53485256]]", "y": "[ 0.57611996  0.79933506 -0.4666132  -1.559624    0.07326037  0.5775215 ]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "svd", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.03352292 -0.28829998 -0.15873477  0.09433471  0.37841797]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 2.2211962  -0.43283868  0.63531922  1.68038799  0.93305176]\n [-0.52013403  0.11709253 -0.49477597 -0.66372406 -0.52390773]\n [ 0.60118743  0.62127762  0.41761896 -0.43883019 -0.490643  ]\n [ 0.79081818  0.66108319 -0.54857703 -0.24743751 -1.78860197]\n [-2.09584596 -0.17937729  0.52101743 -1.30267023  1.33524839]\n [-0.99722182 -0.78723737 -0.53060261  0.972274    0.53485254]]", "y": "[ 0.57612     0.79933509 -0.46661317 -1.55962389  0.07326043  0.57752154]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "svd", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.03352293 -0.28830017 -0.15873461  0.09433474  0.37841805]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 2.2211962  -0.43283874  0.63531923  1.680388    0.93305176]\n [-0.520134    0.11709249 -0.49477595 -0.66372406 -0.5239077 ]\n [ 0.60118747  0.6212775   0.41761896 -0.4388302  -0.490643  ]\n [ 0.7908182   0.66108316 -0.548577   -0.2474375  -1.788602  ]\n [-2.095846   -0.17937738  0.52101743 -1.3026702   1.3352485 ]\n [-0.9972218  -0.7872374  -0.5306026   0.972274    0.53485256]]", "y": "[ 0.57611996  0.79933506 -0.4666132  -1.559624    0.07326037  0.5775215 ]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "sparse_cg", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.03347581 -0.28948918 -0.15810706  0.09406275  0.377834  ]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 2.2211962  -0.43283868  0.63531922  1.68038799  0.93305176]\n [-0.52013403  0.11709253 -0.49477597 -0.66372406 -0.52390773]\n [ 0.60118743  0.62127762  0.41761896 -0.43883019 -0.490643  ]\n [ 0.79081818  0.66108319 -0.54857703 -0.24743751 -1.78860197]\n [-2.09584596 -0.17937729  0.52101743 -1.30267023  1.33524839]\n [-0.99722182 -0.78723737 -0.53060261  0.972274    0.53485254]]", "y": "[ 0.57612     0.79933509 -0.46661317 -1.55962389  0.07326043  0.57752154]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "sparse_cg", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.0334758  -0.28948909 -0.15810704  0.09406273  0.37783385]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 2.2211962  -0.43283874  0.63531923  1.680388    0.93305176]\n [-0.520134    0.11709249 -0.49477595 -0.66372406 -0.5239077 ]\n [ 0.60118747  0.6212775   0.41761896 -0.4388302  -0.490643  ]\n [ 0.7908182   0.66108316 -0.548577   -0.2474375  -1.788602  ]\n [-2.095846   -0.17937738  0.52101743 -1.3026702   1.3352485 ]\n [-0.9972218  -0.7872374  -0.5306026   0.972274    0.53485256]]", "y": "[ 0.57611996  0.79933506 -0.4666132  -1.559624    0.07326037  0.5775215 ]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.0335229  -0.28830025 -0.1587346   0.09433472  0.378418  ]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 2.2211962  -0.43283868  0.63531922  1.68038799  0.93305176]\n [-0.52013403  0.11709253 -0.49477597 -0.66372406 -0.52390773]\n [ 0.60118743  0.62127762  0.41761896 -0.43883019 -0.490643  ]\n [ 0.79081818  0.66108319 -0.54857703 -0.24743751 -1.78860197]\n [-2.09584596 -0.17937729  0.52101743 -1.30267023  1.33524839]\n [-0.99722182 -0.78723737 -0.53060261  0.972274    0.53485254]]", "y": "[ 0.57612     0.79933509 -0.46661317 -1.55962389  0.07326043  0.57752154]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.03352293 -0.28830017 -0.15873461  0.09433474  0.37841805]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'list of 1 int']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 2.2211962  -0.43283874  0.63531923  1.680388    0.93305176]\n [-0.520134    0.11709249 -0.49477595 -0.66372406 -0.5239077 ]\n [ 0.60118747  0.6212775   0.41761896 -0.4388302  -0.490643  ]\n [ 0.7908182   0.66108316 -0.548577   -0.2474375  -1.788602  ]\n [-2.095846   -0.17937738  0.52101743 -1.3026702   1.3352485 ]\n [-0.9972218  -0.7872374  -0.5306026   0.972274    0.53485256]]", "y": "[ 0.57611996  0.79933506 -0.4666132  -1.559624    0.07326037  0.5775215 ]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "lsqr", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.03347582 -0.28948918 -0.15810701  0.09406271  0.37783375]", "[4]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'list of 1 int']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 2.2211962  -0.43283868  0.63531922  1.68038799  0.93305176]\n [-0.52013403  0.11709253 -0.49477597 -0.66372406 -0.52390773]\n [ 0.60118743  0.62127762  0.41761896 -0.43883019 -0.490643  ]\n [ 0.79081818  0.66108319 -0.54857703 -0.24743751 -1.78860197]\n [-2.09584596 -0.17937729  0.52101743 -1.30267023  1.33524839]\n [-0.99722182 -0.78723737 -0.53060261  0.972274    0.53485254]]", "y": "[ 0.57612     0.79933509 -0.46661317 -1.55962389  0.07326043  0.57752154]"}, "kwargs": {"alpha": 1.0, "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "lsqr", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[-0.0334758  -0.28948909 -0.15810704  0.09406273  0.37783385]", "[4]"]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "list of 2 float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 1.0308349  -0.2989592   0.39564168  1.5008316   1.7024839  -0.3016234\n   1.5228118 ]\n [-0.8845748  -0.80233526 -0.17249781 -0.59601796  1.2891994   1.4366922\n   0.69439834]\n [-0.2893543  -0.36544207  0.9109828  -0.94521976  0.14799353 -0.17844129\n  -1.9802663 ]\n [-0.07959896  0.1653198  -1.3252614   1.5296931  -1.6194398   0.721413\n   0.38553947]\n [ 0.7995617   0.7702424  -0.4281489  -0.361899   -1.0528599  -1.3051419\n   0.22481117]\n [-0.57686853  0.53117424  0.6192835  -1.1273884  -0.46737692 -0.37289852\n  -0.8472946 ]]", "y": "[[-0.6247891   1.7368218 ]\n [ 0.5718289  -0.6520279 ]\n [-0.17131424  0.56353676]\n [-0.5324167  -0.4266939 ]\n [ 0.18601453  0.17294891]\n [ 0.57067597 -1.3945858 ]]"}, "kwargs": {"alpha": [1.0, 0.5], "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[-0.17012294  0.10981896 -0.02997932 -0.3814778   0.00182424  0.0193838\n   0.16740191]\n [ 0.7161099  -0.4734823  -0.03696492  0.38877216  0.36090904 -0.28975374\n  -0.29627112]]", null]}, "name": "_ridge_regression"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"X": "np.ndarray[float64]", "y": "np.ndarray[float64]"}, "kwargs": {"alpha": "list of 2 float", "sample_weight": "null value in the ground truth", "max_iter": "null value in the ground truth", "tol": "float", "solver": "str", "random_state": "null value in the ground truth", "return_n_iter": "bool", "return_intercept": "bool"}}, "return": "list of different types containing 2 elements ['np.ndarray[float64]', 'null value in the ground truth']"}, "values": {"inputs": {"self": {}, "args": {"X": "[[ 1.03083482 -0.29895918  0.39564168  1.50083173  1.70248382 -0.30162341\n   1.5228118 ]\n [-0.88457473 -0.80233524 -0.1724978  -0.5960179   1.28919934  1.43669219\n   0.6943984 ]\n [-0.28935429 -0.36544206  0.91098277 -0.94521974  0.14799353 -0.17844127\n  -1.98026643]\n [-0.07959893  0.16531981 -1.32526132  1.52969315 -1.61943985  0.72141299\n   0.38553954]\n [ 0.79956169  0.77024238 -0.42814888 -0.36189895 -1.05285992 -1.305142\n   0.22481124]\n [-0.57686856  0.53117429  0.61928355 -1.12738829 -0.46737692 -0.3728985\n  -0.84729455]]", "y": "[[-0.62478898  1.73682181]\n [ 0.57182903 -0.65202788]\n [-0.17131415  0.56353678]\n [-0.53241663 -0.42669386]\n [ 0.18601465  0.17294892]\n [ 0.57067608 -1.39458576]]"}, "kwargs": {"alpha": [1.0, 0.5], "sample_weight": null, "max_iter": null, "tol": 0.001, "solver": "cholesky", "random_state": null, "return_n_iter": true, "return_intercept": false}}, "return": ["[[-0.17012296  0.10981898 -0.02997931 -0.38147777  0.00182421  0.01938381\n   0.16740192]\n [ 0.71610991 -0.4734824  -0.03696502  0.38877214  0.36090903 -0.28975375\n  -0.2962712 ]]", null]}, "name": "_ridge_regression"}
