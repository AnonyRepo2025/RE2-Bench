{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "null value in the ground truth"}, "kwargs": {"ensure_2d": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": null}, "kwargs": {"ensure_2d": false}}, "return": "[0 1 2]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"allow_nd": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[[0 1]\n  [2 3]]\n\n [[4 5]\n  [6 7]]]"}, "kwargs": {"allow_nd": true}}, "return": "[[[0 1]\n  [2 3]]\n\n [[4 5]\n  [6 7]]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "C", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "C", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "F", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "F", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": null, "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": null, "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": null, "order": "C", "copy": true}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": null, "order": "C", "copy": false}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": null, "order": "F", "copy": true}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": null, "order": "F", "copy": false}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": null, "order": null, "copy": true}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": null, "order": null, "copy": false}}, "return": "[[ 0.  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 0.  1.]\n [ 2.  3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[ 1.  2.  3.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[ 1.  2.  3.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[bool_]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[ True  True  True]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[bool_]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[ True  True  True]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[float64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[ 2.  1.  3.]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[float64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[ 2.  1.  3.]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[bool_]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[ True  True  True]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[bool_]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[ True  True  True]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "dtype": "str"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "dtype": "int64"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "dtype": "str"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "dtype": "int64"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_getitem": "bool"}, "accept_sparse": "null value in the ground truth"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"_getitem": false}, "accept_sparse": null}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "copy": true, "force_all_finite": true, "ensure_2d": false}}, "return": "[[ 0.  1.  2.  3.  4.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]]"}, "kwargs": {"order": "C", "copy": true}}, "return": "[[ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]]"}, "kwargs": {"order": "F", "copy": true}}, "return": "[[ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]]"}, "kwargs": {"order": "C", "copy": false}}, "return": "[[ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]]"}, "kwargs": {"order": "F", "copy": false}}, "return": "[[ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]"}, "kwargs": {"order": "C", "copy": true}}, "return": "[[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]"}, "kwargs": {"order": "F", "copy": true}}, "return": "[[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]"}, "kwargs": {"order": "C", "copy": false}}, "return": "[[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]"}, "kwargs": {"order": "F", "copy": false}}, "return": "[[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "str"}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ inf   1.]\n [  2.   3.]]"}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": "[[ inf   1.]\n [  2.   3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float]"}, "kwargs": {"force_all_finite": "str", "accept_sparse": "bool"}}, "return": "np.ndarray[float]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ nan   1.]\n [  2.   3.]]"}, "kwargs": {"force_all_finite": "allow-nan", "accept_sparse": true}}, "return": "[[ nan   1.]\n [  2.   3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float]"}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": "np.ndarray[float]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ nan   1.]\n [  2.   3.]]"}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": "[[ nan   1.]\n [  2.   3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "str", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "str", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[ inf   1.   2.   3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[ inf   1.   2.   3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "kwargs": {"force_all_finite": "str", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[ nan   1.   2.   3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "kwargs": {"force_all_finite": "allow-nan", "accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[ nan   1.   2.   3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[ nan   1.   2.   3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[ nan   1.   2.   3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[int64]", "values": "np.ndarray[int64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[int64]"}}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "values": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "shape": [3, 3], "ndim": 2, "iloc": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}}}, "kwargs": {}}, "return": "[[ 1.  2.  3.]\n [ 4.  5.  6.]\n [ 7.  8.  9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[int64]", "values": "np.ndarray[int64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[int64]"}}}, "kwargs": {"ensure_2d": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "values": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "shape": [3, 3], "ndim": 2, "iloc": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}}}, "kwargs": {"ensure_2d": false}}, "return": "[[ 1.  2.  3.]\n [ 4.  5.  6.]\n [ 7.  8.  9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[int64]", "values": "np.ndarray[int64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[int64]"}, "dtype": "str"}}, "kwargs": {"ensure_2d": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "values": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "shape": [3, 3], "ndim": 2, "iloc": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "dtype": "Hans"}}, "kwargs": {"ensure_2d": false}}, "return": "[[ 1.  2.  3.]\n [ 4.  5.  6.]\n [ 7.  8.  9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[float64]", "values": "np.ndarray[float64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[float64]"}}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[ 0.2  0.7]\n [ 0.6  0.5]\n [ 0.4  0.1]\n [ 0.7  0.2]]", "values": "[[ 0.2  0.7]\n [ 0.6  0.5]\n [ 0.4  0.1]\n [ 0.7  0.2]]", "shape": [4, 2], "ndim": 2, "iloc": {"array": "[[ 0.2  0.7]\n [ 0.6  0.5]\n [ 0.4  0.1]\n [ 0.7  0.2]]"}}}, "kwargs": {}}, "return": "[[ 0.2  0.7]\n [ 0.6  0.5]\n [ 0.4  0.1]\n [ 0.7  0.2]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[float64]", "values": "np.ndarray[float64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[float64]"}}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[ 0.2  0.7]\n [ 0.6  0.5]\n [ 0.4  0.1]\n [ 0.7  0.2]]", "values": "[[ 0.2  0.7]\n [ 0.6  0.5]\n [ 0.4  0.1]\n [ 0.7  0.2]]", "shape": [4, 2], "ndim": 2, "iloc": {"array": "[[ 0.2  0.7]\n [ 0.6  0.5]\n [ 0.4  0.1]\n [ 0.7  0.2]]"}}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}}}, "return": "[[ 0.2  0.7]\n [ 0.6  0.5]\n [ 0.4  0.1]\n [ 0.7  0.2]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "null value in the ground truth"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": null}, "kwargs": {}}, "return": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true}}, "return": "[[ 1.  2.  3.]\n [ 4.  5.  6.]\n [ 7.  8.  9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": "[[ 1.  2.  3.]\n [ 4.  5.  6.]\n [ 7.  8.  9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool", "warn_on_dtype": "bool", "estimator": "str"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "kwargs": {"dtype": null, "accept_sparse": true, "warn_on_dtype": true, "estimator": "SomeEstimator"}}, "return": "[[ 1.  2.  3.]\n [ 4.  5.  6.]\n [ 7.  8.  9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]", "accept_sparse": "bool", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": {"n_neighbors": "int", "radius": "null value in the ground truth", "algorithm": "str", "leaf_size": "int", "metric": "str", "metric_params": "null value in the ground truth", "p": "int", "n_jobs": "int", "weights": "str"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "accept_sparse": true, "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": true, "estimator": {"n_neighbors": 5, "radius": null, "algorithm": "auto", "leaf_size": 30, "metric": "minkowski", "metric_params": null, "p": 2, "n_jobs": 1, "weights": "uniform"}}, "kwargs": {}}, "return": "[[ 1.  2.  3.]\n [ 4.  5.  6.]\n [ 7.  8.  9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[ 1.  4.  7.  2.  5.  8.  3.  6.  9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[ 1.  4.  7.  2.  5.  8.  3.  6.  9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool", "warn_on_dtype": "bool", "estimator": "str"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": null, "accept_sparse": true, "warn_on_dtype": true, "estimator": "SomeEstimator"}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[ 1.  4.  7.  2.  5.  8.  3.  6.  9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}, "accept_sparse": "bool", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": {"n_neighbors": "int", "radius": "null value in the ground truth", "algorithm": "str", "leaf_size": "int", "metric": "str", "metric_params": "null value in the ground truth", "p": "int", "n_jobs": "int", "weights": "str"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "_has_canonical_format": true, "_has_sorted_indices": true}, "accept_sparse": true, "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": true, "estimator": {"n_neighbors": 5, "radius": null, "algorithm": "auto", "leaf_size": 30, "metric": "minkowski", "metric_params": null, "p": 2, "n_jobs": 1, "weights": "uniform"}}, "kwargs": {}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[ 1.  4.  7.  2.  5.  8.  3.  6.  9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 1.  2.  3.]\n [ 4.  5.  6.]\n [ 7.  8.  9.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": "[[ 1.  2.  3.]\n [ 4.  5.  6.]\n [ 7.  8.  9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 1.  2.  3.]\n [ 4.  5.  6.]\n [ 7.  8.  9.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": false}}, "return": "[[ 1.  2.  3.]\n [ 4.  5.  6.]\n [ 7.  8.  9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[ 1.  2.  3.  4.  5.  6.  7.  8.  9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[ 1.  2.  3.  4.  5.  6.  7.  8.  9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[ 1.  2.  3.  4.  5.  6.  7.  8.  9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": false}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[ 1.  2.  3.  4.  5.  6.  7.  8.  9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 1.  2.  3.]\n [ 4.  5.  6.]\n [ 7.  8.  9.]]"}, "kwargs": {"dtype": null, "accept_sparse": true}}, "return": "[[ 1.  2.  3.]\n [ 4.  5.  6.]\n [ 7.  8.  9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 1.  2.  3.]\n [ 4.  5.  6.]\n [ 7.  8.  9.]]"}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": "[[ 1.  2.  3.]\n [ 4.  5.  6.]\n [ 7.  8.  9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[ 1.  2.  3.  4.  5.  6.  7.  8.  9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[ 1.  2.  3.  4.  5.  6.  7.  8.  9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[ 1.  2.  3.  4.  5.  6.  7.  8.  9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[ 1.  2.  3.  4.  5.  6.  7.  8.  9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[ 1.  4.  7.  2.  5.  8.  3.  6.  9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[ 1.  4.  7.  2.  5.  8.  3.  6.  9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[ 1.  4.  7.  2.  5.  8.  3.  6.  9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[ 1.  2.  3.  4.  5.  6.  7.  8.  9.]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[ 1.  4.  7.  2.  5.  8.  3.  6.  9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": false}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[ 1.  2.  3.  4.  5.  6.  7.  8.  9.]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "null value in the ground truth"}, "kwargs": {"accept_sparse": "null value in the ground truth"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": null}, "kwargs": {"accept_sparse": null}}, "return": "[[1 2]\n [3 4]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "str"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": "csr"}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "null value in the ground truth"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": null}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "list of 1 str"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": ["csr"]}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "in ground truth values, it is an empty list", "accept_sparse": "bool", "dtype": "str", "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": "null value in the ground truth"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "in ground truth values, it is an empty list"}, "values": {"inputs": {"self": {}, "args": {"array": "[]", "accept_sparse": false, "dtype": "numeric", "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": true, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": false, "estimator": null}, "kwargs": {}}, "return": "[]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]", "accept_sparse": "bool", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": "null value in the ground truth"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[  5.00586796  -6.9531193 ]\n [  2.15709312   9.61917009]\n [ -6.00885834  -2.49889906]\n [ -2.21309017  -1.82744336]\n [  5.4629372   -7.52416494]\n [  5.82599476  -4.86908368]\n [  3.99293638  -6.07081237]\n [ -5.16102434  -2.84294797]\n [ -5.22985919  -2.45091625]\n [  1.82552014   9.28369554]\n [  3.82603825  -9.60292499]\n [  1.79540072  10.40962274]\n [  5.89945458  -7.21314079]\n [  2.26272206   9.14147082]\n [  3.55058613   9.01572503]\n [ -2.76110641  -1.86481338]\n [  2.6066406   10.997303  ]\n [ -2.28320851  -3.42586698]\n [  2.78172931   9.27521056]\n [  3.59379771  -7.34695551]\n [ -5.50428473  -2.82007969]\n [ -5.14517572  -3.98093104]\n [  2.00733388   8.80764378]\n [ -4.53910922  -3.93498382]\n [  1.88534849   9.70470504]\n [  5.31594177  -6.1905337 ]\n [  4.02513847  -7.23828353]\n [ -4.6471571   -3.00669128]\n [  0.10349328  11.06499706]\n [  4.79082762  -5.52713087]\n [  5.08293544  -6.33033938]\n [  2.25069547   8.0353249 ]\n [ -3.92464963  -3.72973005]\n [  4.61161454  -8.09888641]\n [ -4.59622827  -3.01392903]\n [  3.35774888  11.66875079]\n [ -2.63583649  -0.54598752]\n [  2.81386592  10.52516457]\n [  3.20906626  10.98509702]\n [ -4.80525517  -4.71362747]\n [  3.46534951   8.60047544]\n [  4.90502846  -7.95201221]\n [  6.27692843  -8.40500073]\n [ -3.06057035  -3.61833141]\n [  3.61310565  -7.26726071]\n [ -3.24314838  -2.51779277]\n [  2.23165306   9.46063523]\n [  5.60644356  -7.37062148]\n [  2.02488532  10.22393893]\n [ -4.45757104  -3.70223563]\n [ -3.83856479  -2.80509105]\n [ -5.31735104  -2.39467954]\n [  4.80202424  -7.0021211 ]\n [  1.7980931    9.13563414]\n [ -3.47544149  -2.51767275]\n [  3.16573011  -7.4692826 ]\n [ -4.58587461  -3.23371606]\n [  5.9047654   -9.11829085]\n [  0.82672809   9.97342745]\n [  0.83942984  10.17547358]\n [ -4.66815146  -2.85970813]\n [ -4.86316917  -0.36497801]\n [ -4.26916099  -2.0881862 ]\n [  1.3295435   10.53684645]\n [  2.7360252   -7.38894014]\n [  5.35423856  -7.52532525]\n [ -3.6112794   -1.81317722]\n [  1.87021856   8.60072964]\n [  4.76891241   7.48914372]\n [  2.57418116   8.55031598]\n [  4.27400073  -7.05581225]\n [  4.70043581   9.62408006]\n [  2.1993548    8.35534496]\n [ -5.00454579  -3.65188146]\n [  5.11284151  -6.654457  ]\n [ -3.88516241  -2.47505056]\n [ -3.43780986  -3.45607576]\n [  4.71791805  -7.80701146]\n [  3.88872286  -7.61657008]\n [  1.66876861   9.24607681]\n [  4.23246365  -8.30006277]\n [ -2.89555844  -1.15251812]\n [ -2.62004245  -2.12802929]\n [  4.80370741  -7.56170275]\n [ -2.4995181   -3.66484623]\n [  3.44012125  10.42193299]\n [ -4.81802459  -3.6566317 ]\n [  3.00722451   9.19990093]\n [  3.03516115  -6.42027592]\n [  2.99905377  10.81808852]\n [  4.88995568  -9.08921609]\n [  3.14342894   9.14237478]\n [  6.56887233  -6.13579251]\n [  4.71102384  -8.78024589]\n [  4.58583564  -8.17775604]\n [  3.3596776   -8.30061102]\n [ -2.42912708  -2.84585068]\n [  2.67560607   9.32555318]\n [  1.30805969   8.45037655]\n [ -1.31794714  -1.76886123]]", "accept_sparse": false, "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 2, "ensure_min_features": 1, "warn_on_dtype": false, "estimator": null}, "kwargs": {}}, "return": "[[  5.00586796  -6.9531193 ]\n [  2.15709312   9.61917009]\n [ -6.00885834  -2.49889906]\n [ -2.21309017  -1.82744336]\n [  5.4629372   -7.52416494]\n [  5.82599476  -4.86908368]\n [  3.99293638  -6.07081237]\n [ -5.16102434  -2.84294797]\n [ -5.22985919  -2.45091625]\n [  1.82552014   9.28369554]\n [  3.82603825  -9.60292499]\n [  1.79540072  10.40962274]\n [  5.89945458  -7.21314079]\n [  2.26272206   9.14147082]\n [  3.55058613   9.01572503]\n [ -2.76110641  -1.86481338]\n [  2.6066406   10.997303  ]\n [ -2.28320851  -3.42586698]\n [  2.78172931   9.27521056]\n [  3.59379771  -7.34695551]\n [ -5.50428473  -2.82007969]\n [ -5.14517572  -3.98093104]\n [  2.00733388   8.80764378]\n [ -4.53910922  -3.93498382]\n [  1.88534849   9.70470504]\n [  5.31594177  -6.1905337 ]\n [  4.02513847  -7.23828353]\n [ -4.6471571   -3.00669128]\n [  0.10349328  11.06499706]\n [  4.79082762  -5.52713087]\n [  5.08293544  -6.33033938]\n [  2.25069547   8.0353249 ]\n [ -3.92464963  -3.72973005]\n [  4.61161454  -8.09888641]\n [ -4.59622827  -3.01392903]\n [  3.35774888  11.66875079]\n [ -2.63583649  -0.54598752]\n [  2.81386592  10.52516457]\n [  3.20906626  10.98509702]\n [ -4.80525517  -4.71362747]\n [  3.46534951   8.60047544]\n [  4.90502846  -7.95201221]\n [  6.27692843  -8.40500073]\n [ -3.06057035  -3.61833141]\n [  3.61310565  -7.26726071]\n [ -3.24314838  -2.51779277]\n [  2.23165306   9.46063523]\n [  5.60644356  -7.37062148]\n [  2.02488532  10.22393893]\n [ -4.45757104  -3.70223563]\n [ -3.83856479  -2.80509105]\n [ -5.31735104  -2.39467954]\n [  4.80202424  -7.0021211 ]\n [  1.7980931    9.13563414]\n [ -3.47544149  -2.51767275]\n [  3.16573011  -7.4692826 ]\n [ -4.58587461  -3.23371606]\n [  5.9047654   -9.11829085]\n [  0.82672809   9.97342745]\n [  0.83942984  10.17547358]\n [ -4.66815146  -2.85970813]\n [ -4.86316917  -0.36497801]\n [ -4.26916099  -2.0881862 ]\n [  1.3295435   10.53684645]\n [  2.7360252   -7.38894014]\n [  5.35423856  -7.52532525]\n [ -3.6112794   -1.81317722]\n [  1.87021856   8.60072964]\n [  4.76891241   7.48914372]\n [  2.57418116   8.55031598]\n [  4.27400073  -7.05581225]\n [  4.70043581   9.62408006]\n [  2.1993548    8.35534496]\n [ -5.00454579  -3.65188146]\n [  5.11284151  -6.654457  ]\n [ -3.88516241  -2.47505056]\n [ -3.43780986  -3.45607576]\n [  4.71791805  -7.80701146]\n [  3.88872286  -7.61657008]\n [  1.66876861   9.24607681]\n [  4.23246365  -8.30006277]\n [ -2.89555844  -1.15251812]\n [ -2.62004245  -2.12802929]\n [  4.80370741  -7.56170275]\n [ -2.4995181   -3.66484623]\n [  3.44012125  10.42193299]\n [ -4.81802459  -3.6566317 ]\n [  3.00722451   9.19990093]\n [  3.03516115  -6.42027592]\n [  2.99905377  10.81808852]\n [  4.88995568  -9.08921609]\n [  3.14342894   9.14237478]\n [  6.56887233  -6.13579251]\n [  4.71102384  -8.78024589]\n [  4.58583564  -8.17775604]\n [  3.3596776   -8.30061102]\n [ -2.42912708  -2.84585068]\n [  2.67560607   9.32555318]\n [  1.30805969   8.45037655]\n [ -1.31794714  -1.76886123]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"copy": "bool", "accept_sparse": "null value in the ground truth", "dtype": "list of 3 {'__repr__': 'str', '__hash__': 'str', '__str__': 'str', '__lt__': 'str', '__le__': 'str', '__eq__': 'str', '__ne__': 'str', '__gt__': 'str', '__ge__': 'str', '__add__': 'str', '__radd__': 'str', '__sub__': 'str', '__rsub__': 'str', '__mul__': 'str', '__rmul__': 'str', '__mod__': 'str', '__rmod__': 'str', '__divmod__': 'str', '__rdivmod__': 'str', '__pow__': 'str', '__rpow__': 'str', '__neg__': 'str', '__pos__': 'str', '__abs__': 'str', '__bool__': 'str', '__int__': 'str', '__float__': 'str', '__floordiv__': 'str', '__rfloordiv__': 'str', '__truediv__': 'str', '__rtruediv__': 'str', '__new__': 'str', 'as_integer_ratio': 'str', '__doc__': 'null value in the ground truth'}"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[  5.00586796  -6.9531193 ]\n [  2.15709312   9.61917009]\n [ -6.00885834  -2.49889906]\n [ -2.21309017  -1.82744336]\n [  5.4629372   -7.52416494]\n [  5.82599476  -4.86908368]\n [  3.99293638  -6.07081237]\n [ -5.16102434  -2.84294797]\n [ -5.22985919  -2.45091625]\n [  1.82552014   9.28369554]\n [  3.82603825  -9.60292499]\n [  1.79540072  10.40962274]\n [  5.89945458  -7.21314079]\n [  2.26272206   9.14147082]\n [  3.55058613   9.01572503]\n [ -2.76110641  -1.86481338]\n [  2.6066406   10.997303  ]\n [ -2.28320851  -3.42586698]\n [  2.78172931   9.27521056]\n [  3.59379771  -7.34695551]\n [ -5.50428473  -2.82007969]\n [ -5.14517572  -3.98093104]\n [  2.00733388   8.80764378]\n [ -4.53910922  -3.93498382]\n [  1.88534849   9.70470504]\n [  5.31594177  -6.1905337 ]\n [  4.02513847  -7.23828353]\n [ -4.6471571   -3.00669128]\n [  0.10349328  11.06499706]\n [  4.79082762  -5.52713087]\n [  5.08293544  -6.33033938]\n [  2.25069547   8.0353249 ]\n [ -3.92464963  -3.72973005]\n [  4.61161454  -8.09888641]\n [ -4.59622827  -3.01392903]\n [  3.35774888  11.66875079]\n [ -2.63583649  -0.54598752]\n [  2.81386592  10.52516457]\n [  3.20906626  10.98509702]\n [ -4.80525517  -4.71362747]\n [  3.46534951   8.60047544]\n [  4.90502846  -7.95201221]\n [  6.27692843  -8.40500073]\n [ -3.06057035  -3.61833141]\n [  3.61310565  -7.26726071]\n [ -3.24314838  -2.51779277]\n [  2.23165306   9.46063523]\n [  5.60644356  -7.37062148]\n [  2.02488532  10.22393893]\n [ -4.45757104  -3.70223563]\n [ -3.83856479  -2.80509105]\n [ -5.31735104  -2.39467954]\n [  4.80202424  -7.0021211 ]\n [  1.7980931    9.13563414]\n [ -3.47544149  -2.51767275]\n [  3.16573011  -7.4692826 ]\n [ -4.58587461  -3.23371606]\n [  5.9047654   -9.11829085]\n [  0.82672809   9.97342745]\n [  0.83942984  10.17547358]\n [ -4.66815146  -2.85970813]\n [ -4.86316917  -0.36497801]\n [ -4.26916099  -2.0881862 ]\n [  1.3295435   10.53684645]\n [  2.7360252   -7.38894014]\n [  5.35423856  -7.52532525]\n [ -3.6112794   -1.81317722]\n [  1.87021856   8.60072964]\n [  4.76891241   7.48914372]\n [  2.57418116   8.55031598]\n [  4.27400073  -7.05581225]\n [  4.70043581   9.62408006]\n [  2.1993548    8.35534496]\n [ -5.00454579  -3.65188146]\n [  5.11284151  -6.654457  ]\n [ -3.88516241  -2.47505056]\n [ -3.43780986  -3.45607576]\n [  4.71791805  -7.80701146]\n [  3.88872286  -7.61657008]\n [  1.66876861   9.24607681]\n [  4.23246365  -8.30006277]\n [ -2.89555844  -1.15251812]\n [ -2.62004245  -2.12802929]\n [  4.80370741  -7.56170275]\n [ -2.4995181   -3.66484623]\n [  3.44012125  10.42193299]\n [ -4.81802459  -3.6566317 ]\n [  3.00722451   9.19990093]\n [  3.03516115  -6.42027592]\n [  2.99905377  10.81808852]\n [  4.88995568  -9.08921609]\n [  3.14342894   9.14237478]\n [  6.56887233  -6.13579251]\n [  4.71102384  -8.78024589]\n [  4.58583564  -8.17775604]\n [  3.3596776   -8.30061102]\n [ -2.42912708  -2.84585068]\n [  2.67560607   9.32555318]\n [  1.30805969   8.45037655]\n [ -1.31794714  -1.76886123]]"}, "kwargs": {"copy": true, "accept_sparse": null, "dtype": [{"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}]}}, "return": "[[  5.00586796  -6.9531193 ]\n [  2.15709312   9.61917009]\n [ -6.00885834  -2.49889906]\n [ -2.21309017  -1.82744336]\n [  5.4629372   -7.52416494]\n [  5.82599476  -4.86908368]\n [  3.99293638  -6.07081237]\n [ -5.16102434  -2.84294797]\n [ -5.22985919  -2.45091625]\n [  1.82552014   9.28369554]\n [  3.82603825  -9.60292499]\n [  1.79540072  10.40962274]\n [  5.89945458  -7.21314079]\n [  2.26272206   9.14147082]\n [  3.55058613   9.01572503]\n [ -2.76110641  -1.86481338]\n [  2.6066406   10.997303  ]\n [ -2.28320851  -3.42586698]\n [  2.78172931   9.27521056]\n [  3.59379771  -7.34695551]\n [ -5.50428473  -2.82007969]\n [ -5.14517572  -3.98093104]\n [  2.00733388   8.80764378]\n [ -4.53910922  -3.93498382]\n [  1.88534849   9.70470504]\n [  5.31594177  -6.1905337 ]\n [  4.02513847  -7.23828353]\n [ -4.6471571   -3.00669128]\n [  0.10349328  11.06499706]\n [  4.79082762  -5.52713087]\n [  5.08293544  -6.33033938]\n [  2.25069547   8.0353249 ]\n [ -3.92464963  -3.72973005]\n [  4.61161454  -8.09888641]\n [ -4.59622827  -3.01392903]\n [  3.35774888  11.66875079]\n [ -2.63583649  -0.54598752]\n [  2.81386592  10.52516457]\n [  3.20906626  10.98509702]\n [ -4.80525517  -4.71362747]\n [  3.46534951   8.60047544]\n [  4.90502846  -7.95201221]\n [  6.27692843  -8.40500073]\n [ -3.06057035  -3.61833141]\n [  3.61310565  -7.26726071]\n [ -3.24314838  -2.51779277]\n [  2.23165306   9.46063523]\n [  5.60644356  -7.37062148]\n [  2.02488532  10.22393893]\n [ -4.45757104  -3.70223563]\n [ -3.83856479  -2.80509105]\n [ -5.31735104  -2.39467954]\n [  4.80202424  -7.0021211 ]\n [  1.7980931    9.13563414]\n [ -3.47544149  -2.51767275]\n [  3.16573011  -7.4692826 ]\n [ -4.58587461  -3.23371606]\n [  5.9047654   -9.11829085]\n [  0.82672809   9.97342745]\n [  0.83942984  10.17547358]\n [ -4.66815146  -2.85970813]\n [ -4.86316917  -0.36497801]\n [ -4.26916099  -2.0881862 ]\n [  1.3295435   10.53684645]\n [  2.7360252   -7.38894014]\n [  5.35423856  -7.52532525]\n [ -3.6112794   -1.81317722]\n [  1.87021856   8.60072964]\n [  4.76891241   7.48914372]\n [  2.57418116   8.55031598]\n [  4.27400073  -7.05581225]\n [  4.70043581   9.62408006]\n [  2.1993548    8.35534496]\n [ -5.00454579  -3.65188146]\n [  5.11284151  -6.654457  ]\n [ -3.88516241  -2.47505056]\n [ -3.43780986  -3.45607576]\n [  4.71791805  -7.80701146]\n [  3.88872286  -7.61657008]\n [  1.66876861   9.24607681]\n [  4.23246365  -8.30006277]\n [ -2.89555844  -1.15251812]\n [ -2.62004245  -2.12802929]\n [  4.80370741  -7.56170275]\n [ -2.4995181   -3.66484623]\n [  3.44012125  10.42193299]\n [ -4.81802459  -3.6566317 ]\n [  3.00722451   9.19990093]\n [  3.03516115  -6.42027592]\n [  2.99905377  10.81808852]\n [  4.88995568  -9.08921609]\n [  3.14342894   9.14237478]\n [  6.56887233  -6.13579251]\n [  4.71102384  -8.78024589]\n [  4.58583564  -8.17775604]\n [  3.3596776   -8.30061102]\n [ -2.42912708  -2.84585068]\n [  2.67560607   9.32555318]\n [  1.30805969   8.45037655]\n [ -1.31794714  -1.76886123]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]", "accept_sparse": "str", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": "null value in the ground truth"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[  2.71492297  -4.31334448]\n [  5.2613556    2.01725732]\n [  2.96585808  -4.62805423]\n [  0.80767773  -3.95809604]\n [  3.02803139  -5.10831036]\n [  4.38070244   3.31735884]\n [  5.0589075    3.1319467 ]\n [  3.35603343  -3.20045225]\n [  2.55489095  -4.94904453]\n [  2.82568519  -4.52223136]\n [ -0.27316307  -3.12449896]\n [  2.88989072  -4.42451719]\n [  5.2701648    3.5643367 ]\n [  2.81425686  -8.76519624]\n [  4.46307281   3.2036134 ]\n [  1.20195595  -3.25613099]\n [  2.51529345   4.18078085]\n [  2.19838683  -5.09277095]\n [  3.204702    -8.99245106]\n [  3.64402612 -10.98229488]\n [  1.75107796  -2.54533007]\n [  3.09676221  -5.8658401 ]\n [  1.66366012  -5.13553132]\n [  1.53818674   2.36467322]\n [  3.72089519   2.33904763]\n [  0.68720198  -2.33898189]\n [  2.24277702  -4.82870292]\n [  1.98159706  -2.27622831]\n [  3.48523844  -6.07112871]\n [  4.88526537   1.63630112]\n [  2.58419593  -3.91862424]\n [  3.70055911  -9.2500785 ]\n [  3.46103165  -4.810556  ]\n [  4.01439431  -5.99445656]\n [  2.93908996   3.37215024]\n [  3.2996552  -10.48320122]\n [  3.50391091   3.98805419]\n [  2.9436637   -3.98988455]\n [  4.09727782  -8.8627297 ]\n [  3.80760843   5.84371533]\n [  2.58625795  -9.67341974]\n [  4.21987633  -9.19561855]\n [  2.96775786  -9.12846641]\n [  3.176768    -9.5158556 ]\n [  4.48784443   3.32555019]\n [  4.85594119  -9.16430178]\n [  2.33862215  -9.44473847]\n [  3.7675005  -11.08947123]\n [  2.44724938  -3.74579609]\n [  1.84099103  -4.62973777]\n [  3.61083267  -8.37601576]\n [  2.02326836 -10.27921447]\n [  2.66549396  -7.95273894]\n [  4.7325536    3.23367474]\n [  2.91816051  -3.64995752]\n [  4.87676359   2.52324299]\n [  3.94993804   4.71954794]\n [  4.42474914   2.31566587]\n [  2.78655396  -4.33672539]\n [  3.71670258  -9.29382306]\n [  4.19238454   4.61358314]\n [  4.68056418   1.29572859]\n [  3.86565503  -9.33675562]\n [  5.88751117   2.63372401]\n [  3.49918308  -2.84414275]\n [  4.00583386  -9.32519583]\n [  2.3188649   -9.70635571]\n [  3.26261246  -8.10632059]\n [  3.97396329   2.56186628]\n [  2.73290616   2.9345822 ]\n [  3.54376621   4.90473527]\n [  4.07432998   1.58120293]\n [  3.56604543  -9.91446618]\n [  2.14248334  -5.5607929 ]\n [  3.35375596  -3.69297679]\n [  3.79652515  -8.97105507]\n [  3.86654552  -9.66470663]\n [  2.38000088  -8.38484242]\n [  2.15726975  -8.33271917]\n [  3.10845684   4.00811002]\n [  2.20350202  -2.90441986]\n [  4.34934514   4.37192738]\n [  1.79284917  -6.75111423]\n [  4.09014936  -9.46281993]\n [  4.30105209  -9.03374209]\n [  3.38932399   1.64763867]\n [  1.7329529   -4.80520776]\n [  4.22132545   3.6758112 ]\n [  3.52942453   4.43023097]\n [  3.62380006  -8.363413  ]\n [  0.70075773  -4.59336263]\n [  1.4855198   -4.98825507]\n [  3.29236186 -11.20188654]\n [  4.34815746   3.47645662]\n [  4.31524409   4.45300604]\n [  4.18384176   4.91453393]\n [  2.03885691  -8.64218295]\n [  2.47065389  -5.08516268]\n [  3.27566323   2.92627735]\n [  5.48427943  -8.43356096]]", "accept_sparse": "csr", "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": false, "estimator": null}, "kwargs": {}}, "return": "[[  2.71492297  -4.31334448]\n [  5.2613556    2.01725732]\n [  2.96585808  -4.62805423]\n [  0.80767773  -3.95809604]\n [  3.02803139  -5.10831036]\n [  4.38070244   3.31735884]\n [  5.0589075    3.1319467 ]\n [  3.35603343  -3.20045225]\n [  2.55489095  -4.94904453]\n [  2.82568519  -4.52223136]\n [ -0.27316307  -3.12449896]\n [  2.88989072  -4.42451719]\n [  5.2701648    3.5643367 ]\n [  2.81425686  -8.76519624]\n [  4.46307281   3.2036134 ]\n [  1.20195595  -3.25613099]\n [  2.51529345   4.18078085]\n [  2.19838683  -5.09277095]\n [  3.204702    -8.99245106]\n [  3.64402612 -10.98229488]\n [  1.75107796  -2.54533007]\n [  3.09676221  -5.8658401 ]\n [  1.66366012  -5.13553132]\n [  1.53818674   2.36467322]\n [  3.72089519   2.33904763]\n [  0.68720198  -2.33898189]\n [  2.24277702  -4.82870292]\n [  1.98159706  -2.27622831]\n [  3.48523844  -6.07112871]\n [  4.88526537   1.63630112]\n [  2.58419593  -3.91862424]\n [  3.70055911  -9.2500785 ]\n [  3.46103165  -4.810556  ]\n [  4.01439431  -5.99445656]\n [  2.93908996   3.37215024]\n [  3.2996552  -10.48320122]\n [  3.50391091   3.98805419]\n [  2.9436637   -3.98988455]\n [  4.09727782  -8.8627297 ]\n [  3.80760843   5.84371533]\n [  2.58625795  -9.67341974]\n [  4.21987633  -9.19561855]\n [  2.96775786  -9.12846641]\n [  3.176768    -9.5158556 ]\n [  4.48784443   3.32555019]\n [  4.85594119  -9.16430178]\n [  2.33862215  -9.44473847]\n [  3.7675005  -11.08947123]\n [  2.44724938  -3.74579609]\n [  1.84099103  -4.62973777]\n [  3.61083267  -8.37601576]\n [  2.02326836 -10.27921447]\n [  2.66549396  -7.95273894]\n [  4.7325536    3.23367474]\n [  2.91816051  -3.64995752]\n [  4.87676359   2.52324299]\n [  3.94993804   4.71954794]\n [  4.42474914   2.31566587]\n [  2.78655396  -4.33672539]\n [  3.71670258  -9.29382306]\n [  4.19238454   4.61358314]\n [  4.68056418   1.29572859]\n [  3.86565503  -9.33675562]\n [  5.88751117   2.63372401]\n [  3.49918308  -2.84414275]\n [  4.00583386  -9.32519583]\n [  2.3188649   -9.70635571]\n [  3.26261246  -8.10632059]\n [  3.97396329   2.56186628]\n [  2.73290616   2.9345822 ]\n [  3.54376621   4.90473527]\n [  4.07432998   1.58120293]\n [  3.56604543  -9.91446618]\n [  2.14248334  -5.5607929 ]\n [  3.35375596  -3.69297679]\n [  3.79652515  -8.97105507]\n [  3.86654552  -9.66470663]\n [  2.38000088  -8.38484242]\n [  2.15726975  -8.33271917]\n [  3.10845684   4.00811002]\n [  2.20350202  -2.90441986]\n [  4.34934514   4.37192738]\n [  1.79284917  -6.75111423]\n [  4.09014936  -9.46281993]\n [  4.30105209  -9.03374209]\n [  3.38932399   1.64763867]\n [  1.7329529   -4.80520776]\n [  4.22132545   3.6758112 ]\n [  3.52942453   4.43023097]\n [  3.62380006  -8.363413  ]\n [  0.70075773  -4.59336263]\n [  1.4855198   -4.98825507]\n [  3.29236186 -11.20188654]\n [  4.34815746   3.47645662]\n [  4.31524409   4.45300604]\n [  4.18384176   4.91453393]\n [  2.03885691  -8.64218295]\n [  2.47065389  -5.08516268]\n [  3.27566323   2.92627735]\n [  5.48427943  -8.43356096]]"}, "name": "check_array"}
