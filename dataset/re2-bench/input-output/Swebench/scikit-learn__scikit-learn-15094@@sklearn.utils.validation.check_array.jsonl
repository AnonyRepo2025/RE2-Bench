{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "null value in the ground truth"}, "kwargs": {"ensure_2d": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": null}, "kwargs": {"ensure_2d": false}}, "return": "[0 1 2]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"allow_nd": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[[0 1]\n  [2 3]]\n\n [[4 5]\n  [6 7]]]"}, "kwargs": {"allow_nd": true}}, "return": "[[[0 1]\n  [2 3]]\n\n [[4 5]\n  [6 7]]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "C", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "C", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "F", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "F", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": null, "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": null, "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": "C", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": "C", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": "F", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": "F", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": null, "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": null, "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1. 2. 3.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1. 2. 3.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[bool_]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[ True  True  True]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[bool_]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[ True  True  True]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[float64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2. 1. 3.]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[float64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2. 1. 3.]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[bool_]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[ True  True  True]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[bool_]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[ True  True  True]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "dtype": "str"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "dtype": "int64"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "dtype": "str"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "dtype": "int64"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_getitem": "bool"}, "accept_sparse": "null value in the ground truth"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"_getitem": false}, "accept_sparse": null}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "copy": true, "force_all_finite": true, "ensure_2d": false}}, "return": "[[0. 1. 2. 3. 4.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "C", "copy": true}}, "return": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "F", "copy": true}}, "return": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "C", "copy": false}}, "return": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "F", "copy": false}}, "return": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "C", "copy": true}}, "return": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "F", "copy": true}}, "return": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "C", "copy": false}}, "return": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "F", "copy": false}}, "return": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "str"}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"array": "[[inf  1.]\n [ 2.  3.]]"}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": "[[inf  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float]"}, "kwargs": {"force_all_finite": "str", "accept_sparse": "bool"}}, "return": "np.ndarray[float]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[nan  1.]\n [ 2.  3.]]"}, "kwargs": {"force_all_finite": "allow-nan", "accept_sparse": true}}, "return": "[[nan  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float]"}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": "np.ndarray[float]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[nan  1.]\n [ 2.  3.]]"}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": "[[nan  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "str", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "str", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[inf  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[inf  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "kwargs": {"force_all_finite": "str", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[nan  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "kwargs": {"force_all_finite": "allow-nan", "accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[nan  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[nan  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[nan  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[str]"}, "kwargs": {"dtype": "null value in the ground truth", "force_all_finite": "str"}}, "return": "np.ndarray[str]"}, "values": {"inputs": {"self": {}, "args": {"array": "[['a']\n ['b']\n [nan]]"}, "kwargs": {"dtype": null, "force_all_finite": "allow-nan"}}, "return": "[['a']\n ['b']\n [nan]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[str]"}, "kwargs": {"dtype": "null value in the ground truth", "force_all_finite": "bool"}}, "return": "np.ndarray[str]"}, "values": {"inputs": {"self": {}, "args": {"array": "[['a']\n ['b']\n [nan]]"}, "kwargs": {"dtype": null, "force_all_finite": false}}, "return": "[['a']\n ['b']\n [nan]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[int64]", "values": "np.ndarray[int64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[int64]"}}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "values": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "shape": [3, 3], "ndim": 2, "iloc": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}}}, "kwargs": {}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[int64]", "values": "np.ndarray[int64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[int64]"}}}, "kwargs": {"ensure_2d": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "values": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "shape": [3, 3], "ndim": 2, "iloc": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}}}, "kwargs": {"ensure_2d": false}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[int64]", "values": "np.ndarray[int64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[int64]"}, "dtype": "str"}}, "kwargs": {"ensure_2d": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "values": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "shape": [3, 3], "ndim": 2, "iloc": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "dtype": "Hans"}}, "kwargs": {"ensure_2d": false}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_is_copy": "null value in the ground truth", "_mgr": "in ground truth values, it is an empty dict", "_item_cache": "in ground truth values, it is an empty dict", "_attrs": "in ground truth values, it is an empty dict"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"_is_copy": null, "_mgr": {}, "_item_cache": {}, "_attrs": {}}}, "kwargs": {}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_is_copy": "null value in the ground truth", "_mgr": "in ground truth values, it is an empty dict", "_item_cache": "in ground truth values, it is an empty dict", "_attrs": "in ground truth values, it is an empty dict"}}, "kwargs": {"dtype": "list of 3 {'__repr__': 'str', '__hash__': 'str', '__str__': 'str', '__lt__': 'str', '__le__': 'str', '__eq__': 'str', '__ne__': 'str', '__gt__': 'str', '__ge__': 'str', '__add__': 'str', '__radd__': 'str', '__sub__': 'str', '__rsub__': 'str', '__mul__': 'str', '__rmul__': 'str', '__mod__': 'str', '__rmod__': 'str', '__divmod__': 'str', '__rdivmod__': 'str', '__pow__': 'str', '__rpow__': 'str', '__neg__': 'str', '__pos__': 'str', '__abs__': 'str', '__bool__': 'str', '__int__': 'str', '__float__': 'str', '__floordiv__': 'str', '__rfloordiv__': 'str', '__truediv__': 'str', '__rtruediv__': 'str', '__new__': 'str', 'as_integer_ratio': 'str', '__doc__': 'null value in the ground truth'}"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"_is_copy": null, "_mgr": {}, "_item_cache": {}, "_attrs": {}}}, "kwargs": {"dtype": [{"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}]}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[float64]", "values": "np.ndarray[float64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[float64]"}}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]", "values": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]", "shape": [4, 2], "ndim": 2, "iloc": {"array": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]"}}}, "kwargs": {}}, "return": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[float64]", "values": "np.ndarray[float64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[float64]"}}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]", "values": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]", "shape": [4, 2], "ndim": 2, "iloc": {"array": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]"}}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}}}, "return": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "null value in the ground truth"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": null}, "kwargs": {}}, "return": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool", "warn_on_dtype": "bool", "estimator": "str"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "kwargs": {"dtype": null, "accept_sparse": true, "warn_on_dtype": true, "estimator": "SomeEstimator"}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"accept_sparse": "bool", "accept_large_sparse": "bool", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": {"n_neighbors": "int", "radius": "null value in the ground truth", "algorithm": "str", "leaf_size": "int", "metric": "str", "metric_params": "null value in the ground truth", "p": "int", "n_jobs": "null value in the ground truth", "weights": "str"}}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "kwargs": {"accept_sparse": true, "accept_large_sparse": true, "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": true, "estimator": {"n_neighbors": 5, "radius": null, "algorithm": "auto", "leaf_size": 30, "metric": "minkowski", "metric_params": null, "p": 2, "n_jobs": null, "weights": "uniform"}}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool", "warn_on_dtype": "bool", "estimator": "str"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": null, "accept_sparse": true, "warn_on_dtype": true, "estimator": "SomeEstimator"}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"accept_sparse": "bool", "accept_large_sparse": "bool", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": {"n_neighbors": "int", "radius": "null value in the ground truth", "algorithm": "str", "leaf_size": "int", "metric": "str", "metric_params": "null value in the ground truth", "p": "int", "n_jobs": "null value in the ground truth", "weights": "str"}}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"accept_sparse": true, "accept_large_sparse": true, "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": true, "estimator": {"n_neighbors": 5, "radius": null, "algorithm": "auto", "leaf_size": 30, "metric": "minkowski", "metric_params": null, "p": 2, "n_jobs": null, "weights": "uniform"}}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": false}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": false}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "kwargs": {"dtype": null, "accept_sparse": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": false}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0.]\n [1.]]"}, "kwargs": {"warn_on_dtype": true}}, "return": "[[0.]\n [1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"accept_sparse": "bool", "accept_large_sparse": "bool", "dtype": "str", "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0.]\n [1.]]"}, "kwargs": {"accept_sparse": false, "accept_large_sparse": true, "dtype": "numeric", "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": true, "estimator": null}}, "return": "[[0.]\n [1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "str"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": "csr"}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "null value in the ground truth"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": null}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "list of 1 str"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": ["csr"]}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"accept_large_sparse": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [20, 10], "maxprint": 50, "indices": "[5 6]", "indptr": "[0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2]", "data": "[0.27501389 0.93263991]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"accept_large_sparse": true, "accept_sparse": true}}, "return": {"_shape": [20, 10], "maxprint": 50, "indices": "[5 6]", "indptr": "[0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2]", "data": "[0.27501389 0.93263991]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"accept_large_sparse": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [20, 10], "maxprint": 50, "indices": "[17 18]", "indptr": "[0 0 0 0 0 0 2 2 2 2 2]", "data": "[0.99539949 0.21819057]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"accept_large_sparse": true, "accept_sparse": true}}, "return": {"_shape": [20, 10], "maxprint": 50, "indices": "[17 18]", "indptr": "[0 0 0 0 0 0 2 2 2 2 2]", "data": "[0.99539949 0.21819057]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[float64]", "has_canonical_format": "bool"}}, "kwargs": {"accept_large_sparse": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[float64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [20, 10], "maxprint": 50, "row": "[ 0 13]", "col": "[8 1]", "data": "[0.39871558 0.6386271 ]", "has_canonical_format": false}}, "kwargs": {"accept_large_sparse": true, "accept_sparse": true}}, "return": {"_shape": [20, 10], "maxprint": 50, "row": "[ 0 13]", "col": "[8 1]", "data": "[0.39871558 0.6386271 ]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "kwargs": {"accept_large_sparse": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [20, 10], "maxprint": 50, "indices": "[6 9]", "indptr": "[0 0 0 0 0 0 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2]", "data": "[[[0.04655913]]\n\n [[0.30379334]]]"}}, "kwargs": {"accept_large_sparse": true, "accept_sparse": true}}, "return": {"_shape": [20, 10], "maxprint": 50, "indices": "[6 9]", "indptr": "[0 0 0 0 0 0 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2]", "data": "[[[0.04655913]]\n\n [[0.30379334]]]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "in ground truth values, it is an empty list"}, "kwargs": {"accept_sparse": "bool", "accept_large_sparse": "bool", "dtype": "str", "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "null value in the ground truth", "estimator": "null value in the ground truth"}}, "return": "in ground truth values, it is an empty list"}, "values": {"inputs": {"self": {}, "args": {"array": "[]"}, "kwargs": {"accept_sparse": false, "accept_large_sparse": true, "dtype": "numeric", "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": true, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": null, "estimator": null}}, "return": "[]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"accept_sparse": "bool", "accept_large_sparse": "bool", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "null value in the ground truth", "estimator": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ -8.85788791  -9.45834997]\n [  8.80330568  -4.91516128]\n [ -5.81874799  -9.21223813]\n [ 10.00262291  -3.2363928 ]\n [ -7.61769466 -10.48866972]\n [  4.49459244  -7.77910199]\n [  6.76957886  -7.14933403]\n [  9.03872868  -3.3458086 ]\n [ 10.73464346  -4.93830493]\n [  6.4405371   -6.78690495]\n [  9.78389361  -3.5745563 ]\n [  6.43051416  -8.48288088]\n [ -4.89970373  -6.75693862]\n [  9.84028682  -3.44868339]\n [  6.21716643  -6.70867569]\n [ -5.33963047  -7.19581106]\n [ -7.17561428  -9.61207811]\n [ -7.57267833 -10.3101812 ]\n [  6.11689542  -7.08047609]\n [ -6.1904485   -9.91354959]\n [  9.34366662  -1.71762697]\n [ -6.84436546  -7.44941346]\n [  6.91904894  -6.01130463]\n [ -5.36288193  -8.31703312]\n [  6.70811581  -5.75679933]\n [ 11.46781026  -3.98313842]\n [ -6.46697929  -8.17074059]\n [ 10.44657964  -4.72264704]\n [  4.85275405  -9.74294892]\n [  7.24659255  -8.17631788]\n [  5.49660295  -7.51995541]\n [  5.34823369  -6.05716819]\n [ -5.77174905  -9.66231391]\n [ -7.2287203  -10.17371278]\n [  5.48171931  -7.40552041]\n [ -7.85204924  -9.89513793]\n [  5.36926045  -6.86540382]\n [ -7.13770564  -7.65120066]\n [  8.15336102  -1.8002428 ]\n [  5.93507007  -6.81352062]\n [ -6.04598138  -7.8274012 ]\n [ 10.31402364  -3.14213243]\n [  5.75716286  -9.11875255]\n [  9.83468021  -3.35648129]\n [ 11.16883979  -2.22569349]\n [  9.81773399  -3.95796836]\n [  5.63409112  -7.19222146]\n [ -7.60321015  -8.42955183]\n [ 10.5481794   -3.65596097]\n [ -6.39741292  -8.69355411]\n [  6.1117209   -8.60297505]\n [  6.7451575   -8.38845564]\n [ 10.47296765  -4.6681102 ]\n [ 11.32528144  -5.05868052]\n [  6.69229007  -6.20524855]\n [  6.83796725  -8.25575461]\n [ -6.96118098  -7.60428031]\n [  6.30454     -6.83953407]\n [ -6.73497942  -9.27016964]\n [  5.80723743  -5.34916832]\n [  6.4560536   -7.39522013]\n [ -8.74060531  -8.08657456]\n [ -5.58288447 -10.86052663]\n [  8.66376615  -4.8245332 ]\n [ 10.9946716   -3.16671481]\n [  9.04816135  -1.79513737]\n [  8.567304    -2.54433792]\n [ -6.32355021  -8.64701595]\n [  9.12645486  -5.84678892]\n [  7.77320381  -8.46697014]\n [ -4.99522935 -10.55222505]\n [  8.02671817  -6.90036487]\n [  7.28833748  -5.58308075]\n [  6.36989087  -3.97941667]\n [  9.20663524  -2.17799598]\n [  9.77528896  -2.43472612]\n [ -5.47677596  -7.70660368]\n [ -5.05123416  -7.34968051]\n [ -6.6034602   -8.62927276]\n [  8.99161315  -6.28521973]\n [  6.45408742  -5.0820557 ]\n [ 10.94731722  -2.49145062]\n [  8.93882486  -5.2450072 ]\n [  5.49718283  -8.5814781 ]\n [ -5.92629244  -9.86287629]\n [ -6.4367552   -8.37476585]\n [  9.62752813  -4.82980814]\n [  9.92447217  -4.94196849]\n [  8.74718034  -3.78637862]\n [  6.43680123  -7.59942444]\n [  3.31610623  -5.95104615]\n [ -6.72358183  -9.3973022 ]\n [ -7.47117439  -7.05653984]\n [ -6.12278097  -9.31345799]\n [  9.70797213  -2.90317095]\n [  6.35834609  -5.83563396]\n [  7.95609149  -7.67327743]\n [  9.12915078  -2.06397368]\n [ 11.93407091  -2.41613892]\n [ -5.86812785  -7.89975831]]"}, "kwargs": {"accept_sparse": false, "accept_large_sparse": true, "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 2, "ensure_min_features": 1, "warn_on_dtype": null, "estimator": null}}, "return": "[[ -8.85788791  -9.45834997]\n [  8.80330568  -4.91516128]\n [ -5.81874799  -9.21223813]\n [ 10.00262291  -3.2363928 ]\n [ -7.61769466 -10.48866972]\n [  4.49459244  -7.77910199]\n [  6.76957886  -7.14933403]\n [  9.03872868  -3.3458086 ]\n [ 10.73464346  -4.93830493]\n [  6.4405371   -6.78690495]\n [  9.78389361  -3.5745563 ]\n [  6.43051416  -8.48288088]\n [ -4.89970373  -6.75693862]\n [  9.84028682  -3.44868339]\n [  6.21716643  -6.70867569]\n [ -5.33963047  -7.19581106]\n [ -7.17561428  -9.61207811]\n [ -7.57267833 -10.3101812 ]\n [  6.11689542  -7.08047609]\n [ -6.1904485   -9.91354959]\n [  9.34366662  -1.71762697]\n [ -6.84436546  -7.44941346]\n [  6.91904894  -6.01130463]\n [ -5.36288193  -8.31703312]\n [  6.70811581  -5.75679933]\n [ 11.46781026  -3.98313842]\n [ -6.46697929  -8.17074059]\n [ 10.44657964  -4.72264704]\n [  4.85275405  -9.74294892]\n [  7.24659255  -8.17631788]\n [  5.49660295  -7.51995541]\n [  5.34823369  -6.05716819]\n [ -5.77174905  -9.66231391]\n [ -7.2287203  -10.17371278]\n [  5.48171931  -7.40552041]\n [ -7.85204924  -9.89513793]\n [  5.36926045  -6.86540382]\n [ -7.13770564  -7.65120066]\n [  8.15336102  -1.8002428 ]\n [  5.93507007  -6.81352062]\n [ -6.04598138  -7.8274012 ]\n [ 10.31402364  -3.14213243]\n [  5.75716286  -9.11875255]\n [  9.83468021  -3.35648129]\n [ 11.16883979  -2.22569349]\n [  9.81773399  -3.95796836]\n [  5.63409112  -7.19222146]\n [ -7.60321015  -8.42955183]\n [ 10.5481794   -3.65596097]\n [ -6.39741292  -8.69355411]\n [  6.1117209   -8.60297505]\n [  6.7451575   -8.38845564]\n [ 10.47296765  -4.6681102 ]\n [ 11.32528144  -5.05868052]\n [  6.69229007  -6.20524855]\n [  6.83796725  -8.25575461]\n [ -6.96118098  -7.60428031]\n [  6.30454     -6.83953407]\n [ -6.73497942  -9.27016964]\n [  5.80723743  -5.34916832]\n [  6.4560536   -7.39522013]\n [ -8.74060531  -8.08657456]\n [ -5.58288447 -10.86052663]\n [  8.66376615  -4.8245332 ]\n [ 10.9946716   -3.16671481]\n [  9.04816135  -1.79513737]\n [  8.567304    -2.54433792]\n [ -6.32355021  -8.64701595]\n [  9.12645486  -5.84678892]\n [  7.77320381  -8.46697014]\n [ -4.99522935 -10.55222505]\n [  8.02671817  -6.90036487]\n [  7.28833748  -5.58308075]\n [  6.36989087  -3.97941667]\n [  9.20663524  -2.17799598]\n [  9.77528896  -2.43472612]\n [ -5.47677596  -7.70660368]\n [ -5.05123416  -7.34968051]\n [ -6.6034602   -8.62927276]\n [  8.99161315  -6.28521973]\n [  6.45408742  -5.0820557 ]\n [ 10.94731722  -2.49145062]\n [  8.93882486  -5.2450072 ]\n [  5.49718283  -8.5814781 ]\n [ -5.92629244  -9.86287629]\n [ -6.4367552   -8.37476585]\n [  9.62752813  -4.82980814]\n [  9.92447217  -4.94196849]\n [  8.74718034  -3.78637862]\n [  6.43680123  -7.59942444]\n [  3.31610623  -5.95104615]\n [ -6.72358183  -9.3973022 ]\n [ -7.47117439  -7.05653984]\n [ -6.12278097  -9.31345799]\n [  9.70797213  -2.90317095]\n [  6.35834609  -5.83563396]\n [  7.95609149  -7.67327743]\n [  9.12915078  -2.06397368]\n [ 11.93407091  -2.41613892]\n [ -5.86812785  -7.89975831]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"copy": "bool", "accept_sparse": "null value in the ground truth", "dtype": "list of 3 {'__repr__': 'str', '__hash__': 'str', '__str__': 'str', '__lt__': 'str', '__le__': 'str', '__eq__': 'str', '__ne__': 'str', '__gt__': 'str', '__ge__': 'str', '__add__': 'str', '__radd__': 'str', '__sub__': 'str', '__rsub__': 'str', '__mul__': 'str', '__rmul__': 'str', '__mod__': 'str', '__rmod__': 'str', '__divmod__': 'str', '__rdivmod__': 'str', '__pow__': 'str', '__rpow__': 'str', '__neg__': 'str', '__pos__': 'str', '__abs__': 'str', '__bool__': 'str', '__int__': 'str', '__float__': 'str', '__floordiv__': 'str', '__rfloordiv__': 'str', '__truediv__': 'str', '__rtruediv__': 'str', '__new__': 'str', 'as_integer_ratio': 'str', '__doc__': 'null value in the ground truth'}"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ -8.85788791  -9.45834997]\n [  8.80330568  -4.91516128]\n [ -5.81874799  -9.21223813]\n [ 10.00262291  -3.2363928 ]\n [ -7.61769466 -10.48866972]\n [  4.49459244  -7.77910199]\n [  6.76957886  -7.14933403]\n [  9.03872868  -3.3458086 ]\n [ 10.73464346  -4.93830493]\n [  6.4405371   -6.78690495]\n [  9.78389361  -3.5745563 ]\n [  6.43051416  -8.48288088]\n [ -4.89970373  -6.75693862]\n [  9.84028682  -3.44868339]\n [  6.21716643  -6.70867569]\n [ -5.33963047  -7.19581106]\n [ -7.17561428  -9.61207811]\n [ -7.57267833 -10.3101812 ]\n [  6.11689542  -7.08047609]\n [ -6.1904485   -9.91354959]\n [  9.34366662  -1.71762697]\n [ -6.84436546  -7.44941346]\n [  6.91904894  -6.01130463]\n [ -5.36288193  -8.31703312]\n [  6.70811581  -5.75679933]\n [ 11.46781026  -3.98313842]\n [ -6.46697929  -8.17074059]\n [ 10.44657964  -4.72264704]\n [  4.85275405  -9.74294892]\n [  7.24659255  -8.17631788]\n [  5.49660295  -7.51995541]\n [  5.34823369  -6.05716819]\n [ -5.77174905  -9.66231391]\n [ -7.2287203  -10.17371278]\n [  5.48171931  -7.40552041]\n [ -7.85204924  -9.89513793]\n [  5.36926045  -6.86540382]\n [ -7.13770564  -7.65120066]\n [  8.15336102  -1.8002428 ]\n [  5.93507007  -6.81352062]\n [ -6.04598138  -7.8274012 ]\n [ 10.31402364  -3.14213243]\n [  5.75716286  -9.11875255]\n [  9.83468021  -3.35648129]\n [ 11.16883979  -2.22569349]\n [  9.81773399  -3.95796836]\n [  5.63409112  -7.19222146]\n [ -7.60321015  -8.42955183]\n [ 10.5481794   -3.65596097]\n [ -6.39741292  -8.69355411]\n [  6.1117209   -8.60297505]\n [  6.7451575   -8.38845564]\n [ 10.47296765  -4.6681102 ]\n [ 11.32528144  -5.05868052]\n [  6.69229007  -6.20524855]\n [  6.83796725  -8.25575461]\n [ -6.96118098  -7.60428031]\n [  6.30454     -6.83953407]\n [ -6.73497942  -9.27016964]\n [  5.80723743  -5.34916832]\n [  6.4560536   -7.39522013]\n [ -8.74060531  -8.08657456]\n [ -5.58288447 -10.86052663]\n [  8.66376615  -4.8245332 ]\n [ 10.9946716   -3.16671481]\n [  9.04816135  -1.79513737]\n [  8.567304    -2.54433792]\n [ -6.32355021  -8.64701595]\n [  9.12645486  -5.84678892]\n [  7.77320381  -8.46697014]\n [ -4.99522935 -10.55222505]\n [  8.02671817  -6.90036487]\n [  7.28833748  -5.58308075]\n [  6.36989087  -3.97941667]\n [  9.20663524  -2.17799598]\n [  9.77528896  -2.43472612]\n [ -5.47677596  -7.70660368]\n [ -5.05123416  -7.34968051]\n [ -6.6034602   -8.62927276]\n [  8.99161315  -6.28521973]\n [  6.45408742  -5.0820557 ]\n [ 10.94731722  -2.49145062]\n [  8.93882486  -5.2450072 ]\n [  5.49718283  -8.5814781 ]\n [ -5.92629244  -9.86287629]\n [ -6.4367552   -8.37476585]\n [  9.62752813  -4.82980814]\n [  9.92447217  -4.94196849]\n [  8.74718034  -3.78637862]\n [  6.43680123  -7.59942444]\n [  3.31610623  -5.95104615]\n [ -6.72358183  -9.3973022 ]\n [ -7.47117439  -7.05653984]\n [ -6.12278097  -9.31345799]\n [  9.70797213  -2.90317095]\n [  6.35834609  -5.83563396]\n [  7.95609149  -7.67327743]\n [  9.12915078  -2.06397368]\n [ 11.93407091  -2.41613892]\n [ -5.86812785  -7.89975831]]"}, "kwargs": {"copy": true, "accept_sparse": null, "dtype": [{"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}]}}, "return": "[[ -8.85788791  -9.45834997]\n [  8.80330568  -4.91516128]\n [ -5.81874799  -9.21223813]\n [ 10.00262291  -3.2363928 ]\n [ -7.61769466 -10.48866972]\n [  4.49459244  -7.77910199]\n [  6.76957886  -7.14933403]\n [  9.03872868  -3.3458086 ]\n [ 10.73464346  -4.93830493]\n [  6.4405371   -6.78690495]\n [  9.78389361  -3.5745563 ]\n [  6.43051416  -8.48288088]\n [ -4.89970373  -6.75693862]\n [  9.84028682  -3.44868339]\n [  6.21716643  -6.70867569]\n [ -5.33963047  -7.19581106]\n [ -7.17561428  -9.61207811]\n [ -7.57267833 -10.3101812 ]\n [  6.11689542  -7.08047609]\n [ -6.1904485   -9.91354959]\n [  9.34366662  -1.71762697]\n [ -6.84436546  -7.44941346]\n [  6.91904894  -6.01130463]\n [ -5.36288193  -8.31703312]\n [  6.70811581  -5.75679933]\n [ 11.46781026  -3.98313842]\n [ -6.46697929  -8.17074059]\n [ 10.44657964  -4.72264704]\n [  4.85275405  -9.74294892]\n [  7.24659255  -8.17631788]\n [  5.49660295  -7.51995541]\n [  5.34823369  -6.05716819]\n [ -5.77174905  -9.66231391]\n [ -7.2287203  -10.17371278]\n [  5.48171931  -7.40552041]\n [ -7.85204924  -9.89513793]\n [  5.36926045  -6.86540382]\n [ -7.13770564  -7.65120066]\n [  8.15336102  -1.8002428 ]\n [  5.93507007  -6.81352062]\n [ -6.04598138  -7.8274012 ]\n [ 10.31402364  -3.14213243]\n [  5.75716286  -9.11875255]\n [  9.83468021  -3.35648129]\n [ 11.16883979  -2.22569349]\n [  9.81773399  -3.95796836]\n [  5.63409112  -7.19222146]\n [ -7.60321015  -8.42955183]\n [ 10.5481794   -3.65596097]\n [ -6.39741292  -8.69355411]\n [  6.1117209   -8.60297505]\n [  6.7451575   -8.38845564]\n [ 10.47296765  -4.6681102 ]\n [ 11.32528144  -5.05868052]\n [  6.69229007  -6.20524855]\n [  6.83796725  -8.25575461]\n [ -6.96118098  -7.60428031]\n [  6.30454     -6.83953407]\n [ -6.73497942  -9.27016964]\n [  5.80723743  -5.34916832]\n [  6.4560536   -7.39522013]\n [ -8.74060531  -8.08657456]\n [ -5.58288447 -10.86052663]\n [  8.66376615  -4.8245332 ]\n [ 10.9946716   -3.16671481]\n [  9.04816135  -1.79513737]\n [  8.567304    -2.54433792]\n [ -6.32355021  -8.64701595]\n [  9.12645486  -5.84678892]\n [  7.77320381  -8.46697014]\n [ -4.99522935 -10.55222505]\n [  8.02671817  -6.90036487]\n [  7.28833748  -5.58308075]\n [  6.36989087  -3.97941667]\n [  9.20663524  -2.17799598]\n [  9.77528896  -2.43472612]\n [ -5.47677596  -7.70660368]\n [ -5.05123416  -7.34968051]\n [ -6.6034602   -8.62927276]\n [  8.99161315  -6.28521973]\n [  6.45408742  -5.0820557 ]\n [ 10.94731722  -2.49145062]\n [  8.93882486  -5.2450072 ]\n [  5.49718283  -8.5814781 ]\n [ -5.92629244  -9.86287629]\n [ -6.4367552   -8.37476585]\n [  9.62752813  -4.82980814]\n [  9.92447217  -4.94196849]\n [  8.74718034  -3.78637862]\n [  6.43680123  -7.59942444]\n [  3.31610623  -5.95104615]\n [ -6.72358183  -9.3973022 ]\n [ -7.47117439  -7.05653984]\n [ -6.12278097  -9.31345799]\n [  9.70797213  -2.90317095]\n [  6.35834609  -5.83563396]\n [  7.95609149  -7.67327743]\n [  9.12915078  -2.06397368]\n [ 11.93407091  -2.41613892]\n [ -5.86812785  -7.89975831]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"accept_sparse": "str", "accept_large_sparse": "bool", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "null value in the ground truth", "estimator": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[-1.24573809e-01  3.70860551e+00]\n [-8.96766471e-01  8.25829397e+00]\n [ 3.00052857e+00  7.44744452e+00]\n [ 3.32900779e+00  9.62929786e+00]\n [ 1.43922970e+00  3.12222539e+00]\n [ 5.51337468e-01  7.67549258e+00]\n [-5.16588043e+00  8.81808303e+00]\n [ 1.73127606e+00  3.55511118e+00]\n [ 1.21528288e+00  3.25788304e+00]\n [-5.26396484e+00  8.25666817e+00]\n [ 1.75609458e-01  4.87745734e+00]\n [ 5.03346631e-01  2.48564138e+00]\n [ 6.44049793e-01  9.46945163e+00]\n [-5.22218621e+00  7.43665245e+00]\n [ 2.53602386e+00  7.12161132e+00]\n [ 2.03138708e+00  8.94039820e+00]\n [ 5.26444488e-01  7.10303657e+00]\n [ 6.75540708e-01  8.68799231e+00]\n [-5.80313013e+00  7.75224824e+00]\n [-4.91828000e+00  6.46172660e+00]\n [ 1.29042023e+00  8.39363888e+00]\n [ 3.86891424e-01  2.93545851e+00]\n [-5.45823143e+00  7.77731183e+00]\n [-3.61150309e-01  2.92449244e+00]\n [-5.73566523e-01  3.77641169e+00]\n [ 1.17700617e+00  7.75858544e+00]\n [-4.90292664e+00  8.87319754e+00]\n [ 1.08115471e+00  2.26551135e+00]\n [ 1.21348440e+00  4.05653548e+00]\n [ 1.68131368e+00  3.64793335e+00]\n [-3.68379510e-01  8.92892350e+00]\n [-4.88621465e+00  6.92659537e+00]\n [ 1.72415611e+00  3.48300011e+00]\n [-6.71174649e+00  7.71966632e+00]\n [ 3.17430231e+00  8.87968284e+00]\n [-6.33888802e+00  6.39007127e+00]\n [-5.69662944e+00  5.83574305e+00]\n [ 2.07484068e+00  8.00246366e+00]\n [-3.87479320e+00  6.62520023e+00]\n [ 8.75095930e-01  9.92526626e+00]\n [ 1.67566883e+00  8.37847925e+00]\n [-4.06536046e+00  8.72395142e+00]\n [-1.05688855e-01  2.80986602e+00]\n [ 9.79408707e-01  4.09242920e+00]\n [-4.79737837e+00  6.12654081e+00]\n [ 1.12733854e+00  2.91161358e+00]\n [-3.21111356e-01  2.43042822e-01]\n [ 7.68702371e-01  3.28032688e+00]\n [-5.02833871e+00  7.14046644e+00]\n [ 1.46875115e+00  3.50076769e+00]\n [ 1.03976874e+00  3.15104610e+00]\n [-2.56261850e-01  1.00279353e+00]\n [ 1.21295776e+00  7.68089687e+00]\n [-5.01313118e+00  6.94772184e+00]\n [ 3.46209936e-02  9.14402997e+00]\n [-5.23870864e+00  7.14532135e+00]\n [ 7.45628475e-01  7.59453798e+00]\n [-6.44246087e+00  8.89971050e+00]\n [-1.53358317e+00  8.88522992e+00]\n [ 3.15306363e+00  9.05681512e+00]\n [ 1.37240754e+00  9.49552678e+00]\n [-6.53321282e+00  7.82948003e+00]\n [ 4.58081337e-02  3.00000497e+00]\n [ 5.29879244e-01  3.26415778e-01]\n [ 1.04618107e+00  2.13993162e+00]\n [ 1.16193729e-01  2.67571995e+00]\n [ 6.39245158e-01  2.18147159e+00]\n [-3.62009617e+00  7.74085554e+00]\n [ 3.25947387e-03  8.79268503e+00]\n [ 1.02535822e+00  7.74801077e+00]\n [ 1.87360817e+00  8.64693221e+00]\n [ 2.39824932e+00  7.71693324e+00]\n [ 3.03617954e+00  8.06742034e+00]\n [-4.93100969e+00  6.99166397e+00]\n [-4.84984234e+00  6.39789644e+00]\n [ 2.43641741e+00  1.01040657e+01]\n [-1.43326124e-01  8.26649566e+00]\n [-4.66330371e+00  8.65859416e+00]\n [-4.94691271e+00  7.44661858e+00]\n [-7.46427461e+00  7.60737848e+00]\n [ 4.92806905e-01  7.91548611e+00]\n [-5.18175542e+00  6.76329449e+00]\n [-4.30808417e+00  7.64166535e+00]\n [ 3.76562277e-01  2.29322489e+00]\n [-4.49024781e+00  7.01960923e+00]\n [-4.57229286e+00  6.82654909e+00]\n [ 1.11023583e+00  5.09963580e+00]\n [ 7.83295875e-01  4.02427066e+00]\n [ 2.10703213e+00  9.36157514e+00]\n [-5.01075470e+00  7.05681993e+00]\n [-3.20958213e-01  2.58053972e+00]\n [-2.58947546e-01  1.76936558e+00]\n [-5.34348610e+00  8.09001289e+00]\n [-4.13261328e+00  7.55498573e+00]\n [ 3.94662209e-01  8.43704615e+00]\n [-5.45935717e+00  1.01154480e+01]\n [-6.05435588e-02  8.97642127e+00]\n [ 3.47948642e-01  3.90660062e+00]\n [-5.32028093e+00  9.59892257e+00]\n [ 2.54863770e-01  2.41368612e+00]]"}, "kwargs": {"accept_sparse": "csr", "accept_large_sparse": false, "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": null, "estimator": null}}, "return": "[[-1.24573809e-01  3.70860551e+00]\n [-8.96766471e-01  8.25829397e+00]\n [ 3.00052857e+00  7.44744452e+00]\n [ 3.32900779e+00  9.62929786e+00]\n [ 1.43922970e+00  3.12222539e+00]\n [ 5.51337468e-01  7.67549258e+00]\n [-5.16588043e+00  8.81808303e+00]\n [ 1.73127606e+00  3.55511118e+00]\n [ 1.21528288e+00  3.25788304e+00]\n [-5.26396484e+00  8.25666817e+00]\n [ 1.75609458e-01  4.87745734e+00]\n [ 5.03346631e-01  2.48564138e+00]\n [ 6.44049793e-01  9.46945163e+00]\n [-5.22218621e+00  7.43665245e+00]\n [ 2.53602386e+00  7.12161132e+00]\n [ 2.03138708e+00  8.94039820e+00]\n [ 5.26444488e-01  7.10303657e+00]\n [ 6.75540708e-01  8.68799231e+00]\n [-5.80313013e+00  7.75224824e+00]\n [-4.91828000e+00  6.46172660e+00]\n [ 1.29042023e+00  8.39363888e+00]\n [ 3.86891424e-01  2.93545851e+00]\n [-5.45823143e+00  7.77731183e+00]\n [-3.61150309e-01  2.92449244e+00]\n [-5.73566523e-01  3.77641169e+00]\n [ 1.17700617e+00  7.75858544e+00]\n [-4.90292664e+00  8.87319754e+00]\n [ 1.08115471e+00  2.26551135e+00]\n [ 1.21348440e+00  4.05653548e+00]\n [ 1.68131368e+00  3.64793335e+00]\n [-3.68379510e-01  8.92892350e+00]\n [-4.88621465e+00  6.92659537e+00]\n [ 1.72415611e+00  3.48300011e+00]\n [-6.71174649e+00  7.71966632e+00]\n [ 3.17430231e+00  8.87968284e+00]\n [-6.33888802e+00  6.39007127e+00]\n [-5.69662944e+00  5.83574305e+00]\n [ 2.07484068e+00  8.00246366e+00]\n [-3.87479320e+00  6.62520023e+00]\n [ 8.75095930e-01  9.92526626e+00]\n [ 1.67566883e+00  8.37847925e+00]\n [-4.06536046e+00  8.72395142e+00]\n [-1.05688855e-01  2.80986602e+00]\n [ 9.79408707e-01  4.09242920e+00]\n [-4.79737837e+00  6.12654081e+00]\n [ 1.12733854e+00  2.91161358e+00]\n [-3.21111356e-01  2.43042822e-01]\n [ 7.68702371e-01  3.28032688e+00]\n [-5.02833871e+00  7.14046644e+00]\n [ 1.46875115e+00  3.50076769e+00]\n [ 1.03976874e+00  3.15104610e+00]\n [-2.56261850e-01  1.00279353e+00]\n [ 1.21295776e+00  7.68089687e+00]\n [-5.01313118e+00  6.94772184e+00]\n [ 3.46209936e-02  9.14402997e+00]\n [-5.23870864e+00  7.14532135e+00]\n [ 7.45628475e-01  7.59453798e+00]\n [-6.44246087e+00  8.89971050e+00]\n [-1.53358317e+00  8.88522992e+00]\n [ 3.15306363e+00  9.05681512e+00]\n [ 1.37240754e+00  9.49552678e+00]\n [-6.53321282e+00  7.82948003e+00]\n [ 4.58081337e-02  3.00000497e+00]\n [ 5.29879244e-01  3.26415778e-01]\n [ 1.04618107e+00  2.13993162e+00]\n [ 1.16193729e-01  2.67571995e+00]\n [ 6.39245158e-01  2.18147159e+00]\n [-3.62009617e+00  7.74085554e+00]\n [ 3.25947387e-03  8.79268503e+00]\n [ 1.02535822e+00  7.74801077e+00]\n [ 1.87360817e+00  8.64693221e+00]\n [ 2.39824932e+00  7.71693324e+00]\n [ 3.03617954e+00  8.06742034e+00]\n [-4.93100969e+00  6.99166397e+00]\n [-4.84984234e+00  6.39789644e+00]\n [ 2.43641741e+00  1.01040657e+01]\n [-1.43326124e-01  8.26649566e+00]\n [-4.66330371e+00  8.65859416e+00]\n [-4.94691271e+00  7.44661858e+00]\n [-7.46427461e+00  7.60737848e+00]\n [ 4.92806905e-01  7.91548611e+00]\n [-5.18175542e+00  6.76329449e+00]\n [-4.30808417e+00  7.64166535e+00]\n [ 3.76562277e-01  2.29322489e+00]\n [-4.49024781e+00  7.01960923e+00]\n [-4.57229286e+00  6.82654909e+00]\n [ 1.11023583e+00  5.09963580e+00]\n [ 7.83295875e-01  4.02427066e+00]\n [ 2.10703213e+00  9.36157514e+00]\n [-5.01075470e+00  7.05681993e+00]\n [-3.20958213e-01  2.58053972e+00]\n [-2.58947546e-01  1.76936558e+00]\n [-5.34348610e+00  8.09001289e+00]\n [-4.13261328e+00  7.55498573e+00]\n [ 3.94662209e-01  8.43704615e+00]\n [-5.45935717e+00  1.01154480e+01]\n [-6.05435588e-02  8.97642127e+00]\n [ 3.47948642e-01  3.90660062e+00]\n [-5.32028093e+00  9.59892257e+00]\n [ 2.54863770e-01  2.41368612e+00]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_is_copy": "null value in the ground truth", "_mgr": "in ground truth values, it is an empty dict", "_item_cache": "in ground truth values, it is an empty dict", "_attrs": "in ground truth values, it is an empty dict", "_name": "null value in the ground truth"}}, "kwargs": {"dtype": "null value in the ground truth", "ensure_2d": "bool"}}, "return": "list of 1 str"}, "values": {"inputs": {"self": {}, "args": {"array": {"_is_copy": null, "_mgr": {}, "_item_cache": {}, "_attrs": {}, "_name": null}}, "kwargs": {"dtype": null, "ensure_2d": false}}, "return": "['a' 'b' 'c']"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_is_copy": "null value in the ground truth", "_mgr": "in ground truth values, it is an empty dict", "_item_cache": "in ground truth values, it is an empty dict", "_attrs": "in ground truth values, it is an empty dict"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"_is_copy": null, "_mgr": {}, "_item_cache": {}, "_attrs": {}}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "warn_on_dtype": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_is_copy": "null value in the ground truth", "_mgr": "in ground truth values, it is an empty dict", "_item_cache": "in ground truth values, it is an empty dict", "_attrs": "in ground truth values, it is an empty dict"}}, "kwargs": {"dtype": "str", "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"_is_copy": null, "_mgr": {}, "_item_cache": {}, "_attrs": {}}}, "kwargs": {"dtype": "numeric", "warn_on_dtype": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_is_copy": "null value in the ground truth", "_mgr": "in ground truth values, it is an empty dict", "_item_cache": "in ground truth values, it is an empty dict", "_attrs": "in ground truth values, it is an empty dict"}}, "kwargs": {"dtype": "np.ndarray[type]", "warn_on_dtype": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"_is_copy": null, "_mgr": {}, "_item_cache": {}, "_attrs": {}}}, "kwargs": {"dtype": "object", "warn_on_dtype": true}}, "return": "[[1 2 3]\n [4 5 6]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"accept_sparse": "bool", "ensure_2d": "bool", "dtype": "null value in the ground truth", "order": "str"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[1. 1. 1. 1. 1.]"}, "kwargs": {"accept_sparse": false, "ensure_2d": false, "dtype": null, "order": "C"}}, "return": "[1. 1. 1. 1. 1.]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"accept_sparse": "bool", "ensure_2d": "bool", "dtype": "null value in the ground truth", "order": "str"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1.]\n [1. 1. 1. 1.]]"}, "kwargs": {"accept_sparse": false, "ensure_2d": false, "dtype": null, "order": "C"}}, "return": "[[1. 1. 1. 1.]\n [1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"accept_sparse": "bool", "ensure_2d": "bool", "dtype": "null value in the ground truth", "order": "str"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[1. 1. 1. 1.]"}, "kwargs": {"accept_sparse": false, "ensure_2d": false, "dtype": null, "order": "C"}}, "return": "[1. 1. 1. 1.]"}, "name": "check_array"}
