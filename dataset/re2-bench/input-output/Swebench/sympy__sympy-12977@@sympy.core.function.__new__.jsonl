{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "null value in the ground truth", "__doc__": "null value in the ground truth", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"negative": "in ground truth values, it is an empty dict", "positive": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "null value in the ground truth"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": {"nargs": "in ground truth values, it is an empty dict"}}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": null, "__doc__": null, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"negative": {}, "positive": {}, "complex": {}, "commutative": {}}, "_nargs": null}}, "kwargs": {}}, "return": {"nargs": {}}}, "name": "__new__"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "__doc__": "str", "_dir": "int", "_eval_number": "in ground truth values, it is an empty dict", "_eval_nseries": "in ground truth values, it is an empty dict", "__lt__": "in ground truth values, it is an empty dict", "__ge__": "in ground truth values, it is an empty dict", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"integer": "in ground truth values, it is an empty dict", "real": "in ground truth values, it is an empty dict", "negative": "in ground truth values, it is an empty dict", "positive": "in ground truth values, it is an empty dict", "finite": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "list of 1 int"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "sympy.functions.elementary.integers", "__doc__": "\n    Ceiling is a univariate function which returns the smallest integer\n    value not less than its argument. Ceiling function is generalized\n    in this implementation to complex numbers.\n\n    Examples\n    ========\n\n    >>> from sympy import ceiling, E, I, Float, Rational\n    >>> \"ceiling(17)\"\n    17\n    >>> \"ceiling(Rational(23, 10)\")\n    3\n    >>> \"ceiling(2*E)\"\n    6\n    >>> \"ceiling(-Float(0.567)\")\n    0\n    >>> \"ceiling(I/2)\"\n    I\n\n    See Also\n    ========\n\n    sympy.functions.elementary.integers.floor\n\n    References\n    ==========\n\n    .. [1] \"Concrete mathematics\" by Graham, pp. 87\n    .. [2] http://mathworld.wolfram.com/CeilingFunction.html\n\n    ", "_dir": 1, "_eval_number": {}, "_eval_nseries": {}, "__lt__": {}, "__ge__": {}, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"integer": {}, "real": {}, "negative": {}, "positive": {}, "finite": {}, "complex": {}, "commutative": {}}, "_nargs": [1]}}, "kwargs": {}}, "return": "2"}, "name": "__new__"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "eval": "in ground truth values, it is an empty dict", "__doc__": "null value in the ground truth", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"negative": "in ground truth values, it is an empty dict", "positive": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "list of 1 int"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": {"nargs": {"_elements": "np.ndarray[frozenset]"}}}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "builtins", "eval": {}, "__doc__": null, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"negative": {}, "positive": {}, "complex": {}, "commutative": {}}, "_nargs": [0]}}, "kwargs": {}}, "return": {"nargs": {"_elements": "frozenset({0})"}}}, "name": "__new__"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "eval": "in ground truth values, it is an empty dict", "__doc__": "null value in the ground truth", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"negative": "in ground truth values, it is an empty dict", "positive": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "list of 1 int"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": {"nargs": {"_elements": "np.ndarray[frozenset]"}}}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "builtins", "eval": {}, "__doc__": null, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"negative": {}, "positive": {}, "complex": {}, "commutative": {}}, "_nargs": [1]}}, "kwargs": {}}, "return": {"nargs": {"_elements": "frozenset({1})"}}}, "name": "__new__"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "eval": "in ground truth values, it is an empty dict", "__doc__": "null value in the ground truth", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"negative": "in ground truth values, it is an empty dict", "positive": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "null value in the ground truth"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": {"nargs": "in ground truth values, it is an empty dict"}}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "builtins", "eval": {}, "__doc__": null, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"negative": {}, "positive": {}, "complex": {}, "commutative": {}}, "_nargs": null}}, "kwargs": {}}, "return": {"nargs": {}}}, "name": "__new__"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"nargs": "int", "__module__": "null value in the ground truth", "__doc__": "null value in the ground truth", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"negative": "in ground truth values, it is an empty dict", "positive": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "list of 1 int"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": {"nargs": {"_elements": "np.ndarray[frozenset]"}}}, "values": {"inputs": {"self": {}, "args": {"cls": {"nargs": 2, "__module__": null, "__doc__": null, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"negative": {}, "positive": {}, "complex": {}, "commutative": {}}, "_nargs": [2]}}, "kwargs": {}}, "return": {"nargs": {"_elements": "frozenset({2})"}}}, "name": "__new__"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "__doc__": "str", "_ortho_poly": "in ground truth values, it is an empty dict", "eval": "in ground truth values, it is an empty dict", "fdiff": "in ground truth values, it is an empty dict", "_eval_rewrite_as_polynomial": "in ground truth values, it is an empty dict", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"negative": "in ground truth values, it is an empty dict", "positive": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "list of 1 int"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "sympy.functions.special.polynomials", "__doc__": "\n    Chebyshev polynomial of the first kind, :math:`\"T_n(x)\"`\n\n    \"chebyshevt(n, x)\" gives the nth Chebyshev \"polynomial (of the first\n    kind)\" in x, :math:`\"T_n(x)\"`.\n\n    The Chebyshev polynomials of the first kind are orthogonal on\n    :math:`[-1, 1]` with respect to the weight :math:`\\frac{1}{\\sqrt{1-x^2}}`.\n\n    Examples\n    ========\n\n    >>> from sympy import chebyshevt, chebyshevu, diff\n    >>> from sympy.abc import n,x\n    >>> \"chebyshevt(0, x)\"\n    1\n    >>> \"chebyshevt(1, x)\"\n    x\n    >>> \"chebyshevt(2, x)\"\n    2*x**2 - 1\n\n    >>> \"chebyshevt(n, x)\"\n    \"chebyshevt(n, x)\"\n    >>> \"chebyshevt(n, -x)\"\"n    (-1)\"**n*\"chebyshevt(n, x)\"\n    >>> \"chebyshevt(-n, x)\"\n    \"chebyshevt(n, x)\"\n\n    >>> \"chebyshevt(n, 0)\"\n    \"cos(pi*n/2)\"\n    >>> \"chebyshevt(n, -1)\"\"n    (-1)\"**n\n\n    >>> \"diff(chebyshevt(n, x)\", x)\n    n*\"chebyshevu(n - 1, x)\"\n\n    See Also\n    ========\n\n    jacobi, gegenbauer,\n    chebyshevt_root, chebyshevu, chebyshevu_root,\n    legendre, assoc_legendre,\n    hermite,\n    laguerre, assoc_laguerre,\n    sympy.polys.orthopolys.jacobi_poly\n    sympy.polys.orthopolys.gegenbauer_poly\n    sympy.polys.orthopolys.chebyshevt_poly\n    sympy.polys.orthopolys.chebyshevu_poly\n    sympy.polys.orthopolys.hermite_poly\n    sympy.polys.orthopolys.legendre_poly\n    sympy.polys.orthopolys.laguerre_poly\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Chebyshev_polynomial\n    .. [2] http://mathworld.wolfram.com/ChebyshevPolynomialoftheFirstKind.html\n    .. [3] http://mathworld.wolfram.com/ChebyshevPolynomialoftheSecondKind.html\n    .. [4] http://functions.wolfram.com/Polynomials/ChebyshevT/\n    .. [5] http://functions.wolfram.com/Polynomials/ChebyshevU/\n    ", "_ortho_poly": {}, "eval": {}, "fdiff": {}, "_eval_rewrite_as_polynomial": {}, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"negative": {}, "positive": {}, "complex": {}, "commutative": {}}, "_nargs": [2]}}, "kwargs": {}}, "return": "1/2"}, "name": "__new__"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "nargs": "int", "fdiff": "in ground truth values, it is an empty dict", "__doc__": "null value in the ground truth", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"negative": "in ground truth values, it is an empty dict", "positive": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "list of 1 int"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": {"nargs": {"_elements": "np.ndarray[frozenset]"}}}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "builtins", "nargs": 1, "fdiff": {}, "__doc__": null, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"negative": {}, "positive": {}, "complex": {}, "commutative": {}}, "_nargs": [1]}}, "kwargs": {}}, "return": {"nargs": {"_elements": "frozenset({1})"}}}, "name": "__new__"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "__doc__": "str", "is_real": "bool", "is_finite": "bool", "eval": "in ground truth values, it is an empty dict", "_eval_derivative": "in ground truth values, it is an empty dict", "_eval_rewrite_as_atan2": "in ground truth values, it is an empty dict", "_explicit_class_assumptions": {"real": "bool", "finite": "bool"}, "default_assumptions": {"_generator": {"real": "bool", "finite": "bool"}}, "_prop_handler": {"negative": "in ground truth values, it is an empty dict", "positive": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "is_hermitian": "bool", "is_imaginary": "bool", "is_complex": "bool", "is_commutative": "bool", "is_infinite": "bool", "_nargs": "list of 1 int"}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "sympy.functions.elementary.complexes", "__doc__": "\n    Returns the \"argument (in radians)\" of a complex number. For a real\n    number, the argument is always 0.\n\n    Examples\n    ========\n\n    >>> from sympy.functions import arg\n    >>> from sympy import I, sqrt\n    >>> \"arg(2.0)\"\n    0\n    >>> \"arg(I)\"\n    pi/2\n    >>> \"arg(sqrt(2)\" + I*\"sqrt(2)\")\n    pi/4\n\n    ", "is_real": true, "is_finite": true, "eval": {}, "_eval_derivative": {}, "_eval_rewrite_as_atan2": {}, "_explicit_class_assumptions": {"real": true, "finite": true}, "default_assumptions": {"_generator": {"real": true, "finite": true}}, "_prop_handler": {"negative": {}, "positive": {}, "complex": {}, "commutative": {}}, "is_hermitian": true, "is_imaginary": false, "is_complex": true, "is_commutative": true, "is_infinite": false, "_nargs": [1]}}, "kwargs": {}}, "return": "pi/4"}, "name": "__new__"}
