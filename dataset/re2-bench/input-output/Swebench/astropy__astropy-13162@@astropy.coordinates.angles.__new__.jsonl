{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "__doc__": "str", "__new__": "in ground truth values, it is an empty dict", "_validate_angles": "in ground truth values, it is an empty dict", "__setitem__": "in ground truth values, it is an empty dict", "__array_ufunc__": "in ground truth values, it is an empty dict"}, "angle": {"_unit": {"_names": "null value in the ground truth", "_short_names": "null value in the ground truth", "_long_names": "null value in the ground truth", "_format": "in ground truth values, it is an empty dict", "__doc__": "str", "_hash": "int"}}}, "kwargs": {"unit": "null value in the ground truth", "copy": "bool", "subok": "bool"}}, "return": {"_unit": {"_names": "null value in the ground truth", "_short_names": "null value in the ground truth", "_long_names": "null value in the ground truth", "_format": "in ground truth values, it is an empty dict", "__doc__": "str", "_hash": "int"}}}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "astropy.coordinates.angles", "__doc__": "\n    Latitude-like \"angle(s)\" which must be in the range -90 to +90 deg.\n\n    A Latitude object is distinguished from a pure\n    :class:`~astropy.coordinates.Angle` by virtue of being constrained\n    so that::\n\n      -90.0 * u.deg <= \"angle(s)\" <= +90.0 * u.deg\n\n    Any attempt to set a value outside that range will result in a\n    `ValueError`.\n\n    The input \"angle(s)\" can be specified either as an array, list,\n    scalar, \"tuple (see below)\", string,\n    :class:`~astropy.units.Quantity` or another\n    :class:`~astropy.coordinates.Angle`.\n\n    The input parser is flexible and supports all of the input formats\n    supported by :class:`~astropy.coordinates.Angle`.\n\n    Parameters\n    ----------\n    angle : array, list, scalar, `~astropy.units.Quantity`, `~astropy.coordinates.Angle`\n        The angle \"value(s)\". If a tuple, will be interpreted as ``(h, m, s)``\n        or ``(d, m, s)`` depending on ``unit``. If a string, it will be\n        interpreted following the rules described for\n        :class:`~astropy.coordinates.Angle`.\n\n        If ``angle`` is a sequence or array of strings, the resulting\n        values will be in the given ``unit``, or if `None` is provided,\n        the unit will be taken from the first given value.\n\n    unit : unit-like, optional\n        The unit of the value specified for the angle.  This may be\n        any string that `~astropy.units.Unit` understands, but it is\n        better to give an actual unit object.  Must be an angular\n        unit.\n\n    Raises\n    ------\n    `~astropy.units.UnitsError`\n        If a unit is not provided or it is not an angular unit.\n    `TypeError`\n        If the angle parameter is an instance of :class:`~astropy.coordinates.Longitude`.\n    ", "__new__": {}, "_validate_angles": {}, "__setitem__": {}, "__array_ufunc__": {}}, "angle": {"_unit": {"_names": null, "_short_names": null, "_long_names": null, "_format": {}, "__doc__": "radian: angular measurement of the ratio between the length on an arc\nand its radius", "_hash": 3511426674871999849}}}, "kwargs": {"unit": null, "copy": false, "subok": true}}, "return": {"_unit": {"_names": null, "_short_names": null, "_long_names": null, "_format": {}, "__doc__": "radian: angular measurement of the ratio between the length on an arc\nand its radius", "_hash": 3511426674871999849}}}, "name": "__new__"}
