{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "__doc__": "str", "_bell": "in ground truth values, it is an empty dict", "_bell_poly": "in ground truth values, it is an empty dict", "_bell_incomplete_poly": "in ground truth values, it is an empty dict", "eval": "in ground truth values, it is an empty dict", "_eval_rewrite_as_Sum": "in ground truth values, it is an empty dict", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"positive": "in ground truth values, it is an empty dict", "negative": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "null value in the ground truth"}, "n": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "sympy.functions.combinatorial.numbers", "__doc__": "\n    Bell numbers / Bell polynomials\n\n    The Bell numbers satisfy `B_0 = 1` and\n\n    .. math:: B_n = \\sum_{k=0}^{n-1} \\binom{n-1}{k} B_k.\n\n    They are also given by:\n\n    .. math:: B_n = \\frac{1}{e} \\sum_{k=0}^{\\infty} \\frac{k^n}{k!}.\n\n    The Bell polynomials are given by `\"B_0(x)\" = 1` and\n\n    .. math:: \"B_n(x)\" = x \\sum_{k=1}^{n-1} \\binom{n-1}{k-1} B_{k-1}(x).\n\n    The second kind of Bell \"polynomials (are sometimes called \"partial\" Bell\n    polynomials or incomplete Bell polynomials)\" are defined as\n\n    .. math:: B_{n,k}(x_1, x_2,\\dotsc x_{n-k+1}) =\n            \\sum_{j_1+j_2+j_2+\\dotsb=k \\atop j_1+2j_2+3j_2+\\dotsb=n}\n                \\frac{n!}{j_1!j_2!\\dotsb j_{n-k+1}!}\n                \\left(\\frac{x_1}{1!} \\right)^{j_1}\n                \\left(\\frac{x_2}{2!} \\right)^{j_2} \\dotsb\n                \\left(\\frac{x_{n-k+1}}{(n-k+1)!} \\right) ^{j_{n-k+1}}.\n\n    * \"bell(n)\" gives the `n^{th}` Bell number, `B_n`.\n    * \"bell(n, x)\" gives the `n^{th}` Bell polynomial, `\"B_n(x)\"`.\n    * \"bell(n, k, (x1, x2, ...)\") gives Bell polynomials of the second kind,\n      `B_{n,k}(x_1, x_2, \\dotsc, x_{n-k+1})`.\n\n    Notes\n    =====\n\n    Not to be confused with Bernoulli numbers and Bernoulli polynomials,\n    which use the same notation.\n\n    Examples\n    ========\n\n    >>> from sympy import bell, Symbol, symbols\n\n    >>> [\"bell(n)\" for n in \"range(11)\"]\n    [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975]\n    >>> \"bell(30)\"\n    846749014511809332450147\n    >>> \"bell(4, Symbol('t')\")\n    t**4 + 6*t**3 + 7*t**2 + t\n    >>> \"bell(6, 2, symbols('x:6')\"[1:])\n    6*x1*x5 + 15*x2*x4 + 10*x3**2\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Bell_number\n    .. [2] http://mathworld.wolfram.com/BellNumber.html\n    .. [3] http://mathworld.wolfram.com/BellPolynomial.html\n\n    See Also\n    ========\n\n    bernoulli, catalan, euler, fibonacci, harmonic, lucas\n    ", "_bell": {}, "_bell_poly": {}, "_bell_incomplete_poly": {}, "eval": {}, "_eval_rewrite_as_Sum": {}, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"positive": {}, "negative": {}, "complex": {}, "commutative": {}}, "_nargs": null}, "n": "0"}, "kwargs": {}}, "return": "1"}, "name": "eval"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "__doc__": "str", "_bell": "in ground truth values, it is an empty dict", "_bell_poly": "in ground truth values, it is an empty dict", "_bell_incomplete_poly": "in ground truth values, it is an empty dict", "eval": "in ground truth values, it is an empty dict", "_eval_rewrite_as_Sum": "in ground truth values, it is an empty dict", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"positive": "in ground truth values, it is an empty dict", "negative": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "null value in the ground truth"}, "n": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "sympy.functions.combinatorial.numbers", "__doc__": "\n    Bell numbers / Bell polynomials\n\n    The Bell numbers satisfy `B_0 = 1` and\n\n    .. math:: B_n = \\sum_{k=0}^{n-1} \\binom{n-1}{k} B_k.\n\n    They are also given by:\n\n    .. math:: B_n = \\frac{1}{e} \\sum_{k=0}^{\\infty} \\frac{k^n}{k!}.\n\n    The Bell polynomials are given by `\"B_0(x)\" = 1` and\n\n    .. math:: \"B_n(x)\" = x \\sum_{k=1}^{n-1} \\binom{n-1}{k-1} B_{k-1}(x).\n\n    The second kind of Bell \"polynomials (are sometimes called \"partial\" Bell\n    polynomials or incomplete Bell polynomials)\" are defined as\n\n    .. math:: B_{n,k}(x_1, x_2,\\dotsc x_{n-k+1}) =\n            \\sum_{j_1+j_2+j_2+\\dotsb=k \\atop j_1+2j_2+3j_2+\\dotsb=n}\n                \\frac{n!}{j_1!j_2!\\dotsb j_{n-k+1}!}\n                \\left(\\frac{x_1}{1!} \\right)^{j_1}\n                \\left(\\frac{x_2}{2!} \\right)^{j_2} \\dotsb\n                \\left(\\frac{x_{n-k+1}}{(n-k+1)!} \\right) ^{j_{n-k+1}}.\n\n    * \"bell(n)\" gives the `n^{th}` Bell number, `B_n`.\n    * \"bell(n, x)\" gives the `n^{th}` Bell polynomial, `\"B_n(x)\"`.\n    * \"bell(n, k, (x1, x2, ...)\") gives Bell polynomials of the second kind,\n      `B_{n,k}(x_1, x_2, \\dotsc, x_{n-k+1})`.\n\n    Notes\n    =====\n\n    Not to be confused with Bernoulli numbers and Bernoulli polynomials,\n    which use the same notation.\n\n    Examples\n    ========\n\n    >>> from sympy import bell, Symbol, symbols\n\n    >>> [\"bell(n)\" for n in \"range(11)\"]\n    [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975]\n    >>> \"bell(30)\"\n    846749014511809332450147\n    >>> \"bell(4, Symbol('t')\")\n    t**4 + 6*t**3 + 7*t**2 + t\n    >>> \"bell(6, 2, symbols('x:6')\"[1:])\n    6*x1*x5 + 15*x2*x4 + 10*x3**2\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Bell_number\n    .. [2] http://mathworld.wolfram.com/BellNumber.html\n    .. [3] http://mathworld.wolfram.com/BellPolynomial.html\n\n    See Also\n    ========\n\n    bernoulli, catalan, euler, fibonacci, harmonic, lucas\n    ", "_bell": {}, "_bell_poly": {}, "_bell_incomplete_poly": {}, "eval": {}, "_eval_rewrite_as_Sum": {}, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"positive": {}, "negative": {}, "complex": {}, "commutative": {}}, "_nargs": null}, "n": "1"}, "kwargs": {}}, "return": "1"}, "name": "eval"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "__doc__": "str", "_bell": "in ground truth values, it is an empty dict", "_bell_poly": "in ground truth values, it is an empty dict", "_bell_incomplete_poly": "in ground truth values, it is an empty dict", "eval": "in ground truth values, it is an empty dict", "_eval_rewrite_as_Sum": "in ground truth values, it is an empty dict", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"positive": "in ground truth values, it is an empty dict", "negative": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "null value in the ground truth"}, "n": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "sympy.functions.combinatorial.numbers", "__doc__": "\n    Bell numbers / Bell polynomials\n\n    The Bell numbers satisfy `B_0 = 1` and\n\n    .. math:: B_n = \\sum_{k=0}^{n-1} \\binom{n-1}{k} B_k.\n\n    They are also given by:\n\n    .. math:: B_n = \\frac{1}{e} \\sum_{k=0}^{\\infty} \\frac{k^n}{k!}.\n\n    The Bell polynomials are given by `\"B_0(x)\" = 1` and\n\n    .. math:: \"B_n(x)\" = x \\sum_{k=1}^{n-1} \\binom{n-1}{k-1} B_{k-1}(x).\n\n    The second kind of Bell \"polynomials (are sometimes called \"partial\" Bell\n    polynomials or incomplete Bell polynomials)\" are defined as\n\n    .. math:: B_{n,k}(x_1, x_2,\\dotsc x_{n-k+1}) =\n            \\sum_{j_1+j_2+j_2+\\dotsb=k \\atop j_1+2j_2+3j_2+\\dotsb=n}\n                \\frac{n!}{j_1!j_2!\\dotsb j_{n-k+1}!}\n                \\left(\\frac{x_1}{1!} \\right)^{j_1}\n                \\left(\\frac{x_2}{2!} \\right)^{j_2} \\dotsb\n                \\left(\\frac{x_{n-k+1}}{(n-k+1)!} \\right) ^{j_{n-k+1}}.\n\n    * \"bell(n)\" gives the `n^{th}` Bell number, `B_n`.\n    * \"bell(n, x)\" gives the `n^{th}` Bell polynomial, `\"B_n(x)\"`.\n    * \"bell(n, k, (x1, x2, ...)\") gives Bell polynomials of the second kind,\n      `B_{n,k}(x_1, x_2, \\dotsc, x_{n-k+1})`.\n\n    Notes\n    =====\n\n    Not to be confused with Bernoulli numbers and Bernoulli polynomials,\n    which use the same notation.\n\n    Examples\n    ========\n\n    >>> from sympy import bell, Symbol, symbols\n\n    >>> [\"bell(n)\" for n in \"range(11)\"]\n    [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975]\n    >>> \"bell(30)\"\n    846749014511809332450147\n    >>> \"bell(4, Symbol('t')\")\n    t**4 + 6*t**3 + 7*t**2 + t\n    >>> \"bell(6, 2, symbols('x:6')\"[1:])\n    6*x1*x5 + 15*x2*x4 + 10*x3**2\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Bell_number\n    .. [2] http://mathworld.wolfram.com/BellNumber.html\n    .. [3] http://mathworld.wolfram.com/BellPolynomial.html\n\n    See Also\n    ========\n\n    bernoulli, catalan, euler, fibonacci, harmonic, lucas\n    ", "_bell": {}, "_bell_poly": {}, "_bell_incomplete_poly": {}, "eval": {}, "_eval_rewrite_as_Sum": {}, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"positive": {}, "negative": {}, "complex": {}, "commutative": {}}, "_nargs": null}, "n": "2"}, "kwargs": {}}, "return": "2"}, "name": "eval"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "__doc__": "str", "_bell": "in ground truth values, it is an empty dict", "_bell_poly": "in ground truth values, it is an empty dict", "_bell_incomplete_poly": "in ground truth values, it is an empty dict", "eval": "in ground truth values, it is an empty dict", "_eval_rewrite_as_Sum": "in ground truth values, it is an empty dict", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"positive": "in ground truth values, it is an empty dict", "negative": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "null value in the ground truth"}, "n": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "sympy.functions.combinatorial.numbers", "__doc__": "\n    Bell numbers / Bell polynomials\n\n    The Bell numbers satisfy `B_0 = 1` and\n\n    .. math:: B_n = \\sum_{k=0}^{n-1} \\binom{n-1}{k} B_k.\n\n    They are also given by:\n\n    .. math:: B_n = \\frac{1}{e} \\sum_{k=0}^{\\infty} \\frac{k^n}{k!}.\n\n    The Bell polynomials are given by `\"B_0(x)\" = 1` and\n\n    .. math:: \"B_n(x)\" = x \\sum_{k=1}^{n-1} \\binom{n-1}{k-1} B_{k-1}(x).\n\n    The second kind of Bell \"polynomials (are sometimes called \"partial\" Bell\n    polynomials or incomplete Bell polynomials)\" are defined as\n\n    .. math:: B_{n,k}(x_1, x_2,\\dotsc x_{n-k+1}) =\n            \\sum_{j_1+j_2+j_2+\\dotsb=k \\atop j_1+2j_2+3j_2+\\dotsb=n}\n                \\frac{n!}{j_1!j_2!\\dotsb j_{n-k+1}!}\n                \\left(\\frac{x_1}{1!} \\right)^{j_1}\n                \\left(\\frac{x_2}{2!} \\right)^{j_2} \\dotsb\n                \\left(\\frac{x_{n-k+1}}{(n-k+1)!} \\right) ^{j_{n-k+1}}.\n\n    * \"bell(n)\" gives the `n^{th}` Bell number, `B_n`.\n    * \"bell(n, x)\" gives the `n^{th}` Bell polynomial, `\"B_n(x)\"`.\n    * \"bell(n, k, (x1, x2, ...)\") gives Bell polynomials of the second kind,\n      `B_{n,k}(x_1, x_2, \\dotsc, x_{n-k+1})`.\n\n    Notes\n    =====\n\n    Not to be confused with Bernoulli numbers and Bernoulli polynomials,\n    which use the same notation.\n\n    Examples\n    ========\n\n    >>> from sympy import bell, Symbol, symbols\n\n    >>> [\"bell(n)\" for n in \"range(11)\"]\n    [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975]\n    >>> \"bell(30)\"\n    846749014511809332450147\n    >>> \"bell(4, Symbol('t')\")\n    t**4 + 6*t**3 + 7*t**2 + t\n    >>> \"bell(6, 2, symbols('x:6')\"[1:])\n    6*x1*x5 + 15*x2*x4 + 10*x3**2\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Bell_number\n    .. [2] http://mathworld.wolfram.com/BellNumber.html\n    .. [3] http://mathworld.wolfram.com/BellPolynomial.html\n\n    See Also\n    ========\n\n    bernoulli, catalan, euler, fibonacci, harmonic, lucas\n    ", "_bell": {}, "_bell_poly": {}, "_bell_incomplete_poly": {}, "eval": {}, "_eval_rewrite_as_Sum": {}, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"positive": {}, "negative": {}, "complex": {}, "commutative": {}}, "_nargs": null}, "n": "3"}, "kwargs": {}}, "return": "5"}, "name": "eval"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "__doc__": "str", "_bell": "in ground truth values, it is an empty dict", "_bell_poly": "in ground truth values, it is an empty dict", "_bell_incomplete_poly": "in ground truth values, it is an empty dict", "eval": "in ground truth values, it is an empty dict", "_eval_rewrite_as_Sum": "in ground truth values, it is an empty dict", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"positive": "in ground truth values, it is an empty dict", "negative": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "null value in the ground truth"}, "n": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "sympy.functions.combinatorial.numbers", "__doc__": "\n    Bell numbers / Bell polynomials\n\n    The Bell numbers satisfy `B_0 = 1` and\n\n    .. math:: B_n = \\sum_{k=0}^{n-1} \\binom{n-1}{k} B_k.\n\n    They are also given by:\n\n    .. math:: B_n = \\frac{1}{e} \\sum_{k=0}^{\\infty} \\frac{k^n}{k!}.\n\n    The Bell polynomials are given by `\"B_0(x)\" = 1` and\n\n    .. math:: \"B_n(x)\" = x \\sum_{k=1}^{n-1} \\binom{n-1}{k-1} B_{k-1}(x).\n\n    The second kind of Bell \"polynomials (are sometimes called \"partial\" Bell\n    polynomials or incomplete Bell polynomials)\" are defined as\n\n    .. math:: B_{n,k}(x_1, x_2,\\dotsc x_{n-k+1}) =\n            \\sum_{j_1+j_2+j_2+\\dotsb=k \\atop j_1+2j_2+3j_2+\\dotsb=n}\n                \\frac{n!}{j_1!j_2!\\dotsb j_{n-k+1}!}\n                \\left(\\frac{x_1}{1!} \\right)^{j_1}\n                \\left(\\frac{x_2}{2!} \\right)^{j_2} \\dotsb\n                \\left(\\frac{x_{n-k+1}}{(n-k+1)!} \\right) ^{j_{n-k+1}}.\n\n    * \"bell(n)\" gives the `n^{th}` Bell number, `B_n`.\n    * \"bell(n, x)\" gives the `n^{th}` Bell polynomial, `\"B_n(x)\"`.\n    * \"bell(n, k, (x1, x2, ...)\") gives Bell polynomials of the second kind,\n      `B_{n,k}(x_1, x_2, \\dotsc, x_{n-k+1})`.\n\n    Notes\n    =====\n\n    Not to be confused with Bernoulli numbers and Bernoulli polynomials,\n    which use the same notation.\n\n    Examples\n    ========\n\n    >>> from sympy import bell, Symbol, symbols\n\n    >>> [\"bell(n)\" for n in \"range(11)\"]\n    [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975]\n    >>> \"bell(30)\"\n    846749014511809332450147\n    >>> \"bell(4, Symbol('t')\")\n    t**4 + 6*t**3 + 7*t**2 + t\n    >>> \"bell(6, 2, symbols('x:6')\"[1:])\n    6*x1*x5 + 15*x2*x4 + 10*x3**2\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Bell_number\n    .. [2] http://mathworld.wolfram.com/BellNumber.html\n    .. [3] http://mathworld.wolfram.com/BellPolynomial.html\n\n    See Also\n    ========\n\n    bernoulli, catalan, euler, fibonacci, harmonic, lucas\n    ", "_bell": {}, "_bell_poly": {}, "_bell_incomplete_poly": {}, "eval": {}, "_eval_rewrite_as_Sum": {}, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"positive": {}, "negative": {}, "complex": {}, "commutative": {}}, "_nargs": null}, "n": "4"}, "kwargs": {}}, "return": "15"}, "name": "eval"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "__doc__": "str", "_bell": "in ground truth values, it is an empty dict", "_bell_poly": "in ground truth values, it is an empty dict", "_bell_incomplete_poly": "in ground truth values, it is an empty dict", "eval": "in ground truth values, it is an empty dict", "_eval_rewrite_as_Sum": "in ground truth values, it is an empty dict", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"positive": "in ground truth values, it is an empty dict", "negative": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "null value in the ground truth"}, "n": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "sympy.functions.combinatorial.numbers", "__doc__": "\n    Bell numbers / Bell polynomials\n\n    The Bell numbers satisfy `B_0 = 1` and\n\n    .. math:: B_n = \\sum_{k=0}^{n-1} \\binom{n-1}{k} B_k.\n\n    They are also given by:\n\n    .. math:: B_n = \\frac{1}{e} \\sum_{k=0}^{\\infty} \\frac{k^n}{k!}.\n\n    The Bell polynomials are given by `\"B_0(x)\" = 1` and\n\n    .. math:: \"B_n(x)\" = x \\sum_{k=1}^{n-1} \\binom{n-1}{k-1} B_{k-1}(x).\n\n    The second kind of Bell \"polynomials (are sometimes called \"partial\" Bell\n    polynomials or incomplete Bell polynomials)\" are defined as\n\n    .. math:: B_{n,k}(x_1, x_2,\\dotsc x_{n-k+1}) =\n            \\sum_{j_1+j_2+j_2+\\dotsb=k \\atop j_1+2j_2+3j_2+\\dotsb=n}\n                \\frac{n!}{j_1!j_2!\\dotsb j_{n-k+1}!}\n                \\left(\\frac{x_1}{1!} \\right)^{j_1}\n                \\left(\\frac{x_2}{2!} \\right)^{j_2} \\dotsb\n                \\left(\\frac{x_{n-k+1}}{(n-k+1)!} \\right) ^{j_{n-k+1}}.\n\n    * \"bell(n)\" gives the `n^{th}` Bell number, `B_n`.\n    * \"bell(n, x)\" gives the `n^{th}` Bell polynomial, `\"B_n(x)\"`.\n    * \"bell(n, k, (x1, x2, ...)\") gives Bell polynomials of the second kind,\n      `B_{n,k}(x_1, x_2, \\dotsc, x_{n-k+1})`.\n\n    Notes\n    =====\n\n    Not to be confused with Bernoulli numbers and Bernoulli polynomials,\n    which use the same notation.\n\n    Examples\n    ========\n\n    >>> from sympy import bell, Symbol, symbols\n\n    >>> [\"bell(n)\" for n in \"range(11)\"]\n    [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975]\n    >>> \"bell(30)\"\n    846749014511809332450147\n    >>> \"bell(4, Symbol('t')\")\n    t**4 + 6*t**3 + 7*t**2 + t\n    >>> \"bell(6, 2, symbols('x:6')\"[1:])\n    6*x1*x5 + 15*x2*x4 + 10*x3**2\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Bell_number\n    .. [2] http://mathworld.wolfram.com/BellNumber.html\n    .. [3] http://mathworld.wolfram.com/BellPolynomial.html\n\n    See Also\n    ========\n\n    bernoulli, catalan, euler, fibonacci, harmonic, lucas\n    ", "_bell": {}, "_bell_poly": {}, "_bell_incomplete_poly": {}, "eval": {}, "_eval_rewrite_as_Sum": {}, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"positive": {}, "negative": {}, "complex": {}, "commutative": {}}, "_nargs": null}, "n": "5"}, "kwargs": {}}, "return": "52"}, "name": "eval"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "__doc__": "str", "_bell": "in ground truth values, it is an empty dict", "_bell_poly": "in ground truth values, it is an empty dict", "_bell_incomplete_poly": "in ground truth values, it is an empty dict", "eval": "in ground truth values, it is an empty dict", "_eval_rewrite_as_Sum": "in ground truth values, it is an empty dict", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"positive": "in ground truth values, it is an empty dict", "negative": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "null value in the ground truth"}, "n": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "sympy.functions.combinatorial.numbers", "__doc__": "\n    Bell numbers / Bell polynomials\n\n    The Bell numbers satisfy `B_0 = 1` and\n\n    .. math:: B_n = \\sum_{k=0}^{n-1} \\binom{n-1}{k} B_k.\n\n    They are also given by:\n\n    .. math:: B_n = \\frac{1}{e} \\sum_{k=0}^{\\infty} \\frac{k^n}{k!}.\n\n    The Bell polynomials are given by `\"B_0(x)\" = 1` and\n\n    .. math:: \"B_n(x)\" = x \\sum_{k=1}^{n-1} \\binom{n-1}{k-1} B_{k-1}(x).\n\n    The second kind of Bell \"polynomials (are sometimes called \"partial\" Bell\n    polynomials or incomplete Bell polynomials)\" are defined as\n\n    .. math:: B_{n,k}(x_1, x_2,\\dotsc x_{n-k+1}) =\n            \\sum_{j_1+j_2+j_2+\\dotsb=k \\atop j_1+2j_2+3j_2+\\dotsb=n}\n                \\frac{n!}{j_1!j_2!\\dotsb j_{n-k+1}!}\n                \\left(\\frac{x_1}{1!} \\right)^{j_1}\n                \\left(\\frac{x_2}{2!} \\right)^{j_2} \\dotsb\n                \\left(\\frac{x_{n-k+1}}{(n-k+1)!} \\right) ^{j_{n-k+1}}.\n\n    * \"bell(n)\" gives the `n^{th}` Bell number, `B_n`.\n    * \"bell(n, x)\" gives the `n^{th}` Bell polynomial, `\"B_n(x)\"`.\n    * \"bell(n, k, (x1, x2, ...)\") gives Bell polynomials of the second kind,\n      `B_{n,k}(x_1, x_2, \\dotsc, x_{n-k+1})`.\n\n    Notes\n    =====\n\n    Not to be confused with Bernoulli numbers and Bernoulli polynomials,\n    which use the same notation.\n\n    Examples\n    ========\n\n    >>> from sympy import bell, Symbol, symbols\n\n    >>> [\"bell(n)\" for n in \"range(11)\"]\n    [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975]\n    >>> \"bell(30)\"\n    846749014511809332450147\n    >>> \"bell(4, Symbol('t')\")\n    t**4 + 6*t**3 + 7*t**2 + t\n    >>> \"bell(6, 2, symbols('x:6')\"[1:])\n    6*x1*x5 + 15*x2*x4 + 10*x3**2\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Bell_number\n    .. [2] http://mathworld.wolfram.com/BellNumber.html\n    .. [3] http://mathworld.wolfram.com/BellPolynomial.html\n\n    See Also\n    ========\n\n    bernoulli, catalan, euler, fibonacci, harmonic, lucas\n    ", "_bell": {}, "_bell_poly": {}, "_bell_incomplete_poly": {}, "eval": {}, "_eval_rewrite_as_Sum": {}, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"positive": {}, "negative": {}, "complex": {}, "commutative": {}}, "_nargs": null}, "n": "6"}, "kwargs": {}}, "return": "203"}, "name": "eval"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "__doc__": "str", "_bell": "in ground truth values, it is an empty dict", "_bell_poly": "in ground truth values, it is an empty dict", "_bell_incomplete_poly": "in ground truth values, it is an empty dict", "eval": "in ground truth values, it is an empty dict", "_eval_rewrite_as_Sum": "in ground truth values, it is an empty dict", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"positive": "in ground truth values, it is an empty dict", "negative": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "null value in the ground truth"}, "n": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "sympy.functions.combinatorial.numbers", "__doc__": "\n    Bell numbers / Bell polynomials\n\n    The Bell numbers satisfy `B_0 = 1` and\n\n    .. math:: B_n = \\sum_{k=0}^{n-1} \\binom{n-1}{k} B_k.\n\n    They are also given by:\n\n    .. math:: B_n = \\frac{1}{e} \\sum_{k=0}^{\\infty} \\frac{k^n}{k!}.\n\n    The Bell polynomials are given by `\"B_0(x)\" = 1` and\n\n    .. math:: \"B_n(x)\" = x \\sum_{k=1}^{n-1} \\binom{n-1}{k-1} B_{k-1}(x).\n\n    The second kind of Bell \"polynomials (are sometimes called \"partial\" Bell\n    polynomials or incomplete Bell polynomials)\" are defined as\n\n    .. math:: B_{n,k}(x_1, x_2,\\dotsc x_{n-k+1}) =\n            \\sum_{j_1+j_2+j_2+\\dotsb=k \\atop j_1+2j_2+3j_2+\\dotsb=n}\n                \\frac{n!}{j_1!j_2!\\dotsb j_{n-k+1}!}\n                \\left(\\frac{x_1}{1!} \\right)^{j_1}\n                \\left(\\frac{x_2}{2!} \\right)^{j_2} \\dotsb\n                \\left(\\frac{x_{n-k+1}}{(n-k+1)!} \\right) ^{j_{n-k+1}}.\n\n    * \"bell(n)\" gives the `n^{th}` Bell number, `B_n`.\n    * \"bell(n, x)\" gives the `n^{th}` Bell polynomial, `\"B_n(x)\"`.\n    * \"bell(n, k, (x1, x2, ...)\") gives Bell polynomials of the second kind,\n      `B_{n,k}(x_1, x_2, \\dotsc, x_{n-k+1})`.\n\n    Notes\n    =====\n\n    Not to be confused with Bernoulli numbers and Bernoulli polynomials,\n    which use the same notation.\n\n    Examples\n    ========\n\n    >>> from sympy import bell, Symbol, symbols\n\n    >>> [\"bell(n)\" for n in \"range(11)\"]\n    [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975]\n    >>> \"bell(30)\"\n    846749014511809332450147\n    >>> \"bell(4, Symbol('t')\")\n    t**4 + 6*t**3 + 7*t**2 + t\n    >>> \"bell(6, 2, symbols('x:6')\"[1:])\n    6*x1*x5 + 15*x2*x4 + 10*x3**2\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Bell_number\n    .. [2] http://mathworld.wolfram.com/BellNumber.html\n    .. [3] http://mathworld.wolfram.com/BellPolynomial.html\n\n    See Also\n    ========\n\n    bernoulli, catalan, euler, fibonacci, harmonic, lucas\n    ", "_bell": {}, "_bell_poly": {}, "_bell_incomplete_poly": {}, "eval": {}, "_eval_rewrite_as_Sum": {}, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"positive": {}, "negative": {}, "complex": {}, "commutative": {}}, "_nargs": null}, "n": "7"}, "kwargs": {}}, "return": "877"}, "name": "eval"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "__doc__": "str", "_bell": "in ground truth values, it is an empty dict", "_bell_poly": "in ground truth values, it is an empty dict", "_bell_incomplete_poly": "in ground truth values, it is an empty dict", "eval": "in ground truth values, it is an empty dict", "_eval_rewrite_as_Sum": "in ground truth values, it is an empty dict", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"positive": "in ground truth values, it is an empty dict", "negative": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "null value in the ground truth"}, "n": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "sympy.functions.combinatorial.numbers", "__doc__": "\n    Bell numbers / Bell polynomials\n\n    The Bell numbers satisfy `B_0 = 1` and\n\n    .. math:: B_n = \\sum_{k=0}^{n-1} \\binom{n-1}{k} B_k.\n\n    They are also given by:\n\n    .. math:: B_n = \\frac{1}{e} \\sum_{k=0}^{\\infty} \\frac{k^n}{k!}.\n\n    The Bell polynomials are given by `\"B_0(x)\" = 1` and\n\n    .. math:: \"B_n(x)\" = x \\sum_{k=1}^{n-1} \\binom{n-1}{k-1} B_{k-1}(x).\n\n    The second kind of Bell \"polynomials (are sometimes called \"partial\" Bell\n    polynomials or incomplete Bell polynomials)\" are defined as\n\n    .. math:: B_{n,k}(x_1, x_2,\\dotsc x_{n-k+1}) =\n            \\sum_{j_1+j_2+j_2+\\dotsb=k \\atop j_1+2j_2+3j_2+\\dotsb=n}\n                \\frac{n!}{j_1!j_2!\\dotsb j_{n-k+1}!}\n                \\left(\\frac{x_1}{1!} \\right)^{j_1}\n                \\left(\\frac{x_2}{2!} \\right)^{j_2} \\dotsb\n                \\left(\\frac{x_{n-k+1}}{(n-k+1)!} \\right) ^{j_{n-k+1}}.\n\n    * \"bell(n)\" gives the `n^{th}` Bell number, `B_n`.\n    * \"bell(n, x)\" gives the `n^{th}` Bell polynomial, `\"B_n(x)\"`.\n    * \"bell(n, k, (x1, x2, ...)\") gives Bell polynomials of the second kind,\n      `B_{n,k}(x_1, x_2, \\dotsc, x_{n-k+1})`.\n\n    Notes\n    =====\n\n    Not to be confused with Bernoulli numbers and Bernoulli polynomials,\n    which use the same notation.\n\n    Examples\n    ========\n\n    >>> from sympy import bell, Symbol, symbols\n\n    >>> [\"bell(n)\" for n in \"range(11)\"]\n    [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975]\n    >>> \"bell(30)\"\n    846749014511809332450147\n    >>> \"bell(4, Symbol('t')\")\n    t**4 + 6*t**3 + 7*t**2 + t\n    >>> \"bell(6, 2, symbols('x:6')\"[1:])\n    6*x1*x5 + 15*x2*x4 + 10*x3**2\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Bell_number\n    .. [2] http://mathworld.wolfram.com/BellNumber.html\n    .. [3] http://mathworld.wolfram.com/BellPolynomial.html\n\n    See Also\n    ========\n\n    bernoulli, catalan, euler, fibonacci, harmonic, lucas\n    ", "_bell": {}, "_bell_poly": {}, "_bell_incomplete_poly": {}, "eval": {}, "_eval_rewrite_as_Sum": {}, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"positive": {}, "negative": {}, "complex": {}, "commutative": {}}, "_nargs": null}, "n": "8"}, "kwargs": {}}, "return": "4140"}, "name": "eval"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"cls": {"__module__": "str", "__doc__": "str", "_bell": "in ground truth values, it is an empty dict", "_bell_poly": "in ground truth values, it is an empty dict", "_bell_incomplete_poly": "in ground truth values, it is an empty dict", "eval": "in ground truth values, it is an empty dict", "_eval_rewrite_as_Sum": "in ground truth values, it is an empty dict", "_explicit_class_assumptions": "in ground truth values, it is an empty dict", "default_assumptions": {"_generator": "in ground truth values, it is an empty dict"}, "_prop_handler": {"positive": "in ground truth values, it is an empty dict", "negative": "in ground truth values, it is an empty dict", "complex": "in ground truth values, it is an empty dict", "commutative": "in ground truth values, it is an empty dict"}, "_nargs": "null value in the ground truth"}, "n": "str"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"cls": {"__module__": "sympy.functions.combinatorial.numbers", "__doc__": "\n    Bell numbers / Bell polynomials\n\n    The Bell numbers satisfy `B_0 = 1` and\n\n    .. math:: B_n = \\sum_{k=0}^{n-1} \\binom{n-1}{k} B_k.\n\n    They are also given by:\n\n    .. math:: B_n = \\frac{1}{e} \\sum_{k=0}^{\\infty} \\frac{k^n}{k!}.\n\n    The Bell polynomials are given by `\"B_0(x)\" = 1` and\n\n    .. math:: \"B_n(x)\" = x \\sum_{k=1}^{n-1} \\binom{n-1}{k-1} B_{k-1}(x).\n\n    The second kind of Bell \"polynomials (are sometimes called \"partial\" Bell\n    polynomials or incomplete Bell polynomials)\" are defined as\n\n    .. math:: B_{n,k}(x_1, x_2,\\dotsc x_{n-k+1}) =\n            \\sum_{j_1+j_2+j_2+\\dotsb=k \\atop j_1+2j_2+3j_2+\\dotsb=n}\n                \\frac{n!}{j_1!j_2!\\dotsb j_{n-k+1}!}\n                \\left(\\frac{x_1}{1!} \\right)^{j_1}\n                \\left(\\frac{x_2}{2!} \\right)^{j_2} \\dotsb\n                \\left(\\frac{x_{n-k+1}}{(n-k+1)!} \\right) ^{j_{n-k+1}}.\n\n    * \"bell(n)\" gives the `n^{th}` Bell number, `B_n`.\n    * \"bell(n, x)\" gives the `n^{th}` Bell polynomial, `\"B_n(x)\"`.\n    * \"bell(n, k, (x1, x2, ...)\") gives Bell polynomials of the second kind,\n      `B_{n,k}(x_1, x_2, \\dotsc, x_{n-k+1})`.\n\n    Notes\n    =====\n\n    Not to be confused with Bernoulli numbers and Bernoulli polynomials,\n    which use the same notation.\n\n    Examples\n    ========\n\n    >>> from sympy import bell, Symbol, symbols\n\n    >>> [\"bell(n)\" for n in \"range(11)\"]\n    [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975]\n    >>> \"bell(30)\"\n    846749014511809332450147\n    >>> \"bell(4, Symbol('t')\")\n    t**4 + 6*t**3 + 7*t**2 + t\n    >>> \"bell(6, 2, symbols('x:6')\"[1:])\n    6*x1*x5 + 15*x2*x4 + 10*x3**2\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Bell_number\n    .. [2] http://mathworld.wolfram.com/BellNumber.html\n    .. [3] http://mathworld.wolfram.com/BellPolynomial.html\n\n    See Also\n    ========\n\n    bernoulli, catalan, euler, fibonacci, harmonic, lucas\n    ", "_bell": {}, "_bell_poly": {}, "_bell_incomplete_poly": {}, "eval": {}, "_eval_rewrite_as_Sum": {}, "_explicit_class_assumptions": {}, "default_assumptions": {"_generator": {}}, "_prop_handler": {"positive": {}, "negative": {}, "complex": {}, "commutative": {}}, "_nargs": null}, "n": "9"}, "kwargs": {}}, "return": "21147"}, "name": "eval"}
