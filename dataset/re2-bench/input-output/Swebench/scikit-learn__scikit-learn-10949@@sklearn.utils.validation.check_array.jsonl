{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "null value in the ground truth"}, "kwargs": {"ensure_2d": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": null}, "kwargs": {"ensure_2d": false}}, "return": "[0 1 2]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"allow_nd": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[[0 1]\n  [2 3]]\n\n [[4 5]\n  [6 7]]]"}, "kwargs": {"allow_nd": true}}, "return": "[[[0 1]\n  [2 3]]\n\n [[4 5]\n  [6 7]]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "C", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "C", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "F", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": "F", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": null, "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": null, "order": null, "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0 1]\n [2 3]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[0 1]\n [2 3]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "F", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": "C", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": "C", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": "F", "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": "F", "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": null, "copy": true}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": null, "order": null, "copy": false}}, "return": "[[0. 1.]\n [2. 3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "C", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "str", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": "F", "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": true}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "order": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[bool_]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[0. 1.]\n [2. 3.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "order": null, "copy": false}}, "return": "[[False  True]\n [ True  True]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1. 2. 3.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1. 2. 3.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[bool_]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[ True  True  True]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[bool_]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[2 1 3]", "indices": "[1 0 1]", "indptr": "[0 1 3]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[ True  True  True]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[float64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2. 1. 3.]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[float64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2. 1. 3.]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[bool_]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[ True  True  True]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[int64]", "has_canonical_format": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__str__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__new__": "str", "__doc__": "str"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[bool_]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[2 1 3]", "has_canonical_format": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__str__": "\"<function __str__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__new__": "\"<function __new__>\"", "__doc__": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "row": "[1 0 1]", "col": "[0 1 1]", "data": "[ True  True  True]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "dtype": "str"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "dtype": "int64"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "dtype": "str"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__invert__": "str", "__lshift__": "str", "__rlshift__": "str", "__rshift__": "str", "__rrshift__": "str", "__and__": "str", "__rand__": "str", "__xor__": "str", "__rxor__": "str", "__or__": "str", "__ror__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__index__": "str", "__new__": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "dtype": "int64"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__invert__": "\"<function __invert__>\"", "__lshift__": "\"<function __lshift__>\"", "__rlshift__": "\"<function __rlshift__>\"", "__rshift__": "\"<function __rshift__>\"", "__rrshift__": "\"<function __rrshift__>\"", "__and__": "\"<function __and__>\"", "__rand__": "\"<function __rand__>\"", "__xor__": "\"<function __xor__>\"", "__rxor__": "\"<function __rxor__>\"", "__or__": "\"<function __or__>\"", "__ror__": "\"<function __ror__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__index__": "\"<function __index__>\"", "__new__": "\"<function __new__>\"", "__doc__": null}, "accept_sparse": null, "copy": false}}, "return": {"_shape": [2, 2], "maxprint": 50, "indices": "[1 0 1]", "indptr": "[0 1 3]", "data": "[1 2 3]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_getitem": "bool"}, "accept_sparse": "null value in the ground truth"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"_getitem": false}, "accept_sparse": null}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "copy": true, "force_all_finite": true, "ensure_2d": false}}, "return": "[[0. 1. 2. 3. 4.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "C", "copy": true}}, "return": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "F", "copy": true}}, "return": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "C", "copy": false}}, "return": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "F", "copy": false}}, "return": "[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "C", "copy": true}}, "return": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "F", "copy": true}}, "return": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "C", "copy": false}}, "return": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"order": "str", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "kwargs": {"order": "F", "copy": false}}, "return": "[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "str"}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {"array": "[[inf  1.]\n [ 2.  3.]]"}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": "[[inf  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float]"}, "kwargs": {"force_all_finite": "str", "accept_sparse": "bool"}}, "return": "np.ndarray[float]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[nan  1.]\n [ 2.  3.]]"}, "kwargs": {"force_all_finite": "allow-nan", "accept_sparse": true}}, "return": "[[nan  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float]"}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": "np.ndarray[float]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[nan  1.]\n [ 2.  3.]]"}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": "[[nan  1.]\n [ 2.  3.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "str", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "str", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[inf  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[inf  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "kwargs": {"force_all_finite": "str", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[nan  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "kwargs": {"force_all_finite": "allow-nan", "accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[nan  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "kwargs": {"force_all_finite": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[nan  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "kwargs": {"force_all_finite": false, "accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[nan  1.  2.  3.]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[int64]", "values": "np.ndarray[int64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[int64]"}}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "values": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "shape": [3, 3], "ndim": 2, "iloc": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}}}, "kwargs": {}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[int64]", "values": "np.ndarray[int64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[int64]"}}}, "kwargs": {"ensure_2d": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "values": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "shape": [3, 3], "ndim": 2, "iloc": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}}}, "kwargs": {"ensure_2d": false}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[int64]", "values": "np.ndarray[int64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[int64]"}, "dtype": "str"}}, "kwargs": {"ensure_2d": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "values": "[[1 2 3]\n [4 5 6]\n [7 8 9]]", "shape": [3, 3], "ndim": 2, "iloc": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "dtype": "Hans"}}, "kwargs": {"ensure_2d": false}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[float64]", "values": "np.ndarray[float64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[float64]"}}}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]", "values": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]", "shape": [4, 2], "ndim": 2, "iloc": {"array": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]"}}}, "kwargs": {}}, "return": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"array": "np.ndarray[float64]", "values": "np.ndarray[float64]", "shape": "list of 2 int", "ndim": "int", "iloc": {"array": "np.ndarray[float64]"}}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"array": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]", "values": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]", "shape": [4, 2], "ndim": 2, "iloc": {"array": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]"}}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}}}, "return": "[[0.2 0.7]\n [0.6 0.5]\n [0.4 0.1]\n [0.7 0.2]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "null value in the ground truth"}, "kwargs": "in ground truth values, it is an empty dict"}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": null}, "kwargs": {}}, "return": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool", "warn_on_dtype": "bool", "estimator": "str"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "kwargs": {"dtype": null, "accept_sparse": true, "warn_on_dtype": true, "estimator": "SomeEstimator"}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[int64]"}, "kwargs": {"accept_sparse": "bool", "accept_large_sparse": "bool", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": {"n_neighbors": "int", "radius": "null value in the ground truth", "algorithm": "str", "leaf_size": "int", "metric": "str", "metric_params": "null value in the ground truth", "p": "int", "n_jobs": "int", "weights": "str"}}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1 2 3]\n [4 5 6]\n [7 8 9]]"}, "kwargs": {"accept_sparse": true, "accept_large_sparse": true, "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": true, "estimator": {"n_neighbors": 5, "radius": null, "algorithm": "auto", "leaf_size": 30, "metric": "minkowski", "metric_params": null, "p": 2, "n_jobs": 1, "weights": "uniform"}}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool", "warn_on_dtype": "bool", "estimator": "str"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"dtype": null, "accept_sparse": true, "warn_on_dtype": true, "estimator": "SomeEstimator"}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"accept_sparse": "bool", "accept_large_sparse": "bool", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": {"n_neighbors": "int", "radius": "null value in the ground truth", "algorithm": "str", "leaf_size": "int", "metric": "str", "metric_params": "null value in the ground truth", "p": "int", "n_jobs": "int", "weights": "str"}}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1 4 7 2 5 8 3 6 9]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"accept_sparse": true, "accept_large_sparse": true, "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": true, "estimator": {"n_neighbors": 5, "radius": null, "algorithm": "auto", "leaf_size": 30, "metric": "minkowski", "metric_params": null, "p": 2, "n_jobs": 1, "weights": "uniform"}}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": false}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "accept_sparse": "bool", "warn_on_dtype": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "accept_sparse": true, "warn_on_dtype": false}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "kwargs": {"dtype": null, "accept_sparse": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]\n [7. 8. 9.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": true}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[float64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"dtype": "null value in the ground truth", "accept_sparse": "null value in the ground truth", "copy": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [3, 3], "maxprint": 50, "data": "[1. 4. 7. 2. 5. 8. 3. 6. 9.]", "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]"}}, "kwargs": {"dtype": null, "accept_sparse": null, "copy": false}}, "return": {"_shape": [3, 3], "maxprint": 50, "indices": "[0 1 2 0 1 2 0 1 2]", "indptr": "[0 3 6 9]", "data": "[1. 2. 3. 4. 5. 6. 7. 8. 9.]", "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "null value in the ground truth"}, "kwargs": {"accept_sparse": "null value in the ground truth"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": null}, "kwargs": {"accept_sparse": null}}, "return": "[[1 2]\n [3 4]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": true}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "str"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": "csr"}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "null value in the ground truth"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": null}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "kwargs": {"accept_sparse": "list of 1 str"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "data": "np.ndarray[int64]", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "kwargs": {"accept_sparse": ["csr"]}}, "return": {"_shape": [2, 2], "maxprint": 50, "data": "[1 2 3 4]", "indices": "[0 1 0 1]", "indptr": "[0 2 4]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"accept_large_sparse": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [20, 10], "maxprint": 50, "indices": "[4 1]", "indptr": "[0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2]", "data": "[0.3634108  0.48097996]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"accept_large_sparse": true, "accept_sparse": true}}, "return": {"_shape": [20, 10], "maxprint": 50, "indices": "[4 1]", "indptr": "[0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2]", "data": "[0.3634108  0.48097996]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "kwargs": {"accept_large_sparse": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]", "_has_canonical_format": "bool", "_has_sorted_indices": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [20, 10], "maxprint": 50, "indices": "[18 13]", "indptr": "[0 1 1 1 1 1 1 1 1 1 2]", "data": "[0.46200224 0.01708924]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "kwargs": {"accept_large_sparse": true, "accept_sparse": true}}, "return": {"_shape": [20, 10], "maxprint": 50, "indices": "[18 13]", "indptr": "[0 1 1 1 1 1 1 1 1 1 2]", "data": "[0.46200224 0.01708924]", "_has_canonical_format": true, "_has_sorted_indices": true}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[float64]", "has_canonical_format": "bool"}}, "kwargs": {"accept_large_sparse": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "row": "np.ndarray[int64]", "col": "np.ndarray[int64]", "data": "np.ndarray[float64]", "has_canonical_format": "bool"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [20, 10], "maxprint": 50, "row": "[ 0 13]", "col": "[8 1]", "data": "[0.81625078 0.38457667]", "has_canonical_format": false}}, "kwargs": {"accept_large_sparse": true, "accept_sparse": true}}, "return": {"_shape": [20, 10], "maxprint": 50, "row": "[ 0 13]", "col": "[8 1]", "data": "[0.81625078 0.38457667]", "has_canonical_format": false}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "kwargs": {"accept_large_sparse": "bool", "accept_sparse": "bool"}}, "return": {"_shape": "list of 2 int", "maxprint": "int", "indices": "np.ndarray[int64]", "indptr": "np.ndarray[int64]", "data": "np.ndarray[float64]"}}, "values": {"inputs": {"self": {}, "args": {"array": {"_shape": [20, 10], "maxprint": 50, "indices": "[8 9]", "indptr": "[0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2]", "data": "[[[0.68258854]]\n\n [[0.89519642]]]"}}, "kwargs": {"accept_large_sparse": true, "accept_sparse": true}}, "return": {"_shape": [20, 10], "maxprint": 50, "indices": "[8 9]", "indptr": "[0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2]", "data": "[[[0.68258854]]\n\n [[0.89519642]]]"}}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "in ground truth values, it is an empty list"}, "kwargs": {"accept_sparse": "bool", "accept_large_sparse": "bool", "dtype": "str", "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": "null value in the ground truth"}}, "return": "in ground truth values, it is an empty list"}, "values": {"inputs": {"self": {}, "args": {"array": "[]"}, "kwargs": {"accept_sparse": false, "accept_large_sparse": true, "dtype": "numeric", "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": true, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": false, "estimator": null}}, "return": "[]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"accept_sparse": "bool", "accept_large_sparse": "bool", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "null value in the ground truth", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ -3.39600884   6.50194254]\n [ -4.02783992  -4.45503788]\n [ -3.45730396   9.73902939]\n [ -2.97240181   7.53619755]\n [-10.46769913  -7.9013419 ]\n [ -2.86414537   6.76008686]\n [ -3.89653202  -3.02847892]\n [ -4.81020833  -4.60608154]\n [ -3.21140666   7.85784826]\n [ -5.02544863  -2.36628969]\n [ -3.12605047  -4.44681733]\n [ -4.442638    -3.7885328 ]\n [ -8.71686953  -8.83152987]\n [ -4.33070311  -3.65881398]\n [ -8.79311514  -9.30931686]\n [ -1.61578499   7.24234295]\n [ -6.61426106  -9.71784004]\n [ -7.5182091  -10.95415619]\n [ -4.8465389   -3.20648284]\n [ -4.05833261  -3.90050745]\n [ -3.46883122  -4.63850879]\n [ -5.18829639  -2.20688609]\n [ -8.98961598  -9.14646718]\n [ -4.96938564  -5.11382038]\n [ -7.60101092  -8.88988748]\n [ -5.8983897   -3.31370609]\n [ -3.6045966    7.02622798]\n [ -5.10185704  -4.49751513]\n [ -4.13034943  -4.14592378]\n [ -6.20816514  -3.79345484]\n [ -7.68124464  -9.916128  ]\n [ -3.6756038    6.31233785]\n [ -3.73460724   7.57661369]\n [ -3.85191445   7.37626406]\n [ -9.80966402  -9.27555647]\n [ -3.98878801   7.21614852]\n [ -7.7184154  -10.71913603]\n [ -8.76422173  -9.21216666]\n [ -3.20848809   8.13738641]\n [ -3.30228579   9.20019723]\n [ -9.0197638   -9.69533287]\n [ -6.00865881  -2.81135441]\n [ -5.36549747   7.50644983]\n [ -8.83675889  -7.98459572]\n [ -7.09922486  -9.9091714 ]\n [ -8.07113133 -10.19027845]\n [ -8.59442945  -9.50748093]\n [ -5.27490817  -2.251705  ]\n [ -4.62107929   6.68155428]\n [ -3.49199547  -3.05686162]\n [ -4.64661534   5.9997464 ]\n [ -4.60144994  -4.99861978]\n [ -4.19938811  -6.23164041]\n [ -7.74831012  -8.11005414]\n [ -1.23685356   8.86555298]\n [ -5.09809513  -3.58910061]\n [ -3.79021113   6.80888068]\n [ -6.91573574  -9.88324211]\n [ -4.51590911  -4.84413771]\n [ -8.77262751  -7.35593279]\n [ -7.28799049  -9.16746292]\n [ -3.98190676  -4.23609767]\n [ -4.65384266  -2.58075719]\n [ -5.02321111  -2.68463799]\n [ -4.58524512  -4.10946955]\n [ -5.24373979  -3.74795874]\n [-11.01577947  -9.9353368 ]\n [ -3.15035365   8.24294577]\n [ -9.98727751  -9.2232785 ]\n [ -7.96637959  -7.93240073]\n [ -3.48532399   6.30708349]\n [ -4.24584787  -2.4117498 ]\n [ -4.45721313   7.24095262]\n [ -3.87159358   7.13329624]\n [ -4.08625018   6.55658789]\n [ -2.01377467   9.04961864]\n [ -3.43826932   4.67530358]\n [ -5.73577548  -4.21981801]\n [ -3.84757275   6.99428658]\n [ -9.87482319 -10.20147809]\n [ -3.98591018   7.94426246]\n [ -7.83880925  -9.33860671]\n [ -3.84965636  -3.79129671]\n [ -3.51874162   9.27228338]\n [ -6.06738687  -2.50552921]\n [ -7.96018204 -10.1412735 ]\n [ -8.2036834   -8.66418818]\n [ -9.37922012 -10.06139719]\n [ -8.15355744  -8.18449364]\n [ -9.08212127 -10.35843858]\n [ -8.78423873  -9.57365903]\n [ -3.76864333   7.0416406 ]\n [ -3.16337112   7.80951918]\n [ -3.52358208   7.15561769]\n [ -8.55113381  -8.70957021]\n [ -6.41347354  -4.74932969]\n [ -1.61107016   8.80371738]\n [ -2.8548109    5.99817766]\n [ -4.24050868   6.25033848]\n [ -8.94439772 -10.68174909]]"}, "kwargs": {"accept_sparse": false, "accept_large_sparse": true, "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": null, "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 2, "ensure_min_features": 1, "warn_on_dtype": false, "estimator": null}}, "return": "[[ -3.39600884   6.50194254]\n [ -4.02783992  -4.45503788]\n [ -3.45730396   9.73902939]\n [ -2.97240181   7.53619755]\n [-10.46769913  -7.9013419 ]\n [ -2.86414537   6.76008686]\n [ -3.89653202  -3.02847892]\n [ -4.81020833  -4.60608154]\n [ -3.21140666   7.85784826]\n [ -5.02544863  -2.36628969]\n [ -3.12605047  -4.44681733]\n [ -4.442638    -3.7885328 ]\n [ -8.71686953  -8.83152987]\n [ -4.33070311  -3.65881398]\n [ -8.79311514  -9.30931686]\n [ -1.61578499   7.24234295]\n [ -6.61426106  -9.71784004]\n [ -7.5182091  -10.95415619]\n [ -4.8465389   -3.20648284]\n [ -4.05833261  -3.90050745]\n [ -3.46883122  -4.63850879]\n [ -5.18829639  -2.20688609]\n [ -8.98961598  -9.14646718]\n [ -4.96938564  -5.11382038]\n [ -7.60101092  -8.88988748]\n [ -5.8983897   -3.31370609]\n [ -3.6045966    7.02622798]\n [ -5.10185704  -4.49751513]\n [ -4.13034943  -4.14592378]\n [ -6.20816514  -3.79345484]\n [ -7.68124464  -9.916128  ]\n [ -3.6756038    6.31233785]\n [ -3.73460724   7.57661369]\n [ -3.85191445   7.37626406]\n [ -9.80966402  -9.27555647]\n [ -3.98878801   7.21614852]\n [ -7.7184154  -10.71913603]\n [ -8.76422173  -9.21216666]\n [ -3.20848809   8.13738641]\n [ -3.30228579   9.20019723]\n [ -9.0197638   -9.69533287]\n [ -6.00865881  -2.81135441]\n [ -5.36549747   7.50644983]\n [ -8.83675889  -7.98459572]\n [ -7.09922486  -9.9091714 ]\n [ -8.07113133 -10.19027845]\n [ -8.59442945  -9.50748093]\n [ -5.27490817  -2.251705  ]\n [ -4.62107929   6.68155428]\n [ -3.49199547  -3.05686162]\n [ -4.64661534   5.9997464 ]\n [ -4.60144994  -4.99861978]\n [ -4.19938811  -6.23164041]\n [ -7.74831012  -8.11005414]\n [ -1.23685356   8.86555298]\n [ -5.09809513  -3.58910061]\n [ -3.79021113   6.80888068]\n [ -6.91573574  -9.88324211]\n [ -4.51590911  -4.84413771]\n [ -8.77262751  -7.35593279]\n [ -7.28799049  -9.16746292]\n [ -3.98190676  -4.23609767]\n [ -4.65384266  -2.58075719]\n [ -5.02321111  -2.68463799]\n [ -4.58524512  -4.10946955]\n [ -5.24373979  -3.74795874]\n [-11.01577947  -9.9353368 ]\n [ -3.15035365   8.24294577]\n [ -9.98727751  -9.2232785 ]\n [ -7.96637959  -7.93240073]\n [ -3.48532399   6.30708349]\n [ -4.24584787  -2.4117498 ]\n [ -4.45721313   7.24095262]\n [ -3.87159358   7.13329624]\n [ -4.08625018   6.55658789]\n [ -2.01377467   9.04961864]\n [ -3.43826932   4.67530358]\n [ -5.73577548  -4.21981801]\n [ -3.84757275   6.99428658]\n [ -9.87482319 -10.20147809]\n [ -3.98591018   7.94426246]\n [ -7.83880925  -9.33860671]\n [ -3.84965636  -3.79129671]\n [ -3.51874162   9.27228338]\n [ -6.06738687  -2.50552921]\n [ -7.96018204 -10.1412735 ]\n [ -8.2036834   -8.66418818]\n [ -9.37922012 -10.06139719]\n [ -8.15355744  -8.18449364]\n [ -9.08212127 -10.35843858]\n [ -8.78423873  -9.57365903]\n [ -3.76864333   7.0416406 ]\n [ -3.16337112   7.80951918]\n [ -3.52358208   7.15561769]\n [ -8.55113381  -8.70957021]\n [ -6.41347354  -4.74932969]\n [ -1.61107016   8.80371738]\n [ -2.8548109    5.99817766]\n [ -4.24050868   6.25033848]\n [ -8.94439772 -10.68174909]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"copy": "bool", "accept_sparse": "null value in the ground truth", "dtype": "list of 3 {'__repr__': 'str', '__hash__': 'str', '__str__': 'str', '__lt__': 'str', '__le__': 'str', '__eq__': 'str', '__ne__': 'str', '__gt__': 'str', '__ge__': 'str', '__add__': 'str', '__radd__': 'str', '__sub__': 'str', '__rsub__': 'str', '__mul__': 'str', '__rmul__': 'str', '__mod__': 'str', '__rmod__': 'str', '__divmod__': 'str', '__rdivmod__': 'str', '__pow__': 'str', '__rpow__': 'str', '__neg__': 'str', '__pos__': 'str', '__abs__': 'str', '__bool__': 'str', '__int__': 'str', '__float__': 'str', '__floordiv__': 'str', '__rfloordiv__': 'str', '__truediv__': 'str', '__rtruediv__': 'str', '__new__': 'str', 'as_integer_ratio': 'str', '__doc__': 'null value in the ground truth'}"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ -3.39600884   6.50194254]\n [ -4.02783992  -4.45503788]\n [ -3.45730396   9.73902939]\n [ -2.97240181   7.53619755]\n [-10.46769913  -7.9013419 ]\n [ -2.86414537   6.76008686]\n [ -3.89653202  -3.02847892]\n [ -4.81020833  -4.60608154]\n [ -3.21140666   7.85784826]\n [ -5.02544863  -2.36628969]\n [ -3.12605047  -4.44681733]\n [ -4.442638    -3.7885328 ]\n [ -8.71686953  -8.83152987]\n [ -4.33070311  -3.65881398]\n [ -8.79311514  -9.30931686]\n [ -1.61578499   7.24234295]\n [ -6.61426106  -9.71784004]\n [ -7.5182091  -10.95415619]\n [ -4.8465389   -3.20648284]\n [ -4.05833261  -3.90050745]\n [ -3.46883122  -4.63850879]\n [ -5.18829639  -2.20688609]\n [ -8.98961598  -9.14646718]\n [ -4.96938564  -5.11382038]\n [ -7.60101092  -8.88988748]\n [ -5.8983897   -3.31370609]\n [ -3.6045966    7.02622798]\n [ -5.10185704  -4.49751513]\n [ -4.13034943  -4.14592378]\n [ -6.20816514  -3.79345484]\n [ -7.68124464  -9.916128  ]\n [ -3.6756038    6.31233785]\n [ -3.73460724   7.57661369]\n [ -3.85191445   7.37626406]\n [ -9.80966402  -9.27555647]\n [ -3.98878801   7.21614852]\n [ -7.7184154  -10.71913603]\n [ -8.76422173  -9.21216666]\n [ -3.20848809   8.13738641]\n [ -3.30228579   9.20019723]\n [ -9.0197638   -9.69533287]\n [ -6.00865881  -2.81135441]\n [ -5.36549747   7.50644983]\n [ -8.83675889  -7.98459572]\n [ -7.09922486  -9.9091714 ]\n [ -8.07113133 -10.19027845]\n [ -8.59442945  -9.50748093]\n [ -5.27490817  -2.251705  ]\n [ -4.62107929   6.68155428]\n [ -3.49199547  -3.05686162]\n [ -4.64661534   5.9997464 ]\n [ -4.60144994  -4.99861978]\n [ -4.19938811  -6.23164041]\n [ -7.74831012  -8.11005414]\n [ -1.23685356   8.86555298]\n [ -5.09809513  -3.58910061]\n [ -3.79021113   6.80888068]\n [ -6.91573574  -9.88324211]\n [ -4.51590911  -4.84413771]\n [ -8.77262751  -7.35593279]\n [ -7.28799049  -9.16746292]\n [ -3.98190676  -4.23609767]\n [ -4.65384266  -2.58075719]\n [ -5.02321111  -2.68463799]\n [ -4.58524512  -4.10946955]\n [ -5.24373979  -3.74795874]\n [-11.01577947  -9.9353368 ]\n [ -3.15035365   8.24294577]\n [ -9.98727751  -9.2232785 ]\n [ -7.96637959  -7.93240073]\n [ -3.48532399   6.30708349]\n [ -4.24584787  -2.4117498 ]\n [ -4.45721313   7.24095262]\n [ -3.87159358   7.13329624]\n [ -4.08625018   6.55658789]\n [ -2.01377467   9.04961864]\n [ -3.43826932   4.67530358]\n [ -5.73577548  -4.21981801]\n [ -3.84757275   6.99428658]\n [ -9.87482319 -10.20147809]\n [ -3.98591018   7.94426246]\n [ -7.83880925  -9.33860671]\n [ -3.84965636  -3.79129671]\n [ -3.51874162   9.27228338]\n [ -6.06738687  -2.50552921]\n [ -7.96018204 -10.1412735 ]\n [ -8.2036834   -8.66418818]\n [ -9.37922012 -10.06139719]\n [ -8.15355744  -8.18449364]\n [ -9.08212127 -10.35843858]\n [ -8.78423873  -9.57365903]\n [ -3.76864333   7.0416406 ]\n [ -3.16337112   7.80951918]\n [ -3.52358208   7.15561769]\n [ -8.55113381  -8.70957021]\n [ -6.41347354  -4.74932969]\n [ -1.61107016   8.80371738]\n [ -2.8548109    5.99817766]\n [ -4.24050868   6.25033848]\n [ -8.94439772 -10.68174909]]"}, "kwargs": {"copy": true, "accept_sparse": null, "dtype": [{"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}]}}, "return": "[[ -3.39600884   6.50194254]\n [ -4.02783992  -4.45503788]\n [ -3.45730396   9.73902939]\n [ -2.97240181   7.53619755]\n [-10.46769913  -7.9013419 ]\n [ -2.86414537   6.76008686]\n [ -3.89653202  -3.02847892]\n [ -4.81020833  -4.60608154]\n [ -3.21140666   7.85784826]\n [ -5.02544863  -2.36628969]\n [ -3.12605047  -4.44681733]\n [ -4.442638    -3.7885328 ]\n [ -8.71686953  -8.83152987]\n [ -4.33070311  -3.65881398]\n [ -8.79311514  -9.30931686]\n [ -1.61578499   7.24234295]\n [ -6.61426106  -9.71784004]\n [ -7.5182091  -10.95415619]\n [ -4.8465389   -3.20648284]\n [ -4.05833261  -3.90050745]\n [ -3.46883122  -4.63850879]\n [ -5.18829639  -2.20688609]\n [ -8.98961598  -9.14646718]\n [ -4.96938564  -5.11382038]\n [ -7.60101092  -8.88988748]\n [ -5.8983897   -3.31370609]\n [ -3.6045966    7.02622798]\n [ -5.10185704  -4.49751513]\n [ -4.13034943  -4.14592378]\n [ -6.20816514  -3.79345484]\n [ -7.68124464  -9.916128  ]\n [ -3.6756038    6.31233785]\n [ -3.73460724   7.57661369]\n [ -3.85191445   7.37626406]\n [ -9.80966402  -9.27555647]\n [ -3.98878801   7.21614852]\n [ -7.7184154  -10.71913603]\n [ -8.76422173  -9.21216666]\n [ -3.20848809   8.13738641]\n [ -3.30228579   9.20019723]\n [ -9.0197638   -9.69533287]\n [ -6.00865881  -2.81135441]\n [ -5.36549747   7.50644983]\n [ -8.83675889  -7.98459572]\n [ -7.09922486  -9.9091714 ]\n [ -8.07113133 -10.19027845]\n [ -8.59442945  -9.50748093]\n [ -5.27490817  -2.251705  ]\n [ -4.62107929   6.68155428]\n [ -3.49199547  -3.05686162]\n [ -4.64661534   5.9997464 ]\n [ -4.60144994  -4.99861978]\n [ -4.19938811  -6.23164041]\n [ -7.74831012  -8.11005414]\n [ -1.23685356   8.86555298]\n [ -5.09809513  -3.58910061]\n [ -3.79021113   6.80888068]\n [ -6.91573574  -9.88324211]\n [ -4.51590911  -4.84413771]\n [ -8.77262751  -7.35593279]\n [ -7.28799049  -9.16746292]\n [ -3.98190676  -4.23609767]\n [ -4.65384266  -2.58075719]\n [ -5.02321111  -2.68463799]\n [ -4.58524512  -4.10946955]\n [ -5.24373979  -3.74795874]\n [-11.01577947  -9.9353368 ]\n [ -3.15035365   8.24294577]\n [ -9.98727751  -9.2232785 ]\n [ -7.96637959  -7.93240073]\n [ -3.48532399   6.30708349]\n [ -4.24584787  -2.4117498 ]\n [ -4.45721313   7.24095262]\n [ -3.87159358   7.13329624]\n [ -4.08625018   6.55658789]\n [ -2.01377467   9.04961864]\n [ -3.43826932   4.67530358]\n [ -5.73577548  -4.21981801]\n [ -3.84757275   6.99428658]\n [ -9.87482319 -10.20147809]\n [ -3.98591018   7.94426246]\n [ -7.83880925  -9.33860671]\n [ -3.84965636  -3.79129671]\n [ -3.51874162   9.27228338]\n [ -6.06738687  -2.50552921]\n [ -7.96018204 -10.1412735 ]\n [ -8.2036834   -8.66418818]\n [ -9.37922012 -10.06139719]\n [ -8.15355744  -8.18449364]\n [ -9.08212127 -10.35843858]\n [ -8.78423873  -9.57365903]\n [ -3.76864333   7.0416406 ]\n [ -3.16337112   7.80951918]\n [ -3.52358208   7.15561769]\n [ -8.55113381  -8.70957021]\n [ -6.41347354  -4.74932969]\n [ -1.61107016   8.80371738]\n [ -2.8548109    5.99817766]\n [ -4.24050868   6.25033848]\n [ -8.94439772 -10.68174909]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": "np.ndarray[float64]"}, "kwargs": {"accept_sparse": "str", "accept_large_sparse": "bool", "dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "order": "str", "copy": "bool", "force_all_finite": "bool", "ensure_2d": "bool", "allow_nd": "bool", "ensure_min_samples": "int", "ensure_min_features": "int", "warn_on_dtype": "bool", "estimator": "null value in the ground truth"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": "[[ 4.48496291  0.84237892]\n [-6.83823889 -6.37338939]\n [ 2.36336432  2.52358889]\n [ 4.83320476  2.23338172]\n [ 2.26466884  1.19823515]\n [ 7.53619218 -4.63376125]\n [ 8.16987227 -4.06936885]\n [ 6.22150242  4.37166425]\n [-7.69846233 -9.20146804]\n [ 4.13080014  0.9159107 ]\n [ 7.20394138 -3.53351847]\n [ 4.32254464  1.18808098]\n [-8.47827674 -8.91224697]\n [-7.98650732 -8.37458709]\n [ 5.34254297  0.59988731]\n [ 7.61991618 -2.60257354]\n [ 8.78056491 -3.50497654]\n [ 6.17285159 -2.75062162]\n [ 7.24552648 -4.3224802 ]\n [ 8.15580578 -3.04308222]\n [-6.70743055 -8.12800741]\n [ 6.82747295 -5.11535586]\n [ 2.18278349  1.35445278]\n [ 7.75154102 -3.50849015]\n [ 8.27767261 -3.9744562 ]\n [ 7.9799354  -3.55403267]\n [ 8.08062257 -2.64786747]\n [ 4.10059574  1.26052184]\n [-9.31473014 -8.06354323]\n [ 4.99782438  2.19159702]\n [ 6.29712876 -4.1008149 ]\n [-5.84007103 -8.34543475]\n [-7.78593677 -8.3430889 ]\n [ 8.53527131 -4.44054086]\n [ 7.18066761 -4.55745855]\n [-9.28832686 -9.25367208]\n [-6.57100522 -6.86855433]\n [ 5.85163926  2.86282907]\n [-6.97922317 -8.30431016]\n [-6.65243923 -8.63016299]\n [-8.64626075 -9.37409589]\n [ 5.59220794  1.66197108]\n [-8.72007724 -7.81062992]\n [ 8.1467862  -2.76468134]\n [ 5.46331221  2.06509244]\n [ 8.28954977 -5.58755509]\n [ 8.14024278 -3.93111423]\n [-7.90902799 -5.77926618]\n [ 4.91434518  2.09900902]\n [-8.08100332 -8.43898862]\n [ 7.41009723 -2.65743664]\n [ 4.49673126  2.77630621]\n [-8.15858686 -8.11102393]\n [ 8.29039222 -3.78162585]\n [ 4.51201054  0.98639823]\n [ 6.93505111 -1.53206718]\n [ 6.75871105 -3.59528311]\n [ 5.43110437  2.56706573]\n [ 3.46215736  1.03158549]\n [ 8.73421217 -2.52443738]\n [ 4.63876674  0.78025383]\n [-8.08018094 -8.56201818]\n [-7.85427099 -9.07268264]\n [ 5.09255723  3.72668267]\n [ 4.47876409  2.855043  ]\n [ 8.10193371 -4.28049517]\n [ 4.61183713  1.90484546]\n [-8.62508664 -8.50852142]\n [ 6.47111371 -5.43516319]\n [ 7.82251946 -4.00159156]\n [-6.70187973 -8.37266734]\n [ 3.80455689  1.0844964 ]\n [ 5.41164163  2.10817177]\n [ 5.82155875  2.71211656]\n [ 2.41542528  3.07046122]\n [-8.36602962 -8.10440994]\n [ 3.15562868  2.98759646]\n [ 4.61500039  1.77629444]\n [-9.39920763 -7.3224607 ]\n [ 5.84967911  4.17630621]\n [-6.90595611 -8.56416077]\n [ 4.68378413  2.9049038 ]\n [-8.63370039 -8.33613308]\n [-9.95360986 -8.47281191]\n [-8.10704873 -8.07927358]\n [ 6.51199813 -4.17430244]\n [ 9.43461954 -3.06856749]\n [ 8.47444166 -2.99898409]\n [-7.71256943 -9.59762128]\n [ 4.17782437  2.14360186]\n [ 3.9895179   1.43330792]\n [ 7.60709946 -3.94918736]\n [ 4.47512558  2.55521777]\n [-7.32515736 -8.48687973]\n [-6.78713047 -9.10463053]\n [-7.92188331 -8.55672765]\n [-9.32806881 -8.13367289]\n [-8.60459141 -8.24196977]\n [ 8.84491366 -3.68712644]\n [ 7.70198863 -5.28769661]]"}, "kwargs": {"accept_sparse": "csr", "accept_large_sparse": false, "dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "order": "C", "copy": false, "force_all_finite": true, "ensure_2d": true, "allow_nd": false, "ensure_min_samples": 1, "ensure_min_features": 1, "warn_on_dtype": false, "estimator": null}}, "return": "[[ 4.48496291  0.84237892]\n [-6.83823889 -6.37338939]\n [ 2.36336432  2.52358889]\n [ 4.83320476  2.23338172]\n [ 2.26466884  1.19823515]\n [ 7.53619218 -4.63376125]\n [ 8.16987227 -4.06936885]\n [ 6.22150242  4.37166425]\n [-7.69846233 -9.20146804]\n [ 4.13080014  0.9159107 ]\n [ 7.20394138 -3.53351847]\n [ 4.32254464  1.18808098]\n [-8.47827674 -8.91224697]\n [-7.98650732 -8.37458709]\n [ 5.34254297  0.59988731]\n [ 7.61991618 -2.60257354]\n [ 8.78056491 -3.50497654]\n [ 6.17285159 -2.75062162]\n [ 7.24552648 -4.3224802 ]\n [ 8.15580578 -3.04308222]\n [-6.70743055 -8.12800741]\n [ 6.82747295 -5.11535586]\n [ 2.18278349  1.35445278]\n [ 7.75154102 -3.50849015]\n [ 8.27767261 -3.9744562 ]\n [ 7.9799354  -3.55403267]\n [ 8.08062257 -2.64786747]\n [ 4.10059574  1.26052184]\n [-9.31473014 -8.06354323]\n [ 4.99782438  2.19159702]\n [ 6.29712876 -4.1008149 ]\n [-5.84007103 -8.34543475]\n [-7.78593677 -8.3430889 ]\n [ 8.53527131 -4.44054086]\n [ 7.18066761 -4.55745855]\n [-9.28832686 -9.25367208]\n [-6.57100522 -6.86855433]\n [ 5.85163926  2.86282907]\n [-6.97922317 -8.30431016]\n [-6.65243923 -8.63016299]\n [-8.64626075 -9.37409589]\n [ 5.59220794  1.66197108]\n [-8.72007724 -7.81062992]\n [ 8.1467862  -2.76468134]\n [ 5.46331221  2.06509244]\n [ 8.28954977 -5.58755509]\n [ 8.14024278 -3.93111423]\n [-7.90902799 -5.77926618]\n [ 4.91434518  2.09900902]\n [-8.08100332 -8.43898862]\n [ 7.41009723 -2.65743664]\n [ 4.49673126  2.77630621]\n [-8.15858686 -8.11102393]\n [ 8.29039222 -3.78162585]\n [ 4.51201054  0.98639823]\n [ 6.93505111 -1.53206718]\n [ 6.75871105 -3.59528311]\n [ 5.43110437  2.56706573]\n [ 3.46215736  1.03158549]\n [ 8.73421217 -2.52443738]\n [ 4.63876674  0.78025383]\n [-8.08018094 -8.56201818]\n [-7.85427099 -9.07268264]\n [ 5.09255723  3.72668267]\n [ 4.47876409  2.855043  ]\n [ 8.10193371 -4.28049517]\n [ 4.61183713  1.90484546]\n [-8.62508664 -8.50852142]\n [ 6.47111371 -5.43516319]\n [ 7.82251946 -4.00159156]\n [-6.70187973 -8.37266734]\n [ 3.80455689  1.0844964 ]\n [ 5.41164163  2.10817177]\n [ 5.82155875  2.71211656]\n [ 2.41542528  3.07046122]\n [-8.36602962 -8.10440994]\n [ 3.15562868  2.98759646]\n [ 4.61500039  1.77629444]\n [-9.39920763 -7.3224607 ]\n [ 5.84967911  4.17630621]\n [-6.90595611 -8.56416077]\n [ 4.68378413  2.9049038 ]\n [-8.63370039 -8.33613308]\n [-9.95360986 -8.47281191]\n [-8.10704873 -8.07927358]\n [ 6.51199813 -4.17430244]\n [ 9.43461954 -3.06856749]\n [ 8.47444166 -2.99898409]\n [-7.71256943 -9.59762128]\n [ 4.17782437  2.14360186]\n [ 3.9895179   1.43330792]\n [ 7.60709946 -3.94918736]\n [ 4.47512558  2.55521777]\n [-7.32515736 -8.48687973]\n [-6.78713047 -9.10463053]\n [-7.92188331 -8.55672765]\n [-9.32806881 -8.13367289]\n [-8.60459141 -8.24196977]\n [ 8.84491366 -3.68712644]\n [ 7.70198863 -5.28769661]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_is_copy": "null value in the ground truth", "_mgr": "in ground truth values, it is an empty dict", "_item_cache": "in ground truth values, it is an empty dict", "_attrs": "in ground truth values, it is an empty dict"}}, "kwargs": {"dtype": {"__repr__": "str", "__hash__": "str", "__str__": "str", "__lt__": "str", "__le__": "str", "__eq__": "str", "__ne__": "str", "__gt__": "str", "__ge__": "str", "__add__": "str", "__radd__": "str", "__sub__": "str", "__rsub__": "str", "__mul__": "str", "__rmul__": "str", "__mod__": "str", "__rmod__": "str", "__divmod__": "str", "__rdivmod__": "str", "__pow__": "str", "__rpow__": "str", "__neg__": "str", "__pos__": "str", "__abs__": "str", "__bool__": "str", "__int__": "str", "__float__": "str", "__floordiv__": "str", "__rfloordiv__": "str", "__truediv__": "str", "__rtruediv__": "str", "__new__": "str", "as_integer_ratio": "str", "__doc__": "null value in the ground truth"}, "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"_is_copy": null, "_mgr": {}, "_item_cache": {}, "_attrs": {}}}, "kwargs": {"dtype": {"__repr__": "\"<function __repr__>\"", "__hash__": "\"<function __hash__>\"", "__str__": "\"<function __str__>\"", "__lt__": "\"<function __lt__>\"", "__le__": "\"<function __le__>\"", "__eq__": "\"<function __eq__>\"", "__ne__": "\"<function __ne__>\"", "__gt__": "\"<function __gt__>\"", "__ge__": "\"<function __ge__>\"", "__add__": "\"<function __add__>\"", "__radd__": "\"<function __radd__>\"", "__sub__": "\"<function __sub__>\"", "__rsub__": "\"<function __rsub__>\"", "__mul__": "\"<function __mul__>\"", "__rmul__": "\"<function __rmul__>\"", "__mod__": "\"<function __mod__>\"", "__rmod__": "\"<function __rmod__>\"", "__divmod__": "\"<function __divmod__>\"", "__rdivmod__": "\"<function __rdivmod__>\"", "__pow__": "\"<function __pow__>\"", "__rpow__": "\"<function __rpow__>\"", "__neg__": "\"<function __neg__>\"", "__pos__": "\"<function __pos__>\"", "__abs__": "\"<function __abs__>\"", "__bool__": "\"<function __bool__>\"", "__int__": "\"<function __int__>\"", "__float__": "\"<function __float__>\"", "__floordiv__": "\"<function __floordiv__>\"", "__rfloordiv__": "\"<function __rfloordiv__>\"", "__truediv__": "\"<function __truediv__>\"", "__rtruediv__": "\"<function __rtruediv__>\"", "__new__": "\"<function __new__>\"", "as_integer_ratio": "\"<function as_integer_ratio>\"", "__doc__": null}, "warn_on_dtype": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_is_copy": "null value in the ground truth", "_mgr": "in ground truth values, it is an empty dict", "_item_cache": "in ground truth values, it is an empty dict", "_attrs": "in ground truth values, it is an empty dict"}}, "kwargs": {"dtype": "str", "warn_on_dtype": "bool"}}, "return": "np.ndarray[float64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"_is_copy": null, "_mgr": {}, "_item_cache": {}, "_attrs": {}}}, "kwargs": {"dtype": "numeric", "warn_on_dtype": true}}, "return": "[[1. 2. 3.]\n [4. 5. 6.]]"}, "name": "check_array"}
{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": {"array": {"_is_copy": "null value in the ground truth", "_mgr": "in ground truth values, it is an empty dict", "_item_cache": "in ground truth values, it is an empty dict", "_attrs": "in ground truth values, it is an empty dict"}}, "kwargs": {"dtype": "np.ndarray[type]", "warn_on_dtype": "bool"}}, "return": "np.ndarray[int64]"}, "values": {"inputs": {"self": {}, "args": {"array": {"_is_copy": null, "_mgr": {}, "_item_cache": {}, "_attrs": {}}}, "kwargs": {"dtype": "object", "warn_on_dtype": true}}, "return": "[[1 2 3]\n [4 5 6]]"}, "name": "check_array"}
