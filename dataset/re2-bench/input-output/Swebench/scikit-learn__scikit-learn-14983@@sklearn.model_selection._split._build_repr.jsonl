{"types": {"inputs": {"self": "in ground truth values, it is an empty dict", "args": "in ground truth values, it is an empty dict", "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {}, "args": {}, "kwargs": {}}, "return": "LeaveOneOut()"}, "name": "_build_repr"}
{"types": {"inputs": {"self": {"p": "int"}, "args": "in ground truth values, it is an empty dict", "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {"p": 2}, "args": {}, "kwargs": {}}, "return": "LeavePOut(p=2)"}, "name": "_build_repr"}
{"types": {"inputs": {"self": {"n_splits": "int", "shuffle": "bool", "random_state": "null value in the ground truth"}, "args": "in ground truth values, it is an empty dict", "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {"n_splits": 2, "shuffle": false, "random_state": null}, "args": {}, "kwargs": {}}, "return": "KFold(n_splits=2, random_state=None, shuffle=False)"}, "name": "_build_repr"}
{"types": {"inputs": {"self": {"n_groups": "int"}, "args": "in ground truth values, it is an empty dict", "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {"n_groups": 2}, "args": {}, "kwargs": {}}, "return": "LeavePGroupsOut(n_groups=2)"}, "name": "_build_repr"}
{"types": {"inputs": {"self": {"n_splits": "int", "test_size": "null value in the ground truth", "train_size": "null value in the ground truth", "random_state": "int", "_default_test_size": "float"}, "args": "in ground truth values, it is an empty dict", "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {"n_splits": 10, "test_size": null, "train_size": null, "random_state": 0, "_default_test_size": 0.1}, "args": {}, "kwargs": {}}, "return": "ShuffleSplit(n_splits=10, random_state=0, test_size=None, train_size=None)"}, "name": "_build_repr"}
{"types": {"inputs": {"self": {"test_fold": "np.ndarray[int64]", "unique_folds": "np.ndarray[int64]"}, "args": "in ground truth values, it is an empty dict", "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {"test_fold": "[1 1 2 2]", "unique_folds": "[1 2]"}, "args": {}, "kwargs": {}}, "return": "PredefinedSplit(test_fold=\"array([1, 1, 2, 2])\")"}, "name": "_build_repr"}
{"types": {"inputs": {"self": {"n_splits": "int", "test_size": "float", "train_size": "null value in the ground truth", "random_state": "int", "_default_test_size": "float"}, "args": "in ground truth values, it is an empty dict", "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {"n_splits": 6, "test_size": 0.3333333333333333, "train_size": null, "random_state": 0, "_default_test_size": 0.2}, "args": {}, "kwargs": {}}, "return": "GroupShuffleSplit(n_splits=6, random_state=0, test_size=0.3333333333333333,\n         train_size=None)"}, "name": "_build_repr"}
{"types": {"inputs": {"self": {"n_groups": "int"}, "args": "in ground truth values, it is an empty dict", "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {"n_groups": 1}, "args": {}, "kwargs": {}}, "return": "LeavePGroupsOut(n_groups=1)"}, "name": "_build_repr"}
{"types": {"inputs": {"self": {"n_groups": "int"}, "args": "in ground truth values, it is an empty dict", "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {"n_groups": 3}, "args": {}, "kwargs": {}}, "return": "LeavePGroupsOut(n_groups=3)"}, "name": "_build_repr"}
{"types": {"inputs": {"self": {"cv": {"__module__": "str", "__doc__": "numpy.random.RandomState", "__init__": "in ground truth values, it is an empty dict", "_iter_test_indices": "in ground truth values, it is an empty dict", "__abstractmethods__": "np.ndarray[frozenset]", "_abc_registry": {"data": "in ground truth values, it is an empty set", "_remove": "in ground truth values, it is an empty dict", "_pending_removals": "null value in the ground truth", "_iterating": "in ground truth values, it is an empty set"}, "_abc_cache": {"data": "in ground truth values, it is an empty set", "_remove": "in ground truth values, it is an empty dict", "_pending_removals": "null value in the ground truth", "_iterating": "in ground truth values, it is an empty set"}, "_abc_negative_cache": {"data": "in ground truth values, it is an empty set", "_remove": "in ground truth values, it is an empty dict", "_pending_removals": "null value in the ground truth", "_iterating": "in ground truth values, it is an empty set"}, "_abc_negative_cache_version": "int"}, "n_repeats": "int", "random_state": "null value in the ground truth", "cvargs": {"n_splits": "int"}}, "args": "in ground truth values, it is an empty dict", "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {"cv": {"__module__": "sklearn.model_selection._split", "__doc__": "K-Folds cross-validator\n\n    Provides train/test indices to split data in train/test sets. Split\n    dataset into k consecutive \"folds (without shuffling by default)\".\n\n    Each fold is then used once as a validation while the k - 1 remaining\n    folds form the training set.\n\n    Read more in the :ref:`User Guide \"<cross_validation>\"`.\n\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of folds. Must be at least 2.\n\n        .. versionchanged:: 0.22\n            ``n_splits`` default value changed from 3 to 5.\n\n    shuffle : boolean, optional\n        Whether to shuffle the data before splitting into batches.\n\n    random_state : int, RandomState instance or None, optional, default=None\n        If int, random_state is the seed used by the random number generator;\n        If RandomState instance, random_state is the random number generator;\n        If None, the random number generator is the RandomState instance used\n        by `np.random`. Used when ``shuffle`` == True.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.model_selection import KFold\n    >>> X = \"np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\"\n    >>> y = \"np.array([1, 2, 3, 4])\"\n    >>> kf = \"KFold(n_splits=2)\"\n    >>> \"kf.get_n_splits(X)\"\n    2\n    >>> \"print(kf)\"\n    \"KFold(n_splits=2, random_state=None, shuffle=False)\"\n    >>> for train_index, test_index in \"kf.split(X)\":\n    ...    \"print(\"TRAIN:\", train_index, \"TEST:\", test_index)\"\n    ...    X_train, X_test = X[train_index], X[test_index]\n    ...    y_train, y_test = y[train_index], y[test_index]\n    TRAIN: [2 3] TEST: [0 1]\n    TRAIN: [0 1] TEST: [2 3]\n\n    Notes\n    -----\n    The first ``n_samples % n_splits`` folds have size\n    ``n_samples // n_splits + 1``, other folds have size\n    ``n_samples // n_splits``, where ``n_samples`` is the number of samples.\n\n    Randomized CV splitters may return different results for each call of\n    split. You can make the results identical by setting ``random_state``\n    to an integer.\n\n    See also\n    --------\n    StratifiedKFold\n        Takes group information into account to avoid building folds with\n        imbalanced class \"distributions (for binary or multiclass\n        classification tasks)\".\n\n    GroupKFold: K-fold iterator variant with non-overlapping groups.\n\n    RepeatedKFold: Repeats K-Fold n times.\n    ", "__init__": {}, "_iter_test_indices": {}, "__abstractmethods__": "frozenset()", "_abc_registry": {"data": "set()", "_remove": {}, "_pending_removals": null, "_iterating": "set()"}, "_abc_cache": {"data": "set()", "_remove": {}, "_pending_removals": null, "_iterating": "set()"}, "_abc_negative_cache": {"data": "set()", "_remove": {}, "_pending_removals": null, "_iterating": "set()"}, "_abc_negative_cache_version": 45}, "n_repeats": 6, "random_state": null, "cvargs": {"n_splits": 2}}, "args": {}, "kwargs": {}}, "return": "RepeatedKFold(n_repeats=6, n_splits=2, random_state=None)"}, "name": "_build_repr"}
{"types": {"inputs": {"self": {"cv": {"__module__": "str", "__doc__": "numpy.random.RandomState", "__init__": "in ground truth values, it is an empty dict", "_make_test_folds": "in ground truth values, it is an empty dict", "_iter_test_masks": "in ground truth values, it is an empty dict", "split": "in ground truth values, it is an empty dict", "__abstractmethods__": "np.ndarray[frozenset]", "_abc_registry": {"data": "in ground truth values, it is an empty set", "_remove": "in ground truth values, it is an empty dict", "_pending_removals": "null value in the ground truth", "_iterating": "in ground truth values, it is an empty set"}, "_abc_cache": {"data": "in ground truth values, it is an empty set", "_remove": "in ground truth values, it is an empty dict", "_pending_removals": "null value in the ground truth", "_iterating": "in ground truth values, it is an empty set"}, "_abc_negative_cache": {"data": "in ground truth values, it is an empty set", "_remove": "in ground truth values, it is an empty dict", "_pending_removals": "null value in the ground truth", "_iterating": "in ground truth values, it is an empty set"}, "_abc_negative_cache_version": "int"}, "n_repeats": "int", "random_state": "null value in the ground truth", "cvargs": {"n_splits": "int"}}, "args": "in ground truth values, it is an empty dict", "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {"cv": {"__module__": "sklearn.model_selection._split", "__doc__": "Stratified K-Folds cross-validator\n\n    Provides train/test indices to split data in train/test sets.\n\n    This cross-validation object is a variation of KFold that returns\n    stratified folds. The folds are made by preserving the percentage of\n    samples for each class.\n\n    Read more in the :ref:`User Guide \"<cross_validation>\"`.\n\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of folds. Must be at least 2.\n\n        .. versionchanged:: 0.22\n            ``n_splits`` default value changed from 3 to 5.\n\n    shuffle : boolean, optional\n        Whether to shuffle each class's samples before splitting into batches.\n\n    random_state : int, RandomState instance or None, optional, default=None\n        If int, random_state is the seed used by the random number generator;\n        If RandomState instance, random_state is the random number generator;\n        If None, the random number generator is the RandomState instance used\n        by `np.random`. Used when ``shuffle`` == True.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.model_selection import StratifiedKFold\n    >>> X = \"np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\"\n    >>> y = \"np.array([0, 0, 1, 1])\"\n    >>> skf = \"StratifiedKFold(n_splits=2)\"\n    >>> \"skf.get_n_splits(X, y)\"\n    2\n    >>> \"print(skf)\"\n    \"StratifiedKFold(n_splits=2, random_state=None, shuffle=False)\"\n    >>> for train_index, test_index in \"skf.split(X, y)\":\n    ...    \"print(\"TRAIN:\", train_index, \"TEST:\", test_index)\"\n    ...    X_train, X_test = X[train_index], X[test_index]\n    ...    y_train, y_test = y[train_index], y[test_index]\n    TRAIN: [1 3] TEST: [0 2]\n    TRAIN: [0 2] TEST: [1 3]\n\n    Notes\n    -----\n    The implementation is designed to:\n\n    * Generate test sets such that all contain the same distribution of\n      classes, or as close as possible.\n    * Be invariant to class label: relabelling ``y = [\"Happy\", \"Sad\"]`` to\n      ``y = [1, 0]`` should not change the indices generated.\n    * Preserve order dependencies in the dataset ordering, when\n      ``shuffle=False``: all samples from class k in some test set were\n      contiguous in y, or separated in y by samples from classes other than k.\n    * Generate test sets where the smallest and largest differ by at most one\n      sample.\n\n    .. versionchanged:: 0.22\n        The previous implementation did not follow the last constraint.\n\n    See also\n    --------\n    RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n    ", "__init__": {}, "_make_test_folds": {}, "_iter_test_masks": {}, "split": {}, "__abstractmethods__": "frozenset()", "_abc_registry": {"data": "set()", "_remove": {}, "_pending_removals": null, "_iterating": "set()"}, "_abc_cache": {"data": "set()", "_remove": {}, "_pending_removals": null, "_iterating": "set()"}, "_abc_negative_cache": {"data": "set()", "_remove": {}, "_pending_removals": null, "_iterating": "set()"}, "_abc_negative_cache_version": 45}, "n_repeats": 6, "random_state": null, "cvargs": {"n_splits": 2}}, "args": {}, "kwargs": {}}, "return": "RepeatedStratifiedKFold(n_repeats=6, n_splits=2, random_state=None)"}, "name": "_build_repr"}
{"types": {"inputs": {"self": {"a": "int", "b": "int", "c": "null value in the ground truth"}, "args": "in ground truth values, it is an empty dict", "kwargs": "in ground truth values, it is an empty dict"}, "return": "str"}, "values": {"inputs": {"self": {"a": 5, "b": 6, "c": null}, "args": {}, "kwargs": {}}, "return": "MockSplitter(a=5, b=6, c=None)"}, "name": "_build_repr"}
