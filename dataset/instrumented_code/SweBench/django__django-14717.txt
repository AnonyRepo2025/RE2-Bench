diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 7198d43..b1d257e 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/django__django-14717/django/db/models/fields/__init__.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 import collections.abc
 import copy
 import datetime
@@ -1103,6 +1296,17 @@ class CommaSeparatedIntegerField(CharField):
     }
 
 
+@inspect_code
+def _to_naive(value):
+    if timezone.is_aware(value):
+        value = timezone.make_naive(value, timezone.utc)
+    return value
+
+
+def _get_naive_now():
+    return _to_naive(timezone.now())
+
+
 class DateTimeCheckMixin:
 
     def check(self, **kwargs):
@@ -1134,6 +1338,42 @@ class DateTimeCheckMixin:
     def _check_fix_default_value(self):
         return []
 
+    # Concrete subclasses use this in their implementations of
+    # _check_fix_default_value().
+    def _check_if_value_fixed(self, value, now=None):
+        """
+        Check if the given value appears to have been provided as a "fixed"
+        time value, and include a warning in the returned list if it does. The
+        value argument must be a date object or aware/naive datetime object. If
+        now is provided, it must be a naive datetime object.
+        """
+        if now is None:
+            now = _get_naive_now()
+        offset = datetime.timedelta(seconds=10)
+        lower = now - offset
+        upper = now + offset
+        if isinstance(value, datetime.datetime):
+            value = _to_naive(value)
+        else:
+            assert isinstance(value, datetime.date)
+            lower = lower.date()
+            upper = upper.date()
+        if lower <= value <= upper:
+            return [
+                checks.Warning(
+                    'Fixed default value provided.',
+                    hint=(
+                        'It seems you set a fixed date / time / datetime '
+                        'value as default for this field. This may not be '
+                        'what you want. If you want to have the current date '
+                        'as default, use `django.utils.timezone.now`'
+                    ),
+                    obj=self,
+                    id='fields.W161',
+                )
+            ]
+        return []
+
 
 class DateField(DateTimeCheckMixin, Field):
     empty_strings_allowed = False
@@ -1161,37 +1401,16 @@ class DateField(DateTimeCheckMixin, Field):
         if not self.has_default():
             return []
 
-        now = timezone.now()
-        if not timezone.is_naive(now):
-            now = timezone.make_naive(now, timezone.utc)
         value = self.default
         if isinstance(value, datetime.datetime):
-            if not timezone.is_naive(value):
-                value = timezone.make_naive(value, timezone.utc)
-            value = value.date()
+            value = _to_naive(value).date()
         elif isinstance(value, datetime.date):
-            # Nothing to do, as dates don't have tz information
             pass
         else:
             # No explicit date / datetime value -- no checks necessary
             return []
-        offset = datetime.timedelta(days=1)
-        lower = (now - offset).date()
-        upper = (now + offset).date()
-        if lower <= value <= upper:
-            return [
-                checks.Warning(
-                    'Fixed default value provided.',
-                    hint='It seems you set a fixed date / time / datetime '
-                         'value as default for this field. This may not be '
-                         'what you want. If you want to have the current date '
-                         'as default, use `django.utils.timezone.now`',
-                    obj=self,
-                    id='fields.W161',
-                )
-            ]
-
-        return []
+        # At this point, value is a date object.
+        return self._check_if_value_fixed(value)
 
     def deconstruct(self):
         name, path, args, kwargs = super().deconstruct()
@@ -1293,6 +1512,7 @@ class DateTimeField(DateField):
 
     # __init__ is inherited from DateField
 
+    @inspect_code
     def _check_fix_default_value(self):
         """
         Warn that using an actual date or datetime value is probably wrong;
@@ -1301,39 +1521,10 @@ class DateTimeField(DateField):
         if not self.has_default():
             return []
 
-        now = timezone.now()
-        if not timezone.is_naive(now):
-            now = timezone.make_naive(now, timezone.utc)
         value = self.default
-        if isinstance(value, datetime.datetime):
-            second_offset = datetime.timedelta(seconds=10)
-            lower = now - second_offset
-            upper = now + second_offset
-            if timezone.is_aware(value):
-                value = timezone.make_naive(value, timezone.utc)
-        elif isinstance(value, datetime.date):
-            second_offset = datetime.timedelta(seconds=10)
-            lower = now - second_offset
-            lower = datetime.datetime(lower.year, lower.month, lower.day)
-            upper = now + second_offset
-            upper = datetime.datetime(upper.year, upper.month, upper.day)
-            value = datetime.datetime(value.year, value.month, value.day)
-        else:
-            # No explicit date / datetime value -- no checks necessary
-            return []
-        if lower <= value <= upper:
-            return [
-                checks.Warning(
-                    'Fixed default value provided.',
-                    hint='It seems you set a fixed date / time / datetime '
-                         'value as default for this field. This may not be '
-                         'what you want. If you want to have the current date '
-                         'as default, use `django.utils.timezone.now`',
-                    obj=self,
-                    id='fields.W161',
-                )
-            ]
-
+        if isinstance(value, (datetime.datetime, datetime.date)):
+            return self._check_if_value_fixed(value)
+        # No explicit date / datetime value -- no checks necessary.
         return []
 
     def get_internal_type(self):
@@ -2197,40 +2388,19 @@ class TimeField(DateTimeCheckMixin, Field):
         if not self.has_default():
             return []
 
-        now = timezone.now()
-        if not timezone.is_naive(now):
-            now = timezone.make_naive(now, timezone.utc)
         value = self.default
         if isinstance(value, datetime.datetime):
-            second_offset = datetime.timedelta(seconds=10)
-            lower = now - second_offset
-            upper = now + second_offset
-            if timezone.is_aware(value):
-                value = timezone.make_naive(value, timezone.utc)
+            now = None
         elif isinstance(value, datetime.time):
-            second_offset = datetime.timedelta(seconds=10)
-            lower = now - second_offset
-            upper = now + second_offset
+            now = _get_naive_now()
+            # This will not use the right date in the race condition where now
+            # is just before the date change and value is just past 0:00.
             value = datetime.datetime.combine(now.date(), value)
-            if timezone.is_aware(value):
-                value = timezone.make_naive(value, timezone.utc).time()
         else:
             # No explicit time / datetime value -- no checks necessary
             return []
-        if lower <= value <= upper:
-            return [
-                checks.Warning(
-                    'Fixed default value provided.',
-                    hint='It seems you set a fixed date / time / datetime '
-                         'value as default for this field. This may not be '
-                         'what you want. If you want to have the current date '
-                         'as default, use `django.utils.timezone.now`',
-                    obj=self,
-                    id='fields.W161',
-                )
-            ]
-
-        return []
+        # At this point, value is a datetime object.
+        return self._check_if_value_fixed(value, now=now)
 
     def deconstruct(self):
         name, path, args, kwargs = super().deconstruct()
diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py
index 6eddd85..7797b24 100644
--- a/tests/invalid_models_tests/test_ordinary_fields.py
+++ b/tests/invalid_models_tests/test_ordinary_fields.py
@@ -747,14 +747,16 @@ class TimeFieldTests(SimpleTestCase):
         class Model(models.Model):
             field_dt = models.TimeField(default=now())
             field_t = models.TimeField(default=now().time())
+            # Timezone-aware time object (when USE_TZ=True).
+            field_tz = models.TimeField(default=now().timetz())
             field_now = models.DateField(default=now)
 
-        field_dt = Model._meta.get_field('field_dt')
-        field_t = Model._meta.get_field('field_t')
-        field_now = Model._meta.get_field('field_now')
-        errors = field_dt.check()
-        errors.extend(field_t.check())
-        errors.extend(field_now.check())  # doesn't raise a warning
+        names = ['field_dt', 'field_t', 'field_tz', 'field_now']
+        fields = [Model._meta.get_field(name) for name in names]
+        errors = []
+        for field in fields:
+            errors.extend(field.check())
+
         self.assertEqual(errors, [
             DjangoWarning(
                 'Fixed default value provided.',
@@ -762,7 +764,7 @@ class TimeFieldTests(SimpleTestCase):
                      'value as default for this field. This may not be '
                      'what you want. If you want to have the current date '
                      'as default, use `django.utils.timezone.now`',
-                obj=field_dt,
+                obj=fields[0],
                 id='fields.W161',
             ),
             DjangoWarning(
@@ -771,9 +773,21 @@ class TimeFieldTests(SimpleTestCase):
                      'value as default for this field. This may not be '
                      'what you want. If you want to have the current date '
                      'as default, use `django.utils.timezone.now`',
-                obj=field_t,
+                obj=fields[1],
                 id='fields.W161',
-            )
+            ),
+            DjangoWarning(
+                'Fixed default value provided.',
+                hint=(
+                    'It seems you set a fixed date / time / datetime value as '
+                    'default for this field. This may not be what you want. '
+                    'If you want to have the current date as default, use '
+                    '`django.utils.timezone.now`'
+                ),
+                obj=fields[2],
+                id='fields.W161',
+            ),
+            # field_now doesn't raise a warning.
         ])
 
     @override_settings(USE_TZ=True)
