diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py
index d666a90..948444b 100644
--- a/lib/matplotlib/contour.py
+++ b/lib/matplotlib/contour.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/matplotlib__matplotlib-23266/lib/matplotlib/contour.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 """
 Classes to support contour plotting and labelling for the Axes class.
 """
@@ -696,12 +889,13 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):
     %(contour_set_attributes)s
     """
 
+    @inspect_code
     def __init__(self, ax, *args,
                  levels=None, filled=False, linewidths=None, linestyles=None,
                  hatches=(None,), alpha=None, origin=None, extent=None,
                  cmap=None, colors=None, norm=None, vmin=None, vmax=None,
                  extend='neither', antialiased=None, nchunk=0, locator=None,
-                 transform=None,
+                 transform=None, negative_linestyles=None,
                  **kwargs):
         """
         Draw contour lines or filled regions, depending on
@@ -786,6 +980,13 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):
 
         self._transform = transform
 
+        self.negative_linestyles = negative_linestyles
+        # If negative_linestyles was not defined as a kwarg,
+        # define negative_linestyles with rcParams
+        if self.negative_linestyles is None:
+            self.negative_linestyles = \
+                mpl.rcParams['contour.negative_linestyle']
+
         kwargs = self._process_args(*args, **kwargs)
         self._process_levels()
 
@@ -1270,17 +1471,17 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):
             tlinewidths = [(w,) for w in linewidths]
         return tlinewidths
 
+    @inspect_code
     def _process_linestyles(self):
         linestyles = self.linestyles
         Nlev = len(self.levels)
         if linestyles is None:
             tlinestyles = ['solid'] * Nlev
             if self.monochrome:
-                neg_ls = mpl.rcParams['contour.negative_linestyle']
                 eps = - (self.zmax - self.zmin) * 1e-15
                 for i, lev in enumerate(self.levels):
                     if lev < eps:
-                        tlinestyles[i] = neg_ls
+                        tlinestyles[i] = self.negative_linestyles
         else:
             if isinstance(linestyles, str):
                 tlinestyles = [linestyles] * Nlev
@@ -1751,6 +1952,18 @@ linestyles : {*None*, 'solid', 'dashed', 'dashdot', 'dotted'}, optional
     iterable is shorter than the number of contour levels
     it will be repeated as necessary.
 
+negative_linestyles : {*None*, 'solid', 'dashed', 'dashdot', 'dotted'}, \
+                       optional
+    *Only applies to* `.contour`.
+
+    If *negative_linestyles* is None, the default is 'dashed' for
+    negative contours.
+
+    *negative_linestyles* can also be an iterable of the above
+    strings specifying a set of linestyles to be used. If this
+    iterable is shorter than the number of contour levels
+    it will be repeated as necessary.
+
 hatches : list[str], optional
     *Only applies to* `.contourf`.
 
diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py
index 5f3f961..2c76f34 100644
--- a/lib/matplotlib/tests/test_contour.py
+++ b/lib/matplotlib/tests/test_contour.py
@@ -605,3 +605,80 @@ def test_subfigure_clabel():
         CS = ax.contour(X, Y, Z)
         ax.clabel(CS, inline=True, fontsize=10)
         ax.set_title("Simplest default with labels")
+
+
+@pytest.mark.parametrize(
+    "style", ['solid', 'dashed', 'dashdot', 'dotted'])
+def test_linestyles(style):
+    delta = 0.025
+    x = np.arange(-3.0, 3.0, delta)
+    y = np.arange(-2.0, 2.0, delta)
+    X, Y = np.meshgrid(x, y)
+    Z1 = np.exp(-X**2 - Y**2)
+    Z2 = np.exp(-(X - 1)**2 - (Y - 1)**2)
+    Z = (Z1 - Z2) * 2
+
+    # Positive contour defaults to solid
+    fig1, ax1 = plt.subplots()
+    CS1 = ax1.contour(X, Y, Z, 6, colors='k')
+    ax1.clabel(CS1, fontsize=9, inline=True)
+    ax1.set_title('Single color - positive contours solid (default)')
+    assert CS1.linestyles is None  # default
+
+    # Change linestyles using linestyles kwarg
+    fig2, ax2 = plt.subplots()
+    CS2 = ax2.contour(X, Y, Z, 6, colors='k', linestyles=style)
+    ax2.clabel(CS2, fontsize=9, inline=True)
+    ax2.set_title(f'Single color - positive contours {style}')
+    assert CS2.linestyles == style
+
+    # Ensure linestyles do not change when negative_linestyles is defined
+    fig3, ax3 = plt.subplots()
+    CS3 = ax3.contour(X, Y, Z, 6, colors='k', linestyles=style,
+                      negative_linestyles='dashdot')
+    ax3.clabel(CS3, fontsize=9, inline=True)
+    ax3.set_title(f'Single color - positive contours {style}')
+    assert CS3.linestyles == style
+
+
+@pytest.mark.parametrize(
+    "style", ['solid', 'dashed', 'dashdot', 'dotted'])
+def test_negative_linestyles(style):
+    delta = 0.025
+    x = np.arange(-3.0, 3.0, delta)
+    y = np.arange(-2.0, 2.0, delta)
+    X, Y = np.meshgrid(x, y)
+    Z1 = np.exp(-X**2 - Y**2)
+    Z2 = np.exp(-(X - 1)**2 - (Y - 1)**2)
+    Z = (Z1 - Z2) * 2
+
+    # Negative contour defaults to dashed
+    fig1, ax1 = plt.subplots()
+    CS1 = ax1.contour(X, Y, Z, 6, colors='k')
+    ax1.clabel(CS1, fontsize=9, inline=True)
+    ax1.set_title('Single color - negative contours dashed (default)')
+    assert CS1.negative_linestyles == 'dashed'  # default
+
+    # Change negative_linestyles using rcParams
+    plt.rcParams['contour.negative_linestyle'] = style
+    fig2, ax2 = plt.subplots()
+    CS2 = ax2.contour(X, Y, Z, 6, colors='k')
+    ax2.clabel(CS2, fontsize=9, inline=True)
+    ax2.set_title(f'Single color - negative contours {style}'
+                   '(using rcParams)')
+    assert CS2.negative_linestyles == style
+
+    # Change negative_linestyles using negative_linestyles kwarg
+    fig3, ax3 = plt.subplots()
+    CS3 = ax3.contour(X, Y, Z, 6, colors='k', negative_linestyles=style)
+    ax3.clabel(CS3, fontsize=9, inline=True)
+    ax3.set_title(f'Single color - negative contours {style}')
+    assert CS3.negative_linestyles == style
+
+    # Ensure negative_linestyles do not change when linestyles is defined
+    fig4, ax4 = plt.subplots()
+    CS4 = ax4.contour(X, Y, Z, 6, colors='k', linestyles='dashdot',
+                      negative_linestyles=style)
+    ax4.clabel(CS4, fontsize=9, inline=True)
+    ax4.set_title(f'Single color - negative contours {style}')
+    assert CS4.negative_linestyles == style
