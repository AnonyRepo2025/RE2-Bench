diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py
index c194ec0..42f5333 100644
--- a/xarray/core/rolling.py
+++ b/xarray/core/rolling.py
@@ -1,4 +1,197 @@
 from __future__ import annotations
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/pydata__xarray-7233/xarray/core/rolling.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 
 import functools
 import itertools
@@ -877,6 +1070,7 @@ class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):
             klass=self.__class__.__name__, attrs=",".join(attrs)
         )
 
+    @inspect_code
     def construct(
         self,
         window_dim=None,
@@ -973,7 +1167,10 @@ class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):
             else:
                 reshaped[key] = var
 
-        should_be_coords = set(window_dim) & set(self.obj.coords)
+        # should handle window_dim being unindexed
+        should_be_coords = (set(window_dim) & set(self.obj.coords)) | set(
+            self.obj.coords
+        )
         result = reshaped.set_coords(should_be_coords)
         if isinstance(self.obj, DataArray):
             return self.obj._from_temp_dataset(result)
diff --git a/xarray/tests/test_coarsen.py b/xarray/tests/test_coarsen.py
index d444998..542f681 100644
--- a/xarray/tests/test_coarsen.py
+++ b/xarray/tests/test_coarsen.py
@@ -250,71 +250,91 @@ def test_coarsen_da_reduce(da, window, name) -> None:
     assert_allclose(actual, expected)
 
 
-@pytest.mark.parametrize("dask", [True, False])
-def test_coarsen_construct(dask: bool) -> None:
-
-    ds = Dataset(
-        {
-            "vart": ("time", np.arange(48), {"a": "b"}),
-            "varx": ("x", np.arange(10), {"a": "b"}),
-            "vartx": (("x", "time"), np.arange(480).reshape(10, 48), {"a": "b"}),
-            "vary": ("y", np.arange(12)),
-        },
-        coords={"time": np.arange(48), "y": np.arange(12)},
-        attrs={"foo": "bar"},
-    )
-
-    if dask and has_dask:
-        ds = ds.chunk({"x": 4, "time": 10})
-
-    expected = xr.Dataset(attrs={"foo": "bar"})
-    expected["vart"] = (("year", "month"), ds.vart.data.reshape((-1, 12)), {"a": "b"})
-    expected["varx"] = (("x", "x_reshaped"), ds.varx.data.reshape((-1, 5)), {"a": "b"})
-    expected["vartx"] = (
-        ("x", "x_reshaped", "year", "month"),
-        ds.vartx.data.reshape(2, 5, 4, 12),
-        {"a": "b"},
-    )
-    expected["vary"] = ds.vary
-    expected.coords["time"] = (("year", "month"), ds.time.data.reshape((-1, 12)))
-
-    with raise_if_dask_computes():
-        actual = ds.coarsen(time=12, x=5).construct(
-            {"time": ("year", "month"), "x": ("x", "x_reshaped")}
+class TestCoarsenConstruct:
+    @pytest.mark.parametrize("dask", [True, False])
+    def test_coarsen_construct(self, dask: bool) -> None:
+
+        ds = Dataset(
+            {
+                "vart": ("time", np.arange(48), {"a": "b"}),
+                "varx": ("x", np.arange(10), {"a": "b"}),
+                "vartx": (("x", "time"), np.arange(480).reshape(10, 48), {"a": "b"}),
+                "vary": ("y", np.arange(12)),
+            },
+            coords={"time": np.arange(48), "y": np.arange(12)},
+            attrs={"foo": "bar"},
         )
-    assert_identical(actual, expected)
 
-    with raise_if_dask_computes():
-        actual = ds.coarsen(time=12, x=5).construct(
-            time=("year", "month"), x=("x", "x_reshaped")
-        )
-    assert_identical(actual, expected)
+        if dask and has_dask:
+            ds = ds.chunk({"x": 4, "time": 10})
 
-    with raise_if_dask_computes():
-        actual = ds.coarsen(time=12, x=5).construct(
-            {"time": ("year", "month"), "x": ("x", "x_reshaped")}, keep_attrs=False
+        expected = xr.Dataset(attrs={"foo": "bar"})
+        expected["vart"] = (
+            ("year", "month"),
+            ds.vart.data.reshape((-1, 12)),
+            {"a": "b"},
         )
-        for var in actual:
-            assert actual[var].attrs == {}
-        assert actual.attrs == {}
-
-    with raise_if_dask_computes():
-        actual = ds.vartx.coarsen(time=12, x=5).construct(
-            {"time": ("year", "month"), "x": ("x", "x_reshaped")}
+        expected["varx"] = (
+            ("x", "x_reshaped"),
+            ds.varx.data.reshape((-1, 5)),
+            {"a": "b"},
         )
-    assert_identical(actual, expected["vartx"])
-
-    with pytest.raises(ValueError):
-        ds.coarsen(time=12).construct(foo="bar")
-
-    with pytest.raises(ValueError):
-        ds.coarsen(time=12, x=2).construct(time=("year", "month"))
-
-    with pytest.raises(ValueError):
-        ds.coarsen(time=12).construct()
-
-    with pytest.raises(ValueError):
-        ds.coarsen(time=12).construct(time="bar")
-
-    with pytest.raises(ValueError):
-        ds.coarsen(time=12).construct(time=("bar",))
+        expected["vartx"] = (
+            ("x", "x_reshaped", "year", "month"),
+            ds.vartx.data.reshape(2, 5, 4, 12),
+            {"a": "b"},
+        )
+        expected["vary"] = ds.vary
+        expected.coords["time"] = (("year", "month"), ds.time.data.reshape((-1, 12)))
+
+        with raise_if_dask_computes():
+            actual = ds.coarsen(time=12, x=5).construct(
+                {"time": ("year", "month"), "x": ("x", "x_reshaped")}
+            )
+        assert_identical(actual, expected)
+
+        with raise_if_dask_computes():
+            actual = ds.coarsen(time=12, x=5).construct(
+                time=("year", "month"), x=("x", "x_reshaped")
+            )
+        assert_identical(actual, expected)
+
+        with raise_if_dask_computes():
+            actual = ds.coarsen(time=12, x=5).construct(
+                {"time": ("year", "month"), "x": ("x", "x_reshaped")}, keep_attrs=False
+            )
+            for var in actual:
+                assert actual[var].attrs == {}
+            assert actual.attrs == {}
+
+        with raise_if_dask_computes():
+            actual = ds.vartx.coarsen(time=12, x=5).construct(
+                {"time": ("year", "month"), "x": ("x", "x_reshaped")}
+            )
+        assert_identical(actual, expected["vartx"])
+
+        with pytest.raises(ValueError):
+            ds.coarsen(time=12).construct(foo="bar")
+
+        with pytest.raises(ValueError):
+            ds.coarsen(time=12, x=2).construct(time=("year", "month"))
+
+        with pytest.raises(ValueError):
+            ds.coarsen(time=12).construct()
+
+        with pytest.raises(ValueError):
+            ds.coarsen(time=12).construct(time="bar")
+
+        with pytest.raises(ValueError):
+            ds.coarsen(time=12).construct(time=("bar",))
+
+    def test_coarsen_construct_keeps_all_coords(self):
+        da = xr.DataArray(np.arange(24), dims=["time"])
+        da = da.assign_coords(day=365 * da)
+
+        result = da.coarsen(time=12).construct(time=("year", "month"))
+        assert list(da.coords) == list(result.coords)
+
+        ds = da.to_dataset(name="T")
+        result = ds.coarsen(time=12).construct(time=("year", "month"))
+        assert list(da.coords) == list(result.coords)
