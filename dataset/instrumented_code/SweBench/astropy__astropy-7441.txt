diff --git a/astropy/time/core.py b/astropy/time/core.py
index a5b91ca..57cbf29 100644
--- a/astropy/time/core.py
+++ b/astropy/time/core.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/astropy__astropy-7441/astropy/time/core.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 # -*- coding: utf-8 -*-
 # Licensed under a 3-clause BSD style license - see LICENSE.rst
 """
@@ -10,7 +203,7 @@ astronomy.
 
 import copy
 import operator
-from datetime import datetime
+from datetime import datetime, timedelta
 
 import numpy as np
 
@@ -1521,6 +1714,7 @@ class Time(ShapedLikeNDArray):
     delta_tdb_tt = property(_get_delta_tdb_tt, _set_delta_tdb_tt)
     """TDB - TT time scale offset"""
 
+    @inspect_code
     def __sub__(self, other):
         if not isinstance(other, Time):
             try:
@@ -1603,7 +1797,7 @@ class Time(ShapedLikeNDArray):
                 other = getattr(other, out.scale)
         else:
             if other.scale is None:
-                    out._set_scale('tai')
+                out._set_scale('tai')
             else:
                 if self.scale not in TIME_TYPES[other.scale]:
                     raise TypeError("Cannot add Time and TimeDelta instances "
@@ -1708,7 +1902,7 @@ class TimeDelta(Time):
     The allowed values for ``format`` can be listed with::
 
       >>> list(TimeDelta.FORMATS)
-      ['sec', 'jd']
+      ['sec', 'jd', 'datetime']
 
     Note that for time differences, the scale can be among three groups:
     geocentric ('tai', 'tt', 'tcg'), barycentric ('tcb', 'tdb'), and rotational
@@ -1743,7 +1937,11 @@ class TimeDelta(Time):
 
     info = TimeDeltaInfo()
 
+    @inspect_code
     def __init__(self, val, val2=None, format=None, scale=None, copy=False):
+        if isinstance(val, timedelta) and not format:
+            format = 'datetime'
+
         if isinstance(val, TimeDelta):
             if scale is not None:
                 self._set_scale(scale)
@@ -1769,6 +1967,14 @@ class TimeDelta(Time):
         out.SCALES = self.SCALES
         return out
 
+    @inspect_code
+    def to_datetime(self):
+        """
+        Convert to ``datetime.timedelta`` object.
+        """
+        tm = self.replicate(format='datetime')
+        return tm._shaped_like_input(tm._time.value)
+
     def _set_scale(self, scale):
         """
         This is the key routine that actually does time scale conversions.
diff --git a/astropy/time/formats.py b/astropy/time/formats.py
index 2d9df9e..61404a9 100644
--- a/astropy/time/formats.py
+++ b/astropy/time/formats.py
@@ -23,7 +23,7 @@ __all__ = ['TimeFormat', 'TimeJD', 'TimeMJD', 'TimeFromEpoch', 'TimeUnix',
            'TimeDeltaFormat', 'TimeDeltaSec', 'TimeDeltaJD',
            'TimeEpochDateString', 'TimeBesselianEpochString',
            'TimeJulianEpochString', 'TIME_FORMATS', 'TIME_DELTA_FORMATS',
-           'TimezoneInfo']
+           'TimezoneInfo', 'TimeDeltaDatetime']
 
 __doctest_skip__ = ['TimePlotDate']
 
@@ -1190,4 +1190,39 @@ class TimeDeltaJD(TimeDeltaFormat):
     unit = 1.
 
 
+class TimeDeltaDatetime(TimeDeltaFormat, TimeUnique):
+    """Time delta in datetime.timedelta"""
+    name = 'datetime'
+
+    def _check_val_type(self, val1, val2):
+        # Note: don't care about val2 for this class
+        if not all(isinstance(val, datetime.timedelta) for val in val1.flat):
+            raise TypeError('Input values for {0} class must be '
+                            'datetime.timedelta objects'.format(self.name))
+        return val1, None
+
+    def set_jds(self, val1, val2):
+        self._check_scale(self._scale)  # Validate scale.
+        iterator = np.nditer([val1, None],
+                             flags=['refs_ok'],
+                             op_dtypes=[object] + [np.double])
+
+        for val, sec in iterator:
+            sec[...] = val.item().total_seconds()
+
+        self.jd1, self.jd2 = day_frac(iterator.operands[-1], 0.0,
+                                      divisor=erfa.DAYSEC)
+
+    @property
+    def value(self):
+        iterator = np.nditer([self.jd1 + self.jd2, None],
+                             flags=['refs_ok'],
+                             op_dtypes=[self.jd1.dtype] + [object])
+
+        for jd, out in iterator:
+            out[...] = datetime.timedelta(days=jd.item())
+
+        return self.mask_if_needed(iterator.operands[-1])
+
+
 from .core import Time, TIME_SCALES, TIME_DELTA_SCALES, ScaleValueError
diff --git a/astropy/time/tests/test_delta.py b/astropy/time/tests/test_delta.py
index 58c5d95..bdd765b 100644
--- a/astropy/time/tests/test_delta.py
+++ b/astropy/time/tests/test_delta.py
@@ -6,6 +6,8 @@ import operator
 
 import pytest
 
+from datetime import timedelta
+
 from .. import (Time, TimeDelta, OperandTypeError, ScaleValueError,
                 TIME_SCALES, STANDARD_TIME_SCALES, TIME_DELTA_SCALES)
 from ... import units as u
@@ -247,6 +249,10 @@ class TestTimeDelta():
         assert dt.value == 1.0
         assert dt.format == 'jd'
 
+        dt.format = 'datetime'
+        assert dt.value == timedelta(days=1)
+        assert dt.format == 'datetime'
+
 
 class TestTimeDeltaScales():
     """Test scale conversion for Time Delta.
@@ -504,3 +510,37 @@ def test_timedelta_mask():
     assert np.all(t.mask == [False, True])
     assert allclose_jd(t[0].value, 1)
     assert t.value[1] is np.ma.masked
+
+
+def test_python_timedelta_scalar():
+    td = timedelta(days=1, seconds=1)
+    td1 = TimeDelta(td, format='datetime')
+
+    assert td1.sec == 86401.0
+
+    td2 = TimeDelta(86401.0, format='sec')
+    assert td2.datetime == td
+
+
+def test_python_timedelta_vector():
+    td = [[timedelta(days=1), timedelta(days=2)],
+          [timedelta(days=3), timedelta(days=4)]]
+
+    td1 = TimeDelta(td, format='datetime')
+
+    assert np.all(td1.jd == [[1, 2], [3, 4]])
+
+    td2 = TimeDelta([[1, 2], [3, 4]], format='jd')
+    assert np.all(td2.datetime == td)
+
+
+def test_timedelta_to_datetime():
+    td = TimeDelta(1, format='jd')
+
+    assert td.to_datetime() == timedelta(days=1)
+
+    td2 = TimeDelta([[1, 2], [3, 4]], format='jd')
+    td = [[timedelta(days=1), timedelta(days=2)],
+          [timedelta(days=3), timedelta(days=4)]]
+
+    assert np.all(td2.to_datetime() == td)
