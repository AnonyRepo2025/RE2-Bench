diff --git a/astropy/stats/biweight.py b/astropy/stats/biweight.py
index c3bd4e4..a5dc90b 100644
--- a/astropy/stats/biweight.py
+++ b/astropy/stats/biweight.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/astropy__astropy-7737/astropy/stats/biweight.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 # Licensed under a 3-clause BSD style license - see LICENSE.rst
 """
 This module contains functions for computing robust statistics using
@@ -15,6 +208,7 @@ __all__ = ['biweight_location', 'biweight_scale', 'biweight_midvariance',
            'biweight_midcovariance', 'biweight_midcorrelation']
 
 
+@inspect_code
 @deprecated_renamed_argument('a', 'data', '2.0')
 def biweight_location(data, c=6.0, M=None, axis=None):
     r"""
@@ -102,8 +296,15 @@ def biweight_location(data, c=6.0, M=None, axis=None):
 
     # set up the weighting
     mad = median_absolute_deviation(data, axis=axis)
+
+    if axis is None and mad == 0.:
+        return M  # return median if data is a constant array
+
     if axis is not None:
         mad = np.expand_dims(mad, axis=axis)
+        const_mask = (mad == 0.)
+        mad[const_mask] = 1.  # prevent divide by zero
+
     u = d / (c * mad)
 
     # now remove the outlier points
@@ -111,6 +312,8 @@ def biweight_location(data, c=6.0, M=None, axis=None):
     u = (1 - u ** 2) ** 2
     u[mask] = 0
 
+    # along the input axis if data is constant, d will be zero, thus
+    # the median value will be returned along that axis
     return M.squeeze() + (d * u).sum(axis=axis) / u.sum(axis=axis)
 
 
@@ -336,8 +539,15 @@ def biweight_midvariance(data, c=9.0, M=None, axis=None,
 
     # set up the weighting
     mad = median_absolute_deviation(data, axis=axis)
+
+    if axis is None and mad == 0.:
+        return 0.  # return zero if data is a constant array
+
     if axis is not None:
         mad = np.expand_dims(mad, axis=axis)
+        const_mask = (mad == 0.)
+        mad[const_mask] = 1.  # prevent divide by zero
+
     u = d / (c * mad)
 
     # now remove the outlier points
@@ -362,6 +572,7 @@ def biweight_midvariance(data, c=9.0, M=None, axis=None,
     return n * f1 / f2
 
 
+@inspect_code
 @deprecated_renamed_argument('a', 'data', '2.0')
 def biweight_midcovariance(data, c=9.0, M=None, modify_sample_size=False):
     r"""
@@ -530,6 +741,10 @@ def biweight_midcovariance(data, c=9.0, M=None, modify_sample_size=False):
 
     # set up the weighting
     mad = median_absolute_deviation(data, axis=1)
+
+    const_mask = (mad == 0.)
+    mad[const_mask] = 1.  # prevent divide by zero
+
     u = (d.T / (c * mad)).T
 
     # now remove the outlier points
diff --git a/astropy/stats/tests/test_biweight.py b/astropy/stats/tests/test_biweight.py
index 93c3ec7..5b8b7c3 100644
--- a/astropy/stats/tests/test_biweight.py
+++ b/astropy/stats/tests/test_biweight.py
@@ -20,6 +20,40 @@ def test_biweight_location():
         assert abs(cbl - 0) < 1e-2
 
 
+def test_biweight_location_constant():
+    cbl = biweight_location(np.ones((10, 5)))
+    assert cbl == 1.
+
+
+def test_biweight_location_constant_axis_2d():
+    shape = (10, 5)
+    data = np.ones(shape)
+    cbl = biweight_location(data, axis=0)
+    assert_allclose(cbl, np.ones(shape[1]))
+    cbl = biweight_location(data, axis=1)
+    assert_allclose(cbl, np.ones(shape[0]))
+
+    val1 = 100.
+    val2 = 2.
+    data = np.arange(50).reshape(10, 5)
+    data[2] = val1
+    data[7] = val2
+    cbl = biweight_location(data, axis=1)
+    assert_allclose(cbl[2], val1)
+    assert_allclose(cbl[7], val2)
+
+
+def test_biweight_location_constant_axis_3d():
+    shape = (10, 5, 2)
+    data = np.ones(shape)
+    cbl = biweight_location(data, axis=0)
+    assert_allclose(cbl, np.ones((shape[1], shape[2])))
+    cbl = biweight_location(data, axis=1)
+    assert_allclose(cbl, np.ones((shape[0], shape[2])))
+    cbl = biweight_location(data, axis=2)
+    assert_allclose(cbl, np.ones((shape[0], shape[1])))
+
+
 def test_biweight_location_small():
     cbl = biweight_location([1, 3, 5, 500, 2])
     assert abs(cbl - 2.745) < 1e-3
@@ -138,6 +172,38 @@ def test_biweight_midvariance_axis_3d():
         assert_allclose(bw[y], bwi)
 
 
+def test_biweight_midvariance_constant_axis():
+    bw = biweight_midvariance(np.ones((10, 5)))
+    assert bw == 0.0
+
+
+def test_biweight_midvariance_constant_axis_2d():
+    shape = (10, 5)
+    data = np.ones(shape)
+    cbl = biweight_midvariance(data, axis=0)
+    assert_allclose(cbl, np.zeros(shape[1]))
+    cbl = biweight_midvariance(data, axis=1)
+    assert_allclose(cbl, np.zeros(shape[0]))
+
+    data = np.arange(50).reshape(10, 5)
+    data[2] = 100.
+    data[7] = 2.
+    bw = biweight_midvariance(data, axis=1)
+    assert_allclose(bw[2], 0.)
+    assert_allclose(bw[7], 0.)
+
+
+def test_biweight_midvariance_constant_axis_3d():
+    shape = (10, 5, 2)
+    data = np.ones(shape)
+    cbl = biweight_midvariance(data, axis=0)
+    assert_allclose(cbl, np.zeros((shape[1], shape[2])))
+    cbl = biweight_midvariance(data, axis=1)
+    assert_allclose(cbl, np.zeros((shape[0], shape[2])))
+    cbl = biweight_midvariance(data, axis=2)
+    assert_allclose(cbl, np.zeros((shape[0], shape[1])))
+
+
 def test_biweight_midcovariance_1d():
     d = [0, 1, 2]
     cov = biweight_midcovariance(d)
@@ -161,6 +227,12 @@ def test_biweight_midcovariance_2d():
                           [-5.19350838, 4.61391501]])
 
 
+def test_biweight_midcovariance_constant():
+    data = np.ones((3, 10))
+    cov = biweight_midcovariance(data)
+    assert_allclose(cov, np.zeros((3, 3)))
+
+
 def test_biweight_midcovariance_midvariance():
     """
     Test that biweight_midcovariance diagonal elements agree with
