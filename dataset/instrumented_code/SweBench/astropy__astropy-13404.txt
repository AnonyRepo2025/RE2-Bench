diff --git a/astropy/utils/masked/function_helpers.py b/astropy/utils/masked/function_helpers.py
index 6327571..43656b2 100644
--- a/astropy/utils/masked/function_helpers.py
+++ b/astropy/utils/masked/function_helpers.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/astropy__astropy-13404/astropy/utils/masked/function_helpers.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 # Licensed under a 3-clause BSD style license - see LICENSE.rst
 """Helpers for letting numpy functions interact with Masked arrays.
 
@@ -876,13 +1069,20 @@ class MaskedFormat:
     """
     def __init__(self, format_function):
         self.format_function = format_function
-        # Special case for structured void: we need to make all the
+        # Special case for structured void and subarray: we need to make all the
         # format functions for the items masked as well.
         # TODO: maybe is a separate class is more logical?
         ffs = getattr(format_function, 'format_functions', None)
         if ffs:
+            # StructuredVoidFormat: multiple format functions to be changed.
             self.format_function.format_functions = [MaskedFormat(ff) for ff in ffs]
 
+        ff = getattr(format_function, 'format_function', None)
+        if ff:
+            # SubarrayFormat: change format function for the elements.
+            self.format_function.format_function = MaskedFormat(ff)
+
+    @inspect_code
     def __call__(self, x):
         if x.dtype.names:
             # The replacement of x with a list is needed because the function
@@ -890,6 +1090,13 @@ class MaskedFormat:
             # np.void but not an array scalar.
             return self.format_function([x[field] for field in x.dtype.names])
 
+        if x.shape:
+            # For a subarray pass on the data directly, since the
+            # items will be iterated on inside the function.
+            return self.format_function(x)
+
+        # Single element: first just typeset it normally, replace with masked
+        # string if needed.
         string = self.format_function(x.unmasked[()])
         if x.mask:
             # Strikethrough would be neat, but terminal needs a different
diff --git a/astropy/utils/masked/tests/test_masked.py b/astropy/utils/masked/tests/test_masked.py
index f2bfcf9..6e4c308 100644
--- a/astropy/utils/masked/tests/test_masked.py
+++ b/astropy/utils/masked/tests/test_masked.py
@@ -50,6 +50,16 @@ class ArraySetup:
         self.sb = np.array([(1., 2.), (-3., 4.)], dtype=self.sdt)
         self.mask_sb = np.array([(True, False), (False, False)],
                                 dtype=self.mask_sdt)
+        self.scdt = np.dtype([('sa', '2f8'), ('sb', 'i8', (2, 2))])
+        self.sc = np.array([([1., 2.], [[1, 2], [3, 4]]),
+                            ([-1., -2.], [[-1, -2], [-3, -4]])],
+                           dtype=self.scdt)
+        self.mask_scdt = np.dtype([('sa', '2?'), ('sb', '?', (2, 2))])
+        self.mask_sc = np.array([([True, False], [[False, False],
+                                                  [True, True]]),
+                                 ([False, True], [[True, False],
+                                                  [False, True]])],
+                                dtype=self.mask_scdt)
 
 
 class QuantitySetup(ArraySetup):
@@ -385,6 +395,7 @@ class MaskedArraySetup(ArraySetup):
         self.mc = Masked(self.c, mask=self.mask_c)
         self.msa = Masked(self.sa, mask=self.mask_sa)
         self.msb = Masked(self.sb, mask=self.mask_sb)
+        self.msc = Masked(self.sc, mask=self.mask_sc)
 
 
 class TestViewing(MaskedArraySetup):
@@ -1237,12 +1248,15 @@ class TestMaskedArrayRepr(MaskedArraySetup):
         str(self.mc)
         str(self.msa)
         str(self.msb)
+        str(self.msc)
 
     def test_scalar_str(self):
         assert self.mb[0].shape == ()
         str(self.mb[0])
         assert self.msb[0].shape == ()
         str(self.msb[0])
+        assert self.msc[0].shape == ()
+        str(self.msc[0])
 
     def test_array_repr(self):
         repr(self.ma)
@@ -1250,10 +1264,12 @@ class TestMaskedArrayRepr(MaskedArraySetup):
         repr(self.mc)
         repr(self.msa)
         repr(self.msb)
+        repr(self.msc)
 
     def test_scalar_repr(self):
         repr(self.mb[0])
         repr(self.msb[0])
+        repr(self.msc[0])
 
 
 class TestMaskedQuantityRepr(TestMaskedArrayRepr, QuantitySetup):
