diff --git a/django/db/migrations/migration.py b/django/db/migrations/migration.py
index ccbd2f7..8580e96 100644
--- a/django/db/migrations/migration.py
+++ b/django/db/migrations/migration.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/django__django-15620/django/db/migrations/migration.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 from django.db.migrations.utils import get_migration_name_timestamp
 from django.db.transaction import atomic
 
@@ -89,6 +282,7 @@ class Migration:
             operation.state_forwards(self.app_label, new_state)
         return new_state
 
+    @inspect_code
     def apply(self, project_state, schema_editor, collect_sql=False):
         """
         Take a project_state representing all migrations prior to this one
@@ -103,15 +297,14 @@ class Migration:
             # there instead
             if collect_sql:
                 schema_editor.collected_sql.append("--")
-                if not operation.reduces_to_sql:
-                    schema_editor.collected_sql.append(
-                        "-- MIGRATION NOW PERFORMS OPERATION THAT CANNOT BE WRITTEN AS "
-                        "SQL:"
-                    )
                 schema_editor.collected_sql.append("-- %s" % operation.describe())
                 schema_editor.collected_sql.append("--")
                 if not operation.reduces_to_sql:
+                    schema_editor.collected_sql.append(
+                        "-- THIS OPERATION CANNOT BE WRITTEN AS SQL"
+                    )
                     continue
+                collected_sql_before = len(schema_editor.collected_sql)
             # Save the state before the operation has run
             old_state = project_state.clone()
             operation.state_forwards(self.app_label, project_state)
@@ -131,6 +324,8 @@ class Migration:
                 operation.database_forwards(
                     self.app_label, schema_editor, old_state, project_state
                 )
+            if collect_sql and collected_sql_before == len(schema_editor.collected_sql):
+                schema_editor.collected_sql.append("-- (no-op)")
         return project_state
 
     def unapply(self, project_state, schema_editor, collect_sql=False):
@@ -167,15 +362,14 @@ class Migration:
         for operation, to_state, from_state in to_run:
             if collect_sql:
                 schema_editor.collected_sql.append("--")
-                if not operation.reduces_to_sql:
-                    schema_editor.collected_sql.append(
-                        "-- MIGRATION NOW PERFORMS OPERATION THAT CANNOT BE WRITTEN AS "
-                        "SQL:"
-                    )
                 schema_editor.collected_sql.append("-- %s" % operation.describe())
                 schema_editor.collected_sql.append("--")
                 if not operation.reduces_to_sql:
+                    schema_editor.collected_sql.append(
+                        "-- THIS OPERATION CANNOT BE WRITTEN AS SQL"
+                    )
                     continue
+                collected_sql_before = len(schema_editor.collected_sql)
             atomic_operation = operation.atomic or (
                 self.atomic and operation.atomic is not False
             )
@@ -191,6 +385,8 @@ class Migration:
                 operation.database_backwards(
                     self.app_label, schema_editor, from_state, to_state
                 )
+            if collect_sql and collected_sql_before == len(schema_editor.collected_sql):
+                schema_editor.collected_sql.append("-- (no-op)")
         return project_state
 
     def suggest_name(self):
diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py
index 30136aa..a3e1efc 100644
--- a/tests/migrations/test_commands.py
+++ b/tests/migrations/test_commands.py
@@ -828,46 +828,56 @@ class MigrateTests(MigrationTestBase):
         """
         out = io.StringIO()
         call_command("sqlmigrate", "migrations", "0001", stdout=out)
-        output = out.getvalue().lower()
 
-        index_tx_start = output.find(connection.ops.start_transaction_sql().lower())
-        index_op_desc_author = output.find("-- create model author")
-        index_create_table = output.find("create table")
-        index_op_desc_tribble = output.find("-- create model tribble")
-        index_op_desc_unique_together = output.find("-- alter unique_together")
-        index_tx_end = output.find(connection.ops.end_transaction_sql().lower())
+        lines = out.getvalue().splitlines()
 
         if connection.features.can_rollback_ddl:
-            self.assertGreater(index_tx_start, -1, "Transaction start not found")
-            self.assertGreater(
-                index_tx_end,
-                index_op_desc_unique_together,
-                "Transaction end not found or found before operation description "
-                "(unique_together)",
-            )
-
-        self.assertGreater(
-            index_op_desc_author,
-            index_tx_start,
-            "Operation description (author) not found or found before transaction "
-            "start",
-        )
-        self.assertGreater(
-            index_create_table,
-            index_op_desc_author,
-            "CREATE TABLE not found or found before operation description (author)",
-        )
-        self.assertGreater(
-            index_op_desc_tribble,
-            index_create_table,
-            "Operation description (tribble) not found or found before CREATE TABLE "
-            "(author)",
-        )
-        self.assertGreater(
-            index_op_desc_unique_together,
-            index_op_desc_tribble,
-            "Operation description (unique_together) not found or found before "
-            "operation description (tribble)",
+            self.assertEqual(lines[0], connection.ops.start_transaction_sql())
+            self.assertEqual(lines[-1], connection.ops.end_transaction_sql())
+            lines = lines[1:-1]
+
+        self.assertEqual(
+            lines[:3],
+            [
+                "--",
+                "-- Create model Author",
+                "--",
+            ],
+        )
+        self.assertIn(
+            "create table %s" % connection.ops.quote_name("migrations_author").lower(),
+            lines[3].lower(),
+        )
+        pos = lines.index("--", 3)
+        self.assertEqual(
+            lines[pos : pos + 3],
+            [
+                "--",
+                "-- Create model Tribble",
+                "--",
+            ],
+        )
+        self.assertIn(
+            "create table %s" % connection.ops.quote_name("migrations_tribble").lower(),
+            lines[pos + 3].lower(),
+        )
+        pos = lines.index("--", pos + 3)
+        self.assertEqual(
+            lines[pos : pos + 3],
+            [
+                "--",
+                "-- Add field bool to tribble",
+                "--",
+            ],
+        )
+        pos = lines.index("--", pos + 3)
+        self.assertEqual(
+            lines[pos : pos + 3],
+            [
+                "--",
+                "-- Alter unique_together for author (1 constraint(s))",
+                "--",
+            ],
         )
 
     @override_settings(MIGRATION_MODULES={"migrations": "migrations.test_migrations"})
@@ -880,49 +890,70 @@ class MigrateTests(MigrationTestBase):
 
         out = io.StringIO()
         call_command("sqlmigrate", "migrations", "0001", stdout=out, backwards=True)
-        output = out.getvalue().lower()
 
-        index_tx_start = output.find(connection.ops.start_transaction_sql().lower())
-        index_op_desc_unique_together = output.find("-- alter unique_together")
-        index_op_desc_tribble = output.find("-- create model tribble")
-        index_op_desc_author = output.find("-- create model author")
-        index_drop_table = output.rfind("drop table")
-        index_tx_end = output.find(connection.ops.end_transaction_sql().lower())
-
-        if connection.features.can_rollback_ddl:
-            self.assertGreater(index_tx_start, -1, "Transaction start not found")
-            self.assertGreater(
-                index_tx_end,
-                index_op_desc_unique_together,
-                "Transaction end not found or found before DROP TABLE",
-            )
-        self.assertGreater(
-            index_op_desc_unique_together,
-            index_tx_start,
-            "Operation description (unique_together) not found or found before "
-            "transaction start",
-        )
-        self.assertGreater(
-            index_op_desc_tribble,
-            index_op_desc_unique_together,
-            "Operation description (tribble) not found or found before operation "
-            "description (unique_together)",
-        )
-        self.assertGreater(
-            index_op_desc_author,
-            index_op_desc_tribble,
-            "Operation description (author) not found or found before operation "
-            "description (tribble)",
-        )
-
-        self.assertGreater(
-            index_drop_table,
-            index_op_desc_author,
-            "DROP TABLE not found or found before operation description (author)",
-        )
+        lines = out.getvalue().splitlines()
+        try:
+            if connection.features.can_rollback_ddl:
+                self.assertEqual(lines[0], connection.ops.start_transaction_sql())
+                self.assertEqual(lines[-1], connection.ops.end_transaction_sql())
+                lines = lines[1:-1]
 
-        # Cleanup by unmigrating everything
-        call_command("migrate", "migrations", "zero", verbosity=0)
+            self.assertEqual(
+                lines[:3],
+                [
+                    "--",
+                    "-- Alter unique_together for author (1 constraint(s))",
+                    "--",
+                ],
+            )
+            pos = lines.index("--", 3)
+            self.assertEqual(
+                lines[pos : pos + 3],
+                [
+                    "--",
+                    "-- Add field bool to tribble",
+                    "--",
+                ],
+            )
+            pos = lines.index("--", pos + 3)
+            self.assertEqual(
+                lines[pos : pos + 3],
+                [
+                    "--",
+                    "-- Create model Tribble",
+                    "--",
+                ],
+            )
+            next_pos = lines.index("--", pos + 3)
+            drop_table_sql = (
+                "drop table %s"
+                % connection.ops.quote_name("migrations_tribble").lower()
+            )
+            for line in lines[pos + 3 : next_pos]:
+                if drop_table_sql in line.lower():
+                    break
+            else:
+                self.fail("DROP TABLE (tribble) not found.")
+            pos = next_pos
+            self.assertEqual(
+                lines[pos : pos + 3],
+                [
+                    "--",
+                    "-- Create model Author",
+                    "--",
+                ],
+            )
+            drop_table_sql = (
+                "drop table %s" % connection.ops.quote_name("migrations_author").lower()
+            )
+            for line in lines[pos + 3 :]:
+                if drop_table_sql in line.lower():
+                    break
+            else:
+                self.fail("DROP TABLE (author) not found.")
+        finally:
+            # Unmigrate everything.
+            call_command("migrate", "migrations", "zero", verbosity=0)
 
     @override_settings(
         MIGRATION_MODULES={"migrations": "migrations.test_migrations_non_atomic"}
@@ -990,11 +1021,51 @@ class MigrateTests(MigrationTestBase):
     @override_settings(
         MIGRATION_MODULES={"migrations": "migrations.test_migrations_no_operations"}
     )
-    def test_migrations_no_operations(self):
+    def test_sqlmigrate_no_operations(self):
         err = io.StringIO()
         call_command("sqlmigrate", "migrations", "0001_initial", stderr=err)
         self.assertEqual(err.getvalue(), "No operations found.\n")
 
+    @override_settings(
+        MIGRATION_MODULES={"migrations": "migrations.test_migrations_noop"}
+    )
+    def test_sqlmigrate_noop(self):
+        out = io.StringIO()
+        call_command("sqlmigrate", "migrations", "0001", stdout=out)
+        lines = out.getvalue().splitlines()
+
+        if connection.features.can_rollback_ddl:
+            lines = lines[1:-1]
+        self.assertEqual(
+            lines,
+            [
+                "--",
+                "-- Raw SQL operation",
+                "--",
+                "-- (no-op)",
+            ],
+        )
+
+    @override_settings(
+        MIGRATION_MODULES={"migrations": "migrations.test_migrations_manual_porting"}
+    )
+    def test_sqlmigrate_unrepresentable(self):
+        out = io.StringIO()
+        call_command("sqlmigrate", "migrations", "0002", stdout=out)
+        lines = out.getvalue().splitlines()
+
+        if connection.features.can_rollback_ddl:
+            lines = lines[1:-1]
+        self.assertEqual(
+            lines,
+            [
+                "--",
+                "-- Raw Python operation",
+                "--",
+                "-- THIS OPERATION CANNOT BE WRITTEN AS SQL",
+            ],
+        )
+
     @override_settings(
         INSTALLED_APPS=[
             "migrations.migrations_test_apps.migrated_app",
