diff --git a/astropy/nddata/ccddata.py b/astropy/nddata/ccddata.py
index 81c4df8..cd8f847 100644
--- a/astropy/nddata/ccddata.py
+++ b/astropy/nddata/ccddata.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/astropy__astropy-12962/astropy/nddata/ccddata.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 # Licensed under a 3-clause BSD style license - see LICENSE.rst
 """This module implements the base CCDData class."""
 
@@ -269,8 +462,10 @@ class CCDData(NDDataArray):
         else:
             self._uncertainty = value
 
+    @inspect_code
     def to_hdu(self, hdu_mask='MASK', hdu_uncertainty='UNCERT',
-               hdu_flags=None, wcs_relax=True, key_uncertainty_type='UTYPE'):
+               hdu_flags=None, wcs_relax=True,
+               key_uncertainty_type='UTYPE', as_image_hdu=False):
         """Creates an HDUList object from a CCDData object.
 
         Parameters
@@ -297,6 +492,11 @@ class CCDData(NDDataArray):
 
             .. versionadded:: 3.1
 
+        as_image_hdu : bool
+            If this option is `True`, the first item of the returned
+            `~astropy.io.fits.HDUList` is a `~astropy.io.fits.ImageHDU`, instead
+            of the default `~astropy.io.fits.PrimaryHDU`.
+
         Raises
         ------
         ValueError
@@ -343,7 +543,11 @@ class CCDData(NDDataArray):
             # not header.
             wcs_header = self.wcs.to_header(relax=wcs_relax)
             header.extend(wcs_header, useblanks=False, update=True)
-        hdus = [fits.PrimaryHDU(self.data, header)]
+
+        if as_image_hdu:
+            hdus = [fits.ImageHDU(self.data, header)]
+        else:
+            hdus = [fits.PrimaryHDU(self.data, header)]
 
         if hdu_mask and self.mask is not None:
             # Always assuming that the mask is a np.ndarray (check that it has
@@ -665,9 +869,11 @@ def fits_ccddata_reader(filename, hdu=0, unit=None, hdu_uncertainty='UNCERT',
     return ccd_data
 
 
+@inspect_code
 def fits_ccddata_writer(
         ccd_data, filename, hdu_mask='MASK', hdu_uncertainty='UNCERT',
-        hdu_flags=None, key_uncertainty_type='UTYPE', **kwd):
+        hdu_flags=None, key_uncertainty_type='UTYPE', as_image_hdu=False,
+        **kwd):
     """
     Write CCDData object to FITS file.
 
@@ -691,6 +897,11 @@ def fits_ccddata_writer(
 
         .. versionadded:: 3.1
 
+    as_image_hdu : bool
+        If this option is `True`, the first item of the returned
+        `~astropy.io.fits.HDUList` is a `~astropy.io.fits.ImageHDU`, instead of
+        the default `~astropy.io.fits.PrimaryHDU`.
+
     kwd :
         All additional keywords are passed to :py:mod:`astropy.io.fits`
 
@@ -708,7 +919,10 @@ def fits_ccddata_writer(
     """
     hdu = ccd_data.to_hdu(
         hdu_mask=hdu_mask, hdu_uncertainty=hdu_uncertainty,
-        key_uncertainty_type=key_uncertainty_type, hdu_flags=hdu_flags)
+        key_uncertainty_type=key_uncertainty_type, hdu_flags=hdu_flags,
+        as_image_hdu=as_image_hdu)
+    if as_image_hdu:
+        hdu.insert(0, fits.PrimaryHDU())
     hdu.writeto(filename, **kwd)
 
 
diff --git a/astropy/nddata/tests/test_ccddata.py b/astropy/nddata/tests/test_ccddata.py
index 1a42976..eb87849 100644
--- a/astropy/nddata/tests/test_ccddata.py
+++ b/astropy/nddata/tests/test_ccddata.py
@@ -196,6 +196,20 @@ def test_ccddata_writer(tmpdir):
     np.testing.assert_array_equal(ccd_data.data, ccd_disk.data)
 
 
+def test_ccddata_writer_as_imagehdu(tmpdir):
+    ccd_data = create_ccd_data()
+    filename = tmpdir.join('test.fits').strpath
+    ccd_data.write(filename, as_image_hdu=False)
+    with fits.open(filename) as hdus:
+        assert len(hdus) == 1
+
+    filename = tmpdir.join('test2.fits').strpath
+    ccd_data.write(filename, as_image_hdu=True)
+    with fits.open(filename) as hdus:
+        assert len(hdus) == 2
+        assert isinstance(hdus[1], fits.ImageHDU)
+
+
 def test_ccddata_meta_is_case_sensitive():
     ccd_data = create_ccd_data()
     key = 'SoMeKEY'
@@ -291,6 +305,14 @@ def test_to_hdu():
     np.testing.assert_array_equal(fits_hdulist[0].data, ccd_data.data)
 
 
+def test_to_hdu_as_imagehdu():
+    ccd_data = create_ccd_data()
+    fits_hdulist = ccd_data.to_hdu(as_image_hdu=False)
+    assert isinstance(fits_hdulist[0], fits.PrimaryHDU)
+    fits_hdulist = ccd_data.to_hdu(as_image_hdu=True)
+    assert isinstance(fits_hdulist[0], fits.ImageHDU)
+
+
 def test_copy():
     ccd_data = create_ccd_data()
     ccd_copy = ccd_data.copy()
