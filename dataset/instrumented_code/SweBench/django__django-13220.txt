diff --git a/django/core/exceptions.py b/django/core/exceptions.py
index dc084b8..5a6b520 100644
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -1,6 +1,202 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/django__django-13220/django/core/exceptions.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 """
 Global Django exception and warning classes.
 """
+import operator
+
+from django.utils.hashable import make_hashable
 
 
 class FieldDoesNotExist(Exception):
@@ -182,6 +378,24 @@ class ValidationError(Exception):
     def __repr__(self):
         return 'ValidationError(%s)' % self
 
+    @inspect_code
+    def __eq__(self, other):
+        if not isinstance(other, ValidationError):
+            return NotImplemented
+        return hash(self) == hash(other)
+
+    def __hash__(self):
+        # Ignore params and messages ordering.
+        if hasattr(self, 'message'):
+            return hash((
+                self.message,
+                self.code,
+                tuple(sorted(make_hashable(self.params))) if self.params else None,
+            ))
+        if hasattr(self, 'error_dict'):
+            return hash(tuple(sorted(make_hashable(self.error_dict))))
+        return hash(tuple(sorted(self.error_list, key=operator.attrgetter('message'))))
+
 
 class EmptyResultSet(Exception):
     """A database query predicate is impossible."""
diff --git a/tests/test_exceptions/test_validation_error.py b/tests/test_exceptions/test_validation_error.py
index a0bbfaf..12aa8e2 100644
--- a/tests/test_exceptions/test_validation_error.py
+++ b/tests/test_exceptions/test_validation_error.py
@@ -1,4 +1,5 @@
 import unittest
+from unittest import mock
 
 from django.core.exceptions import ValidationError
 
@@ -14,3 +15,271 @@ class TestValidationError(unittest.TestCase):
         message_dict['field2'] = ['E3', 'E4']
         exception = ValidationError(message_dict)
         self.assertEqual(sorted(exception.messages), ['E1', 'E2', 'E3', 'E4'])
+
+    def test_eq(self):
+        error1 = ValidationError('message')
+        error2 = ValidationError('message', code='my_code1')
+        error3 = ValidationError('message', code='my_code2')
+        error4 = ValidationError(
+            'error %(parm1)s %(parm2)s',
+            code='my_code1',
+            params={'parm1': 'val1', 'parm2': 'val2'},
+        )
+        error5 = ValidationError({'field1': 'message', 'field2': 'other'})
+        error6 = ValidationError({'field1': 'message'})
+        error7 = ValidationError([
+            ValidationError({'field1': 'field error', 'field2': 'other'}),
+            'message',
+        ])
+
+        self.assertEqual(error1, ValidationError('message'))
+        self.assertNotEqual(error1, ValidationError('message2'))
+        self.assertNotEqual(error1, error2)
+        self.assertNotEqual(error1, error4)
+        self.assertNotEqual(error1, error5)
+        self.assertNotEqual(error1, error6)
+        self.assertNotEqual(error1, error7)
+        self.assertEqual(error1, mock.ANY)
+        self.assertEqual(error2, ValidationError('message', code='my_code1'))
+        self.assertNotEqual(error2, ValidationError('other', code='my_code1'))
+        self.assertNotEqual(error2, error3)
+        self.assertNotEqual(error2, error4)
+        self.assertNotEqual(error2, error5)
+        self.assertNotEqual(error2, error6)
+        self.assertNotEqual(error2, error7)
+
+        self.assertEqual(error4, ValidationError(
+            'error %(parm1)s %(parm2)s',
+            code='my_code1',
+            params={'parm1': 'val1', 'parm2': 'val2'},
+        ))
+        self.assertNotEqual(error4, ValidationError(
+            'error %(parm1)s %(parm2)s',
+            code='my_code2',
+            params={'parm1': 'val1', 'parm2': 'val2'},
+        ))
+        self.assertNotEqual(error4, ValidationError(
+            'error %(parm1)s %(parm2)s',
+            code='my_code1',
+            params={'parm2': 'val2'},
+        ))
+        self.assertNotEqual(error4, ValidationError(
+            'error %(parm1)s %(parm2)s',
+            code='my_code1',
+            params={'parm2': 'val1', 'parm1': 'val2'},
+        ))
+        self.assertNotEqual(error4, ValidationError(
+            'error val1 val2',
+            code='my_code1',
+        ))
+        # params ordering is ignored.
+        self.assertEqual(error4, ValidationError(
+            'error %(parm1)s %(parm2)s',
+            code='my_code1',
+            params={'parm2': 'val2', 'parm1': 'val1'},
+        ))
+
+        self.assertEqual(
+            error5,
+            ValidationError({'field1': 'message', 'field2': 'other'}),
+        )
+        self.assertNotEqual(
+            error5,
+            ValidationError({'field1': 'message', 'field2': 'other2'}),
+        )
+        self.assertNotEqual(
+            error5,
+            ValidationError({'field1': 'message', 'field3': 'other'}),
+        )
+        self.assertNotEqual(error5, error6)
+        # fields ordering is ignored.
+        self.assertEqual(
+            error5,
+            ValidationError({'field2': 'other', 'field1': 'message'}),
+        )
+
+        self.assertNotEqual(error7, ValidationError(error7.error_list[1:]))
+        self.assertNotEqual(
+            ValidationError(['message']),
+            ValidationError([ValidationError('message', code='my_code')]),
+        )
+        # messages ordering is ignored.
+        self.assertEqual(
+            error7,
+            ValidationError(list(reversed(error7.error_list))),
+        )
+
+        self.assertNotEqual(error4, ValidationError([error4]))
+        self.assertNotEqual(ValidationError([error4]), error4)
+        self.assertNotEqual(error4, ValidationError({'field1': error4}))
+        self.assertNotEqual(ValidationError({'field1': error4}), error4)
+
+    def test_eq_nested(self):
+        error_dict = {
+            'field1': ValidationError(
+                'error %(parm1)s %(parm2)s',
+                code='my_code',
+                params={'parm1': 'val1', 'parm2': 'val2'},
+            ),
+            'field2': 'other',
+        }
+        error = ValidationError(error_dict)
+        self.assertEqual(error, ValidationError(dict(error_dict)))
+        self.assertEqual(error, ValidationError({
+            'field1': ValidationError(
+                'error %(parm1)s %(parm2)s',
+                code='my_code',
+                params={'parm2': 'val2', 'parm1': 'val1'},
+            ),
+            'field2': 'other',
+        }))
+        self.assertNotEqual(error, ValidationError(
+            {**error_dict, 'field2': 'message'},
+        ))
+        self.assertNotEqual(error, ValidationError({
+            'field1': ValidationError(
+                'error %(parm1)s val2',
+                code='my_code',
+                params={'parm1': 'val1'},
+            ),
+            'field2': 'other',
+        }))
+
+    def test_hash(self):
+        error1 = ValidationError('message')
+        error2 = ValidationError('message', code='my_code1')
+        error3 = ValidationError('message', code='my_code2')
+        error4 = ValidationError(
+            'error %(parm1)s %(parm2)s',
+            code='my_code1',
+            params={'parm1': 'val1', 'parm2': 'val2'},
+        )
+        error5 = ValidationError({'field1': 'message', 'field2': 'other'})
+        error6 = ValidationError({'field1': 'message'})
+        error7 = ValidationError([
+            ValidationError({'field1': 'field error', 'field2': 'other'}),
+            'message',
+        ])
+
+        self.assertEqual(hash(error1), hash(ValidationError('message')))
+        self.assertNotEqual(hash(error1), hash(ValidationError('message2')))
+        self.assertNotEqual(hash(error1), hash(error2))
+        self.assertNotEqual(hash(error1), hash(error4))
+        self.assertNotEqual(hash(error1), hash(error5))
+        self.assertNotEqual(hash(error1), hash(error6))
+        self.assertNotEqual(hash(error1), hash(error7))
+        self.assertEqual(
+            hash(error2),
+            hash(ValidationError('message', code='my_code1')),
+        )
+        self.assertNotEqual(
+            hash(error2),
+            hash(ValidationError('other', code='my_code1')),
+        )
+        self.assertNotEqual(hash(error2), hash(error3))
+        self.assertNotEqual(hash(error2), hash(error4))
+        self.assertNotEqual(hash(error2), hash(error5))
+        self.assertNotEqual(hash(error2), hash(error6))
+        self.assertNotEqual(hash(error2), hash(error7))
+
+        self.assertEqual(hash(error4), hash(ValidationError(
+            'error %(parm1)s %(parm2)s',
+            code='my_code1',
+            params={'parm1': 'val1', 'parm2': 'val2'},
+        )))
+        self.assertNotEqual(hash(error4), hash(ValidationError(
+            'error %(parm1)s %(parm2)s',
+            code='my_code2',
+            params={'parm1': 'val1', 'parm2': 'val2'},
+        )))
+        self.assertNotEqual(hash(error4), hash(ValidationError(
+            'error %(parm1)s %(parm2)s',
+            code='my_code1',
+            params={'parm2': 'val2'},
+        )))
+        self.assertNotEqual(hash(error4), hash(ValidationError(
+            'error %(parm1)s %(parm2)s',
+            code='my_code1',
+            params={'parm2': 'val1', 'parm1': 'val2'},
+        )))
+        self.assertNotEqual(hash(error4), hash(ValidationError(
+            'error val1 val2',
+            code='my_code1',
+        )))
+        # params ordering is ignored.
+        self.assertEqual(hash(error4), hash(ValidationError(
+            'error %(parm1)s %(parm2)s',
+            code='my_code1',
+            params={'parm2': 'val2', 'parm1': 'val1'},
+        )))
+
+        self.assertEqual(
+            hash(error5),
+            hash(ValidationError({'field1': 'message', 'field2': 'other'})),
+        )
+        self.assertNotEqual(
+            hash(error5),
+            hash(ValidationError({'field1': 'message', 'field2': 'other2'})),
+        )
+        self.assertNotEqual(
+            hash(error5),
+            hash(ValidationError({'field1': 'message', 'field3': 'other'})),
+        )
+        self.assertNotEqual(error5, error6)
+        # fields ordering is ignored.
+        self.assertEqual(
+            hash(error5),
+            hash(ValidationError({'field2': 'other', 'field1': 'message'})),
+        )
+
+        self.assertNotEqual(
+            hash(error7),
+            hash(ValidationError(error7.error_list[1:])),
+        )
+        self.assertNotEqual(
+            hash(ValidationError(['message'])),
+            hash(ValidationError([ValidationError('message', code='my_code')])),
+        )
+        # messages ordering is ignored.
+        self.assertEqual(
+            hash(error7),
+            hash(ValidationError(list(reversed(error7.error_list)))),
+        )
+
+        self.assertNotEqual(hash(error4), hash(ValidationError([error4])))
+        self.assertNotEqual(hash(ValidationError([error4])), hash(error4))
+        self.assertNotEqual(
+            hash(error4),
+            hash(ValidationError({'field1': error4})),
+        )
+
+    def test_hash_nested(self):
+        error_dict = {
+            'field1': ValidationError(
+                'error %(parm1)s %(parm2)s',
+                code='my_code',
+                params={'parm2': 'val2', 'parm1': 'val1'},
+            ),
+            'field2': 'other',
+        }
+        error = ValidationError(error_dict)
+        self.assertEqual(hash(error), hash(ValidationError(dict(error_dict))))
+        self.assertEqual(hash(error), hash(ValidationError({
+            'field1': ValidationError(
+                'error %(parm1)s %(parm2)s',
+                code='my_code',
+                params={'parm1': 'val1', 'parm2': 'val2'},
+            ),
+            'field2': 'other',
+        })))
+        self.assertNotEqual(hash(error), hash(ValidationError(
+            {**error_dict, 'field2': 'message'},
+        )))
+        self.assertNotEqual(hash(error), hash(ValidationError({
+            'field1': ValidationError(
+                'error %(parm1)s val2',
+                code='my_code',
+                params={'parm1': 'val1'},
+            ),
+            'field2': 'other',
+        })))
