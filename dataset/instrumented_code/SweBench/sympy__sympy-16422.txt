diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py
index 7e94282..4c48fda 100644
--- a/sympy/printing/pretty/tests/test_pretty.py
+++ b/sympy/printing/pretty/tests/test_pretty.py
@@ -6208,7 +6208,7 @@ def test_issue_12675():
     ucode_str = \
 u("""\
 ⎛   t⎞    \n\
-⎜⎛x⎞ ⎟ e_j\n\
+⎜⎛x⎞ ⎟ j_e\n\
 ⎜⎜─⎟ ⎟    \n\
 ⎝⎝y⎠ ⎠    \
 """)
@@ -6216,7 +6216,7 @@ def test_issue_12675():
     ucode_str = \
 u("""\
 ⎛1⎞    \n\
-⎜─⎟ e_j\n\
+⎜─⎟ j_e\n\
 ⎝y⎠    \
 """)
     assert upretty((1/y)*e.j) == ucode_str
@@ -6255,17 +6255,17 @@ def test_degree_printing():
 def test_vector_expr_pretty_printing():
     A = CoordSys3D('A')
 
-    assert upretty(Cross(A.i, A.x*A.i+3*A.y*A.j)) == u("(A_i)×((A_x) A_i + (3⋅A_y) A_j)")
-    assert upretty(x*Cross(A.i, A.j)) == u('x⋅(A_i)×(A_j)')
+    assert upretty(Cross(A.i, A.x*A.i+3*A.y*A.j)) == u("(i_A)×((x_A) i_A + (3⋅y_A) j_A)")
+    assert upretty(x*Cross(A.i, A.j)) == u('x⋅(i_A)×(j_A)')
 
-    assert upretty(Curl(A.x*A.i + 3*A.y*A.j)) == u("∇×((A_x) A_i + (3⋅A_y) A_j)")
+    assert upretty(Curl(A.x*A.i + 3*A.y*A.j)) == u("∇×((x_A) i_A + (3⋅y_A) j_A)")
 
-    assert upretty(Divergence(A.x*A.i + 3*A.y*A.j)) == u("∇⋅((A_x) A_i + (3⋅A_y) A_j)")
+    assert upretty(Divergence(A.x*A.i + 3*A.y*A.j)) == u("∇⋅((x_A) i_A + (3⋅y_A) j_A)")
 
-    assert upretty(Dot(A.i, A.x*A.i+3*A.y*A.j)) == u("(A_i)⋅((A_x) A_i + (3⋅A_y) A_j)")
+    assert upretty(Dot(A.i, A.x*A.i+3*A.y*A.j)) == u("(i_A)⋅((x_A) i_A + (3⋅y_A) j_A)")
 
-    assert upretty(Gradient(A.x+3*A.y)) == u("∇(A_x + 3⋅A_y)")
-    assert upretty(Laplacian(A.x+3*A.y)) == u("∆(A_x + 3⋅A_y)")
+    assert upretty(Gradient(A.x+3*A.y)) == u("∇(x_A + 3⋅y_A)")
+    assert upretty(Laplacian(A.x+3*A.y)) == u("∆(x_A + 3⋅y_A)")
     # TODO: add support for ASCII pretty.
 
 
diff --git a/sympy/vector/coordsysrect.py b/sympy/vector/coordsysrect.py
index abc9d9b..cdfda10 100644
--- a/sympy/vector/coordsysrect.py
+++ b/sympy/vector/coordsysrect.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/sympy__sympy-16422/sympy/vector/coordsysrect.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 from sympy.utilities.exceptions import SymPyDeprecationWarning
 from sympy.core.basic import Basic
 from sympy.core.compatibility import string_types, range, Callable
@@ -28,6 +221,7 @@ class CoordSys3D(Basic):
     Represents a coordinate system in 3-D space.
     """
 
+    @inspect_code
     def __new__(cls, name, transformation=None, parent=None, location=None,
                 rotation_matrix=None, vector_names=None, variable_names=None):
         """
@@ -200,7 +394,7 @@ def __new__(cls, name, transformation=None, parent=None, location=None,
         vector_names = list(vector_names)
         latex_vects = [(r'\mathbf{\hat{%s}_{%s}}' % (x, name)) for
                            x in vector_names]
-        pretty_vects = [(name + '_' + x) for x in vector_names]
+        pretty_vects = ['%s_%s' % (x, name) for x in vector_names]
 
         obj._vector_names = vector_names
 
@@ -216,7 +410,7 @@ def __new__(cls, name, transformation=None, parent=None, location=None,
         variable_names = list(variable_names)
         latex_scalars = [(r"\mathbf{{%s}_{%s}}" % (x, name)) for
                          x in variable_names]
-        pretty_scalars = [(name + '_' + x) for x in variable_names]
+        pretty_scalars = ['%s_%s' % (x, name) for x in variable_names]
 
         obj._variable_names = variable_names
         obj._vector_names = vector_names
diff --git a/sympy/vector/tests/test_printing.py b/sympy/vector/tests/test_printing.py
index 5b95813..660a323 100644
--- a/sympy/vector/tests/test_printing.py
+++ b/sympy/vector/tests/test_printing.py
@@ -38,14 +38,14 @@ def upretty(expr):
 upretty_v_8 = u(
 """\
       ⎛   2   ⌠        ⎞    \n\
-N_j + ⎜C_x  - ⎮ f(b) db⎟ N_k\n\
+j_N + ⎜x_C  - ⎮ f(b) db⎟ k_N\n\
       ⎝       ⌡        ⎠    \
 """)
 pretty_v_8 = u(
     """\
-N_j + /         /       \\\n\
+j_N + /         /       \\\n\
       |   2    |        |\n\
-      |C_x  -  | f(b) db|\n\
+      |x_C  -  | f(b) db|\n\
       |        |        |\n\
       \\       /         / \
 """)
@@ -56,13 +56,13 @@ def upretty(expr):
 upretty_v_11 = u(
 """\
 ⎛ 2    ⎞        ⎛⌠        ⎞    \n\
-⎝a  + b⎠ N_i  + ⎜⎮ f(b) db⎟ N_k\n\
+⎝a  + b⎠ i_N  + ⎜⎮ f(b) db⎟ k_N\n\
                 ⎝⌡        ⎠    \
 """)
 pretty_v_11 = u(
 """\
 / 2    \\ + /  /       \\\n\
-\\a  + b/ N_i| |        |\n\
+\\a  + b/ i_N| |        |\n\
            | | f(b) db|\n\
            | |        |\n\
            \\/         / \
@@ -74,23 +74,23 @@ def upretty(expr):
 upretty_s = u(
 """\
          2\n\
-3⋅C_y⋅N_x \
+3⋅y_C⋅x_N \
 """)
 pretty_s = u(
 """\
          2\n\
-3*C_y*N_x \
+3*y_C*x_N \
 """)
 
 # This is the pretty form for ((a**2 + b)*N.i + 3*(C.y - c)*N.k) | N.k
 upretty_d_7 = u(
 """\
 ⎛ 2    ⎞                                     \n\
-⎝a  + b⎠ (N_i|N_k)  + (3⋅C_y - 3⋅c) (N_k|N_k)\
+⎝a  + b⎠ (i_N|k_N)  + (3⋅y_C - 3⋅c) (k_N|k_N)\
 """)
 pretty_d_7 = u(
 """\
-/ 2    \\ (N_i|N_k) + (3*C_y - 3*c) (N_k|N_k)\n\
+/ 2    \\ (i_N|k_N) + (3*y_C - 3*c) (k_N|k_N)\n\
 \\a  + b/                                    \
 """)
 
@@ -114,32 +114,32 @@ def test_str_printing():
 @XFAIL
 def test_pretty_printing_ascii():
     assert pretty(v[0]) == u'0'
-    assert pretty(v[1]) == u'N_i'
-    assert pretty(v[5]) == u'(a) N_i + (-b) N_j'
+    assert pretty(v[1]) == u'i_N'
+    assert pretty(v[5]) == u'(a) i_N + (-b) j_N'
     assert pretty(v[8]) == pretty_v_8
-    assert pretty(v[2]) == u'(-1) N_i'
+    assert pretty(v[2]) == u'(-1) i_N'
     assert pretty(v[11]) == pretty_v_11
     assert pretty(s) == pretty_s
     assert pretty(d[0]) == u'(0|0)'
-    assert pretty(d[5]) == u'(a) (N_i|N_k) + (-b) (N_j|N_k)'
+    assert pretty(d[5]) == u'(a) (i_N|k_N) + (-b) (j_N|k_N)'
     assert pretty(d[7]) == pretty_d_7
-    assert pretty(d[10]) == u'(cos(a)) (C_i|N_k) + (-sin(a)) (C_j|N_k)'
+    assert pretty(d[10]) == u'(cos(a)) (i_C|k_N) + (-sin(a)) (j_C|k_N)'
 
 
-def test_pretty_print_unicode():
+def test_pretty_print_unicode_v():
     assert upretty(v[0]) == u'0'
-    assert upretty(v[1]) == u'N_i'
-    assert upretty(v[5]) == u'(a) N_i + (-b) N_j'
+    assert upretty(v[1]) == u'i_N'
+    assert upretty(v[5]) == u'(a) i_N + (-b) j_N'
     # Make sure the printing works in other objects
-    assert upretty(v[5].args) == u'((a) N_i, (-b) N_j)'
+    assert upretty(v[5].args) == u'((a) i_N, (-b) j_N)'
     assert upretty(v[8]) == upretty_v_8
-    assert upretty(v[2]) == u'(-1) N_i'
+    assert upretty(v[2]) == u'(-1) i_N'
     assert upretty(v[11]) == upretty_v_11
     assert upretty(s) == upretty_s
     assert upretty(d[0]) == u'(0|0)'
-    assert upretty(d[5]) == u'(a) (N_i|N_k) + (-b) (N_j|N_k)'
+    assert upretty(d[5]) == u'(a) (i_N|k_N) + (-b) (j_N|k_N)'
     assert upretty(d[7]) == upretty_d_7
-    assert upretty(d[10]) == u'(cos(a)) (C_i|N_k) + (-sin(a)) (C_j|N_k)'
+    assert upretty(d[10]) == u'(cos(a)) (i_C|k_N) + (-sin(a)) (j_C|k_N)'
 
 
 def test_latex_printing():
@@ -171,7 +171,7 @@ def test_custom_names():
                    variable_names=['i', 'j', 'k'])
     assert A.i.__str__() == 'A.i'
     assert A.x.__str__() == 'A.x'
-    assert A.i._pretty_form == 'A_i'
-    assert A.x._pretty_form == 'A_x'
+    assert A.i._pretty_form == 'i_A'
+    assert A.x._pretty_form == 'x_A'
     assert A.i._latex_form == r'\mathbf{{i}_{A}}'
     assert A.x._latex_form == r"\mathbf{\hat{x}_{A}}"
