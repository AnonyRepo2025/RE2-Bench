diff --git a/astropy/io/fits/diff.py b/astropy/io/fits/diff.py
index 100cdf1..bfcdc7d 100644
--- a/astropy/io/fits/diff.py
+++ b/astropy/io/fits/diff.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/astropy__astropy-14539/astropy/io/fits/diff.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 # Licensed under a 3-clause BSD style license - see LICENSE.rst
 """
 Facilities for diffing two FITS files.  Includes objects for diffing entire
@@ -1341,6 +1534,7 @@ class TableDataDiff(_BaseDiff):
 
         super().__init__(a, b)
 
+    @inspect_code
     def _diff(self):
         # Much of the code for comparing columns is similar to the code for
         # comparing headers--consider refactoring
@@ -1449,7 +1643,7 @@ class TableDataDiff(_BaseDiff):
                 arrb.dtype, np.floating
             ):
                 diffs = where_not_allclose(arra, arrb, rtol=self.rtol, atol=self.atol)
-            elif "P" in col.format:
+            elif "P" in col.format or "Q" in col.format:
                 diffs = (
                     [
                         idx
diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py
index adfebe6..a5a771c 100644
--- a/astropy/io/fits/tests/test_diff.py
+++ b/astropy/io/fits/tests/test_diff.py
@@ -406,16 +406,17 @@ class TestDiff(FitsTestCase):
         c8 = Column("H", format="C", array=[0.0 + 1.0j, 2.0 + 3.0j])
         c9 = Column("I", format="M", array=[4.0 + 5.0j, 6.0 + 7.0j])
         c10 = Column("J", format="PI(2)", array=[[0, 1], [2, 3]])
+        c11 = Column("K", format="QJ(2)", array=[[0, 1], [2, 3]])
 
-        columns = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10]
+        columns = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11]
 
         ta = BinTableHDU.from_columns(columns)
         tb = BinTableHDU.from_columns([c.copy() for c in columns])
 
         diff = TableDataDiff(ta.data, tb.data)
         assert diff.identical
-        assert len(diff.common_columns) == 10
-        assert diff.common_column_names == set("abcdefghij")
+        assert len(diff.common_columns) == 11
+        assert diff.common_column_names == set("abcdefghijk")
         assert diff.diff_ratio == 0
         assert diff.diff_total == 0
 
@@ -549,6 +550,7 @@ class TestDiff(FitsTestCase):
         ca8 = Column("H", format="C", array=[0.0 + 1.0j, 2.0 + 3.0j])
         ca9 = Column("I", format="M", array=[4.0 + 5.0j, 6.0 + 7.0j])
         ca10 = Column("J", format="PI(2)", array=[[0, 1], [2, 3]])
+        ca11 = Column("K", format="QJ(2)", array=[[0, 1], [2, 3]])
 
         cb1 = Column("A", format="L", array=[False, False])
         cb2 = Column("B", format="X", array=[[0], [0]])
@@ -560,12 +562,13 @@ class TestDiff(FitsTestCase):
         cb8 = Column("H", format="C", array=[1.0 + 1.0j, 2.0 + 3.0j])
         cb9 = Column("I", format="M", array=[5.0 + 5.0j, 6.0 + 7.0j])
         cb10 = Column("J", format="PI(2)", array=[[1, 2], [3, 4]])
+        cb11 = Column("K", format="QJ(2)", array=[[1, 2], [3, 4]])
 
         ta = BinTableHDU.from_columns(
-            [ca1, ca2, ca3, ca4, ca5, ca6, ca7, ca8, ca9, ca10]
+            [ca1, ca2, ca3, ca4, ca5, ca6, ca7, ca8, ca9, ca10, ca11]
         )
         tb = BinTableHDU.from_columns(
-            [cb1, cb2, cb3, cb4, cb5, cb6, cb7, cb8, cb9, cb10]
+            [cb1, cb2, cb3, cb4, cb5, cb6, cb7, cb8, cb9, cb10, cb11]
         )
 
         diff = TableDataDiff(ta.data, tb.data, numdiffs=20)
@@ -591,14 +594,20 @@ class TestDiff(FitsTestCase):
         assert diff.diff_values[12][0] == ("J", 1)
         assert (diff.diff_values[12][1][0] == [2, 3]).all()
         assert (diff.diff_values[12][1][1] == [3, 4]).all()
+        assert diff.diff_values[13][0] == ("K", 0)
+        assert (diff.diff_values[13][1][0] == [0, 1]).all()
+        assert (diff.diff_values[13][1][1] == [1, 2]).all()
+        assert diff.diff_values[14][0] == ("K", 1)
+        assert (diff.diff_values[14][1][0] == [2, 3]).all()
+        assert (diff.diff_values[14][1][1] == [3, 4]).all()
 
-        assert diff.diff_total == 13
-        assert diff.diff_ratio == 0.65
+        assert diff.diff_total == 15
+        assert np.isclose(diff.diff_ratio, 0.682, atol=1e-3, rtol=0)
 
         report = diff.report()
         assert "Column A data differs in row 0:\n    a> True\n    b> False" in report
         assert "...and at 1 more indices.\n Column D data differs in row 0:" in report
-        assert "13 different table data element(s) found (65.00% different)" in report
+        assert "15 different table data element(s) found (68.18% different)" in report
         assert report.count("more indices") == 1
 
     def test_identical_files_basic(self):
