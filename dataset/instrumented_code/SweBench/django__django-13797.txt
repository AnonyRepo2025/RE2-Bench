diff --git a/django/core/management/commands/dumpdata.py b/django/core/management/commands/dumpdata.py
index 194c169..28fd2ab 100644
--- a/django/core/management/commands/dumpdata.py
+++ b/django/core/management/commands/dumpdata.py
@@ -1,3 +1,198 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/django__django-13797/django/core/management/commands/dumpdata.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
+import gzip
+import os
 import warnings
 
 from django.apps import apps
@@ -6,6 +201,18 @@ from django.core.management.base import BaseCommand, CommandError
 from django.core.management.utils import parse_apps_and_model_labels
 from django.db import DEFAULT_DB_ALIAS, router
 
+try:
+    import bz2
+    has_bz2 = True
+except ImportError:
+    has_bz2 = False
+
+try:
+    import lzma
+    has_lzma = True
+except ImportError:
+    has_lzma = False
+
 
 class ProxyModelWarning(Warning):
     pass
@@ -64,6 +271,7 @@ class Command(BaseCommand):
             help='Specifies file to which the output is written.'
         )
 
+    @inspect_code
     def handle(self, *app_labels, **options):
         format = options['format']
         indent = options['indent']
@@ -184,7 +392,36 @@ class Command(BaseCommand):
             if output and self.stdout.isatty() and options['verbosity'] > 0:
                 progress_output = self.stdout
                 object_count = sum(get_objects(count_only=True))
-            stream = open(output, 'w') if output else None
+            if output:
+                file_root, file_ext = os.path.splitext(output)
+                compression_formats = {
+                    '.bz2': (open, {}, file_root),
+                    '.gz': (gzip.open, {}, output),
+                    '.lzma': (open, {}, file_root),
+                    '.xz': (open, {}, file_root),
+                    '.zip': (open, {}, file_root),
+                }
+                if has_bz2:
+                    compression_formats['.bz2'] = (bz2.open, {}, output)
+                if has_lzma:
+                    compression_formats['.lzma'] = (
+                        lzma.open, {'format': lzma.FORMAT_ALONE}, output
+                    )
+                    compression_formats['.xz'] = (lzma.open, {}, output)
+                try:
+                    open_method, kwargs, file_path = compression_formats[file_ext]
+                except KeyError:
+                    open_method, kwargs, file_path = (open, {}, output)
+                if file_path != output:
+                    file_name = os.path.basename(file_path)
+                    warnings.warn(
+                        f"Unsupported file extension ({file_ext}). "
+                        f"Fixtures saved in '{file_name}'.",
+                        RuntimeWarning,
+                    )
+                stream = open_method(file_path, 'wt', **kwargs)
+            else:
+                stream = None
             try:
                 serializers.serialize(
                     format, get_objects(), indent=indent,
diff --git a/tests/fixtures/tests.py b/tests/fixtures/tests.py
index e072844..06ae3d1 100644
--- a/tests/fixtures/tests.py
+++ b/tests/fixtures/tests.py
@@ -1,3 +1,4 @@
+import gzip
 import os
 import sys
 import tempfile
@@ -80,9 +81,26 @@ class DumpDataAssertMixin:
             primary_keys=primary_keys,
         )
         if filename:
-            with open(filename) as f:
+            file_root, file_ext = os.path.splitext(filename)
+            compression_formats = {
+                '.bz2': (open, file_root),
+                '.gz': (gzip.open, filename),
+                '.lzma': (open, file_root),
+                '.xz': (open, file_root),
+                '.zip': (open, file_root),
+            }
+            if HAS_BZ2:
+                compression_formats['.bz2'] = (bz2.open, filename)
+            if HAS_LZMA:
+                compression_formats['.lzma'] = (lzma.open, filename)
+                compression_formats['.xz'] = (lzma.open, filename)
+            try:
+                open_method, file_path = compression_formats[file_ext]
+            except KeyError:
+                open_method, file_path = open, filename
+            with open_method(file_path, 'rt') as f:
                 command_output = f.read()
-            os.remove(filename)
+            os.remove(file_path)
         else:
             command_output = new_io.getvalue().strip()
         if format == "json":
@@ -492,6 +510,66 @@ class FixtureLoadingTests(DumpDataAssertMixin, TestCase):
             filename='dumpdata.json'
         )
 
+    def test_dumpdata_with_file_gzip_output(self):
+        management.call_command('loaddata', 'fixture1.json', verbosity=0)
+        self._dumpdata_assert(
+            ['fixtures'],
+            '[{"pk": 1, "model": "fixtures.category", "fields": {"description": "Latest news stories", "title": '
+            '"News Stories"}}, {"pk": 2, "model": "fixtures.article", "fields": {"headline": "Poker has no place '
+            'on ESPN", "pub_date": "2006-06-16T12:00:00"}}, {"pk": 3, "model": "fixtures.article", "fields": '
+            '{"headline": "Time to reform copyright", "pub_date": "2006-06-16T13:00:00"}}]',
+            filename='dumpdata.json.gz',
+        )
+
+    @unittest.skipUnless(HAS_BZ2, 'No bz2 library detected.')
+    def test_dumpdata_with_file_bz2_output(self):
+        management.call_command('loaddata', 'fixture1.json', verbosity=0)
+        self._dumpdata_assert(
+            ['fixtures'],
+            '[{"pk": 1, "model": "fixtures.category", "fields": {"description": "Latest news stories", "title": '
+            '"News Stories"}}, {"pk": 2, "model": "fixtures.article", "fields": {"headline": "Poker has no place '
+            'on ESPN", "pub_date": "2006-06-16T12:00:00"}}, {"pk": 3, "model": "fixtures.article", "fields": '
+            '{"headline": "Time to reform copyright", "pub_date": "2006-06-16T13:00:00"}}]',
+            filename='dumpdata.json.bz2',
+        )
+
+    @unittest.skipUnless(HAS_LZMA, 'No lzma library detected.')
+    def test_dumpdata_with_file_lzma_output(self):
+        management.call_command('loaddata', 'fixture1.json', verbosity=0)
+        self._dumpdata_assert(
+            ['fixtures'],
+            '[{"pk": 1, "model": "fixtures.category", "fields": {"description": "Latest news stories", "title": '
+            '"News Stories"}}, {"pk": 2, "model": "fixtures.article", "fields": {"headline": "Poker has no place '
+            'on ESPN", "pub_date": "2006-06-16T12:00:00"}}, {"pk": 3, "model": "fixtures.article", "fields": '
+            '{"headline": "Time to reform copyright", "pub_date": "2006-06-16T13:00:00"}}]',
+            filename='dumpdata.json.lzma',
+        )
+
+    @unittest.skipUnless(HAS_LZMA, 'No lzma library detected.')
+    def test_dumpdata_with_file_xz_output(self):
+        management.call_command('loaddata', 'fixture1.json', verbosity=0)
+        self._dumpdata_assert(
+            ['fixtures'],
+            '[{"pk": 1, "model": "fixtures.category", "fields": {"description": "Latest news stories", "title": '
+            '"News Stories"}}, {"pk": 2, "model": "fixtures.article", "fields": {"headline": "Poker has no place '
+            'on ESPN", "pub_date": "2006-06-16T12:00:00"}}, {"pk": 3, "model": "fixtures.article", "fields": '
+            '{"headline": "Time to reform copyright", "pub_date": "2006-06-16T13:00:00"}}]',
+            filename='dumpdata.json.xz',
+        )
+
+    def test_dumpdata_with_file_zip_output(self):
+        management.call_command('loaddata', 'fixture1.json', verbosity=0)
+        msg = "Unsupported file extension (.zip). Fixtures saved in 'dumpdata.json'."
+        with self.assertWarnsMessage(RuntimeWarning, msg):
+            self._dumpdata_assert(
+                ['fixtures'],
+                '[{"pk": 1, "model": "fixtures.category", "fields": {"description": "Latest news stories", "title": '
+                '"News Stories"}}, {"pk": 2, "model": "fixtures.article", "fields": {"headline": "Poker has no place '
+                'on ESPN", "pub_date": "2006-06-16T12:00:00"}}, {"pk": 3, "model": "fixtures.article", "fields": '
+                '{"headline": "Time to reform copyright", "pub_date": "2006-06-16T13:00:00"}}]',
+                filename='dumpdata.json.zip',
+            )
+
     def test_dumpdata_progressbar(self):
         """
         Dumpdata shows a progress bar on the command line when --output is set,
