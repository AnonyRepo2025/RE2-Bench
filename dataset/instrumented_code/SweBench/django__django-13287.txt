diff --git a/django/apps/config.py b/django/apps/config.py
index 8c276d5..7bcce81 100644
--- a/django/apps/config.py
+++ b/django/apps/config.py
@@ -1,4 +1,197 @@
 import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/django__django-13287/django/apps/config.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
+import inspect
 import os
 import warnings
 from importlib import import_module
@@ -83,12 +276,14 @@ class AppConfig:
         return paths[0]
 
     @classmethod
+    @inspect_code
     def create(cls, entry):
         """
         Factory that creates an app config from an entry in INSTALLED_APPS.
         """
         # create() eventually returns app_config_class(app_name, app_module).
         app_config_class = None
+        app_config_name = None
         app_name = None
         app_module = None
 
@@ -161,12 +356,15 @@ class AppConfig:
                     )
                 else:
                     message += (
-                        "However, Django's automatic detection picked another "
-                        "configuration, %r. You should move the default "
-                        "config class to the apps submodule of your "
-                        "application and, if this module defines several "
-                        "config classes, mark the default one with default = "
-                        "True." % app_config_name
+                        "However, Django's automatic detection %s. You should "
+                        "move the default config class to the apps submodule "
+                        "of your application and, if this module defines "
+                        "several config classes, mark the default one with "
+                        "default = True." % (
+                            "picked another configuration, %r" % app_config_name
+                            if app_config_name
+                            else "did not find this configuration"
+                        )
                     )
                 warnings.warn(message, RemovedInDjango41Warning, stacklevel=2)
                 entry = new_entry
diff --git a/tests/apps/tests.py b/tests/apps/tests.py
index f4b0a88..cf487a6 100644
--- a/tests/apps/tests.py
+++ b/tests/apps/tests.py
@@ -10,9 +10,13 @@ from django.test.utils import extend_sys_path, isolate_apps
 from django.utils.deprecation import RemovedInDjango41Warning
 
 from .explicit_default_config_app.apps import ExplicitDefaultConfig
+from .explicit_default_config_empty_apps import ExplicitDefaultConfigEmptyApps
 from .explicit_default_config_mismatch_app.not_apps import (
     ExplicitDefaultConfigMismatch,
 )
+from .explicit_default_config_without_apps import (
+    ExplicitDefaultConfigWithoutApps,
+)
 from .models import SoAlternative, TotallyNormal, new_apps
 from .one_config_app.apps import OneConfig
 from .two_configs_one_default_app.apps import TwoConfig
@@ -520,3 +524,51 @@ class DeprecationTests(SimpleTestCase):
             with self.settings(INSTALLED_APPS=['apps.explicit_default_config_mismatch_app']):
                 config = apps.get_app_config('explicit_default_config_mismatch_app')
             self.assertIsInstance(config, ExplicitDefaultConfigMismatch)
+
+    def test_explicit_default_app_config_empty_apps(self):
+        """
+        Load an app that specifies a default AppConfig class in __init__ and
+        have an empty apps module.
+        """
+        msg = (
+            "'apps.explicit_default_config_empty_apps' defines "
+            "default_app_config = 'apps.explicit_default_config_empty_apps."
+            "ExplicitDefaultConfigEmptyApps'. However, Django's automatic "
+            "detection did not find this configuration. You should move the "
+            "default config class to the apps submodule of your application "
+            "and, if this module defines several config classes, mark the "
+            "default one with default = True."
+        )
+        with self.assertRaisesMessage(RemovedInDjango41Warning, msg):
+            with self.settings(INSTALLED_APPS=['apps.explicit_default_config_empty_apps']):
+                pass
+        with ignore_warnings(category=RemovedInDjango41Warning):
+            with self.settings(INSTALLED_APPS=['apps.explicit_default_config_empty_apps']):
+                self.assertIsInstance(
+                    apps.get_app_config('explicit_default_config_empty_apps'),
+                    ExplicitDefaultConfigEmptyApps,
+                )
+
+    def test_explicit_default_app_config_without_apps(self):
+        """
+        Load an app that specifies a default AppConfig class in __init__ and do
+        not have an apps module.
+        """
+        msg = (
+            "'apps.explicit_default_config_without_apps' defines "
+            "default_app_config = 'apps.explicit_default_config_without_apps."
+            "ExplicitDefaultConfigWithoutApps'. However, Django's automatic "
+            "detection did not find this configuration. You should move the "
+            "default config class to the apps submodule of your application "
+            "and, if this module defines several config classes, mark the "
+            "default one with default = True."
+        )
+        with self.assertRaisesMessage(RemovedInDjango41Warning, msg):
+            with self.settings(INSTALLED_APPS=['apps.explicit_default_config_without_apps']):
+                pass
+        with ignore_warnings(category=RemovedInDjango41Warning):
+            with self.settings(INSTALLED_APPS=['apps.explicit_default_config_without_apps']):
+                self.assertIsInstance(
+                    apps.get_app_config('explicit_default_config_without_apps'),
+                    ExplicitDefaultConfigWithoutApps,
+                )
