diff --git a/django/contrib/sitemaps/__init__.py b/django/contrib/sitemaps/__init__.py
index 3d276b6..4ba081f 100644
--- a/django/contrib/sitemaps/__init__.py
+++ b/django/contrib/sitemaps/__init__.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/django__django-16369/django/contrib/sitemaps/__init__.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 import warnings
 from urllib.parse import urlencode
 from urllib.request import urlopen
@@ -92,19 +285,25 @@ class Sitemap:
             return attr(item)
         return attr
 
+    @inspect_code
+    def get_languages_for_item(self, item):
+        """Languages for which this item is displayed."""
+        return self._languages()
+
     def _languages(self):
         if self.languages is not None:
             return self.languages
         return [lang_code for lang_code, _ in settings.LANGUAGES]
 
+    @inspect_code
     def _items(self):
         if self.i18n:
             # Create (item, lang_code) tuples for all items and languages.
             # This is necessary to paginate with all languages already considered.
             items = [
                 (item, lang_code)
-                for lang_code in self._languages()
                 for item in self.items()
+                for lang_code in self.get_languages_for_item(item)
             ]
             return items
         return self.items()
@@ -173,6 +372,7 @@ class Sitemap:
         else:
             return self.lastmod
 
+    @inspect_code
     def _urls(self, page, protocol, domain):
         urls = []
         latest_lastmod = None
@@ -201,7 +401,8 @@ class Sitemap:
             }
 
             if self.i18n and self.alternates:
-                for lang_code in self._languages():
+                item_languages = self.get_languages_for_item(item[0])
+                for lang_code in item_languages:
                     loc = f"{protocol}://{domain}{self._location(item, lang_code)}"
                     url_info["alternates"].append(
                         {
@@ -209,7 +410,7 @@ class Sitemap:
                             "lang_code": lang_code,
                         }
                     )
-                if self.x_default:
+                if self.x_default and settings.LANGUAGE_CODE in item_languages:
                     lang_code = settings.LANGUAGE_CODE
                     loc = f"{protocol}://{domain}{self._location(item, lang_code)}"
                     loc = loc.replace(f"/{lang_code}/", "/", 1)
diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py
index 8c16f66..12e3877 100644
--- a/tests/sitemaps_tests/test_http.py
+++ b/tests/sitemaps_tests/test_http.py
@@ -10,7 +10,7 @@ from django.utils.deprecation import RemovedInDjango50Warning
 from django.utils.formats import localize
 
 from .base import SitemapTestsBase
-from .models import TestModel
+from .models import I18nTestModel, TestModel
 
 
 class HTTPSitemapTests(SitemapTestsBase):
@@ -440,6 +440,72 @@ class HTTPSitemapTests(SitemapTestsBase):
         )
         self.assertXMLEqual(response.content.decode(), expected_content)
 
+    @override_settings(LANGUAGES=(("en", "English"), ("pt", "Portuguese")))
+    def test_language_for_item_i18n_sitemap(self):
+        """
+        A i18n sitemap index in which item can be chosen to be displayed for a
+        lang or not.
+        """
+        only_pt = I18nTestModel.objects.create(name="Only for PT")
+        response = self.client.get("/item-by-lang/i18n.xml")
+        url, pk, only_pt_pk = self.base_url, self.i18n_model.pk, only_pt.pk
+        expected_urls = (
+            f"<url><loc>{url}/en/i18n/testmodel/{pk}/</loc>"
+            f"<changefreq>never</changefreq><priority>0.5</priority></url>"
+            f"<url><loc>{url}/pt/i18n/testmodel/{pk}/</loc>"
+            f"<changefreq>never</changefreq><priority>0.5</priority></url>"
+            f"<url><loc>{url}/pt/i18n/testmodel/{only_pt_pk}/</loc>"
+            f"<changefreq>never</changefreq><priority>0.5</priority></url>"
+        )
+        expected_content = (
+            f'<?xml version="1.0" encoding="UTF-8"?>\n'
+            f'<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" '
+            f'xmlns:xhtml="http://www.w3.org/1999/xhtml">\n'
+            f"{expected_urls}\n"
+            f"</urlset>"
+        )
+        self.assertXMLEqual(response.content.decode(), expected_content)
+
+    @override_settings(LANGUAGES=(("en", "English"), ("pt", "Portuguese")))
+    def test_alternate_language_for_item_i18n_sitemap(self):
+        """
+        A i18n sitemap index in which item can be chosen to be displayed for a
+        lang or not.
+        """
+        only_pt = I18nTestModel.objects.create(name="Only for PT")
+        response = self.client.get("/item-by-lang-alternates/i18n.xml")
+        url, pk, only_pt_pk = self.base_url, self.i18n_model.pk, only_pt.pk
+        expected_urls = (
+            f"<url><loc>{url}/en/i18n/testmodel/{pk}/</loc>"
+            f"<changefreq>never</changefreq><priority>0.5</priority>"
+            f'<xhtml:link rel="alternate" '
+            f'hreflang="en" href="{url}/en/i18n/testmodel/{pk}/"/>'
+            f'<xhtml:link rel="alternate" '
+            f'hreflang="pt" href="{url}/pt/i18n/testmodel/{pk}/"/>'
+            f'<xhtml:link rel="alternate" '
+            f'hreflang="x-default" href="{url}/i18n/testmodel/{pk}/"/></url>'
+            f"<url><loc>{url}/pt/i18n/testmodel/{pk}/</loc>"
+            f"<changefreq>never</changefreq><priority>0.5</priority>"
+            f'<xhtml:link rel="alternate" '
+            f'hreflang="en" href="{url}/en/i18n/testmodel/{pk}/"/>'
+            f'<xhtml:link rel="alternate" '
+            f'hreflang="pt" href="{url}/pt/i18n/testmodel/{pk}/"/>'
+            f'<xhtml:link rel="alternate" '
+            f'hreflang="x-default" href="{url}/i18n/testmodel/{pk}/"/></url>'
+            f"<url><loc>{url}/pt/i18n/testmodel/{only_pt_pk}/</loc>"
+            f"<changefreq>never</changefreq><priority>0.5</priority>"
+            f'<xhtml:link rel="alternate" '
+            f'hreflang="pt" href="{url}/pt/i18n/testmodel/{only_pt_pk}/"/></url>'
+        )
+        expected_content = (
+            f'<?xml version="1.0" encoding="UTF-8"?>\n'
+            f'<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" '
+            f'xmlns:xhtml="http://www.w3.org/1999/xhtml">\n'
+            f"{expected_urls}\n"
+            f"</urlset>"
+        )
+        self.assertXMLEqual(response.content.decode(), expected_content)
+
     def test_sitemap_without_entries(self):
         response = self.client.get("/sitemap-without-entries/sitemap.xml")
         expected_content = (
diff --git a/tests/sitemaps_tests/urls/http.py b/tests/sitemaps_tests/urls/http.py
index 75dd483..2b512cf 100644
--- a/tests/sitemaps_tests/urls/http.py
+++ b/tests/sitemaps_tests/urls/http.py
@@ -48,6 +48,22 @@ class XDefaultI18nSitemap(AlternatesI18nSitemap):
     x_default = True
 
 
+class ItemByLangSitemap(SimpleI18nSitemap):
+    def get_languages_for_item(self, item):
+        if item.name == "Only for PT":
+            return ["pt"]
+        return super().get_languages_for_item(item)
+
+
+class ItemByLangAlternatesSitemap(AlternatesI18nSitemap):
+    x_default = True
+
+    def get_languages_for_item(self, item):
+        if item.name == "Only for PT":
+            return ["pt"]
+        return super().get_languages_for_item(item)
+
+
 class EmptySitemap(Sitemap):
     changefreq = "never"
     priority = 0.5
@@ -168,6 +184,14 @@ xdefault_i18n_sitemaps = {
     "i18n-xdefault": XDefaultI18nSitemap,
 }
 
+item_by_lang_i18n_sitemaps = {
+    "i18n-item-by-lang": ItemByLangSitemap,
+}
+
+item_by_lang_alternates_i18n_sitemaps = {
+    "i18n-item-by-lang-alternates": ItemByLangAlternatesSitemap,
+}
+
 simple_sitemaps_not_callable = {
     "simple": SimpleSitemap(),
 }
@@ -358,6 +382,18 @@ urlpatterns = [
         {"sitemaps": sitemaps_lastmod_ascending},
         name="django.contrib.sitemaps.views.sitemap",
     ),
+    path(
+        "item-by-lang/i18n.xml",
+        views.sitemap,
+        {"sitemaps": item_by_lang_i18n_sitemaps},
+        name="django.contrib.sitemaps.views.sitemap",
+    ),
+    path(
+        "item-by-lang-alternates/i18n.xml",
+        views.sitemap,
+        {"sitemaps": item_by_lang_alternates_i18n_sitemaps},
+        name="django.contrib.sitemaps.views.sitemap",
+    ),
     path(
         "lastmod-sitemaps/descending.xml",
         views.sitemap,
