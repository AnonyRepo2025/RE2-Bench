diff --git a/astropy/io/fits/column.py b/astropy/io/fits/column.py
index 47f6e39..9f313d8 100644
--- a/astropy/io/fits/column.py
+++ b/astropy/io/fits/column.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/astropy__astropy-14578/astropy/io/fits/column.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 # Licensed under a 3-clause BSD style license - see PYFITS.rst
 
 import copy
@@ -1523,12 +1716,25 @@ class ColDefs(NotifierMixin):
 
         self._init_from_coldefs(columns)
 
+    @inspect_code
     def _init_from_array(self, array):
         self.columns = []
         for idx in range(len(array.dtype)):
             cname = array.dtype.names[idx]
             ftype = array.dtype.fields[cname][0]
-            format = self._col_format_cls.from_recformat(ftype)
+
+            if ftype.kind == "O":
+                dtypes = {np.array(array[cname][i]).dtype for i in range(len(array))}
+                if (len(dtypes) > 1) or (np.dtype("O") in dtypes):
+                    raise TypeError(
+                        f"Column '{cname}' contains unsupported object types or "
+                        f"mixed types: {dtypes}"
+                    )
+                ftype = dtypes.pop()
+                format = self._col_format_cls.from_recformat(ftype)
+                format = f"P{format}()"
+            else:
+                format = self._col_format_cls.from_recformat(ftype)
 
             # Determine the appropriate dimensions for items in the column
             dim = array.dtype[idx].shape[::-1]
diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py
index 3c97fb5..be2c7ab 100644
--- a/astropy/io/fits/tests/test_connect.py
+++ b/astropy/io/fits/tests/test_connect.py
@@ -414,6 +414,61 @@ class TestSingleTable:
         tab = Table.read(filename, mask_invalid=False)
         assert tab.mask is None
 
+    def test_heterogeneous_VLA_tables(self, tmp_path):
+        """
+        Check the behaviour of heterogeneous VLA object.
+        """
+        filename = tmp_path / "test_table_object.fits"
+        msg = "Column 'col1' contains unsupported object types or mixed types: "
+
+        # The column format fix the type of the arrays in the VLF object.
+        a = np.array([45, 30])
+        b = np.array([11.0, 12.0, 13])
+        var = np.array([a, b], dtype=object)
+        tab = Table({"col1": var})
+        with pytest.raises(TypeError, match=msg):
+            tab.write(filename)
+
+        # Strings in the VLF object can't be added to the table
+        a = np.array(["five", "thirty"])
+        b = np.array([11.0, 12.0, 13])
+        var = np.array([a, b], dtype=object)
+        with pytest.raises(TypeError, match=msg):
+            tab.write(filename)
+
+    def test_write_object_tables_with_unified(self, tmp_path):
+        """
+        Write objects with the unified I/O interface.
+        See https://github.com/astropy/astropy/issues/1906
+        """
+        filename = tmp_path / "test_table_object.fits"
+        msg = r"Column 'col1' contains unsupported object types or mixed types: {dtype\('O'\)}"
+        # Make a FITS table with an object column
+        tab = Table({"col1": [None]})
+        with pytest.raises(TypeError, match=msg):
+            tab.write(filename)
+
+    def test_write_VLA_tables_with_unified(self, tmp_path):
+        """
+        Write VLA objects with the unified I/O interface.
+        See https://github.com/astropy/astropy/issues/11323
+        """
+
+        filename = tmp_path / "test_table_VLA.fits"
+        # Make a FITS table with a variable-length array column
+        a = np.array([45, 30])
+        b = np.array([11, 12, 13])
+        c = np.array([45, 55, 65, 75])
+        var = np.array([a, b, c], dtype=object)
+
+        tabw = Table({"col1": var})
+        tabw.write(filename)
+
+        tab = Table.read(filename)
+        assert np.array_equal(tab[0]["col1"], np.array([45, 30]))
+        assert np.array_equal(tab[1]["col1"], np.array([11, 12, 13]))
+        assert np.array_equal(tab[2]["col1"], np.array([45, 55, 65, 75]))
+
 
 class TestMultipleHDU:
     def setup_class(self):
diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py
index 3419b74..3151283 100644
--- a/astropy/io/fits/tests/test_table.py
+++ b/astropy/io/fits/tests/test_table.py
@@ -3313,6 +3313,31 @@ class TestVLATables(FitsTestCase):
                 hdus[1].data["test"][1], np.array([[0.0, 1.0, 2.0], [3.0, 4.0, 5.0]])
             )
 
+    def test_heterogeneous_VLA_tables(self):
+        """
+        Check the behaviour of heterogeneous VLA object.
+        """
+
+        # The column format fix the type of the arrays in the VLF object.
+        a = np.array([45, 30])
+        b = np.array([11.0, 12.0, 13])
+        var = np.array([a, b], dtype=object)
+
+        c1 = fits.Column(name="var", format="PJ()", array=var)
+        hdu = fits.BinTableHDU.from_columns([c1])
+        assert hdu.data[0].array.dtype[0].subdtype[0] == "int32"
+
+        # Strings in the VLF object can't be added to the table
+        a = np.array([45, "thirty"])
+        b = np.array([11.0, 12.0, 13])
+        var = np.array([a, b], dtype=object)
+
+        c1 = fits.Column(name="var", format="PJ()", array=var)
+        with pytest.raises(
+            ValueError, match=r"invalid literal for int\(\) with base 10"
+        ):
+            fits.BinTableHDU.from_columns([c1])
+
 
 # These are tests that solely test the Column and ColDefs interfaces and
 # related functionality without directly involving full tables; currently there
