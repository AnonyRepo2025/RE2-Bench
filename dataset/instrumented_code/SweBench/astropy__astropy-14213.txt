diff --git a/astropy/units/quantity_helper/function_helpers.py b/astropy/units/quantity_helper/function_helpers.py
index d7e15db..95aa677 100644
--- a/astropy/units/quantity_helper/function_helpers.py
+++ b/astropy/units/quantity_helper/function_helpers.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/astropy__astropy-14213/astropy/units/quantity_helper/function_helpers.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 # Licensed under a 3-clause BSD style license. See LICENSE.rst except
 # for parts explicitly labelled as being (largely) copies of numpy
 # implementations; for those, see licenses/NUMPY_LICENSE.rst.
@@ -663,6 +856,14 @@ def _check_bins(bins, unit):
         return bins
 
 
+@inspect_code
+def _check_range(range, unit):
+    range = _as_quantity(range)
+    range = range.to_value(unit)
+    return range
+
+
+@inspect_code
 @function_helper
 def histogram(a, bins=10, range=None, weights=None, density=None):
     if weights is not None:
@@ -676,6 +877,9 @@ def histogram(a, bins=10, range=None, weights=None, density=None):
     if not isinstance(bins, str):
         bins = _check_bins(bins, a.unit)
 
+    if range is not None:
+        range = _check_range(range, a.unit)
+
     if density:
         unit = (unit or 1) / a.unit
 
@@ -694,9 +898,13 @@ def histogram_bin_edges(a, bins=10, range=None, weights=None):
     if not isinstance(bins, str):
         bins = _check_bins(bins, a.unit)
 
+    if range is not None:
+        range = _check_range(range, a.unit)
+
     return (a.value, bins, range, weights), {}, a.unit, None
 
 
+@inspect_code
 @function_helper
 def histogram2d(x, y, bins=10, range=None, weights=None, density=None):
     from astropy.units import Quantity
@@ -725,6 +933,11 @@ def histogram2d(x, y, bins=10, range=None, weights=None, density=None):
             bins = _check_bins(bins, x.unit)
             y = y.to(x.unit)
 
+    if range is not None:
+        range = tuple(
+            _check_range(r, unit) for (r, unit) in zip(range, (x.unit, y.unit))
+        )
+
     if density:
         unit = (unit or 1) / x.unit / y.unit
 
@@ -736,6 +949,7 @@ def histogram2d(x, y, bins=10, range=None, weights=None, density=None):
     )
 
 
+@inspect_code
 @function_helper
 def histogramdd(sample, bins=10, range=None, weights=None, density=None):
     if weights is not None:
@@ -773,6 +987,9 @@ def histogramdd(sample, bins=10, range=None, weights=None, density=None):
             )
         bins = [_check_bins(b, unit) for (b, unit) in zip(bins, sample_units)]
 
+    if range is not None:
+        range = tuple(_check_range(r, unit) for (r, unit) in zip(range, sample_units))
+
     if density:
         unit = functools.reduce(operator.truediv, sample_units, (unit or 1))
 
diff --git a/astropy/units/tests/test_quantity_non_ufuncs.py b/astropy/units/tests/test_quantity_non_ufuncs.py
index 49d9ddd..f252b98 100644
--- a/astropy/units/tests/test_quantity_non_ufuncs.py
+++ b/astropy/units/tests/test_quantity_non_ufuncs.py
@@ -1392,6 +1392,25 @@ class TestHistogramFunctions(metaclass=CoverageMeta):
         with pytest.raises(u.UnitsError):
             np.histogram(x.value, [125, 200] * u.s)
 
+    @classmethod
+    def _range_value(cls, range, unit):
+        if isinstance(range, u.Quantity):
+            return range.to_value(unit)
+        else:
+            return [cls._range_value(r, unit) for r in range]
+
+    @pytest.mark.parametrize("range", [[2 * u.m, 500 * u.cm], [2, 5] * u.m])
+    @needs_array_function
+    def test_histogram_range(self, range):
+        self.check(
+            np.histogram,
+            self.x,
+            range=range,
+            value_args=[self.x.value],
+            value_kwargs=dict(range=self._range_value(range, self.x.unit)),
+            expected_units=(None, self.x.unit),
+        )
+
     @needs_array_function
     def test_histogram_bin_edges(self):
         x = np.array([1.1, 1.2, 1.3, 2.1, 5.1]) * u.m
@@ -1411,6 +1430,15 @@ class TestHistogramFunctions(metaclass=CoverageMeta):
         with pytest.raises(u.UnitsError):
             np.histogram_bin_edges(x.value, [125, 200] * u.s)
 
+    @pytest.mark.parametrize("range", [[2 * u.m, 500 * u.cm], [2, 5] * u.m])
+    @needs_array_function
+    def test_histogram_bin_edges_range(self, range):
+        out_b = np.histogram_bin_edges(self.x, range=range)
+        expected_b = np.histogram_bin_edges(
+            self.x.value, range=self._range_value(range, self.x.unit)
+        )
+        assert np.all(out_b.value == expected_b)
+
     @needs_array_function
     def test_histogram2d(self):
         x, y = self.x, self.y
@@ -1481,6 +1509,31 @@ class TestHistogramFunctions(metaclass=CoverageMeta):
         with pytest.raises(u.UnitsError):
             np.histogram2d(x.value, y.value, [125, 200] * u.s)
 
+    @pytest.mark.parametrize(
+        argnames="range",
+        argvalues=[
+            [[2 * u.m, 500 * u.cm], [1 * u.cm, 40 * u.mm]],
+            [[200, 500] * u.cm, [10, 40] * u.mm],
+            [[200, 500], [1, 4]] * u.cm,
+        ],
+    )
+    @needs_array_function
+    def test_histogram2d_range(self, range):
+        self.check(
+            np.histogram2d,
+            self.x,
+            self.y,
+            range=range,
+            value_args=[self.x.value, self.y.value],
+            value_kwargs=dict(
+                range=[
+                    self._range_value(r, un)
+                    for (r, un) in zip(range, (self.x.unit, self.y.unit))
+                ]
+            ),
+            expected_units=(None, self.x.unit, self.y.unit),
+        )
+
     @needs_array_function
     def test_histogramdd(self):
         # First replicates of the histogram2d tests, but using the
@@ -1571,6 +1624,30 @@ class TestHistogramFunctions(metaclass=CoverageMeta):
         with pytest.raises(u.UnitsError):
             np.histogramdd(sample_values, ([125, 200] * u.s, [125, 200]))
 
+    @pytest.mark.parametrize(
+        argnames="range",
+        argvalues=[
+            [[2 * u.m, 500 * u.cm], [1 * u.cm, 40 * u.mm]],
+            [[200, 500] * u.cm, [10, 40] * u.mm],
+            [[200, 500], [1, 4]] * u.cm,
+        ],
+    )
+    @needs_array_function
+    def test_histogramdd_range(self, range):
+        self.check(
+            np.histogramdd,
+            (self.x, self.y),
+            range=range,
+            value_args=[(self.x.value, self.y.value)],
+            value_kwargs=dict(
+                range=[
+                    self._range_value(r, un)
+                    for (r, un) in zip(range, (self.x.unit, self.y.unit))
+                ]
+            ),
+            expected_units=(None, (self.x.unit, self.y.unit)),
+        )
+
     @needs_array_function
     def test_correlate(self):
         x1 = [1, 2, 3] * u.m
