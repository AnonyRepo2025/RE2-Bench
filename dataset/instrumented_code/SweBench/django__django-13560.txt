diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 3bdd89c..8308792 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/django__django-13560/django/db/models/deletion.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 import operator
 from collections import Counter, defaultdict
 from functools import partial, reduce
@@ -211,6 +404,7 @@ class Collector:
         else:
             return [objs]
 
+    @inspect_code
     def collect(self, objs, source=None, nullable=False, collect_related=True,
                 source_attr=None, reverse_dependency=False, keep_parents=False,
                 fail_on_restricted=True):
@@ -305,7 +499,7 @@ class Collector:
                     model.__name__,
                     ', '.join(protected_objects),
                 ),
-                chain.from_iterable(protected_objects.values()),
+                set(chain.from_iterable(protected_objects.values())),
             )
         for related_model, related_fields in model_fast_deletes.items():
             batches = self.get_del_batches(new_objs, related_fields)
@@ -340,7 +534,7 @@ class Collector:
                             model.__name__,
                             ', '.join(restricted_objects),
                         ),
-                        chain.from_iterable(restricted_objects.values()),
+                        set(chain.from_iterable(restricted_objects.values())),
                     )
 
     def related_objects(self, related_model, related_fields, objs):
diff --git a/tests/delete/tests.py b/tests/delete/tests.py
index 485ae1a..3dce135 100644
--- a/tests/delete/tests.py
+++ b/tests/delete/tests.py
@@ -75,19 +75,21 @@ class OnDeleteTests(TestCase):
             "Cannot delete some instances of model 'R' because they are "
             "referenced through protected foreign keys: 'A.protect'."
         )
-        with self.assertRaisesMessage(ProtectedError, msg):
+        with self.assertRaisesMessage(ProtectedError, msg) as cm:
             a.protect.delete()
+        self.assertEqual(cm.exception.protected_objects, {a})
 
     def test_protect_multiple(self):
         a = create_a('protect')
-        B.objects.create(protect=a.protect)
+        b = B.objects.create(protect=a.protect)
         msg = (
             "Cannot delete some instances of model 'R' because they are "
             "referenced through protected foreign keys: 'A.protect', "
             "'B.protect'."
         )
-        with self.assertRaisesMessage(ProtectedError, msg):
+        with self.assertRaisesMessage(ProtectedError, msg) as cm:
             a.protect.delete()
+        self.assertEqual(cm.exception.protected_objects, {a, b})
 
     def test_protect_path(self):
         a = create_a('protect')
@@ -97,8 +99,9 @@ class OnDeleteTests(TestCase):
             "Cannot delete some instances of model 'P' because they are "
             "referenced through protected foreign keys: 'R.p'."
         )
-        with self.assertRaisesMessage(ProtectedError, msg):
+        with self.assertRaisesMessage(ProtectedError, msg) as cm:
             a.protect.p.delete()
+        self.assertEqual(cm.exception.protected_objects, {a})
 
     def test_do_nothing(self):
         # Testing DO_NOTHING is a bit harder: It would raise IntegrityError for a normal model,
@@ -176,19 +179,21 @@ class OnDeleteTests(TestCase):
             "Cannot delete some instances of model 'R' because they are "
             "referenced through restricted foreign keys: 'A.restrict'."
         )
-        with self.assertRaisesMessage(RestrictedError, msg):
+        with self.assertRaisesMessage(RestrictedError, msg) as cm:
             a.restrict.delete()
+        self.assertEqual(cm.exception.restricted_objects, {a})
 
     def test_restrict_multiple(self):
         a = create_a('restrict')
-        B3.objects.create(restrict=a.restrict)
+        b3 = B3.objects.create(restrict=a.restrict)
         msg = (
             "Cannot delete some instances of model 'R' because they are "
             "referenced through restricted foreign keys: 'A.restrict', "
             "'B3.restrict'."
         )
-        with self.assertRaisesMessage(RestrictedError, msg):
+        with self.assertRaisesMessage(RestrictedError, msg) as cm:
             a.restrict.delete()
+        self.assertEqual(cm.exception.restricted_objects, {a, b3})
 
     def test_restrict_path_cascade_indirect(self):
         a = create_a('restrict')
@@ -198,8 +203,9 @@ class OnDeleteTests(TestCase):
             "Cannot delete some instances of model 'P' because they are "
             "referenced through restricted foreign keys: 'A.restrict'."
         )
-        with self.assertRaisesMessage(RestrictedError, msg):
+        with self.assertRaisesMessage(RestrictedError, msg) as cm:
             a.restrict.p.delete()
+        self.assertEqual(cm.exception.restricted_objects, {a})
         # Object referenced also with CASCADE relationship can be deleted.
         a.cascade.p = a.restrict.p
         a.cascade.save()
@@ -221,13 +227,14 @@ class OnDeleteTests(TestCase):
         delete_top = DeleteTop.objects.create()
         b1 = B1.objects.create(delete_top=delete_top)
         b2 = B2.objects.create(delete_top=delete_top)
-        DeleteBottom.objects.create(b1=b1, b2=b2)
+        delete_bottom = DeleteBottom.objects.create(b1=b1, b2=b2)
         msg = (
             "Cannot delete some instances of model 'B1' because they are "
             "referenced through restricted foreign keys: 'DeleteBottom.b1'."
         )
-        with self.assertRaisesMessage(RestrictedError, msg):
+        with self.assertRaisesMessage(RestrictedError, msg) as cm:
             b1.delete()
+        self.assertEqual(cm.exception.restricted_objects, {delete_bottom})
         self.assertTrue(DeleteTop.objects.exists())
         self.assertTrue(B1.objects.exists())
         self.assertTrue(B2.objects.exists())
@@ -243,14 +250,18 @@ class OnDeleteTests(TestCase):
         delete_top = DeleteTop.objects.create()
         generic_b1 = GenericB1.objects.create(generic_delete_top=delete_top)
         generic_b2 = GenericB2.objects.create(generic_delete_top=delete_top)
-        GenericDeleteBottom.objects.create(generic_b1=generic_b1, generic_b2=generic_b2)
+        generic_delete_bottom = GenericDeleteBottom.objects.create(
+            generic_b1=generic_b1,
+            generic_b2=generic_b2,
+        )
         msg = (
             "Cannot delete some instances of model 'GenericB1' because they "
             "are referenced through restricted foreign keys: "
             "'GenericDeleteBottom.generic_b1'."
         )
-        with self.assertRaisesMessage(RestrictedError, msg):
+        with self.assertRaisesMessage(RestrictedError, msg) as cm:
             generic_b1.delete()
+        self.assertEqual(cm.exception.restricted_objects, {generic_delete_bottom})
         self.assertTrue(DeleteTop.objects.exists())
         self.assertTrue(GenericB1.objects.exists())
         self.assertTrue(GenericB2.objects.exists())
