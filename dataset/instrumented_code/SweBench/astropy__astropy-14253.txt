diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index 53e67ac..e11b143 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/astropy__astropy-14253/astropy/units/quantity.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 # Licensed under a 3-clause BSD style license - see LICENSE.rst
 """
 This module defines the `Quantity` object, which represents a number with some
@@ -698,6 +891,7 @@ class Quantity(np.ndarray):
             else:
                 raise e
 
+    @inspect_code
     def _result_as_quantity(self, result, unit, out):
         """Turn result into a quantity with the given unit.
 
@@ -731,7 +925,9 @@ class Quantity(np.ndarray):
 
         if out is None:
             # View the result array as a Quantity with the proper unit.
-            return result if unit is None else self._new_view(result, unit)
+            return (
+                result if unit is None else self._new_view(result, unit, finalize=False)
+            )
 
         elif isinstance(out, Quantity):
             # For given Quantity output, just set the unit. We know the unit
@@ -761,9 +957,9 @@ class Quantity(np.ndarray):
         """
         return Quantity, True
 
-    def _new_view(self, obj=None, unit=None):
-        """
-        Create a Quantity view of some array-like input, and set the unit
+    @inspect_code
+    def _new_view(self, obj=None, unit=None, finalize=True):
+        """Create a Quantity view of some array-like input, and set the unit
 
         By default, return a view of ``obj`` of the same class as ``self`` and
         with the same unit.  Subclasses can override the type of class for a
@@ -785,9 +981,17 @@ class Quantity(np.ndarray):
             subclass, and explicitly assigned to the view if given.
             If not given, the subclass and unit will be that of ``self``.
 
+        finalize : bool, optional
+            Whether to call ``__array_finalize__`` to transfer properties from
+            ``self`` to the new view of ``obj`` (e.g., ``info`` for all
+            subclasses, or ``_wrap_angle`` for `~astropy.coordinates.Latitude`).
+            Default: `True`, as appropriate for, e.g., unit conversions or slicing,
+            where the nature of the object does not change.
+
         Returns
         -------
         view : `~astropy.units.Quantity` subclass
+
         """
         # Determine the unit and quantity subclass that we need for the view.
         if unit is None:
@@ -823,7 +1027,8 @@ class Quantity(np.ndarray):
         # such as ``info``, ``wrap_angle`` in `Longitude`, etc.
         view = obj.view(quantity_subclass)
         view._set_unit(unit)
-        view.__array_finalize__(self)
+        if finalize:
+            view.__array_finalize__(self)
         return view
 
     def _set_unit(self, unit):
@@ -1201,12 +1406,15 @@ class Quantity(np.ndarray):
         return NotImplemented
 
     # Arithmetic operations
+    @inspect_code
     def __mul__(self, other):
         """Multiplication between `Quantity` objects and other objects."""
 
         if isinstance(other, (UnitBase, str)):
             try:
-                return self._new_view(self.copy(), other * self.unit)
+                return self._new_view(
+                    self.value.copy(), other * self.unit, finalize=False
+                )
             except UnitsError:  # let other try to deal with it
                 return NotImplemented
 
@@ -1228,12 +1436,15 @@ class Quantity(np.ndarray):
 
         return self.__mul__(other)
 
+    @inspect_code
     def __truediv__(self, other):
         """Division between `Quantity` objects and other objects."""
 
         if isinstance(other, (UnitBase, str)):
             try:
-                return self._new_view(self.copy(), self.unit / other)
+                return self._new_view(
+                    self.value.copy(), self.unit / other, finalize=False
+                )
             except UnitsError:  # let other try to deal with it
                 return NotImplemented
 
@@ -1252,14 +1463,16 @@ class Quantity(np.ndarray):
         """Right Division between `Quantity` objects and other objects."""
 
         if isinstance(other, (UnitBase, str)):
-            return self._new_view(1.0 / self.value, other / self.unit)
+            return self._new_view(1.0 / self.value, other / self.unit, finalize=False)
 
         return super().__rtruediv__(other)
 
     def __pow__(self, other):
         if isinstance(other, Fraction):
             # Avoid getting object arrays by raising the value to a Fraction.
-            return self._new_view(self.value ** float(other), self.unit**other)
+            return self._new_view(
+                self.value ** float(other), self.unit**other, finalize=False
+            )
 
         return super().__pow__(other)
 
@@ -1281,9 +1494,12 @@ class Quantity(np.ndarray):
 
         return quantity_iter()
 
+    @inspect_code
     def __getitem__(self, key):
         if isinstance(key, str) and isinstance(self.unit, StructuredUnit):
-            return self._new_view(self.view(np.ndarray)[key], self.unit[key])
+            return self._new_view(
+                self.view(np.ndarray)[key], self.unit[key], finalize=False
+            )
 
         try:
             out = super().__getitem__(key)
diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py
index 0e46da8..994b075 100644
--- a/astropy/units/tests/test_quantity.py
+++ b/astropy/units/tests/test_quantity.py
@@ -397,6 +397,16 @@ class TestQuantityOperations:
         assert new_quantity.value == 171.3
         assert new_quantity.unit == u.meter
 
+        # Multiple with a unit.
+        new_quantity = self.q1 * u.s
+        assert new_quantity.value == 11.42
+        assert new_quantity.unit == u.Unit("m s")
+
+        # Reverse multiple with a unit.
+        new_quantity = u.s * self.q1
+        assert new_quantity.value == 11.42
+        assert new_quantity.unit == u.Unit("m s")
+
     def test_division(self):
         # Take units from left object, q1
         new_quantity = self.q1 / self.q2
@@ -424,6 +434,16 @@ class TestQuantityOperations:
         assert new_quantity.value == 1.0
         assert new_quantity.unit == u.Unit("1/m")
 
+        # Divide by a unit.
+        new_quantity = self.q1 / u.s
+        assert new_quantity.value == 11.42
+        assert new_quantity.unit == u.Unit("m/s")
+
+        # Divide into a unit.
+        new_quantity = u.s / self.q1
+        assert new_quantity.value == 1 / 11.42
+        assert new_quantity.unit == u.Unit("s/m")
+
     def test_commutativity(self):
         """Regression test for issue #587."""
 
