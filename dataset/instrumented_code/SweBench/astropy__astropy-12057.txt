diff --git a/astropy/nddata/nduncertainty.py b/astropy/nddata/nduncertainty.py
index 05ce66c..6ac8ac4 100644
--- a/astropy/nddata/nduncertainty.py
+++ b/astropy/nddata/nduncertainty.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/astropy__astropy-12057/astropy/nddata/nduncertainty.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 # Licensed under a 3-clause BSD style license - see LICENSE.rst
 
 import numpy as np
@@ -395,6 +588,41 @@ class NDUncertainty(metaclass=ABCMeta):
     def _propagate_divide(self, other_uncert, result_data, correlation):
         return None
 
+    @inspect_code
+    def represent_as(self, other_uncert):
+        """Convert this uncertainty to a different uncertainty type.
+
+        Parameters
+        ----------
+        other_uncert : `NDUncertainty` subclass
+            The `NDUncertainty` subclass to convert to.
+
+        Returns
+        -------
+        resulting_uncertainty : `NDUncertainty` instance
+            An instance of ``other_uncert`` subclass containing the uncertainty
+            converted to the new uncertainty type.
+
+        Raises
+        ------
+        TypeError
+            If either the initial or final subclasses do not support
+            conversion, a `TypeError` is raised.
+        """
+        as_variance = getattr(self, "_convert_to_variance", None)
+        if as_variance is None:
+            raise TypeError(
+                f"{type(self)} does not support conversion to another "
+                "uncertainty type."
+            )
+        from_variance = getattr(other_uncert, "_convert_from_variance", None)
+        if from_variance is None:
+            raise TypeError(
+                f"{other_uncert.__name__} does not support conversion from "
+                "another uncertainty type."
+            )
+        return from_variance(as_variance())
+
 
 class UnknownUncertainty(NDUncertainty):
     """This class implements any unknown uncertainty type.
@@ -748,6 +976,18 @@ class StdDevUncertainty(_VariancePropagationMixin, NDUncertainty):
     def _data_unit_to_uncertainty_unit(self, value):
         return value
 
+    @inspect_code
+    def _convert_to_variance(self):
+        new_array = None if self.array is None else self.array ** 2
+        new_unit = None if self.unit is None else self.unit ** 2
+        return VarianceUncertainty(new_array, unit=new_unit)
+
+    @classmethod
+    def _convert_from_variance(cls, var_uncert):
+        new_array = None if var_uncert.array is None else var_uncert.array ** (1 / 2)
+        new_unit = None if var_uncert.unit is None else var_uncert.unit ** (1 / 2)
+        return cls(new_array, unit=new_unit)
+
 
 class VarianceUncertainty(_VariancePropagationMixin, NDUncertainty):
     """
@@ -834,6 +1074,14 @@ class VarianceUncertainty(_VariancePropagationMixin, NDUncertainty):
     def _data_unit_to_uncertainty_unit(self, value):
         return value ** 2
 
+    @inspect_code
+    def _convert_to_variance(self):
+        return self
+
+    @classmethod
+    def _convert_from_variance(cls, var_uncert):
+        return var_uncert
+
 
 def _inverse(x):
     """Just a simple inverse for use in the InverseVariance"""
@@ -933,3 +1181,14 @@ class InverseVariance(_VariancePropagationMixin, NDUncertainty):
 
     def _data_unit_to_uncertainty_unit(self, value):
         return 1 / value ** 2
+
+    def _convert_to_variance(self):
+        new_array = None if self.array is None else 1 / self.array
+        new_unit = None if self.unit is None else 1 / self.unit
+        return VarianceUncertainty(new_array, unit=new_unit)
+
+    @classmethod
+    def _convert_from_variance(cls, var_uncert):
+        new_array = None if var_uncert.array is None else 1 / var_uncert.array
+        new_unit = None if var_uncert.unit is None else 1 / var_uncert.unit
+        return cls(new_array, unit=new_unit)
diff --git a/astropy/nddata/tests/test_nduncertainty.py b/astropy/nddata/tests/test_nduncertainty.py
index 1cea6b9..78e8129 100644
--- a/astropy/nddata/tests/test_nduncertainty.py
+++ b/astropy/nddata/tests/test_nduncertainty.py
@@ -4,7 +4,7 @@ import pickle
 
 import pytest
 import numpy as np
-from numpy.testing import assert_array_equal
+from numpy.testing import assert_array_equal, assert_allclose
 
 from astropy.nddata.nduncertainty import (StdDevUncertainty,
                              VarianceUncertainty,
@@ -73,6 +73,11 @@ uncertainty_types_to_be_tested = [
     UnknownUncertainty
 ]
 
+uncertainty_types_with_conversion_support = (
+    StdDevUncertainty, VarianceUncertainty, InverseVariance)
+uncertainty_types_without_conversion_support = (
+    FakeUncertainty, UnknownUncertainty)
+
 
 @pytest.mark.parametrize(('UncertClass'), uncertainty_types_to_be_tested)
 def test_init_fake_with_list(UncertClass):
@@ -354,3 +359,35 @@ def test_assigning_uncertainty_with_bad_unit_to_parent_fails(NDClass,
     v = UncertClass([1, 1], unit=u.second)
     with pytest.raises(u.UnitConversionError):
         ndd.uncertainty = v
+
+
+@pytest.mark.parametrize('UncertClass', uncertainty_types_with_conversion_support)
+def test_self_conversion_via_variance_supported(UncertClass):
+    uncert = np.arange(1, 11).reshape(2, 5) * u.adu
+    start_uncert = UncertClass(uncert)
+    final_uncert = start_uncert.represent_as(UncertClass)
+    assert_array_equal(start_uncert.array, final_uncert.array)
+    assert start_uncert.unit == final_uncert.unit
+
+
+@pytest.mark.parametrize(
+    'UncertClass,to_variance_func',
+    zip(uncertainty_types_with_conversion_support,
+    (lambda x: x ** 2, lambda x: x, lambda x: 1 / x))
+)
+def test_conversion_to_from_variance_supported(UncertClass, to_variance_func):
+    uncert = np.arange(1, 11).reshape(2, 5) * u.adu
+    start_uncert = UncertClass(uncert)
+    var_uncert = start_uncert.represent_as(VarianceUncertainty)
+    final_uncert = var_uncert.represent_as(UncertClass)
+    assert_allclose(to_variance_func(start_uncert.array), var_uncert.array)
+    assert_array_equal(start_uncert.array, final_uncert.array)
+    assert start_uncert.unit == final_uncert.unit
+
+
+@pytest.mark.parametrize('UncertClass', uncertainty_types_without_conversion_support)
+def test_self_conversion_via_variance_not_supported(UncertClass):
+    uncert = np.arange(1, 11).reshape(2, 5) * u.adu
+    start_uncert = UncertClass(uncert)
+    with pytest.raises(TypeError):
+        final_uncert = start_uncert.represent_as(UncertClass)
