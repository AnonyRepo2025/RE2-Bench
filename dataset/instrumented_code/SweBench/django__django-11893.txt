diff --git a/django/forms/fields.py b/django/forms/fields.py
index 285f8cf..4051d5e 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/django__django-11893/django/forms/fields.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 """
 Field classes.
 """
@@ -25,7 +218,7 @@ from django.forms.widgets import (
     URLInput,
 )
 from django.utils import formats
-from django.utils.dateparse import parse_duration
+from django.utils.dateparse import parse_datetime, parse_duration
 from django.utils.duration import duration_string
 from django.utils.ipv6 import clean_ipv6_address
 from django.utils.regex_helper import _lazy_re_compile
@@ -447,6 +640,7 @@ class DateTimeField(BaseTemporalField):
             value = to_current_timezone(value)
         return value
 
+    @inspect_code
     def to_python(self, value):
         """
         Validate that the input can be converted to a datetime. Return a
@@ -459,7 +653,12 @@ class DateTimeField(BaseTemporalField):
         if isinstance(value, datetime.date):
             result = datetime.datetime(value.year, value.month, value.day)
             return from_current_timezone(result)
-        result = super().to_python(value)
+        try:
+            result = parse_datetime(value.strip())
+        except ValueError:
+            raise ValidationError(self.error_messages['invalid'], code='invalid')
+        if not result:
+            result = super().to_python(value)
         return from_current_timezone(result)
 
     def strptime(self, value, format):
diff --git a/tests/forms_tests/field_tests/test_datetimefield.py b/tests/forms_tests/field_tests/test_datetimefield.py
index 5cb527b..50f1d8e 100644
--- a/tests/forms_tests/field_tests/test_datetimefield.py
+++ b/tests/forms_tests/field_tests/test_datetimefield.py
@@ -2,6 +2,7 @@ from datetime import date, datetime
 
 from django.forms import DateTimeField, ValidationError
 from django.test import SimpleTestCase
+from django.utils.timezone import get_fixed_timezone, utc
 
 
 class DateTimeFieldTest(SimpleTestCase):
@@ -31,6 +32,19 @@ class DateTimeFieldTest(SimpleTestCase):
             ('10/25/06 14:30:00', datetime(2006, 10, 25, 14, 30)),
             ('10/25/06 14:30', datetime(2006, 10, 25, 14, 30)),
             ('10/25/06', datetime(2006, 10, 25, 0, 0)),
+            # ISO 8601 formats.
+            (
+                '2014-09-23T22:34:41.614804',
+                datetime(2014, 9, 23, 22, 34, 41, 614804),
+            ),
+            ('2014-09-23T22:34:41', datetime(2014, 9, 23, 22, 34, 41)),
+            ('2014-09-23T22:34', datetime(2014, 9, 23, 22, 34)),
+            ('2014-09-23', datetime(2014, 9, 23, 0, 0)),
+            ('2014-09-23T22:34Z', datetime(2014, 9, 23, 22, 34, tzinfo=utc)),
+            (
+                '2014-09-23T22:34+07:00',
+                datetime(2014, 9, 23, 22, 34, tzinfo=get_fixed_timezone(420)),
+            ),
             # Whitespace stripping.
             (' 2006-10-25   14:30:45 ', datetime(2006, 10, 25, 14, 30, 45)),
             (' 2006-10-25 ', datetime(2006, 10, 25, 0, 0)),
@@ -39,6 +53,11 @@ class DateTimeFieldTest(SimpleTestCase):
             (' 10/25/2006 ', datetime(2006, 10, 25, 0, 0)),
             (' 10/25/06 14:30:45 ', datetime(2006, 10, 25, 14, 30, 45)),
             (' 10/25/06 ', datetime(2006, 10, 25, 0, 0)),
+            (
+                ' 2014-09-23T22:34:41.614804 ',
+                datetime(2014, 9, 23, 22, 34, 41, 614804),
+            ),
+            (' 2014-09-23T22:34Z ', datetime(2014, 9, 23, 22, 34, tzinfo=utc)),
         ]
         f = DateTimeField()
         for value, expected_datetime in tests:
@@ -54,9 +73,11 @@ class DateTimeFieldTest(SimpleTestCase):
             f.clean('2006-10-25 4:30 p.m.')
         with self.assertRaisesMessage(ValidationError, msg):
             f.clean('   ')
+        with self.assertRaisesMessage(ValidationError, msg):
+            f.clean('2014-09-23T28:23')
         f = DateTimeField(input_formats=['%Y %m %d %I:%M %p'])
         with self.assertRaisesMessage(ValidationError, msg):
-            f.clean('2006-10-25 14:30:45')
+            f.clean('2006.10.25 14:30:45')
 
     def test_datetimefield_clean_input_formats(self):
         tests = [
@@ -72,6 +93,8 @@ class DateTimeFieldTest(SimpleTestCase):
                     datetime(2006, 10, 25, 14, 30, 59, 200),
                 ),
                 ('2006 10 25 2:30 PM', datetime(2006, 10, 25, 14, 30)),
+                # ISO-like formats are always accepted.
+                ('2006-10-25 14:30:45', datetime(2006, 10, 25, 14, 30, 45)),
             )),
             ('%Y.%m.%d %H:%M:%S.%f', (
                 (
diff --git a/tests/forms_tests/tests/test_input_formats.py b/tests/forms_tests/tests/test_input_formats.py
index 690a338..e7aabf7 100644
--- a/tests/forms_tests/tests/test_input_formats.py
+++ b/tests/forms_tests/tests/test_input_formats.py
@@ -703,7 +703,7 @@ class LocalizedDateTimeTests(SimpleTestCase):
         f = forms.DateTimeField(input_formats=["%H.%M.%S %m.%d.%Y", "%H.%M %m-%d-%Y"], localize=True)
         # Parse a date in an unaccepted format; get an error
         with self.assertRaises(forms.ValidationError):
-            f.clean('2010-12-21 13:30:05')
+            f.clean('2010/12/21 13:30:05')
         with self.assertRaises(forms.ValidationError):
             f.clean('1:30:05 PM 21/12/2010')
         with self.assertRaises(forms.ValidationError):
@@ -711,8 +711,12 @@ class LocalizedDateTimeTests(SimpleTestCase):
 
         # Parse a date in a valid format, get a parsed result
         result = f.clean('13.30.05 12.21.2010')
-        self.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))
-
+        self.assertEqual(datetime(2010, 12, 21, 13, 30, 5), result)
+        # ISO format is always valid.
+        self.assertEqual(
+            f.clean('2010-12-21 13:30:05'),
+            datetime(2010, 12, 21, 13, 30, 5),
+        )
         # The parsed result does a round trip to the same format
         text = f.widget.format_value(result)
         self.assertEqual(text, "21.12.2010 13:30:05")
@@ -733,7 +737,7 @@ class CustomDateTimeInputFormatsTests(SimpleTestCase):
         f = forms.DateTimeField()
         # Parse a date in an unaccepted format; get an error
         with self.assertRaises(forms.ValidationError):
-            f.clean('2010-12-21 13:30:05')
+            f.clean('2010/12/21 13:30:05')
 
         # Parse a date in a valid format, get a parsed result
         result = f.clean('1:30:05 PM 21/12/2010')
@@ -756,7 +760,7 @@ class CustomDateTimeInputFormatsTests(SimpleTestCase):
         f = forms.DateTimeField(localize=True)
         # Parse a date in an unaccepted format; get an error
         with self.assertRaises(forms.ValidationError):
-            f.clean('2010-12-21 13:30:05')
+            f.clean('2010/12/21 13:30:05')
 
         # Parse a date in a valid format, get a parsed result
         result = f.clean('1:30:05 PM 21/12/2010')
@@ -781,7 +785,7 @@ class CustomDateTimeInputFormatsTests(SimpleTestCase):
         with self.assertRaises(forms.ValidationError):
             f.clean('13:30:05 21.12.2010')
         with self.assertRaises(forms.ValidationError):
-            f.clean('2010-12-21 13:30:05')
+            f.clean('2010/12/21 13:30:05')
 
         # Parse a date in a valid format, get a parsed result
         result = f.clean('12.21.2010 13:30:05')
@@ -806,7 +810,7 @@ class CustomDateTimeInputFormatsTests(SimpleTestCase):
         with self.assertRaises(forms.ValidationError):
             f.clean('13:30:05 21.12.2010')
         with self.assertRaises(forms.ValidationError):
-            f.clean('2010-12-21 13:30:05')
+            f.clean('2010/12/21 13:30:05')
 
         # Parse a date in a valid format, get a parsed result
         result = f.clean('12.21.2010 13:30:05')
@@ -877,7 +881,7 @@ class SimpleDateTimeFormatTests(SimpleTestCase):
         f = forms.DateTimeField(input_formats=["%I:%M:%S %p %d.%m.%Y", "%I:%M %p %d-%m-%Y"])
         # Parse a date in an unaccepted format; get an error
         with self.assertRaises(forms.ValidationError):
-            f.clean('2010-12-21 13:30:05')
+            f.clean('2010/12/21 13:30:05')
 
         # Parse a date in a valid format, get a parsed result
         result = f.clean('1:30:05 PM 21.12.2010')
@@ -900,7 +904,7 @@ class SimpleDateTimeFormatTests(SimpleTestCase):
         f = forms.DateTimeField(input_formats=["%I:%M:%S %p %d.%m.%Y", "%I:%M %p %d-%m-%Y"], localize=True)
         # Parse a date in an unaccepted format; get an error
         with self.assertRaises(forms.ValidationError):
-            f.clean('2010-12-21 13:30:05')
+            f.clean('2010/12/21 13:30:05')
 
         # Parse a date in a valid format, get a parsed result
         result = f.clean('1:30:05 PM 21.12.2010')
diff --git a/tests/timezones/tests.py b/tests/timezones/tests.py
index 91c8f9f..67bac73 100644
--- a/tests/timezones/tests.py
+++ b/tests/timezones/tests.py
@@ -1081,11 +1081,6 @@ class NewFormsTests(TestCase):
             self.assertTrue(form.is_valid())
             self.assertEqual(form.cleaned_data['dt'], datetime.datetime(2011, 9, 1, 10, 20, 30, tzinfo=UTC))
 
-    def test_form_with_explicit_timezone(self):
-        form = EventForm({'dt': '2011-09-01 17:20:30+07:00'})
-        # Datetime inputs formats don't allow providing a time zone.
-        self.assertFalse(form.is_valid())
-
     def test_form_with_non_existent_time(self):
         with timezone.override(pytz.timezone('Europe/Paris')):
             form = EventForm({'dt': '2011-03-27 02:30:00'})
