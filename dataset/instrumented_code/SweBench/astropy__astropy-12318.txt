diff --git a/astropy/modeling/physical_models.py b/astropy/modeling/physical_models.py
index 437f97d..896b70d 100644
--- a/astropy/modeling/physical_models.py
+++ b/astropy/modeling/physical_models.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/astropy__astropy-12318/astropy/modeling/physical_models.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 # Licensed under a 3-clause BSD style license - see LICENSE.rst
 """
 Models that have physical origins.
@@ -27,7 +220,12 @@ class BlackBody(Fittable1DModel):
         Blackbody temperature.
 
     scale : float or `~astropy.units.Quantity` ['dimensionless']
-        Scale factor
+        Scale factor.  If dimensionless, input units will assumed
+        to be in Hz and output units in (erg / (cm ** 2 * s * Hz * sr).
+        If not dimensionless, must be equivalent to either
+        (erg / (cm ** 2 * s * Hz * sr) or erg / (cm ** 2 * s * AA * sr),
+        in which case the result will be returned in the requested units and
+        the scale will be stripped of units (with the float value applied).
 
     Notes
     -----
@@ -70,12 +268,41 @@ class BlackBody(Fittable1DModel):
     scale = Parameter(default=1.0, min=0, description="Scale factor")
 
     # We allow values without units to be passed when evaluating the model, and
-    # in this case the input x values are assumed to be frequencies in Hz.
+    # in this case the input x values are assumed to be frequencies in Hz or wavelengths
+    # in AA (depending on the choice of output units controlled by units on scale
+    # and stored in self._output_units during init).
     _input_units_allow_dimensionless = True
 
     # We enable the spectral equivalency by default for the spectral axis
     input_units_equivalencies = {'x': u.spectral()}
 
+    # Store the native units returned by B_nu equation
+    _native_units = u.erg / (u.cm ** 2 * u.s * u.Hz * u.sr)
+
+    # Store the base native output units.  If scale is not dimensionless, it
+    # must be equivalent to one of these.  If equivalent to SLAM, then
+    # input_units will expect AA for 'x', otherwise Hz.
+    _native_output_units = {'SNU': u.erg / (u.cm ** 2 * u.s * u.Hz * u.sr),
+                            'SLAM': u.erg / (u.cm ** 2 * u.s * u.AA * u.sr)}
+
+    def __init__(self, *args, **kwargs):
+        scale = kwargs.get('scale', None)
+
+        # Support scale with non-dimensionless unit by stripping the unit and
+        # storing as self._output_units.
+        if hasattr(scale, 'unit') and not scale.unit.is_equivalent(u.dimensionless_unscaled):
+            output_units = scale.unit
+            if not output_units.is_equivalent(self._native_units, u.spectral_density(1*u.AA)):
+                raise ValueError(f"scale units not dimensionless or in surface brightness: {output_units}")
+
+            kwargs['scale'] = scale.value
+            self._output_units = output_units
+        else:
+            self._output_units = self._native_units
+
+        return super().__init__(*args, **kwargs)
+
+    @inspect_code
     def evaluate(self, x, temperature, scale):
         """Evaluate the model.
 
@@ -83,7 +310,8 @@ class BlackBody(Fittable1DModel):
         ----------
         x : float, `~numpy.ndarray`, or `~astropy.units.Quantity` ['frequency']
             Frequency at which to compute the blackbody. If no units are given,
-            this defaults to Hz.
+            this defaults to Hz (or AA if `scale` was initialized with units
+            equivalent to erg / (cm ** 2 * s * AA * sr)).
 
         temperature : float, `~numpy.ndarray`, or `~astropy.units.Quantity`
             Temperature of the blackbody. If no units are given, this defaults
@@ -119,30 +347,18 @@ class BlackBody(Fittable1DModel):
         else:
             in_temp = temperature
 
+        if not isinstance(x, u.Quantity):
+            # then we assume it has input_units which depends on the
+            # requested output units (either Hz or AA)
+            in_x = u.Quantity(x, self.input_units['x'])
+        else:
+            in_x = x
+
         # Convert to units for calculations, also force double precision
         with u.add_enabled_equivalencies(u.spectral() + u.temperature()):
-            freq = u.Quantity(x, u.Hz, dtype=np.float64)
+            freq = u.Quantity(in_x, u.Hz, dtype=np.float64)
             temp = u.Quantity(in_temp, u.K)
 
-        # check the units of scale and setup the output units
-        bb_unit = u.erg / (u.cm ** 2 * u.s * u.Hz * u.sr)  # default unit
-        # use the scale that was used at initialization for determining the units to return
-        # to support returning the right units when fitting where units are stripped
-        if hasattr(self.scale, "unit") and self.scale.unit is not None:
-            # check that the units on scale are covertable to surface brightness units
-            if not self.scale.unit.is_equivalent(bb_unit, u.spectral_density(x)):
-                raise ValueError(
-                    f"scale units not surface brightness: {self.scale.unit}"
-                )
-            # use the scale passed to get the value for scaling
-            if hasattr(scale, "unit"):
-                mult_scale = scale.value
-            else:
-                mult_scale = scale
-            bb_unit = self.scale.unit
-        else:
-            mult_scale = scale
-
         # Check if input values are physically possible
         if np.any(temp < 0):
             raise ValueError(f"Temperature should be positive: {temp}")
@@ -158,7 +374,17 @@ class BlackBody(Fittable1DModel):
         # Calculate blackbody flux
         bb_nu = 2.0 * const.h * freq ** 3 / (const.c ** 2 * boltzm1) / u.sr
 
-        y = mult_scale * bb_nu.to(bb_unit, u.spectral_density(freq))
+        if self.scale.unit is not None:
+            # Will be dimensionless at this point, but may not be dimensionless_unscaled
+            if not hasattr(scale, 'unit'):
+                # during fitting, scale will be passed without units
+                # but we still need to convert from the input dimensionless
+                # to dimensionless unscaled
+                scale = scale * self.scale.unit
+            scale = scale.to(u.dimensionless_unscaled).value
+
+        # NOTE: scale is already stripped of any input units
+        y = scale * bb_nu.to(self._output_units, u.spectral_density(freq))
 
         # If the temperature parameter has no unit, we should return a unitless
         # value. This occurs for instance during fitting, since we drop the
@@ -168,11 +394,15 @@ class BlackBody(Fittable1DModel):
         return y.value
 
     @property
+    @inspect_code
     def input_units(self):
-        # The input units are those of the 'x' value, which should always be
-        # Hz. Because we do this, and because input_units_allow_dimensionless
-        # is set to True, dimensionless values are assumed to be in Hz.
-        return {self.inputs[0]: u.Hz}
+        # The input units are those of the 'x' value, which will depend on the
+        # units compatible with the expected output units.
+        if self._output_units.is_equivalent(self._native_output_units['SNU']):
+            return {self.inputs[0]: u.Hz}
+        else:
+            # only other option is equivalent with SLAM
+            return {self.inputs[0]: u.AA}
 
     def _parameter_units_for_data_units(self, inputs_unit, outputs_unit):
         return {"temperature": u.K}
@@ -180,9 +410,15 @@ class BlackBody(Fittable1DModel):
     @property
     def bolometric_flux(self):
         """Bolometric flux."""
+        if self.scale.unit is not None:
+            # Will be dimensionless at this point, but may not be dimensionless_unscaled
+            scale = self.scale.quantity.to(u.dimensionless_unscaled)
+        else:
+            scale = self.scale.value
+
         # bolometric flux in the native units of the planck function
         native_bolflux = (
-            self.scale.value * const.sigma_sb * self.temperature ** 4 / np.pi
+            scale * const.sigma_sb * self.temperature ** 4 / np.pi
         )
         # return in more "astro" units
         return native_bolflux.to(u.erg / (u.cm ** 2 * u.s))
diff --git a/astropy/modeling/tests/test_physical_models.py b/astropy/modeling/tests/test_physical_models.py
index 0324c8e..6ccaac7 100644
--- a/astropy/modeling/tests/test_physical_models.py
+++ b/astropy/modeling/tests/test_physical_models.py
@@ -40,6 +40,17 @@ def test_blackbody_sefanboltzman_law():
     assert_quantity_allclose(b.bolometric_flux, 133.02471751812573 * u.W / (u.m * u.m))
 
 
+def test_blackbody_input_units():
+    SLAM = u.erg / (u.cm ** 2 * u.s * u.AA * u.sr)
+    SNU = u.erg / (u.cm ** 2 * u.s * u.Hz * u.sr)
+
+    b_lam = BlackBody(3000*u.K, scale=1*SLAM)
+    assert(b_lam.input_units['x'] == u.AA)
+
+    b_nu = BlackBody(3000*u.K, scale=1*SNU)
+    assert(b_nu.input_units['x'] == u.Hz)
+
+
 def test_blackbody_return_units():
     # return of evaluate has no units when temperature has no units
     b = BlackBody(1000.0 * u.K, scale=1.0)
@@ -72,7 +83,7 @@ def test_blackbody_fit():
     b_fit = fitter(b, wav, fnu, maxiter=1000)
 
     assert_quantity_allclose(b_fit.temperature, 2840.7438355865065 * u.K)
-    assert_quantity_allclose(b_fit.scale, 5.803783292762381e-17 * u.Jy / u.sr)
+    assert_quantity_allclose(b_fit.scale, 5.803783292762381e-17)
 
 
 def test_blackbody_overflow():
@@ -104,10 +115,11 @@ def test_blackbody_exceptions_and_warnings():
     """Test exceptions."""
 
     # Negative temperature
-    with pytest.raises(ValueError) as exc:
+    with pytest.raises(
+            ValueError,
+            match="Temperature should be positive: \\[-100.\\] K"):
         bb = BlackBody(-100 * u.K)
         bb(1.0 * u.micron)
-    assert exc.value.args[0] == "Temperature should be positive: [-100.] K"
 
     bb = BlackBody(5000 * u.K)
 
@@ -121,11 +133,11 @@ def test_blackbody_exceptions_and_warnings():
         bb(-1.0 * u.AA)
     assert len(w) == 1
 
-    # Test that a non surface brightness converatable scale unit
-    with pytest.raises(ValueError) as exc:
+    # Test that a non surface brightness convertible scale unit raises an error
+    with pytest.raises(
+            ValueError,
+            match="scale units not dimensionless or in surface brightness: Jy"):
         bb = BlackBody(5000 * u.K, scale=1.0 * u.Jy)
-        bb(1.0 * u.micron)
-    assert exc.value.args[0] == "scale units not surface brightness: Jy"
 
 
 def test_blackbody_array_temperature():
@@ -146,6 +158,45 @@ def test_blackbody_array_temperature():
     assert flux.shape == (3, 4)
 
 
+def test_blackbody_dimensionless():
+    """Test support for dimensionless (but not unscaled) units for scale"""
+    T = 3000 * u.K
+    r = 1e14 * u.cm
+    DL = 100 * u.Mpc
+    scale = np.pi * (r / DL)**2
+
+    bb1 = BlackBody(temperature=T, scale=scale)
+    # even though we passed scale with units, we should be able to evaluate with unitless
+    bb1.evaluate(0.5, T.value, scale.to_value(u.dimensionless_unscaled))
+
+    bb2 = BlackBody(temperature=T, scale=scale.to_value(u.dimensionless_unscaled))
+    bb2.evaluate(0.5, T.value, scale.to_value(u.dimensionless_unscaled))
+
+    # bolometric flux for both cases should be equivalent
+    assert(bb1.bolometric_flux == bb2.bolometric_flux)
+
+
+@pytest.mark.skipif("not HAS_SCIPY")
+def test_blackbody_dimensionless_fit():
+    T = 3000 * u.K
+    r = 1e14 * u.cm
+    DL = 100 * u.Mpc
+    scale = np.pi * (r / DL)**2
+
+    bb1 = BlackBody(temperature=T, scale=scale)
+    bb2 = BlackBody(temperature=T, scale=scale.to_value(u.dimensionless_unscaled))
+
+    fitter = LevMarLSQFitter()
+
+    wav = np.array([0.5, 5, 10]) * u.micron
+    fnu = np.array([1, 10, 5]) * u.Jy / u.sr
+
+    bb1_fit = fitter(bb1, wav, fnu, maxiter=1000)
+    bb2_fit = fitter(bb2, wav, fnu, maxiter=1000)
+
+    assert(bb1_fit.temperature == bb2_fit.temperature)
+
+
 @pytest.mark.parametrize("mass", (2.0000000000000E15 * u.M_sun, 3.976819741e+45 * u.kg))
 def test_NFW_evaluate(mass):
     """Evaluation, density, and radii validation of NFW model."""
