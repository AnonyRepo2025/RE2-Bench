diff --git a/django/contrib/auth/migrations/0011_update_proxy_permissions.py b/django/contrib/auth/migrations/0011_update_proxy_permissions.py
index c3f617f..8729151 100644
--- a/django/contrib/auth/migrations/0011_update_proxy_permissions.py
+++ b/django/contrib/auth/migrations/0011_update_proxy_permissions.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/django__django-12153/django/contrib/auth/migrations/0011_update_proxy_permissions.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 import sys
 
 from django.core.management.color import color_style
@@ -15,6 +208,7 @@ WARNING = """
 """
 
 
+@inspect_code
 def update_proxy_model_permissions(apps, schema_editor, reverse=False):
     """
     Update the content_type of proxy model permissions to use the ContentType
@@ -23,6 +217,7 @@ def update_proxy_model_permissions(apps, schema_editor, reverse=False):
     style = color_style()
     Permission = apps.get_model('auth', 'Permission')
     ContentType = apps.get_model('contenttypes', 'ContentType')
+    alias = schema_editor.connection.alias
     for Model in apps.get_models():
         opts = Model._meta
         if not opts.proxy:
@@ -34,13 +229,14 @@ def update_proxy_model_permissions(apps, schema_editor, reverse=False):
         permissions_query = Q(codename__in=proxy_default_permissions_codenames)
         for codename, name in opts.permissions:
             permissions_query = permissions_query | Q(codename=codename, name=name)
-        concrete_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=True)
-        proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)
+        content_type_manager = ContentType.objects.db_manager(alias)
+        concrete_content_type = content_type_manager.get_for_model(Model, for_concrete_model=True)
+        proxy_content_type = content_type_manager.get_for_model(Model, for_concrete_model=False)
         old_content_type = proxy_content_type if reverse else concrete_content_type
         new_content_type = concrete_content_type if reverse else proxy_content_type
         try:
-            with transaction.atomic():
-                Permission.objects.filter(
+            with transaction.atomic(using=alias):
+                Permission.objects.using(alias).filter(
                     permissions_query,
                     content_type=old_content_type,
                 ).update(content_type=new_content_type)
diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py
index 98c5b59..a91b9a9 100644
--- a/tests/auth_tests/test_migrations.py
+++ b/tests/auth_tests/test_migrations.py
@@ -3,7 +3,8 @@ from importlib import import_module
 from django.apps import apps
 from django.contrib.auth.models import Permission, User
 from django.contrib.contenttypes.models import ContentType
-from django.test import TestCase
+from django.db import connection, connections
+from django.test import TransactionTestCase
 from django.test.utils import captured_stdout
 
 from .models import Proxy, UserProxy
@@ -11,7 +12,7 @@ from .models import Proxy, UserProxy
 update_proxy_permissions = import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')
 
 
-class ProxyModelWithDifferentAppLabelTests(TestCase):
+class ProxyModelWithDifferentAppLabelTests(TransactionTestCase):
     available_apps = [
         'auth_tests',
         'django.contrib.auth',
@@ -41,7 +42,8 @@ class ProxyModelWithDifferentAppLabelTests(TestCase):
         proxy_model_content_type = ContentType.objects.get_for_model(UserProxy, for_concrete_model=False)
         self.assertEqual(self.default_permission.content_type, self.concrete_content_type)
         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
         self.default_permission.refresh_from_db()
         self.assertEqual(self.default_permission.content_type, proxy_model_content_type)
         self.custom_permission.refresh_from_db()
@@ -54,7 +56,8 @@ class ProxyModelWithDifferentAppLabelTests(TestCase):
         for permission in [self.default_permission, self.custom_permission]:
             self.assertTrue(user.has_perm('auth.' + permission.codename))
             self.assertFalse(user.has_perm('auth_tests.' + permission.codename))
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
         # Reload user to purge the _perm_cache.
         user = User._default_manager.get(pk=user.pk)
         for permission in [self.default_permission, self.custom_permission]:
@@ -62,8 +65,9 @@ class ProxyModelWithDifferentAppLabelTests(TestCase):
             self.assertTrue(user.has_perm('auth_tests.' + permission.codename))
 
     def test_migrate_backwards(self):
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
-        update_proxy_permissions.revert_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
+            update_proxy_permissions.revert_proxy_model_permissions(apps, editor)
         self.default_permission.refresh_from_db()
         self.assertEqual(self.default_permission.content_type, self.concrete_content_type)
         self.custom_permission.refresh_from_db()
@@ -76,8 +80,9 @@ class ProxyModelWithDifferentAppLabelTests(TestCase):
         for permission in [self.default_permission, self.custom_permission]:
             self.assertTrue(user.has_perm('auth.' + permission.codename))
             self.assertFalse(user.has_perm('auth_tests.' + permission.codename))
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
-        update_proxy_permissions.revert_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
+            update_proxy_permissions.revert_proxy_model_permissions(apps, editor)
         # Reload user to purge the _perm_cache.
         user = User._default_manager.get(pk=user.pk)
         for permission in [self.default_permission, self.custom_permission]:
@@ -85,7 +90,7 @@ class ProxyModelWithDifferentAppLabelTests(TestCase):
             self.assertFalse(user.has_perm('auth_tests.' + permission.codename))
 
 
-class ProxyModelWithSameAppLabelTests(TestCase):
+class ProxyModelWithSameAppLabelTests(TransactionTestCase):
     available_apps = [
         'auth_tests',
         'django.contrib.auth',
@@ -115,7 +120,8 @@ class ProxyModelWithSameAppLabelTests(TestCase):
         proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)
         self.assertEqual(self.default_permission.content_type, self.concrete_content_type)
         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
         self.default_permission.refresh_from_db()
         self.custom_permission.refresh_from_db()
         self.assertEqual(self.default_permission.content_type, proxy_model_content_type)
@@ -127,15 +133,17 @@ class ProxyModelWithSameAppLabelTests(TestCase):
         user.user_permissions.add(self.custom_permission)
         for permission in [self.default_permission, self.custom_permission]:
             self.assertTrue(user.has_perm('auth_tests.' + permission.codename))
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
         # Reload user to purge the _perm_cache.
         user = User._default_manager.get(pk=user.pk)
         for permission in [self.default_permission, self.custom_permission]:
             self.assertTrue(user.has_perm('auth_tests.' + permission.codename))
 
     def test_migrate_backwards(self):
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
-        update_proxy_permissions.revert_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
+            update_proxy_permissions.revert_proxy_model_permissions(apps, editor)
         self.default_permission.refresh_from_db()
         self.assertEqual(self.default_permission.content_type, self.concrete_content_type)
         self.custom_permission.refresh_from_db()
@@ -147,8 +155,9 @@ class ProxyModelWithSameAppLabelTests(TestCase):
         user.user_permissions.add(self.custom_permission)
         for permission in [self.default_permission, self.custom_permission]:
             self.assertTrue(user.has_perm('auth_tests.' + permission.codename))
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
-        update_proxy_permissions.revert_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
+            update_proxy_permissions.revert_proxy_model_permissions(apps, editor)
         # Reload user to purge the _perm_cache.
         user = User._default_manager.get(pk=user.pk)
         for permission in [self.default_permission, self.custom_permission]:
@@ -175,5 +184,36 @@ class ProxyModelWithSameAppLabelTests(TestCase):
             name='May display proxys information',
         )
         with captured_stdout() as stdout:
-            update_proxy_permissions.update_proxy_model_permissions(apps, None)
+            with connection.schema_editor() as editor:
+                update_proxy_permissions.update_proxy_model_permissions(apps, editor)
         self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())
+
+
+class MultiDBProxyModelAppLabelTests(TransactionTestCase):
+    databases = {'default', 'other'}
+    available_apps = [
+        'auth_tests',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ]
+
+    def setUp(self):
+        ContentType.objects.all().delete()
+        Permission.objects.using('other').delete()
+        concrete_content_type = ContentType.objects.db_manager(
+            'other'
+        ).get_for_model(Proxy)
+        self.permission = Permission.objects.using('other').create(
+            content_type=concrete_content_type,
+            codename='add_proxy',
+            name='Can add proxy',
+        )
+
+    def test_migrate_other_database(self):
+        proxy_model_content_type = ContentType.objects.db_manager(
+            'other'
+        ).get_for_model(Proxy, for_concrete_model=False)
+        with connections['other'].schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
+        self.permission.refresh_from_db()
+        self.assertEqual(self.permission.content_type, proxy_model_content_type)
