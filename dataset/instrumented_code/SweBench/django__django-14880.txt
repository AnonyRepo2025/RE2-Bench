diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index 8070457..5d00fca 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/django__django-14880/django/db/models/fields/related.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 import functools
 import inspect
 from functools import partial
@@ -195,6 +388,7 @@ class RelatedField(FieldCacheMixin, Field):
             ]
         return []
 
+    @inspect_code
     def _check_clashes(self):
         """Check accessor and reverse query name clashes."""
         from django.db.models.base import ModelBase
@@ -239,7 +433,9 @@ class RelatedField(FieldCacheMixin, Field):
             if not rel_is_hidden and clash_field.name == rel_name:
                 errors.append(
                     checks.Error(
-                        "Reverse accessor for '%s' clashes with field name '%s'." % (field_name, clash_name),
+                        f"Reverse accessor '{rel_opts.object_name}.{rel_name}' "
+                        f"for '{field_name}' clashes with field name "
+                        f"'{clash_name}'.",
                         hint=("Rename field '%s', or add/change a related_name "
                               "argument to the definition for field '%s'.") % (clash_name, field_name),
                         obj=self,
@@ -271,7 +467,9 @@ class RelatedField(FieldCacheMixin, Field):
             if not rel_is_hidden and clash_field.get_accessor_name() == rel_name:
                 errors.append(
                     checks.Error(
-                        "Reverse accessor for '%s' clashes with reverse accessor for '%s'." % (field_name, clash_name),
+                        f"Reverse accessor '{rel_opts.object_name}.{rel_name}' "
+                        f"for '{field_name}' clashes with reverse accessor for "
+                        f"'{clash_name}'.",
                         hint=("Add or change a related_name argument "
                               "to the definition for '%s' or '%s'.") % (field_name, clash_name),
                         obj=self,
diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py
index 6e885f1..438d1b2 100644
--- a/tests/invalid_models_tests/test_relative_fields.py
+++ b/tests/invalid_models_tests/test_relative_fields.py
@@ -862,8 +862,8 @@ class AccessorClashTests(SimpleTestCase):
 
         self.assertEqual(Model.check(), [
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.rel' "
-                "clashes with field name "
+                "Reverse accessor 'Target.model_set' for "
+                "'invalid_models_tests.Model.rel' clashes with field name "
                 "'invalid_models_tests.Target.model_set'.",
                 hint=(
                     "Rename field 'invalid_models_tests.Target.model_set', or "
@@ -885,9 +885,9 @@ class AccessorClashTests(SimpleTestCase):
 
         self.assertEqual(Model.check(), [
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.foreign' "
-                "clashes with reverse accessor for "
-                "'invalid_models_tests.Model.m2m'.",
+                "Reverse accessor 'Target.model_set' for "
+                "'invalid_models_tests.Model.foreign' clashes with reverse "
+                "accessor for 'invalid_models_tests.Model.m2m'.",
                 hint=(
                     "Add or change a related_name argument to the definition "
                     "for 'invalid_models_tests.Model.foreign' or "
@@ -897,9 +897,9 @@ class AccessorClashTests(SimpleTestCase):
                 id='fields.E304',
             ),
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.m2m' "
-                "clashes with reverse accessor for "
-                "'invalid_models_tests.Model.foreign'.",
+                "Reverse accessor 'Target.model_set' for "
+                "'invalid_models_tests.Model.m2m' clashes with reverse "
+                "accessor for 'invalid_models_tests.Model.foreign'.",
                 hint=(
                     "Add or change a related_name argument to the definition "
                     "for 'invalid_models_tests.Model.m2m' or "
@@ -927,9 +927,9 @@ class AccessorClashTests(SimpleTestCase):
 
         self.assertEqual(Model.check(), [
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.children' "
-                "clashes with field name "
-                "'invalid_models_tests.Child.m2m_clash'.",
+                "Reverse accessor 'Child.m2m_clash' for "
+                "'invalid_models_tests.Model.children' clashes with field "
+                "name 'invalid_models_tests.Child.m2m_clash'.",
                 hint=(
                     "Rename field 'invalid_models_tests.Child.m2m_clash', or "
                     "add/change a related_name argument to the definition for "
@@ -1085,8 +1085,9 @@ class ExplicitRelatedNameClashTests(SimpleTestCase):
 
         self.assertEqual(Model.check(), [
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.rel' "
-                "clashes with field name 'invalid_models_tests.Target.clash'.",
+                "Reverse accessor 'Target.clash' for "
+                "'invalid_models_tests.Model.rel' clashes with field name "
+                "'invalid_models_tests.Target.clash'.",
                 hint=(
                     "Rename field 'invalid_models_tests.Target.clash', or "
                     "add/change a related_name argument to the definition for "
@@ -1218,9 +1219,9 @@ class SelfReferentialM2MClashTests(SimpleTestCase):
 
         self.assertEqual(Model.check(), [
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.first_m2m' "
-                "clashes with reverse accessor for "
-                "'invalid_models_tests.Model.second_m2m'.",
+                "Reverse accessor 'Model.model_set' for "
+                "'invalid_models_tests.Model.first_m2m' clashes with reverse "
+                "accessor for 'invalid_models_tests.Model.second_m2m'.",
                 hint=(
                     "Add or change a related_name argument to the definition "
                     "for 'invalid_models_tests.Model.first_m2m' or "
@@ -1230,9 +1231,9 @@ class SelfReferentialM2MClashTests(SimpleTestCase):
                 id='fields.E304',
             ),
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.second_m2m' "
-                "clashes with reverse accessor for "
-                "'invalid_models_tests.Model.first_m2m'.",
+                "Reverse accessor 'Model.model_set' for "
+                "'invalid_models_tests.Model.second_m2m' clashes with reverse "
+                "accessor for 'invalid_models_tests.Model.first_m2m'.",
                 hint=(
                     "Add or change a related_name argument to the definition "
                     "for 'invalid_models_tests.Model.second_m2m' or "
@@ -1249,9 +1250,9 @@ class SelfReferentialM2MClashTests(SimpleTestCase):
 
         self.assertEqual(Model.check(), [
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.model_set' "
-                "clashes with field name "
-                "'invalid_models_tests.Model.model_set'.",
+                "Reverse accessor 'Model.model_set' for "
+                "'invalid_models_tests.Model.model_set' clashes with field "
+                "name 'invalid_models_tests.Model.model_set'.",
                 hint=(
                     "Rename field 'invalid_models_tests.Model.model_set', or "
                     "add/change a related_name argument to the definition for "
@@ -1287,8 +1288,9 @@ class SelfReferentialM2MClashTests(SimpleTestCase):
 
         self.assertEqual(Model.check(), [
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.m2m' "
-                "clashes with field name 'invalid_models_tests.Model.clash'.",
+                "Reverse accessor 'Model.clash' for "
+                "'invalid_models_tests.Model.m2m' clashes with field name "
+                "'invalid_models_tests.Model.clash'.",
                 hint=(
                     "Rename field 'invalid_models_tests.Model.clash', or "
                     "add/change a related_name argument to the definition for "
@@ -1327,9 +1329,9 @@ class SelfReferentialFKClashTests(SimpleTestCase):
 
         self.assertEqual(Model.check(), [
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.model_set' "
-                "clashes with field name "
-                "'invalid_models_tests.Model.model_set'.",
+                "Reverse accessor 'Model.model_set' for "
+                "'invalid_models_tests.Model.model_set' clashes with field "
+                "name 'invalid_models_tests.Model.model_set'.",
                 hint=(
                     "Rename field 'invalid_models_tests.Model.model_set', or "
                     "add/change a related_name argument to the definition for "
@@ -1365,8 +1367,9 @@ class SelfReferentialFKClashTests(SimpleTestCase):
 
         self.assertEqual(Model.check(), [
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.foreign' "
-                "clashes with field name 'invalid_models_tests.Model.clash'.",
+                "Reverse accessor 'Model.clash' for "
+                "'invalid_models_tests.Model.foreign' clashes with field name "
+                "'invalid_models_tests.Model.clash'.",
                 hint=(
                     "Rename field 'invalid_models_tests.Model.clash', or "
                     "add/change a related_name argument to the definition for "
@@ -1413,8 +1416,9 @@ class ComplexClashTests(SimpleTestCase):
 
         self.assertEqual(Model.check(), [
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.foreign_1' "
-                "clashes with field name 'invalid_models_tests.Target.id'.",
+                "Reverse accessor 'Target.id' for "
+                "'invalid_models_tests.Model.foreign_1' clashes with field "
+                "name 'invalid_models_tests.Target.id'.",
                 hint=(
                     "Rename field 'invalid_models_tests.Target.id', or "
                     "add/change a related_name argument to the definition for "
@@ -1435,9 +1439,9 @@ class ComplexClashTests(SimpleTestCase):
                 id='fields.E303',
             ),
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.foreign_1' "
-                "clashes with reverse accessor for "
-                "'invalid_models_tests.Model.m2m_1'.",
+                "Reverse accessor 'Target.id' for "
+                "'invalid_models_tests.Model.foreign_1' clashes with reverse "
+                "accessor for 'invalid_models_tests.Model.m2m_1'.",
                 hint=(
                     "Add or change a related_name argument to the definition "
                     "for 'invalid_models_tests.Model.foreign_1' or "
@@ -1460,9 +1464,9 @@ class ComplexClashTests(SimpleTestCase):
             ),
 
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.foreign_2' "
-                "clashes with reverse accessor for "
-                "'invalid_models_tests.Model.m2m_2'.",
+                "Reverse accessor 'Target.src_safe' for "
+                "'invalid_models_tests.Model.foreign_2' clashes with reverse "
+                "accessor for 'invalid_models_tests.Model.m2m_2'.",
                 hint=(
                     "Add or change a related_name argument to the definition "
                     "for 'invalid_models_tests.Model.foreign_2' or "
@@ -1485,8 +1489,9 @@ class ComplexClashTests(SimpleTestCase):
             ),
 
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.m2m_1' "
-                "clashes with field name 'invalid_models_tests.Target.id'.",
+                "Reverse accessor 'Target.id' for "
+                "'invalid_models_tests.Model.m2m_1' clashes with field name "
+                "'invalid_models_tests.Target.id'.",
                 hint=(
                     "Rename field 'invalid_models_tests.Target.id', or "
                     "add/change a related_name argument to the definition for "
@@ -1507,9 +1512,9 @@ class ComplexClashTests(SimpleTestCase):
                 id='fields.E303',
             ),
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.m2m_1' "
-                "clashes with reverse accessor for "
-                "'invalid_models_tests.Model.foreign_1'.",
+                "Reverse accessor 'Target.id' for "
+                "'invalid_models_tests.Model.m2m_1' clashes with reverse "
+                "accessor for 'invalid_models_tests.Model.foreign_1'.",
                 hint=(
                     "Add or change a related_name argument to the definition "
                     "for 'invalid_models_tests.Model.m2m_1' or "
@@ -1531,9 +1536,9 @@ class ComplexClashTests(SimpleTestCase):
                 id='fields.E305',
             ),
             Error(
-                "Reverse accessor for 'invalid_models_tests.Model.m2m_2' "
-                "clashes with reverse accessor for "
-                "'invalid_models_tests.Model.foreign_2'.",
+                "Reverse accessor 'Target.src_safe' for "
+                "'invalid_models_tests.Model.m2m_2' clashes with reverse "
+                "accessor for 'invalid_models_tests.Model.foreign_2'.",
                 hint=(
                     "Add or change a related_name argument to the definition "
                     "for 'invalid_models_tests.Model.m2m_2' or "
@@ -1564,16 +1569,16 @@ class ComplexClashTests(SimpleTestCase):
             other_parent = models.OneToOneField(Parent, models.CASCADE)
 
         errors = [
-            ('fields.E304', 'accessor', 'parent_ptr', 'other_parent'),
-            ('fields.E305', 'query name', 'parent_ptr', 'other_parent'),
-            ('fields.E304', 'accessor', 'other_parent', 'parent_ptr'),
-            ('fields.E305', 'query name', 'other_parent', 'parent_ptr'),
+            ('fields.E304', 'accessor', " 'Parent.child'", 'parent_ptr', 'other_parent'),
+            ('fields.E305', 'query name', '', 'parent_ptr', 'other_parent'),
+            ('fields.E304', 'accessor', " 'Parent.child'", 'other_parent', 'parent_ptr'),
+            ('fields.E305', 'query name', '', 'other_parent', 'parent_ptr'),
         ]
         self.assertEqual(Child.check(), [
             Error(
-                "Reverse %s for 'invalid_models_tests.Child.%s' clashes with "
+                "Reverse %s%s for 'invalid_models_tests.Child.%s' clashes with "
                 "reverse %s for 'invalid_models_tests.Child.%s'."
-                % (attr, field_name, attr, clash_name),
+                % (attr, rel_name, field_name, attr, clash_name),
                 hint=(
                     "Add or change a related_name argument to the definition "
                     "for 'invalid_models_tests.Child.%s' or "
@@ -1582,7 +1587,7 @@ class ComplexClashTests(SimpleTestCase):
                 obj=Child._meta.get_field(field_name),
                 id=error_id,
             )
-            for error_id, attr, field_name, clash_name in errors
+            for error_id, attr, rel_name, field_name, clash_name in errors
         ])
 
 
diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py
index a78111b..80da06a 100644
--- a/tests/model_inheritance/test_abstract_inheritance.py
+++ b/tests/model_inheritance/test_abstract_inheritance.py
@@ -292,8 +292,9 @@ class AbstractInheritanceTests(SimpleTestCase):
             Foo._meta.get_field('foo').check(),
             [
                 Error(
-                    "Reverse accessor for 'model_inheritance.Foo.foo' clashes "
-                    "with field name 'model_inheritance.Descendant.foo'.",
+                    "Reverse accessor 'Descendant.foo' for "
+                    "'model_inheritance.Foo.foo' clashes with field name "
+                    "'model_inheritance.Descendant.foo'.",
                     hint=(
                         "Rename field 'model_inheritance.Descendant.foo', or "
                         "add/change a related_name argument to the definition "
