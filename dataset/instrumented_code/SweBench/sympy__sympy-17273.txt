diff --git a/sympy/physics/units/__init__.py b/sympy/physics/units/__init__.py
index 974fb33..4f672b2 100644
--- a/sympy/physics/units/__init__.py
+++ b/sympy/physics/units/__init__.py
@@ -150,6 +150,7 @@
     year, years, tropical_year,
     G, gravitational_constant,
     c, speed_of_light,
+    elementary_charge,
     Z0,
     hbar,
     planck,
@@ -224,9 +225,9 @@ def find_unit(quantity):
 
     >>> from sympy.physics import units as u
     >>> u.find_unit('charge')
-    ['C', 'coulomb', 'coulombs', 'planck_charge']
+    ['C', 'coulomb', 'coulombs', 'planck_charge', 'elementary_charge']
     >>> u.find_unit(u.charge)
-    ['C', 'coulomb', 'coulombs', 'planck_charge']
+    ['C', 'coulomb', 'coulombs', 'planck_charge', 'elementary_charge']
     >>> u.find_unit("ampere")
     ['ampere', 'amperes']
     >>> u.find_unit('volt')
diff --git a/sympy/physics/units/definitions.py b/sympy/physics/units/definitions.py
index a118ded..4c76afc 100644
--- a/sympy/physics/units/definitions.py
+++ b/sympy/physics/units/definitions.py
@@ -321,34 +321,45 @@
 #### CONSTANTS ####
 
 # Newton constant
+# REF: NIST SP 959 (June 2019)
 G = gravitational_constant = Quantity("gravitational_constant", abbrev="G")
 gravitational_constant.set_dimension(length**3*mass**-1*time**-2)
-gravitational_constant.set_scale_factor(6.67408e-11*m**3/(kg*s**2))
+gravitational_constant.set_scale_factor(6.67430e-11*m**3/(kg*s**2))
 
 # speed of light
 c = speed_of_light = Quantity("speed_of_light", abbrev="c")
 speed_of_light.set_dimension(velocity)
 speed_of_light.set_scale_factor(299792458*meter/second)
 
-# Reduced Planck constant
-hbar = Quantity("hbar", abbrev="hbar")
-hbar.set_dimension(action)
-hbar.set_scale_factor(1.05457266e-34*joule*second)
+# elementary charge
+# REF: NIST SP 959 (June 2019)
+elementary_charge = Quantity("elementary_charge", abbrev="e")
+elementary_charge.set_dimension(charge)
+elementary_charge.set_scale_factor(1.602176634e-19*coulomb)
 
 # Planck constant
+# REF: NIST SP 959 (June 2019)
 planck = Quantity("planck", abbrev="h")
 planck.set_dimension(action)
-planck.set_scale_factor(2*pi*hbar)
+planck.set_scale_factor(6.62607015e-34*joule*second)
+
+# Reduced Planck constant
+# REF: NIST SP 959 (June 2019)
+hbar = Quantity("hbar", abbrev="hbar")
+hbar.set_dimension(action)
+hbar.set_scale_factor(planck / (2 * pi))
 
 # Electronvolt
+# REF: NIST SP 959 (June 2019)
 eV = electronvolt = electronvolts = Quantity("electronvolt", abbrev="eV")
 electronvolt.set_dimension(energy)
-electronvolt.set_scale_factor(1.60219e-19*joule)
+electronvolt.set_scale_factor(1.602176634e-19*joule)
 
 # Avogadro number
+# REF: NIST SP 959 (June 2019)
 avogadro_number = Quantity("avogadro_number")
 avogadro_number.set_dimension(One)
-avogadro_number.set_scale_factor(6.022140857e23)
+avogadro_number.set_scale_factor(6.02214076e23)
 
 # Avogadro constant
 avogadro = avogadro_constant = Quantity("avogadro_constant")
@@ -356,39 +367,43 @@
 avogadro_constant.set_scale_factor(avogadro_number / mol)
 
 # Boltzmann constant
+# REF: NIST SP 959 (June 2019)
 boltzmann = boltzmann_constant = Quantity("boltzmann_constant")
 boltzmann_constant.set_dimension(energy/temperature)
-boltzmann_constant.set_scale_factor(1.38064852e-23*joule/kelvin)
+boltzmann_constant.set_scale_factor(1.380649e-23*joule/kelvin)
 
 # Stefan-Boltzmann constant
+# REF: NIST SP 959 (June 2019)
 stefan = stefan_boltzmann_constant = Quantity("stefan_boltzmann_constant")
 stefan_boltzmann_constant.set_dimension(energy*time**-1*length**-2*temperature**-4)
-stefan_boltzmann_constant.set_scale_factor(5.670367e-8*joule/(s*m**2*kelvin**4))
+stefan_boltzmann_constant.set_scale_factor(pi**2 * boltzmann_constant**4 / (60 * hbar**3 * speed_of_light ** 2))
 
 # Atomic mass
+# REF: NIST SP 959 (June 2019)
 amu = amus = atomic_mass_unit = atomic_mass_constant = Quantity("atomic_mass_constant")
 atomic_mass_constant.set_dimension(mass)
-atomic_mass_constant.set_scale_factor(1.660539040e-24*gram)
+atomic_mass_constant.set_scale_factor(1.66053906660e-24*gram)
 
 # Molar gas constant
+# REF: NIST SP 959 (June 2019)
 R = molar_gas_constant = Quantity("molar_gas_constant", abbrev="R")
 molar_gas_constant.set_dimension(energy/(temperature * amount_of_substance))
-molar_gas_constant.set_scale_factor(8.3144598*joule/kelvin/mol)
+molar_gas_constant.set_scale_factor(boltzmann_constant * avogadro_constant)
 
 # Faraday constant
 faraday_constant = Quantity("faraday_constant")
 faraday_constant.set_dimension(charge/amount_of_substance)
-faraday_constant.set_scale_factor(96485.33289*C/mol)
+faraday_constant.set_scale_factor(elementary_charge * avogadro_constant)
 
 # Josephson constant
 josephson_constant = Quantity("josephson_constant", abbrev="K_j")
 josephson_constant.set_dimension(frequency/voltage)
-josephson_constant.set_scale_factor(483597.8525e9*hertz/V)
+josephson_constant.set_scale_factor(0.5 * planck / elementary_charge)
 
 # Von Klitzing constant
 von_klitzing_constant = Quantity("von_klitzing_constant", abbrev="R_k")
 von_klitzing_constant.set_dimension(voltage/current)
-von_klitzing_constant.set_scale_factor(25812.8074555*ohm)
+von_klitzing_constant.set_scale_factor(hbar / elementary_charge ** 2)
 
 # Acceleration due to gravity (on the Earth surface)
 gee = gees = acceleration_due_to_gravity = Quantity("acceleration_due_to_gravity", abbrev="g")
diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py
index cf728d5..129171d 100644
--- a/sympy/physics/units/tests/test_quantities.py
+++ b/sympy/physics/units/tests/test_quantities.py
@@ -286,8 +286,8 @@ def test_issue_5565():
 
 def test_find_unit():
     assert find_unit('coulomb') == ['coulomb', 'coulombs', 'coulomb_constant']
-    assert find_unit(coulomb) == ['C', 'coulomb', 'coulombs', 'planck_charge']
-    assert find_unit(charge) == ['C', 'coulomb', 'coulombs', 'planck_charge']
+    assert find_unit(coulomb) == ['C', 'coulomb', 'coulombs', 'planck_charge', 'elementary_charge']
+    assert find_unit(charge) == ['C', 'coulomb', 'coulombs', 'planck_charge', 'elementary_charge']
     assert find_unit(inch) == [
         'm', 'au', 'cm', 'dm', 'ft', 'km', 'ly', 'mi', 'mm', 'nm', 'pm', 'um',
         'yd', 'nmi', 'feet', 'foot', 'inch', 'mile', 'yard', 'meter', 'miles',
diff --git a/sympy/physics/units/tests/test_util.py b/sympy/physics/units/tests/test_util.py
index d2de05e..e7c27ee 100644
--- a/sympy/physics/units/tests/test_util.py
+++ b/sympy/physics/units/tests/test_util.py
@@ -102,11 +102,11 @@ def test_convert_to_tuples_of_quantities():
     assert convert_to(2 * speed_of_light, [meter, second, kilogram]) == 2 * 299792458 * meter / second
     assert convert_to(G, [G, speed_of_light, planck]) == 1.0*G
 
-    assert NS(convert_to(meter, [G, speed_of_light, hbar]), n=7) == '6.187242e+34*gravitational_constant**0.5000000*hbar**0.5000000*speed_of_light**(-1.500000)'
-    assert NS(convert_to(planck_mass, kilogram), n=7) == '2.176471e-8*kilogram'
-    assert NS(convert_to(planck_length, meter), n=7) == '1.616229e-35*meter'
-    assert NS(convert_to(planck_time, second), n=6) == '5.39116e-44*second'
-    assert NS(convert_to(planck_temperature, kelvin), n=7) == '1.416809e+32*kelvin'
+    assert NS(convert_to(meter, [G, speed_of_light, hbar]), n=7) == '6.187142e+34*gravitational_constant**0.5000000*hbar**0.5000000*speed_of_light**(-1.500000)'
+    assert NS(convert_to(planck_mass, kilogram), n=7) == '2.176434e-8*kilogram'
+    assert NS(convert_to(planck_length, meter), n=7) == '1.616255e-35*meter'
+    assert NS(convert_to(planck_time, second), n=6) == '5.39125e-44*second'
+    assert NS(convert_to(planck_temperature, kelvin), n=7) == '1.416784e+32*kelvin'
     assert NS(convert_to(convert_to(meter, [G, speed_of_light, planck]), meter), n=10) == '1.000000000*meter'
 
 
diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py
index a4536c7..cedd240 100644
--- a/sympy/physics/units/util.py
+++ b/sympy/physics/units/util.py
@@ -3,6 +3,199 @@
 """
 
 from __future__ import division
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/sympy__sympy-17273/sympy/physics/units/util.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 
 from sympy.utilities.exceptions import SymPyDeprecationWarning
 
@@ -56,6 +249,7 @@ def _get_conversion_matrix_for_expr(expr, target_units):
     return res_exponents
 
 
+@inspect_code
 def convert_to(expr, target_units):
     """
     Convert ``expr`` to the same expression with all of its units and quantities
@@ -70,6 +264,7 @@ def convert_to(expr, target_units):
     >>> from sympy.physics.units import speed_of_light, meter, gram, second, day
     >>> from sympy.physics.units import mile, newton, kilogram, atomic_mass_constant
     >>> from sympy.physics.units import kilometer, centimeter
+    >>> from sympy.physics.units import gravitational_constant, hbar
     >>> from sympy.physics.units import convert_to
     >>> convert_to(mile, kilometer)
     25146*kilometer/15625
@@ -84,7 +279,7 @@ def convert_to(expr, target_units):
     >>> convert_to(3*newton, kilogram*meter/second**2)
     3*kilogram*meter/second**2
     >>> convert_to(atomic_mass_constant, gram)
-    1.66053904e-24*gram
+    1.660539060e-24*gram
 
     Conversion to multiple units:
 
@@ -97,7 +292,7 @@ def convert_to(expr, target_units):
 
     >>> from sympy.physics.units import gravitational_constant, hbar
     >>> convert_to(atomic_mass_constant, [gravitational_constant, speed_of_light, hbar]).n()
-    7.62950196312651e-20*gravitational_constant**(-0.5)*hbar**0.5*speed_of_light**0.5
+    7.62963085040767e-20*gravitational_constant**(-0.5)*hbar**0.5*speed_of_light**0.5
 
     """
     if not isinstance(target_units, (Iterable, Tuple)):
