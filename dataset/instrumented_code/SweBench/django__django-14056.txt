diff --git a/django/contrib/staticfiles/finders.py b/django/contrib/staticfiles/finders.py
index 7f75af3..827c18c 100644
--- a/django/contrib/staticfiles/finders.py
+++ b/django/contrib/staticfiles/finders.py
@@ -1,10 +1,203 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/django__django-14056/django/contrib/staticfiles/finders.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 import functools
 import os
 
 from django.apps import apps
 from django.conf import settings
 from django.contrib.staticfiles import utils
-from django.core.checks import Error
+from django.core.checks import Error, Warning
 from django.core.exceptions import ImproperlyConfigured
 from django.core.files.storage import (
     FileSystemStorage, Storage, default_storage,
@@ -67,6 +260,7 @@ class FileSystemFinder(BaseFinder):
             self.storages[root] = filesystem_storage
         super().__init__(*args, **kwargs)
 
+    @inspect_code
     def check(self, **kwargs):
         errors = []
         if not isinstance(settings.STATICFILES_DIRS, (list, tuple)):
@@ -75,6 +269,7 @@ class FileSystemFinder(BaseFinder):
                 hint='Perhaps you forgot a trailing comma?',
                 id='staticfiles.E001',
             ))
+            return errors
         for root in settings.STATICFILES_DIRS:
             if isinstance(root, (list, tuple)):
                 prefix, root = root
@@ -90,6 +285,12 @@ class FileSystemFinder(BaseFinder):
                     'STATIC_ROOT setting.',
                     id='staticfiles.E002',
                 ))
+            if not os.path.isdir(root):
+                errors.append(Warning(
+                    f"The directory '{root}' in the STATICFILES_DIRS setting "
+                    f"does not exist.",
+                    id='staticfiles.W004',
+                ))
         return errors
 
     def find(self, path, all=False):
@@ -121,14 +322,17 @@ class FileSystemFinder(BaseFinder):
         if os.path.exists(path):
             return path
 
+    @inspect_code
     def list(self, ignore_patterns):
         """
         List all files in all locations.
         """
         for prefix, root in self.locations:
-            storage = self.storages[root]
-            for path in utils.get_files(storage, ignore_patterns):
-                yield path, storage
+            # Skip nonexistent directories.
+            if os.path.isdir(root):
+                storage = self.storages[root]
+                for path in utils.get_files(storage, ignore_patterns):
+                    yield path, storage
 
 
 class AppDirectoriesFinder(BaseFinder):
diff --git a/tests/staticfiles_tests/test_checks.py b/tests/staticfiles_tests/test_checks.py
index d5dc90b..4b2195b 100644
--- a/tests/staticfiles_tests/test_checks.py
+++ b/tests/staticfiles_tests/test_checks.py
@@ -1,13 +1,18 @@
+from pathlib import Path
 from unittest import mock
 
 from django.conf import settings
 from django.contrib.staticfiles.checks import check_finders
-from django.contrib.staticfiles.finders import BaseFinder
-from django.core.checks import Error
-from django.test import SimpleTestCase, override_settings
+from django.contrib.staticfiles.finders import BaseFinder, get_finder
+from django.core.checks import Error, Warning
+from django.test import override_settings
 
+from .cases import CollectionTestCase
+from .settings import TEST_ROOT
 
-class FindersCheckTests(SimpleTestCase):
+
+class FindersCheckTests(CollectionTestCase):
+    run_collectstatic_in_setUp = False
 
     def test_base_finder_check_not_implemented(self):
         finder = BaseFinder()
@@ -56,32 +61,54 @@ class FindersCheckTests(SimpleTestCase):
             )
         ])
 
-    @override_settings(STATICFILES_DIRS=['/fake/path', settings.STATIC_ROOT])
     def test_dirs_contains_static_root(self):
-        self.assertEqual(check_finders(None), [
-            Error(
-                'The STATICFILES_DIRS setting should not contain the '
-                'STATIC_ROOT setting.',
-                id='staticfiles.E002',
-            )
-        ])
+        with self.settings(STATICFILES_DIRS=[settings.STATIC_ROOT]):
+            self.assertEqual(check_finders(None), [
+                Error(
+                    'The STATICFILES_DIRS setting should not contain the '
+                    'STATIC_ROOT setting.',
+                    id='staticfiles.E002',
+                )
+            ])
 
-    @override_settings(STATICFILES_DIRS=[('prefix', settings.STATIC_ROOT)])
     def test_dirs_contains_static_root_in_tuple(self):
-        self.assertEqual(check_finders(None), [
-            Error(
-                'The STATICFILES_DIRS setting should not contain the '
-                'STATIC_ROOT setting.',
-                id='staticfiles.E002',
-            )
-        ])
+        with self.settings(STATICFILES_DIRS=[('prefix', settings.STATIC_ROOT)]):
+            self.assertEqual(check_finders(None), [
+                Error(
+                    'The STATICFILES_DIRS setting should not contain the '
+                    'STATIC_ROOT setting.',
+                    id='staticfiles.E002',
+                )
+            ])
 
-    @override_settings(STATICFILES_DIRS=[('prefix/', '/fake/path')])
     def test_prefix_contains_trailing_slash(self):
-        self.assertEqual(check_finders(None), [
-            Error(
-                "The prefix 'prefix/' in the STATICFILES_DIRS setting must "
-                "not end with a slash.",
-                id='staticfiles.E003',
-            )
-        ])
+        static_dir = Path(TEST_ROOT) / 'project' / 'documents'
+        with self.settings(STATICFILES_DIRS=[('prefix/', static_dir)]):
+            self.assertEqual(check_finders(None), [
+                Error(
+                    "The prefix 'prefix/' in the STATICFILES_DIRS setting must "
+                    "not end with a slash.",
+                    id='staticfiles.E003',
+                ),
+            ])
+
+    def test_nonexistent_directories(self):
+        with self.settings(STATICFILES_DIRS=[
+            '/fake/path',
+            ('prefix', '/fake/prefixed/path'),
+        ]):
+            self.assertEqual(check_finders(None), [
+                Warning(
+                    "The directory '/fake/path' in the STATICFILES_DIRS "
+                    "setting does not exist.",
+                    id='staticfiles.W004',
+                ),
+                Warning(
+                    "The directory '/fake/prefixed/path' in the "
+                    "STATICFILES_DIRS setting does not exist.",
+                    id='staticfiles.W004',
+                ),
+            ])
+            # Nonexistent directories are skipped.
+            finder = get_finder('django.contrib.staticfiles.finders.FileSystemFinder')
+            self.assertEqual(list(finder.list(None)), [])
