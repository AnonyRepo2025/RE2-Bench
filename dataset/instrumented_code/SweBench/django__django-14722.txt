diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index d3ac1c9..55b3672 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/django__django-14722/django/db/migrations/autodetector.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 import functools
 import re
 from itertools import chain
@@ -178,8 +371,12 @@ class MigrationAutodetector:
         # Generate index removal operations before field is removed
         self.generate_removed_constraints()
         self.generate_removed_indexes()
-        # Generate field operations
+        # Generate field renaming operations.
         self.generate_renamed_fields()
+        # Generate removal of foo together.
+        self.generate_removed_altered_unique_together()
+        self.generate_removed_altered_index_together()
+        # Generate field operations.
         self.generate_removed_fields()
         self.generate_added_fields()
         self.generate_altered_fields()
@@ -1128,8 +1325,8 @@ class MigrationAutodetector:
             dependencies.append((through_app_label, through_object_name, None, True))
         return dependencies
 
-    def _generate_altered_foo_together(self, operation):
-        option_name = operation.option_name
+    @inspect_code
+    def _get_altered_foo_together_operations(self, option_name):
         for app_label, model_name in sorted(self.kept_model_keys):
             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
             old_model_state = self.from_state.models[app_label, old_model_name]
@@ -1157,13 +1354,49 @@ class MigrationAutodetector:
                             dependencies.extend(self._get_dependencies_for_foreign_key(
                                 app_label, model_name, field, self.to_state,
                             ))
+                yield (
+                    old_value,
+                    new_value,
+                    app_label,
+                    model_name,
+                    dependencies,
+                )
 
+    def _generate_removed_altered_foo_together(self, operation):
+        for (
+            old_value,
+            new_value,
+            app_label,
+            model_name,
+            dependencies,
+        ) in self._get_altered_foo_together_operations(operation.option_name):
+            removal_value = new_value.intersection(old_value)
+            if removal_value or old_value:
                 self.add_operation(
                     app_label,
-                    operation(
-                        name=model_name,
-                        **{option_name: new_value}
-                    ),
+                    operation(name=model_name, **{operation.option_name: removal_value}),
+                    dependencies=dependencies,
+                )
+
+    def generate_removed_altered_unique_together(self):
+        self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)
+
+    def generate_removed_altered_index_together(self):
+        self._generate_removed_altered_foo_together(operations.AlterIndexTogether)
+
+    def _generate_altered_foo_together(self, operation):
+        for (
+            old_value,
+            new_value,
+            app_label,
+            model_name,
+            dependencies,
+        ) in self._get_altered_foo_together_operations(operation.option_name):
+            removal_value = new_value.intersection(old_value)
+            if new_value != removal_value:
+                self.add_operation(
+                    app_label,
+                    operation(name=model_name, **{operation.option_name: new_value}),
                     dependencies=dependencies,
                 )
 
diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py
index 8fb4897..eb98da9 100644
--- a/tests/migrations/test_autodetector.py
+++ b/tests/migrations/test_autodetector.py
@@ -1570,9 +1570,26 @@ class AutodetectorTests(TestCase):
         )
         # Right number/type of migrations?
         self.assertNumberMigrations(changes, "otherapp", 1)
-        self.assertOperationTypes(changes, "otherapp", 0, ["AlterUniqueTogether", "AlterIndexTogether"])
-        self.assertOperationAttributes(changes, "otherapp", 0, 0, name="book", unique_together={("title", "author")})
-        self.assertOperationAttributes(changes, "otherapp", 0, 1, name="book", index_together={("title", "author")})
+        self.assertOperationTypes(changes, 'otherapp', 0, [
+            'AlterUniqueTogether',
+            'AlterIndexTogether',
+            'AlterUniqueTogether',
+            'AlterIndexTogether',
+        ])
+        self.assertOperationAttributes(
+            changes, 'otherapp', 0, 0, name='book', unique_together=set(),
+        )
+        self.assertOperationAttributes(
+            changes, 'otherapp', 0, 1, name='book', index_together=set(),
+        )
+        self.assertOperationAttributes(
+            changes, 'otherapp', 0, 2, name='book',
+            unique_together={('title', 'author')},
+        )
+        self.assertOperationAttributes(
+            changes, 'otherapp', 0, 3, name='book',
+            index_together={('title', 'author')},
+        )
 
     def test_add_field_and_foo_together(self):
         """
@@ -1619,10 +1636,100 @@ class AutodetectorTests(TestCase):
         )
         # Right number/type of migrations?
         self.assertNumberMigrations(changes, "otherapp", 1)
-        self.assertOperationTypes(changes, "otherapp", 0, ["AlterUniqueTogether", "AlterIndexTogether", "RemoveField"])
-        self.assertOperationAttributes(changes, "otherapp", 0, 0, name="book", unique_together={("author", "title")})
-        self.assertOperationAttributes(changes, "otherapp", 0, 1, name="book", index_together={("author", "title")})
-        self.assertOperationAttributes(changes, "otherapp", 0, 2, model_name="book", name="newfield")
+        self.assertOperationTypes(changes, 'otherapp', 0, [
+            'AlterUniqueTogether',
+            'AlterIndexTogether',
+            'AlterUniqueTogether',
+            'AlterIndexTogether',
+            'RemoveField',
+        ])
+        self.assertOperationAttributes(
+            changes, 'otherapp', 0, 0, name='book', unique_together=set(),
+        )
+        self.assertOperationAttributes(
+            changes, 'otherapp', 0, 1, name='book', index_together=set(),
+        )
+        self.assertOperationAttributes(
+            changes, 'otherapp', 0, 2, name='book',
+            unique_together={('author', 'title')},
+        )
+        self.assertOperationAttributes(
+            changes, 'otherapp', 0, 3, name='book',
+            index_together={('author', 'title')},
+        )
+        self.assertOperationAttributes(
+            changes, 'otherapp', 0, 4, model_name='book', name='newfield',
+        )
+
+    def test_alter_field_and_foo_together(self):
+        """Fields are altered after deleting some index/unique_together."""
+        initial_author = ModelState('testapp', 'Author', [
+            ('id', models.AutoField(primary_key=True)),
+            ('name', models.CharField(max_length=200)),
+            ('age', models.IntegerField(db_index=True)),
+        ], {
+            'unique_together': {('name',)},
+        })
+        author_reversed_constraints = ModelState('testapp', 'Author', [
+            ('id', models.AutoField(primary_key=True)),
+            ('name', models.CharField(max_length=200, unique=True)),
+            ('age', models.IntegerField()),
+        ], {
+            'index_together': {('age',)},
+        })
+        changes = self.get_changes([initial_author], [author_reversed_constraints])
+
+        self.assertNumberMigrations(changes, 'testapp', 1)
+        self.assertOperationTypes(changes, 'testapp', 0, [
+            'AlterUniqueTogether',
+            'AlterField',
+            'AlterField',
+            'AlterIndexTogether',
+        ])
+        self.assertOperationAttributes(
+            changes, 'testapp', 0, 0, name='author', unique_together=set(),
+        )
+        self.assertOperationAttributes(
+            changes, 'testapp', 0, 1, model_name='author', name='age',
+        )
+        self.assertOperationAttributes(
+            changes, 'testapp', 0, 2, model_name='author', name='name',
+        )
+        self.assertOperationAttributes(
+            changes, 'testapp', 0, 3, name='author', index_together={('age',)},
+        )
+
+    def test_partly_alter_foo_together(self):
+        initial_author = ModelState('testapp', 'Author', [
+            ('id', models.AutoField(primary_key=True)),
+            ('name', models.CharField(max_length=200)),
+            ('age', models.IntegerField()),
+        ], {
+            'unique_together': {('name',), ('age',)},
+            'index_together': {('name',)},
+        })
+        author_reversed_constraints = ModelState('testapp', 'Author', [
+            ('id', models.AutoField(primary_key=True)),
+            ('name', models.CharField(max_length=200)),
+            ('age', models.IntegerField()),
+        ], {
+            'unique_together': {('age',)},
+            'index_together': {('name',), ('age',)},
+        })
+        changes = self.get_changes([initial_author], [author_reversed_constraints])
+
+        self.assertNumberMigrations(changes, 'testapp', 1)
+        self.assertOperationTypes(changes, 'testapp', 0, [
+            'AlterUniqueTogether',
+            'AlterIndexTogether',
+        ])
+        self.assertOperationAttributes(
+            changes, 'testapp', 0, 0, name='author', unique_together={('age',)},
+        )
+        self.assertOperationAttributes(
+            changes, 'testapp', 0, 1, name='author',
+            index_together={('name',), ('age',)},
+        )
 
     def test_rename_field_and_foo_together(self):
         """
@@ -1635,11 +1742,27 @@ class AutodetectorTests(TestCase):
         )
         # Right number/type of migrations?
         self.assertNumberMigrations(changes, "otherapp", 1)
-        self.assertOperationTypes(changes, "otherapp", 0, ["RenameField", "AlterUniqueTogether", "AlterIndexTogether"])
-        self.assertOperationAttributes(changes, "otherapp", 0, 1, name="book", unique_together={
-            ("title", "newfield2")
-        })
-        self.assertOperationAttributes(changes, "otherapp", 0, 2, name="book", index_together={("title", "newfield2")})
+        self.assertOperationTypes(changes, 'otherapp', 0, [
+            'RenameField',
+            'AlterUniqueTogether',
+            'AlterIndexTogether',
+            'AlterUniqueTogether',
+            'AlterIndexTogether',
+        ])
+        self.assertOperationAttributes(
+            changes, 'otherapp', 0, 1, name='book', unique_together=set(),
+        )
+        self.assertOperationAttributes(
+            changes, 'otherapp', 0, 2, name='book', index_together=set(),
+        )
+        self.assertOperationAttributes(
+            changes, 'otherapp', 0, 3, name='book',
+            unique_together={('title', 'newfield2')},
+        )
+        self.assertOperationAttributes(
+            changes, 'otherapp', 0, 4, name='book',
+            index_together={('title', 'newfield2')},
+        )
 
     def test_proxy(self):
         """The autodetector correctly deals with proxy models."""
