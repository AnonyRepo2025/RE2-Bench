diff --git a/astropy/units/decorators.py b/astropy/units/decorators.py
index 8bece5a..fb83f40 100644
--- a/astropy/units/decorators.py
+++ b/astropy/units/decorators.py
@@ -1,3 +1,196 @@
+import inspect
+def recursive_object_seralizer(obj, visited):
+    seralized_dict = {}
+    keys = list(obj.__dict__)
+    for k in keys:
+        if id(obj.__dict__[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(obj.__dict__[k])
+            continue
+        if isinstance(obj.__dict__[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = obj.__dict__[k]
+        elif isinstance(obj.__dict__[k], tuple):
+            ## handle tuple
+            seralized_dict[k] = recursive_tuple_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], set):
+            ## handle set
+            seralized_dict[k] = recursive_set_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], list):
+            ## handle list
+            seralized_dict[k] = recursive_list_seralizer(obj.__dict__[k], visited)
+        elif hasattr(obj.__dict__[k], '__dict__'):
+            ## handle object
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_object_seralizer(obj.__dict__[k], visited)
+        elif isinstance(obj.__dict__[k], dict):
+            visited.append(id(obj.__dict__[k]))
+            seralized_dict[k] = recursive_dict_seralizer(obj.__dict__[k], visited)
+        elif callable(obj.__dict__[k]):
+            ## handle function
+            if hasattr(obj.__dict__[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(obj.__dict__[k].__name__)
+        else:
+            seralized_dict[k] = str(obj.__dict__[k])
+    return seralized_dict
+
+def recursive_dict_seralizer(dictionary, visited):
+    seralized_dict = {}
+    keys = list(dictionary)
+    for k in keys:
+        if id(dictionary[k]) in visited:
+            seralized_dict[k] = "<RECURSIVE {}>".format(dictionary[k])
+            continue
+        # if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+        #     pass
+        # else:
+        #     visited.append(id(dictionary[k]))
+        if isinstance(dictionary[k], (float, int, str, bool, type(None))):
+            seralized_dict[k] = dictionary[k]
+        elif isinstance(dictionary[k], list):
+            seralized_dict[k] = recursive_list_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], tuple):
+            seralized_dict[k] = recursive_tuple_seralizer(dictionary[k], visited)
+        elif isinstance(dictionary[k], set):
+            seralized_dict[k] = recursive_set_seralizer(dictionary[k], visited)        
+        elif hasattr(dictionary[k], '__dict__'):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_object_seralizer(dictionary[k], visited)
+        elif callable(dictionary[k]):
+            if hasattr(dictionary[k], '__name__'):
+                seralized_dict[k] = "<function {}>".format(dictionary[k].__name__)
+        elif isinstance(dictionary[k], dict):
+            visited.append(id(dictionary[k]))
+            seralized_dict[k] = recursive_dict_seralizer(dictionary[k], visited)
+        else:
+            seralized_dict[k] =str(dictionary[k])
+    return seralized_dict   
+
+def recursive_set_seralizer(set_data, visited):
+    new_set = set()
+    for s in set_data:
+        if id(s) in visited:
+            continue 
+        if isinstance(s, (float, int, str, bool, type(None))):
+            new_set.add(s)
+        elif isinstance(s, tuple):
+            new_set.add(recursive_tuple_seralizer(s, visited))
+        elif isinstance(s, list):
+            new_set.add(recursive_list_seralizer(s, visited))
+        elif isinstance(s, set):
+            new_set.add(recursive_set_seralizer(s,visited))
+        elif isinstance(s, dict):
+            visited.append(id(s))
+            new_set.add(recursive_dict_seralizer(s, visited))
+        elif hasattr(s, '__dict__'):
+            visited.append(id(s))
+            new_set.add(str(recursive_object_seralizer(s, visited)))
+        elif callable(s):
+            if hasattr(s, '__name__'):
+                new_set.add("<function {}>".format(s.__name__))
+        else:
+            new_set.add(str(s))
+    return new_set
+    
+
+def recursive_tuple_seralizer(tup, visited):
+    new_tup = ()
+    for t in tup:
+        if id(t) in visited:
+           continue
+        if isinstance(t, (float, int, str, bool, type(None))):
+            new_tup = (*new_tup, t)
+        elif isinstance(t, tuple):
+            new_tup = (*new_tup, recursive_tuple_seralizer(t, visited))
+        elif isinstance(t, list):
+            new_tup = (*new_tup, recursive_list_seralizer(t, visited))
+        elif isinstance(t, set):
+            new_tup = (*new_tup, recursive_set_seralizer(t, visited))
+        elif isinstance(t, dict):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_dict_seralizer(t, visited))
+        elif hasattr(t, '__dict__'):
+            visited.append(id(t))
+            new_tup = (*new_tup, recursive_object_seralizer(t, visited))
+        elif callable(t):
+            if hasattr(t, '__name__'):
+                new_tup = (*new_tup, "<function {}>".format(t.__name__))
+        else:
+            new_tup = (*new_tup, str(t))
+    return new_tup
+
+def recursive_list_seralizer(li, visited):
+    new_list = []
+    for l in li:
+        if id(l) in visited:
+            continue
+        if isinstance(l, (float, int, str, bool, type(None))):
+            new_list.append(l)
+        elif isinstance(l, tuple):
+            new_list.append(recursive_tuple_seralizer(l, visited))
+        elif isinstance(l, list):
+            new_list.append(recursive_list_seralizer(l, visited))
+        elif isinstance(l, set):
+            new_list.append(recursive_set_seralizer(l, visited))
+        elif hasattr(l, '__dict__'):
+            visited.append(id(l))
+            new_list.append(recursive_object_seralizer(l, visited))
+        elif isinstance(l, dict):
+            visited.append(id(l))
+            new_list.append(recursive_dict_seralizer(l, visited))
+        elif callable(l):
+            if hasattr(l, '__name__'):
+                new_list.append("<function {}>".format(l.__name__))
+        else:
+            new_list.append(str(l))       
+
+def inspect_code(func):
+    def wrapper(*args, **kwargs):
+        visited = []
+        filename = "/home/changshu/CODEMIND/scripts/swebench/swebench_playground/obj/astropy__astropy-7336/astropy/units/decorators.py"
+        para_dict = {"name": func.__name__}
+        args_names = inspect.getfullargspec(func).args
+        if len(args) > 0 and hasattr(args[0], '__dict__') and args_names[0] == 'self':
+            ## 'self'
+            self_args = args[0]
+            para_dict['self'] = recursive_object_seralizer(self_args, [id(self_args)])
+        else:
+            para_dict['self'] = {}
+        if len(args) > 0 :
+            if args_names[0] == 'self':
+                other_args = {}
+                for m,n in zip(args_names[1:], args[1:]):
+                    other_args[m] = n
+            else:
+                other_args = {}
+                for m,n in zip(args_names, args):
+                    other_args[m] = n
+            para_dict['args'] = recursive_dict_seralizer(other_args, [id(other_args)])
+        else:
+            para_dict['args'] = {}
+        if kwargs:
+            para_dict['kwargs'] = recursive_dict_seralizer(kwargs, [id(kwargs)])
+        else:
+            para_dict['kwargs'] = {}
+            
+        result = func(*args, **kwargs)
+        ## seralize the return value
+        if isinstance(result, tuple):
+            ret = recursive_tuple_seralizer(result, [])
+        elif isinstance(result, (float, int, str)):
+            ret = result
+        elif isinstance(result, list):
+            ret = recursive_list_seralizer(result, [])
+        elif isinstance(result, dict):
+            ret = recursive_dict_seralizer(result, [])
+        elif hasattr(result, '__dict__'):
+            ret = recursive_object_seralizer(result, [])
+        elif callable(result):
+            ret = "<function {}>".format(result.__name__)
+        else:
+            ret = str(result)
+        para_dict["return"] = ret
+        print("@[DATA]@", filename,"[SEP]", para_dict, "[/SEP]")
+        return result
+    return wrapper
 # -*- coding: utf-8 -*-
 # Licensed under a 3-clause BSD style license - see LICENSE.rst
 
@@ -152,12 +345,14 @@ class QuantityInput:
         self.equivalencies = kwargs.pop('equivalencies', [])
         self.decorator_kwargs = kwargs
 
+    @inspect_code
     def __call__(self, wrapped_function):
 
         # Extract the function signature for the function we are wrapping.
         wrapped_signature = inspect.signature(wrapped_function)
 
         # Define a new function to return in place of the wrapped one
+        @inspect_code
         @wraps(wrapped_function)
         def wrapper(*func_args, **func_kwargs):
             # Bind the arguments to our new function to the signature of the original.
@@ -220,7 +415,7 @@ class QuantityInput:
             # Call the original function with any equivalencies in force.
             with add_enabled_equivalencies(self.equivalencies):
                 return_ = wrapped_function(*func_args, **func_kwargs)
-            if wrapped_signature.return_annotation is not inspect.Signature.empty:
+            if wrapped_signature.return_annotation not in (inspect.Signature.empty, None):
                 return return_.to(wrapped_signature.return_annotation)
             else:
                 return return_
diff --git a/astropy/units/tests/py3_test_quantity_annotations.py b/astropy/units/tests/py3_test_quantity_annotations.py
deleted file mode 100644
index 4956b0e..0000000
--- a/astropy/units/tests/py3_test_quantity_annotations.py
+++ /dev/null
@@ -1,287 +0,0 @@
-# -*- coding: utf-8 -*-
-# Licensed under a 3-clause BSD style license - see LICENSE.rst
-
-from functools import wraps
-from textwrap import dedent
-
-import pytest
-
-from ... import units as u  # pylint: disable=W0611
-
-
-def py3only(func):
-    @wraps(func)
-    def wrapper(*args, **kwargs):
-        src = func(*args, **kwargs)
-        code = compile(dedent(src), __file__, 'exec')
-        # This uses an unqualified exec statement illegally in Python 2,
-        # but perfectly allowed in Python 3 so in fact we eval the exec
-        # call :)
-        eval('exec(code)')
-
-    return wrapper
-
-
-@py3only
-@pytest.mark.parametrize("solarx_unit,solary_unit", [
-                         ("u.arcsec", "u.arcsec"),
-                         ("'angle'", "'angle'")])
-def test_args3(solarx_unit, solary_unit):
-    src = """
-    @u.quantity_input
-    def myfunc_args(solarx: {0}, solary: {1}):
-        return solarx, solary
-
-    solarx, solary = myfunc_args(1*u.arcsec, 1*u.arcsec)
-
-    assert isinstance(solarx, u.Quantity)
-    assert isinstance(solary, u.Quantity)
-
-    assert solarx.unit == u.arcsec
-    assert solary.unit == u.arcsec
-    """.format(solarx_unit, solary_unit)
-    return src
-
-
-@py3only
-@pytest.mark.parametrize("solarx_unit,solary_unit", [
-                         ("u.arcsec", "u.arcsec"),
-                         ("'angle'", "'angle'")])
-def test_args_noconvert3(solarx_unit, solary_unit):
-    src = """
-    @u.quantity_input()
-    def myfunc_args(solarx: {0}, solary: {1}):
-        return solarx, solary
-
-    solarx, solary = myfunc_args(1*u.deg, 1*u.arcmin)
-
-    assert isinstance(solarx, u.Quantity)
-    assert isinstance(solary, u.Quantity)
-
-    assert solarx.unit == u.deg
-    assert solary.unit == u.arcmin
-    """.format(solarx_unit, solary_unit)
-    return src
-
-
-@py3only
-@pytest.mark.parametrize("solarx_unit", [
-                         "u.arcsec", "'angle'"])
-def test_args_nonquantity3(solarx_unit):
-    src = """
-    @u.quantity_input
-    def myfunc_args(solarx: {0}, solary):
-        return solarx, solary
-
-    solarx, solary = myfunc_args(1*u.arcsec, 100)
-
-    assert isinstance(solarx, u.Quantity)
-    assert isinstance(solary, int)
-
-    assert solarx.unit == u.arcsec
-    """.format(solarx_unit)
-    return src
-
-
-@py3only
-@pytest.mark.parametrize("solarx_unit,solary_unit", [
-                         ("u.arcsec", "u.eV"),
-                         ("'angle'", "'energy'")])
-def test_arg_equivalencies3(solarx_unit, solary_unit):
-    src = """
-    @u.quantity_input(equivalencies=u.mass_energy())
-    def myfunc_args(solarx: {0}, solary: {1}):
-        return solarx, solary+(10*u.J)  # Add an energy to check equiv is working
-
-    solarx, solary = myfunc_args(1*u.arcsec, 100*u.gram)
-
-    assert isinstance(solarx, u.Quantity)
-    assert isinstance(solary, u.Quantity)
-
-    assert solarx.unit == u.arcsec
-    assert solary.unit == u.gram
-    """.format(solarx_unit, solary_unit)
-    return src
-
-
-@py3only
-@pytest.mark.parametrize("solarx_unit,solary_unit", [
-                         ("u.arcsec", "u.deg"),
-                         ("'angle'", "'angle'")])
-def test_wrong_unit3(solarx_unit, solary_unit):
-    src = """
-    @u.quantity_input
-    def myfunc_args(solarx: {0}, solary: {1}):
-        return solarx, solary
-
-    with pytest.raises(u.UnitsError) as e:
-        solarx, solary = myfunc_args(1*u.arcsec, 100*u.km)
-
-    str_to = str({1})
-    assert str(e.value) == "Argument 'solary' to function 'myfunc_args' must be in units convertible to '{{0}}'.".format(str_to)
-    """.format(solarx_unit, solary_unit)
-    return src
-
-
-@py3only
-@pytest.mark.parametrize("solarx_unit,solary_unit", [
-                         ("u.arcsec", "u.deg"),
-                         ("'angle'", "'angle'")])
-def test_not_quantity3(solarx_unit, solary_unit):
-    src = """
-    @u.quantity_input
-    def myfunc_args(solarx: {0}, solary: {1}):
-        return solarx, solary
-
-    with pytest.raises(TypeError) as e:
-        solarx, solary = myfunc_args(1*u.arcsec, 100)
-    assert str(e.value) == "Argument 'solary' to function 'myfunc_args' has no 'unit' attribute. You may want to pass in an astropy Quantity instead."
-    """.format(solarx_unit, solary_unit)
-    return src
-
-
-@py3only
-def test_decorator_override():
-    src = """
-    @u.quantity_input(solarx=u.arcsec)
-    def myfunc_args(solarx: u.km, solary: u.arcsec):
-        return solarx, solary
-
-    solarx, solary = myfunc_args(1*u.arcsec, 1*u.arcsec)
-
-    assert isinstance(solarx, u.Quantity)
-    assert isinstance(solary, u.Quantity)
-
-    assert solarx.unit == u.arcsec
-    assert solary.unit == u.arcsec
-    """
-    return src
-
-
-@py3only
-@pytest.mark.parametrize("solarx_unit,solary_unit", [
-                         ("u.arcsec", "u.deg"),
-                         ("'angle'", "'angle'")])
-def test_kwargs3(solarx_unit, solary_unit):
-    src = """
-    @u.quantity_input
-    def myfunc_args(solarx: {0}, solary, myk: {1}=1*u.arcsec):
-        return solarx, solary, myk
-
-    solarx, solary, myk = myfunc_args(1*u.arcsec, 100, myk=100*u.deg)
-
-    assert isinstance(solarx, u.Quantity)
-    assert isinstance(solary, int)
-    assert isinstance(myk, u.Quantity)
-
-    assert myk.unit == u.deg
-    """.format(solarx_unit, solary_unit)
-    return src
-
-
-@py3only
-@pytest.mark.parametrize("solarx_unit,solary_unit", [
-                         ("u.arcsec", "u.deg"),
-                         ("'angle'", "'angle'")])
-def test_unused_kwargs3(solarx_unit, solary_unit):
-    src = """
-    @u.quantity_input
-    def myfunc_args(solarx: {0}, solary, myk: {1}=1*u.arcsec, myk2=1000):
-        return solarx, solary, myk, myk2
-
-    solarx, solary, myk, myk2 = myfunc_args(1*u.arcsec, 100, myk=100*u.deg, myk2=10)
-
-    assert isinstance(solarx, u.Quantity)
-    assert isinstance(solary, int)
-    assert isinstance(myk, u.Quantity)
-    assert isinstance(myk2, int)
-
-    assert myk.unit == u.deg
-    assert myk2 == 10
-    """.format(solarx_unit, solary_unit)
-    return src
-
-
-@py3only
-@pytest.mark.parametrize("solarx_unit,energy", [
-                         ("u.arcsec", "u.eV"),
-                         ("'angle'", "'energy'")])
-def test_kwarg_equivalencies3(solarx_unit, energy):
-    src = """
-    @u.quantity_input(equivalencies=u.mass_energy())
-    def myfunc_args(solarx: {0}, energy: {1}=10*u.eV):
-        return solarx, energy+(10*u.J)  # Add an energy to check equiv is working
-
-    solarx, energy = myfunc_args(1*u.arcsec, 100*u.gram)
-
-    assert isinstance(solarx, u.Quantity)
-    assert isinstance(energy, u.Quantity)
-
-    assert solarx.unit == u.arcsec
-    assert energy.unit == u.gram
-    """.format(solarx_unit, energy)
-    return src
-
-
-@py3only
-@pytest.mark.parametrize("solarx_unit,solary_unit", [
-                         ("u.arcsec", "u.deg"),
-                         ("'angle'", "'angle'")])
-def test_kwarg_wrong_unit3(solarx_unit, solary_unit):
-    src = """
-    @u.quantity_input
-    def myfunc_args(solarx: {0}, solary: {1}=10*u.deg):
-        return solarx, solary
-
-    with pytest.raises(u.UnitsError) as e:
-        solarx, solary = myfunc_args(1*u.arcsec, solary=100*u.km)
-
-    str_to = str({1})
-    assert str(e.value) == "Argument 'solary' to function 'myfunc_args' must be in units convertible to '{{0}}'.".format(str_to)
-    """.format(solarx_unit, solary_unit)
-    return src
-
-
-@py3only
-@pytest.mark.parametrize("solarx_unit,solary_unit", [
-                         ("u.arcsec", "u.deg"),
-                         ("'angle'", "'angle'")])
-def test_kwarg_not_quantity3(solarx_unit, solary_unit):
-    src = """
-    @u.quantity_input
-    def myfunc_args(solarx: {0}, solary: {1}=10*u.deg):
-        return solarx, solary
-
-    with pytest.raises(TypeError) as e:
-        solarx, solary = myfunc_args(1*u.arcsec, solary=100)
-    assert str(e.value) == "Argument 'solary' to function 'myfunc_args' has no 'unit' attribute. You may want to pass in an astropy Quantity instead."
-    """.format(solarx_unit, solary_unit)
-    return src
-
-
-@py3only
-@pytest.mark.parametrize("solarx_unit,solary_unit", [
-                         ("u.arcsec", "u.deg"),
-                         ("'angle'", "'angle'")])
-def test_kwarg_default3(solarx_unit, solary_unit):
-    src = """
-    @u.quantity_input
-    def myfunc_args(solarx: {0}, solary: {1}=10*u.deg):
-        return solarx, solary
-
-    solarx, solary = myfunc_args(1*u.arcsec)
-    """.format(solarx_unit, solary_unit)
-    return src
-
-
-@py3only
-def test_return_annotation():
-    src = """
-    @u.quantity_input
-    def myfunc_args(solarx: u.arcsec) -> u.deg:
-        return solarx
-
-    solarx = myfunc_args(1*u.arcsec)
-    assert solarx.unit is u.deg
-    """
-    return src
diff --git a/astropy/units/tests/test_quantity_decorator.py b/astropy/units/tests/test_quantity_decorator.py
index 1ab5d36..8ba76e7 100644
--- a/astropy/units/tests/test_quantity_decorator.py
+++ b/astropy/units/tests/test_quantity_decorator.py
@@ -5,8 +5,6 @@ import pytest
 
 from ... import units as u
 
-from .py3_test_quantity_annotations import *
-
 # list of pairs (target unit/physical type, input unit)
 x_inputs = [(u.arcsec, u.deg), ('angle', u.deg),
             (u.kpc/u.Myr, u.km/u.s), ('speed', u.km/u.s),
